# -*- coding: utf-8 -*-
from __future__ import absolute_import, unicode_literals

from dingtalk.client.api.base import DingTalkBaseAPI


class TbDingDing(DingTalkBaseAPI):
    """
    钉钉API
    """

    def dingtalk_corp_message_corpconversation_sendmock(
            self,
            microapp_agent_id,
            to_user,
            to_party,
            message_type,
            message
    ):
        """
        企业会话消息发送
        测试接入top是否有问题
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27851

        :param microapp_agent_id: 微应用agentId
        :param to_user: 消息接收者userid列表
        :param to_party: 消息接收者部门列表
        :param message_type: 消息类型
        :param message: 消息体
        """
        return self._top_request(
            "dingtalk.corp.message.corpconversation.sendmock",
            {
                "microapp_agent_id": microapp_agent_id,
                "to_user": to_user,
                "to_party": to_party,
                "message_type": message_type,
                "message": message
            }
        )

    def dingtalk_corp_emp_search(
            self,
            keyword='',
            offset='',
            size=''
    ):
        """
        企业通讯录员工搜索
        钉钉企业通讯录搜索接口, 支持翻页
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27910

        :param keyword: 搜索关键字
        :param offset: 偏移量
        :param size: 请求数量
        """
        return self._top_request(
            "dingtalk.corp.emp.search",
            {
                "keyword": keyword,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_corp_ext_add(
            self,
            contact
    ):
        """
        添加企业外部联系人
        钉钉企业外部通讯录, 添加外部联系人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28177

        :param contact: 外部联系人信息
        """
        return self._top_request(
            "dingtalk.corp.ext.add",
            {
                "contact": contact
            },
            result_processor=lambda x: x["userid"]
        )

    def dingtalk_corp_ext_list(
            self,
            size='20',
            offset='0'
    ):
        """
        外部联系人列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28178

        :param size: 分页大小, 最大100
        :param offset: 偏移位置
        """
        return self._top_request(
            "dingtalk.corp.ext.list",
            {
                "size": size,
                "offset": offset
            }
        )

    def dingtalk_corp_ext_listlabelgroups(
            self,
            size='20',
            offset='0'
    ):
        """
        标签列表
        拉取标签列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28179

        :param size: 分页大小,最大100
        :param offset: 偏移位置
        """
        return self._top_request(
            "dingtalk.corp.ext.listlabelgroups",
            {
                "size": size,
                "offset": offset
            }
        )

    def dingtalk_corp_encryption_key_list(
            self
    ):
        """
        企业密钥列表
        查询企业密钥列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28386

        """
        return self._top_request(
            "dingtalk.corp.encryption.key.list"
        )

    def dingtalk_corp_conference_details_query(
            self,
            since_time='',
            limit='',
            caller_user_id='',
            member_user_id=''
    ):
        """
        钉钉企业电话会议详情记录查询
        查询企业电话会议详情记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28418

        :param since_time: 查询起始时间
        :param limit: 查询个数，上限100
        :param caller_user_id: 主叫userId
        :param member_user_id: 成员userId
        """
        return self._top_request(
            "dingtalk.corp.conference.details.query",
            {
                "since_time": since_time,
                "limit": limit,
                "caller_user_id": caller_user_id,
                "member_user_id": member_user_id
            }
        )

    def dingtalk_corp_ext_update(
            self,
            contact
    ):
        """
        更新外部联系人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28531

        :param contact: 外部联系人信息
        """
        return self._top_request(
            "dingtalk.corp.ext.update",
            {
                "contact": contact
            }
        )

    def dingtalk_corp_conversation_corpconversion_listmember(
            self,
            open_conversation_id,
            offset,
            count
    ):
        """
        获取企业群群成员接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28620

        :param open_conversation_id: 群组id
        :param offset: 群成员列表偏移量
        :param count: 本次请求获取群成员的大小，最大为100
        """
        return self._top_request(
            "dingtalk.corp.conversation.corpconversion.listmember",
            {
                "open_conversation_id": open_conversation_id,
                "offset": offset,
                "count": count
            }
        )

    def dingtalk_corp_conversation_corpconversion_getconversation(
            self,
            open_conversation_id
    ):
        """
        获取企业群基本信息
        获取企业群基本信息接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28621

        :param open_conversation_id: 群组ID
        """
        return self._top_request(
            "dingtalk.corp.conversation.corpconversion.getconversation",
            {
                "open_conversation_id": open_conversation_id
            }
        )

    def dingtalk_corp_message_corpconversation_asyncsend(
            self,
            msgtype,
            agent_id,
            msgcontent,
            userid_list='',
            dept_id_list='',
            to_all_user='false'
    ):
        """
        企业会话消息异步发送
        企业会话消息异步发送接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28915

        :param msgtype: 消息类型,如text、file、oa等，具体见文档
        :param agent_id: 微应用的id
        :param msgcontent: 与msgtype对应的消息体，具体见文档
        :param userid_list: 接收者的用户userid列表
        :param dept_id_list: 接收者的部门id列表
        :param to_all_user: 是否发送给企业全部用户
        """
        return self._top_request(
            "dingtalk.corp.message.corpconversation.asyncsend",
            {
                "msgtype": msgtype,
                "agent_id": agent_id,
                "msgcontent": msgcontent,
                "userid_list": userid_list,
                "dept_id_list": dept_id_list,
                "to_all_user": to_all_user
            }
        )

    def dingtalk_corp_message_corpconversation_getsendprogress(
            self,
            agent_id,
            task_id
    ):
        """
        获取异步发送企业会话消息的发送进度
        获取异步发送企业会话消息的进度
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28917

        :param agent_id: 发送消息时使用的微应用的id
        :param task_id: 发送消息时钉钉返回的任务id
        """
        return self._top_request(
            "dingtalk.corp.message.corpconversation.getsendprogress",
            {
                "agent_id": agent_id,
                "task_id": task_id
            }
        )

    def dingtalk_corp_message_corpconversation_getsendresult(
            self,
            agent_id='',
            task_id=''
    ):
        """
        获取异步向企业会话发送消息的结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28918

        :param agent_id: 微应用的agentid
        :param task_id: 异步任务的id
        """
        return self._top_request(
            "dingtalk.corp.message.corpconversation.getsendresult",
            {
                "agent_id": agent_id,
                "task_id": task_id
            }
        )

    def dingtalk_corp_message_corpconversation_asyncsendbycode(
            self,
            msgtype,
            agent_id,
            msgcontent,
            code,
            user_id_list='',
            dept_id_list='',
            to_all_user='false'
    ):
        """
        通过用户授权码异步向企业会话发送消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28919

        :param msgtype: 消息类型,如text、file、oa等，具体见文档
        :param agent_id: 微应用的id
        :param msgcontent: 与msgtype对应的消息体，具体见文档
        :param code: 用户操作产生的授权码
        :param user_id_list: 接收者的用户userid列表
        :param dept_id_list: 接收者的部门id列表
        :param to_all_user: 是否发送给企业全部用户
        """
        return self._top_request(
            "dingtalk.corp.message.corpconversation.asyncsendbycode",
            {
                "msgtype": msgtype,
                "agent_id": agent_id,
                "msgcontent": msgcontent,
                "code": code,
                "user_id_list": user_id_list,
                "dept_id_list": dept_id_list,
                "to_all_user": to_all_user
            }
        )

    def dingtalk_corp_chatbot_createorgbot(
            self,
            create_chat_bot_model
    ):
        """
        isv为企业创建企业机器人
        给ISV提供为企业创建机器人的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28964

        :param create_chat_bot_model: 创建机器人modle
        """
        return self._top_request(
            "dingtalk.corp.chatbot.createorgbot",
            {
                "create_chat_bot_model": create_chat_bot_model
            }
        )

    def dingtalk_isv_call_getuserlist(
            self,
            start='0',
            offset='200'
    ):
        """
        dingtalk.isv.call.getuserlist
        删除ISV套件对应的企业下的可以主动调用接口发起免费电话的员工
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29002

        :param start: 游标开始值
        :param offset: 批量值
        """
        return self._top_request(
            "dingtalk.isv.call.getuserlist",
            {
                "start": start,
                "offset": offset
            }
        )

    def dingtalk_isv_call_calluser(
            self,
            staff_id,
            authed_corp_id,
            authed_staff_id
    ):
        """
        主叫方发起免费电话给授权企业下的授权范围内的人员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29003

        :param staff_id: isv套件所属企业下的员工userid
        :param authed_corp_id: 授权isv套件企业的corpid
        :param authed_staff_id: 授权isv套件企业的员工userid
        """
        return self._top_request(
            "dingtalk.isv.call.calluser",
            {
                "staff_id": staff_id,
                "authed_corp_id": authed_corp_id,
                "authed_staff_id": authed_staff_id
            }
        )

    def dingtalk_isv_call_setuserlist(
            self,
            staff_id_list
    ):
        """
        设置isv发起免费电话的主叫白名单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29004

        :param staff_id_list: 套件所所属企业免费电话主叫人员工号列表
        """
        return self._top_request(
            "dingtalk.isv.call.setuserlist",
            {
                "staff_id_list": staff_id_list
            }
        )

    def dingtalk_isv_call_removeuserlist(
            self,
            staff_id_list
    ):
        """
        删除isv免费电话员工名单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29005

        :param staff_id_list: 要删除的员工userid列表
        """
        return self._top_request(
            "dingtalk.isv.call.removeuserlist",
            {
                "staff_id_list": staff_id_list
            }
        )

    def dingtalk_corp_chatbot_updateorgbot(
            self,
            icon,
            name,
            chatbot_id
    ):
        """
        修改企业机器人
        小蜜isv修改机器人名字头像接口。(接口只给小蜜用，机器人应用会白名单处理)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29054

        :param icon: 头像的mediaId
        :param name: 机器人名字
        :param chatbot_id: 创建时返回的机器人Id
        """
        return self._top_request(
            "dingtalk.corp.chatbot.updateorgbot",
            {
                "icon": icon,
                "name": name,
                "chatbot_id": chatbot_id
            }
        )

    def dingtalk_corp_chatbot_listorgbot(
            self,
            agent_id,
            type
    ):
        """
        机器人查询接口
        小蜜isv查询给企业创建的机器人接口。(接口只给小蜜用，机器人应用会白名单处理)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29055

        :param agent_id: 微应用id
        :param type: 钉钉分配的类型
        """
        return self._top_request(
            "dingtalk.corp.chatbot.listorgbot",
            {
                "agent_id": agent_id,
                "type": type
            }
        )

    def dingtalk_corp_chatbot_listorgbotbytypeandbottype(
            self,
            type,
            bot_type
    ):
        """
        通过机器人type和botType查询机器人接口
        小蜜isv查询给企业创建的机器人接口。(接口只给小蜜用，机器人应用会白名单处理)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29081

        :param type: 机器人类型(钉钉分配)
        :param bot_type: 2-企业对内机器人，3-企业对外机器人
        """
        return self._top_request(
            "dingtalk.corp.chatbot.listorgbotbytypeandbottype",
            {
                "type": type,
                "bot_type": bot_type
            }
        )

    def dingtalk_smartwork_attends_listschedule(
            self,
            work_date,
            offset='0',
            size='200'
    ):
        """
        考勤排班信息按天全量查询接口
        按天查询企业考勤排班全量信息，使用分页功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29082

        :param work_date: 排班时间，只取年月日部分
        :param offset: 偏移位置
        :param size: 分页大小，最大200
        """
        return self._top_request(
            "dingtalk.smartwork.attends.listschedule",
            {
                "work_date": work_date,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_smartwork_attends_getsimplegroups(
            self,
            offset='0',
            size='10'
    ):
        """
        获取考勤组列表详情
        获取公司自身的考勤组列表详情信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29083

        :param offset: 偏移位置
        :param size: 分页大小，最大10
        """
        return self._top_request(
            "dingtalk.smartwork.attends.getsimplegroups",
            {
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_corp_role_simplelist(
            self,
            role_id,
            size='20',
            offset='0'
    ):
        """
        获取角色的员工列表
        获取企业中角色下的员工列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29204

        :param role_id: 角色ID
        :param size: 分页大小
        :param offset: 分页偏移
        """
        return self._top_request(
            "dingtalk.corp.role.simplelist",
            {
                "role_id": role_id,
                "size": size,
                "offset": offset
            }
        )

    def dingtalk_corp_role_list(
            self,
            size='20',
            offset='0'
    ):
        """
        获取企业角色列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29205

        :param size: 分页大小
        :param offset: 分页偏移
        """
        return self._top_request(
            "dingtalk.corp.role.list",
            {
                "size": size,
                "offset": offset
            }
        )

    def dingtalk_smartwork_bpms_processinstance_create(
            self,
            process_code,
            originator_user_id,
            dept_id,
            approvers,
            form_component_values,
            agent_id='',
            cc_list='',
            cc_position=''
    ):
        """
        发起审批实例
        企业或isv调用该api，来发起一个审批实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29498

        :param process_code: 审批流的唯一码
        :param originator_user_id: 审批实例发起人的userid
        :param dept_id: 发起人所在的部门
        :param approvers: 审批人userid列表
        :param form_component_values: 审批流表单参数
        :param agent_id: 企业微应用标识
        :param cc_list: 抄送人userid列表
        :param cc_position: 抄送时间,分为（START,FINISH,START_FINISH）
        """
        return self._top_request(
            "dingtalk.smartwork.bpms.processinstance.create",
            {
                "process_code": process_code,
                "originator_user_id": originator_user_id,
                "dept_id": dept_id,
                "approvers": approvers,
                "form_component_values": form_component_values,
                "agent_id": agent_id,
                "cc_list": cc_list,
                "cc_position": cc_position
            }
        )

    def dingtalk_smartwork_checkin_record_get(
            self,
            userid_list,
            start_time,
            end_time,
            cursor,
            size
    ):
        """
        获取多个用户的签到记录
        查询多个用户一段时间范围内的签到记录，只给企业调用，ISV无法调用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29538

        :param userid_list: 需要查询的用户列表
        :param start_time: 起始时间,单位毫秒
        :param end_time: 截止时间，单位毫秒。如果是取1个人的数据，时间范围最大到10天，如果是取多个人的数据，时间范围最大1天。
        :param cursor: 分页查询的游标，最开始可以传0
        :param size: 分页查询的每页大小，最大100
        """
        return self._top_request(
            "dingtalk.smartwork.checkin.record.get",
            {
                "userid_list": userid_list,
                "start_time": start_time,
                "end_time": end_time,
                "cursor": cursor,
                "size": size
            }
        )

    def dingtalk_smartwork_bpms_process_sync(
            self,
            agent_id,
            src_process_code,
            target_process_code,
            biz_category_id='',
            process_name=''
    ):
        """
        更新审批流
        ISV调用该接口，可以更新对应授权企业的审批单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29766

        :param agent_id: 企业微应用标识
        :param src_process_code: 源审批流的唯一码
        :param target_process_code: 目标审批流的唯一码
        :param biz_category_id: 业务分类标识（建议采用JAVA包名的命名方式,如:com.alibaba）
        :param process_name: 审批流名称
        """
        return self._top_request(
            "dingtalk.smartwork.bpms.process.sync",
            {
                "agent_id": agent_id,
                "src_process_code": src_process_code,
                "target_process_code": target_process_code,
                "biz_category_id": biz_category_id,
                "process_name": process_name
            }
        )

    def dingtalk_smartwork_bpms_processinstance_list(
            self,
            process_code,
            start_time,
            end_time='',
            size='10',
            cursor='0',
            userid_list=''
    ):
        """
        获取审批实例列表
        企业可以根据审批流的唯一标识，分页获取该审批流对应的审批实例。只能取到权限范围内的相关部门的审批实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29833

        :param process_code: 流程模板唯一标识，可在oa后台编辑审批表单部分查询
        :param start_time: 审批实例开始时间，毫秒级
        :param end_time: 审批实例结束时间，毫秒级，默认取当前值
        :param size: 分页参数，每页大小，最多传10
        :param cursor: 分页查询的游标，最开始传0，后续传返回参数中的next_cursor值
        :param userid_list: 发起人用户id列表
        """
        return self._top_request(
            "dingtalk.smartwork.bpms.processinstance.list",
            {
                "process_code": process_code,
                "start_time": start_time,
                "end_time": end_time,
                "size": size,
                "cursor": cursor,
                "userid_list": userid_list
            }
        )

    def dingtalk_corp_role_deleterole(
            self,
            role_id
    ):
        """
        删除角色信息
        企业在做企业内部组织结构角色管理的时候，如果需要删除该企业下某个角色信息，可以调用该接口。调用的前提是该角色下面的所有员工都已经被删除该角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29977

        :param role_id: 角色id
        """
        return self._top_request(
            "dingtalk.corp.role.deleterole",
            {
                "role_id": role_id
            }
        )

    def dingtalk_corp_role_getrolegroup(
            self,
            group_id
    ):
        """
        获取角色组信息
        该接口通过groupId参数可以获取该角色组详细信息以及下面所有关联的角色的信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29978

        :param group_id: 角色组的Id
        """
        return self._top_request(
            "dingtalk.corp.role.getrolegroup",
            {
                "group_id": group_id
            }
        )

    def dingtalk_corp_role_addrolesforemps(
            self,
            rolelid_list,
            userid_list
    ):
        """
        批量为员工增加角色信息
        企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量为员工增加角色信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29979

        :param rolelid_list: 角色id list
        :param userid_list: 员工id list
        """
        return self._top_request(
            "dingtalk.corp.role.addrolesforemps",
            {
                "rolelid_list": rolelid_list,
                "userid_list": userid_list
            }
        )

    def dingtalk_corp_role_removerolesforemps(
            self,
            roleid_list,
            userid_list
    ):
        """
        批量删除员工角的色信息
        企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量删除员工的角色信息。 角色在钉钉的组织结构里面就是标签的意思，你可以批量为一批用户添加一批角色信息（dingtalk.corp.role.addrolesforemps），那么调用该接口就可以批量删除已经存在的角色和员工对应关系，角色和员工是多对多的关系。参考代码如下： req.setRolelidList('1,2,3,4,5'); // 已经存在的角色id列表 req.setUseridList('a,b,c,d,e'); // 用户的id列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29980

        :param roleid_list: 角色标签id
        :param userid_list: 用户userId
        """
        return self._top_request(
            "dingtalk.corp.role.removerolesforemps",
            {
                "roleid_list": roleid_list,
                "userid_list": userid_list
            }
        )

    def dingtalk_corp_invoice_gettitle(
            self
    ):
        """
        获取企业开票抬头信息
        该接口通过orgId参数可以获取该企业的发票抬头信息。
        注意：ISV必须先加入白名单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30318

        """
        return self._top_request(
            "dingtalk.corp.invoice.gettitle"
        )

    def dingtalk_corp_device_manage_get(
            self,
            device_service_id,
            device_id
    ):
        """
        获取单设备详情
        ISV或者企业通过deviceId来获取设备详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30500

        :param device_service_id: 设备服务商ID
        :param device_id: 设备ID
        """
        return self._top_request(
            "dingtalk.corp.device.manage.get",
            {
                "device_service_id": device_service_id,
                "device_id": device_id
            }
        )

    def dingtalk_corp_device_manage_querylist(
            self,
            device_service_id,
            cursor,
            size
    ):
        """
        拉取企业下某类设备列表
        此接口用于展示企业已经绑定的设备列表(分页接口)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30501

        :param device_service_id: 设备服务商ID
        :param cursor: 分页拉取设备列表的游标，首次拉取可传Null或者0
        :param size: 单次请求的大小，最大不超过20
        """
        return self._top_request(
            "dingtalk.corp.device.manage.querylist",
            {
                "device_service_id": device_service_id,
                "cursor": cursor,
                "size": size
            }
        )

    def dingtalk_corp_device_nick_update(
            self,
            device_service_id,
            device_id,
            new_nick
    ):
        """
        更改设备昵称
        修改企业绑定的智能硬件对应的昵称
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30514

        :param device_service_id: 设备服务商ID
        :param device_id: 设备ID
        :param new_nick: 设备新昵称
        """
        return self._top_request(
            "dingtalk.corp.device.nick.update",
            {
                "device_service_id": device_service_id,
                "device_id": device_id,
                "new_nick": new_nick
            }
        )

    def dingtalk_corp_device_manage_unbind(
            self,
            device_service_id,
            device_id
    ):
        """
        设备解绑
        此接口用于解绑已经绑定到xx企业的某个设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30530

        :param device_service_id: 设备服务商ID
        :param device_id: 设备ID
        """
        return self._top_request(
            "dingtalk.corp.device.manage.unbind",
            {
                "device_service_id": device_service_id,
                "device_id": device_id
            }
        )

    def dingtalk_corp_user_personainfo_get(
            self,
            userid
    ):
        """
        用户画像
        用户画像,包括用户性别，工作行业属性等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31620

        :param userid: 员工id
        """
        return self._top_request(
            "dingtalk.corp.user.personainfo.get",
            {
                "userid": userid
            }
        )

    def dingtalk_corp_report_list(
            self,
            start_time,
            end_time,
            cursor,
            size,
            template_name='',
            userid=''
    ):
        """
        查询企业员工发出的日志列表
        企业可以根据员工userid或者日志模板名称，分页获取员工一段时间范围内在【日志】微应用发送的日志详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31998

        :param start_time: 查询起始时间
        :param end_time: 查询截止时间
        :param cursor: 查询游标，初始传入0，后续从上一次的返回值中获取
        :param size: 每页数据量
        :param template_name: 要查询的模板名称
        :param userid: 员工的userid
        """
        return self._top_request(
            "dingtalk.corp.report.list",
            {
                "start_time": start_time,
                "end_time": end_time,
                "cursor": cursor,
                "size": size,
                "template_name": template_name,
                "userid": userid
            }
        )

    def dingtalk_corp_chatbot_addchatbotinstance(
            self,
            chatbot_id,
            open_conversation_id,
            name='',
            icon_media_id=''
    ):
        """
        向群添加机器人接口
        企业应用，向自己的企业群，添加已安装的企业机器人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32058

        :param chatbot_id: 机器人id，由钉钉事先分配
        :param open_conversation_id: 创建群时返回的openConvsationId
        :param name: 机器人名字(如果为空，默认是机器人安装时的名字)
        :param icon_media_id: 机器人头像(如果为空，默认是机器人安装时的头像)
        """
        return self._top_request(
            "dingtalk.corp.chatbot.addchatbotinstance",
            {
                "chatbot_id": chatbot_id,
                "open_conversation_id": open_conversation_id,
                "name": name,
                "icon_media_id": icon_media_id
            }
        )

    def dingtalk_smartwork_attends_getleaveapproveduration(
            self,
            userid,
            from_date,
            to_date
    ):
        """
        计算请假时长
        钉钉考勤微应用，提供了排班的功能，企业管理员可以设置排班规则，该接口可以自动根据排班规则统计出每个员工的请假时长，进而可以与企业自有的请假／财务系统对接，进行工资统计，如果您的企业使用了钉钉考勤并希望依赖考勤系统自动计算员工请假时长，可选择使用此接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32125

        :param userid: 员工在企业内的UserID，企业用来唯一标识用户的字段。
        :param from_date: 请假开始时间
        :param to_date: 请假结束时间
        """
        return self._top_request(
            "dingtalk.smartwork.attends.getleaveapproveduration",
            {
                "userid": userid,
                "from_date": from_date,
                "to_date": to_date
            }
        )

    def dingtalk_smartwork_attends_getusergroup(
            self,
            userid
    ):
        """
        获取用户考勤组
        在钉钉考勤微应用中，考勤组是一类具有相同的班次、考勤位置等考勤规则的人或部门的组合，一个企业中的一个人只能属于一个考勤组。如果您的企业使用了钉钉考勤并希望获取员工的考勤组信息，可选择使用此接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32308

        :param userid: 员工在企业内的UserID，企业用来唯一标识用户的字段。
        """
        return self._top_request(
            "dingtalk.smartwork.attends.getusergroup",
            {
                "userid": userid
            }
        )

    def dingtalk_corp_calendar_create(
            self,
            create_vo=None
    ):
        """
        创建日程
        通过此接口可以把企业员工的待办事项导入到钉钉日历并在钉钉日历中展示, 支持任务, 会议,审批,普通日程等.
        该接口处于内部灰度阶段, 申请使用请邮件联系: zhaoting.yht@alibaba-inc.com
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32840

        :param create_vo: 创建日程实体
        """
        return self._top_request(
            "dingtalk.corp.calendar.create",
            {
                "create_vo": create_vo
            }
        )

    def dingtalk_corp_ding_create(
            self,
            creator_userid,
            receiver_userids,
            remind_type,
            remind_time,
            text_content,
            attachment=None
    ):
        """
        发DING通知
        通过此接口发DING通知给企业内部员工, 支持短信DING和应用内DING.
        该接口正在灰度内测中, 暂不对外开放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32841

        :param creator_userid: 发送者工号
        :param receiver_userids: 接收者工号列表
        :param remind_type: 提醒类型:1-应用内;2-短信
        :param remind_time: 发送时间(单位:毫秒)
        :param text_content: 通知内容
        :param attachment: 附件内容
        """
        return self._top_request(
            "dingtalk.corp.ding.create",
            {
                "creator_userid": creator_userid,
                "receiver_userids": receiver_userids,
                "remind_type": remind_type,
                "remind_time": remind_time,
                "text_content": text_content,
                "attachment": attachment
            }
        )

    def dingtalk_smartwork_bpms_processinstance_get(
            self,
            process_instance_id
    ):
        """
        获取单个审批实例详情
        根据审批实例id，获取审批实例详情，详情包括审批表单信息、操作记录列表、操作人、抄送人、审批任务列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32977

        :param process_instance_id: 审批实例id
        """
        return self._top_request(
            "dingtalk.smartwork.bpms.processinstance.get",
            {
                "process_instance_id": process_instance_id
            }
        )

    def dingtalk_corp_chatbot_install(
            self,
            chatbot_vo
    ):
        """
        ISV给企业安装机器人
        企业安装微应用后，ISV可通过本接口给企业上架一个企业机器人。目前灰度几个ISV，机器人应用会白名单处理
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33009

        :param chatbot_vo: 安装的机器人信息
        """
        return self._top_request(
            "dingtalk.corp.chatbot.install",
            {
                "chatbot_vo": chatbot_vo
            }
        )

    def dingtalk_corp_chatbot_updatebychatbotid(
            self,
            update_type,
            icon='',
            name='',
            chatbot_id='',
            preview_media_id='',
            description='',
            breif=''
    ):
        """
        ISV变更企业已安装机器人的名字或头像
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33010

        :param update_type: 更新名字或头像时是否更新群里已添加机器人的名字或头像。         * 0-不更新群里机器人名字或头像         * 1-更新群里机器人名字或头像
        :param icon: 机器人头像
        :param name: 机器人名字
        :param chatbot_id: 机器人id(钉钉分配)
        :param preview_media_id: 机器人预览图
        :param description: 机器人详细描述
        :param breif: 机器人简单描述
        """
        return self._top_request(
            "dingtalk.corp.chatbot.updatebychatbotid",
            {
                "update_type": update_type,
                "icon": icon,
                "name": name,
                "chatbot_id": chatbot_id,
                "preview_media_id": preview_media_id,
                "description": description,
                "breif": breif
            }
        )

    def dingtalk_corp_chatbot_listbychatbotids(
            self,
            chatbot_ids
    ):
        """
        isv查询企业已安装的企业机器人
        ISV根据chatbotId查询给企业已安装的机器人信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33011

        :param chatbot_ids: chatbotId列表
        """
        return self._top_request(
            "dingtalk.corp.chatbot.listbychatbotids",
            {
                "chatbot_ids": chatbot_ids
            }
        )

    def dingtalk_corp_extcontact_create(
            self,
            contact
    ):
        """
        外部联系人添加
        添加企业外部联系人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33400

        :param contact: 外部联系人信息
        """
        return self._top_request(
            "dingtalk.corp.extcontact.create",
            {
                "contact": contact
            }
        )

    def dingtalk_corp_smartdevice_hasface(
            self,
            userid_list
    ):
        """
        查询企业员工是否已录入人脸
        开通人脸识别的企业中，会存在部分用户录入照片，此接口用于批量查看员工是否已录入照片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33401

        :param userid_list: 查询用userid列表
        """
        return self._top_request(
            "dingtalk.corp.smartdevice.hasface",
            {
                "userid_list": userid_list
            }
        )

    def dingtalk_corp_extcontact_list(
            self,
            size='20',
            offset='0'
    ):
        """
        外部联系人列表
        获取企业外部联系人列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33402

        :param size: 分页大小, 最大100
        :param offset: 偏移位置
        """
        return self._top_request(
            "dingtalk.corp.extcontact.list",
            {
                "size": size,
                "offset": offset
            }
        )

    def dingtalk_corp_extcontact_update(
            self,
            contact
    ):
        """
        外部联系人更新
        更新企业外部联系人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33403

        :param contact: 外部联系人信息
        """
        return self._top_request(
            "dingtalk.corp.extcontact.update",
            {
                "contact": contact
            }
        )

    def dingtalk_corp_extcontact_get(
            self,
            user_id
    ):
        """
        外部联系人详情
        获取企业外部联系人详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33404

        :param user_id: userId
        """
        return self._top_request(
            "dingtalk.corp.extcontact.get",
            {
                "user_id": user_id
            }
        )

    def dingtalk_corp_extcontact_delete(
            self,
            userid
    ):
        """
        外部联系人删除
        删除企业外部联系人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33405

        :param userid: userId
        """
        return self._top_request(
            "dingtalk.corp.extcontact.delete",
            {
                "userid": userid
            }
        )

    def dingtalk_corp_extcontact_listlabelgroups(
            self,
            size='20',
            offset='0'
    ):
        """
        外部联系人标签列表
        获取企业外部联系人标签列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33406

        :param size: 分页大小,最大100
        :param offset: 偏移位置
        """
        return self._top_request(
            "dingtalk.corp.extcontact.listlabelgroups",
            {
                "size": size,
                "offset": offset
            }
        )

    def dingtalk_corp_device_manage_hasbinddevice(
            self,
            device_service_id
    ):
        """
        查询是否绑定某个设备产品
        允许开发者查询企业是否绑定了某个类型的钉钉智能硬件设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33410

        :param device_service_id: 设备产品类型 产品编码：M1：9 C1：14 M2：15 D1：24
        """
        return self._top_request(
            "dingtalk.corp.device.manage.hasbinddevice",
            {
                "device_service_id": device_service_id
            }
        )

    def dingtalk_corp_smartdevice_addface(
            self,
            face_vo
    ):
        """
        向企业员工添加人脸识别照片
        为用户添加识别照片，以及指定在终端上识别的有效期，指定用户类型对应识别提示语
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33411

        :param face_vo: 识别用户数据
        """
        return self._top_request(
            "dingtalk.corp.smartdevice.addface",
            {
                "face_vo": face_vo
            }
        )

    def dingtalk_corp_smartdevice_addrecognizenotify(
            self,
            notify_vo
    ):
        """
        添加用户识别成功后的通知
        当M2成功识别指定用户后，如需向指定用户发消息通知，使用些接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33417

        :param notify_vo: 通知数据
        """
        return self._top_request(
            "dingtalk.corp.smartdevice.addrecognizenotify",
            {
                "notify_vo": notify_vo
            }
        )

    def dingtalk_corp_smartdevice_receptionist_pushinfo(
            self,
            microapp_agent_id,
            desc_template,
            desc_content
    ):
        """
        智能前台消息推送
        智能前台开放部分功能区块，区块内的显示信息由isv基于企业不同推送展示消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33418

        :param microapp_agent_id: 微应用agentID
        :param desc_template: 智能前台信息展示模板ID，需要向智能硬件团队申请
        :param desc_content: 展示模板需要的变量数据
        """
        return self._top_request(
            "dingtalk.corp.smartdevice.receptionist.pushinfo",
            {
                "microapp_agent_id": microapp_agent_id,
                "desc_template": desc_template,
                "desc_content": desc_content
            }
        )

    def dingtalk_corp_hrm_employee_get(
            self,
            userid
    ):
        """
        获取智能人事员工花名册详细数据
        获取智能人事指定员工花名册详细数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33453

        :param userid: 查询用户userid
        """
        return self._top_request(
            "dingtalk.corp.hrm.employee.get",
            {
                "userid": userid
            }
        )

    def dingtalk_smartwork_blackboard_listtopten(
            self,
            userid
    ):
        """
        列出用户的公告列表
        列出用户当前有权限看到的10条公告，可用于在企业自定义工作首页进行公告轮播展示
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33463

        :param userid: 用户id
        """
        return self._top_request(
            "dingtalk.smartwork.blackboard.listtopten",
            {
                "userid": userid
            }
        )

    def dingtalk_corp_health_stepinfo_list(
            self,
            type,
            object_id,
            stat_dates
    ):
        """
        获取个人或部门钉钉运动步数
        查询企业用户或部门每天的钉钉运动步数，最多可以查询31天的数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33538

        :param type: 0表示取用户步数，1表示取部门步数
        :param object_id: 可以传入用户userid或者部门id
        :param stat_dates: 时间列表，注意时间格式是YYYYMMDD
        """
        return self._top_request(
            "dingtalk.corp.health.stepinfo.list",
            {
                "type": type,
                "object_id": object_id,
                "stat_dates": stat_dates
            }
        )

    def dingtalk_isv_blazers_generatecode(
            self,
            biz_id,
            ext
    ):
        """
        isv客户接入钉钉
        约定的isv通过此接口提供其业务对象唯一标示及相关信息，钉钉返回一个引流页并提供一个token，token后续供钉钉用于识别该业务对象
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34004

        :param biz_id: 业务对象唯一标示
        :param ext: 具体业务场景下约定的数据，格式：Map<String,String>
        """
        return self._top_request(
            "dingtalk.isv.blazers.generatecode",
            {
                "biz_id": biz_id,
                "ext": ext
            }
        )

    def dingtalk_corp_blazers_getbinddata(
            self
    ):
        """
        isv客户绑定数据
        获取绑定信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34005

        """
        return self._top_request(
            "dingtalk.corp.blazers.getbinddata"
        )

    def dingtalk_corp_blazers_getbizid(
            self
    ):
        """
        isv客户获取bizId
        获取bizId
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34006

        """
        return self._top_request(
            "dingtalk.corp.blazers.getbizid"
        )

    def dingtalk_corp_health_stepinfo_listbyuserid(
            self,
            userids,
            stat_date
    ):
        """
        批量查询多个用户的钉钉运动步数
        根据用户列表和时间列表，批量查询钉钉运动步数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34390

        :param userids: 员工userid列表，最多传50个
        :param stat_date: 时间，注意时间格式是YYMMDD
        """
        return self._top_request(
            "dingtalk.corp.health.stepinfo.listbyuserid",
            {
                "userids": userids,
                "stat_date": stat_date
            }
        )

    def dingtalk_corp_health_stepinfo_getuserstatus(
            self,
            userid
    ):
        """
        查询用户是否开启了钉钉运动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34391

        :param userid: 用户id
        """
        return self._top_request(
            "dingtalk.corp.health.stepinfo.getuserstatus",
            {
                "userid": userid
            }
        )

    def dingtalk_corp_hrm_employee_delemployeedismissionandhandover(
            self,
            dismission_info_with_hand_over,
            op_userid
    ):
        """
        确认离职并指定交接人，会从通讯录删除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34825

        :param dismission_info_with_hand_over: 确认离职对象
        :param op_userid: 操作人userid
        """
        return self._top_request(
            "dingtalk.corp.hrm.employee.delemployeedismissionandhandover",
            {
                "dismission_info_with_hand_over": dismission_info_with_hand_over,
                "op_userid": op_userid
            }
        )

    def dingtalk_corp_hrm_employee_getdismissionlist(
            self,
            current,
            page_size,
            op_userid
    ):
        """
        获取离职人员信息
        智能人事开放接口-查询离职人员列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34826

        :param current: 第几页，从1开始
        :param page_size: 一页多少数据，在1-100之间
        :param op_userid: 操作人userid
        """
        return self._top_request(
            "dingtalk.corp.hrm.employee.getdismissionlist",
            {
                "current": current,
                "page_size": page_size,
                "op_userid": op_userid
            }
        )

    def dingtalk_corp_dingindex_get(
            self,
            stat_dates
    ):
        """
        获取企业钉钉指数
        查询企业的日钉钉指数和月平均钉钉指数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34828

        :param stat_dates: 统计日期
        """
        return self._top_request(
            "dingtalk.corp.dingindex.get",
            {
                "stat_dates": stat_dates
            }
        )

    def dingtalk_corp_hrm_employee_modjobinfo(
            self,
            op_userid,
            hrm_api_job_model
    ):
        """
        更新员工工作信息
        钉钉智能人事开放接口-更新员工工作信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34829

        :param op_userid: 操作人userid，必须是拥有被操作人操作权限的管理员userid
        :param hrm_api_job_model: 员工信息对象，被操作人userid是必填，其他信息选填，填写则更新
        """
        return self._top_request(
            "dingtalk.corp.hrm.employee.modjobinfo",
            {
                "op_userid": op_userid,
                "hrm_api_job_model": hrm_api_job_model
            }
        )

    def dingtalk_corp_ding_receiverstatus_list(
            self,
            ding_id,
            page_size,
            page_no,
            confirmed_status=''
    ):
        """
        ding接收者状态列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34893

        :param ding_id: dingid
        :param page_size: 每页显示数量，最大值50
        :param page_no: 分页页码，从1开始
        :param confirmed_status: 确认状态，三种情况：不传表示查所有；传0表示查未确认状态；传1表示查已经确认状态；
        """
        return self._top_request(
            "dingtalk.corp.ding.receiverstatus.list",
            {
                "ding_id": ding_id,
                "page_size": page_size,
                "page_no": page_no,
                "confirmed_status": confirmed_status
            }
        )

    def dingtalk_corp_hrm_employee_setuserworkdata(
            self,
            op_userid,
            hrm_api_user_data_model
    ):
        """
        更新用户绩效数据
        钉钉智能人事开放接口-更新员工绩效信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35667

        :param op_userid: 操作人userid，必须是拥有被操作人操作权限的管理员userid
        :param hrm_api_user_data_model: 员工信息对象，被操作人userid是必填
        """
        return self._top_request(
            "dingtalk.corp.hrm.employee.setuserworkdata",
            {
                "op_userid": op_userid,
                "hrm_api_user_data_model": hrm_api_user_data_model
            }
        )

    def dingtalk_smartwork_bpms_processinstance_updatevariables(
            self,
            process_instance_id,
            variables,
            remark=''
    ):
        """
        更新审批实例的表单值
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35764

        :param process_instance_id: 审批实例id
        :param variables: 表单参数列表
        :param remark: 评论
        """
        return self._top_request(
            "dingtalk.smartwork.bpms.processinstance.updatevariables",
            {
                "process_instance_id": process_instance_id,
                "variables": variables,
                "remark": remark
            }
        )

    def dingtalk_smartwork_bpms_processinstance_getwithform(
            self,
            process_instance_id
    ):
        """
        获取审批实例的详情和表单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35765

        :param process_instance_id: 审批实例id
        """
        return self._top_request(
            "dingtalk.smartwork.bpms.processinstance.getwithform",
            {
                "process_instance_id": process_instance_id
            }
        )

    def dingtalk_corp_ding_task_create(
            self,
            task_send_v_o
    ):
        """
        ding任务创建接口
        ding任务创建。不过会有一些限制，只能发送文本任务，不能设置抄送人，只能有一个任务执行人。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35778

        :param task_send_v_o: 任务对外接口
        """
        return self._top_request(
            "dingtalk.corp.ding.task.create",
            {
                "task_send_v_o": task_send_v_o
            }
        )

    def dingtalk_smartwork_bpms_process_getbybiztype(
            self,
            biz_type
    ):
        """
        根据审批套件标识获取审批模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35826

        :param biz_type: 套件开发时与审批约定的业务标识
        """
        return self._top_request(
            "dingtalk.smartwork.bpms.process.getbybiztype",
            {
                "biz_type": biz_type
            }
        )

    def dingtalk_smartwork_bpms_process_getvisible(
            self,
            userid,
            process_code_list
    ):
        """
        检测用户是否有审批模板的可用权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35827

        :param userid: 员工ID
        :param process_code_list: 流程模板唯一标识，可在oa后台编辑审批表单部分查询
        """
        return self._top_request(
            "dingtalk.smartwork.bpms.process.getvisible",
            {
                "userid": userid,
                "process_code_list": process_code_list
            }
        )

    def dingtalk_smartwork_bpms_processinstanceid_list(
            self,
            process_code,
            start_time,
            end_time='',
            cursor='',
            size='',
            userid_list=''
    ):
        """
        获取审批实例ID列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35878

        :param process_code: 流程模板唯一标识，可在oa后台编辑审批表单部分查询
        :param start_time: 审批实例开始时间，毫秒级
        :param end_time: 审批实例结束时间，毫秒级，默认取当前值
        :param cursor: 分页查询的游标，最开始传0，后续传返回参数中的next_cursor值
        :param size: 分页参数，每页大小，最多传20
        :param userid_list: 发起人用户id列表
        """
        return self._top_request(
            "dingtalk.smartwork.bpms.processinstanceid.list",
            {
                "process_code": process_code,
                "start_time": start_time,
                "end_time": end_time,
                "cursor": cursor,
                "size": size,
                "userid_list": userid_list
            }
        )

    def dingtalk_corp_deptgroup_syncuser(
            self,
            userid='',
            dept_id=''
    ):
        """
        单个成员的部门群同步
        从部门成员同步到部门群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35919

        :param userid: 用户id
        :param dept_id: 部门id
        """
        return self._top_request(
            "dingtalk.corp.deptgroup.syncuser",
            {
                "userid": userid,
                "dept_id": dept_id
            }
        )

    def dingtalk_corp_liveness_get(
            self
    ):
        """
        获取企业活跃度
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36176

        """
        return self._top_request(
            "dingtalk.corp.liveness.get"
        )

    def dingtalk_corp_blazers_unbind(
            self
    ):
        """
        完全解绑
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36499

        """
        return self._top_request(
            "dingtalk.corp.blazers.unbind"
        )

    def dingtalk_corp_blazers_removemapping(
            self,
            biz_id=''
    ):
        """
        移除绑定关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36500

        :param biz_id: 商户唯一标识
        """
        return self._top_request(
            "dingtalk.corp.blazers.removemapping",
            {
                "biz_id": biz_id
            }
        )

    def dingtalk_corp_search_corpcontact_baseinfo(
            self,
            query,
            offset,
            size
    ):
        """
        搜索企业通讯录基本接口
        根据姓名和工号搜索企业员工
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36791

        :param query: 搜索词,长度大于2开始搜
        :param offset: 开始位置,从0开始
        :param size: 拉取个数上限100
        """
        return self._top_request(
            "dingtalk.corp.search.corpcontact.baseinfo",
            {
                "query": query,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_corp_smartdevice_getface(
            self,
            userid=''
    ):
        """
        获取用户授权底图照片
        获取指定企业员工的识别底图照片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36860

        :param userid: 员工ID
        """
        return self._top_request(
            "dingtalk.corp.smartdevice.getface",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_process_listbyuserid(
            self,
            offset,
            size,
            userid=''
    ):
        """
        根据用户id获取可见审批模板列表
        根据userid分页获取用户可见的审批模板列表，每次最多获取100个模板。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36861

        :param offset: 分页游标，从0开始。根据返回结果里的next_cursor是否为空来判断是否还有下一页，且再次调用时offset设置成next_cursor的值
        :param size: 分页大小，最大可设置成100
        :param userid: 用户id, 不传表示查询企业下所有审批模板
        """
        return self._top_request(
            "dingtalk.oapi.process.listbyuserid",
            {
                "offset": offset,
                "size": size,
                "userid": userid
            }
        )

    def dingtalk_oapi_report_template_listbyuserid(
            self,
            userid='',
            offset='0',
            size='100'
    ):
        """
        根据用户id获取可见的日志模板列表
        根据用户userId获取当前企业下可见的日志模板列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36909

        :param userid: 员工userId, 不传递表示获取所有日志模板
        :param offset: 分页游标，从0开始。根据返回结果里的next_cursor是否为空来判断是否还有下一页，且再次调用时offset设置成next_cursor的值
        :param size: 分页大小，最大可设置成100
        """
        return self._top_request(
            "dingtalk.oapi.report.template.listbyuserid",
            {
                "userid": userid,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_test_test(
            self,
            input=''
    ):
        """
        test
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36910

        :param input: 1
        """
        return self._top_request(
            "dingtalk.oapi.test.test",
            {
                "input": input
            }
        )

    def dingtalk_oapi_attendance_listschedule(
            self,
            work_date,
            offset='0',
            size='200'
    ):
        """
        考勤排班信息按天全量查询接口
        按天查询企业考勤排班全量信息，使用分页功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36979

        :param work_date: 排班时间，只取年月日部分
        :param offset: 偏移位置
        :param size: 分页大小，最大200
        """
        return self._top_request(
            "dingtalk.oapi.attendance.listschedule",
            {
                "workDate": work_date,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_role_list(
            self,
            size='20',
            offset='0'
    ):
        """
        获取企业角色列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36980

        :param size: 分页大小
        :param offset: 分页偏移
        """
        return self._top_request(
            "dingtalk.oapi.role.list",
            {
                "size": size,
                "offset": offset
            }
        )

    def dingtalk_oapi_extcontact_create(
            self,
            contact
    ):
        """
        添加企业外部联系人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36981

        :param contact: 外部联系人信息
        """
        return self._top_request(
            "dingtalk.oapi.extcontact.create",
            {
                "contact": contact
            }
        )

    def dingtalk_oapi_role_simplelist(
            self,
            role_id,
            size='20',
            offset='0'
    ):
        """
        获取角色的员工列表
        获取企业中角色下的员工列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36982

        :param role_id: 角色ID
        :param size: 分页大小
        :param offset: 分页偏移
        """
        return self._top_request(
            "dingtalk.oapi.role.simplelist",
            {
                "role_id": role_id,
                "size": size,
                "offset": offset
            }
        )

    def dingtalk_oapi_attendance_getsimplegroups(
            self,
            offset='0',
            size='10'
    ):
        """
        获取考勤组列表详情
        获取公司自身的考勤组列表详情信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36983

        :param offset: 偏移位置
        :param size: 分页大小，最大10
        """
        return self._top_request(
            "dingtalk.oapi.attendance.getsimplegroups",
            {
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_attendance_getleaveapproveduration(
            self,
            userid,
            from_date,
            to_date
    ):
        """
        计算请假时长
        钉钉考勤微应用，提供了排班的功能，企业管理员可以设置排班规则，该接口可以自动根据排班规则统计出每个员工的请假时长，进而可以与企业自有的请假／财务系统对接，进行工资统计，如果您的企业使用了钉钉考勤并希望依赖考勤系统自动计算员工请假时长，可选择使用此接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36984

        :param userid: 员工在企业内的UserID，企业用来唯一标识用户的字段。
        :param from_date: 请假开始时间
        :param to_date: 请假结束时间
        """
        return self._top_request(
            "dingtalk.oapi.attendance.getleaveapproveduration",
            {
                "userid": userid,
                "from_date": from_date,
                "to_date": to_date
            }
        )

    def dingtalk_oapi_role_addrolesforemps(
            self,
            role_ids,
            user_ids
    ):
        """
        批量为员工增加角色信息
        企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量为员工增加角色信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36985

        :param role_ids: 角色id list
        :param user_ids: 员工id list
        """
        return self._top_request(
            "dingtalk.oapi.role.addrolesforemps",
            {
                "roleIds": role_ids,
                "userIds": user_ids
            }
        )

    def dingtalk_oapi_extcontact_get(
            self,
            user_id
    ):
        """
        获取企业外部联系人详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36986

        :param user_id: userId
        """
        return self._top_request(
            "dingtalk.oapi.extcontact.get",
            {
                "user_id": user_id
            }
        )

    def dingtalk_oapi_attendance_getusergroup(
            self,
            userid
    ):
        """
        获取用户考勤组
        在钉钉考勤微应用中，考勤组是一类具有相同的班次、考勤位置等考勤规则的人或部门的组合，一个企业中的一个人只能属于一个考勤组。如果您的企业使用了钉钉考勤并希望获取员工的考勤组信息，可选择使用此接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36987

        :param userid: 员工在企业内的UserID，企业用来唯一标识用户的字段。
        """
        return self._top_request(
            "dingtalk.oapi.attendance.getusergroup",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_role_removerolesforemps(
            self,
            role_ids,
            user_ids
    ):
        """
        批量删除员工角的色信息
        企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量删除员工的角色信息。 角色在钉钉的组织结构里面就是标签的意思，你可以批量为一批用户添加一批角色信息（dingtalk.corp.role.addrolesforemps），那么调用该接口就可以批量删除已经存在的角色和员工对应关系，角色和员工是多对多的关系。参考代码如下： req.setRolelidList('1,2,3,4,5'); // 已经存在的角色id列表 req.setUseridList('a,b,c,d,e'); // 用户的id列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36991

        :param role_ids: 角色标签id
        :param user_ids: 用户userId
        """
        return self._top_request(
            "dingtalk.oapi.role.removerolesforemps",
            {
                "roleIds": role_ids,
                "userIds": user_ids
            }
        )

    def dingtalk_oapi_role_deleterole(
            self,
            role_id
    ):
        """
        删除角色信息
        企业在做企业内部组织结构角色管理的时候，如果需要删除该企业下某个角色信息，可以调用该接口。调用的前提是该角色下面的所有员工都已经被删除该角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36992

        :param role_id: 角色id
        """
        return self._top_request(
            "dingtalk.oapi.role.deleterole",
            {
                "role_id": role_id
            }
        )

    def dingtalk_oapi_role_getrolegroup(
            self,
            group_id
    ):
        """
        获取角色组信息
        该接口通过groupId参数可以获取该角色组详细信息以及下面所有关联的角色的信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36997

        :param group_id: 角色组的Id
        """
        return self._top_request(
            "dingtalk.oapi.role.getrolegroup",
            {
                "group_id": group_id
            }
        )

    def dingtalk_oapi_checkin_record_get(
            self,
            userid_list,
            start_time,
            end_time,
            cursor,
            size
    ):
        """
        获取多个用户的签到记录
        查询多个用户一段时间范围内的签到记录，只给企业调用，ISV无法调用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37000

        :param userid_list: 需要查询的用户列表
        :param start_time: 起始时间,单位毫秒
        :param end_time: 截止时间，单位毫秒。如果是取1个人的数据，时间范围最大到10天，如果是取多个人的数据，时间范围最大1天。
        :param cursor: 分页查询的游标，最开始可以传0
        :param size: 分页查询的每页大小，最大100
        """
        return self._top_request(
            "dingtalk.oapi.checkin.record.get",
            {
                "userid_list": userid_list,
                "start_time": start_time,
                "end_time": end_time,
                "cursor": cursor,
                "size": size
            }
        )

    def dingtalk_oapi_extcontact_update(
            self,
            contact
    ):
        """
        更新企业外部联系人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37001

        :param contact: 外部联系人信息
        """
        return self._top_request(
            "dingtalk.oapi.extcontact.update",
            {
                "contact": contact
            }
        )

    def dingtalk_oapi_extcontact_delete(
            self,
            user_id
    ):
        """
        删除企业外部联系人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37002

        :param user_id: userId
        """
        return self._top_request(
            "dingtalk.oapi.extcontact.delete",
            {
                "user_id": user_id
            }
        )

    def dingtalk_oapi_process_sync(
            self,
            agent_id,
            src_process_code,
            target_process_code,
            biz_category_id='',
            process_name=''
    ):
        """
        更新审批流
        ISV调用该接口，可以更新对应授权企业的审批单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37003

        :param agent_id: 企业微应用标识
        :param src_process_code: 源审批流的唯一码
        :param target_process_code: 目标审批流的唯一码
        :param biz_category_id: 业务分类标识（建议采用JAVA包名的命名方式,如:com.alibaba）
        :param process_name: 审批流名称
        """
        return self._top_request(
            "dingtalk.oapi.process.sync",
            {
                "agent_id": agent_id,
                "src_process_code": src_process_code,
                "target_process_code": target_process_code,
                "biz_category_id": biz_category_id,
                "process_name": process_name
            }
        )

    def dingtalk_oapi_extcontact_list(
            self,
            size='20',
            offset='0'
    ):
        """
        获取企业外部联系人列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37004

        :param size: 分页大小, 最大100
        :param offset: 偏移位置
        """
        return self._top_request(
            "dingtalk.oapi.extcontact.list",
            {
                "size": size,
                "offset": offset
            }
        )

    def dingtalk_oapi_extcontact_listlabelgroups(
            self,
            size='20',
            offset='0'
    ):
        """
        获取企业外部联系人标签列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37005

        :param size: 分页大小,最大100
        :param offset: 偏移位置
        """
        return self._top_request(
            "dingtalk.oapi.extcontact.listlabelgroups",
            {
                "size": size,
                "offset": offset
            }
        )

    def dingtalk_oapi_processinstance_create(
            self,
            process_code,
            originator_user_id,
            dept_id,
            form_component_values,
            agent_id='',
            approvers='',
            cc_list='',
            cc_position='',
            approvers_v2=None
    ):
        """
        发起审批实例
        企业或isv调用该api，来发起一个审批实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37006

        :param process_code: 审批流的唯一码
        :param originator_user_id: 审批实例发起人的userid
        :param dept_id: 发起人所在的部门
        :param form_component_values: 审批流表单参数
        :param agent_id: 企业微应用标识
        :param approvers: 审批人userid列表
        :param cc_list: 抄送人userid列表
        :param cc_position: 抄送时间,分为（START,FINISH,START_FINISH）
        :param approvers_v2: 审批人列表，支持会签/或签，优先级高于approvers变量
        """
        return self._top_request(
            "dingtalk.oapi.processinstance.create",
            {
                "process_code": process_code,
                "originator_user_id": originator_user_id,
                "dept_id": dept_id,
                "form_component_values": form_component_values,
                "agent_id": agent_id,
                "approvers": approvers,
                "cc_list": cc_list,
                "cc_position": cc_position,
                "approvers_v2": approvers_v2
            }
        )

    def dingtalk_oapi_processinstance_list(
            self,
            process_code,
            start_time,
            end_time='',
            size='10',
            cursor='0',
            userid_list=''
    ):
        """
        获取审批实例列表
        企业可以根据审批流的唯一标识，分页获取该审批流对应的审批实例。只能取到权限范围内的相关部门的审批实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37007

        :param process_code: 流程模板唯一标识，可在oa后台编辑审批表单部分查询
        :param start_time: 审批实例开始时间，毫秒级
        :param end_time: 审批实例结束时间，毫秒级，默认取当前值
        :param size: 分页参数，每页大小，最多传10
        :param cursor: 分页查询的游标，最开始传0，后续传返回参数中的next_cursor值
        :param userid_list: 发起人用户id列表
        """
        return self._top_request(
            "dingtalk.oapi.processinstance.list",
            {
                "process_code": process_code,
                "start_time": start_time,
                "end_time": end_time,
                "size": size,
                "cursor": cursor,
                "userid_list": userid_list
            }
        )

    def dingtalk_oapi_processinstance_get(
            self,
            process_instance_id
    ):
        """
        获取单个审批实例详情
        根据审批实例id，获取审批实例详情，详情包括审批表单信息、操作记录列表、操作人、抄送人、审批任务列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37008

        :param process_instance_id: 审批实例id
        """
        return self._top_request(
            "dingtalk.oapi.processinstance.get",
            {
                "process_instance_id": process_instance_id
            }
        )

    def dingtalk_oapi_report_list(
            self,
            start_time,
            end_time,
            cursor,
            size,
            template_name='',
            userid=''
    ):
        """
        查询企业员工发出的日志列表
        企业可以根据员工userid或者日志模板名称，分页获取员工一段时间范围内在【日志】微应用发送的日志详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37009

        :param start_time: 查询起始时间
        :param end_time: 查询截止时间
        :param cursor: 查询游标，初始传入0，后续从上一次的返回值中获取
        :param size: 每页数据量
        :param template_name: 要查询的模板名称
        :param userid: 员工的userid
        """
        return self._top_request(
            "dingtalk.oapi.report.list",
            {
                "start_time": start_time,
                "end_time": end_time,
                "cursor": cursor,
                "size": size,
                "template_name": template_name,
                "userid": userid
            }
        )

    def dingtalk_oapi_blackboard_listtopten(
            self,
            userid
    ):
        """
        列出用户的公告列表
        列出用户当前有权限看到的10条公告，可用于在企业自定义工作首页进行公告轮播展示
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37010

        :param userid: 用户id
        """
        return self._top_request(
            "dingtalk.oapi.blackboard.listtopten",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_health_stepinfo_list(
            self,
            type,
            object_id,
            stat_dates
    ):
        """
        获取个人或部门钉钉运动步数
        查询企业用户或部门每天的钉钉运动步数，最多可以查询31天的数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37011

        :param type: 0表示取用户步数，1表示取部门步数
        :param object_id: 可以传入用户userid或者部门id
        :param stat_dates: 时间列表，注意时间格式是YYYYMMDD
        """
        return self._top_request(
            "dingtalk.oapi.health.stepinfo.list",
            {
                "type": type,
                "object_id": object_id,
                "stat_dates": stat_dates
            }
        )

    def dingtalk_oapi_health_stepinfo_listbyuserid(
            self,
            userids,
            stat_date
    ):
        """
        批量查询多个用户的钉钉运动步数
        根据用户列表和时间列表，批量查询钉钉运动步数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37012

        :param userids: 员工userid列表，最多传50个
        :param stat_date: 时间，注意时间格式是YYMMDD
        """
        return self._top_request(
            "dingtalk.oapi.health.stepinfo.listbyuserid",
            {
                "userids": userids,
                "stat_date": stat_date
            }
        )

    def dingtalk_oapi_health_stepinfo_getuserstatus(
            self,
            userid
    ):
        """
        查询用户是否开启了钉钉运动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37013

        :param userid: 用户id
        """
        return self._top_request(
            "dingtalk.oapi.health.stepinfo.getuserstatus",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_process_copy(
            self,
            agent_id,
            process_code,
            biz_category_id='',
            process_name='',
            description='',
            copy_type='1'
    ):
        """
        复制审批流
        审批接口开放中的第一步，ISV调用此接口把它自身的审批流复制都授权企业中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37014

        :param agent_id: 企业微应用标识
        :param process_code: 审批流的唯一码
        :param biz_category_id: 业务分类标识（建议采用JAVA包名的命名方式，）
        :param process_name: 审批流名称
        :param description: 审批流描述
        :param copy_type: 复制类型，1 不包含流程信息，2 包含流程信息且审批中员工可见。默认为1
        """
        return self._top_request(
            "dingtalk.oapi.process.copy",
            {
                "agent_id": agent_id,
                "process_code": process_code,
                "biz_category_id": biz_category_id,
                "process_name": process_name,
                "description": description,
                "copy_type": copy_type
            }
        )

    def dingtalk_oapi_message_corpconversation_asyncsendbycode(
            self,
            msgtype,
            agent_id,
            msgcontent,
            code,
            user_id_list='',
            dept_id_list='',
            to_all_user='false'
    ):
        """
        通过用户授权码异步向企业会话发送消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37019

        :param msgtype: 消息类型,如text、file、oa等，具体见文档
        :param agent_id: 微应用的id
        :param msgcontent: 与msgtype对应的消息体，具体见文档
        :param code: 用户操作产生的授权码
        :param user_id_list: 接收者的用户userid列表
        :param dept_id_list: 接收者的部门id列表
        :param to_all_user: 是否发送给企业全部用户
        """
        return self._top_request(
            "dingtalk.oapi.message.corpconversation.asyncsendbycode",
            {
                "msgtype": msgtype,
                "agent_id": agent_id,
                "msgcontent": msgcontent,
                "code": code,
                "user_id_list": user_id_list,
                "dept_id_list": dept_id_list,
                "to_all_user": to_all_user
            }
        )

    def dingtalk_oapi_message_corpconversation_asyncsend(
            self,
            msgtype,
            agent_id,
            msgcontent,
            userid_list='',
            dept_id_list='',
            to_all_user='false'
    ):
        """
        企业会话消息异步发送
        企业会话消息异步发送接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37020

        :param msgtype: 消息类型,如text、file、oa等，具体见文档
        :param agent_id: 微应用的id
        :param msgcontent: 与msgtype对应的消息体，具体见文档
        :param userid_list: 接收者的用户userid列表
        :param dept_id_list: 接收者的部门id列表
        :param to_all_user: 是否发送给企业全部用户
        """
        return self._top_request(
            "dingtalk.oapi.message.corpconversation.asyncsend",
            {
                "msgtype": msgtype,
                "agent_id": agent_id,
                "msgcontent": msgcontent,
                "userid_list": userid_list,
                "dept_id_list": dept_id_list,
                "to_all_user": to_all_user
            }
        )

    def dingtalk_corp_hrm_employee_addresumerecord(
            self,
            userid='',
            title='',
            content='',
            k_v_content='',
            phone_url='',
            pc_url='',
            web_url='',
            record_time_stamp=''
    ):
        """
        新增成长记录
        企业员工的成长记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37022

        :param userid: 被操作人userid
        :param title: 成长记录title
        :param content: 成长记录第一条内容
        :param k_v_content: 厂长记录kv展示内容：json格式，顺序展示
        :param phone_url: 手机端url
        :param pc_url: pc端url
        :param web_url: webOA后台url
        :param record_time_stamp: 20180428 零点零分零秒
        """
        return self._top_request(
            "dingtalk.corp.hrm.employee.addresumerecord",
            {
                "userid": userid,
                "title": title,
                "content": content,
                "k_v_content": k_v_content,
                "phone_url": phone_url,
                "pc_url": pc_url,
                "web_url": web_url,
                "record_time_stamp": record_time_stamp
            }
        )

    def dingtalk_oapi_message_corpconversation_getsendprogress(
            self,
            agent_id,
            task_id
    ):
        """
        获取异步发送企业会话消息的发送进度
        获取异步发送企业会话消息的进度
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37023

        :param agent_id: 发送消息时使用的微应用的id
        :param task_id: 发送消息时钉钉返回的任务id
        """
        return self._top_request(
            "dingtalk.oapi.message.corpconversation.getsendprogress",
            {
                "agent_id": agent_id,
                "task_id": task_id
            }
        )

    def dingtalk_oapi_message_corpconversation_getsendresult(
            self,
            agent_id='',
            task_id=''
    ):
        """
        获取异步向企业会话发送消息的结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37024

        :param agent_id: 微应用的agentid
        :param task_id: 异步任务的id
        """
        return self._top_request(
            "dingtalk.oapi.message.corpconversation.getsendresult",
            {
                "agent_id": agent_id,
                "task_id": task_id
            }
        )

    def dingtalk_oapi_media_upload(
            self,
            media,
            type=''
    ):
        """
        上传媒体文件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37051

        :param media: form-data中媒体文件标识，有filename、filelength、content-type等信息
        :param type: 媒体文件类型，分别有图片（image）、语音（voice）、普通文件(file)
        """
        return self._top_request(
            "dingtalk.oapi.media.upload",
            {
                "media": media,
                "type": type
            }
        )

    def dingtalk_oapi_user_getuserinfo(
            self,
            code=''
    ):
        """
        通过免登码获取用户userid
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37091

        :param code: requestAuthCode接口中获取的CODE
        """
        return self._top_request(
            "dingtalk.oapi.user.getuserinfo",
            {
                "code": code
            }
        )

    def dingtalk_oapi_attendance_list(
            self,
            work_date_from='',
            work_date_to='',
            user_id_list='',
            offset='',
            limit='',
            is_i18n=''
    ):
        """
        考勤打卡数据开放
        该接口仅限企业接入使用，用于返回企业内员工的实际打卡结果。比如，企业给一个员工设定的排班是上午9点和下午6点各打一次卡，即使员工在这期间打了多次，该接口也只会返回两条记录，包括上午的打卡结果和下午的打卡结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37092

        :param work_date_from: 查询考勤打卡记录的起始工作日
        :param work_date_to: 查询考勤打卡记录的结束工作日
        :param user_id_list: 员工在企业内的UserID列表，企业用来唯一标识用户的字段
        :param offset: 表示获取考勤数据的起始点，第一次传0，如果还有多余数据，下次获取传的offset值为之前的offset+limit
        :param limit: 表示获取考勤数据的条数，最大不能超过50条
        :param is_i18n: 是否国际化
        """
        return self._top_request(
            "dingtalk.oapi.attendance.list",
            {
                "workDateFrom": work_date_from,
                "workDateTo": work_date_to,
                "userIdList": user_id_list,
                "offset": offset,
                "limit": limit,
                "isI18n": is_i18n
            }
        )

    def dingtalk_oapi_attendance_listRecord(
            self,
            user_ids,
            check_date_from,
            check_date_to,
            is_i18n=''
    ):
        """
        考勤打卡记录开放
        该接口仅限企业接入使用，用于返回企业内员工的实际打卡记录。比如，企业给一个员工设定的排班是上午9点和下午6点各打一次卡，但是员工在这期间打了多次，该接口会把所有的打卡记录都返回。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37094

        :param user_ids: 企业内的员工id列表，最多不能超过50个
        :param check_date_from: 查询考勤打卡记录的结束工作日。注意，起始与结束工作日最多相隔7天
        :param check_date_to: 查询考勤打卡记录的结束工作日。注意，起始与结束工作日最多相隔7天
        :param is_i18n: 是否国际化
        """
        return self._top_request(
            "dingtalk.oapi.attendance.listRecord",
            {
                "userIds": user_ids,
                "checkDateFrom": check_date_from,
                "checkDateTo": check_date_to,
                "isI18n": is_i18n
            }
        )

    def dingtalk_oapi_service_set_corp_ipwhitelist(
            self,
            auth_corpid='',
            ip_whitelist=''
    ):
        """
        ISV为授权方的企业单独设置IP白名单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37095

        :param auth_corpid: 授权方corpid
        :param ip_whitelist: 要为其设置的IP白名单,格式支持IP段,用星号表示,如【5.6.*.*】,代表从【5.6.0.*】到【5.6.255.*】的任意IP,在第三段设为星号时,将忽略第四段的值,注意:仅支持后两段设置为星号
        """
        return self._top_request(
            "dingtalk.oapi.service.set_corp_ipwhitelist",
            {
                "auth_corpid": auth_corpid,
                "ip_whitelist": ip_whitelist
            }
        )

    def dingtalk_oapi_service_reauth_corp(
            self,
            app_id='',
            corpid_list=''
    ):
        """
        重新授权未激活应用的企业
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37096

        :param app_id: 套件下的微应用ID
        :param corpid_list: 未激活的corpid列表
        """
        return self._top_request(
            "dingtalk.oapi.service.reauth_corp",
            {
                "app_id": app_id,
                "corpid_list": corpid_list
            }
        )

    def dingtalk_oapi_chat_send(
            self,
            chatid='',
            action_card=None,
            oa=None,
            voice=None,
            file=None,
            image=None,
            link=None,
            text=None,
            msgtype='',
            markdown=None,
            msg=None
    ):
        """
        发送群消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37099

        :param chatid: 群会话id
        :param action_card: actionCard消息
        :param oa: OA消息
        :param voice: 语音消息
        :param file: 文件消息
        :param image: 图片消息
        :param link: 链接消息
        :param text: 文本消息
        :param msgtype: 消息类型
        :param markdown: markdown消息
        :param msg: 消息格式
        """
        return self._top_request(
            "dingtalk.oapi.chat.send",
            {
                "chatid": chatid,
                "action_card": action_card,
                "oa": oa,
                "voice": voice,
                "file": file,
                "image": image,
                "link": link,
                "text": text,
                "msgtype": msgtype,
                "markdown": markdown,
                "msg": msg
            }
        )

    def dingtalk_oapi_chat_getReadList(
            self,
            message_id='',
            cursor='',
            size=''
    ):
        """
        查询群消息已读人员列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37100

        :param message_id: 发送群消息接口返回的加密消息id
        :param cursor: 分页查询的游标，第一次可以传0，后续传返回结果中的next_cursor的值。当返回结果中，没有next_cursor时，表示没有后续的数据了，可以结束调用
        :param size: 分页查询的大小，最大可以传100
        """
        return self._top_request(
            "dingtalk.oapi.chat.getReadList",
            {
                "messageId": message_id,
                "cursor": cursor,
                "size": size
            }
        )

    def dingtalk_oapi_chat_update(
            self,
            chatid='',
            name='',
            owner='',
            owner_type='',
            add_useridlist='',
            del_useridlist='',
            add_extidlist='',
            del_extidlist='',
            icon='',
            is_ban='',
            searchable='',
            validation_type='',
            mention_all_authority='',
            management_type='',
            chat_banned_type='',
            show_history_type=''
    ):
        """
        修改群会话
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37102

        :param chatid: 群会话id
        :param name: 群名称
        :param owner: 群主的userId
        :param owner_type: 群主类型，emp：企业员工，ext：外部联系人
        :param add_useridlist: 添加成员列表
        :param del_useridlist: 删除成员列表
        :param add_extidlist: 添加外部联系人成员列表
        :param del_extidlist: 删除外部联系人成员列表
        :param icon: 群头像mediaId
        :param is_ban: 是否禁言
        :param searchable: 群可搜索，0-默认，不可搜索，1-可搜索
        :param validation_type: 入群验证，0：不入群验证（默认） 1：入群验证
        :param mention_all_authority: @all 权限，0-默认，所有人，1-仅群主可@all
        :param management_type: 管理类型，0-默认，所有人可管理，1-仅群主可管理
        :param chat_banned_type: 群禁言，0-默认，不禁言，1-全员禁言
        :param show_history_type: 新成员可查看聊天历史 0否 1是
        """
        return self._top_request(
            "dingtalk.oapi.chat.update",
            {
                "chatid": chatid,
                "name": name,
                "owner": owner,
                "ownerType": owner_type,
                "add_useridlist": add_useridlist,
                "del_useridlist": del_useridlist,
                "add_extidlist": add_extidlist,
                "del_extidlist": del_extidlist,
                "icon": icon,
                "isBan": is_ban,
                "searchable": searchable,
                "validationType": validation_type,
                "mentionAllAuthority": mention_all_authority,
                "managementType": management_type,
                "chatBannedType": chat_banned_type,
                "showHistoryType": show_history_type
            }
        )

    def dingtalk_oapi_department_list_parent_depts(
            self,
            user_id=''
    ):
        """
        查询指定用户的所有上级父部门路径
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37103

        :param user_id: 用户userId
        """
        return self._top_request(
            "dingtalk.oapi.department.list_parent_depts",
            {
                "userId": user_id
            }
        )

    def dingtalk_oapi_department_list_parent_depts_by_dept(
            self,
            id=''
    ):
        """
        查询部门的所有上级父部门路径
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37104

        :param id: 部门id
        """
        return self._top_request(
            "dingtalk.oapi.department.list_parent_depts_by_dept",
            {
                "id": id
            }
        )

    def dingtalk_oapi_chat_create(
            self,
            name='',
            owner='',
            useridlist='',
            owner_type='',
            conversation_tag='',
            show_history_type='',
            extidlist='',
            searchable='',
            validation_type='',
            mention_all_authority='',
            management_type='',
            chat_banned_type='',
            icon=''
    ):
        """
        创建群会话
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37105

        :param name: 群名称
        :param owner: 群主的userId
        :param useridlist: 群成员userId列表
        :param owner_type: 群主类型，emp：企业员工，ext：外部联系人
        :param conversation_tag: 群类型，2：企业群，0：普通群
        :param show_history_type: 新成员可查看100条聊天历史消息的类型，1：可查看，默认或0：不可查看
        :param extidlist: 外部联系人成员列表
        :param searchable: 群可搜索，0-默认，不可搜索，1-可搜索
        :param validation_type: 入群验证，0：不入群验证（默认） 1：入群验证
        :param mention_all_authority: @all 权限，0-默认，所有人，1-仅群主可@all
        :param management_type: 管理类型，0-默认，所有人可管理，1-仅群主可管理
        :param chat_banned_type: 群禁言，0-默认，不禁言，1-全员禁言
        :param icon: 群头像资源id
        """
        return self._top_request(
            "dingtalk.oapi.chat.create",
            {
                "name": name,
                "owner": owner,
                "useridlist": useridlist,
                "ownerType": owner_type,
                "conversationTag": conversation_tag,
                "showHistoryType": show_history_type,
                "extidlist": extidlist,
                "searchable": searchable,
                "validationType": validation_type,
                "mentionAllAuthority": mention_all_authority,
                "managementType": management_type,
                "chatBannedType": chat_banned_type,
                "icon": icon
            }
        )

    def dingtalk_oapi_department_update(
            self,
            id='',
            org_dept_owner='',
            outer_permit_users='',
            outer_permit_depts='',
            outer_dept='',
            user_perimits='',
            dept_perimits='',
            dept_hiding='',
            dept_manager_userid_list='',
            auto_add_user='',
            create_dept_group='',
            order='',
            parentid='',
            lang='',
            name='',
            source_identifier='',
            user_permits='',
            dept_permits='',
            outer_dept_only_self='',
            group_contain_sub_dept='',
            group_contain_outer_dept='',
            group_contain_hidden_dept=''
    ):
        """
        更新部门
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37106

        :param id: 部门id
        :param org_dept_owner: 企业群群主
        :param outer_permit_users: 本部门的员工仅可见员工自己为true时，可以配置额外可见人员，值为userid组成的的字符串，使用|符号进行分割。总数不能超过200。
        :param outer_permit_depts: 本部门的员工仅可见员工自己为true时，可以配置额外可见部门，值为部门id组成的的字符串，使用|符号进行分割。总数不能超过200。
        :param outer_dept: 是否本部门的员工仅可见员工自己, 为true时，本部门员工默认只能看到员工自己
        :param user_perimits: 可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用| 符号进行分割。总数不能超过200。
        :param dept_perimits: 可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用 | 符号进行分割。总数不能超过200。
        :param dept_hiding: 是否隐藏部门, true表示隐藏, false表示显示
        :param dept_manager_userid_list: 部门的主管列表,取值为由主管的userid组成的字符串，不同的userid使用’| 符号进行分割
        :param auto_add_user: 如果有新人加入部门是否会自动加入部门群
        :param create_dept_group: 是否创建一个关联此部门的企业群
        :param order: 在父部门中的次序值。order值小的排序靠前
        :param parentid: 父部门id。根部门id为1
        :param lang: 通讯录语言(默认zh_CN另外支持en_US)
        :param name: 部门名称。长度限制为1~64个字符。不允许包含字符‘-’‘，’以及‘,’。
        :param source_identifier: 部门标识字段，开发者可用该字段来唯一标识一个部门，并与钉钉外部通讯录里的部门做映射
        :param user_permits: 可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用| 符号进行分割。总数不能超过200。
        :param dept_permits: 可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用 | 符号进行分割。总数不能超过200。
        :param outer_dept_only_self: 是否只能看到所在部门及下级部门通讯录
        :param group_contain_sub_dept: 本门群是否包含子部门
        :param group_contain_outer_dept: 部门群是否包含外包部门
        :param group_contain_hidden_dept: 部门群是否包含隐藏部门
        """
        return self._top_request(
            "dingtalk.oapi.department.update",
            {
                "id": id,
                "orgDeptOwner": org_dept_owner,
                "outerPermitUsers": outer_permit_users,
                "outerPermitDepts": outer_permit_depts,
                "outerDept": outer_dept,
                "userPerimits": user_perimits,
                "deptPerimits": dept_perimits,
                "deptHiding": dept_hiding,
                "deptManagerUseridList": dept_manager_userid_list,
                "autoAddUser": auto_add_user,
                "createDeptGroup": create_dept_group,
                "order": order,
                "parentid": parentid,
                "lang": lang,
                "name": name,
                "sourceIdentifier": source_identifier,
                "userPermits": user_permits,
                "deptPermits": dept_permits,
                "outerDeptOnlySelf": outer_dept_only_self,
                "groupContainSubDept": group_contain_sub_dept,
                "groupContainOuterDept": group_contain_outer_dept,
                "groupContainHiddenDept": group_contain_hidden_dept
            }
        )

    def dingtalk_oapi_department_list(
            self,
            lang='',
            fetch_child='',
            id=''
    ):
        """
        获取部门列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37107

        :param lang: 通讯录语言(默认zh_CN，未来会支持en_US)
        :param fetch_child: 是否递归部门的全部子部门，ISV微应用固定传递false。
        :param id: 父部门id(如果不传，默认部门为根部门，根部门ID为1)
        """
        return self._top_request(
            "dingtalk.oapi.department.list",
            {
                "lang": lang,
                "fetch_child": fetch_child,
                "id": id
            }
        )

    def dingtalk_oapi_user_getUseridByUnionid(
            self,
            unionid=''
    ):
        """
        根据unionid获取成员的userid
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37108

        :param unionid: 用户在当前钉钉开放平台账号范围内的唯一标识，同一个钉钉开放平台账号可以包含多个开放应用，同时也包含ISV的套件应用及企业应用
        """
        return self._top_request(
            "dingtalk.oapi.user.getUseridByUnionid",
            {
                "unionid": unionid
            }
        )

    def dingtalk_oapi_user_can_access_microapp(
            self,
            app_id='',
            user_id=''
    ):
        """
        获取管理员的微应用管理权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37109

        :param app_id: 微应用id
        :param user_id: 员工唯一标识ID
        """
        return self._top_request(
            "dingtalk.oapi.user.can_access_microapp",
            {
                "appId": app_id,
                "userId": user_id
            }
        )

    def dingtalk_oapi_user_get_admin(
            self
    ):
        """
        获取管理员列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37110

        """
        return self._top_request(
            "dingtalk.oapi.user.get_admin"
        )

    def dingtalk_oapi_user_list(
            self,
            lang='',
            department_id='',
            offset='',
            size='',
            order=''
    ):
        """
        获取部门成员（详情）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37111

        :param lang: 通讯录语言(默认zh_CN另外支持en_US)
        :param department_id: 获取的部门id
        :param offset: 支持分页查询，与size参数同时设置时才生效，此参数代表偏移量
        :param size: 支持分页查询，与offset参数同时设置时才生效，此参数代表分页大小，最大100
        :param order: 支持分页查询，部门成员的排序规则，默认不传是按自定义排序；entry_asc代表按照进入部门的时间升序，entry_desc代表按照进入部门的时间降序，modify_asc代表按照部门信息修改时间升序，modify_desc代表按照部门信息修改时间降序，custom代表用户定义(未定义时按照拼音)排序
        """
        return self._top_request(
            "dingtalk.oapi.user.list",
            {
                "lang": lang,
                "department_id": department_id,
                "offset": offset,
                "size": size,
                "order": order
            }
        )

    def dingtalk_oapi_user_simplelist(
            self,
            lang='',
            department_id='',
            offset='',
            size='',
            order=''
    ):
        """
        获取部门成员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37113

        :param lang: 通讯录语言(默认zh_CN另外支持en_US)
        :param department_id: 获取的部门id
        :param offset: 支持分页查询，与size参数同时设置时才生效，此参数代表偏移量
        :param size: 支持分页查询，与offset参数同时设置时才生效，此参数代表分页大小，最大100
        :param order: 支持分页查询，部门成员的排序规则，默认不传是按自定义排序；entry_asc代表按照进入部门的时间升序，entry_desc代表按照进入部门的时间降序，modify_asc代表按照部门信息修改时间升序，modify_desc代表按照部门信息修改时间降序，custom代表用户定义(未定义时按照拼音)排序
        """
        return self._top_request(
            "dingtalk.oapi.user.simplelist",
            {
                "lang": lang,
                "department_id": department_id,
                "offset": offset,
                "size": size,
                "order": order
            }
        )

    def dingtalk_oapi_user_batchdelete(
            self,
            useridlist=''
    ):
        """
        批量删除成员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37115

        :param useridlist: 员工UserID列表。列表长度在1到20之间
        """
        return self._top_request(
            "dingtalk.oapi.user.batchdelete",
            {
                "useridlist": useridlist
            }
        )

    def dingtalk_oapi_user_delete(
            self,
            userid=''
    ):
        """
        删除成员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37116

        :param userid: 员工唯一标识ID（不可修改）
        """
        return self._top_request(
            "dingtalk.oapi.user.delete",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_user_create(
            self,
            userid='',
            is_senior='',
            is_hide='',
            jobnumber='',
            email='',
            remark='',
            work_place='',
            tel='',
            mobile='',
            position='',
            department='',
            name='',
            extattr='',
            org_email='',
            order_in_depts='',
            hired_date=''
    ):
        """
        创建成员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37117

        :param userid: 员工唯一标识ID（不可修改），企业内必须唯一。长度为1~64个字符，如果不传，服务器将自动生成一个userid
        :param is_senior: 是否高管模式，true表示是，false表示不是。开启后，手机号码对所有员工隐藏。普通员工无法对其发DING、发起钉钉免费商务电话。高管之间不受影响。
        :param is_hide: 是否号码隐藏, true表示隐藏, false表示不隐藏。隐藏手机号后，手机号在个人资料页隐藏，但仍可对其发DING、发起钉钉免费商务电话。
        :param jobnumber: 员工工号。对应显示到OA后台和客户端个人资料的工号栏目。长度为0~64个字符
        :param email: 邮箱。长度为0~64个字符。企业内必须唯一，不可重复
        :param remark: 备注，长度为0~1000个字符
        :param work_place: 办公地点，长度为0~50个字符
        :param tel: 分机号，长度为0~50个字符，企业内必须唯一，不可重复
        :param mobile: 手机号码，企业内必须唯一，不可重复
        :param position: 职位信息。长度为0~64个字符
        :param department: 数组类型，数组里面值为整型，成员所属部门id列表
        :param name: 成员名称。长度为1~64个字符
        :param extattr: 扩展属性，可以设置多种属性(但手机上最多只能显示10个扩展属性，具体显示哪些属性，请到OA管理后台->设置->通讯录信息设置和OA管理后台->设置->手机端显示信息设置)
        :param org_email: 员工的企业邮箱，员工的企业邮箱已开通，才能增加此字段， 否则会报错
        :param order_in_depts: 在对应的部门中的排序, Map结构的json字符串, key是部门的Id, value是人员在这个部门的排序值
        :param hired_date: 入职时间
        """
        return self._top_request(
            "dingtalk.oapi.user.create",
            {
                "userid": userid,
                "isSenior": is_senior,
                "isHide": is_hide,
                "jobnumber": jobnumber,
                "email": email,
                "remark": remark,
                "workPlace": work_place,
                "tel": tel,
                "mobile": mobile,
                "position": position,
                "department": department,
                "name": name,
                "extattr": extattr,
                "orgEmail": org_email,
                "orderInDepts": order_in_depts,
                "hiredDate": hired_date
            }
        )

    def dingtalk_oapi_department_list_ids(
            self,
            id=''
    ):
        """
        获取子部门ID列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37118

        :param id: 部门id
        """
        return self._top_request(
            "dingtalk.oapi.department.list_ids",
            {
                "id": id
            }
        )

    def dingtalk_oapi_user_update(
            self,
            userid='',
            name='',
            work_place='',
            remark='',
            is_senior='',
            org_email='',
            manager_userid='',
            tel='',
            order_in_depts='',
            mobile='',
            department='',
            email='',
            position='',
            extattr='',
            jobnumber='',
            is_hide='',
            lang='',
            hired_date=''
    ):
        """
        更新用户详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37119

        :param userid: 用户id
        :param name: 名字
        :param work_place: 工作地点
        :param remark: 备注
        :param is_senior: 是否高管模式
        :param org_email: 公司邮箱
        :param manager_userid: 主管
        :param tel: 分机号，长度为0~50个字符
        :param order_in_depts: 实际是Map的序列化字符串
        :param mobile: 手机号
        :param department: 部门列表
        :param email: 邮箱
        :param position: 职位
        :param extattr: 扩展属性
        :param jobnumber: 工号
        :param is_hide: 是否号码隐藏
        :param lang: 通讯录语言(默认zh_CN另外支持en_US)
        :param hired_date: 入职时间
        """
        return self._top_request(
            "dingtalk.oapi.user.update",
            {
                "userid": userid,
                "name": name,
                "workPlace": work_place,
                "remark": remark,
                "isSenior": is_senior,
                "orgEmail": org_email,
                "managerUserid": manager_userid,
                "tel": tel,
                "orderInDepts": order_in_depts,
                "mobile": mobile,
                "department": department,
                "email": email,
                "position": position,
                "extattr": extattr,
                "jobnumber": jobnumber,
                "isHide": is_hide,
                "lang": lang,
                "hiredDate": hired_date
            }
        )

    def dingtalk_oapi_user_get(
            self,
            userid
    ):
        """
        获取用户详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37120

        :param userid: userid
        """
        return self._top_request(
            "dingtalk.oapi.user.get",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_sso_getuserinfo(
            self,
            code='',
            access_token=''
    ):
        """
        通过CODE换取微应用管理员的身份信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37121

        :param code: 再次强调，此token不同于一般的accesstoken，需要调用获取微应用管理员免登需要的AccessToken
        :param access_token: 通过Oauth认证给URL带上的CODE
        """
        return self._top_request(
            "dingtalk.oapi.sso.getuserinfo",
            {
                "code": code,
                "access_token": access_token
            }
        )

    def dingtalk_oapi_chat_get(
            self,
            chatid=''
    ):
        """
        获取群会话
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37139

        :param chatid: 群会话的id
        """
        return self._top_request(
            "dingtalk.oapi.chat.get",
            {
                "chatid": chatid
            }
        )

    def dingtalk_oapi_department_get(
            self,
            id='',
            lang=''
    ):
        """
        获取部门详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37140

        :param id: 部门id
        :param lang: 通讯录语言(默认zh_CN，未来会支持en_US)
        """
        return self._top_request(
            "dingtalk.oapi.department.get",
            {
                "id": id,
                "lang": lang
            }
        )

    def dingtalk_oapi_department_delete(
            self,
            id=''
    ):
        """
        删除部门
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37141

        :param id: 部门id
        """
        return self._top_request(
            "dingtalk.oapi.department.delete",
            {
                "id": id
            }
        )

    def dingtalk_oapi_department_create(
            self,
            parentid='',
            parent_balance_first='',
            share_balance='',
            outer_permit_users='',
            outer_permit_depts='',
            outer_dept='',
            user_perimits='',
            dept_perimits='',
            dept_hiding='',
            create_dept_group='',
            order='',
            name='',
            source_identifier='',
            dept_permits='',
            user_permits='',
            outer_dept_only_self=''
    ):
        """
        创建部门
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37142

        :param parentid: 父部门id。根部门id为1
        :param parent_balance_first: 是否优先使用父部门的预算
        :param share_balance: 是否共享预算
        :param outer_permit_users: 本部门的员工仅可见员工自己为true时，可以配置额外可见人员，值为userid组成的的字符串，使用|符号进行分割。总数不能超过200。
        :param outer_permit_depts: 本部门的员工仅可见员工自己为true时，可以配置额外可见部门，值为部门id组成的的字符串，使用|符号进行分割。总数不能超过200。
        :param outer_dept: 是否本部门的员工仅可见员工自己, 为true时，本部门员工默认只能看到员工自己
        :param user_perimits: 已废弃
        :param dept_perimits: 已废弃
        :param dept_hiding: 是否隐藏部门, true表示隐藏, false表示显示
        :param create_dept_group: 是否创建一个关联此部门的企业群，默认为false
        :param order: 在父部门中的次序值。order值小的排序靠前
        :param name: 部门名称。长度限制为1~64个字符。不允许包含字符‘-’‘，’以及‘,’
        :param source_identifier: 部门标识字段，开发者可用该字段来唯一标识一个部门，并与钉钉外部通讯录里的部门做映射
        :param dept_permits: 可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用 | 符号进行分割。总数不能超过200。
        :param user_permits: 可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用| 符号进行分割。总数不能超过200。
        :param outer_dept_only_self: 是否只能看到所在部门及下级部门通讯录
        """
        return self._top_request(
            "dingtalk.oapi.department.create",
            {
                "parentid": parentid,
                "parentBalanceFirst": parent_balance_first,
                "shareBalance": share_balance,
                "outerPermitUsers": outer_permit_users,
                "outerPermitDepts": outer_permit_depts,
                "outerDept": outer_dept,
                "userPerimits": user_perimits,
                "deptPerimits": dept_perimits,
                "deptHiding": dept_hiding,
                "createDeptGroup": create_dept_group,
                "order": order,
                "name": name,
                "sourceIdentifier": source_identifier,
                "deptPermits": dept_permits,
                "userPermits": user_permits,
                "outerDeptOnlySelf": outer_dept_only_self
            }
        )

    def dingtalk_oapi_gettoken(
            self,
            corpid='',
            corpsecret='',
            appkey='',
            appsecret=''
    ):
        """
        获取企业token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37143

        :param corpid: corpid
        :param corpsecret: corpsecret
        :param appkey: appkey
        :param appsecret: appsecret
        """
        return self._top_request(
            "dingtalk.oapi.gettoken",
            {
                "corpid": corpid,
                "corpsecret": corpsecret,
                "appkey": appkey,
                "appsecret": appsecret
            }
        )

    def dingtalk_oapi_call_back_delete_call_back(
            self
    ):
        """
        删除事件回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37145

        """
        return self._top_request(
            "dingtalk.oapi.call_back.delete_call_back"
        )

    def dingtalk_oapi_call_back_update_call_back(
            self,
            call_back_tag='',
            aes_key='',
            token='',
            url=''
    ):
        """
        更新事件回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37146

        :param call_back_tag: 需要监听的事件类型，有20种，“user_add_org”, “user_modify_org”, “user_leave_org”,“org_admin_add”, “org_admin_remove”, “org_dept_create”, “org_dept_modify”, “org_dept_remove”, “org_remove”, “chat_add_member”, “chat_remove_member”, “chat_quit”, “chat_update_owner”, “chat_update_title”, “chat_disband”, “chat_disband_microapp”, “check_in”,“bpms_task_change”,“bpms_instance_change”,,“label_user_change”,“label_conf_add”, “label_conf_modify”,“label_conf_del”,
        :param aes_key: 数据加密密钥。用于回调数据的加密，长度固定为43个字符，从a-z, A-Z, 0-9共62个字符中选取,您可以随机生成，ISV(服务提供商)推荐使用注册套件时填写的EncodingAESKey
        :param token: 加解密需要用到的token，ISV(服务提供商)推荐使用注册套件时填写的token，普通企业可以随机填写
        :param url: 更新事件回调接口
        """
        return self._top_request(
            "dingtalk.oapi.call_back.update_call_back",
            {
                "call_back_tag": call_back_tag,
                "aes_key": aes_key,
                "token": token,
                "url": url
            }
        )

    def dingtalk_oapi_call_back_get_call_back(
            self
    ):
        """
        查询事件回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37147

        """
        return self._top_request(
            "dingtalk.oapi.call_back.get_call_back"
        )

    def dingtalk_oapi_sns_get_sns_token(
            self,
            persistent_code='',
            openid=''
    ):
        """
        获取用户授权的SNS_TOKEN
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37148

        :param persistent_code: 用户授权给钉钉开放应用的持久授权码
        :param openid: 用户的openid
        """
        return self._top_request(
            "dingtalk.oapi.sns.get_sns_token",
            {
                "persistent_code": persistent_code,
                "openid": openid
            }
        )

    def dingtalk_oapi_service_get_unactive_corp(
            self,
            app_id=''
    ):
        """
        获取应用未激活的企业列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37149

        :param app_id: 套件下的微应用ID
        """
        return self._top_request(
            "dingtalk.oapi.service.get_unactive_corp",
            {
                "app_id": app_id
            }
        )

    def dingtalk_oapi_service_get_agent(
            self,
            agentid='',
            permanent_code='',
            auth_corpid='',
            suite_key=''
    ):
        """
        获取企业的应用信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37150

        :param agentid: agentid
        :param permanent_code: permanent_code
        :param auth_corpid: auth_corpid
        :param suite_key: suite_key
        """
        return self._top_request(
            "dingtalk.oapi.service.get_agent",
            {
                "agentid": agentid,
                "permanent_code": permanent_code,
                "auth_corpid": auth_corpid,
                "suite_key": suite_key
            }
        )

    def dingtalk_oapi_service_get_auth_info(
            self,
            suite_key='',
            auth_corpid=''
    ):
        """
        获取企业基本信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37151

        :param suite_key: 套件key
        :param auth_corpid: 授权方corpid
        """
        return self._top_request(
            "dingtalk.oapi.service.get_auth_info",
            {
                "suite_key": suite_key,
                "auth_corpid": auth_corpid
            }
        )

    def dingtalk_oapi_service_get_corp_token(
            self,
            auth_corpid='',
            permanent_code=''
    ):
        """
        获取企业授权的凭证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37152

        :param auth_corpid: 授权方corpid
        :param permanent_code: 永久授权码，通过get_permanent_code获取
        """
        return self._top_request(
            "dingtalk.oapi.service.get_corp_token",
            {
                "auth_corpid": auth_corpid,
                "permanent_code": permanent_code
            }
        )

    def dingtalk_oapi_service_activate_suite(
            self,
            suite_key='',
            auth_corpid='',
            permanent_code=''
    ):
        """
        激活套件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37153

        :param suite_key: 套件key
        :param auth_corpid: 授权方corpid
        :param permanent_code: 永久授权码，从get_permanent_code接口中获取
        """
        return self._top_request(
            "dingtalk.oapi.service.activate_suite",
            {
                "suite_key": suite_key,
                "auth_corpid": auth_corpid,
                "permanent_code": permanent_code
            }
        )

    def dingtalk_oapi_service_get_permanent_code(
            self,
            tmp_auth_code=''
    ):
        """
        获取企业授权的永久授权码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37154

        :param tmp_auth_code: 回调接口（tmp_auth_code）获取的临时授权码
        """
        return self._top_request(
            "dingtalk.oapi.service.get_permanent_code",
            {
                "tmp_auth_code": tmp_auth_code
            }
        )

    def dingtalk_oapi_service_get_suite_token(
            self,
            suite_key='',
            suite_secret='',
            suite_ticket=''
    ):
        """
        获取应用套件令牌Token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37155

        :param suite_key: 套件key，开发者后台创建套件后获取
        :param suite_secret: 套件secret，开发者后台创建套件后获取
        :param suite_ticket: 钉钉推送的ticket
        """
        return self._top_request(
            "dingtalk.oapi.service.get_suite_token",
            {
                "suite_key": suite_key,
                "suite_secret": suite_secret,
                "suite_ticket": suite_ticket
            }
        )

    def dingtalk_oapi_call_back_get_call_back_failed_result(
            self
    ):
        """
        获取回调失败的结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37156

        """
        return self._top_request(
            "dingtalk.oapi.call_back.get_call_back_failed_result"
        )

    def dingtalk_oapi_call_back_register_call_back(
            self,
            call_back_tag='',
            token='',
            aes_key='',
            url=''
    ):
        """
        注册事件回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37157

        :param call_back_tag: 需要监听的事件类型，有20种，“user_add_org”, “user_modify_org”, “user_leave_org”,“org_admin_add”, “org_admin_remove”, “org_dept_create”, “org_dept_modify”, “org_dept_remove”, “org_remove”,“label_user_change”, “label_conf_add”, “label_conf_modify”,“label_conf_del”,“org_change”, “chat_add_member”, “chat_remove_member”, “chat_quit”, “chat_update_owner”, “chat_update_title”, “chat_disband”, “chat_disband_microapp”,“check_in”,“bpms_task_change”,“bpms_instance_change”
        :param token: 加解密需要用到的token，ISV(服务提供商)推荐使用注册套件时填写的token，普通企业可以随机填写
        :param aes_key: 数据加密密钥。用于回调数据的加密，长度固定为43个字符，从a-z, A-Z, 0-9共62个字符中选取,您可以随机生成，ISV(服务提供商)推荐使用注册套件时填写的EncodingAESKey
        :param url: 接收事件回调的url
        """
        return self._top_request(
            "dingtalk.oapi.call_back.register_call_back",
            {
                "call_back_tag": call_back_tag,
                "token": token,
                "aes_key": aes_key,
                "url": url
            }
        )

    def dingtalk_oapi_user_get_org_user_count(
            self,
            only_active=''
    ):
        """
        获取企业员工人数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37158

        :param only_active: 0：包含未激活钉钉的人员数量 1：不包含未激活钉钉的人员数量
        """
        return self._top_request(
            "dingtalk.oapi.user.get_org_user_count",
            {
                "onlyActive": only_active
            }
        )

    def dingtalk_oapi_message_send_to_conversation(
            self,
            sender='',
            markdown=None,
            oa=None,
            voice=None,
            file=None,
            link=None,
            image=None,
            text=None,
            msgtype='',
            cid='',
            action_card=None,
            msg=None
    ):
        """
        发送普通消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37159

        :param sender: 消息发送者员工ID
        :param markdown: markdown消息
        :param oa: OA消息
        :param voice: voice消息
        :param file: file消息
        :param link: link消息
        :param image: image消息
        :param text: text消息
        :param msgtype: text
        :param cid: 群消息或者个人聊天会话Id，(通过JSAPI之pickConversation接口唤起联系人界面选择之后即可拿到会话ID，之后您可以使用获取到的cid调用此接口）
        :param action_card: ActionCard消息
        :param msg: 消息内容
        """
        return self._top_request(
            "dingtalk.oapi.message.send_to_conversation",
            {
                "sender": sender,
                "markdown": markdown,
                "oa": oa,
                "voice": voice,
                "file": file,
                "link": link,
                "image": image,
                "text": text,
                "msgtype": msgtype,
                "cid": cid,
                "action_card": action_card,
                "msg": msg
            }
        )

    def dingtalk_oapi_sns_getuserinfo(
            self,
            sns_token=''
    ):
        """
        获取用户授权的个人信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37160

        :param sns_token: 用户授权给开放应用的token
        """
        return self._top_request(
            "dingtalk.oapi.sns.getuserinfo",
            {
                "sns_token": sns_token
            }
        )

    def dingtalk_oapi_sns_get_persistent_code(
            self,
            tmp_auth_code=''
    ):
        """
        获取用户授权的持久授权码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37161

        :param tmp_auth_code: 用户授权给钉钉开放应用的临时授权码
        """
        return self._top_request(
            "dingtalk.oapi.sns.get_persistent_code",
            {
                "tmp_auth_code": tmp_auth_code
            }
        )

    def dingtalk_oapi_microapp_create(
            self,
            app_icon='',
            app_desc='',
            homepage_url='',
            pc_homepage_url='',
            omp_link='',
            app_name=''
    ):
        """
        创建微应用
        企业开发者通过接口创建微应用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37162

        :param app_icon: 微应用的图标。需要调用上传接口将图标上传到钉钉服务器后获取到的mediaId
        :param app_desc: 钉钉测试微应用
        :param homepage_url: 微应用的移动端主页，必须以http开头或https开头
        :param pc_homepage_url: 微应用的PC端主页，必须以http开头或https开头，如果不为空则必须与homepageUrl的域名一致
        :param omp_link: 微应用的OA后台管理主页，必须以http开头或https开头。微应用后台管理员免登 开发
        :param app_name: 微应用的名称。长度限制为1~10个字符
        """
        return self._top_request(
            "dingtalk.oapi.microapp.create",
            {
                "appIcon": app_icon,
                "appDesc": app_desc,
                "homepageUrl": homepage_url,
                "pcHomepageUrl": pc_homepage_url,
                "ompLink": omp_link,
                "appName": app_name
            }
        )

    def dingtalk_oapi_microapp_update(
            self,
            app_name='',
            app_icon='',
            app_desc='',
            homepage_url='',
            pc_homepage_url='',
            omp_link='',
            agent_id=''
    ):
        """
        更新微应用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37163

        :param app_name: 微应用的名称。长度限制为1~10个字符
        :param app_icon: 微应用的图标。需要调用上传接口将图标上传到钉钉服务器后获取到的mediaId
        :param app_desc: 微应用的描述。长度限制为1~20个字符
        :param homepage_url: 微应用的移动端主页，必须以http开头或https开头
        :param pc_homepage_url: 微应用的PC端主页，必须以http开头或https开头，如果不为空则必须与homepageUrl的域名一致
        :param omp_link: 微应用的OA后台管理主页，必须以http开头或https开头
        :param agent_id: 微应用实例化id
        """
        return self._top_request(
            "dingtalk.oapi.microapp.update",
            {
                "appName": app_name,
                "appIcon": app_icon,
                "appDesc": app_desc,
                "homepageUrl": homepage_url,
                "pcHomepageUrl": pc_homepage_url,
                "ompLink": omp_link,
                "agentId": agent_id
            }
        )

    def dingtalk_oapi_microapp_list(
            self
    ):
        """
        列出微应用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37164

        """
        return self._top_request(
            "dingtalk.oapi.microapp.list"
        )

    def dingtalk_oapi_checkin_record(
            self,
            department_id='',
            end_time='',
            start_time='',
            offset='',
            size='',
            order=''
    ):
        """
        获得签到数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37165

        :param department_id: 部门id（1 表示根部门）
        :param end_time: 开始时间，精确到毫秒，注意字段的位数 例：1520956800000
        :param start_time: 结束时间，精确到毫秒，注意字段的位数 例：1520956800000（默认为当前时间）
        :param offset: 支持分页查询，与size 参数同时设置时才生效，此参数代表偏移量，从0 开始
        :param size: 支持分页查询，与offset 参数同时设置时才生效，此参数代表分页大小，最大100
        :param order: 排序，asc 为正序，desc 为倒序
        """
        return self._top_request(
            "dingtalk.oapi.checkin.record",
            {
                "department_id": department_id,
                "end_time": end_time,
                "start_time": start_time,
                "offset": offset,
                "size": size,
                "order": order
            }
        )

    def dingtalk_oapi_microapp_delete(
            self,
            agent_id=''
    ):
        """
        删除微应用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37166

        :param agent_id: 微应用实例化id，企业只能删除自建微应用
        """
        return self._top_request(
            "dingtalk.oapi.microapp.delete",
            {
                "agentId": agent_id
            }
        )

    def dingtalk_oapi_microapp_list_by_userid(
            self,
            userid=''
    ):
        """
        列出员工可见的微应用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37167

        :param userid: 员工userid
        """
        return self._top_request(
            "dingtalk.oapi.microapp.list_by_userid",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_microapp_visible_scopes(
            self,
            agent_id=''
    ):
        """
        获取企业设置的微应用可见范围
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37168

        :param agent_id: 微应用实例化id
        """
        return self._top_request(
            "dingtalk.oapi.microapp.visible_scopes",
            {
                "agentId": agent_id
            }
        )

    def dingtalk_oapi_microapp_set_visible_scopes(
            self,
            user_visible_scopes='',
            dept_visible_scopes='',
            is_hidden='',
            agent_id=''
    ):
        """
        设置微应用的可见范围
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37169

        :param user_visible_scopes: 设置可见的员工id列表，格式为JSON数组
        :param dept_visible_scopes: 设置可见的部门id列表，格式为JSON数组
        :param is_hidden: 是否仅限管理员可见，true代表仅限管理员可见
        :param agent_id: 微应用实例化id
        """
        return self._top_request(
            "dingtalk.oapi.microapp.set_visible_scopes",
            {
                "userVisibleScopes": user_visible_scopes,
                "deptVisibleScopes": dept_visible_scopes,
                "isHidden": is_hidden,
                "agentId": agent_id
            }
        )

    def dingtalk_oapi_microapp_rule_get_rule_list(
            self,
            userid='',
            agent_id=''
    ):
        """
        微应用规则绑定服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37170

        :param userid: 用户在企业内的唯一标识
        :param agent_id: 微应用在企业内的id
        """
        return self._top_request(
            "dingtalk.oapi.microapp.rule.get_rule_list",
            {
                "userid": userid,
                "agentId": agent_id
            }
        )

    def dingtalk_oapi_microapp_rule_get_user_total(
            self,
            agent_id='',
            rule_id_list=''
    ):
        """
        获取规则绑定的用户数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37171

        :param agent_id: 规则所属的微应用agentId
        :param rule_id_list: 需要查询的规则id集合
        """
        return self._top_request(
            "dingtalk.oapi.microapp.rule.get_user_total",
            {
                "agentId": agent_id,
                "ruleIdList": rule_id_list
            }
        )

    def dingtalk_oapi_sso_gettoken(
            self,
            corpid='',
            corpsecret=''
    ):
        """
        获取微应用后台免登的SsoToken
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37172

        :param corpid: 企业Id
        :param corpsecret: 这里必须填写专属的SSOSecret
        """
        return self._top_request(
            "dingtalk.oapi.sso.gettoken",
            {
                "corpid": corpid,
                "corpsecret": corpsecret
            }
        )

    def dingtalk_oapi_get_jsapi_ticket(
            self
    ):
        """
        获取jsapi_ticket
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37173

        """
        return self._top_request(
            "dingtalk.oapi.get_jsapi_ticket"
        )

    def dingtalk_oapi_microapp_rule_delete(
            self,
            agent_id='',
            rule_id=''
    ):
        """
        删除规则
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37174

        :param agent_id: 规则所属的微应用agentId
        :param rule_id: 被删除的规则id
        """
        return self._top_request(
            "dingtalk.oapi.microapp.rule.delete",
            {
                "agentId": agent_id,
                "ruleId": rule_id
            }
        )

    def dingtalk_oapi_sns_gettoken(
            self,
            appid='',
            appsecret=''
    ):
        """
        获取钉钉开放应用的ACCESS_TOKEN
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37175

        :param appid: 由钉钉开放平台提供给开放应用的唯一标识
        :param appsecret: 由钉钉开放平台提供的密钥
        """
        return self._top_request(
            "dingtalk.oapi.sns.gettoken",
            {
                "appid": appid,
                "appsecret": appsecret
            }
        )

    def dingtalk_oapi_auth_scopes(
            self
    ):
        """
        获取CorpSecret授权范围
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37176

        """
        return self._top_request(
            "dingtalk.oapi.auth.scopes"
        )

    def dingtalk_oapi_process_gettodonum(
            self,
            userid
    ):
        """
        获取待我审批数量
        获取用户待审批数量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37188

        :param userid: 用户id
        """
        return self._top_request(
            "dingtalk.oapi.process.gettodonum",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_report_getunreadcount(
            self,
            userid=''
    ):
        """
        查询企业员工的日志未读数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37189

        :param userid: 员工id
        """
        return self._top_request(
            "dingtalk.oapi.report.getunreadcount",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_smartdevice_visitor_addvisitor(
            self,
            visitor_vo
    ):
        """
        添加企业访客邀约记录信息
        ISV向钉钉智能硬件添加授权企业的访客邀约记录，以实现与智能识别设备的打通流程
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37221

        :param visitor_vo: 访客预约模型
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.visitor.addvisitor",
            {
                "visitor_vo": visitor_vo
            }
        )

    def dingtalk_oapi_smartdevice_visitor_editvisitor(
            self,
            reservation_id,
            visitor_vo
    ):
        """
        编辑企业访客预约数据
        ISV向钉钉智能硬件同步授权企业的访问预约记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37222

        :param reservation_id: 预约编号
        :param visitor_vo: 预约数据
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.visitor.editvisitor",
            {
                "reservation_id": reservation_id,
                "visitor_vo": visitor_vo
            }
        )

    def dingtalk_oapi_robot_send(
            self,
            msgtype,
            text=None,
            at=None,
            link=None,
            markdown=None,
            action_card=None,
            feed_card=None
    ):
        """
        自定义机器人发送消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37246

        :param msgtype: 消息类型
        :param text: text类型
        :param at: 被@人的手机号
        :param link: 消息类型，此时固定为:link
        :param markdown: 此消息类型为固定markdown
        :param action_card: 此消息类型为固定actionCard
        :param feed_card: 此消息类型为固定feedCard
        """
        return self._top_request(
            "dingtalk.oapi.robot.send",
            {
                "msgtype": msgtype,
                "text": text,
                "at": at,
                "link": link,
                "markdown": markdown,
                "actionCard": action_card,
                "feedCard": feed_card
            }
        )

    def dingtalk_oapi_calendar_create(
            self,
            create_vo=None
    ):
        """
        创建日程
        通过此接口可以把企业员工的待办事项导入到钉钉日历并在钉钉日历中展示, 支持任务, 会议,审批,普通日程等.
        该接口处于内部灰度阶段, 申请使用请邮件联系:wusuan.yby@alibaba-inc.com
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37264

        :param create_vo: 创建日程实体
        """
        return self._top_request(
            "dingtalk.oapi.calendar.create",
            {
                "create_vo": create_vo
            }
        )

    def dingtalk_oapi_ding_create(
            self,
            creator_userid,
            receiver_userids,
            remind_type,
            remind_time,
            text_content,
            attachment=None
    ):
        """
        发DING通知
        通过此接口发DING通知给企业内部员工, 支持短信DING和应用内DING.
        该接口正在灰度内测中, 暂不对外开放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37267

        :param creator_userid: 发送者工号
        :param receiver_userids: 接收者工号列表
        :param remind_type: 提醒类型:1-应用内;2-短信
        :param remind_time: 发送时间(单位:毫秒)
        :param text_content: 通知内容
        :param attachment: 附件内容
        """
        return self._top_request(
            "dingtalk.oapi.ding.create",
            {
                "creator_userid": creator_userid,
                "receiver_userids": receiver_userids,
                "remind_type": remind_type,
                "remind_time": remind_time,
                "text_content": text_content,
                "attachment": attachment
            }
        )

    def dingtalk_oapi_chat_updategroupnick(
            self,
            userid,
            chatid,
            group_nick
    ):
        """
        设置群昵称
        设置群成员的群昵称
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37291

        :param userid: 用户userid
        :param chatid: chatid
        :param group_nick: 群昵称
        """
        return self._top_request(
            "dingtalk.oapi.chat.updategroupnick",
            {
                "userid": userid,
                "chatid": chatid,
                "group_nick": group_nick
            }
        )

    def dingtalk_oapi_attendance_getupdatedata(
            self,
            userid,
            work_date
    ):
        """
        获取考勤更新数据
        增加这个api的目的是为了给外部企业提供考勤数据变更，提升外部企业的考勤统计数据的准确度。外部企业只能通过入参获取数据，属于只读接口。
        接口的入参是 查询用户corpId，userid以及查询日期，这些参数是我们开放平台推送给用户的变更。
        返回的结果是三个list结果：分别是打卡流水记录 打卡结果 以及 审批列表 都是被查询用户在查询日期内的数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37307

        :param userid: 用户id
        :param work_date: 工作日
        """
        return self._top_request(
            "dingtalk.oapi.attendance.getupdatedata",
            {
                "userid": userid,
                "work_date": work_date
            }
        )

    def dingtalk_oapi_cspace_add_to_single_chat(
            self,
            file_name='',
            media_id='',
            userid='',
            agent_id=''
    ):
        """
        发送文件给指定用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37310

        :param file_name: 文件名(需包含含扩展名),需要utf-8 urlEncode
        :param media_id: 调用钉盘上传文件接口得到的mediaid,需要utf-8 urlEncode
        :param userid: 文件发送者微应用的agentId
        :param agent_id: 文件接收人的userid
        """
        return self._top_request(
            "dingtalk.oapi.cspace.add_to_single_chat",
            {
                "file_name": file_name,
                "media_id": media_id,
                "userid": userid,
                "agent_id": agent_id
            }
        )

    def dingtalk_oapi_cspace_add(
            self,
            agent_id='',
            code='',
            media_id='',
            folder_id='',
            space_id='',
            name='',
            overwrite=''
    ):
        """
        新增文件到用户钉盘
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37324

        :param agent_id: 微应用的agentId
        :param code: 如果是微应用，code值为微应用免登授权码,如果是服务窗应用，code值为服务窗免登授权码。code为临时授权码，只能消费一次，下次请求需要重新获取新的code。
        :param media_id: 调用钉盘上传文件接口得到的mediaid, 需要utf-8 urlEncode
        :param folder_id: 调用云盘选择控件后获取的用户钉盘空间ID
        :param space_id: 调用云盘选择控件后获取的用户钉盘文件夹ID
        :param name: 上传文件的名称，不能包含非法字符，需要utf-8 urlEncode
        :param overwrite: 遇到同名文件是否覆盖，若不覆盖，则会自动重命名本次新增的文件，默认为false
        """
        return self._top_request(
            "dingtalk.oapi.cspace.add",
            {
                "agent_id": agent_id,
                "code": code,
                "media_id": media_id,
                "folder_id": folder_id,
                "space_id": space_id,
                "name": name,
                "overwrite": overwrite
            }
        )

    def dingtalk_oapi_cspace_get_custom_space(
            self,
            domain='',
            agent_id=''
    ):
        """
        获取企业下的自定义空间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37325

        :param domain: 企业调用时传入，需要为10个字节以内的字符串，仅可包含字母和数字，大小写不敏感
        :param agent_id: ISV调用时传入，微应用agentId
        """
        return self._top_request(
            "dingtalk.oapi.cspace.get_custom_space",
            {
                "domain": domain,
                "agent_id": agent_id
            }
        )

    def dingtalk_oapi_cspace_grant_custom_space(
            self,
            agent_id='',
            domain='',
            type='',
            userid='',
            path='',
            fileids='',
            duration=''
    ):
        """
        授权用户访问企业下的自定义空间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37326

        :param agent_id: ISV调用时传入，授权访问指定微应用的自定义空间
        :param domain: 权限类型，目前支持上传和下载，上传请传add，下载请传download
        :param type: 企业调用时传入，授权访问该domain的自定义空间
        :param userid: 企业用户userid
        :param path: 授权访问的路径，如授权访问所有文件传“/”，授权访问/doc文件夹传“/doc/” 需要utf-8 urlEncode
        :param fileids: 授权访问的文件id列表，id之间用英文逗号隔开，如“fileId1,fileId2”
        :param duration: 权限有效时间，有效范围为0~3600秒，超出此范围或不传默认为30秒
        """
        return self._top_request(
            "dingtalk.oapi.cspace.grant_custom_space",
            {
                "agent_id": agent_id,
                "domain": domain,
                "type": type,
                "userid": userid,
                "path": path,
                "fileids": fileids,
                "duration": duration
            }
        )

    def dingtalk_oapi_file_upload_transaction(
            self,
            agent_id='',
            file_size='',
            chunk_numbers='',
            upload_id=''
    ):
        """
        开启文件上传事务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37327

        :param agent_id: 微应用的agentId
        :param file_size: 文件大小
        :param chunk_numbers: 文件总块数
        :param upload_id: 上传事务id 需要utf-8 urlEncode
        """
        return self._top_request(
            "dingtalk.oapi.file.upload.transaction",
            {
                "agent_id": agent_id,
                "file_size": file_size,
                "chunk_numbers": chunk_numbers,
                "upload_id": upload_id
            }
        )

    def dingtalk_oapi_file_upload_chunk(
            self,
            agent_id='',
            upload_id='',
            chunk_sequence='',
            file=''
    ):
        """
        上传文件块
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37328

        :param agent_id: 微应用的agentId
        :param upload_id: 上传事务id 需要utf-8 urlEncode
        :param chunk_sequence: 文件块号，从1开始计数
        :param file: 文件内容
        """
        return self._top_request(
            "dingtalk.oapi.file.upload.chunk",
            {
                "agent_id": agent_id,
                "upload_id": upload_id,
                "chunk_sequence": chunk_sequence,
                "file": file
            }
        )

    def dingtalk_oapi_file_upload_single(
            self,
            agent_id='',
            file_size='',
            file=''
    ):
        """
        单步文件上传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37329

        :param agent_id: 微应用的agentId
        :param file_size: 文件大小
        :param file: 文件内容
        """
        return self._top_request(
            "dingtalk.oapi.file.upload.single",
            {
                "agent_id": agent_id,
                "file_size": file_size,
                "file": file
            }
        )

    def dingtalk_oapi_org_setoaurl(
            self,
            oa_url,
            oa_title=''
    ):
        """
        设置企业工作台首页
        企业可使用该接口来设置工作台首页地址，效果类似于在oa管理后台手动设置工作台地址
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37360

        :param oa_url: 工作台首页地址，必须是https开头
        :param oa_title: 工作台名称，认证企业才能设置
        """
        return self._top_request(
            "dingtalk.oapi.org.setoaurl",
            {
                "oa_url": oa_url,
                "oa_title": oa_title
            }
        )

    def dingtalk_oapi_call_removeuserlist(
            self,
            staff_id_list
    ):
        """
        删除isv免费电话员工名单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37370

        :param staff_id_list: 要删除的员工userid列表
        """
        return self._top_request(
            "dingtalk.oapi.call.removeuserlist",
            {
                "staff_id_list": staff_id_list
            }
        )

    def dingtalk_oapi_call_setuserlist(
            self,
            staff_id_list
    ):
        """
        设置isv发起免费电话的主叫白名单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37371

        :param staff_id_list: 套件所所属企业免费电话主叫人员工号列表
        """
        return self._top_request(
            "dingtalk.oapi.call.setuserlist",
            {
                "staff_id_list": staff_id_list
            }
        )

    def dingtalk_oapi_call_calluser(
            self,
            staff_id,
            authed_corp_id,
            authed_staff_id
    ):
        """
        主叫方发起免费电话给授权企业下的授权范围内的人员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37372

        :param staff_id: isv套件所属企业下的员工userid
        :param authed_corp_id: 授权isv套件企业的corpid
        :param authed_staff_id: 授权isv套件企业的员工userid
        """
        return self._top_request(
            "dingtalk.oapi.call.calluser",
            {
                "staff_id": staff_id,
                "authed_corp_id": authed_corp_id,
                "authed_staff_id": authed_staff_id
            }
        )

    def dingtalk_oapi_call_getuserlist(
            self,
            offset='0',
            size=''
    ):
        """
        查询可以主动调用接口发起免费电话的员工
        删除ISV套件对应的企业下的可以主动调用接口发起免费电话的员工
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37373

        :param offset: 偏移量
        :param size: size
        """
        return self._top_request(
            "dingtalk.oapi.call.getuserlist",
            {
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_org_setscreen(
            self,
            media_id,
            end_time,
            jump_url=''
    ):
        """
        企业设置开机闪屏动画信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37412

        :param media_id: 开机图片资源id，可以通过/media/upload接口上传图片获取
        :param end_time: yyyy-MM-dd显示截止时间
        :param jump_url: 点击开机图片跳转地址
        """
        return self._top_request(
            "dingtalk.oapi.org.setscreen",
            {
                "mediaId": media_id,
                "endTime": end_time,
                "jumpUrl": jump_url
            }
        )

    def dingtalk_oapi_smartdevice_removeface(
            self,
            userid
    ):
        """
        从企业删除员工人脸识别照片
        删除企业中员工的人脸识别照片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37428

        :param userid: 员工ID
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.removeface",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_sns_getuserinfo_bycode(
            self,
            tmp_auth_code=''
    ):
        """
        根据sns临时授权码获取用户信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37515

        :param tmp_auth_code: 登录的临时授权码
        """
        return self._top_request(
            "dingtalk.oapi.sns.getuserinfo_bycode",
            {
                "tmp_auth_code": tmp_auth_code
            }
        )

    def dingtalk_oapi_hrm_employee_getdismissionlist(
            self,
            current,
            page_size,
            op_userid
    ):
        """
        智能人事开放接口-查询离职人员列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37535

        :param current: 第几页，从1开始
        :param page_size: 一页多少数据，在1-100之间
        :param op_userid: 操作人userid
        """
        return self._top_request(
            "dingtalk.oapi.hrm.employee.getdismissionlist",
            {
                "current": current,
                "page_size": page_size,
                "op_userid": op_userid
            }
        )

    def dingtalk_oapi_hrm_employee_get(
            self,
            userid
    ):
        """
        获取智能人事指定员工花名册详细数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37536

        :param userid: 查询用户userid
        """
        return self._top_request(
            "dingtalk.oapi.hrm.employee.get",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_hrm_employee_addresumerecord(
            self,
            userid='',
            title='',
            content='',
            k_v_content='',
            phone_url='',
            pc_url='',
            web_url='',
            record_timestamp=''
    ):
        """
        添加企业员工的成长记录
        企业员工的成长记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37577

        :param userid: 被操作人userid
        :param title: 成长记录title
        :param content: 成长记录第一条内容
        :param k_v_content: 厂长记录kv展示内容：json格式，顺序展示
        :param phone_url: 手机端url
        :param pc_url: pc端url
        :param web_url: webOA后台url
        :param record_timestamp: 20180428 零点零分零秒
        """
        return self._top_request(
            "dingtalk.oapi.hrm.employee.addresumerecord",
            {
                "userid": userid,
                "title": title,
                "content": content,
                "k_v_content": k_v_content,
                "phone_url": phone_url,
                "pc_url": pc_url,
                "web_url": web_url,
                "record_timestamp": record_timestamp
            }
        )

    def dingtalk_oapi_impaas_conversation_sendmessage(
            self,
            chatid,
            type,
            content
    ):
        """
        impaas发送群消息接口
        发送群消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37583

        :param chatid: 群id
        :param type: 1. 优惠券 2 系统消息
        :param content: 消息内容
        """
        return self._top_request(
            "dingtalk.oapi.impaas.conversation.sendmessage",
            {
                "chatid": chatid,
                "type": type,
                "content": content
            }
        )

    def dingtalk_oapi_impaas_conversation_create(
            self,
            channel,
            owner_userid,
            userid_list,
            name
    ):
        """
        impaas创建群接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37584

        :param channel: 渠道
        :param owner_userid: 群主员工id
        :param userid_list: 成员员工id列表
        :param name: 群名称
        """
        return self._top_request(
            "dingtalk.oapi.impaas.conversation.create",
            {
                "channel": channel,
                "owner_userid": owner_userid,
                "userid_list": userid_list,
                "name": name
            }
        )

    def dingtalk_oapi_impaas_conversation_modifymember(
            self,
            chatid,
            memberid_list,
            type,
            channel
    ):
        """
        修改群成员接口
        IMPAAS修改群成员接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37585

        :param chatid: 群ID
        :param memberid_list: 会员ID列表
        :param type: 1 添加 2 删除
        :param channel: 渠道
        """
        return self._top_request(
            "dingtalk.oapi.impaas.conversation.modifymember",
            {
                "chatid": chatid,
                "memberid_list": memberid_list,
                "type": type,
                "channel": channel
            }
        )

    def dingtalk_oapi_hrm_employee_updateresumerecord(
            self,
            userid,
            resume_id,
            title='',
            content='',
            k_v_content='',
            phone_url='',
            pc_url='',
            web_url='',
            record_timestamp=''
    ):
        """
        智能人事-更新成长记录
        更新成长记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37587

        :param userid: 被操作人员工userid
        :param resume_id: 成长记录唯一标识
        :param title: 成长记录title
        :param content: 成长记录第一条内容
        :param k_v_content: 成长记录kv展示内容：json格式，顺序展示
        :param phone_url: 手机端url
        :param pc_url: pc端url
        :param web_url: webOA后台url
        :param record_timestamp: 20180428 零点零分零秒
        """
        return self._top_request(
            "dingtalk.oapi.hrm.employee.updateresumerecord",
            {
                "userid": userid,
                "resume_id": resume_id,
                "title": title,
                "content": content,
                "k_v_content": k_v_content,
                "phone_url": phone_url,
                "pc_url": pc_url,
                "web_url": web_url,
                "record_timestamp": record_timestamp
            }
        )

    def dingtalk_oapi_hrm_employee_delresumerecord(
            self,
            userid,
            resume_id
    ):
        """
        智能人事-删除成长记录
        支持开放删除成长记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37588

        :param userid: 员工userid
        :param resume_id: 成长记录唯一标识
        """
        return self._top_request(
            "dingtalk.oapi.hrm.employee.delresumerecord",
            {
                "userid": userid,
                "resume_id": resume_id
            }
        )

    def dingtalk_oapi_role_getrole(
            self,
            role_id
    ):
        """
        获取角色详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37691

        :param role_id: 角色id
        """
        return self._top_request(
            "dingtalk.oapi.role.getrole",
            {
                "roleId": role_id
            }
        )

    def dingtalk_oapi_message_corpconversation_asyncsend_v2(
            self,
            agent_id,
            msg,
            userid_list='',
            dept_id_list='',
            to_all_user='false'
    ):
        """
        企业会话消息异步发送接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37692

        :param agent_id: 微应用的id
        :param msg: 消息体，具体见文档
        :param userid_list: 接收者的用户userid列表
        :param dept_id_list: 接收者的部门id列表
        :param to_all_user: 是否发送给企业全部用户
        """
        return self._top_request(
            "dingtalk.oapi.message.corpconversation.asyncsend_v2",
            {
                "agent_id": agent_id,
                "msg": msg,
                "userid_list": userid_list,
                "dept_id_list": dept_id_list,
                "to_all_user": to_all_user
            }
        )

    def dingtalk_oapi_certify_queryinfo(
            self,
            userid
    ):
        """
        查询实名认证信息
        提供查询实名认证信息（仅支持2018云栖大会）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38022

        :param userid: 员工userId，也称staffId
        """
        return self._top_request(
            "dingtalk.oapi.certify.queryinfo",
            {
                "userid": userid
            }
        )

    def dingtalk_ccoservice_servicegroup_get(
            self,
            open_group_id
    ):
        """
        查询服务群信息
        企业查询自己企业内服务群的信息，会把服务群的群主信息，dingtalkid，nick，真实姓名和群名称返回。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38055

        :param open_group_id: 服务群id
        """
        return self._top_request(
            "dingtalk.ccoservice.servicegroup.get",
            {
                "open_group_id": open_group_id
            }
        )

    def dingtalk_ccoservice_servicegroup_addmember(
            self,
            userid,
            open_group_id
    ):
        """
        把企业某个员工加入到服务群
        此API主要就是把某个企业的员工加入到此企业的某个服务群内
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38056

        :param userid: 企业员工id
        :param open_group_id: 服务群id
        """
        return self._top_request(
            "dingtalk.ccoservice.servicegroup.addmember",
            {
                "userid": userid,
                "open_group_id": open_group_id
            }
        )

    def dingtalk_oapi_microapp_addwithuserid(
            self,
            agent_id,
            userids
    ):
        """
        添加用户到微应用可见范围
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38097

        :param agent_id: 微应用实例化id，表示企业和微应用的唯一关系
        :param userids: 用户id列表，最多10个
        """
        return self._top_request(
            "dingtalk.oapi.microapp.addwithuserid",
            {
                "agentId": agent_id,
                "userids": userids
            }
        )

    def dingtalk_oapi_microapp_delwithuserid(
            self,
            agent_id,
            userids
    ):
        """
        去掉用户的微应用可见范围
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38098

        :param agent_id: 微应用实例化id，表示企业和微应用的唯一关系
        :param userids: 用户id列表，最多10个
        """
        return self._top_request(
            "dingtalk.oapi.microapp.delwithuserid",
            {
                "agentId": agent_id,
                "userids": userids
            }
        )

    def dingtalk_oapi_org_listshortcut(
            self
    ):
        """
        查询企业工作台快捷方式
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38101

        """
        return self._top_request(
            "dingtalk.oapi.org.listshortcut"
        )

    def dingtalk_oapi_org_setshortcut(
            self,
            agent_ids=''
    ):
        """
        设置企业工作台快捷方式列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38102

        :param agent_ids: 微应用实例id列表
        """
        return self._top_request(
            "dingtalk.oapi.org.setshortcut",
            {
                "agentIds": agent_ids
            }
        )

    def dingtalk_oapi_impaas_newretail_sendstaffmessage(
            self,
            msg_type='0',
            sender='',
            userid_list='',
            content=''
    ):
        """
        新零售发送单聊消息给员工
        新零售场景下，通过系统账号或员工账号向员工发送单聊账号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38164

        :param msg_type: 0系统消息
        :param sender: 系统账号
        :param userid_list: 用账号列表
        :param content: 消息体
        """
        return self._top_request(
            "dingtalk.oapi.impaas.newretail.sendstaffmessage",
            {
                "msg_type": msg_type,
                "sender": sender,
                "userid_list": userid_list,
                "content": content
            }
        )

    def dingtalk_oapi_impaas_newretail_sendstaffgroupmessage(
            self,
            msg_type='0',
            sender='',
            chat_id='',
            content=''
    ):
        """
        新零售的系统账号发送群聊消息
        新零售场景下，先创建某企业的内部群。
        然后用特定的系统账号向群内发送群聊消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38183

        :param msg_type: 消息类型
        :param sender: 系统账号名
        :param chat_id: 加密后的群号
        :param content: 消息内容
        """
        return self._top_request(
            "dingtalk.oapi.impaas.newretail.sendstaffgroupmessage",
            {
                "msg_type": msg_type,
                "sender": sender,
                "chat_id": chat_id,
                "content": content
            }
        )

    def dingtalk_oapi_smartdevice_visitor_removevisitor(
            self,
            reservation_id
    ):
        """
        取消企业访客邀约记录信息
        ISV向钉钉智能硬件取消授权企业的访客邀约记录，以实现与智能识别设备的打通流程
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38184

        :param reservation_id: 预约编号
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.visitor.removevisitor",
            {
                "reservation_id": reservation_id
            }
        )

    def dingtalk_oapi_impaas_group_getbydeptid(
            self,
            dept_id
    ):
        """
        新零售场景下，获取企业全员群id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38514

        :param dept_id: 1企业全员群
        """
        return self._top_request(
            "dingtalk.oapi.impaas.group.getbydeptid",
            {
                "dept_id": dept_id
            }
        )

    def dingtalk_oapi_role_updaterole(
            self,
            role_id,
            role_name
    ):
        """
        更新角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38575

        :param role_id: 1
        :param role_name: 1
        """
        return self._top_request(
            "dingtalk.oapi.role.updaterole",
            {
                "roleId": role_id,
                "roleName": role_name
            }
        )

    def dingtalk_oapi_role_addrole(
            self,
            role_name,
            group_id
    ):
        """
        添加角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38576

        :param role_name: test
        :param group_id: test
        """
        return self._top_request(
            "dingtalk.oapi.role.addrole",
            {
                "roleName": role_name,
                "groupId": group_id
            }
        )

    def dingtalk_oapi_role_addrolegroup(
            self,
            name
    ):
        """
        创建角色组
        添加角色组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38577

        :param name: 名称
        """
        return self._top_request(
            "dingtalk.oapi.role.addrolegroup",
            {
                "name": name
            }
        )

    def dingtalk_oapi_impaas_relation_add(
            self,
            src_im_openid,
            dst_im_openid,
            is_double_way,
            begin_time,
            end_time
    ):
        """
        impaas关系导入
        二方关系导入钉钉
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38619

        :param src_im_openid: 发送者钉钉的openid
        :param dst_im_openid: 接收者钉钉的openid
        :param is_double_way: 是否双向关系
        :param begin_time: 时间戳精确到毫秒
        :param end_time: 时间戳精确到毫秒
        """
        return self._top_request(
            "dingtalk.oapi.impaas.relation.add",
            {
                "request": {
                    "src_im_openid": src_im_openid,
                    "dst_im_openid": dst_im_openid,
                    "is_double_way": is_double_way,
                    "begin_time": begin_time,
                    "end_time": end_time
                }
            }
        )

    def dingtalk_oapi_chat_transform(
            self,
            open_conversation_id
    ):
        """
        将conversationId转换成chatId
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38620

        :param open_conversation_id: 开放cid
        """
        return self._top_request(
            "dingtalk.oapi.chat.transform",
            {
                "open_conversation_id": open_conversation_id
            }
        )

    def dingtalk_oapi_impaas_user_addprofile(
            self,
            id,
            nick,
            channel,
            extension='',
            avatar_mediaid=''
    ):
        """
        二方账号导入
        二方渠道导入账号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38621

        :param id: 账号id
        :param nick: 账号nick
        :param channel: 渠道
        :param extension: 附加信息
        :param avatar_mediaid: 头像mediaid
        """
        return self._top_request(
            "dingtalk.oapi.impaas.user.addprofile",
            {
                "request": {
                    "id": id,
                    "nick": nick,
                    "channel": channel,
                    "extension": extension,
                    "avatar_mediaid": avatar_mediaid
                }
            }
        )

    def dingtalk_oapi_impaas_relation_del(
            self,
            src_im_openid,
            dst_im_openid,
            is_double_way
    ):
        """
        二方关系删除
        删除二方关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38622

        :param src_im_openid: 发送者的im的openid
        :param dst_im_openid: 接受者的im的openid
        :param is_double_way: 是否双向关系
        """
        return self._top_request(
            "dingtalk.oapi.impaas.relation.del",
            {
                "request": {
                    "src_im_openid": src_im_openid,
                    "dst_im_openid": dst_im_openid,
                    "is_double_way": is_double_way
                }
            }
        )

    def dingtalk_oapi_impaas_groupmember_modifymemberinfo(
            self,
            chatid,
            member_info
    ):
        """
        IMPAAS修改群成员信息
        修改群成员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38679

        :param chatid: 群ID
        :param member_info: 要修改的成员信息
        """
        return self._top_request(
            "dingtalk.oapi.impaas.groupmember.modifymemberinfo",
            {
                "request": {
                    "chatid": chatid,
                    "member_info": member_info
                }
            }
        )

    def dingtalk_oapi_impaas_group_dismiss(
            self,
            chatid
    ):
        """
        impaas解散群接口
        IMPAAS解散群接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38680

        :param chatid: 群ID
        """
        return self._top_request(
            "dingtalk.oapi.impaas.group.dismiss",
            {
                "request": {
                    "chatid": chatid
                }
            }
        )

    def dingtalk_oapi_impaas_groupmember_getmemberlist(
            self,
            chatid,
            offset='0',
            length='1000'
    ):
        """
        IMPAAS获取群成员列表
        获取群成员列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38681

        :param chatid: 群ID
        :param offset: 群成员列表偏移
        :param length: 本次请求返回的群成员列表数量
        """
        return self._top_request(
            "dingtalk.oapi.impaas.groupmember.getmemberlist",
            {
                "request": {
                    "chatid": chatid,
                    "offset": offset,
                    "length": length
                }
            }
        )

    def dingtalk_oapi_impaas_conversaion_changegroupowner(
            self,
            chatid='',
            userid='',
            channel=''
    ):
        """
        impaas群名称更改
        盒马接入钉钉sdk，群主转交功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38711

        :param chatid: 钉钉会话id
        :param userid: 员工id
        :param channel: 应用channel
        """
        return self._top_request(
            "dingtalk.oapi.impaas.conversaion.changegroupowner",
            {
                "chatid": chatid,
                "userid": userid,
                "channel": channel
            }
        )

    def dingtalk_oapi_impaas_message_asyncsend(
            self,
            msg_content,
            msg_type,
            group_id='',
            msg_extension='',
            receiverid_list='',
            senderid=None,
            msg_feature='',
            xpn_model=None
    ):
        """
        impaas消息异步发送
        消息异步发送，返回taskid，根据taskid获取消息是否成功
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38716

        :param msg_content: 消息内容，根据msgtype不同，解析方式不同
        :param msg_type: 消息类型：text，image，user-defined
        :param group_id: 群ID
        :param msg_extension: 消息的可扩展字段，透传
        :param receiverid_list: 接受者，暂不支持，可不填
        :param senderid: 发送者，暂不支持，可不填
        :param msg_feature: 消息的特性：静默消息，系统消息
        :param xpn_model: 推送信息
        """
        return self._top_request(
            "dingtalk.oapi.impaas.message.asyncsend",
            {
                "request": {
                    "msg_content": msg_content,
                    "msg_type": msg_type,
                    "group_id": group_id,
                    "msg_extension": msg_extension,
                    "receiverid_list": receiverid_list,
                    "senderid": senderid,
                    "msg_feature": msg_feature,
                    "xpn_model": xpn_model
                }
            }
        )

    def dingtalk_oapi_alitrip_btrip_train_city_suggest(
            self,
            rq
    ):
        """
        火车票城市搜索
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38724

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.train.city.suggest",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_impaas_message_getmessagestatus(
            self,
            taskid,
            senderid=None
    ):
        """
        获取消息的发送状态
        获取消息发送的状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38725

        :param taskid: 异步返回的任务ID
        :param senderid: 账号信息
        """
        return self._top_request(
            "dingtalk.oapi.impaas.message.getmessagestatus",
            {
                "request": {
                    "taskid": taskid,
                    "senderid": senderid
                }
            }
        )

    def dingtalk_oapi_alitrip_btrip_cost_center_entity_delete(
            self,
            rq
    ):
        """
        删除成本中心人员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38726

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.cost.center.entity.delete",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_approval_new(
            self,
            rq
    ):
        """
        用户新建审批单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38730

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.approval.new",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_category_address_get(
            self,
            rq
    ):
        """
        获取类目预定页跳转地址
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38731

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.category.address.get",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_ccoservice_servicegroup_isignoreproblemcheck(
            self,
            open_conversation_id,
            dingtalk_id
    ):
        """
        是否忽略问题模型判断
        接口描述：是否忽略问题模型判断，返回值：true: 可以忽略; false: 不能忽略,走正常逻辑;
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38761

        :param open_conversation_id: 群id
        :param dingtalk_id: 用户dingtalk加密id
        """
        return self._top_request(
            "dingtalk.oapi.ccoservice.servicegroup.isignoreproblemcheck",
            {
                "open_conversation_id": open_conversation_id,
                "dingtalk_id": dingtalk_id
            }
        )

    def dingtalk_oapi_ccoservice_servicegroup_updateservicetime(
            self,
            open_conversation_id,
            start_time,
            end_time,
            time_type=''
    ):
        """
        修改服务群入群文案时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38776

        :param open_conversation_id: 群加密id
        :param start_time: 服务开始时间
        :param end_time: 服务结束时间
        :param time_type: 日期类型,0-工作日;1-每日;99-端上不显示
        """
        return self._top_request(
            "dingtalk.oapi.ccoservice.servicegroup.updateservicetime",
            {
                "open_conversation_id": open_conversation_id,
                "start_time": start_time,
                "end_time": end_time,
                "time_type": time_type
            }
        )

    def dingtalk_oapi_alitrip_btrip_apply_search(
            self,
            rq
    ):
        """
        搜索企业审批单数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38777

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.apply.search",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_apply_get(
            self,
            rq
    ):
        """
        获取单个申请单的详情数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38778

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.apply.get",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_cost_center_transfer(
            self,
            rq
    ):
        """
        商旅成本中心转换为外部成本中心
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38803

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.cost.center.transfer",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_invoice_search(
            self,
            rq
    ):
        """
        差旅申请用户搜索可用发票列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38806

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.invoice.search",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_flight_order_search(
            self,
            rq
    ):
        """
        获取企业机票订单数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38807

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.flight.order.search",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_train_order_search(
            self,
            rq
    ):
        """
        获取企业火车票订单数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38808

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.train.order.search",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_cost_center_entity_add(
            self,
            rq
    ):
        """
        增加成本中心人员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38809

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.cost.center.entity.add",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_hotel_order_search(
            self,
            rq
    ):
        """
        企业获取商旅酒店订单数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38810

        :param rq: rq
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.hotel.order.search",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_cost_center_entity_set(
            self,
            rq=None
    ):
        """
        设置成本中心人员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38836

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.cost.center.entity.set",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_cost_center_delete(
            self,
            rq
    ):
        """
        删除成本中心
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38837

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.cost.center.delete",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_cost_center_modify(
            self,
            rq
    ):
        """
        修改成本中心基本信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38838

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.cost.center.modify",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_cost_center_new(
            self,
            rq
    ):
        """
        新建成本中心
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38839

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.cost.center.new",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_approval_update(
            self,
            rq
    ):
        """
        更新审批单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38840

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.approval.update",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_cost_center_query(
            self,
            rq
    ):
        """
        查询成本中心
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38841

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.cost.center.query",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_impaas_groupmember_modify(
            self,
            modify_type,
            member_list,
            channel,
            chatid
    ):
        """
        修改群成员
        修改群成员列表，支持成员增删。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38860

        :param modify_type: 该参数表示本次请求的操作类型，“1”表示添加成员，“2”表示删除成员。
        :param member_list: 待操作成员列表
        :param channel: 接入方channel信息，该值由接入方接入IMPaaS平台时，向IMPaaS平台申请，例如“hema”“eleme”等。
        :param chatid: 群ID，由创建群接口返回。
        """
        return self._top_request(
            "dingtalk.oapi.impaas.groupmember.modify",
            {
                "request": {
                    "modify_type": modify_type,
                    "member_list": member_list,
                    "channel": channel,
                    "chatid": chatid
                }
            }
        )

    def dingtalk_oapi_impaas_group_modify(
            self,
            group_owner,
            group_name,
            chatid,
            show_history_type=''
    ):
        """
        impaas群信息修改
        修改群信息：群名称、群主等；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38861

        :param group_owner: 修改后的群主，若为空或与当前群主相同，则不会对群主进行变更操作。
        :param group_name: 修改后的群名称
        :param chatid: 群ID，由创建群接口返回
        :param show_history_type: 新人进群是否能查看最近100条记录。0:不能；1:可以查看最近100条记录；不填默认为0
        """
        return self._top_request(
            "dingtalk.oapi.impaas.group.modify",
            {
                "request": {
                    "group_owner": group_owner,
                    "group_name": group_name,
                    "chatid": chatid,
                    "show_history_type": show_history_type
                }
            }
        )

    def dingtalk_oapi_alitrip_btrip_vehicle_order_search(
            self,
            rq
    ):
        """
        用车订单查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38876

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.vehicle.order.search",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_alitrip_btrip_flight_city_suggest(
            self,
            rq
    ):
        """
        机票城市搜索
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38877

        :param rq: 请求对象
        """
        return self._top_request(
            "dingtalk.oapi.alitrip.btrip.flight.city.suggest",
            {
                "rq": rq
            }
        )

    def dingtalk_oapi_attendance_isopensmartreport(
            self
    ):
        """
        判断是否开启考勤智能报表
        考勤智能报表是考勤为了满足企业个性化的统计需求而开发的一套智能的可编程的报表系统，企业可以通过简单勾选或者高级编程模式来定制自己的统计规则，通过智能报表可以非常方便地输出便于计算薪酬结果的统计数据。该接口可以通过企业corpId来判断企业是否开启了考勤智能报表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38905

        """
        return self._top_request(
            "dingtalk.oapi.attendance.isopensmartreport"
        )

    def dingtalk_oapi_attendance_getattcolumns(
            self
    ):
        """
        获取企业考勤报表列
        该接口用于获取企业智能考勤报表中的列信息，通过获取列信息中的id值，ISV可以根据列的id查询考勤智能报表中该列的统计数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38907

        """
        return self._top_request(
            "dingtalk.oapi.attendance.getattcolumns"
        )

    def dingtalk_oapi_attendance_getcolumnval(
            self,
            userid='',
            column_id_list='',
            from_date='',
            to_date=''
    ):
        """
        获取智能考勤报表的列值
        该接口用于获取钉钉智能考勤报表的列值数据，其中包含了一定时间段内报表某一列的所有数据，以及相关的列信息，可以供指定的ISV进行使用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38908

        :param userid: 用户的userId
        :param column_id_list: 列id
        :param from_date: 开始时间
        :param to_date: 结束时间
        """
        return self._top_request(
            "dingtalk.oapi.attendance.getcolumnval",
            {
                "userid": userid,
                "column_id_list": column_id_list,
                "from_date": from_date,
                "to_date": to_date
            }
        )

    def dingtalk_oapi_impaas_relation_get(
            self,
            src_im_openid,
            dst_im_openids
    ):
        """
        impaas关系查询
        impaas关系查询, 查询 sender im openid 跟 receiver im openid的关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38909

        :param src_im_openid: 发送者钉钉的openid
        :param dst_im_openids: 接收者钉钉的openid
        """
        return self._top_request(
            "dingtalk.oapi.impaas.relation.get",
            {
                "request": {
                    "src_im_openid": src_im_openid,
                    "dst_im_openids": dst_im_openids
                }
            }
        )

    def dingtalk_oapi_impaas_user_getlogintoken(
            self,
            id,
            channel
    ):
        """
        获取免登token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38910

        :param id: 二方账号
        :param channel: 渠道类型
        """
        return self._top_request(
            "dingtalk.oapi.impaas.user.getlogintoken",
            {
                "request": {
                    "id": id,
                    "channel": channel
                }
            }
        )

    def dingtalk_oapi_user_getDeptMember(
            self,
            dept_id=''
    ):
        """
        根据部门id获取员工ID列表
        aa
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39028

        :param dept_id: a
        """
        return self._top_request(
            "dingtalk.oapi.user.getDeptMember",
            {
                "deptId": dept_id
            }
        )

    def dingtalk_oapi_workrecord_add(
            self,
            userid,
            create_time,
            title,
            url,
            form_item_list,
            originator_user_id='',
            source_name=''
    ):
        """
        新增待办事项
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39074

        :param userid: 用户id
        :param create_time: 待办时间。Unix时间戳
        :param title: 标题
        :param url: 待办跳转url
        :param form_item_list: 表单列表
        :param originator_user_id: manager7078
        :param source_name: 待办来源名称
        """
        return self._top_request(
            "dingtalk.oapi.workrecord.add",
            {
                "userid": userid,
                "create_time": create_time,
                "title": title,
                "url": url,
                "formItemList": form_item_list,
                "originator_user_id": originator_user_id,
                "source_name": source_name
            }
        )

    def dingtalk_oapi_workrecord_update(
            self,
            userid,
            record_id
    ):
        """
        更新待办事项状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39075

        :param userid: 用户id
        :param record_id: 待办事项唯一id
        """
        return self._top_request(
            "dingtalk.oapi.workrecord.update",
            {
                "userid": userid,
                "record_id": record_id
            }
        )

    def dingtalk_oapi_attendance_getleavetimebynames(
            self,
            userid='',
            leave_names='',
            from_date='',
            to_date=''
    ):
        """
        获取考勤智能报表的假期数据
        该接口用于根据字段名和用户id获取钉钉智能考勤报表的假期数据，其中包含了一定时间段内报表假期列的所有数据，由于假期列是一个动态列，因此需要根据假期名称获取数据，可以供指定的ISV进行使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39271

        :param userid: 用户的userId
        :param leave_names: 列id
        :param from_date: 开始时间
        :param to_date: 结束时间
        """
        return self._top_request(
            "dingtalk.oapi.attendance.getleavetimebynames",
            {
                "userid": userid,
                "leave_names": leave_names,
                "from_date": from_date,
                "to_date": to_date
            }
        )

    def dingtalk_oapi_ding_task_status_update(
            self,
            task_id='',
            task_status='',
            operator_userid=''
    ):
        """
        更新任务完成状态
        企业更新已经发送到用户的任务完成状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39343

        :param task_id: 任务ID
        :param task_status: 任务状态:1-未完成;2-完成
        :param operator_userid: 操作人id
        """
        return self._top_request(
            "dingtalk.oapi.ding.task.status.update",
            {
                "task_id": task_id,
                "task_status": task_status,
                "operator_userid": operator_userid
            }
        )

    def dingtalk_oapi_smartwork_hrm_employee_querydimission(
            self,
            offset,
            size
    ):
        """
        智能人事查询公司离职员工列表
        智能人事业务，提供企业/ISV分页查询公司离职员工id列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39418

        :param offset: 分页游标，从0开始。根据返回结果里的next_cursor是否为空来判断是否还有下一页，且再次调用时offset设置成next_cursor的值
        :param size: 分页大小，最大50
        """
        return self._top_request(
            "dingtalk.oapi.smartwork.hrm.employee.querydimission",
            {
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_smartwork_hrm_employee_listdimission(
            self,
            userid_list=''
    ):
        """
        批量获取员工离职信息
        根据传入的staffId列表，批量查询员工的离职信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39419

        :param userid_list: 员工id
        """
        return self._top_request(
            "dingtalk.oapi.smartwork.hrm.employee.listdimission",
            {
                "userid_list": userid_list
            }
        )

    def dingtalk_oapi_newretail_sendsms(
            self,
            smsmodule=None
    ):
        """
        天地会短信通知用户激活
        提供给天地会调用发短信，提醒用户激活钉钉
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39422

        :param smsmodule: 短信接受者信息
        """
        return self._top_request(
            "dingtalk.oapi.newretail.sendsms",
            {
                "smsmodule": smsmodule
            }
        )

    def dingtalk_oapi_ccoservice_entrance_sendnotify(
            self,
            app_id,
            userid,
            content
    ):
        """
        通过企业的系统账号给企业员工发送消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39429

        :param app_id: 微应用ID
        :param userid: 员工ID
        :param content: 文本的通知
        """
        return self._top_request(
            "dingtalk.oapi.ccoservice.entrance.sendnotify",
            {
                "app_id": app_id,
                "userid": userid,
                "content": content
            }
        )

    def dingtalk_oapi_impaas_user_modprofile(
            self,
            account_info,
            extension='',
            nick='',
            avatar_mediaid=''
    ):
        """
        修改profile信息
        修改profile信息，开放 nick， extension， avatarMediaId
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39433

        :param account_info: 账号信息
        :param extension: 附带信息
        :param nick: nick
        :param avatar_mediaid: 头像
        """
        return self._top_request(
            "dingtalk.oapi.impaas.user.modprofile",
            {
                "request": {
                    "account_info": account_info,
                    "extension": extension,
                    "nick": nick,
                    "avatar_mediaid": avatar_mediaid
                }
            }
        )

    def dingtalk_oapi_smartwork_hrm_employee_list(
            self,
            userid_list,
            field_filter_list=''
    ):
        """
        批量获取员工花名册字段信息
        智能人事业务，企业/ISV根据员工id批量访问员工花名册信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39434

        :param userid_list: 员工id列表
        :param field_filter_list: 需要获取的花名册字段信息
        """
        return self._top_request(
            "dingtalk.oapi.smartwork.hrm.employee.list",
            {
                "userid_list": userid_list,
                "field_filter_list": field_filter_list
            }
        )

    def dingtalk_oapi_processinstance_listids(
            self,
            process_code,
            start_time,
            end_time='',
            size='10',
            cursor='0',
            userid_list=''
    ):
        """
        分页获取审批实例id列表
        企业可以根据审批流的唯一标识，分页获取该审批流对应的审批实例id。只能取到权限范围内的相关部门的审批实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39471

        :param process_code: 流程模板唯一标识，可在oa后台编辑审批表单部分查询
        :param start_time: 审批实例开始时间，毫秒级
        :param end_time: 审批实例结束时间，毫秒级，默认取当前值
        :param size: 分页参数，每页大小，最多传10
        :param cursor: 分页查询的游标，最开始传0，后续传返回参数中的next_cursor值
        :param userid_list: 发起人用户id列表
        """
        return self._top_request(
            "dingtalk.oapi.processinstance.listids",
            {
                "process_code": process_code,
                "start_time": start_time,
                "end_time": end_time,
                "size": size,
                "cursor": cursor,
                "userid_list": userid_list
            }
        )

    def dingtalk_oapi_smartwork_hrm_employee_addpreentry(
            self,
            param
    ):
        """
        智能人事添加企业待入职员工
        智能人事添加待入职员工信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39500

        :param param: 添加待入职入参
        """
        return self._top_request(
            "dingtalk.oapi.smartwork.hrm.employee.addpreentry",
            {
                "param": param
            }
        )

    def dingtalk_oapi_smartwork_hrm_employee_querypreentry(
            self,
            offset,
            size
    ):
        """
        智能人事查询公司待入职员工列表
        智能人事业务，企业/ISV分页查询公司待入职员工id列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39501

        :param offset: 分页起始值，默认0开始
        :param size: 分页大小，最大50
        """
        return self._top_request(
            "dingtalk.oapi.smartwork.hrm.employee.querypreentry",
            {
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_smartwork_hrm_employee_queryonjob(
            self,
            status_list,
            offset,
            size
    ):
        """
        智能人事查询公司在职员工列表
        智能人事业务，提供企业/ISV按在职状态分页查询公司在职员工id列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39502

        :param status_list: 在职员工子状态筛选。2，试用期；3，正式；5，待离职；-1，无状态
        :param offset: 分页起始值，默认0开始
        :param size: 分页大小，最大50
        """
        return self._top_request(
            "dingtalk.oapi.smartwork.hrm.employee.queryonjob",
            {
                "status_list": status_list,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_smartdevice_visitor_sendnotify(
            self,
            visitor_notify_vo=None,
            reservation_id=''
    ):
        """
        为访客ISV提供发送通知的功能
        提供向被访者或访客接待人员发送通知信息的功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39519

        :param visitor_notify_vo: 访客通知模型
        :param reservation_id: 预约ID
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.visitor.sendnotify",
            {
                "visitor_notify_vo": visitor_notify_vo,
                "reservation_id": reservation_id
            }
        )

    def dingtalk_oapi_sns_send_msg(
            self,
            code='',
            msg=None
    ):
        """
        个人E应用消息推送
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39594

        :param code: form表单提交成功后获取的formId
        :param msg: 消息内容
        """
        return self._top_request(
            "dingtalk.oapi.sns.send_msg",
            {
                "code": code,
                "msg": msg
            }
        )

    def dingtalk_oapi_user_get_admin_scope(
            self,
            userid
    ):
        """
        查询管理员通讯录权限范围
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39683

        :param userid: 用户id
        """
        return self._top_request(
            "dingtalk.oapi.user.get_admin_scope",
            {
                "userid": userid
            }
        )

    def dingtalk_oapi_smartwork_hrm_employee_listcontact(
            self,
            userid_list
    ):
        """
        批量获取离职员工通讯录信息
        ISV批量获取离职员工的通讯录花名册字段信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39977

        :param userid_list: 员工id列表
        """
        return self._top_request(
            "dingtalk.oapi.smartwork.hrm.employee.listcontact",
            {
                "userid_list": userid_list
            }
        )

    def dingtalk_oapi_user_listbypage(
            self,
            offset,
            size,
            lang='',
            department_id='',
            order=''
    ):
        """
        获取部门成员(详情)
        获取部门成员（详情）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40282

        :param offset: 支持分页查询，与size参数同时设置时才生效，此参数代表偏移量
        :param size: 支持分页查询，与offset参数同时设置时才生效，此参数代表分页大小，最大100
        :param lang: 通讯录语言(默认zh_CN另外支持en_US)
        :param department_id: 获取的部门id
        :param order: 支持分页查询，部门成员的排序规则，默认不传是按自定义排序；entry_asc代表按照进入部门的时间升序，entry_desc代表按照进入部门的时间降序，modify_asc代表按照部门信息修改时间升序，modify_desc代表按照部门信息修改时间降序，custom代表用户定义(未定义时按照拼音)排序
        """
        return self._top_request(
            "dingtalk.oapi.user.listbypage",
            {
                "offset": offset,
                "size": size,
                "lang": lang,
                "department_id": department_id,
                "order": order
            }
        )

    def dingtalk_oapi_impaas_conversation_updateentranceid(
            self,
            entrance_id,
            accounts,
            uuid,
            channel,
            cid,
            extension=''
    ):
        """
        IMPaaS设置二级会话的入口id
        在二级会话功能中，部分场景需要修改会话入口。另外，数据初始化时，也需要该接口做一部分数据订正
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40563

        :param entrance_id: 入口id，数字
        :param accounts: 要设置的用户列表
        :param uuid: 该请求的唯一id，用于去重、打日志
        :param channel: 业务channel
        :param cid: 会话id
        :param extension: 扩展信息，可选
        """
        return self._top_request(
            "dingtalk.oapi.impaas.conversation.updateentranceid",
            {
                "request": {
                    "entrance_id": entrance_id,
                    "accounts": accounts,
                    "uuid": uuid,
                    "channel": channel,
                    "cid": cid,
                    "extension": extension
                }
            }
        )

    def dingtalk_oapi_attendance_getleavestatus(
            self,
            userid_list,
            start_time,
            end_time,
            offset,
            size
    ):
        """
        请假状态查询接口
        该接口用于查询指定企业下的指定用户在指定时间段内的请假状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40614

        :param userid_list: 待查询用户id列表，支持最多100个用户的批量查询
        :param start_time: 开始时间 ，时间戳，支持最多180天的查询
        :param end_time: 结束时间，时间戳，支持最多180天的查询
        :param offset: 分页偏移，非负整数
        :param size: 分页大小，正整数，最大20
        """
        return self._top_request(
            "dingtalk.oapi.attendance.getleavestatus",
            {
                "userid_list": userid_list,
                "start_time": start_time,
                "end_time": end_time,
                "offset": offset,
                "size": size
            }
        )

    def qimen_dingtalk_flow_form(
            self,
            corp_id,
            user_id,
            process_code,
            action,
            form=None
    ):
        """
        钉钉审批开放表单
        审批表单接入第三方企业数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40627

        :param corp_id: 钉钉企业ID
        :param user_id: 员工ID
        :param process_code: 审批模板唯一编码
        :param action: 表单渲染动作：RENDER, UPDATE, SUBMIT, 分别对应表单的初始化，内容更新以及提交前检查
        :param form: 表单数据
        """
        return self._top_request(
            "qimen.dingtalk.flow.form",
            {
                "corpId": corp_id,
                "userId": user_id,
                "processCode": process_code,
                "action": action,
                "form": form
            }
        )

    def dingtalk_oapi_workrecord_getbyuserid(
            self,
            userid,
            offset,
            limit,
            status
    ):
        """
        获取用户的待办事项
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40726

        :param userid: 用户唯一ID
        :param offset: 分页游标，从0开始，如返回结果中has_more为true，则表示还有数据，offset再传上一次的offset+limit
        :param limit: 分页大小，最多50
        :param status: 待办事项状态，0表示未完成，1表示完成
        """
        return self._top_request(
            "dingtalk.oapi.workrecord.getbyuserid",
            {
                "userid": userid,
                "offset": offset,
                "limit": limit,
                "status": status
            }
        )

    def dingtalk_oapi_process_template_list(
            self,
            userid='',
            offset='',
            size=''
    ):
        """
        分页获取企业下所有的流程模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41001

        :param userid: abc123
        :param offset: 游标属性
        :param size: 每页数量
        """
        return self._top_request(
            "dingtalk.oapi.process.template.list",
            {
                "userid": userid,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_process_property_update(
            self,
            userid='',
            process_code='',
            component_id='',
            props=None
    ):
        """
        修改用户指定审批流程模板的支付属性
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41002

        :param userid: 员工工号 企业唯一
        :param process_code: 模板code
        :param component_id: 控件id
        :param props: 控件属性集
        """
        return self._top_request(
            "dingtalk.oapi.process.property.update",
            {
                "userid": userid,
                "process_code": process_code,
                "component_id": component_id,
                "props": props
            }
        )

    def dingtalk_oapi_chatbot_pictureurl_get(
            self,
            download_code
    ):
        """
        下载机器人授权的图片
        通过downloadCode获取下载url
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41003

        :param download_code: 图片临时下载码
        """
        return self._top_request(
            "dingtalk.oapi.chatbot.pictureurl.get",
            {
                "download_code": download_code
            }
        )

    def dingtalk_oapi_conference_publish(
            self,
            conference_id,
            userid
    ):
        """
        智能会务发布
        钉钉智能会务，将会务信息发布到工作台，参会者可见
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41023

        :param conference_id: 会务id
        :param userid: 操作用户id
        """
        return self._top_request(
            "dingtalk.oapi.conference.publish",
            {
                "conference_id": conference_id,
                "userid": userid
            }
        )

    def dingtalk_oapi_conference_get(
            self,
            conference_id
    ):
        """
        智能会务获取会务基础信息
        钉钉智能会务，提供给ISV获取会务基础信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41024

        :param conference_id: 会务Id
        """
        return self._top_request(
            "dingtalk.oapi.conference.get",
            {
                "conference_id": conference_id
            }
        )

    def dingtalk_oapi_conference_unpublish(
            self,
            conference_id,
            userid
    ):
        """
        智能会务撤销发布
        钉钉智能会务，将会务信息从工作台tag中撤销，参会者不可见
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41025

        :param conference_id: 会务id
        :param userid: 操作用户id
        """
        return self._top_request(
            "dingtalk.oapi.conference.unpublish",
            {
                "conference_id": conference_id,
                "userid": userid
            }
        )

    def dingtalk_oapi_edu_guardian_list(
            self,
            class_id,
            page_no,
            page_size
    ):
        """
        查询班级下家长列表
        查询班级下家长列表信息，通过orgid，班级id查询家长的nick（如：小A的爸爸），非真实姓名，关系类别（妈妈、爸爸、其他亲属），学生staffid
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41051

        :param class_id: 班级ID
        :param page_no: 分页页数
        :param page_size: 每页大小
        """
        return self._top_request(
            "dingtalk.oapi.edu.guardian.list",
            {
                "class_id": class_id,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def dingtalk_oapi_edu_guardian_get(
            self,
            class_id,
            guardian_userid
    ):
        """
        家长信息查询
        家长信息查询，查询家长信息，通过orgid，班级id查询家长的nick（如：小A的爸爸），非真实姓名，关系类别（妈妈、爸爸、其他亲属），学生staffid
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41052

        :param class_id: 班级ID
        :param guardian_userid: 家长ID
        """
        return self._top_request(
            "dingtalk.oapi.edu.guardian.get",
            {
                "class_id": class_id,
                "guardian_userid": guardian_userid
            }
        )

    def dingtalk_oapi_edu_student_get(
            self,
            class_id,
            student_userid
    ):
        """
        学生信息查询
        学生信息查询，通过orgid，学生id，班级id,查询学生的名称、所在校区id、年级id、学段id、学生的staffid
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41053

        :param class_id: 班级ID
        :param student_userid: 学生ID
        """
        return self._top_request(
            "dingtalk.oapi.edu.student.get",
            {
                "class_id": class_id,
                "student_userid": student_userid
            }
        )

    def dingtalk_oapi_edu_student_list(
            self,
            class_id,
            page_no,
            page_size
    ):
        """
        学生列表信息
        学生列表信息查询,查询学生的名称、所在的班级id、校区id、年级id、学段id、学生的staffid
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41054

        :param class_id: 班级ID
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "dingtalk.oapi.edu.student.list",
            {
                "class_id": class_id,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def dingtalk_oapi_edu_class_get(
            self,
            class_id
    ):
        """
        班级信息查询
        班级信息查询，通过orgid、班级id查询班级名称、所在学段id、校区id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41055

        :param class_id: 班级ID
        """
        return self._top_request(
            "dingtalk.oapi.edu.class.get",
            {
                "class_id": class_id
            }
        )

    def dingtalk_oapi_edu_class_list(
            self,
            grade_id,
            page_no,
            page_size
    ):
        """
        班级列表信息
        班级列表信息，通过orgid、班级id查询班级名称、所在学段id、校区id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41056

        :param grade_id: 年级ID
        :param page_no: 分页页数
        :param page_size: 分页每页大小
        """
        return self._top_request(
            "dingtalk.oapi.edu.class.list",
            {
                "grade_id": grade_id,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def dingtalk_oapi_edu_grade_get(
            self,
            grade_id
    ):
        """
        年级信息查询
        年级信息查询接口，通过组织id和年级id查询年级名称、年级的级别、学段id、校区id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41057

        :param grade_id: 年级ID
        """
        return self._top_request(
            "dingtalk.oapi.edu.grade.get",
            {
                "grade_id": grade_id
            }
        )

    def dingtalk_oapi_edu_grade_list(
            self,
            period_id
    ):
        """
        年级列表查询
        年级列表查询，通过学段id查询其下面的年级信息列表，最多返回10条数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41058

        :param period_id: 学段ID
        """
        return self._top_request(
            "dingtalk.oapi.edu.grade.list",
            {
                "period_id": period_id
            }
        )

    def dingtalk_oapi_edu_teacher_get(
            self,
            class_id,
            teacher_userid
    ):
        """
        查询老师信息
        查询老师信息，查询班级下老师列表，通过组织id和班级id查询老师的名称、班级id、staffid、是否为班主任、校区id信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41059

        :param class_id: 班级ID
        :param teacher_userid: 用户ID
        """
        return self._top_request(
            "dingtalk.oapi.edu.teacher.get",
            {
                "class_id": class_id,
                "teacher_userid": teacher_userid
            }
        )

    def dingtalk_oapi_edu_campus_list(
            self
    ):
        """
        查询校区列表
        查询某个组织下面的学校信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41060

        """
        return self._top_request(
            "dingtalk.oapi.edu.campus.list"
        )

    def dingtalk_oapi_edu_campus_get(
            self,
            campus_id
    ):
        """
        校区信息查询
        查询校区基本信息接口，返回校区的名称和校区id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41061

        :param campus_id: 校区ID
        """
        return self._top_request(
            "dingtalk.oapi.edu.campus.get",
            {
                "campus_id": campus_id
            }
        )

    def dingtalk_oapi_edu_period_list(
            self,
            campus_id
    ):
        """
        学段列表查询
        学段列表查询，每个校区仅有4个学段，幼儿园、小学、初中、高中，因此最多4条数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41062

        :param campus_id: 校区ID
        """
        return self._top_request(
            "dingtalk.oapi.edu.period.list",
            {
                "campus_id": campus_id
            }
        )

    def dingtalk_oapi_edu_period_get(
            self,
            period_id
    ):
        """
        查询学段信息
        学段信息查询接口，通过orgid，学段id查询学段信息，返回学段名称、nick、校区id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41063

        :param period_id: 学段ID
        """
        return self._top_request(
            "dingtalk.oapi.edu.period.get",
            {
                "period_id": period_id
            }
        )

    def dingtalk_oapi_edu_teacher_list(
            self,
            class_id
    ):
        """
        查询班级下老师列表
        查询班级下老师列表，通过组织id和班级id查询老师的名称、班级id、staffid、是否为班主任、校区id信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41064

        :param class_id: 班级ID
        """
        return self._top_request(
            "dingtalk.oapi.edu.teacher.list",
            {
                "class_id": class_id
            }
        )

    def dingtalk_oapi_corp_conversation_member_list(
            self,
            chat_id,
            offset,
            size
    ):
        """
        分页获取群成员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41168

        :param chat_id: 会话ID
        :param offset: 偏移位置，从0开始，后续传offset+size的值。member_list返回为空表示结束了。
        :param size: 请求数量
        """
        return self._top_request(
            "dingtalk.oapi.corp.conversation.member.list",
            {
                "chat_id": chat_id,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_faceauth_get(
            self,
            tmp_auth_code,
            app_biz_id
    ):
        """
        实名认证中的人脸扫描结果查询
        实名认证中的人脸扫描结果查询开放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41270

        :param tmp_auth_code: 人脸扫描的授权码
        :param app_biz_id: 业务方定义的id
        """
        return self._top_request(
            "dingtalk.oapi.faceauth.get",
            {
                "tmp_auth_code": tmp_auth_code,
                "app_biz_id": app_biz_id
            }
        )

    def dingtalk_oapi_impaas_otoconversation_create(
            self,
            account_info_list=None,
            entrance_id_list='',
            uuid='',
            channel='',
            extension=''
    ):
        """
        创建单聊二级会话
        部分新零售场景需要支持二级会话，也就是把部分同类会话聚合在一起
        本接口给二方提供了创建二级单聊会话的能力
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41535

        :param account_info_list: 账号列表，size=2。第一个表示自己，第二个表示对方
        :param entrance_id_list: 入口id列表，size=2。普通会话填0，二级会话填entrnaceid
        :param uuid: 用于去重和追踪
        :param channel: channel名称
        :param extension: 扩展信息
        """
        return self._top_request(
            "dingtalk.oapi.impaas.otoconversation.create",
            {
                "request": {
                    "account_info_list": account_info_list,
                    "entrance_id_list": entrance_id_list,
                    "uuid": uuid,
                    "channel": channel,
                    "extension": extension
                }
            }
        )

    def dingtalk_oapi_smartdevice_facegroup_member_update(
            self,
            biz_id,
            add_user_ids='',
            del_user_ids=''
    ):
        """
        人脸识别组人员更新
        更新人脸识别组的人员，如新增人员、移除人员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41758

        :param biz_id: 业务id
        :param add_user_ids: 需新增的用户id列表
        :param del_user_ids: 需移除的用户id列表
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.facegroup.member.update",
            {
                "biz_id": biz_id,
                "add_user_ids": add_user_ids,
                "del_user_ids": del_user_ids
            }
        )

    def dingtalk_oapi_smartdevice_facegroup_member_list(
            self,
            biz_id,
            cursor,
            size
    ):
        """
        查询已在识别组的人员
        查询已在识别组的人员列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41759

        :param biz_id: 业务id
        :param cursor: 游标，第一次传 <=0的值，后续传本调用的返回值
        :param size: 分页大小
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.facegroup.member.list",
            {
                "biz_id": biz_id,
                "cursor": cursor,
                "size": size
            }
        )

    def dingtalk_oapi_smartdevice_facegroup_device_update(
            self,
            biz_id,
            add_device_ids='',
            del_device_ids=''
    ):
        """
        更新识别组关联的人脸设备
        更新人脸识别组绑定是设备，如新增、移除关联的设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41760

        :param biz_id: 业务id
        :param add_device_ids: 需新增的设备id列表
        :param del_device_ids: 需移除的设备id列表
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.facegroup.device.update",
            {
                "biz_id": biz_id,
                "add_device_ids": add_device_ids,
                "del_device_ids": del_device_ids
            }
        )

    def dingtalk_oapi_smartdevice_facegroup_device_list(
            self,
            biz_id,
            size,
            mode,
            type,
            cursor
    ):
        """
        查询人脸设备列表
        查询人脸设备列表，可选择查询已关联设备列表、或企业已有设备的列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41761

        :param biz_id: 业务id
        :param size: 分页大小
        :param mode: 查询模式：all-企业所有设备；bound-本组已关联设备
        :param type: 需查询的设备类型
        :param cursor: 游标，第一次传 <=0的值，后续传本调用的返回值
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.facegroup.device.list",
            {
                "biz_id": biz_id,
                "size": size,
                "mode": mode,
                "type": type,
                "cursor": cursor
            }
        )

    def dingtalk_oapi_smartdevice_facegroup_get(
            self,
            biz_id
    ):
        """
        查询人脸识别组
        通过业务id查询识别组基础信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41762

        :param biz_id: 业务id
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.facegroup.get",
            {
                "biz_id": biz_id
            }
        )

    def dingtalk_oapi_smartdevice_facegroup_create(
            self,
            biz_id,
            title,
            start_time,
            end_time,
            status,
            greeting_msg='',
            bg_img_url=''
    ):
        """
        创建人脸识别组
        创建人脸识别组基础信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41763

        :param biz_id: 业务id【不区分大小写】：调用方内保证唯一即可，可容纳23个字符，推荐前三个字符表示业务编号，留19个字符存储业务的记录id
        :param title: 识别组的标题
        :param start_time: 开始时间
        :param end_time: 结束时间
        :param status: 识别组启用状态：1-已启用；2未启用；
        :param greeting_msg: 识别成功后的问候语
        :param bg_img_url: M2上的定制UI
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.facegroup.create",
            {
                "biz_id": biz_id,
                "title": title,
                "start_time": start_time,
                "end_time": end_time,
                "status": status,
                "greeting_msg": greeting_msg,
                "bg_img_url": bg_img_url
            }
        )

    def dingtalk_oapi_smartdevice_facegroup_update(
            self,
            biz_id,
            title,
            start_time,
            end_time,
            status,
            greeting_msg='',
            bg_img_url=''
    ):
        """
        更新识别组基础信息
        更新人脸识别组基础信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41764

        :param biz_id: 业务id
        :param title: 识别组的标题
        :param start_time: 开始时间
        :param end_time: 结束时间
        :param status: 识别组启用状态：1-已启用；2未启用；
        :param greeting_msg: 识别成功后的问候语
        :param bg_img_url: M2上的定制UI
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.facegroup.update",
            {
                "biz_id": biz_id,
                "title": title,
                "start_time": start_time,
                "end_time": end_time,
                "status": status,
                "greeting_msg": greeting_msg,
                "bg_img_url": bg_img_url
            }
        )

    def dingtalk_oapi_smartdevice_facegroup_enable(
            self,
            biz_id,
            enable,
            device_ids=''
    ):
        """
        启用/禁用M2人脸识别
        启用/禁用当前识别组的人脸识别功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41765

        :param biz_id: 业务id
        :param enable: true-启用识别；false-禁用识别
        :param device_ids: 设备id列表
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.facegroup.enable",
            {
                "biz_id": biz_id,
                "enable": enable,
                "device_ids": device_ids
            }
        )

    def dingtalk_oapi_smartdevice_facegroup_removeall(
            self,
            biz_id
    ):
        """
        删除人脸识别组
        删除人脸识别组，并解绑关联数据（人员、M2绑定关系等）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41766

        :param biz_id: 业务id
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.facegroup.removeall",
            {
                "biz_id": biz_id
            }
        )

    def dingtalk_oapi_im_chatbot_delete(
            self,
            open_conversation_id,
            chatbot_user_id
    ):
        """
        删除会话内机器人实例
        根据开放的conversationId和机器人示例userId，删除会话内机器人实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41967

        :param open_conversation_id: 开放的会话conversationId
        :param chatbot_user_id: 开放的机器人userId
        """
        return self._top_request(
            "dingtalk.oapi.im.chatbot.delete",
            {
                "open_conversation_id": open_conversation_id,
                "chatbot_user_id": chatbot_user_id
            }
        )

    def dingtalk_oapi_im_chatbot_get(
            self,
            open_conversation_id
    ):
        """
        获取会话内机器人实例列表
        根据开放的conversationId，获取该会话内机器人实例列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41968

        :param open_conversation_id: 开放的会话conversationId
        """
        return self._top_request(
            "dingtalk.oapi.im.chatbot.get",
            {
                "open_conversation_id": open_conversation_id
            }
        )

    def dingtalk_oapi_im_chat_cid_convert(
            self,
            chat_id
    ):
        """
        会话chatId转conversationId
        根据会话chatId，查询其对应的conversationId
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41969

        :param chat_id: 开放的chatId
        """
        return self._top_request(
            "dingtalk.oapi.im.chat.cid.convert",
            {
                "chat_id": chat_id
            }
        )

    def dingtalk_oapi_im_chat_servicegroup_create(
            self,
            title,
            owner_userid,
            org_inner_group='false'
    ):
        """
        创建服务群
        创建一个服务群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42043

        :param title: 群标题
        :param owner_userid: 群主在钉钉组织内的userid
        :param org_inner_group: 是否企业内部服务群
        """
        return self._top_request(
            "dingtalk.oapi.im.chat.servicegroup.create",
            {
                "title": title,
                "owner_userid": owner_userid,
                "org_inner_group": org_inner_group
            }
        )

    def dingtalk_oapi_im_chat_servicegroup_disband(
            self,
            chat_id
    ):
        """
        解散一个服务群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42044

        :param chat_id: 开放的chatId
        """
        return self._top_request(
            "dingtalk.oapi.im.chat.servicegroup.disband",
            {
                "chat_id": chat_id
            }
        )

    def dingtalk_oapi_im_chat_servicegroup_member_query(
            self,
            chat_id,
            page_size,
            page_num,
            include_owner='0'
    ):
        """
        获取服务群成员列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42045

        :param chat_id: 开放的chatId
        :param page_size: 每页大小，最大100
        :param page_num: 页码，从1开始
        :param include_owner: 0- 不包含群主，1-包含群主
        """
        return self._top_request(
            "dingtalk.oapi.im.chat.servicegroup.member.query",
            {
                "chat_id": chat_id,
                "page_size": page_size,
                "page_num": page_num,
                "include_owner": include_owner
            }
        )

    def dingtalk_oapi_im_chat_servicegroup_query(
            self,
            chat_id
    ):
        """
        获取服务群基本信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42046

        :param chat_id: 开放的chatId
        """
        return self._top_request(
            "dingtalk.oapi.im.chat.servicegroup.query",
            {
                "chat_id": chat_id
            }
        )

    def dingtalk_oapi_im_chat_servicegroup_member_update(
            self,
            member_dingtalk_ids,
            action,
            chat_id
    ):
        """
        更新群成员（移除、设为管理员）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42047

        :param member_dingtalk_ids: 成员的ID列表，英文逗号分隔
        :param action: 更新类型，REMOVE 移除、SET_ADMIN设为管理员、SET_NORMAL 设为普通成员
        :param chat_id: 开放的chatId
        """
        return self._top_request(
            "dingtalk.oapi.im.chat.servicegroup.member.update",
            {
                "member_dingtalk_ids": member_dingtalk_ids,
                "action": action,
                "chat_id": chat_id
            }
        )

    def dingtalk_oapi_smartdevice_bind_create(
            self,
            device_bind_req_vo
    ):
        """
        智能硬件建立绑定关系
        智能设备接入钉钉时，需要和组织建立绑定关系，此接口用于创建绑定关系。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42084

        :param device_bind_req_vo: 设备请求信息
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.bind.create",
            {
                "device_bind_req_vo": device_bind_req_vo
            }
        )

    def dingtalk_oapi_statistics_details(
            self,
            type=''
    ):
        """
        大客户企业开放数据
        对大客户开放其企业BI数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42090

        :param type: 业务类型，目前有employee,group, live
        """
        return self._top_request(
            "dingtalk.oapi.statistics.details",
            {
                "type": type
            }
        )

    def dingtalk_oapi_chatbot_message_send(
            self,
            chatbot_id,
            userid,
            message
    ):
        """
        机器人发送消息
        通过机器人单聊会话主动给企业内员工发送消息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42230

        :param chatbot_id: 企业机器人模板类型
        :param userid: 企业员工ID
        :param message: 消息内容,支持的消息类型详见：https://open-doc.dingtalk.com/microapp/serverapi2/qf2nxq#a-namesgw3aga%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F
        """
        return self._top_request(
            "dingtalk.oapi.chatbot.message.send",
            {
                "chatbot_id": chatbot_id,
                "userid": userid,
                "message": message
            }
        )

    def dingtalk_oapi_attendance_corp_inviteactive_open(
            self,
            admin_name,
            admin_phone
    ):
        """
        喔趣企业开通邀1得1活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42470

        :param admin_name: 姓名
        :param admin_phone: 手机号
        """
        return self._top_request(
            "dingtalk.oapi.attendance.corp.inviteactive.open",
            {
                "admin_name": admin_name,
                "admin_phone": admin_phone
            }
        )

    def dingtalk_oapi_live_grouplive_statistics(
            self,
            live_uuid,
            cid='',
            open_id=''
    ):
        """
        查询内部群某一场直播的数据统计
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42136

        :param live_uuid: 直播uuid
        :param cid: 群id
        :param open_id: 用户id
        """
        return self._top_request(
            "dingtalk.oapi.live.grouplive.statistics",
            {
                "live_uuid": live_uuid,
                "cid": cid,
                "open_id": open_id
            }
        )

    def dingtalk_oapi_live_grouplive_list(
            self,
            cid,
            open_id='',
            to_time='',
            from_time=''
    ):
        """
        查询内部群直播的列表
        查询内部群的直播列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42137

        :param cid: 群id
        :param open_id: 用户id
        :param to_time: 开始时间ms
        :param from_time: 截止时间ms
        """
        return self._top_request(
            "dingtalk.oapi.live.grouplive.list",
            {
                "cid": cid,
                "open_id": open_id,
                "to_time": to_time,
                "from_time": from_time
            }
        )

    def dingtalk_oapi_process_form_get(
            self,
            process_code
    ):
        """
        获取表单schema
        ISV通过这个接口获取流程的表单schema信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42472

        :param process_code: 流程模板code
        """
        return self._top_request(
            "dingtalk.oapi.process.form.get",
            {
                "process_code": process_code
            }
        )

    def dingtalk_oapi_process_template_save(
            self,
            process_code,
            vm,
            font
    ):
        """
        自定义打印模板保存
        自定义打印模板文件保存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42473

        :param process_code: 流程编码
        :param vm: vm文件
        :param font: 字体
        """
        return self._top_request(
            "dingtalk.oapi.process.template.save",
            {
                "process_code": process_code,
                "vm": vm,
                "font": font
            }
        )

    def dingtalk_oapi_calendar_list(
            self,
            user_id,
            calendar_folder_id='',
            time_min=None,
            i_cal_uid='',
            single_events='',
            page_token='',
            max_results='',
            time_max=None
    ):
        """
        日程查询
        该api是提供给企业和isv用的，查询企业内员工的日程数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42527

        :param user_id: 员工ID
        :param calendar_folder_id: 钉钉日历文件夹的对外id，默认是自己的默认文件夹
        :param time_min: 查询时间下限
        :param i_cal_uid: 日程跨域唯一id，用于唯一标识一组关联日程事件
        :param single_events: 是否需要展开循环日程
        :param page_token: 查询对应页，值有上一次请求返回的结果里对应nextPageToken
        :param max_results: 结果返回的最多数量，默认250，最多返回2500
        :param time_max: 查询时间上限
        """
        return self._top_request(
            "dingtalk.oapi.calendar.list",
            {
                "user_id": user_id,
                "calendar_folder_id": calendar_folder_id,
                "time_min": time_min,
                "i_cal_uid": i_cal_uid,
                "single_events": single_events,
                "page_token": page_token,
                "max_results": max_results,
                "time_max": time_max
            }
        )

    def dingtalk_oapi_live_playback(
            self,
            start_time='',
            page_size='',
            offset='',
            end_time=''
    ):
        """
        直播回放查询能力开放
        提供ISV开放回访获取能力：ISV通过该接口调用，根据直播的开始和结束时间，分页获取到所有的直播回放信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42652

        :param start_time: 直播开始时间
        :param page_size: 直播结束时间
        :param offset: 页面大小
        :param end_time: 偏移量
        """
        return self._top_request(
            "dingtalk.oapi.live.playback",
            {
                "request": {
                    "start_time": start_time,
                    "page_size": page_size,
                    "offset": offset,
                    "end_time": end_time
                }
            }
        )

    def dingtalk_oapi_live_create(
            self,
            userid,
            title,
            user_nick='',
            intro='',
            shared='',
            cover_url='',
            land_scape='',
            appt_begin_time='',
            appt_end_time='',
            pre_video_play_url=''
    ):
        """
        直播创建能力开放
        提供ISV开放直播创建能力：ISV通过该接口调用，提供直播的基本信息，在钉钉创建直播，并获取到直播的推流地址。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42653

        :param userid: 主播ID,必填
        :param title: 标题,必填
        :param user_nick: 别名,选填
        :param intro: 简介,选填
        :param shared: 直播可观看类型类型,必填: false 受限制的直播, true 公开的直播(默认)
        :param cover_url: 封面图,选填: 如果不填写, 则采用默认
        :param land_scape: 横竖屏,选填: false 竖屏, true 横屏(默认)
        :param appt_begin_time: 直播计划开始时间,选填: 如果不填写, 则取当前时间
        :param appt_end_time: 直播计划结束时间,选填
        :param pre_video_play_url: 预告视频Url,选填
        """
        return self._top_request(
            "dingtalk.oapi.live.create",
            {
                "request": {
                    "userid": userid,
                    "title": title,
                    "user_nick": user_nick,
                    "intro": intro,
                    "shared": shared,
                    "cover_url": cover_url,
                    "land_scape": land_scape,
                    "appt_begin_time": appt_begin_time,
                    "appt_end_time": appt_end_time,
                    "pre_video_play_url": pre_video_play_url
                }
            }
        )

    def dingtalk_oapi_live_query(
            self,
            uuid
    ):
        """
        直播查询能力开放
        提供ISV开放直播查询能力：ISV通过该接口调用，根据直播uuid获取直播的详细信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42654

        :param uuid: 直播UUID,必填
        """
        return self._top_request(
            "dingtalk.oapi.live.query",
            {
                "request": {
                    "uuid": uuid
                }
            }
        )

    def dingtalk_oapi_process_baseinfo_list(
            self,
            process_codes=''
    ):
        """
        查询模板基础信息列表
        查询企业下的模板基础信息，包括名称，图片，管理员等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42744

        :param process_codes: 模板code列表
        """
        return self._top_request(
            "dingtalk.oapi.process.baseinfo.list",
            {
                "process_codes": process_codes
            }
        )

    def dingtalk_oapi_process_template_upgradeinfo_query(
            self,
            process_codes
    ):
        """
        获取模板升级信息
        获取模板升级信息,模板是否可升级
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42785

        :param process_codes: 流程编码List<String>类型
        """
        return self._top_request(
            "dingtalk.oapi.process.template.upgradeinfo.query",
            {
                "process_codes": process_codes
            }
        )

    def dingtalk_oapi_process_template_upgrade(
            self,
            process_code,
            form_component_id,
            userid,
            detail_component_id=''
    ):
        """
        审批模板升级
        升级企业审批模板中的金额类组件到新的支付套件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42786

        :param process_code: 流程code
        :param form_component_id: 数组或金额类组件id
        :param userid: 其实是staffId
        :param detail_component_id: 明细组件id
        """
        return self._top_request(
            "dingtalk.oapi.process.template.upgrade",
            {
                "process_code": process_code,
                "form_component_id": form_component_id,
                "userid": userid,
                "detail_component_id": detail_component_id
            }
        )

    def dingtalk_oapi_dingpay_order_terminate(
            self,
            order_nos,
            operator,
            reason,
            extension=''
    ):
        """
        中止订单支付
        中止dingpay订单的支付
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42787

        :param order_nos: dingpay单号列表
        :param operator: 操作者员工号
        :param reason: 中止原因
        :param extension: 扩展信息
        """
        return self._top_request(
            "dingtalk.oapi.dingpay.order.terminate",
            {
                "order_nos": order_nos,
                "operator": operator,
                "reason": reason,
                "extension": extension
            }
        )

    def dingtalk_oapi_customize_conversation_update(
            self,
            userid,
            chat_id,
            extension_key,
            extension_value
    ):
        """
        定制化服务会话标配置
        对会话进行打标，打标之后，根据另外的配置，可以让客户端使用weex展示会话，而不是native展示
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42906

        :param userid: 员工账号
        :param chat_id: 会话id
        :param extension_key: extensionKey
        :param extension_value: extensionValue
        """
        return self._top_request(
            "dingtalk.oapi.customize.conversation.update",
            {
                "userid": userid,
                "chat_id": chat_id,
                "extension_key": extension_key,
                "extension_value": extension_value
            }
        )

    def dingtalk_oapi_smartwork_hrm_employee_unionexport(
            self,
            param
    ):
        """
        智能人事联合导出
        智能人事联合导出，ISV提供业务excel并制定需要填补的数据，由智能人事填补后，直接对用户提供下载服务。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42924

        :param param: 导出请求对象
        """
        return self._top_request(
            "dingtalk.oapi.smartwork.hrm.employee.unionexport",
            {
                "param": param
            }
        )

    def dingtalk_oapi_callback_failrecord_confirm(
            self,
            id_list
    ):
        """
        确认开放平台回调失败记录
        查询开放平台回调失败记录，提供此接口用于确认消费
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42935

        :param id_list: 失败记录id列表
        """
        return self._top_request(
            "dingtalk.oapi.callback.failrecord.confirm",
            {
                "id_list": id_list
            }
        )

    def dingtalk_oapi_callback_failrecord_list(
            self,
            req
    ):
        """
        查询回调失败记录
        提供给isv用于查询http回调失败记录，做补偿
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42936

        :param req: 请求参数
        """
        return self._top_request(
            "dingtalk.oapi.callback.failrecord.list",
            {
                "req": req
            }
        )

    def dingtalk_oapi_report_statistics(
            self,
            report_id
    ):
        """
        获取日志统计数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43020

        :param report_id: 日志id
        """
        return self._top_request(
            "dingtalk.oapi.report.statistics",
            {
                "report_id": report_id
            }
        )

    def dingtalk_oapi_attendance_vacation_record_list(
            self,
            op_userid,
            leave_code,
            userids,
            offset,
            size
    ):
        """
        查询假期消费记录
        根据企业或员工分页获取假期消费记录信息 每次返回50条数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43049

        :param op_userid: 操作者ID
        :param leave_code: 假期类型唯一标识
        :param userids: 待查询员工ID列表
        :param offset: 分页偏移(从0开始非负整数)
        :param size: 分页偏移(正整数 最大50)
        """
        return self._top_request(
            "dingtalk.oapi.attendance.vacation.record.list",
            {
                "op_userid": op_userid,
                "leave_code": leave_code,
                "userids": userids,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_attendance_vacation_quota_list(
            self,
            leave_code,
            op_userid,
            userids,
            offset,
            size
    ):
        """
        查询假期余额
        根据企业或员工分页获取假期余额信息 每次返回50条数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43050

        :param leave_code: 假期类型唯一标识
        :param op_userid: 操作者ID
        :param userids: 待查询的员工ID列表
        :param offset: 分页偏移(从0开始非负整数)
        :param size: 分页偏移(正整数 最大50)
        """
        return self._top_request(
            "dingtalk.oapi.attendance.vacation.quota.list",
            {
                "leave_code": leave_code,
                "op_userid": op_userid,
                "userids": userids,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_appstore_internal_order_get(
            self,
            biz_order_id
    ):
        """
        获取内购订单信息
        应用内购流程中，通过该接口查询内购订单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43055

        :param biz_order_id: 内购商品订单号
        """
        return self._top_request(
            "dingtalk.oapi.appstore.internal.order.get",
            {
                "biz_order_id": biz_order_id
            }
        )

    def dingtalk_oapi_appstore_internal_skupage_get(
            self,
            goods_code,
            item_code='',
            callback_page='',
            extend_param=''
    ):
        """
        获取内购商品SKU详情页面地址
        应用内购流程中，通过该接口获取内购商品SKU页面地址
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43056

        :param goods_code: 内购商品码
        :param item_code: 内购商品规格码，如果设置了规格码，页面会默认选中该规格码
        :param callback_page: 回调页面(进行URLEncode处理)，微应用为页面URL，E应用为页面路径地址
        :param extend_param: 与callbackPage配合使用。当用户从SKU页面下单并支付成功后，会跳转回ISV页面，此时将此参数原样回传。主要用于用户页面引导等操作，不能作为权益开通凭证。
        """
        return self._top_request(
            "dingtalk.oapi.appstore.internal.skupage.get",
            {
                "goods_code": goods_code,
                "item_code": item_code,
                "callback_page": callback_page,
                "extend_param": extend_param
            }
        )

    def dingtalk_oapi_appstore_internal_unfinishedorder_list(
            self,
            page,
            page_size,
            item_code=''
    ):
        """
        获取ISV未完成处理订单
        应用内购流程中，通过该接口获取ISV未处理完成的内购订单列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43057

        :param page: 分页查询页码，其实页码为1
        :param page_size: 分页查询每页大小，最大限制100
        :param item_code: 商品规格码
        """
        return self._top_request(
            "dingtalk.oapi.appstore.internal.unfinishedorder.list",
            {
                "page": page,
                "page_size": page_size,
                "item_code": item_code
            }
        )

    def dingtalk_oapi_appstore_internal_order_finish(
            self,
            biz_order_id
    ):
        """
        内购商品订单处理完成
        应用内购流程中，通过该接口回传ISV完成订单处理的状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43058

        :param biz_order_id: 内购订单号
        """
        return self._top_request(
            "dingtalk.oapi.appstore.internal.order.finish",
            {
                "biz_order_id": biz_order_id
            }
        )

    def dingtalk_oapi_appstore_internal_order_consume(
            self,
            biz_order_id,
            request_id,
            quantity,
            userid
    ):
        """
        应用内购商品核销
        应用内购流程中，通过该接口对内购订单进行核销
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43059

        :param biz_order_id: 内购商品订单号
        :param request_id: 核销请求Id，由ISV生成，用于请求幂等
        :param quantity: 订购商品核销数量
        :param userid: 员工在当前企业内的唯一标识，也称staffId
        """
        return self._top_request(
            "dingtalk.oapi.appstore.internal.order.consume",
            {
                "biz_order_id": biz_order_id,
                "request_id": request_id,
                "quantity": quantity,
                "userid": userid
            }
        )

    def dingtalk_oapi_attendance_vacation_quota_update(
            self,
            leave_quotas,
            op_userid
    ):
        """
        批量更新假期余额
        企业批量更新假期余额信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43085

        :param leave_quotas: 待更新的假期余额记录
        :param op_userid: 操作者ID
        """
        return self._top_request(
            "dingtalk.oapi.attendance.vacation.quota.update",
            {
                "leave_quotas": leave_quotas,
                "op_userid": op_userid
            }
        )

    def dingtalk_oapi_attendance_vacation_quota_init(
            self,
            op_userid,
            leave_quotas
    ):
        """
        初始化假期余额
        批量初始化假期余额 清空指定假期类型 指定员工所有假期余额 消费记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43086

        :param op_userid: 操作者ID
        :param leave_quotas: 待初始化的假期余额记录
        """
        return self._top_request(
            "dingtalk.oapi.attendance.vacation.quota.init",
            {
                "op_userid": op_userid,
                "leave_quotas": leave_quotas
            }
        )

    def dingtalk_oapi_attendance_vacation_type_update(
            self,
            op_userid,
            leave_code,
            leave_name='',
            leave_view_unit='',
            biz_type='',
            natural_day_leave='',
            hours_in_per_day='',
            extras=''
    ):
        """
        假期类型更新
        该接口用于更新指定企业下的指定假期类型的相关规则
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43092

        :param op_userid: 操作者ID
        :param leave_code: 假期类型唯一标识
        :param leave_name: 假期名称
        :param leave_view_unit: 请假单位，可以按照天半天或者小时请假。(day、halfday、hour其中一种)
        :param biz_type: 假期类型，普通假期或者加班转调休假期。(general_leave、lieu_leave其中一种)
        :param natural_day_leave: 是否按照自然日统计请假时长，当为false的时候，用户发起请假时候会根据用户在请假时间段内的排班情况来计算请假时长。
        :param hours_in_per_day: 每天折算的工作时长(百分之一 例如1天=10小时=1000)
        :param extras: 调休假有效期规则(validity_type:有效类型 absolute_time(绝对时间)、relative_time(相对时间)其中一种 validity_value:延长日期(当validity_type为absolute_time该值该值不为空且满足yy-mm格式 validity_type为relative_time该值为大于1的整数))
        """
        return self._top_request(
            "dingtalk.oapi.attendance.vacation.type.update",
            {
                "op_userid": op_userid,
                "leave_code": leave_code,
                "leave_name": leave_name,
                "leave_view_unit": leave_view_unit,
                "biz_type": biz_type,
                "natural_day_leave": natural_day_leave,
                "hours_in_per_day": hours_in_per_day,
                "extras": extras
            }
        )

    def dingtalk_oapi_attendance_vacation_type_list(
            self,
            op_userid
    ):
        """
        假期类型查询
        查询假期类型
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43093

        :param op_userid: 操作员ID
        """
        return self._top_request(
            "dingtalk.oapi.attendance.vacation.type.list",
            {
                "op_userid": op_userid
            }
        )

    def dingtalk_oapi_attendance_vacation_type_delete(
            self,
            leave_code,
            op_userid
    ):
        """
        假期类型删除接口
        删除指定的假期类型
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43094

        :param leave_code: 假期类型唯一标识
        :param op_userid: 操作员ID
        """
        return self._top_request(
            "dingtalk.oapi.attendance.vacation.type.delete",
            {
                "leave_code": leave_code,
                "op_userid": op_userid
            }
        )

    def dingtalk_oapi_attendance_vacation_type_create(
            self,
            leave_name,
            leave_view_unit,
            biz_type,
            natural_day_leave,
            op_userid,
            hours_in_per_day,
            extras=''
    ):
        """
        假期类型添加
        添加假期类型
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43095

        :param leave_name: 假期名称
        :param leave_view_unit: 请假单位，可以按照天半天或者小时请假。(day、halfday、hour其中一种)
        :param biz_type: 假期类型，普通假期或者加班转调休假期。(general_leave、lieu_leave其中一种)
        :param natural_day_leave: 是否按照自然日统计请假时长，当为false的时候，用户发起请假时候会根据用户在请假时间段内的排班情况来计算请假时长
        :param op_userid: 操作者ID
        :param hours_in_per_day: 每天折算的工作时长(百分之一 例如1天=10小时=1000)
        :param extras: 调休假有效期规则(validity_type:有效类型 absolute_time(绝对时间)、relative_time(相对时间)其中一种 validity_value:延长日期(当validity_type为absolute_time该值该值不为空且满足yy-mm格式 validity_type为relative_time该值为大于1的整数))
        """
        return self._top_request(
            "dingtalk.oapi.attendance.vacation.type.create",
            {
                "leave_name": leave_name,
                "leave_view_unit": leave_view_unit,
                "biz_type": biz_type,
                "natural_day_leave": natural_day_leave,
                "op_userid": op_userid,
                "hours_in_per_day": hours_in_per_day,
                "extras": extras
            }
        )

    def dingtalk_oapi_calendar_delete(
            self,
            userid='',
            calendar_id=''
    ):
        """
        日程删除
        删除一个指定的日程
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43141

        :param userid: 员工id
        :param calendar_id: 日程id
        """
        return self._top_request(
            "dingtalk.oapi.calendar.delete",
            {
                "userid": userid,
                "calendar_id": calendar_id
            }
        )

    def dingtalk_oapi_message_send_to_single_conversation(
            self,
            sender_userid,
            receiver_userid,
            msg
    ):
        """
        企业内个人之间发送单聊消息接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43230

        :param sender_userid: 发送者userId
        :param receiver_userid: 接收者userId
        :param msg: 推送消息内容
        """
        return self._top_request(
            "dingtalk.oapi.message.send_to_single_conversation",
            {
                "sender_userid": sender_userid,
                "receiver_userid": receiver_userid,
                "msg": msg
            }
        )

    def dingtalk_oapi_workbench_shortcut_delete(
            self,
            app_id,
            biz_no
    ):
        """
        删除企业已添加的三方快捷方式
        提供给ISV使用的用于删除已经添加到企业的应用快捷方式
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43265

        :param app_id: 应用ID
        :param biz_no: 系统交互唯一流水号(ISV维度下不可重复)
        """
        return self._top_request(
            "dingtalk.oapi.workbench.shortcut.delete",
            {
                "app_id": app_id,
                "biz_no": biz_no
            }
        )

    def dingtalk_oapi_workbench_shortcut_getguideuri(
            self,
            app_id
    ):
        """
        获取快捷方式添加到工作台引导页地址
        ISV将应用快捷方式添加到企业后会引导用户将该快捷方式添加到工作台,需要获取到工作台快捷方式引导页地址
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43266

        :param app_id: ISV微应用ID
        """
        return self._top_request(
            "dingtalk.oapi.workbench.shortcut.getguideuri",
            {
                "app_id": app_id
            }
        )

    def dingtalk_oapi_workbench_shortcut_list(
            self,
            app_id,
            page_size='',
            page_index=''
    ):
        """
        获取企业对指定应用已安装的快捷方式
        根据企业 + 应用信息等(分页)获取企业下对应该应用已经开通的快捷方式列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43267

        :param app_id: ISV微应用id
        :param page_size: 每页记录数
        :param page_index: 当前页码
        """
        return self._top_request(
            "dingtalk.oapi.workbench.shortcut.list",
            {
                "app_id": app_id,
                "page_size": page_size,
                "page_index": page_index
            }
        )

    def dingtalk_oapi_workbench_shortcut_add(
            self,
            shortcut_uri,
            icon,
            app_id,
            name,
            biz_no,
            pc_shortcut_uri=''
    ):
        """
        给开通应用企业添加快捷方式
        ISV给开通其应用的企业添加快捷方式
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43268

        :param shortcut_uri: 移动端快捷方式跳转地址(默认地址)
        :param icon: 图标Url
        :param app_id: 微应用ID
        :param name: 快捷方式名称
        :param biz_no: 系统交互唯一业务号,ISV企业下唯一
        :param pc_shortcut_uri: PC端快捷方式跳转地址
        """
        return self._top_request(
            "dingtalk.oapi.workbench.shortcut.add",
            {
                "shortcut_uri": shortcut_uri,
                "icon": icon,
                "app_id": app_id,
                "name": name,
                "biz_no": biz_no,
                "pc_shortcut_uri": pc_shortcut_uri
            }
        )

    def dingtalk_oapi_workbench_shortcut_update(
            self,
            app_id,
            biz_no,
            shortcut_uri='',
            icon='',
            name='',
            pc_shortcut_uri=''
    ):
        """
        更新企业已添加的快捷方式
        ISV对已经添加其应用快捷方式的企业做快捷方式做更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43269

        :param app_id: 应用ID
        :param biz_no: 系统交互唯一业务单号
        :param shortcut_uri: 快捷方式跳转地址(移动端地址-默认地址)
        :param icon: 图标Url
        :param name: 快捷方式名称
        :param pc_shortcut_uri: PC端快捷方式跳转地址
        """
        return self._top_request(
            "dingtalk.oapi.workbench.shortcut.update",
            {
                "app_id": app_id,
                "biz_no": biz_no,
                "shortcut_uri": shortcut_uri,
                "icon": icon,
                "name": name,
                "pc_shortcut_uri": pc_shortcut_uri
            }
        )

    def dingtalk_oapi_report_comment_list(
            self,
            report_id,
            offset='0',
            size='20'
    ):
        """
        获取日志评论详情
        分页获取评论详情，包括评论人userid、评论内容、评论时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43545

        :param report_id: 日志id
        :param offset: 分页查询的游标，最开始传0，后续传返回参数中的next_cursor值，默认值为0
        :param size: 分页参数，每页大小，最多传20，默认值为20
        """
        return self._top_request(
            "dingtalk.oapi.report.comment.list",
            {
                "report_id": report_id,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_report_receiver_list(
            self,
            report_id,
            offset='0',
            size='100'
    ):
        """
        获取日志分享人员列表
        获取日志的分享人员列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43546

        :param report_id: 日志id
        :param offset: 分页查询的游标，最开始传0，后续传返回参数中的next_cursor值，默认值为0
        :param size: 分页参数，每页大小，最多传100，默认值为100
        """
        return self._top_request(
            "dingtalk.oapi.report.receiver.list",
            {
                "report_id": report_id,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_report_statistics_listbytype(
            self,
            report_id,
            type,
            offset='0',
            size='100'
    ):
        """
        根据类型获取日志相关人员列表
        分页获取日志相关人员列表，包括已读人员列表、评论人员列表、点赞人员列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43547

        :param report_id: 日志id
        :param type: 查询类型 0:已读人员列表 1:评论人员列表 2:点赞人员列表
        :param offset: 分页查询的游标，最开始传0，后续传返回参数中的next_cursor值，默认值为0
        :param size: 分页参数，每页大小，最多传100，默认值为100
        """
        return self._top_request(
            "dingtalk.oapi.report.statistics.listbytype",
            {
                "report_id": report_id,
                "type": type,
                "offset": offset,
                "size": size
            }
        )

    def dingtalk_oapi_message_corpconversation_recall(
            self,
            agent_id,
            msg_task_id
    ):
        """
        撤回工作通知消息
        根据发送工作通知消息的taskId进行消息撤回操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43694

        :param agent_id: 发送工作通知的微应用agentId
        :param msg_task_id: 发送工作通知返回的taskId
        """
        return self._top_request(
            "dingtalk.oapi.message.corpconversation.recall",
            {
                "agent_id": agent_id,
                "msg_task_id": msg_task_id
            }
        )

    def dingtalk_oapi_processinstance_cspace_info(
            self,
            user_id,
            agent_id=''
    ):
        """
        查询审批钉盘空间信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43803

        :param user_id: 用户id
        :param agent_id: 企业应用标识(ISV调用必须设置)
        """
        return self._top_request(
            "dingtalk.oapi.processinstance.cspace.info",
            {
                "user_id": user_id,
                "agent_id": agent_id
            }
        )

    def dingtalk_oapi_process_save(
            self,
            save_process_request=None
    ):
        """
        保存审批模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43900

        :param save_process_request: 入参
        """
        return self._top_request(
            "dingtalk.oapi.process.save",
            {
                "saveProcessRequest": save_process_request
            }
        )

    def dingtalk_oapi_process_form_condition_list(
            self,
            process_code,
            agentid=''
    ):
        """
        查询已设置为条件的表单组件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43904

        :param process_code: 审批模板id
        :param agentid: 应用id
        """
        return self._top_request(
            "dingtalk.oapi.process.form.condition.list",
            {
                "request": {
                    "process_code": process_code,
                    "agentid": agentid
                }
            }
        )

    def dingtalk_oapi_robot_message_getpushid(
            self
    ):
        """
        ISV获取机器人消息批量推送Id
        颁发给isv机器人消息批量推送id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44051

        """
        return self._top_request(
            "dingtalk.oapi.robot.message.getpushid"
        )

    def dingtalk_oapi_robot_message_statistics_listbypushid(
            self,
            page_size,
            page,
            push_id,
            conversation_ids
    ):
        """
        pushid维度的机器人消息批量推送统计数据获取接口
        ISV通过该接口可以获取pushid维度的机器人消息批量推送统计数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44078

        :param page_size: 分页大小
        :param page: 当前页码
        :param push_id: 机器人消息推送Id
        :param conversation_ids: 群Id列表
        """
        return self._top_request(
            "dingtalk.oapi.robot.message.statistics.listbypushid",
            {
                "page_size": page_size,
                "page": page,
                "push_id": push_id,
                "conversation_ids": conversation_ids
            }
        )

    def dingtalk_oapi_robot_message_statistics_list(
            self,
            page_size,
            page,
            push_ids
    ):
        """
        获取机器人消息批量推送统计数据
        ISV通过该接口可以获取机器人消息批量推送统计数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44079

        :param page_size: 分页大小
        :param page: 当前页码
        :param push_ids: 机器人消息推送Id列表
        """
        return self._top_request(
            "dingtalk.oapi.robot.message.statistics.list",
            {
                "page_size": page_size,
                "page": page,
                "push_ids": push_ids
            }
        )

    def dingtalk_oapi_robot_message_statistics_listbyconversationid(
            self,
            push_id,
            conversation_ids,
            page_size,
            page,
            read_status=''
    ):
        """
        conversionid维度的机器人消息批量推送统计数据获取接口
        ISV通过该接口可以获取conversationid维度的机器人消息批量推送统计数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44094

        :param push_id: 机器人消息推送Id
        :param conversation_ids: 群Id列表
        :param page_size: 分页大小
        :param page: 当前页码
        :param read_status: 已读状态
        """
        return self._top_request(
            "dingtalk.oapi.robot.message.statistics.listbyconversationid",
            {
                "push_id": push_id,
                "conversation_ids": conversation_ids,
                "page_size": page_size,
                "page": page,
                "read_status": read_status
            }
        )

    def dingtalk_oapi_smartdevice_atmachine_get_by_deptid(
            self,
            param
    ):
        """
        查询部门智能考勤机列表
        查询考勤机设备列表，可选择查询部门已关联的考勤机设备列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44096

        :param param: 查询智能考勤机列表参数模型
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.atmachine.get_by_deptid",
            {
                "param": param
            }
        )

    def dingtalk_oapi_smartdevice_atmachine_get_by_userid(
            self,
            param=None
    ):
        """
        查询员工智能考勤机列表
        允许isv查询员工智能考勤机列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44097

        :param param: 查询智能考勤机列表参数模型
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.atmachine.get_by_userid",
            {
                "param": param
            }
        )

    def dingtalk_oapi_smartdevice_atmachine_user_update(
            self,
            param=None
    ):
        """
        变更智能考勤机员工
        提供变更智能考勤机员工功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44098

        :param param: 变更智能考勤机员工参数模型
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.atmachine.user.update",
            {
                "param": param
            }
        )

    def dingtalk_oapi_relation_remark_modify(
            self,
            markers,
            markees
    ):
        """
        修改备注名
        给指定企业，批量修改备注名。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44214

        :param markers: 修改者的userid
        :param markees: 系统自动生成
        """
        return self._top_request(
            "dingtalk.oapi.relation.remark.modify",
            {
                "markers": markers,
                "markees": markees
            }
        )

    def dingtalk_oapi_process_workrecord_create(
            self,
            process_code,
            originator_user_id,
            form_component_values,
            url,
            agentid='',
            title=''
    ):
        """
        发起不带流程的审批实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44261

        :param process_code: 审批模板唯一码
        :param originator_user_id: 审批发起人
        :param form_component_values: 表单参数列表
        :param url: 实例跳转链接
        :param agentid: 应用id
        :param title: 实例标题
        """
        return self._top_request(
            "dingtalk.oapi.process.workrecord.create",
            {
                "request": {
                    "process_code": process_code,
                    "originator_user_id": originator_user_id,
                    "form_component_values": form_component_values,
                    "url": url,
                    "agentid": agentid,
                    "title": title
                }
            }
        )

    def dingtalk_oapi_process_workrecord_update(
            self,
            process_instance_id,
            status,
            result,
            agentid=''
    ):
        """
        同步待办实例状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44262

        :param process_instance_id: 实例id
        :param status: 实例状态，分为COMPLETED, TERMINATED
        :param result: 实例结果, 如果实例状态是COMPLETED，需要设置result，分为agree和refuse
        :param agentid: 应用id
        """
        return self._top_request(
            "dingtalk.oapi.process.workrecord.update",
            {
                "request": {
                    "process_instance_id": process_instance_id,
                    "status": status,
                    "result": result,
                    "agentid": agentid
                }
            }
        )

    def dingtalk_oapi_process_workrecord_task_create(
            self,
            process_instance_id,
            tasks,
            agentid='',
            activity_id=''
    ):
        """
        创建待办任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44263

        :param process_instance_id: 实例id
        :param tasks: 任务列表
        :param agentid: 应用id
        :param activity_id: 节点id
        """
        return self._top_request(
            "dingtalk.oapi.process.workrecord.task.create",
            {
                "request": {
                    "process_instance_id": process_instance_id,
                    "tasks": tasks,
                    "agentid": agentid,
                    "activity_id": activity_id
                }
            }
        )

    def dingtalk_oapi_process_workrecord_task_update(
            self,
            process_instance_id,
            tasks,
            agentid=''
    ):
        """
        更新待办任务状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44264

        :param process_instance_id: 实例id
        :param tasks: 任务列表
        :param agentid: 应用id
        """
        return self._top_request(
            "dingtalk.oapi.process.workrecord.task.update",
            {
                "request": {
                    "process_instance_id": process_instance_id,
                    "tasks": tasks,
                    "agentid": agentid
                }
            }
        )

    def dingtalk_oapi_process_workrecord_forward_create(
            self,
            process_instance_id,
            userid_list,
            agentid=''
    ):
        """
        创建实例抄送人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44265

        :param process_instance_id: 实例id
        :param userid_list: 抄送人id列表
        :param agentid: 应用id
        """
        return self._top_request(
            "dingtalk.oapi.process.workrecord.forward.create",
            {
                "request": {
                    "process_instance_id": process_instance_id,
                    "userid_list": userid_list,
                    "agentid": agentid
                }
            }
        )

    def dingtalk_oapi_process_workrecord_taskgroup_cancel(
            self,
            process_instance_id,
            activity_id,
            agentid=''
    ):
        """
        批量取消任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44317

        :param process_instance_id: 实例id
        :param activity_id: 任务组id
        :param agentid: 应用id
        """
        return self._top_request(
            "dingtalk.oapi.process.workrecord.taskgroup.cancel",
            {
                "request": {
                    "process_instance_id": process_instance_id,
                    "activity_id": activity_id,
                    "agentid": agentid
                }
            }
        )

    def dingtalk_oapi_process_delete(
            self,
            process_code,
            agentid=''
    ):
        """
        删除模板
        删除创建的审批模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44349

        :param process_code: 流程code
        :param agentid: 微应用agentId，ISV必填
        """
        return self._top_request(
            "dingtalk.oapi.process.delete",
            {
                "request": {
                    "process_code": process_code,
                    "agentid": agentid
                }
            }
        )

    def dingtalk_oapi_smartdevice_applyoutid(
            self,
            dev_serv_id,
            sn
    ):
        """
        向钉钉申请智能硬件设备外部ID
        给硬件设备分配设备id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44397

        :param dev_serv_id: 设备类型id
        :param sn: 设备序列号
        """
        return self._top_request(
            "dingtalk.oapi.smartdevice.applyoutid",
            {
                "dev_serv_id": dev_serv_id,
                "sn": sn
            }
        )

    def dingtalk_oapi_material_article_list(
            self,
            unionid,
            page_size,
            page_start
    ):
        """
        查询文章列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44535

        :param unionid: 服务号的unionid
        :param page_size: 每页条数
        :param page_start: 页码
        """
        return self._top_request(
            "dingtalk.oapi.material.article.list",
            {
                "unionid": unionid,
                "page_size": page_size,
                "page_start": page_start
            }
        )

    def dingtalk_oapi_material_article_delete(
            self,
            unionid,
            article_id
    ):
        """
        删除文章
        服务窗删除文章（使得文章页不可访问）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44541

        :param unionid: 服务号的unionid
        :param article_id: 文章id
        """
        return self._top_request(
            "dingtalk.oapi.material.article.delete",
            {
                "unionid": unionid,
                "article_id": article_id
            }
        )

    def dingtalk_oapi_material_article_publish(
            self,
            unionid,
            article_id
    ):
        """
        文章发布接口
        服务窗发布文章成页面
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44542

        :param unionid: 服务号的unionid
        :param article_id: 文章id
        """
        return self._top_request(
            "dingtalk.oapi.material.article.publish",
            {
                "unionid": unionid,
                "article_id": article_id
            }
        )

    def dingtalk_oapi_material_article_get(
            self,
            unionid,
            article_id
    ):
        """
        获取文章
        获取单篇文章信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44543

        :param unionid: 服务号的unionid
        :param article_id: 文章id
        """
        return self._top_request(
            "dingtalk.oapi.material.article.get",
            {
                "unionid": unionid,
                "article_id": article_id
            }
        )

    def dingtalk_oapi_material_article_update(
            self,
            article,
            unionid
    ):
        """
        保存文章详情
        服务窗用于修改文章详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44544

        :param article: 文章对象
        :param unionid: 服务号的unionid
        """
        return self._top_request(
            "dingtalk.oapi.material.article.update",
            {
                "article": article,
                "unionid": unionid
            }
        )

    def dingtalk_oapi_material_article_add(
            self,
            article,
            unionid
    ):
        """
        新增文章
        服务窗新建文章使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44545

        :param article: 文章参数对象
        :param unionid: 服务号的unionid
        """
        return self._top_request(
            "dingtalk.oapi.material.article.add",
            {
                "article": article,
                "unionid": unionid
            }
        )


class TbYongHu(DingTalkBaseAPI):
    """
    用户API
    """

    def taobao_appstore_subscribe_get(
            self,
            nick
    ):
        """
        查询appstore应用订购关系
        查询appstore应用订购关系(对于新上架的多版本应用，建议使用taobao.vas.subscribe.get)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=285

        :param nick: 用户昵称
        """
        return self._top_request(
            "taobao.appstore.subscribe.get",
            {
                "nick": nick
            },
            result_processor=lambda x: x["user_subscribe"]
        )

    def taobao_user_buyer_get(
            self,
            fields
    ):
        """
        查询买家信息API
        查询买家信息API，只能买家类应用调用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21348

        :param fields: 只返回nick, avatar参数
        """
        return self._top_request(
            "taobao.user.buyer.get",
            {
                "fields": fields
            },
            result_processor=lambda x: x["user"]
        )

    def taobao_user_seller_get(
            self,
            fields
    ):
        """
        查询卖家用户信息
        查询卖家用户信息（只能查询有店铺的用户） 只能卖家类应用调用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21349

        :param fields: 需要返回的字段列表，可选值为返回示例值中的可以看到的字段
        """
        return self._top_request(
            "taobao.user.seller.get",
            {
                "fields": fields
            },
            result_processor=lambda x: x["user"]
        )

    def taobao_mixnick_get(
            self,
            nick
    ):
        """
        将用户名转换成混淆后的值
        将用户名转换成混淆后的值，为店铺前台模块授权改造提供数据订正接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21428

        :param nick: 用户名
        """
        return self._top_request(
            "taobao.mixnick.get",
            {
                "nick": nick
            },
            result_processor=lambda x: x["nick"]
        )

    def taobao_opensecurity_uid_get(
            self,
            tb_user_id
    ):
        """
        淘宝open security uid 获取接口
        根据明文 taobao user id 换取 app的 open_uid
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24672

        :param tb_user_id: 淘宝用户ID
        """
        return self._top_request(
            "taobao.opensecurity.uid.get",
            {
                "tb_user_id": tb_user_id
            },
            result_processor=lambda x: x["open_uid"]
        )

    def taobao_opensecurity_isv_uid_get(
            self,
            open_uid
    ):
        """
        获取open security uid for isv
        根据 open_uid 获取 open_uid_isv 用于同一个 isv的多个app间数据关联
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24673

        :param open_uid: 基于Appkey生成的open security淘宝用户Id
        """
        return self._top_request(
            "taobao.opensecurity.isv.uid.get",
            {
                "open_uid": open_uid
            },
            result_processor=lambda x: x["open_uid_isv"]
        )

    def taobao_open_account_delete(
            self,
            open_account_ids='',
            isv_account_ids=''
    ):
        """
        OpenAccount删除数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24819

        :param open_account_ids: Open Account的id列表
        :param isv_account_ids: ISV自己账号的id列表
        """
        return self._top_request(
            "taobao.open.account.delete",
            {
                "open_account_ids": open_account_ids,
                "isv_account_ids": isv_account_ids
            },
            result_processor=lambda x: x["datas"]
        )

    def taobao_open_account_update(
            self,
            param_list=None
    ):
        """
        Open Account数据更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24820

        :param param_list: Open Account
        """
        return self._top_request(
            "taobao.open.account.update",
            {
                "param_list": param_list
            },
            result_processor=lambda x: x["datas"]
        )

    def taobao_open_account_create(
            self,
            param_list=None
    ):
        """
        Open Account导入数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24821

        :param param_list: Open Account的列表
        """
        return self._top_request(
            "taobao.open.account.create",
            {
                "param_list": param_list
            },
            result_processor=lambda x: x["datas"]
        )

    def taobao_open_account_list(
            self,
            open_account_ids='',
            isv_account_ids=''
    ):
        """
        OpenAccount账号信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24848

        :param open_account_ids: Open Account的id列表, 每次最多查询 20 个帐户
        :param isv_account_ids: ISV自己账号的id列表，isvAccountId和openAccountId二选一必填, 每次最多查询 20 个帐户
        """
        return self._top_request(
            "taobao.open.account.list",
            {
                "open_account_ids": open_account_ids,
                "isv_account_ids": isv_account_ids
            },
            result_processor=lambda x: x["datas"]
        )

    def taobao_open_account_search(
            self,
            query
    ):
        """
        open account数据搜索
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25157

        :param query: 基于阿里云OpenSearch服务，openSearch查询语法:https://help.aliyun.com/document_detail/29157.html，搜索服务能够基于id，loginId，mobile，email，isvAccountId，display_name,create_app_key,做搜索查询，示例中mobile可以基于模糊搜素，搜索135的账号，该搜索是分页返回，start表示开始行，hit表示一页返回值，最大500
        """
        return self._top_request(
            "taobao.open.account.search",
            {
                "query": query
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_open_account_token_validate(
            self,
            param_token
    ):
        """
        open account token验证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25270

        :param param_token: token
        """
        return self._top_request(
            "taobao.open.account.token.validate",
            {
                "param_token": param_token
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_open_account_token_apply(
            self,
            token_timestamp='',
            open_account_id='',
            isv_account_id='',
            uuid='',
            login_state_expire_in='',
            ext=''
    ):
        """
        申请免登Open Account Token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25271

        :param token_timestamp: 时间戳单位是毫秒
        :param open_account_id: open account id
        :param isv_account_id: isv自己账号的唯一id
        :param uuid: 用于防重放的唯一id
        :param login_state_expire_in: ISV APP的登录态时长单位是秒
        :param ext: 用于透传一些业务附加参数
        """
        return self._top_request(
            "taobao.open.account.token.apply",
            {
                "token_timestamp": token_timestamp,
                "open_account_id": open_account_id,
                "isv_account_id": isv_account_id,
                "uuid": uuid,
                "login_state_expire_in": login_state_expire_in,
                "ext": ext
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_open_sms_sendvercode(
            self,
            send_ver_code_request
    ):
        """
        发送短信验证码
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25596

        :param send_ver_code_request: 发送验证码请求
        """
        return self._top_request(
            "taobao.open.sms.sendvercode",
            {
                "send_ver_code_request": send_ver_code_request
            }
        )

    def taobao_open_sms_checkvercode(
            self,
            check_ver_code_request
    ):
        """
        验证短信验证码
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25597

        :param check_ver_code_request: 验证验证码
        """
        return self._top_request(
            "taobao.open.sms.checkvercode",
            {
                "check_ver_code_request": check_ver_code_request
            }
        )

    def taobao_open_sms_sendmsg(
            self,
            send_message_request
    ):
        """
        发送短信
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25598

        :param send_message_request: 发送短信请求
        """
        return self._top_request(
            "taobao.open.sms.sendmsg",
            {
                "send_message_request": send_message_request
            }
        )

    def taobao_open_account_index_find(
            self,
            index_type='0',
            index_value=''
    ):
        """
        Open Account索引查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25869

        :param index_type: int MOBILE         = 1;int EMAIL          = 2;int ISV_ACCOUNT_ID = 3;int LOGIN_ID       = 4;int OPEN_ID        = 5;
        :param index_value: 具体值，当索引类型是 OPEN_ID 是，格式为 oauthPlatform|openId，即使用竖线分隔的组合值
        """
        return self._top_request(
            "taobao.open.account.index.find",
            {
                "index_type": index_type,
                "index_value": index_value
            }
        )

    def taobao_open_sms_rmdelaymsg(
            self,
            param_remove_delay_message_request=None
    ):
        """
        删除延迟消息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25966

        :param param_remove_delay_message_request: 删除延迟消息
        """
        return self._top_request(
            "taobao.open.sms.rmdelaymsg",
            {
                "param_remove_delay_message_request": param_remove_delay_message_request
            }
        )

    def taobao_data_wifi_put(
            self,
            wifi_data=''
    ):
        """
        第三方wifi设备商上传数据
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        阿里巴巴和第三方WIFI 数据提供商之间的数据交换
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25969

        :param wifi_data: wifi_data 正式的定义如下：   一、WIFI_DATA 是一个JSON 数组，其中每一个元素的格式是SENSOR_DATA。   二、SENSOR_DATA 是一个JSON 数组，其中：  	 a.第一个元素是版本号，当前有效的版本号是数字2。   	 b.第二个元素是探针的MAC 地址，在上述例子中是60:CD:A9:00:AB:7E。   	 c.第三个元素是探针探测到的移动设备MAC 地址，格式为USER_MAC_LIST。   	   1. USER_MAC_LIST 是一个JSON 数组，其中每一个元素的格式是USER_MAC_DATA。   	   2. USER_MAC_DATA 是一个JSON 数组，其中。   	 	  i.第一个元素是用户的MAC。   	 	 ii.第二个元素是探测到的信号强度，如果该值无法得到，需要填充默认值1。   	 	iii.第三个元素是用户的手机号码。如果该值无法得到，需要填充默认值0。  	 d.第四个元素是一个UNIX 时间戳。在上述例子中是1444398542000。需要注意 是从1970 年1 月1 日零点(UTC)到当前的毫秒数，不是秒数。
        """
        return self._top_request(
            "taobao.data.wifi.put",
            {
                "wifi_data": wifi_data
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_aliqin_flow_wallet_check_balance(
            self,
            grade_id
    ):
        """
        商家预存余额检查
        检查商家CRM预存余额是否足够进行活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25978

        :param grade_id: 检查金额档位id
        """
        return self._top_request(
            "alibaba.aliqin.flow.wallet.check.balance",
            {
                "grade_id": grade_id
            },
            result_processor=lambda x: x["value"]
        )

    def taobao_open_sms_batchsendmsg(
            self,
            params
    ):
        """
        批量发送短信
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26027

        :param params: 参数列表
        """
        return self._top_request(
            "taobao.open.sms.batchsendmsg",
            {
                "params": params
            }
        )

    def taobao_user_avatar_get(
            self,
            nick
    ):
        """
        淘宝用户头像查询
        根据混淆nick查询用户头像
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26303

        :param nick: 混淆nick
        """
        return self._top_request(
            "taobao.user.avatar.get",
            {
                "nick": nick
            },
            result_processor=lambda x: x["avatar"]
        )

    def tmall_service_settleadjustment_modify(
            self,
            param_settle_adjustment_request
    ):
        """
        修改结算调整单
        提供给服务商在对结算有异议时，发起结算调整单。
        通过说明调整单ID，调整费用值，调整原因进行结算调整单修改。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27436

        :param param_settle_adjustment_request: 结算调整单父节点
        """
        return self._top_request(
            "tmall.service.settleadjustment.modify",
            {
                "param_settle_adjustment_request": param_settle_adjustment_request
            }
        )

    def taobao_rdc_aligenius_account_validate(
            self
    ):
        """
        AG商家账号校验
        提供应对接AG的erp系统查询其旗下的商家是否为AG商家
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31159

        """
        return self._top_request(
            "taobao.rdc.aligenius.account.validate"
        )

    def tmall_fantasy_kindle_crowd(
            self
    ):
        """
        kindle人群信息返回
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据接口得到的当前用户信息，返回由算法计算得出的当前用户对应的人群信息（人群信息以1~6的数字标返回）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31237

        """
        return self._top_request(
            "tmall.fantasy.kindle.crowd"
        )

    def alibaba_interact_ui_video(
            self,
            unnamed=''
    ):
        """
        视频播放
        Weex页面播放视频
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31570

        :param unnamed: 仅作鉴权使用，没有实际数据传输
        """
        return self._top_request(
            "alibaba.interact.ui.video",
            {
                "unnamed": unnamed
            },
            result_processor=lambda x: x["unnamed"]
        )

    def taobao_messageaccount_messsage_mass_send(
            self,
            param=None
    ):
        """
        消息号开放-消息群发
        外部 isv 调用该进口来进行消息号消息的群发
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31908

        :param param: 参数
        """
        return self._top_request(
            "taobao.messageaccount.messsage.mass.send",
            {
                "param": param
            }
        )

    def taobao_messageaccount_messsage_reply(
            self,
            param0
    ):
        """
        消息号下行回复接口
        外部 isv 调用该进口来进行消息号消息的回复
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31931

        :param param0: 入参
        """
        return self._top_request(
            "taobao.messageaccount.messsage.reply",
            {
                "param0": param0
            }
        )

    def taobao_messageaccount_messsage_normal_send(
            self,
            param=None
    ):
        """
        下行普通消息
        消息号下行单个普通消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35382

        :param param: 下行普通消息
        """
        return self._top_request(
            "taobao.messageaccount.messsage.normal.send",
            {
                "param": param
            },
            result_processor=lambda x: x["model"]
        )

    def taobao_miniapp_messsage_normal_send(
            self,
            param=None
    ):
        """
        轻店铺下行普通消息给用户
        小程序下行单个普通消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38414

        :param param: 普通消息结构
        """
        return self._top_request(
            "taobao.miniapp.messsage.normal.send",
            {
                "param": param
            },
            result_processor=lambda x: x["model"]
        )

    def taobao_miniapp_messsage_reply(
            self,
            param=None
    ):
        """
        轻店铺下行回复接口
        外部 isv 调用该进口来进行轻店铺消息的回复
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38415

        :param param: 入参
        """
        return self._top_request(
            "taobao.miniapp.messsage.reply",
            {
                "param": param
            }
        )

    def wdk_hema_orderlist_get(
            self,
            name
    ):
        """
        盒马小程序测试服务端api01
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        盒马小程序服务端测试api01
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40389

        :param name: 名称
        """
        return self._top_request(
            "wdk.hema.orderlist.get",
            {
                "name": name
            }
        )

    def taobao_miniapp_userInfo_get(
            self
    ):
        """
        用户开放信息获取
        获取用户的 openId，snsNick（如果用户设置过的话），和加密头像链接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41744

        """
        return self._top_request(
            "taobao.miniapp.userInfo.get"
        )

    def taobao_mixnick_change(
            self,
            src_mix_nick,
            src_appkey
    ):
        """
        新旧mixnick互转
        如果采用老的Appkey获取MixNick A’， 发现DB里 new MixNick为null，则使用新的Appkey调API来换取A’’；如果采用新的Appkey获取A’’，发现DB里不存在当前A’’ 的记录时，先用老Appkey调API得到A’ 查询是否存在A用户的记录，如果已经存在，则关联，否则新增一条MixNick为null的新用户记录。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24410

        :param src_mix_nick: 输入的混淆nick
        :param src_appkey: 输入的appkey
        """
        return self._top_request(
            "taobao.mixnick.change",
            {
                "src_mix_nick": src_mix_nick,
                "src_appkey": src_appkey
            }
        )


class TbLeiMu(DingTalkBaseAPI):
    """
    类目API
    """

    def taobao_itempropvalues_get(
            self,
            fields,
            cid,
            pvs='',
            type='1',
            attr_keys=''
    ):
        """
        获取标准类目属性值
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=13

        :param fields: 需要返回的字段。目前支持有：cid,pid,prop_name,vid,name,name_alias,status,sort_order
        :param cid: 叶子类目ID ,通过taobao.itemcats.get获得叶子类目ID
        :param pvs: 属性和属性值 id串，格式例如(pid1;pid2)或(pid1:vid1;pid2:vid2)或(pid1;pid2:vid2)
        :param type: 获取类目的类型：1代表集市、2代表天猫
        :param attr_keys: 属性的Key，支持多条，以“,”分隔
        """
        return self._top_request(
            "taobao.itempropvalues.get",
            {
                "fields": fields,
                "cid": cid,
                "pvs": pvs,
                "type": type,
                "attr_keys": attr_keys
            }
        )

    def taobao_itemprops_get(
            self,
            cid,
            fields='pid,name,must,multi,prop_values',
            pid='',
            parent_pid='',
            is_key_prop='',
            is_sale_prop='',
            is_color_prop='',
            is_enum_prop='',
            is_input_prop='',
            is_item_prop='',
            child_path='',
            type='1',
            attr_keys=''
    ):
        """
        获取标准商品类目属性
        通过设置必要的参数，来获取商品后台标准类目属性，以及这些属性里面详细的属性值prop_values。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=121

        :param cid: 叶子类目ID，如果只传cid，则只返回一级属性,通过taobao.itemcats.get获得叶子类目ID
        :param fields: 需要返回的字段列表，见：ItemProp，默认返回：pid, name, must, multi, prop_values
        :param pid: 属性id (取类目属性时，传pid，不用同时传PID和parent_pid)
        :param parent_pid: 父属性ID
        :param is_key_prop: 是否关键属性。可选值:true(是),false(否)
        :param is_sale_prop: 是否销售属性。可选值:true(是),false(否)
        :param is_color_prop: 是否颜色属性。可选值:true(是),false(否) (删除的属性不会匹配和返回这个条件)
        :param is_enum_prop: 是否枚举属性。可选值:true(是),false(否) (删除的属性不会匹配和返回这个条件)。如果返回true，属性值是下拉框选择输入，如果返回false，属性值是用户自行手工输入。
        :param is_input_prop: 在is_enum_prop是true的前提下，是否是卖家可以自行输入的属性（注：如果is_enum_prop返回false，该参数统一返回false）。可选值:true(是),false(否) (删除的属性不会匹配和返回这个条件)
        :param is_item_prop: 是否商品属性，这个属性只能放于发布商品时使用。可选值:true(是),false(否)
        :param child_path: 类目子属性路径,由该子属性上层的类目属性和类目属性值组成,格式pid:vid;pid:vid.取类目子属性需要传child_path,cid
        :param type: 获取类目的类型：1代表集市、2代表天猫
        :param attr_keys: 属性的Key，支持多条，以“,”分隔
        """
        return self._top_request(
            "taobao.itemprops.get",
            {
                "cid": cid,
                "fields": fields,
                "pid": pid,
                "parent_pid": parent_pid,
                "is_key_prop": is_key_prop,
                "is_sale_prop": is_sale_prop,
                "is_color_prop": is_color_prop,
                "is_enum_prop": is_enum_prop,
                "is_input_prop": is_input_prop,
                "is_item_prop": is_item_prop,
                "child_path": child_path,
                "type": type,
                "attr_keys": attr_keys
            }
        )

    def taobao_itemcats_get(
            self,
            cids='',
            fields='cid,parent_cid,name,is_parent',
            parent_cid=''
    ):
        """
        获取后台供卖家发布商品的标准商品类目
        获取后台供卖家发布商品的标准商品类目。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=122

        :param cids: 商品所属类目ID列表，用半角逗号(,)分隔 例如:(18957,19562,) (cids、parent_cid至少传一个)
        :param fields: 需要返回的字段列表，见ItemCat，默认返回：cid,parent_cid,name,is_parent；增量类目信息,根据fields传入的参数返回相应的结果。 features字段： 1、如果存在attr_key=freeze表示该类目被冻结了，attr_value=0,5，value可能存在2个值（也可能只有1个），用逗号分割，0表示禁编辑，5表示禁止发布
        :param parent_cid: 父商品类目 id，0表示根节点, 传输该参数返回所有子类目。 (cids、parent_cid至少传一个)
        """
        return self._top_request(
            "taobao.itemcats.get",
            {
                "cids": cids,
                "fields": fields,
                "parent_cid": parent_cid
            }
        )

    def taobao_itemcats_authorize_get(
            self,
            fields
    ):
        """
        查询商家被授权品牌列表和类目列表
        查询B商家被授权品牌列表、类目列表和 c 商家新品类目列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=161

        :param fields: 需要返回的字段。目前支持有：<br/>brand.vid, brand.name, <br/>item_cat.cid, item_cat.name, item_cat.status,item_cat.sort_order,item_cat.parent_cid,item_cat.is_parent,<br/>xinpin_item_cat.cid, <br/>xinpin_item_cat.name, <br/>xinpin_item_cat.status,<br/>xinpin_item_cat.sort_order,<br/>xinpin_item_cat.parent_cid,<br/>xinpin_item_cat.is_parent
        """
        return self._top_request(
            "taobao.itemcats.authorize.get",
            {
                "fields": fields
            },
            result_processor=lambda x: x["seller_authorize"]
        )

    def alibaba_wholesale_category_get(
            self
    ):
        """
        获取类目信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24365

        """
        return self._top_request(
            "alibaba.wholesale.category.get",
            result_processor=lambda x: x["wholesale_category_result"]
        )


class TbShangPin(DingTalkBaseAPI):
    """
    商品API
    """

    def taobao_product_get(
            self,
            fields,
            product_id='',
            cid='',
            props=''
    ):
        """
        获取一个产品的信息
        两种方式查看一个产品详细信息: <br/>传入product_id来查询 <br/>传入cid和props来查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=4

        :param fields: 需返回的字段列表.可选值:Product数据结构中的所有字段;多个字段之间用','分隔.
        :param product_id: Product的id.两种方式来查看一个产品:1.传入product_id来查询 2.传入cid和props来查询
        :param cid: 商品类目id.调用taobao.itemcats.get获取;必须是叶子类目id,如果没有传product_id,那么cid和props必须要传.
        :param props: 比如:诺基亚N73这个产品的关键属性列表就是:品牌:诺基亚;型号:N73,对应的PV值就是10005:10027;10006:29729.
        """
        return self._top_request(
            "taobao.product.get",
            {
                "fields": fields,
                "product_id": product_id,
                "cid": cid,
                "props": props
            },
            result_processor=lambda x: x["product"]
        )

    def taobao_products_search(
            self,
            fields,
            q='',
            cid='',
            props='',
            status='',
            page_no='',
            page_size='',
            vertical_market='',
            customer_props='',
            suite_items_str='',
            barcode_str='',
            market_id=''
    ):
        """
        搜索产品信息
        只有天猫商家发布商品时才需要用到，并非商品搜索api，当前暂不提供商品搜索api。<br/>二种方式搜索所有产品信息(二种至少传一种): <br/><br/>传入关键字q搜索<br/><br/>传入cid和props搜索<br/><br/>返回值支持:product_id,name,pic_path,cid,props,price,tsc<br/><br/>当用户指定了cid并且cid为垂直市场（3C电器城、鞋城）的类目id时，默认只返回小二确认<br/>的产品。如果用户没有指定cid，或cid为普通的类目，默认返回商家确认或小二确认的产<br/>品。如果用户自定了status字段，以指定的status类型为准。<br/><br/>新增一：<br/>   传入suite_items_str 按规格搜索套装产品。<br/>   返回字段增加suite_items_str,is_suite_effecitve支持。<br/><br/>新增二：<br/>   传入barcode_str 支持按条码搜索产品。<br/>   返回字段增加barcode_str。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=5

        :param fields: 需返回的字段列表.可选值:Product数据结构中的以下字段:product_id,name,pic_url,cid,props,price,tsc;多个字段之间用','分隔.新增字段status(product的当前状态)
        :param q: 搜索的关键词是用来搜索产品的title.　注:q,cid和props至少传入一个
        :param cid: 商品类目ID.调用taobao.itemcats.get获取.
        :param props: 属性,属性值的组合.格式:pid:vid;pid:vid;调用taobao.itemprops.get获取类目属性pid <br/>,再用taobao.itempropvalues.get取得vid.
        :param status: 想要获取的产品的状态列表，支持多个状态并列获取，多个状态之间用','分隔，最多同时指定5种状态。例如，只获取小二确认的spu传入'3',只要商家确认的传入'0'，既要小二确认又要商家确认的传入'0,3'。目前只支持者两种类型的状态搜索，输入其他状态无效。
        :param page_no: 页码.传入值为1代表第一页,传入值为2代表第二页,依此类推.默认返回的数据是从第一页开始.
        :param page_size: 每页条数.每页返回最多返回100条,默认值为40.
        :param vertical_market: 传入值为：3表示3C表示3C垂直市场产品，4表示鞋城垂直市场产品，8表示网游垂直市场产品。一次只能指定一种垂直市场类型
        :param customer_props: 用户自定义关键属性,结构：pid1:value1;pid2:value2，如果有型号，系列等子属性用: 隔开 例如：“20000:优衣库:型号:001;632501:1234”，表示“品牌:优衣库:型号:001;货号:1234”
        :param suite_items_str: 按关联产品规格specs搜索套装产品
        :param barcode_str: 按条码搜索产品信息,多个逗号隔开，不支持条码为全零的方式
        :param market_id: 市场ID，1为取C2C市场的产品信息， 2为取B2C市场的产品信息。  不填写此值则默认取C2C的产品信息。
        """
        return self._top_request(
            "taobao.products.search",
            {
                "fields": fields,
                "q": q,
                "cid": cid,
                "props": props,
                "status": status,
                "page_no": page_no,
                "page_size": page_size,
                "vertical_market": vertical_market,
                "customer_props": customer_props,
                "suite_items_str": suite_items_str,
                "barcode_str": barcode_str,
                "market_id": market_id
            }
        )

    def taobao_product_add(
            self,
            cid,
            image,
            native_unkeyprops='',
            outer_id='',
            props='',
            binds='',
            sale_props='',
            customer_props='',
            price='',
            name='',
            desc='',
            major='true',
            market_time='',
            property_alias=''
    ):
        """
        上传一个产品，不包括产品非主图和属性图片
        获取类目ID，必需是叶子类目ID；调用taobao.itemcats.get.v2获取 <br/>传入关键属性,结构:pid:vid;pid:vid.调用taobao.itemprops.get.v2获取pid,<br/>调用taobao.itempropvalues.get获取vid;如果碰到用户自定义属性,请用customer_props.<br/>新增：套装产品发布，目前支持单件多个即 A*2 形式的套装
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=6

        :param cid: 商品类目ID.调用taobao.itemcats.get获取;注意:必须是叶子类目 id.
        :param image: 产品主图片.最大1M,目前仅支持GIF,JPG.
        :param native_unkeyprops: native_unkeyprops
        :param outer_id: 外部产品ID
        :param props: 关键属性 结构:pid:vid;pid:vid.调用taobao.itemprops.get获取pid,调用taobao.itempropvalues.get获取vid;如果碰到用户自定义属性,请用customer_props.
        :param binds: 非关键属性结构:pid:vid;pid:vid.<br>
                      非关键属性<font color=red>不包含</font>关键属性、销售属性、用户自定义属性、商品属性;
                      <br>调用taobao.itemprops.get获取pid,调用taobao.itempropvalues.get获取vid.<br><font color=red>注:支持最大长度为512字节</font>
        :param sale_props: 销售属性结构:pid:vid;pid:vid.调用taobao.itemprops.get获取is_sale_prop＝true的pid,调用taobao.itempropvalues.get获取vid.
        :param customer_props: 用户自定义属性,结构：pid1:value1;pid2:value2，如果有型号，系列等子属性用: 隔开 例如：“20000:优衣库:型号:001;632501:1234”，表示“品牌:优衣库:型号:001;货号:1234”
                               <br><font color=red>注：包含所有自定义属性的传入</font>
        :param price: 产品市场价.精确到2位小数;单位为元.如：200.07
        :param name: 产品名称,最大30个字符.
        :param desc: 产品描述.最大不超过25000个字符
        :param major: 是不是主图
        :param market_time: 上市时间。目前只支持鞋城类目传入此参数
        :param property_alias: 销售属性值别名。格式为pid1:vid1:alias1;pid1:vid2:alia2。只有少数销售属性值支持传入别名，比如颜色和尺寸
        """
        return self._top_request(
            "taobao.product.add",
            {
                "cid": cid,
                "image": image,
                "native_unkeyprops": native_unkeyprops,
                "outer_id": outer_id,
                "props": props,
                "binds": binds,
                "sale_props": sale_props,
                "customer_props": customer_props,
                "price": price,
                "name": name,
                "desc": desc,
                "major": major,
                "market_time": market_time,
                "property_alias": property_alias
            },
            result_processor=lambda x: x["product"]
        )

    def taobao_product_img_upload(
            self,
            product_id,
            image,
            id='',
            position='0',
            is_major=''
    ):
        """
        上传单张产品非主图，如果需要传多张，可调多次
        1.传入产品ID <br/>2.传入图片内容 <br/>注意：图片最大为500K,只支持JPG,GIF格式,如果需要传多张，可调多次
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=7

        :param product_id: 产品ID.Product的id
        :param image: 图片内容.图片最大为500K,只支持JPG,GIF格式.
        :param id: 产品图片ID.修改图片时需要传入
        :param position: 图片序号
        :param is_major: 是否将该图片设为主图.可选值:true,false;默认值:false.
        """
        return self._top_request(
            "taobao.product.img.upload",
            {
                "product_id": product_id,
                "image": image,
                "id": id,
                "position": position,
                "is_major": is_major
            },
            result_processor=lambda x: x["product_img"]
        )

    def taobao_product_propimg_upload(
            self,
            product_id,
            props,
            image,
            id='',
            position='0'
    ):
        """
        上传单张产品属性图片，如果需要传多张，可调多次
        传入产品ID <br/>传入props,目前仅支持颜色属性.调用taobao.itemprops.get.v2取得颜色属性pid,<br/>再用taobao.itempropvalues.get取得vid;格式:pid:vid,只能传入一个颜色pid:vid串; <br/>传入图片内容 <br/>注意：图片最大为2M,只支持JPG,GIF,如果需要传多张，可调多次
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=8

        :param product_id: 产品ID.Product的id
        :param props: 属性串.目前仅支持颜色属性.调用taobao.itemprops.get获取类目属性,取得颜色属性pid,再用taobao.itempropvalues.get取得vid;格式:pid:vid,只能传入一个颜色pid:vid串;
        :param image: 图片内容.图片最大为2M,只支持JPG,GIF.
        :param id: 产品属性图片ID
        :param position: 图片序号
        """
        return self._top_request(
            "taobao.product.propimg.upload",
            {
                "product_id": product_id,
                "props": props,
                "image": image,
                "id": id,
                "position": position
            },
            result_processor=lambda x: x["product_prop_img"]
        )

    def taobao_product_update(
            self,
            product_id,
            outer_id='',
            binds='',
            sale_props='',
            price='',
            desc='',
            image='',
            name='',
            major='true',
            native_unkeyprops='native_unkeyprops'
    ):
        """
        修改一个产品，可以修改主图，不能修改子图片
        传入产品ID <br/>可修改字段：outer_id,binds,sale_props,name,price,desc,image <br/>注意：1.可以修改主图,不能修改子图片,主图最大500K,目前仅支持GIF,JPG<br/>      2.商城卖家产品发布24小时后不能作删除或修改操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=9

        :param product_id: 产品ID
        :param outer_id: 外部产品ID
        :param binds: 非关键属性.调用taobao.itemprops.get获取pid,调用taobao.itempropvalues.get获取vid;格式:pid:vid;pid:vid
        :param sale_props: 销售属性.调用taobao.itemprops.get获取pid,调用taobao.itempropvalues.get获取vid;格式:pid:vid;pid:vid
        :param price: 产品市场价.精确到2位小数;单位为元.如:200.07
        :param desc: 产品描述.最大不超过25000个字符
        :param image: 产品主图.最大500K,目前仅支持GIF,JPG
        :param name: 产品名称.最大不超过30个字符
        :param major: 是否是主图
        :param native_unkeyprops: 自定义非关键属性
        """
        return self._top_request(
            "taobao.product.update",
            {
                "product_id": product_id,
                "outer_id": outer_id,
                "binds": binds,
                "sale_props": sale_props,
                "price": price,
                "desc": desc,
                "image": image,
                "name": name,
                "major": major,
                "native_unkeyprops": native_unkeyprops
            },
            result_processor=lambda x: x["product"]
        )

    def taobao_products_get(
            self,
            fields,
            nick,
            page_no='',
            page_size=''
    ):
        """
        获取产品列表
        根据淘宝会员帐号搜索所有产品信息，只有天猫商家发布商品时才需要用到。 <br/>注意：支持分页，每页最多返回100条,默认值为40,页码从1开始，默认为第一页
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10

        :param fields: 需返回的字段列表.可选值:Product数据结构中的所有字段;多个字段之间用','分隔
        :param nick: 用户昵称
        :param page_no: 页码.传入值为1代表第一页,传入值为2代表第二页,依此类推.默认返回的数据是从第一页开始.
        :param page_size: 每页条数.每页返回最多返回100条,默认值为40
        """
        return self._top_request(
            "taobao.products.get",
            {
                "fields": fields,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["products"]
        )

    def taobao_items_onsale_get(
            self,
            fields,
            q='',
            cid='',
            seller_cids='',
            page_no='1',
            has_discount='',
            has_showcase='',
            order_by='list_time:desc',
            is_taobao='',
            is_ex='',
            page_size='40',
            start_modified='',
            end_modified='',
            is_cspu='',
            is_combine='',
            auction_type=''
    ):
        """
        获取当前会话用户出售中的商品列表
        获取当前用户作为卖家的出售中的商品列表，并能根据传入的搜索条件对出售中的商品列表进行过滤 <br/>只能获得商品的部分信息，商品的详细信息请通过taobao.item.get获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=18

        :param fields: 需返回的字段列表。可选值：Item商品结构体中的以下字段： approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru,list_time,price,has_discount,has_invoice,has_warranty,has_showcase,modified,delist_time,postage_id,seller_cids,outer_id,sold_quantity ；字段之间用“,”分隔。不支持其他字段，如果需要获取其他字段数据，调用taobao.item.seller.get 获取。
        :param q: 搜索字段。搜索商品的title。
        :param cid: 商品类目ID。ItemCat中的cid字段。可以通过taobao.itemcats.get取到
        :param seller_cids: 卖家店铺内自定义类目ID。多个之间用“,”分隔。可以根据taobao.sellercats.list.get获得.(<font color='red'>注：目前最多支持32个ID号传入</font>)
        :param page_no: 页码。取值范围:大于零的整数。默认值为1,即默认返回第一页数据。用此接口获取数据时，当翻页获取的条数（page_no*page_size）超过10万,为了保护后台搜索引擎，接口将报错。所以请大家尽可能的细化自己的搜索条件，例如根据修改时间分段获取商品
        :param has_discount: 是否参与会员折扣。可选值：true，false。默认不过滤该条件
        :param has_showcase: 是否橱窗推荐。 可选值：true，false。默认不过滤该条件
        :param order_by: 排序方式。格式为column:asc/desc ，column可选值:list_time(上架时间),delist_time(下架时间),num(商品数量)，modified(最近修改时间)，sold_quantity（商品销量）,;默认上架时间降序(即最新上架排在前面)。如按照上架时间降序排序方式为list_time:desc
        :param is_taobao: 商品是否在淘宝显示
        :param is_ex: 商品是否在外部网店显示
        :param page_size: 每页条数。取值范围:大于零的整数;最大值：200；默认值：40。用此接口获取数据时，当翻页获取的条数（page_no*page_size）超过2万,为了保护后台搜索引擎，接口将报错。所以请大家尽可能的细化自己的搜索条件，例如根据修改时间分段获取商品
        :param start_modified: 起始的修改时间
        :param end_modified: 结束的修改时间
        :param is_cspu: 是否挂接了达尔文标准产品体系
        :param is_combine: 组合商品
        :param auction_type: 商品类型：a-拍卖,b-一口价
        """
        return self._top_request(
            "taobao.items.onsale.get",
            {
                "fields": fields,
                "q": q,
                "cid": cid,
                "seller_cids": seller_cids,
                "page_no": page_no,
                "has_discount": has_discount,
                "has_showcase": has_showcase,
                "order_by": order_by,
                "is_taobao": is_taobao,
                "is_ex": is_ex,
                "page_size": page_size,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "is_cspu": is_cspu,
                "is_combine": is_combine,
                "auction_type": auction_type
            }
        )

    def taobao_item_update(
            self,
            num_iid,
            input_custom_cpv='',
            cpv_memo='',
            sku_spec_ids='',
            sku_delivery_times='',
            sku_hd_length='',
            sku_hd_height='',
            sku_hd_lamp_quantity='',
            location_state='',
            location_city='',
            food_security_prd_license_no='',
            food_security_design_code='',
            food_security_factory='',
            food_security_factory_site='',
            food_security_contact='',
            food_security_mix='',
            food_security_plan_storage='',
            food_security_period='',
            food_security_food_additive='',
            food_security_supplier='',
            food_security_product_date_start='',
            food_security_product_date_end='',
            food_security_stock_date_start='',
            food_security_stock_date_end='',
            food_security_health_product_no='',
            locality_life_obs='',
            locality_life_version='',
            locality_life_packageid='',
            ms_payment_price='',
            ms_payment_voucher_price='',
            ms_payment_reference_price='',
            delivery_time_delivery_time='',
            delivery_time_delivery_time_type='',
            delivery_time_need_delivery_time='',
            cid='',
            props='',
            num='',
            price='',
            title='',
            desc='',
            post_fee='',
            express_fee='',
            ems_fee='',
            list_time='',
            increment='',
            image='',
            stuff_status='',
            auction_point='',
            property_alias='',
            seller_cids='',
            postage_id='',
            outer_id='',
            product_id='',
            pic_path='',
            auto_fill='',
            is_taobao='',
            is_ex='',
            is_3_d='',
            is_replace_sku='',
            lang='',
            has_discount='',
            has_showcase='',
            approve_status='',
            freight_payer='',
            valid_thru='',
            has_invoice='',
            has_warranty='',
            sell_promise='',
            cod_postage_id='',
            is_lightning_consignment='',
            weight='',
            is_xinpin='',
            sub_stock='0',
            item_size='',
            item_weight='',
            sell_point='',
            barcode='',
            newprepay='',
            qualification='',
            o2o_bind_service='',
            ignorewarning='',
            features='',
            after_sale_id='',
            change_prop='',
            desc_modules='',
            is_offline='',
            wireless_desc='',
            spu_confirm='',
            input_pids='',
            sku_quantities='',
            sku_prices='',
            sku_properties='',
            sku_outer_ids='',
            input_str='',
            sku_barcode='',
            video_id='',
            interactive_id='',
            lease_extends_info='',
            locality_life_expirydate='',
            locality_life_network_id='',
            locality_life_merchant='',
            locality_life_verification='',
            locality_life_refund_ratio='',
            locality_life_choose_logis='',
            locality_life_onsale_auto_refund_ratio='',
            locality_life_refundmafee='',
            locality_life_eticket='',
            empty_fields='',
            scenic_ticket_pay_way='',
            scenic_ticket_book_cost='',
            paimai_info_mode='',
            paimai_info_deposit='',
            paimai_info_interval='',
            paimai_info_reserve='',
            paimai_info_valid_hour='',
            paimai_info_valid_minute='',
            global_stock_type='',
            global_stock_country='',
            global_stock_delivery_place='',
            global_stock_tax_free_promise=''
    ):
        """
        更新商品信息
        根据传入的num_iid更新对应的商品的数据。
        传入的num_iid所对应的商品必须属于当前会话的用户
        商品的属性和sku的属性有包含的关系，商品的价格要位于sku的价格区间之中（例如，sku价格有5元、10元两种，那么商品的价格就需要大于等于5元，小于等于10元，否则更新商品会失败）
        商品的类目和商品的价格、sku的价格都有一定的相关性（具体的关系要通过类目属性查询接口获得）
        当关键属性值更新为“其他”的时候，需要输入input_pids和input_str商品才能更新成功。该接口不支持产品属性修改。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21

        :param num_iid: 商品数字ID，该参数必须
        :param input_custom_cpv: 针对当前商品的自定义属性值
        :param cpv_memo: 针对当前商品的标准属性值的补充说明，让买家更加了解商品信息减少交易纠纷
        :param sku_spec_ids: 此参数暂时不起作用
        :param sku_delivery_times: 此参数暂时不起作用
        :param sku_hd_length: 家装建材类目，商品SKU的长度，正整数，单位为cm，部分类目必选。 数据和SKU一一对应，用,分隔，如：20,30,30
        :param sku_hd_height: 家装建材类目，商品SKU的高度，单位为cm，部分类目必选。 天猫和淘宝格式不同。天猫：可选值为：'0-15', '15-25', '25-50', '50-60', '60-80', '80-120', '120-160', '160-200'。 数据和SKU一一对应，用,分隔，格式如：15-25,25-50,25-50。 淘宝：正整数，单位为cm,格式如：20,30,30
        :param sku_hd_lamp_quantity: 家装建材类目，商品SKU的灯头数量，正整数，大于等于3，部分类目必选。 数据和SKU一一对应，用,分隔，如：3,5,7
        :param location_state: 所在地省份。如浙江
        :param location_city: 所在地城市。如杭州
        :param food_security_prd_license_no: 生产许可证号
        :param food_security_design_code: 产品标准号
        :param food_security_factory: 厂名
        :param food_security_factory_site: 厂址
        :param food_security_contact: 厂家联系方式
        :param food_security_mix: 配料表
        :param food_security_plan_storage: 储藏方法
        :param food_security_period: 保质期，默认有单位，传入数字
        :param food_security_food_additive: 食品添加剂
        :param food_security_supplier: 供货商
        :param food_security_product_date_start: 生产开始日期，格式必须为yyyy-MM-dd
        :param food_security_product_date_end: 生产结束日期,格式必须为yyyy-MM-dd
        :param food_security_stock_date_start: 进货开始日期，要在生产日期之后，格式必须为yyyy-MM-dd
        :param food_security_stock_date_end: 进货结束日期，要在生产日期之后，格式必须为yyyy-MM-dd
        :param food_security_health_product_no: 健字号，保健品/膳食营养补充剂 这个类目下特有的信息，此类目下无需填写生产许可证编号（QS），如果填写了生产许可证编号（QS）将被忽略不保存；保存宝贝时，标题前会自动加上健字号产品名称一起作为宝贝标题；
        :param locality_life_obs: 预约门店是否支持门店自提,1:是
        :param locality_life_version: 电子凭证版本 新版电子凭证值:1
        :param locality_life_packageid: 新版电子凭证包id
        :param ms_payment_price: 订金
        :param ms_payment_voucher_price: 尾款可抵扣金额
        :param ms_payment_reference_price: 参考价
        :param delivery_time_delivery_time: 商品级别设置的发货时间。设置了商品级别的发货时间，相对发货时间，则填写相对发货时间的天数（大于3）；绝对发货时间，则填写yyyy-mm-dd格式，如2013-11-11
        :param delivery_time_delivery_time_type: 发货时间类型：绝对发货时间或者相对发货时间
        :param delivery_time_need_delivery_time: 设置是否使用发货时间，商品级别，sku级别
        :param cid: 叶子类目id
        :param props: 商品属性列表。格式:pid:vid;pid:vid。属性的pid调用taobao.itemprops.get取得，属性值的vid用taobao.itempropvalues.get取得vid。 如果该类目下面没有属性，可以不用填写。如果有属性，必选属性必填，其他非必选属性可以选择不填写.属性不能超过35对。所有属性加起来包括分割符不能超过549字节，单个属性没有限制。 如果有属性是可输入的话，则用字段input_str填入属性的值。
        :param num: 商品数量，取值范围:0-900000000的整数。且需要等于Sku所有数量的和 拍卖商品中增加拍只能为1，荷兰拍要在[2,500)范围内。
        :param price: 商品价格。取值范围:0-100000000;精确到2位小数;单位:元。如:200.07，表示:200元7分。需要在正确的价格区间内。 拍卖商品对应的起拍价。
        :param title: 宝贝标题. 不能超过30字符,受违禁词控制
        :param desc: 商品描述. 字数要大于5个字符，小于25000个字符 ，受违禁词控制
        :param post_fee: 平邮费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:5.07，表示:5元7分, 注:post_fee,express_fee,ems_fee需一起填写
        :param express_fee: 快递费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:15.07，表示:15元7分
        :param ems_fee: ems费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:25.07，表示:25元7分
        :param list_time: 上架时间。大于当前时间则宝贝会下架进入定时上架的宝贝中。
        :param increment: 加价(降价)幅度。如果为0，代表系统代理幅度。对于增价拍和荷兰拍来说是加价幅度，对于降价拍来说是降价幅度。
        :param image: 商品图片。类型:JPG,GIF;最大长度:3M
        :param stuff_status: 商品新旧程度。可选值:new（全新）,unused（闲置）,second（二手）。
        :param auction_point: 商品的积分返点比例。如：5 表示返点比例0.5%. 注意：返点比例必须是>0的整数，而且最大是90,即为9%.B商家在发布非虚拟商品时，返点必须是 5的倍数，即0.5%的倍数。其它是1的倍数，即0.1%的倍数。无名良品商家发布商品时，复用该字段记录积分宝返点比例，返点必须是对应类目的返点步长的整数倍，默认是5，即0.5%。注意此时该字段值依旧必须是>0的整数，注意此时该字段值依旧必须是>0的整数，最高值不超过500，即50%
        :param property_alias: 属性值别名。如pid:vid:别名;pid1:vid1:别名1， pid:属性id vid:值id。总长度不超过800个字符，如'123:333:你好'，引号内的是10个字符。
        :param seller_cids: 重新关联商品与店铺类目，结构:',cid1,cid2,...,'，如果店铺类目存在二级类目，必须传入子类目cids。
        :param postage_id: 宝贝所属的运费模板ID。取值范围：整数且必须是该卖家的运费模板的ID（可通过taobao.delivery.templates.get获得当前会话用户的所有邮费模板）
        :param outer_id: 商家编码
        :param product_id: 商品所属的产品ID(B商家发布商品需要用)
        :param pic_path: 商品主图需要关联的图片空间的相对url。这个url所对应的图片必须要属于当前用户。pic_path和image只需要传入一个,如果两个都传，默认选择pic_path
        :param auto_fill: 代充商品类型。只有少数类目下的商品可以标记上此字段，具体哪些类目可以上传可以通过taobao.itemcat.features.get获得。在代充商品的类目下，不传表示不标记商品类型（交易搜索中就不能通过标记搜到相关的交易了）。可选类型： no_mark(不做类型标记) time_card(点卡软件代充) fee_card(话费软件代充)
        :param is_taobao: 是否在淘宝上显示（如果传FALSE，则在淘宝主站无法显示该商品）
        :param is_ex: 是否在外店显示
        :param is_3_d: 是否是3D
        :param is_replace_sku: 是否替换sku
        :param lang: 商品文字的版本，繁体传入”zh_HK”，简体传入”zh_CN”
        :param has_discount: 支持会员打折。可选值:true,false;
        :param has_showcase: 橱窗推荐。可选值:true,false;
        :param approve_status: 商品上传后的状态。可选值:onsale（出售中）,instock（库中），如果同时更新商品状态为出售中及list_time为将来的时间，则商品还是处于定时上架的状态, 此时item.is_timing为true
        :param freight_payer: 运费承担方式。运费承担方式。可选值:seller（卖家承担）,buyer(买家承担);
        :param valid_thru: 有效期。可选值:7,14;单位:天;
        :param has_invoice: 是否有发票。可选值:true,false (商城卖家此字段必须为true)
        :param has_warranty: 是否有保修。可选值:true,false;
        :param sell_promise: 是否承诺退换货服务!虚拟商品无须设置此项!
        :param cod_postage_id: 货到付款运费模板ID该字段已经废弃，货到付款模板已经集成到运费模板中。
        :param is_lightning_consignment: 实物闪电发货。注意：在售的闪电发货产品不允许取消闪电发货，需要先下架商品才能取消闪电发货标记
        :param weight: 商品的重量(商超卖家专用字段)
        :param is_xinpin: 商品是否为新品。只有在当前类目开通新品,并且当前用户拥有该类目下发布新品权限时才能设置is_xinpin为true，否则设置true后会返回错误码:isv.invalid-permission:xinpin。同时只有一口价全新的宝贝才能设置为新品，否则会返回错误码：isv.invalid-parameter:xinpin。不设置参数就保持原有值。
        :param sub_stock: 商品是否支持拍下减库存:1支持;2取消支持(付款减库存);0(默认)不更改 集市卖家默认拍下减库存; 商城卖家默认付款减库存
        :param item_size: 表示商品的体积，如果需要使用按体积计费的运费模板，一定要设置这个值。该值的单位为立方米（m3），如果是其他单位，请转换成成立方米。该值支持两种格式的设置：格式1：bulk:3,单位为立方米(m3),表示直接设置为商品的体积。格式2：length:10;breadth:10;height:10，单位为米（m）。体积和长宽高都支持小数类型。在传入体积或长宽高时候，不能带单位。体积的单位默认为立方米（m3），长宽高的单位默认为米(m)在编辑的时候，如果需要删除体积属性，请设置该值为0，如bulk:0
        :param item_weight: 商品的重量，用于按重量计费的运费模板。注意：单位为kg。 只能传入数值类型（包含小数），不能带单位，单位默认为kg。 在编辑时候，如果需要在商品里删除重量的信息，就需要将值设置为0
        :param sell_point: 商品卖点信息，最长150个字符。天猫和集市都可用
        :param barcode: 商品条形码
        :param newprepay: 该宝贝是否支持【7天无理由退货】，卖家选择的值只是一个因素，最终以类目和选择的属性条件来确定是否支持7天。填入字符0，表示不支持；未填写或填人字符1，表示支持7天无理由退货；<br>注意：使用该API修改商品其它属性如标题title时，如需保持商品不支持7天无理由退货状态，该字段需传入0 。
        :param qualification: 商品资质信息
        :param o2o_bind_service: 汽车O2O绑定线下服务标记，如不为空，表示关联服务，否则，不关联服务。
        :param ignorewarning: 忽略警告提示.
        :param features: 宝贝特征值，格式为：【key1:value1;key2:value2;key3:value3;】，key和value用【:】分隔，key&value之间用【;】分隔，只有在Top支持的特征值才能保存到宝贝上，目前支持的Key列表为：mysize_tp,是指尺码库对应的key
        :param after_sale_id: 售后说明模板id
        :param change_prop: 基础色数据，淘宝不使用
        :param desc_modules: 已废弃
        :param is_offline: 是否是线下商品。1：线上商品（默认值）；2：线上或线下商品；3：线下商品。
        :param wireless_desc: 无线的宝贝描述
        :param spu_confirm: 手机类目spu 产品信息确认声明
        :param input_pids: 用户自行输入的类目属性ID串，结构：'pid1,pid2,pid3'，如：'20000'（表示品牌） 注：通常一个类目下用户可输入的关键属性不超过1个。
        :param sku_quantities: 更新的Sku的数量串，结构如：num1,num2,num3 如:2,3,4
        :param sku_prices: 更新的Sku的价格串，结构如：10.00,5.00,… 精确到2位小数;单位:元。如:200.07，表示:200元7分
        :param sku_properties: 更新的sku的属性串，调用taobao.itemprops.get获取。格式:pid1:vid;pid2:vid,多个sku属性之间用逗号分隔。该字段内的属性需要在props字段同时包含。如果新增商品包含了sku，则此字段一定要传入,字段长度要控制在512个字节以内。
        :param sku_outer_ids: Sku的外部id串，结构如：1234,1342,… sku_properties, sku_quantities, sku_prices, sku_outer_ids在输入数据时要一一对应，如果没有sku_outer_ids也要写上这个参数，入参是','(这个是两个sku的示列，逗号数应该是sku个数减1)；该参数最大长度是512个字节
        :param input_str: 用户自行输入的子属性名和属性值，结构:'父属性值;一级子属性名;一级子属性值;二级子属性名;自定义输入值,....',如：“耐克;耐克系列;科比系列;科比系列;2K5,Nike乔丹鞋;乔丹系列;乔丹鞋系列;乔丹鞋系列;json5”，多个自定义属性用','分割，input_str需要与input_pids一一对应，注：通常一个类目下用户可输入的关键属性不超过1个。所有属性别名加起来不能超过3999字节。此处不可以使用“其他”、“其它”和“其她”这三个词。
        :param sku_barcode: sku层面的条形码，多个SKU情况，与SKU价格库存格式类似，用逗号分隔
        :param video_id: 主图视频id
        :param interactive_id: 主图视频互动信息id，必须有主图视频id才能传互动信息id
        :param lease_extends_info: 淘宝租赁扩展信息
        :param locality_life_expirydate: 本地生活电子交易凭证业务，目前此字段只涉及到的信息为有效期;如果有效期为起止日期类型，此值为2012-08-06,2012-08-16如果有效期为【购买成功日 至】类型则格式为2012-08-16如果有效期为天数类型则格式为15
        :param locality_life_network_id: 网点ID,在参数empty_fields里设置locality_life.network_id可删除网点ID
        :param locality_life_merchant: 码商信息，格式为 码商id:nick
        :param locality_life_verification: 核销打款,1代表核销打款 0代表非核销打款; 在参数empty_fields里设置locality_life.verification可删除核销打款
        :param locality_life_refund_ratio: 退款比例，百分比%前的数字,1-100的正整数值; 在参数empty_fields里设置locality_life.refund_ratio可删除退款比例
        :param locality_life_choose_logis: 编辑电子凭证宝贝时候表示是否使用邮寄0: 代表不使用邮寄；1：代表使用邮寄；如果不设置这个值，代表不使用邮寄
        :param locality_life_onsale_auto_refund_ratio: 电子凭证售中自动退款比例，百分比%前的数字，介于1-100之间的整数
        :param locality_life_refundmafee: 退款码费承担方。发布电子凭证宝贝的时候会增加“退款码费承担方”配置项，可选填：(1)s（卖家承担） (2)b(买家承担)
        :param locality_life_eticket: 电子凭证业务属性，数据字典是: 1、is_card:1 (暂时不用) 2、consume_way:4 （1 串码 ，4 身份证）3、consume_midmnick ：(核销放行账号:用户id-用户名，支持多个，用逗号分隔,例如 1234-测试账号35,1345-测试账号56）4、market:eticket (电子凭证商品标记) 5、has_pos:1 (1 表示商品配置线下门店，在detail上进行展示 ，没有或者其他值只不展示)格式是: k1:v2;k2:v2;........ 如：has_pos:1;market:eticket;consume_midmnick:901409638-OPPO;consume_way:4
        :param empty_fields: 支持宝贝信息的删除,如需删除对应的食品安全信息中的储藏方法、保质期， 则应该设置此参数的值为：food_security.plan_storage,food_security.period; 各个参数的名称之间用【,】分割, 如果对应的参数有设置过值，即使在这个列表中，也不会被删除; 目前支持此功能的宝贝信息如下：食品安全信息所有字段、电子交易凭证字段（locality_life，locality_life.verification，locality_life.refund_ratio，locality_life.network_id ，locality_life.onsale_auto_refund_ratio）。支持对全球购宝贝信息的清除（字符串中包含global_stock）
        :param scenic_ticket_pay_way: 景区门票类宝贝编辑时候，当卖家签订了支付宝代扣协议时候，需要选择支付方式：全额支付和订金支付。当scenic_ticket_pay_way为1时表示全额支付，为2时表示订金支付
        :param scenic_ticket_book_cost: 景区门票在选择订金支付时候，需要交的预订费。传入的值是1到20之间的数值，小数点后最多可以保留两位（多余的部分将做四舍五入的处理）。这个数值表示的是预订费的比例，最终的预订费为 scenic_ticket_book_cost乘一口价除以100
        :param paimai_info_mode: 拍卖商品选择的拍卖类型，拍卖类型包括三种：增价拍(1)，荷兰拍(2)和降价拍(3)。
        :param paimai_info_deposit: 拍卖宝贝的保证金。对于增价拍和荷兰拍来说保证金有两种模式：淘宝默认模式（首次出价金额的10%），自定义固定保证金（固定冻结金额只能输入不超过30万的正整数），并且保证金只冻结1次。对于降价拍来说保证金只有淘宝默认的（竞拍价格的10% * 竞拍数量），并且每次出价都需要冻结保证金。对于拍卖宝贝来说，保证金是必须的，但是默认使用淘宝默认保证金模式，只有用户需要使用自定义固定保证金的时候才需要使用到这个参数。如果该参数不传或传入0则代表使用默认。
        :param paimai_info_interval: 降价拍宝贝的降价周期(分钟)。降价拍宝贝的价格每隔paimai_info.interval时间会下降一次increment。
        :param paimai_info_reserve: 降价拍宝贝的保留价。对于降价拍来说，paimai_info.reserve必须大于0，且小于price-increment，而且（price-paimai_info.reserve）/increment的计算结果必须为整数
        :param paimai_info_valid_hour: 自定义销售周期的小时数。拍卖宝贝可以自定义销售周期，这里指定销售周期的小时数。自定义销售周期的小时数。拍卖宝贝可以自定义销售周期，这里指定销售周期的小时数。注意，该参数只作为输入参数，不能通过taobao.item.get接口获取。
        :param paimai_info_valid_minute: 自定义销售周期的分钟数。拍卖宝贝可以自定义销售周期，这里是指定销售周期的分钟数。自定义销售周期的小时数。拍卖宝贝可以自定义销售周期，这里指定销售周期的小时数。注意，该参数只作为输入参数，不能通过taobao.item.get接口获取。
        :param global_stock_type: 全球购商品采购地（库存类型）全球购商品有两种库存类型：现货和代购 参数值为1时代表现货，值为2时代表代购。注意：使用时请与 全球购商品采购地（地区/国家）配合使用
        :param global_stock_country: 全球购商品采购地（地区/国家）,默认值只在全球购商品采购地（库存类型选择情况生效），地区国家值为（美国, 香港, 日本, 英国, 新西兰, 德国, 韩国, 荷兰, 澳洲, 法国, 意大利, 台湾, 澳门, 加拿大, 瑞士, 西班牙, 泰国, 新加坡, 马来西亚, 菲律宾, 其他）
        :param global_stock_delivery_place: 全球购商品发货地，发货地现在有两种类型：“国内”和“海外及港澳台”，参数值为1时代表“国内”，值为2时代表“海外及港澳台”
        :param global_stock_tax_free_promise: 全球购商品卖家包税承诺，当值为true时，代表卖家承诺包税。
        """
        return self._top_request(
            "taobao.item.update",
            {
                "num_iid": num_iid,
                "input_custom_cpv": input_custom_cpv,
                "cpv_memo": cpv_memo,
                "sku_spec_ids": sku_spec_ids,
                "sku_delivery_times": sku_delivery_times,
                "sku_hd_length": sku_hd_length,
                "sku_hd_height": sku_hd_height,
                "sku_hd_lamp_quantity": sku_hd_lamp_quantity,
                "location.state": location_state,
                "location.city": location_city,
                "food_security.prd_license_no": food_security_prd_license_no,
                "food_security.design_code": food_security_design_code,
                "food_security.factory": food_security_factory,
                "food_security.factory_site": food_security_factory_site,
                "food_security.contact": food_security_contact,
                "food_security.mix": food_security_mix,
                "food_security.plan_storage": food_security_plan_storage,
                "food_security.period": food_security_period,
                "food_security.food_additive": food_security_food_additive,
                "food_security.supplier": food_security_supplier,
                "food_security.product_date_start": food_security_product_date_start,
                "food_security.product_date_end": food_security_product_date_end,
                "food_security.stock_date_start": food_security_stock_date_start,
                "food_security.stock_date_end": food_security_stock_date_end,
                "food_security.health_product_no": food_security_health_product_no,
                "locality_life.obs": locality_life_obs,
                "locality_life.version": locality_life_version,
                "locality_life.packageid": locality_life_packageid,
                "ms_payment.price": ms_payment_price,
                "ms_payment.voucher_price": ms_payment_voucher_price,
                "ms_payment.reference_price": ms_payment_reference_price,
                "delivery_time.delivery_time": delivery_time_delivery_time,
                "delivery_time.delivery_time_type": delivery_time_delivery_time_type,
                "delivery_time.need_delivery_time": delivery_time_need_delivery_time,
                "cid": cid,
                "props": props,
                "num": num,
                "price": price,
                "title": title,
                "desc": desc,
                "post_fee": post_fee,
                "express_fee": express_fee,
                "ems_fee": ems_fee,
                "list_time": list_time,
                "increment": increment,
                "image": image,
                "stuff_status": stuff_status,
                "auction_point": auction_point,
                "property_alias": property_alias,
                "seller_cids": seller_cids,
                "postage_id": postage_id,
                "outer_id": outer_id,
                "product_id": product_id,
                "pic_path": pic_path,
                "auto_fill": auto_fill,
                "is_taobao": is_taobao,
                "is_ex": is_ex,
                "is_3D": is_3_d,
                "is_replace_sku": is_replace_sku,
                "lang": lang,
                "has_discount": has_discount,
                "has_showcase": has_showcase,
                "approve_status": approve_status,
                "freight_payer": freight_payer,
                "valid_thru": valid_thru,
                "has_invoice": has_invoice,
                "has_warranty": has_warranty,
                "sell_promise": sell_promise,
                "cod_postage_id": cod_postage_id,
                "is_lightning_consignment": is_lightning_consignment,
                "weight": weight,
                "is_xinpin": is_xinpin,
                "sub_stock": sub_stock,
                "item_size": item_size,
                "item_weight": item_weight,
                "sell_point": sell_point,
                "barcode": barcode,
                "newprepay": newprepay,
                "qualification": qualification,
                "o2o_bind_service": o2o_bind_service,
                "ignorewarning": ignorewarning,
                "features": features,
                "after_sale_id": after_sale_id,
                "change_prop": change_prop,
                "desc_modules": desc_modules,
                "is_offline": is_offline,
                "wireless_desc": wireless_desc,
                "spu_confirm": spu_confirm,
                "input_pids": input_pids,
                "sku_quantities": sku_quantities,
                "sku_prices": sku_prices,
                "sku_properties": sku_properties,
                "sku_outer_ids": sku_outer_ids,
                "input_str": input_str,
                "sku_barcode": sku_barcode,
                "video_id": video_id,
                "interactive_id": interactive_id,
                "lease_extends_info": lease_extends_info,
                "locality_life.expirydate": locality_life_expirydate,
                "locality_life.network_id": locality_life_network_id,
                "locality_life.merchant": locality_life_merchant,
                "locality_life.verification": locality_life_verification,
                "locality_life.refund_ratio": locality_life_refund_ratio,
                "locality_life.choose_logis": locality_life_choose_logis,
                "locality_life.onsale_auto_refund_ratio": locality_life_onsale_auto_refund_ratio,
                "locality_life.refundmafee": locality_life_refundmafee,
                "locality_life.eticket": locality_life_eticket,
                "empty_fields": empty_fields,
                "scenic_ticket_pay_way": scenic_ticket_pay_way,
                "scenic_ticket_book_cost": scenic_ticket_book_cost,
                "paimai_info.mode": paimai_info_mode,
                "paimai_info.deposit": paimai_info_deposit,
                "paimai_info.interval": paimai_info_interval,
                "paimai_info.reserve": paimai_info_reserve,
                "paimai_info.valid_hour": paimai_info_valid_hour,
                "paimai_info.valid_minute": paimai_info_valid_minute,
                "global_stock_type": global_stock_type,
                "global_stock_country": global_stock_country,
                "global_stock_delivery_place": global_stock_delivery_place,
                "global_stock_tax_free_promise": global_stock_tax_free_promise
            },
            result_processor=lambda x: x["item"]
        )

    def taobao_item_add(
            self,
            location_state,
            location_city,
            num,
            type,
            stuff_status,
            title,
            desc,
            cid,
            sku_spec_ids='',
            sku_delivery_times='',
            sku_hd_length='',
            sku_hd_height='',
            sku_hd_lamp_quantity='',
            input_str='',
            input_pids='',
            sku_properties='',
            sku_quantities='',
            sku_prices='',
            sku_outer_ids='',
            sku_barcode='',
            delivery_time_need_delivery_time='',
            delivery_time_delivery_time_type='',
            delivery_time_delivery_time='',
            ms_payment_reference_price='',
            ms_payment_voucher_price='',
            ms_payment_price='',
            locality_life_obs='',
            locality_life_version='',
            locality_life_packageid='',
            food_security_prd_license_no='',
            food_security_design_code='',
            food_security_factory='',
            food_security_factory_site='',
            food_security_contact='',
            food_security_mix='',
            food_security_plan_storage='',
            food_security_period='',
            food_security_food_additive='',
            food_security_supplier='',
            food_security_product_date_start='',
            food_security_product_date_end='',
            food_security_stock_date_start='',
            food_security_stock_date_end='',
            food_security_health_product_no='',
            price='',
            approve_status='onsale',
            props='',
            freight_payer='seller',
            valid_thru='14',
            has_invoice='false',
            has_warranty='false',
            has_showcase='false',
            seller_cids='',
            has_discount='false',
            post_fee='',
            express_fee='',
            ems_fee='',
            list_time='',
            increment='',
            image='',
            postage_id='',
            auction_point='',
            property_alias='',
            lang='zh_CN',
            outer_id='',
            product_id='',
            pic_path='',
            auto_fill='',
            is_taobao='',
            is_ex='',
            is_3_d='',
            sell_promise='',
            cod_postage_id='',
            is_lightning_consignment='',
            weight='',
            is_xinpin='false',
            sub_stock='0',
            scenic_ticket_pay_way='',
            scenic_ticket_book_cost='',
            item_size='',
            item_weight='',
            sell_point='',
            barcode='',
            newprepay='',
            qualification='',
            o2o_bind_service='',
            features='',
            ignorewarning='',
            after_sale_id='',
            change_prop='',
            desc_modules='',
            is_offline='',
            wireless_desc='',
            spu_confirm='',
            video_id='',
            interactive_id='',
            lease_extends_info='',
            brokerage='',
            biz_code='',
            image_urls='',
            locality_life_choose_logis='',
            locality_life_expirydate='',
            locality_life_network_id='',
            locality_life_merchant='',
            locality_life_verification='',
            locality_life_refund_ratio='',
            locality_life_onsale_auto_refund_ratio='',
            locality_life_refundmafee='',
            locality_life_eticket='',
            paimai_info_mode='',
            paimai_info_deposit='',
            paimai_info_interval='',
            paimai_info_reserve='',
            paimai_info_valid_hour='',
            paimai_info_valid_minute='',
            global_stock_type='',
            global_stock_country='',
            support_custom_made='',
            custom_made_type_id='',
            global_stock_delivery_place='',
            global_stock_tax_free_promise='',
            input_custom_cpv='',
            cpv_memo=''
    ):
        """
        添加一个商品
        此接口用于新增一个商品 <br/>商品所属的卖家是当前会话的用户 <br/>商品的属性和sku的属性有包含的关系，商品的价格要位于sku的价格区间之中（例如，sku价格有5元、10元两种，那么商品的价格就需要大于等于5元，小于等于10元，否则新增商品会失败） <br/>商品的类目和商品的价格、sku的价格都有一定的相关性（具体的关系要通过类目属性查询接口获得） <br/>商品的运费承担方式和邮费设置有相关性，卖家承担运费不用设置邮费，买家承担运费需要设置邮费 <br/>当关键属性值选择了“其他”的时候，需要输入input_pids和input_str商品才能添加成功。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22

        :param location_state: 所在地省份。如浙江
        :param location_city: 所在地城市。如杭州 。
        :param num: 商品数量。取值范围:0-900000000的整数。且需要等于Sku所有数量的和。拍卖商品中增加拍只能为1，荷兰拍要在[2,500)范围内。
        :param type: 发布类型。可选值:fixed(一口价),auction(拍卖)。B商家不能发布拍卖商品，而且拍卖商品是没有SKU的。拍卖商品发布时需要附加拍卖商品信息：拍卖类型(paimai_info.mode，拍卖类型包括三种：增价拍[1]，荷兰拍[2]以及降价拍[3])，商品数量(num)，起拍价(price)，价格幅度(increament)，保证金(paimai_info.deposit)。另外拍卖商品支持自定义销售周期，通过paimai_info.valid_hour和paimai_info.valid_minute来指定。对于降价拍来说需要设置降价周期(paimai_info.interval)和拍卖保留价(paimai_info.reserve)。注意：通过taobao.item.get接口获取拍卖信息时，会返回除了valid_hour和valid_minute之外的所有拍卖信息。
        :param stuff_status: 新旧程度。可选值：new(新)，second(二手)。B商家不能发布二手商品。如果是二手商品，特定类目下属性里面必填新旧成色属性
        :param title: 宝贝标题。不能超过30字符，受违禁词控制。天猫图书管控类目最大允许120字符；
        :param desc: 宝贝描述。字数要大于5个字符，小于25000个字符，受违禁词控制
        :param cid: 叶子类目id
        :param sku_spec_ids: 此参数暂时不起作用
        :param sku_delivery_times: 此参数暂时不起作用
        :param sku_hd_length: 家装建材类目，商品SKU的长度，正整数，单位为cm，部分类目必选。 数据和SKU一一对应，用,分隔，如：20,30,30
        :param sku_hd_height: 家装建材类目，商品SKU的高度，单位为cm，部分类目必选。 天猫和淘宝格式不同。天猫：可选值为：'0-15', '15-25', '25-50', '50-60', '60-80', '80-120', '120-160', '160-200'。 数据和SKU一一对应，用,分隔，格式如：15-25,25-50,25-50。 淘宝：正整数，单位为cm,格式如：20,30,30
        :param sku_hd_lamp_quantity: 家装建材类目，商品SKU的灯头数量，正整数，大于等于3，部分类目必选。天猫商家专用。 数据和SKU一一对应，用,分隔，如：3,5,7
        :param input_str: 用户自行输入的子属性名和属性值，结构:'父属性值;一级子属性名;一级子属性值;二级子属性名;自定义输入值,....',如：“耐克;耐克系列;科比系列;科比系列;2K5,Nike乔丹鞋;乔丹系列;乔丹鞋系列;乔丹鞋系列;json5”，多个自定义属性用','分割，input_str需要与input_pids一一对应，注：通常一个类目下用户可输入的关键属性不超过1个。所有属性别名加起来不能超过3999字节。此处不可以使用“其他”、“其它”和“其她”这三个词。
        :param input_pids: 用户自行输入的类目属性ID串，结构：'pid1,pid2,pid3'，如：'20000'（表示品牌） 注：通常一个类目下用户可输入的关键属性不超过1个。
        :param sku_properties: 更新的sku的属性串，调用taobao.itemprops.get获取。格式:pid1:vid;pid2:vid,多个sku属性之间用逗号分隔。该字段内的属性需要在props字段同时包含。如果新增商品包含了sku，则此字段一定要传入,字段长度要控制在512个字节以内。
        :param sku_quantities: Sku的数量串，结构如：num1,num2,num3 如：2,3
        :param sku_prices: Sku的价格串，结构如：10.00,5.00,… 精确到2位小数;单位:元。如:200.07，表示:200元7分
        :param sku_outer_ids: Sku的外部id串，结构如：1234,1342,… sku_properties, sku_quantities, sku_prices, sku_outer_ids在输入数据时要一一对应，如果没有sku_outer_ids也要写上这个参数，入参是','(这个是两个sku的示列，逗号数应该是sku个数减1)；该参数最大长度是512个字节
        :param sku_barcode: sku层面的条形码，多个SKU情况，与SKU价格库存格式类似，用逗号分隔
        :param delivery_time_need_delivery_time: 设置是否使用发货时间，商品级别，sku级别
        :param delivery_time_delivery_time_type: 发货时间类型：绝对发货时间或者相对发货时间
        :param delivery_time_delivery_time: 商品级别设置的发货时间。设置了商品级别的发货时间，相对发货时间，则填写相对发货时间的天数（大于3）；绝对发货时间，则填写yyyy-mm-dd格式，如2013-11-11
        :param ms_payment_reference_price: 参考价。该商品订单首次支付价格为 订金 价格，用户可根据 参考价 估算全款。详见说明：http://bangpai.taobao.com/group/thread/15031186-303287205.htm
        :param ms_payment_voucher_price: 尾款可抵扣金额。详见说明：http://bangpai.taobao.com/group/thread/15031186-303287205.htm
        :param ms_payment_price: 订金。在“线上付订金线下付尾款”模式中，有订金、尾款可抵扣金额和参考价，三者需要同时填写。该商品订单首次支付价格为 订金 价格，用户可根据 参考价 估算全款。该模式有别于“一口价”付款方式，针对一个商品，只能选择两种付款方式中的一种，其适用于家装、二手车等场景。详见说明：http://bangpai.taobao.com/group/thread/15031186-303287205.htm
        :param locality_life_obs: 预约门店是否支持门店自提,1:是
        :param locality_life_version: 新版电子凭证字段
        :param locality_life_packageid: 新版电子凭证包 id
        :param food_security_prd_license_no: 生产许可证号
        :param food_security_design_code: 产品标准号
        :param food_security_factory: 厂名
        :param food_security_factory_site: 厂址
        :param food_security_contact: 厂家联系方式
        :param food_security_mix: 配料表
        :param food_security_plan_storage: 储藏方法
        :param food_security_period: 保质期，默认有单位，传入数字
        :param food_security_food_additive: 食品添加剂
        :param food_security_supplier: 供货商
        :param food_security_product_date_start: 生产开始日期，格式必须为yyyy-MM-dd
        :param food_security_product_date_end: 生产结束日期,格式必须为yyyy-MM-dd
        :param food_security_stock_date_start: 进货开始日期，要在生产日期之后，格式必须为yyyy-MM-dd
        :param food_security_stock_date_end: 进货结束日期，要在生产日期之后，格式必须为yyyy-MM-dd
        :param food_security_health_product_no: 健字号，保健品/膳食营养补充剂 这个类目下特有的信息，此类目下无需填写生产许可证编号（QS），如果填写了生产许可证编号（QS）将被忽略不保存；保存宝贝时，标题前会自动加上健字号产品名称一起作为宝贝标题；
        :param price: 商品价格。取值范围:0-100000000;精确到2位小数;单位:元。如:200.07，表示:200元7分。需要在正确的价格区间内。拍卖商品对应的起拍价。
        :param approve_status: 商品上传后的状态。可选值:onsale(出售中),instock(仓库中);默认值:onsale
        :param props: 商品属性列表。格式:pid:vid;pid:vid。属性的pid调用taobao.itemprops.get取得，属性值的vid用taobao.itempropvalues.get取得vid。 如果该类目下面没有属性，可以不用填写。如果有属性，必选属性必填，其他非必选属性可以选择不填写.属性不能超过35对。所有属性加起来包括分割符不能超过549字节，单个属性没有限制。 如果有属性是可输入的话，则用字段input_str填入属性的值
        :param freight_payer: 运费承担方式。可选值:seller（卖家承担）,buyer(买家承担);默认值:seller。卖家承担不用设置邮费和postage_id.买家承担的时候，必填邮费和postage_id 如果用户设置了运费模板会优先使用运费模板，否则要同步设置邮费（post_fee,express_fee,ems_fee）
        :param valid_thru: 有效期。可选值:7,14;单位:天;默认值:14
        :param has_invoice: 是否有发票。可选值:true,false (商城卖家此字段必须为true);默认值:false(无发票)
        :param has_warranty: 是否有保修。可选值:true,false;默认值:false(不保修)
        :param has_showcase: 橱窗推荐。可选值:true,false;默认值:false(不推荐)
        :param seller_cids: 商品所属的店铺类目列表。按逗号分隔。结构:',cid1,cid2,...,'，如果店铺类目存在二级类目，必须传入子类目cids。
        :param has_discount: 支持会员打折。可选值:true,false;默认值:false(不打折)
        :param post_fee: 平邮费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:5.07，表示:5元7分. 注:post_fee,express_fee,ems_fee需要一起填写
        :param express_fee: 快递费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:15.07，表示:15元7分
        :param ems_fee: ems费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:25.07，表示:25元7分
        :param list_time: 定时上架时间。(时间格式：yyyy-MM-dd HH:mm:ss)
        :param increment: 加价(降价)幅度。如果为0，代表系统代理幅度。对于增价拍和荷兰拍来说是加价幅度，对于降价拍来说是降价幅度。
        :param image: 商品主图片。类型:JPG,GIF;最大长度:3M。（推荐使用pic_path字段，先把图片上传到卖家图片空间）
        :param postage_id: 宝贝所属的运费模板ID。取值范围：整数且必须是该卖家的运费模板的ID（可通过taobao.delivery.template.get获得当前会话用户的所有邮费模板）
        :param auction_point: 商品的积分返点比例。如:5,表示:返点比例0.5%. 注意：返点比例必须是>0的整数，而且最大是90,即为9%.B商家在发布非虚拟商品时，返点必须是 5的倍数，即0.5%的倍数。其它是1的倍数，即0.1%的倍数。无名良品商家发布商品时，复用该字段记录积分宝返点比例，返点必须是对应类目的返点步长的整数倍，默认是5，即0.5%。注意此时该字段值依旧必须是>0的整数，最高值不超过500，即50%
        :param property_alias: 属性值别名。如pid:vid:别名;pid1:vid1:别名1 ，其中：pid是属性id vid是属性值id。总长度不超过800个字符，如'123:333:你好'，引号内的是10个字符。
        :param lang: 商品文字的字符集。繁体传入'zh_HK'，简体传入'zh_CN'，不传默认为简体
        :param outer_id: 商品外部编码，该字段的最大长度是64个字节
        :param product_id: 商品所属的产品ID(B商家发布商品需要用)
        :param pic_path: （推荐）商品主图需要关联的图片空间的相对url。这个url所对应的图片必须要属于当前用户。pic_path和image只需要传入一个,如果两个都传，默认选择pic_path
        :param auto_fill: 代充商品类型。在代充商品的类目下，不传表示不标记商品类型（交易搜索中就不能通过标记搜到相关的交易了）。可选类型： no_mark(不做类型标记) time_card(点卡软件代充) fee_card(话费软件代充)
        :param is_taobao: 是否在淘宝上显示（如果传FALSE，则在淘宝主站无法显示该商品）
        :param is_ex: 是否在外店显示
        :param is_3_d: 是否是3D
        :param sell_promise: 是否承诺退换货服务!虚拟商品无须设置此项!
        :param cod_postage_id: 此为货到付款运费模板的ID，对应的JAVA类型是long,如果COD卖家应用了货到付款运费模板，此值要进行设置。该字段已经废弃
        :param is_lightning_consignment: 实物闪电发货
        :param weight: 商品的重量(商超卖家专用字段)
        :param is_xinpin: 商品是否为新品。只有在当前类目开通新品,并且当前用户拥有该类目下发布新品权限时才能设置is_xinpin为true，否则设置true后会返回错误码:isv.invalid-permission:add-xinpin。同时只有一口价全新的宝贝才能设置为新品，否则会返回错误码：isv.invalid-parameter:xinpin。不设置该参数值或设置为false效果一致。
        :param sub_stock: 商品是否支持拍下减库存:1支持;2取消支持(付款减库存);0(默认)不更改集市卖家默认拍下减库存;商城卖家默认付款减库存
        :param scenic_ticket_pay_way: 景区门票类宝贝发布时候，当卖家签订了支付宝代扣协议时候，需要选择支付方式：全额支付和订金支付。当scenic_ticket_pay_way为1时表示全额支付，为2时表示订金支付
        :param scenic_ticket_book_cost: 景区门票在选择订金支付时候，需要交的预订费。传入的值是1到20之间的数值，小数点后最多可以保留两位（多余的部分将做四舍五入的处理）。这个数值表示的是预订费的比例，最终的预订费为 scenic_ticket_book_cost乘一口价除以100
        :param item_size: 表示商品的体积，如果需要使用按体积计费的运费模板，一定要设置这个值。该值的单位为立方米（m3），如果是其他单位，请转换成成立方米。该值支持两种格式的设置：格式1：bulk:3,单位为立方米(m3),表示直接设置为商品的体积。格式2：length:10;breadth:10;height:10，单位为米（m）。体积和长宽高都支持小数类型。在传入体积或长宽高时候，不能带单位。体积的单位默认为立方米（m3），长宽高的单位默认为米(m)该值支持两种格式的设置：格式1：bulk:3,单位为立方米(m3),表示直接设置为商品的体积。格式2：length:10;breadth:10;height:10，单位为米（m）
        :param item_weight: 商品的重量，用于按重量计费的运费模板。注意：单位为kg。只能传入数值类型（包含小数），不能带单位，单位默认为kg。
        :param sell_point: 商品卖点信息，最长150个字符。天猫商家和集市卖家都可用。
        :param barcode: 商品条形码
        :param newprepay: 该宝贝是否支持【7天无理由退货】，卖家选择的值只是一个因素，最终以类目和选择的属性条件来确定是否支持7天。填入字符0，表示不支持；未填写或填人字符1，表示支持7天无理由退货；
        :param qualification: 商品资质信息
        :param o2o_bind_service: 汽车O2O绑定线下服务标记，如不为空，表示关联服务，否则，不关联服务。
        :param features: 宝贝特征值，格式为：【key1:value1;key2:value2;key3:value3;】，key和value用【:】分隔，key&value之间用【;】分隔，只有在Top支持的特征值才能保存到宝贝上，目前支持的Key列表为：mysize_tp
        :param ignorewarning: 忽略警告提示.
        :param after_sale_id: 售后说明模板id
        :param change_prop: 基础色数据，淘宝不使用
        :param desc_modules: 已废弃
        :param is_offline: 是否是线下商品。1：线上商品（默认值）；2：线上或线下商品；3：线下商品。
        :param wireless_desc: 无线的宝贝描述
        :param spu_confirm: 手机类目spu 优化，信息确认字段
        :param video_id: 主图视频id
        :param interactive_id: 主图视频互动信息id，必须填写主图视频id才能有互动信息id
        :param lease_extends_info: 租赁扩展信息
        :param brokerage: 仅淘小铺卖家需要。佣金比例(15.3对应的佣金比例为15.3%).只支持小数点后1位。多余的位数四舍五入(15.32会保存为15.3%
        :param biz_code: 业务身份编码。淘小铺编码为'taobao-taoxiaopu'
        :param image_urls: 商品主图，多张主图用该字段。使用该字段时。pic_path,image必须为空.
        :param locality_life_choose_logis: 发布电子凭证宝贝时候表示是否使用邮寄 0: 代表不使用邮寄； 1：代表使用邮寄；如果不设置这个值，代表不使用邮寄
        :param locality_life_expirydate: 本地生活电子交易凭证业务，目前此字段只涉及到的信息为有效期;如果有效期为起止日期类型，此值为2012-08-06,2012-08-16如果有效期为【购买成功日 至】类型则格式为2012-08-16如果有效期为天数类型则格式为15
        :param locality_life_network_id: 网点ID
        :param locality_life_merchant: 码商信息，格式为 码商id:nick
        :param locality_life_verification: 核销打款 1代表核销打款 0代表非核销打款
        :param locality_life_refund_ratio: 退款比例，百分比%前的数字,1-100的正整数值
        :param locality_life_onsale_auto_refund_ratio: 电子凭证售中自动退款比例，百分比%前的数字，介于1-100之间的整数
        :param locality_life_refundmafee: 退款码费承担方。发布电子凭证宝贝的时候会增加“退款码费承担方”配置项，可选填：(1)s（卖家承担） (2)b(买家承担)
        :param locality_life_eticket: 电子凭证业务属性，数据字典是: 1、is_card:1 (暂时不用) 2、consume_way:4 （1 串码 ，4 身份证）3、consume_midmnick ：(核销放行账号:用户id-用户名，支持多个，用逗号分隔,例如 1234-测试账号35,1345-测试账号56）4、market:eticket (电子凭证商品标记) 5、has_pos:1 (1 表示商品配置线下门店，在detail上进行展示 ，没有或者其他值只不展示)格式是: k1:v2;k2:v2;........ 如：has_pos:1;market:eticket;consume_midmnick:901409638-OPPO;consume_way:4
        :param paimai_info_mode: 拍卖商品选择的拍卖类型，拍卖类型包括三种：增价拍(1)，荷兰拍(2)和降价拍(3)。
        :param paimai_info_deposit: 拍卖宝贝的保证金。对于增价拍和荷兰拍来说保证金有两种模式：淘宝默认模式（首次出价金额的10%），自定义固定保证金（固定冻结金额只能输入不超过30万的正整数），并且保证金只冻结1次。对于降价拍来说保证金只有淘宝默认的（竞拍价格的10% * 竞拍数量），并且每次出价都需要冻结保证金。对于拍卖宝贝来说，保证金是必须的，但是默认使用淘宝默认保证金模式，只有用户需要使用自定义固定保证金的时候才需要使用到这个参数，如果该参数不传或传入0则代表使用默认。
        :param paimai_info_interval: 降价拍宝贝的降价周期(分钟)。降价拍宝贝的价格每隔paimai_info.interval时间会下降一次increment。
        :param paimai_info_reserve: 降价拍宝贝的保留价。对于降价拍来说，paimai_info.reserve必须大于0，且小于price-increment，而且（price-paimai_info.reserve）/increment的计算结果必须为整数
        :param paimai_info_valid_hour: 自定义销售周期的小时数。拍卖宝贝可以自定义销售周期，这里指定销售周期的小时数。注意，该参数只作为输入参数，不能通过taobao.item.get接口获取。
        :param paimai_info_valid_minute: 自定义销售周期的分钟数。拍卖宝贝可以自定义销售周期，这里是指定销售周期的分钟数。自定义销售周期的小时数。拍卖宝贝可以自定义销售周期，这里指定销售周期的小时数。注意，该参数只作为输入参数，不能通过taobao.item.get接口获取。
        :param global_stock_type: 全球购商品采购地（库存类型），有两种库存类型：现货和代购参数值为1时代表现货，值为2时代表代购。注意：使用时请与 全球购商品采购地（地区/国家）配合使用
        :param global_stock_country: 全球购商品采购地（地区/国家）,默认值只在全球购商品采购地（库存类型选择情况生效），地区国家值请填写法定的国家名称，类如（美国, 香港, 日本, 英国, 新西兰, 德国, 韩国, 荷兰, 法国, 意大利, 台湾, 澳门, 加拿大, 瑞士, 西班牙, 泰国, 新加坡, 马来西亚, 菲律宾），不要使用其他
        :param support_custom_made: 是否支持定制市场 true代表支持，false代表支持,如果为空代表与之前保持不变不会修改
        :param custom_made_type_id: 定制工具Id如果支持定制市场，这个值不填写，就用之前的定制工具Id，之前的定制工具Id没有值就默认为-1
        :param global_stock_delivery_place: 全球购商品发货地，发货地现在有两种类型：“国内”和“海外及港澳台”，参数值为1时代表“国内”，值为2时代表“海外及港澳台”，默认为国内。注意：卖家必须已经签署并启用“海外直邮”合约，才能选择发货地为“海外及港澳台”
        :param global_stock_tax_free_promise: 全球购商品卖家包税承诺，当值为true时，代表卖家承诺包税。注意：请与“全球购商品发货地”配合使用，包税承诺必须满足：1、发货地为海外及港澳台 2、卖家已经签署并启用“包税合约”合约
        :param input_custom_cpv: 针对当前商品的自定义属性值，目前是针对销售属性值自定义的，所以调用方需要把自定义属性值对应的虚拟属性值ID（负整数，例如例子中的 -1和-2）像标准属性值值的id一样设置到SKU上，如果自定义属性值有属性值图片，也要设置到属性图片上
        :param cpv_memo: 针对当前商品的标准属性值的补充说明，让买家更加了解商品信息减少交易纠纷
        """
        return self._top_request(
            "taobao.item.add",
            {
                "location.state": location_state,
                "location.city": location_city,
                "num": num,
                "type": type,
                "stuff_status": stuff_status,
                "title": title,
                "desc": desc,
                "cid": cid,
                "sku_spec_ids": sku_spec_ids,
                "sku_delivery_times": sku_delivery_times,
                "sku_hd_length": sku_hd_length,
                "sku_hd_height": sku_hd_height,
                "sku_hd_lamp_quantity": sku_hd_lamp_quantity,
                "input_str": input_str,
                "input_pids": input_pids,
                "sku_properties": sku_properties,
                "sku_quantities": sku_quantities,
                "sku_prices": sku_prices,
                "sku_outer_ids": sku_outer_ids,
                "sku_barcode": sku_barcode,
                "delivery_time.need_delivery_time": delivery_time_need_delivery_time,
                "delivery_time.delivery_time_type": delivery_time_delivery_time_type,
                "delivery_time.delivery_time": delivery_time_delivery_time,
                "ms_payment.reference_price": ms_payment_reference_price,
                "ms_payment.voucher_price": ms_payment_voucher_price,
                "ms_payment.price": ms_payment_price,
                "locality_life.obs": locality_life_obs,
                "locality_life.version": locality_life_version,
                "locality_life.packageid": locality_life_packageid,
                "food_security.prd_license_no": food_security_prd_license_no,
                "food_security.design_code": food_security_design_code,
                "food_security.factory": food_security_factory,
                "food_security.factory_site": food_security_factory_site,
                "food_security.contact": food_security_contact,
                "food_security.mix": food_security_mix,
                "food_security.plan_storage": food_security_plan_storage,
                "food_security.period": food_security_period,
                "food_security.food_additive": food_security_food_additive,
                "food_security.supplier": food_security_supplier,
                "food_security.product_date_start": food_security_product_date_start,
                "food_security.product_date_end": food_security_product_date_end,
                "food_security.stock_date_start": food_security_stock_date_start,
                "food_security.stock_date_end": food_security_stock_date_end,
                "food_security.health_product_no": food_security_health_product_no,
                "price": price,
                "approve_status": approve_status,
                "props": props,
                "freight_payer": freight_payer,
                "valid_thru": valid_thru,
                "has_invoice": has_invoice,
                "has_warranty": has_warranty,
                "has_showcase": has_showcase,
                "seller_cids": seller_cids,
                "has_discount": has_discount,
                "post_fee": post_fee,
                "express_fee": express_fee,
                "ems_fee": ems_fee,
                "list_time": list_time,
                "increment": increment,
                "image": image,
                "postage_id": postage_id,
                "auction_point": auction_point,
                "property_alias": property_alias,
                "lang": lang,
                "outer_id": outer_id,
                "product_id": product_id,
                "pic_path": pic_path,
                "auto_fill": auto_fill,
                "is_taobao": is_taobao,
                "is_ex": is_ex,
                "is_3D": is_3_d,
                "sell_promise": sell_promise,
                "cod_postage_id": cod_postage_id,
                "is_lightning_consignment": is_lightning_consignment,
                "weight": weight,
                "is_xinpin": is_xinpin,
                "sub_stock": sub_stock,
                "scenic_ticket_pay_way": scenic_ticket_pay_way,
                "scenic_ticket_book_cost": scenic_ticket_book_cost,
                "item_size": item_size,
                "item_weight": item_weight,
                "sell_point": sell_point,
                "barcode": barcode,
                "newprepay": newprepay,
                "qualification": qualification,
                "o2o_bind_service": o2o_bind_service,
                "features": features,
                "ignorewarning": ignorewarning,
                "after_sale_id": after_sale_id,
                "change_prop": change_prop,
                "desc_modules": desc_modules,
                "is_offline": is_offline,
                "wireless_desc": wireless_desc,
                "spu_confirm": spu_confirm,
                "video_id": video_id,
                "interactive_id": interactive_id,
                "lease_extends_info": lease_extends_info,
                "brokerage": brokerage,
                "biz_code": biz_code,
                "image_urls": image_urls,
                "locality_life.choose_logis": locality_life_choose_logis,
                "locality_life.expirydate": locality_life_expirydate,
                "locality_life.network_id": locality_life_network_id,
                "locality_life.merchant": locality_life_merchant,
                "locality_life.verification": locality_life_verification,
                "locality_life.refund_ratio": locality_life_refund_ratio,
                "locality_life.onsale_auto_refund_ratio": locality_life_onsale_auto_refund_ratio,
                "locality_life.refundmafee": locality_life_refundmafee,
                "locality_life.eticket": locality_life_eticket,
                "paimai_info.mode": paimai_info_mode,
                "paimai_info.deposit": paimai_info_deposit,
                "paimai_info.interval": paimai_info_interval,
                "paimai_info.reserve": paimai_info_reserve,
                "paimai_info.valid_hour": paimai_info_valid_hour,
                "paimai_info.valid_minute": paimai_info_valid_minute,
                "global_stock_type": global_stock_type,
                "global_stock_country": global_stock_country,
                "support_custom_made": support_custom_made,
                "custom_made_type_id": custom_made_type_id,
                "global_stock_delivery_place": global_stock_delivery_place,
                "global_stock_tax_free_promise": global_stock_tax_free_promise,
                "input_custom_cpv": input_custom_cpv,
                "cpv_memo": cpv_memo
            },
            result_processor=lambda x: x["item"]
        )

    def taobao_item_img_upload(
            self,
            num_iid,
            id='',
            position='',
            image='',
            is_major='false',
            is_rectangle='false'
    ):
        """
        添加商品图片
        添加一张商品图片到num_iid指定的商品中
        传入的num_iid所对应的商品必须属于当前会话的用户
        如果更新图片需要设置itemimg_id，且该itemimg_id的图片记录需要属于传入的num_iid对应的商品。如果新增图片则不用设置 。
        使用taobao.item.seller.get中返回的item_imgs字段获取图片id。
        商品图片有数量和大小上的限制，根据卖家享有的服务（如：卖家订购了多图服务等），商品图片数量限制不同。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23

        :param num_iid: 商品数字ID，该参数必须
        :param id: 商品图片id(如果是更新图片，则需要传该参数)
        :param position: 图片序号
        :param image: 商品图片内容类型:JPG,GIF;最大:3M 。支持的文件类型：gif,jpg,jpeg,png
        :param is_major: 是否将该图片设为主图,可选值:true,false;默认值:false(非主图)
        :param is_rectangle: 是否3:4长方形图片，绑定3:4主图视频时用于上传3:4商品主图
        """
        return self._top_request(
            "taobao.item.img.upload",
            {
                "num_iid": num_iid,
                "id": id,
                "position": position,
                "image": image,
                "is_major": is_major,
                "is_rectangle": is_rectangle
            },
            result_processor=lambda x: x["item_img"]
        )

    def taobao_item_img_delete(
            self,
            num_iid,
            id,
            is_sixth_pic='false'
    ):
        """
        删除商品图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24

        :param num_iid: 商品数字ID
        :param id: 商品图片ID；如果是竖图，请将id的值设置为1
        :param is_sixth_pic: 标记是否要删除第6张图，因为第6张图与普通商品图片不是存储在同一个位置的无图片ID，所以要通过一个标记来判断是否为第6张图，目前第6张图业务主要用在女装业务下
        """
        return self._top_request(
            "taobao.item.img.delete",
            {
                "num_iid": num_iid,
                "id": id,
                "is_sixth_pic": is_sixth_pic
            },
            result_processor=lambda x: x["item_img"]
        )

    def taobao_item_propimg_delete(
            self,
            id,
            num_iid
    ):
        """
        删除属性图片
        删除propimg_id 所指定的商品属性图片 <br/>传入的num_iid所对应的商品必须属于当前会话的用户 <br/>propimg_id对应的属性图片需要属于num_iid对应的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25

        :param id: 商品属性图片ID
        :param num_iid: 商品数字ID，必选
        """
        return self._top_request(
            "taobao.item.propimg.delete",
            {
                "id": id,
                "num_iid": num_iid
            },
            result_processor=lambda x: x["prop_img"]
        )

    def taobao_item_propimg_upload(
            self,
            num_iid,
            properties,
            image='',
            id='',
            position='0'
    ):
        """
        添加或修改属性图片
        添加一张商品属性图片到num_iid指定的商品中 <br/>传入的num_iid所对应的商品必须属于当前会话的用户 <br/>图片的属性必须要是颜色的属性，这个在前台显示的时候需要和sku进行关联的 <br/>商品属性图片只有享有服务的卖家（如：淘宝大卖家、订购了淘宝多图服务的卖家）才能上传 <br/>商品属性图片有数量和大小上的限制，最多不能超过24张（每个颜色属性都有一张）。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26

        :param num_iid: 商品数字ID，必选
        :param properties: 属性列表。调用taobao.itemprops.get获取类目属性，属性必须是颜色属性，再用taobao.itempropvalues.get取得vid。格式:pid:vid。
        :param image: 属性图片内容。类型:JPG,GIF;图片大小不超过:3M
        :param id: 属性图片ID。如果是新增不需要填写
        :param position: 图片位置
        """
        return self._top_request(
            "taobao.item.propimg.upload",
            {
                "num_iid": num_iid,
                "properties": properties,
                "image": image,
                "id": id,
                "position": position
            },
            result_processor=lambda x: x["prop_img"]
        )

    def taobao_item_sku_add(
            self,
            num_iid,
            properties,
            quantity,
            price,
            outer_id='',
            item_price='',
            lang='zh_CN',
            ignorewarning=''
    ):
        """
        添加SKU
        新增一个sku到num_iid指定的商品中 <br/>传入的iid所对应的商品必须属于当前会话的用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27

        :param num_iid: Sku所属商品数字id，可通过 taobao.item.get 获取。必选
        :param properties: Sku属性串。格式:pid:vid;pid:vid,如:1627207:3232483;1630696:3284570,表示:机身颜色:军绿色;手机套餐:一电一充。
        :param quantity: Sku的库存数量。sku的总数量应该小于等于商品总数量(Item的NUM)。取值范围:大于零的整数
        :param price: Sku的销售价格。商品的价格要在商品所有的sku的价格之间。精确到2位小数;单位:元。如:200.07，表示:200元7分
        :param outer_id: Sku的商家外部id
        :param item_price: sku所属商品的价格。当用户新增sku，使商品价格不属于sku价格之间的时候，用于修改商品的价格，使sku能够添加成功
        :param lang: Sku文字的版本。可选值:zh_HK(繁体),zh_CN(简体);默认值:zh_CN
        :param ignorewarning: 忽略警告提示.
        """
        return self._top_request(
            "taobao.item.sku.add",
            {
                "num_iid": num_iid,
                "properties": properties,
                "quantity": quantity,
                "price": price,
                "outer_id": outer_id,
                "item_price": item_price,
                "lang": lang,
                "ignorewarning": ignorewarning
            },
            result_processor=lambda x: x["sku"]
        )

    def taobao_item_sku_get(
            self,
            fields,
            sku_id,
            num_iid=''
    ):
        """
        获取SKU
        获取sku_id所对应的sku数据 <br/>sku_id对应的sku要属于传入的nick对应的卖家
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28

        :param fields: 需返回的字段列表。可选值：Sku结构体中的所有字段；字段之间用“,”分隔。
        :param sku_id: Sku的id。可以通过taobao.item.get得到
        :param num_iid: 商品的数字IID（num_iid和nick必传一个，推荐用num_iid），传商品的数字id返回的结果里包含cspu（SKu上的产品规格信息）。
        """
        return self._top_request(
            "taobao.item.sku.get",
            {
                "fields": fields,
                "sku_id": sku_id,
                "num_iid": num_iid
            },
            result_processor=lambda x: x["sku"]
        )

    def taobao_item_sku_update(
            self,
            num_iid,
            properties,
            quantity='',
            price='',
            outer_id='',
            item_price='',
            lang='zh_CN',
            ignorewarning=''
    ):
        """
        更新SKU信息
        *更新一个sku的数据 <br/>*需要更新的sku通过属性properties进行匹配查找 <br/>*商品的数量和价格必须大于等于0 <br/>*sku记录会更新到指定的num_iid对应的商品中 <br/>*num_iid对应的商品必须属于当前的会话用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29

        :param num_iid: Sku所属商品数字id，可通过 taobao.item.get 获取
        :param properties: Sku属性串。格式:pid:vid;pid:vid,如: 1627207:3232483;1630696:3284570,表示机身颜色:军绿色;手机套餐:一电一充。<br/>如果包含自定义属性，则格式为pid:vid;pid2:vid2;$pText:vText , 其中$pText:vText为自定义属性。限制：其中$pText的’$’前缀不能少，且pText和vText文本中不可以存在 冒号:和分号;以及逗号，
        :param quantity: Sku的库存数量。sku的总数量应该小于等于商品总数量(Item的NUM)，sku数量变化后item的总数量也会随着变化。取值范围:大于等于零的整数
        :param price: Sku的销售价格。精确到2位小数;单位:元。如:200.07，表示:200元7分。修改后的sku价格要保证商品的价格在所有sku价格所形成的价格区间内（例如：商品价格为6元，sku价格有5元、10元两种，如果要修改5元sku的价格，那么修改的范围只能是0-6元之间；如果要修改10元的sku，那么修改的范围只能是6到无穷大的区间中）
        :param outer_id: Sku的商家外部id
        :param item_price: sku所属商品的价格。当用户更新sku，使商品价格不属于sku价格之间的时候，用于修改商品的价格，使sku能够更新成功
        :param lang: Sku文字的版本。可选值:zh_HK(繁体),zh_CN(简体);默认值:zh_CN
        :param ignorewarning: 忽略警告提示.
        """
        return self._top_request(
            "taobao.item.sku.update",
            {
                "num_iid": num_iid,
                "properties": properties,
                "quantity": quantity,
                "price": price,
                "outer_id": outer_id,
                "item_price": item_price,
                "lang": lang,
                "ignorewarning": ignorewarning
            },
            result_processor=lambda x: x["sku"]
        )

    def taobao_item_skus_get(
            self,
            fields,
            num_iids
    ):
        """
        根据商品ID列表获取SKU信息
        * 获取多个商品下的所有sku
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30

        :param fields: 需返回的字段列表。可选值：Sku结构体中的所有字段；字段之间用“,”分隔。
        :param num_iids: sku所属商品数字id，必选。num_iid个数不能超过40个
        """
        return self._top_request(
            "taobao.item.skus.get",
            {
                "fields": fields,
                "num_iids": num_iids
            },
            result_processor=lambda x: x["skus"]
        )

    def taobao_item_update_delisting(
            self,
            num_iid
    ):
        """
        商品下架
        * 单个商品下架<br/>    * 输入的num_iid必须属于当前会话用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31

        :param num_iid: 商品数字ID，该参数必须
        """
        return self._top_request(
            "taobao.item.update.delisting",
            {
                "num_iid": num_iid
            },
            result_processor=lambda x: x["item"]
        )

    def taobao_item_update_listing(
            self,
            num_iid,
            num
    ):
        """
        一口价商品上架
        * 单个商品上架<br/>* 输入的num_iid必须属于当前会话用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32

        :param num_iid: 商品数字ID，该参数必须
        :param num: 需要上架的商品的数量。取值范围:大于零的整数。如果商品有sku，则上架数量默认为所有sku数量总和，不可修改。否则商品数量根据设置数量调整为num
        """
        return self._top_request(
            "taobao.item.update.listing",
            {
                "num_iid": num_iid,
                "num": num
            },
            result_processor=lambda x: x["item"]
        )

    def taobao_item_delete(
            self,
            num_iid
    ):
        """
        删除单条商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=112

        :param num_iid: 商品数字ID，该参数必须
        """
        return self._top_request(
            "taobao.item.delete",
            {
                "num_iid": num_iid
            },
            result_processor=lambda x: x["item"]
        )

    def taobao_item_joint_img(
            self,
            num_iid,
            pic_path,
            id='0',
            is_major='false',
            position='0',
            is_rectangle='false'
    ):
        """
        商品关联子图
        * 关联一张商品图片到num_iid指定的商品中<br/>    * 传入的num_iid所对应的商品必须属于当前会话的用户<br/>    * 商品图片关联在卖家身份和图片来源上的限制，卖家要是B卖家或订购了多图服务才能关联图片，并且图片要来自于卖家自己的图片空间才行<br/>    * 商品图片数量有限制。不管是上传的图片还是关联的图片，他们的总数不能超过一定限额
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=147

        :param num_iid: 商品数字ID，必选
        :param pic_path: 图片URL,图片空间图片的相对地址
        :param id: 商品图片id(如果是更新图片，则需要传该参数)
        :param is_major: 上传的图片是否关联为商品主图
        :param position: 图片序号
        :param is_rectangle: 是否3:4长方形图片，绑定3:4主图视频时用于上传3:4商品主图
        """
        return self._top_request(
            "taobao.item.joint.img",
            {
                "num_iid": num_iid,
                "pic_path": pic_path,
                "id": id,
                "is_major": is_major,
                "position": position,
                "is_rectangle": is_rectangle
            },
            result_processor=lambda x: x["item_img"]
        )

    def taobao_item_joint_propimg(
            self,
            properties,
            pic_path,
            num_iid,
            id='0',
            position='0'
    ):
        """
        商品关联属性图
        * 关联一张商品属性图片到num_iid指定的商品中<br/>    * 传入的num_iid所对应的商品必须属于当前会话的用户<br/>    * 图片的属性必须要是颜色的属性，这个在前台显示的时候需要和sku进行关联的<br/>    * 商品图片关联在卖家身份和图片来源上的限制，卖家要是B卖家或订购了多图服务才能关联图片，并且图片要来自于卖家自己的图片空间才行<br/>    * 商品图片数量有限制。不管是上传的图片还是关联的图片，他们的总数不能超过一定限额，最多不能超过24张（每个颜色属性都有一张）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=148

        :param properties: 属性列表。调用taobao.itemprops.get获取，属性必须是颜色属性，格式:pid:vid。
        :param pic_path: 图片地址(传入图片相对地址即可,即不需包含 http://img02.taobao.net/bao/uploaded )
        :param num_iid: 商品数字ID，必选
        :param id: 属性图片ID。如果是新增不需要填写
        :param position: 图片序号
        """
        return self._top_request(
            "taobao.item.joint.propimg",
            {
                "properties": properties,
                "pic_path": pic_path,
                "num_iid": num_iid,
                "id": id,
                "position": position
            },
            result_processor=lambda x: x["prop_img"]
        )

    def taobao_items_inventory_get(
            self,
            fields,
            q='',
            banner='',
            cid='',
            seller_cids='',
            page_no='1',
            page_size='40',
            has_discount='',
            order_by='list_time:desc',
            is_taobao='',
            is_ex='',
            start_modified='',
            end_modified='',
            auction_type=''
    ):
        """
        得到当前会话用户库存中的商品列表
        获取当前用户作为卖家的仓库中的商品列表，并能根据传入的搜索条件对仓库中的商品列表进行过滤
        只能获得商品的部分信息，商品的详细信息请通过taobao.item.seller.get获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=162

        :param fields: 需返回的字段列表。可选值为 Item 商品结构体中的以下字段：
                       approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru, list_time,price,has_discount,has_invoice,has_warranty,has_showcase, modified,delist_time,postage_id,seller_cids,outer_id；字段之间用“,”分隔。<br>
                       不支持其他字段，如果需要获取其他字段数据，调用taobao.item.seller.get。
        :param q: 搜索字段。搜索商品的title。
        :param banner: 分类字段。可选值:<br>
                       regular_shelved(定时上架)<br>
                       never_on_shelf(从未上架)<br>
                       off_shelf(我下架的)<br>
                       <font color='red'>for_shelved(等待所有上架)<br>
                       sold_out(全部卖完)<br>
                       violation_off_shelf(违规下架的)<br>
                       默认查询for_shelved(等待所有上架)这个状态的商品<br></font>
                       注：for_shelved(等待所有上架)=regular_shelved(定时上架)+never_on_shelf(从未上架)+off_shelf(我下架的)
        :param cid: 商品类目ID。ItemCat中的cid字段。可以通过taobao.itemcats.get取到
        :param seller_cids: 卖家店铺内自定义类目ID。多个之间用“,”分隔。可以根据taobao.sellercats.list.get获得.(<font color='red'>注：目前最多支持32个ID号传入</font>)
        :param page_no: 页码。取值范围:大于零小于等于101的整数;默认值为1，即返回第一页数据。当页码超过101页时系统就会报错，故请大家在用此接口获取数据时尽可能的细化自己的搜索条件，例如根据修改时间分段获取商品。
        :param page_size: 每页条数。取值范围:大于零的整数;最大值：200；默认值：40。
        :param has_discount: 是否参与会员折扣。可选值：true，false。默认不过滤该条件
        :param order_by: 排序方式。格式为column:asc/desc ，column可选值:list_time(上架时间),delist_time(下架时间),num(商品数量)，modified(最近修改时间);默认上架时间降序(即最新上架排在前面)。如按照上架时间降序排序方式为list_time:desc
        :param is_taobao: 商品是否在淘宝显示
        :param is_ex: 商品是否在外部网店显示
        :param start_modified: 商品起始修改时间
        :param end_modified: 商品结束修改时间
        :param auction_type: 商品类型：a-拍卖,b-一口价
        """
        return self._top_request(
            "taobao.items.inventory.get",
            {
                "fields": fields,
                "q": q,
                "banner": banner,
                "cid": cid,
                "seller_cids": seller_cids,
                "page_no": page_no,
                "page_size": page_size,
                "has_discount": has_discount,
                "order_by": order_by,
                "is_taobao": is_taobao,
                "is_ex": is_ex,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "auction_type": auction_type
            }
        )

    def taobao_items_custom_get(
            self,
            outer_id,
            fields
    ):
        """
        根据外部ID取商品
        跟据卖家设定的商品外部id获取商品 <br/>这个商品对应卖家从传入的session中获取，需要session绑定
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=163

        :param outer_id: 商品的外部商品ID，支持批量，最多不超过40个。
        :param fields: 需返回的字段列表，参考：Item商品结构体说明，其中barcode、sku.barcode等条形码字段暂不支持；多个字段之间用“,”分隔。
        """
        return self._top_request(
            "taobao.items.custom.get",
            {
                "outer_id": outer_id,
                "fields": fields
            },
            result_processor=lambda x: x["items"]
        )

    def taobao_skus_custom_get(
            self,
            outer_id,
            fields
    ):
        """
        根据外部ID取商品SKU
        跟据卖家设定的Sku的外部id获取商品，如果一个outer_id对应多个Sku会返回所有符合条件的sku <br/>这个Sku所属卖家从传入的session中获取，需要session绑定(注：iid标签里是num_iid的值，可以用作num_iid使用)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=164

        :param outer_id: Sku的外部商家ID
        :param fields: 需返回的字段列表。可选值：Sku结构体中的所有字段；字段之间用“,”隔开
        """
        return self._top_request(
            "taobao.skus.custom.get",
            {
                "outer_id": outer_id,
                "fields": fields
            },
            result_processor=lambda x: x["skus"]
        )

    def taobao_item_sku_delete(
            self,
            num_iid,
            properties,
            item_price='',
            item_num='',
            lang='zh_CN',
            ignorewarning=''
    ):
        """
        删除SKU
        删除一个sku的数据<br/>需要删除的sku通过属性properties进行匹配查找
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=314

        :param num_iid: Sku所属商品数字id，可通过 taobao.item.get 获取。必选
        :param properties: Sku属性串。格式:pid:vid;pid:vid,如: 1627207:3232483;1630696:3284570,表示机身颜色:军绿色;手机套餐:一电一充
        :param item_price: sku所属商品的价格。当用户删除sku，使商品价格不属于sku价格之间的时候，用于修改商品的价格，使sku能够删除成功
        :param item_num: sku所属商品的数量,大于0的整数。当用户删除sku，使商品数量不等于sku数量之和时候，用于修改商品的数量，使sku能够删除成功。特别是删除最后一个sku的时候，一定要设置商品数量到正常的值，否则删除失败
        :param lang: Sku文字的版本。可选值:zh_HK(繁体),zh_CN(简体);默认值:zh_CN
        :param ignorewarning: 忽略警告提示.
        """
        return self._top_request(
            "taobao.item.sku.delete",
            {
                "num_iid": num_iid,
                "properties": properties,
                "item_price": item_price,
                "item_num": item_num,
                "lang": lang,
                "ignorewarning": ignorewarning
            },
            result_processor=lambda x: x["sku"]
        )

    def taobao_aftersale_get(
            self
    ):
        """
        查询用户售后服务模板
        查询用户设置的售后服务模板，仅返回标题和id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10448

        """
        return self._top_request(
            "taobao.aftersale.get",
            result_processor=lambda x: x["after_sales"]
        )

    def taobao_item_quantity_update(
            self,
            num_iid,
            quantity,
            sku_id='',
            outer_id='',
            type='1'
    ):
        """
        宝贝/SKU库存修改
        提供按照全量或增量形式修改宝贝/SKU库存的功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10591

        :param num_iid: 商品数字ID，必填参数
        :param quantity: 库存修改值，必选。当全量更新库存时，quantity必须为大于等于0的正整数；当增量更新库存时，quantity为整数，可小于等于0。若增量更新时传入的库存为负数，则负数与实际库存之和不能小于0。比如当前实际库存为1，传入增量更新quantity=-1，库存改为0
        :param sku_id: 要操作的SKU的数字ID，可选。如果不填默认修改宝贝的库存，如果填上则修改该SKU的库存
        :param outer_id: SKU的商家编码，可选参数。如果不填则默认修改宝贝的库存，如果填了则按照商家编码搜索出对应的SKU并修改库存。当sku_id和本字段都填写时以sku_id为准搜索对应SKU
        :param type: 库存更新方式，可选。1为全量更新，2为增量更新。如果不填，默认为全量更新
        """
        return self._top_request(
            "taobao.item.quantity.update",
            {
                "num_iid": num_iid,
                "quantity": quantity,
                "sku_id": sku_id,
                "outer_id": outer_id,
                "type": type
            },
            result_processor=lambda x: x["item"]
        )

    def taobao_item_templates_get(
            self
    ):
        """
        获取用户宝贝详情页模板名称
        查询当前登录用户的店铺的宝贝详情页的模板名称
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10704

        """
        return self._top_request(
            "taobao.item.templates.get",
            result_processor=lambda x: x["item_template_list"]
        )

    def taobao_item_price_update(
            self,
            num_iid,
            location_state='',
            location_city='',
            cid='',
            props='',
            num='',
            price='',
            title='',
            desc='',
            post_fee='',
            express_fee='',
            ems_fee='',
            list_time='',
            increment='',
            image='',
            stuff_status='',
            auction_point='',
            property_alias='',
            seller_cids='',
            postage_id='',
            outer_id='',
            product_id='',
            pic_path='',
            auto_fill='',
            is_taobao='',
            is_ex='',
            is_3_d='',
            is_replace_sku='',
            lang='',
            has_discount='',
            has_showcase='',
            approve_status='',
            freight_payer='',
            valid_thru='',
            has_invoice='',
            has_warranty='',
            sell_promise='',
            cod_postage_id='',
            is_lightning_consignment='',
            weight='',
            is_xinpin='',
            sub_stock='0',
            ignorewarning='',
            input_pids='',
            sku_quantities='',
            sku_prices='',
            sku_properties='',
            sku_outer_ids='',
            input_str=''
    ):
        """
        更新商品价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10927

        :param num_iid: 商品数字ID，该参数必须
        :param location_state: 所在地省份。如浙江 具体可以下载http://dl.open.taobao.com/sdk/商品城市列表.rar 取到
        :param location_city: 所在地城市。如杭州 具体可以下载http://dl.open.taobao.com/sdk/商品城市列表.rar 取到
        :param cid: 叶子类目id
        :param props: 商品属性列表。格式:pid:vid;pid:vid。属性的pid调用taobao.itemprops.get取得，属性值的vid用taobao.itempropvalues.get取得vid。 如果该类目下面没有属性，可以不用填写。如果有属性，必选属性必填，其他非必选属性可以选择不填写.属性不能超过35对。所有属性加起来包括分割符不能超过549字节，单个属性没有限制。 如果有属性是可输入的话，则用字段input_str填入属性的值。
        :param num: 商品数量，取值范围:0-999999的整数。且需要等于Sku所有数量的和
        :param price: 商品价格。取值范围:0-100000000;精确到2位小数;单位:元。如:200.07，表示:200元7分。需要在正确的价格区间内。
        :param title: 宝贝标题. 不能超过60字符,受违禁词控制
        :param desc: 商品描述. 字数要大于5个字符，小于25000个字符 ，受违禁词控制
        :param post_fee: 平邮费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:5.07，表示:5元7分, 注:post_fee,express_fee,ems_fee需一起填写
        :param express_fee: 快递费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:15.07，表示:15元7分
        :param ems_fee: ems费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:25.07，表示:25元7分
        :param list_time: 上架时间。不论是更新架下的商品还是出售中的商品，如果这个字段小于当前时间则直接上架商品，并且上架的时间为更新商品的时间，此时item.is_timing为false，如果大于当前时间则宝贝会下架进入定时上架的宝贝中。
        :param increment: 加价幅度 如果为0，代表系统代理幅度
        :param image: 商品图片。类型:JPG,GIF;最大长度:500k
        :param stuff_status: 商品新旧程度。可选值:new（全新）,unused（闲置）,second（二手）。
        :param auction_point: 商品的积分返点比例。如：5 表示返点比例0.5%. 注意：返点比例必须是>0的整数，而且最大是90,即为9%.B商家在发布非虚拟商品时，返点必须是 5的倍数，即0.5%的倍数。其它是1的倍数，即0.1%的倍数。无名良品商家发布商品时，复用该字段记录积分宝返点比例，返点必须是对应类目的返点步长的整数倍，默认是5，即0.5%。注意此时该字段值依旧必须是>0的整数，注意此时该字段值依旧必须是>0的整数，最高值不超过500，即50%
        :param property_alias: 属性值别名。如pid:vid:别名;pid1:vid1:别名1， pid:属性id vid:值id。总长度不超过512字节
        :param seller_cids: 重新关联商品与店铺类目，结构:',cid1,cid2,...,'，如果店铺类目存在二级类目，必须传入子类目cids。
        :param postage_id: 宝贝所属的运费模板ID。取值范围：整数且必须是该卖家的运费模板的ID（可通过taobao.postages.get获得当前会话用户的所有邮费模板）
        :param outer_id: 商家编码
        :param product_id: 商品所属的产品ID(B商家发布商品需要用)
        :param pic_path: 商品主图需要关联的图片空间的相对url。这个url所对应的图片必须要属于当前用户。pic_path和image只需要传入一个,如果两个都传，默认选择pic_path
        :param auto_fill: 代充商品类型。只有少数类目下的商品可以标记上此字段，具体哪些类目可以上传可以通过taobao.itemcat.features.get获得。在代充商品的类目下，不传表示不标记商品类型（交易搜索中就不能通过标记搜到相关的交易了）。可选类型： <br/>no_mark(不做类型标记) <br/>time_card(点卡软件代充) <br/>fee_card(话费软件代充)
        :param is_taobao: 是否在淘宝上显示
        :param is_ex: 是否在外店显示
        :param is_3_d: 是否是3D
        :param is_replace_sku: 是否替换sku
        :param lang: 商品文字的版本，繁体传入”zh_HK”，简体传入”zh_CN”
        :param has_discount: 支持会员打折。可选值:true,false;
        :param has_showcase: 橱窗推荐。可选值:true,false;
        :param approve_status: 商品上传后的状态。可选值:onsale（出售中）,instock（库中），如果同时更新商品状态为出售中及list_time为将来的时间，则商品还是处于定时上架的状态, 此时item.is_timing为true
        :param freight_payer: 运费承担方式。运费承担方式。可选值:seller（卖家承担）,buyer(买家承担);
        :param valid_thru: 有效期。可选值:7,14;单位:天;
        :param has_invoice: 是否有发票。可选值:true,false (商城卖家此字段必须为true)
        :param has_warranty: 是否有保修。可选值:true,false;
        :param sell_promise: 是否承诺退换货服务!虚拟商品无须设置此项!
        :param cod_postage_id: 货到付款运费模板ID
        :param is_lightning_consignment: 实物闪电发货。注意：在售的闪电发货产品不允许取消闪电发货，需要先下架商品才能取消闪电发货标记
        :param weight: 商品的重量(商超卖家专用字段)
        :param is_xinpin: 商品是否为新品。只有在当前类目开通新品,并且当前用户拥有该类目下发布新品权限时才能设置is_xinpin为true，否则设置true后会返回错误码:isv.invalid-permission:xinpin。同时只有一口价全新的宝贝才能设置为新品，否则会返回错误码：isv.invalid-parameter:xinpin。不设置参数就保持原有值。
        :param sub_stock: 商品是否支持拍下减库存:1支持;2取消支持(付款减库存);0(默认)不更改 集市卖家默认拍下减库存; 商城卖家默认付款减库存
        :param ignorewarning: 忽略警告提示.
        :param input_pids: 用户自行输入的类目属性ID串，结构：'pid1,pid2,pid3'，如：'20000'（表示品牌） 注：通常一个类目下用户可输入的关键属性不超过1个。
        :param sku_quantities: 更新的Sku的数量串，结构如：num1,num2,num3 如:2,3,4
        :param sku_prices: 更新的Sku的价格串，结构如：10.00,5.00,… 精确到2位小数;单位:元。如:200.07，表示:200元7分
        :param sku_properties: 更新的Sku的属性串，调用taobao.itemprops.get获取类目属性，如果属性是销售属性，再用taobao.itempropvalues.get取得vid。格式:pid:vid;pid:vid。该字段内的销售属性也需要在props字段填写 。如果更新时有对Sku进行操作，则Sku的properties一定要传入。
        :param sku_outer_ids: Sku的外部id串，结构如：1234,1342,… sku_properties, sku_quantities, sku_prices, sku_outer_ids在输入数据时要一一对应，如果没有sku_outer_ids也要写上这个参数，入参是','(这个是两个sku的示列，逗号数应该是sku个数减1)；该参数最大长度是512个字节
        :param input_str: 用户自行输入的子属性名和属性值，结构:'父属性值;一级子属性名;一级子属性值;二级子属性名;自定义输入值,....',如：“耐克;耐克系列;科比系列;科比系列;2K5,Nike乔丹鞋;乔丹系列;乔丹鞋系列;乔丹鞋系列;json5”，多个自定义属性用','分割，input_str需要与input_pids一一对应，注：通常一个类目下用户可输入的关键属性不超过1个。所有属性别名加起来不能超过3999字节。此处不可以使用“其他”、“其它”和“其她”这三个词。
        """
        return self._top_request(
            "taobao.item.price.update",
            {
                "num_iid": num_iid,
                "location.state": location_state,
                "location.city": location_city,
                "cid": cid,
                "props": props,
                "num": num,
                "price": price,
                "title": title,
                "desc": desc,
                "post_fee": post_fee,
                "express_fee": express_fee,
                "ems_fee": ems_fee,
                "list_time": list_time,
                "increment": increment,
                "image": image,
                "stuff_status": stuff_status,
                "auction_point": auction_point,
                "property_alias": property_alias,
                "seller_cids": seller_cids,
                "postage_id": postage_id,
                "outer_id": outer_id,
                "product_id": product_id,
                "pic_path": pic_path,
                "auto_fill": auto_fill,
                "is_taobao": is_taobao,
                "is_ex": is_ex,
                "is_3D": is_3_d,
                "is_replace_sku": is_replace_sku,
                "lang": lang,
                "has_discount": has_discount,
                "has_showcase": has_showcase,
                "approve_status": approve_status,
                "freight_payer": freight_payer,
                "valid_thru": valid_thru,
                "has_invoice": has_invoice,
                "has_warranty": has_warranty,
                "sell_promise": sell_promise,
                "cod_postage_id": cod_postage_id,
                "is_lightning_consignment": is_lightning_consignment,
                "weight": weight,
                "is_xinpin": is_xinpin,
                "sub_stock": sub_stock,
                "ignorewarning": ignorewarning,
                "input_pids": input_pids,
                "sku_quantities": sku_quantities,
                "sku_prices": sku_prices,
                "sku_properties": sku_properties,
                "sku_outer_ids": sku_outer_ids,
                "input_str": input_str
            },
            result_processor=lambda x: x["item"]
        )

    def taobao_item_sku_price_update(
            self,
            num_iid,
            properties,
            quantity='',
            price='',
            outer_id='',
            item_price='',
            lang='zh_CN',
            ignorewarning=''
    ):
        """
        更新商品SKU的价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10928

        :param num_iid: Sku所属商品数字id，可通过 taobao.item.get 获取
        :param properties: Sku属性串。格式:pid:vid;pid:vid,如: 1627207:3232483;1630696:3284570,表示机身颜色:军绿色;手机套餐:一电一充
        :param quantity: Sku的库存数量。sku的总数量应该小于等于商品总数量(Item的NUM)，sku数量变化后item的总数量也会随着变化。取值范围:大于等于零的整数
        :param price: Sku的销售价格。精确到2位小数;单位:元。如:200.07，表示:200元7分。修改后的sku价格要保证商品的价格在所有sku价格所形成的价格区间内（例如：商品价格为6元，sku价格有5元、10元两种，如果要修改5元sku的价格，那么修改的范围只能是0-6元之间；如果要修改10元的sku，那么修改的范围只能是6到无穷大的区间中）
        :param outer_id: Sku的商家外部id
        :param item_price: sku所属商品的价格。当用户更新sku，使商品价格不属于sku价格之间的时候，用于修改商品的价格，使sku能够更新成功
        :param lang: Sku文字的版本。可选值:zh_HK(繁体),zh_CN(简体);默认值:zh_CN
        :param ignorewarning: 忽略警告提示.
        """
        return self._top_request(
            "taobao.item.sku.price.update",
            {
                "num_iid": num_iid,
                "properties": properties,
                "quantity": quantity,
                "price": price,
                "outer_id": outer_id,
                "item_price": item_price,
                "lang": lang,
                "ignorewarning": ignorewarning
            },
            result_processor=lambda x: x["sku"]
        )

    def taobao_ump_promotion_get(
            self,
            item_id
    ):
        """
        商品优惠详情查询
        商品优惠详情查询，可查询商品设置的详细优惠。包括限时折扣，满就送等官方优惠以及第三方优惠。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11039

        :param item_id: 商品id
        """
        return self._top_request(
            "taobao.ump.promotion.get",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["promotions"]
        )

    def taobao_skus_quantity_update(
            self,
            num_iid,
            type='1',
            skuid_quantities='',
            outerid_quantities=''
    ):
        """
        SKU库存修改
        提供按照全量/增量的方式批量修改SKU库存的功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21169

        :param num_iid: 商品数字ID，必填参数
        :param type: 库存更新方式，可选。1为全量更新，2为增量更新。如果不填，默认为全量更新。当选择全量更新时，如果库存更新值传入的是负数，会出错并返回错误码；当选择增量更新时，如果库存更新值为负数且绝对值大于当前库存，则sku库存会设置为0.
        :param skuid_quantities: sku库存批量修改入参，用于指定一批sku和每个sku的库存修改值，特殊可填。格式为skuId:库存修改值;skuId:库存修改值。最多支持20个SKU同时修改。
        :param outerid_quantities: 特殊可选，skuIdQuantities为空的时候用该字段通过outerId来指定sku和其库存修改值。格式为outerId:库存修改值;outerId:库存修改值。当skuIdQuantities不为空的时候该字段失效。当一个outerId对应多个sku时，所有匹配到的sku都会被修改库存。最多支持20个SKU同时修改。
        """
        return self._top_request(
            "taobao.skus.quantity.update",
            {
                "num_iid": num_iid,
                "type": type,
                "skuid_quantities": skuid_quantities,
                "outerid_quantities": outerid_quantities
            },
            result_processor=lambda x: x["item"]
        )

    def taobao_item_anchor_get(
            self,
            type,
            cat_id
    ):
        """
        获取可用宝贝描述规范化模块
        根据类目id和宝贝描述规范化打标类型获取该类目可用的宝贝描述模块中的锚点
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21433

        :param type: 宝贝模板类型是人工打标还是自动打标：人工打标为1，自动打标为0.人工和自动打标为-1.(最小值：-1，最大值：1)
        :param cat_id: 对应类目编号
        """
        return self._top_request(
            "taobao.item.anchor.get",
            {
                "type": type,
                "cat_id": cat_id
            }
        )

    def tmall_item_desc_modules_get(
            self,
            cat_id,
            usr_id
    ):
        """
        商品描述模块信息获取
        商品描述模块信息获取，包括运营设定的类目级别的模块信息以及用户自定义模块数量约束。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22171

        :param cat_id: 淘宝后台发布商品的叶子类目id，可通过taobao.itemcats.get查到。api 访问地址http://api.taobao.com/apidoc/api.htm?spm=0.0.0.0.CFhhk4&path=cid:3-apiId:122
        :param usr_id: 商家主帐号id
        """
        return self._top_request(
            "tmall.item.desc.modules.get",
            {
                "cat_id": cat_id,
                "usr_id": usr_id
            },
            result_processor=lambda x: x["modular_desc_info"]
        )

    def taobao_item_add_rules_get(
            self,
            category_id
    ):
        """
        商品发布规则信息获取接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        在新的发布模式下，isv需要先获取一份发布规则，然后根据规则传入数据。该接口提供规则查询功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22651

        :param category_id: 发布宝贝的叶子类目id
        """
        return self._top_request(
            "taobao.item.add.rules.get",
            {
                "category_id": category_id
            },
            result_processor=lambda x: x["add_rules"]
        )

    def taobao_item_barcode_update(
            self,
            item_id,
            item_barcode='',
            sku_ids='',
            sku_barcodes='',
            isforce='false',
            src=''
    ):
        """
        更新商品条形码信息
        通过该接口，将商品以及SKU上得条形码信息补全
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22894

        :param item_id: 被更新商品的ID
        :param item_barcode: 商品条形码，如果不用更新，可选择不填
        :param sku_ids: 被更新SKU的ID列表，中间以英文逗号进行分隔。如果没有SKU或者不需要更新SKU的条形码，不需要设置
        :param sku_barcodes: SKU维度的条形码，和sku_ids字段一一对应，中间以英文逗号分隔
        :param isforce: 是否强制保存商品条码。true：强制保存false ：需要执行条码库校验
        :param src: 访问来源，这字段提供给千牛扫码枪用，其他调用方，不需要填写
        """
        return self._top_request(
            "taobao.item.barcode.update",
            {
                "item_id": item_id,
                "item_barcode": item_barcode,
                "sku_ids": sku_ids,
                "sku_barcodes": sku_barcodes,
                "isforce": isforce,
                "src": src
            },
            result_processor=lambda x: x["item"]
        )

    def tmall_item_schema_add(
            self,
            category_id,
            product_id,
            xml_data
    ):
        """
        天猫根据规则发布商品
        天猫TopSchema发布商品。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23255

        :param category_id: 商品发布的目标类目，必须是叶子类目
        :param product_id: 发布商品的productId，如果tmall.product.match.schema.get获取到得字段为空，这个参数传入0，否则需要通过tmall.product.schema.match查询到得可用productId
        :param xml_data: 根据tmall.item.add.schema.get生成的商品发布规则入参数据
        """
        return self._top_request(
            "tmall.item.schema.add",
            {
                "category_id": category_id,
                "product_id": product_id,
                "xml_data": xml_data
            }
        )

    def tmall_item_add_schema_get(
            self,
            category_id,
            product_id,
            type='b',
            isv_init=''
    ):
        """
        天猫发布商品规则获取
        通过类目以及productId获取商品发布规则；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23256

        :param category_id: 商品发布的目标类目，必须是叶子类目
        :param product_id: 商品发布的目标product_id
        :param type: 发布商品类型，一口价填“b”，拍卖填'a'
        :param isv_init: 正常接口调用时，请忽略这个参数或者填FALSE。这个参数提供给ISV对接Schema时，如果想先获取了解所有字段和规则，可以将此字段设置为true，product_id也就不需要提供了，设置为0即可
        """
        return self._top_request(
            "tmall.item.add.schema.get",
            {
                "category_id": category_id,
                "product_id": product_id,
                "type": type,
                "isv_init": isv_init
            },
            result_processor=lambda x: x["add_item_result"]
        )

    def tmall_product_add_schema_get(
            self,
            category_id,
            brand_id=''
    ):
        """
        产品发布规则获取接口
        获取用户发布产品的规则
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23257

        :param category_id: 商品发布的目标类目，必须是叶子类目
        :param brand_id: 品牌ID
        """
        return self._top_request(
            "tmall.product.add.schema.get",
            {
                "category_id": category_id,
                "brand_id": brand_id
            },
            result_processor=lambda x: x["add_product_rule"]
        )

    def tmall_product_match_schema_get(
            self,
            category_id
    ):
        """
        获取匹配产品规则
        ISV发布商品前，需要先查找到产品ID，这个接口返回查找产品规则入参规则
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23258

        :param category_id: 商品发布的目标类目，必须是叶子类目
        """
        return self._top_request(
            "tmall.product.match.schema.get",
            {
                "category_id": category_id
            },
            result_processor=lambda x: x["match_result"]
        )

    def tmall_product_schema_match(
            self,
            category_id,
            propvalues
    ):
        """
        product匹配接口
        根据tmall.product.match.schema.get获取到的规则，填充相应地的字段值以及类目，匹配符合条件的产品，返回匹配product结果，注意，有可能返回多个产品ID，以逗号分隔（尤其是图书类目）；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23259

        :param category_id: 商品发布的目标类目，必须是叶子类目
        :param propvalues: 根据tmall.product.match.schema.get获取到的模板，ISV将需要的字段填充好相应的值结果XML。
        """
        return self._top_request(
            "tmall.product.schema.match",
            {
                "category_id": category_id,
                "propvalues": propvalues
            },
            result_processor=lambda x: x["match_result"]
        )

    def tmall_product_schema_add(
            self,
            category_id,
            xml_data,
            brand_id=''
    ):
        """
        使用Schema文件发布一个产品
        Schema体系发布一个产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23260

        :param category_id: 商品发布的目标类目，必须是叶子类目
        :param xml_data: 根据tmall.product.add.schema.get生成的产品发布规则入参数据
        :param brand_id: 品牌ID
        """
        return self._top_request(
            "tmall.product.schema.add",
            {
                "category_id": category_id,
                "xml_data": xml_data,
                "brand_id": brand_id
            },
            result_processor=lambda x: x["add_product_result"]
        )

    def taobao_item_update_schema_get(
            self,
            item_id,
            category_id='0'
    ):
        """
        商品编辑规则信息获取接口
        在新的编辑模式下，isv需要先获取一份编辑商品的规则和数据，然后根据规则传入数据。该接口提供编辑规则查询功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23265

        :param item_id: 商品id
        :param category_id: 商品类目id
        """
        return self._top_request(
            "taobao.item.update.schema.get",
            {
                "item_id": item_id,
                "category_id": category_id
            },
            result_processor=lambda x: x["update_rules"]
        )

    def taobao_item_add_schema_get(
            self,
            category_id
    ):
        """
        商品发布规则信息获取接口
        在新的发布模式下，isv需要先获取一份发布规则，然后根据规则传入数据。该接口提供规则查询功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23266

        :param category_id: 发布宝贝的叶子类目id
        """
        return self._top_request(
            "taobao.item.add.schema.get",
            {
                "category_id": category_id
            },
            result_processor=lambda x: x["add_rules"]
        )

    def taobao_item_schema_add(
            self,
            category_id,
            xml_data
    ):
        """
        基于xml格式的商品发布api
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        isv将宝贝信息，组装成特定格式的xml数据作为参数，进行发布商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23267

        :param category_id: 当前发布的叶子类目
        :param xml_data: 将需要发布的商品数据组装成的xml格式数据
        """
        return self._top_request(
            "taobao.item.schema.add",
            {
                "category_id": category_id,
                "xml_data": xml_data
            },
            result_processor=lambda x: x["add_result"]
        )

    def taobao_item_schema_update(
            self,
            item_id,
            xml_data,
            category_id='0',
            incremental='true'
    ):
        """
        新模式下的商品编辑接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        新模式下的商品编辑接口，在调用该接口的时候，需要先调用taobao.item.update.rules.get接口获取编辑规则和数据集。然后按照约定的参数传入规则，调用该接口进行编辑商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23268

        :param item_id: 编辑商品的商品id
        :param xml_data: 编辑商品时候的修改内容
        :param category_id: 如果重新选择类目后，传入重新选择的叶子类目id
        :param incremental: 是否增量更新。为true只改xml_data里传入的值。为false时，将根据xml_data的数据对原始宝贝数据进行全量覆盖,这个参数暂时不支持
        """
        return self._top_request(
            "taobao.item.schema.update",
            {
                "item_id": item_id,
                "xml_data": xml_data,
                "category_id": category_id,
                "incremental": incremental
            },
            result_processor=lambda x: x["update_result"]
        )

    def tmall_product_update_schema_get(
            self,
            product_id
    ):
        """
        产品更新规则获取接口
        获取用户更新产品的规则
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23432

        :param product_id: 产品编号
        """
        return self._top_request(
            "tmall.product.update.schema.get",
            {
                "product_id": product_id
            },
            result_processor=lambda x: x["update_product_schema"]
        )

    def tmall_product_schema_update(
            self,
            xml_data,
            product_id
    ):
        """
        产品更新接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23433

        :param xml_data: 根据tmall.product.update.schema.get生成的产品更新规则入参数据
        :param product_id: 产品编号
        """
        return self._top_request(
            "tmall.product.schema.update",
            {
                "xml_data": xml_data,
                "product_id": product_id
            },
            result_processor=lambda x: x["update_product_result"]
        )

    def tmall_item_schema_update(
            self,
            item_id,
            xml_data,
            category_id='',
            product_id=''
    ):
        """
        天猫根据规则编辑商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23434

        :param item_id: 需要编辑的商品ID
        :param xml_data: 根据tmall.item.update.schema.get生成的商品编辑规则入参数据
        :param category_id: 商品发布的目标类目，必须是叶子类目。如果没有切换类目需求不需要填写
        :param product_id: 商品发布的目标product_id。如果没有切换类目或者切换产品的需求，参数不用填写
        """
        return self._top_request(
            "tmall.item.schema.update",
            {
                "item_id": item_id,
                "xml_data": xml_data,
                "category_id": category_id,
                "product_id": product_id
            }
        )

    def tmall_item_update_schema_get(
            self,
            item_id,
            category_id='',
            product_id=''
    ):
        """
        天猫编辑商品规则获取
        Schema方式编辑天猫商品时，编辑商品规则获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23435

        :param item_id: 需要编辑的商品ID
        :param category_id: 商品发布的目标类目，必须是叶子类目。如果没有切换类目需求，不需要填写。
        :param product_id: 商品发布的目标product_id。如果没有切换产品的需求，参数可以不填写。
        """
        return self._top_request(
            "tmall.item.update.schema.get",
            {
                "item_id": item_id,
                "category_id": category_id,
                "product_id": product_id
            },
            result_processor=lambda x: x["update_item_result"]
        )

    def tmall_product_schema_get(
            self,
            product_id
    ):
        """
        产品信息获取schema获取
        产品信息获取接口schema形式返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23565

        :param product_id: 产品编号
        """
        return self._top_request(
            "tmall.product.schema.get",
            {
                "product_id": product_id
            },
            result_processor=lambda x: x["get_product_result"]
        )

    def tmall_item_increment_update_schema_get(
            self,
            item_id,
            xml_data=''
    ):
        """
        天猫增量更新商品规则获取
        增量方式修改天猫商品的规则获取的API。<br/>1.接口返回支持增量修改的字段以及相应字段的规则。<br/>2.如果入参xml_data指定了更新的字段，则只返回指定字段的规则（ISV如果功能性很强，如明确更新Title，请拼装好次字段以提升API整体性能）；<br/>3.ISV初次接入，开发阶段，此字段不填可以看到所有支持增量的字段；但是如果上线功能明确，请尽量遵守第2条<br/>4.如果ISV对字段规则非常清晰，可以直接组装入参数据提交到tmall.item.schema.increment.update进行数据更新。但是最好不要写死，比如每天还是有对此接口功能的一次比对。<br/>---（感谢爱慕旗舰店提供API命名）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23781

        :param item_id: 需要编辑的商品ID
        :param xml_data: 如果入参xml_data指定了更新的字段，则只返回指定字段的规则（ISV如果功能性很强，如明确更新Title，请拼装好此字段以提升API整体性能）
        """
        return self._top_request(
            "tmall.item.increment.update.schema.get",
            {
                "item_id": item_id,
                "xml_data": xml_data
            },
            result_processor=lambda x: x["update_item_result"]
        )

    def tmall_item_schema_increment_update(
            self,
            item_id,
            xml_data
    ):
        """
        天猫根据规则增量更新商品
        增量方式修改天猫商品的API。只要是此接口支持增量修改的字段，可以同时更新。（感谢爱慕旗舰店提供API命名）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23782

        :param item_id: 需要编辑的商品ID
        :param xml_data: 根据tmall.item.increment.update.schema.get生成的商品增量编辑规则入参数据。需要更新的字段，一定要在入参的XML重点update_fields字段中明确指明
        """
        return self._top_request(
            "tmall.item.schema.increment.update",
            {
                "item_id": item_id,
                "xml_data": xml_data
            }
        )

    def tmall_item_price_update(
            self,
            item_id,
            item_price='',
            sku_prices=None,
            options=None
    ):
        """
        天猫商品/SKU价格更新接口
        天猫商品/SKU价格更新接口，支持商品、SKU价格同时更新，支持同一商品下的SKU批量更新。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24249

        :param item_id: 商品ID
        :param item_price: 被更新商品价格
        :param sku_prices: 更新SKU价格时候的SKU价格对象；如果没有SKU或者不更新SKU价格，可以不填;查找SKU目前支持ID，属性串和商家编码三种模式，建议选用一种最合适的，切勿滥用，一次调用中如果混合使用，更新结果不可预期！
        :param options: 商品价格更新时候的可选参数
        """
        return self._top_request(
            "tmall.item.price.update",
            {
                "item_id": item_id,
                "item_price": item_price,
                "sku_prices": sku_prices,
                "options": options
            },
            result_processor=lambda x: x["price_update_result"]
        )

    def taobao_item_schema_increment_update(
            self,
            item_id,
            parameters,
            category_id='0'
    ):
        """
        集市schema增量编辑
        根据schema规则增量修改宝贝信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24269

        :param item_id: 商品id
        :param parameters: 修改字段
        :param category_id: 商品类目id
        """
        return self._top_request(
            "taobao.item.schema.increment.update",
            {
                "item_id": item_id,
                "parameters": parameters,
                "category_id": category_id
            },
            result_processor=lambda x: x["item_id"]
        )

    def taobao_item_increment_update_schema_get(
            self,
            item_id,
            category_id='0',
            update_fields='all'
    ):
        """
        获取增量更新规则
        获取增量更新规则，目前开发的字段有title, subTitle, description, wl_description
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24302

        :param item_id: 宝贝id
        :param category_id: 宝贝类目id
        :param update_fields: 修改字段
        """
        return self._top_request(
            "taobao.item.increment.update.schema.get",
            {
                "item_id": item_id,
                "category_id": category_id,
                "update_fields": update_fields
            },
            result_processor=lambda x: x["update_rules"]
        )

    def tmall_item_sizemapping_templates_list(
            self
    ):
        """
        获取天猫商品尺码表模板列表
        获取所有尺码表模板列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24327

        """
        return self._top_request(
            "tmall.item.sizemapping.templates.list",
            result_processor=lambda x: x["size_mapping_templates"]
        )

    def tmall_item_sizemapping_template_get(
            self,
            template_id
    ):
        """
        获取天猫商品尺码表模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24328

        :param template_id: 尺码表模板ID
        """
        return self._top_request(
            "tmall.item.sizemapping.template.get",
            {
                "template_id": template_id
            },
            result_processor=lambda x: x["size_mapping_template"]
        )

    def tmall_item_sizemapping_template_delete(
            self,
            template_id
    ):
        """
        删除天猫商品尺码表模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24329

        :param template_id: 尺码表模板ID
        """
        return self._top_request(
            "tmall.item.sizemapping.template.delete",
            {
                "template_id": template_id
            },
            result_processor=lambda x: x["template_id"]
        )

    def tmall_item_sizemapping_template_update(
            self,
            template_id,
            template_name,
            template_content
    ):
        """
        更新天猫商品尺码表模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24330

        :param template_id: 尺码表模板ID
        :param template_name: 尺码表模板名称
        :param template_content: 尺码表模板内容，格式为'尺码值:维度名称:数值,尺码值:维度名称:数值'。其中，数值的单位，长度单位为厘米（cm），体重单位为公斤（kg）。尺码值，维度数据不能包含数字，特殊字符。数值为0-999.9的数字，且最多一位小数。
        """
        return self._top_request(
            "tmall.item.sizemapping.template.update",
            {
                "template_id": template_id,
                "template_name": template_name,
                "template_content": template_content
            },
            result_processor=lambda x: x["size_mapping_template"]
        )

    def tmall_item_sizemapping_template_create(
            self,
            template_name,
            template_content
    ):
        """
        新增天猫商品尺码表模板
        新增天猫商品尺码表模板<br/><br/>男鞋、女鞋、运动鞋、户外鞋类目，尺码表维度为：<br/>脚长（cm） 必选<br/><br/>内衣-文胸类目，尺码表维度为：<br/>上胸围（cm） 必选<br/>下胸围（cm） 必选<br/>上下胸围差（cm） 必选<br/>身高（cm）<br/>体重（公斤）<br/><br/>内衣-内裤类目，尺码表维度为：<br/>腰围（cm） 必选<br/>臀围（cm） 必选<br/>身高（cm）<br/>体重（公斤）<br/>裤长（cm）<br/>裆部（cm）<br/>脚口（cm）<br/>腿围（cm）<br/><br/>内衣-睡衣上衣/保暖上衣/睡袍类目，尺码表维度为：<br/>身高（cm） 必选<br/>胸围（cm） 必选<br/>体重（公斤）<br/>腰围（cm）<br/>肩宽（cm）<br/>袖长（cm）<br/>衣长（cm）<br/>背宽（cm）<br/>前长（cm）<br/>下摆围（cm）<br/>袖口（cm）<br/>袖肥（cm）<br/>领口（cm）<br/><br/>内衣-睡裤/保暖裤类目，尺码维度为：<br/>身高（cm） 必选<br/>腰围（cm） 必选<br/>体重（公斤）<br/>臀围（cm）<br/>裆部（cm）<br/>裤长（cm）<br/>脚口（cm）<br/>腿围（cm）<br/>裤侧长（cm）<br/><br/>内衣-睡裙类目，尺码维度为：<br/>身高（cm） 必选<br/>胸围（cm） 必选<br/>体重（公斤）<br/>裙长（cm）<br/>腰围（cm）<br/>袖长（cm）<br/>肩宽（cm）<br/>背宽（cm）<br/>腿围（cm）<br/>臀围（cm）<br/>底摆（cm）<br/><br/>男装、女装、运动服、户外服等上装类目，尺码维度为（至少两项必选）：<br/>身高（cm）<br/>体重（公斤）<br/>肩宽（cm）<br/>胸围（cm）<br/>腰围（cm）<br/>袖长（cm）<br/>衣长（cm）<br/>背宽（cm）<br/>前长（cm）<br/>摆围（cm）<br/>下摆围（cm）<br/>袖口（cm）<br/>袖肥（cm）<br/>中腰（cm）<br/>领深（cm）<br/>领高（cm）<br/>领宽（cm）<br/>领围（cm）<br/>圆摆后中长（cm）<br/>平摆衣长（cm）<br/>圆摆衣长（cm）<br/><br/>男装、女装、运动服、户外服等下装类目，尺码维度为（至少两项必选）：<br/>身高（cm）<br/>体重（公斤）<br/>腰围（cm）<br/>臀围（cm）<br/>裤长（cm）<br/>裙长（cm）<br/>裙摆长（cm）<br/>腿围（cm）<br/>膝围（cm）<br/>小脚围（cm）<br/>拉伸腰围（cm）<br/>坐围（cm）<br/>拉伸坐围（cm）<br/>脚口（cm）<br/>前浪（cm）<br/>后浪（cm）<br/>横档（cm）<br/><br/>如果上述维度满足，可以自定义最多5个维度。<br/><br/>模板格式为：<br/>尺码值:维度名称:数值<br/>如：M:身高（cm）:160,L:身高（cm）:170
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24331

        :param template_name: 尺码表模板名称
        :param template_content: 尺码表模板内容，格式为'尺码值:维度名称:数值,尺码值:维度名称:数值'。其中，数值的单位，长度单位为厘米（cm），体重单位为公斤（kg）。尺码值，维度数据不能包含数字，特殊字符。数值为0-999.9的数字，且最多一位小数。
        """
        return self._top_request(
            "tmall.item.sizemapping.template.create",
            {
                "template_name": template_name,
                "template_content": template_content
            },
            result_processor=lambda x: x["size_mapping_template"]
        )

    def alibaba_wholesale_goods_get(
            self,
            country_code='',
            id=''
    ):
        """
        查询阿里巴巴批发市场商品详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24358

        :param country_code: country_code
        :param id: id
        """
        return self._top_request(
            "alibaba.wholesale.goods.get",
            {
                "country_code": country_code,
                "id": id
            },
            result_processor=lambda x: x["wholesale_goods_result"]
        )

    def alibaba_wholesale_goods_search(
            self,
            param_search_goods_option=None
    ):
        """
        批发市场产品搜索
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24366

        :param param_search_goods_option: SearchGoodsOption
        """
        return self._top_request(
            "alibaba.wholesale.goods.search",
            {
                "param_search_goods_option": param_search_goods_option
            },
            result_processor=lambda x: x["wholesale_goods_search_result"]
        )

    def taobao_item_seller_get(
            self,
            fields,
            num_iid
    ):
        """
        获取单个商品详细信息
        获取单个商品的全部信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24625

        :param fields: 需要返回的商品字段列表。可选值：Item商品结构体中所有字段均可返回，多个字段用“,”分隔。
        :param num_iid: 商品数字ID
        """
        return self._top_request(
            "taobao.item.seller.get",
            {
                "fields": fields,
                "num_iid": num_iid
            },
            result_processor=lambda x: x["item"]
        )

    def taobao_items_seller_list_get(
            self,
            fields,
            num_iids
    ):
        """
        批量获取商品详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24626

        :param fields: 需要返回的商品字段列表。可选值：点击返回结果中的Item结构体中能展示出来的所有字段，多个字段用“,”分隔。注：返回所有sku信息的字段名称是sku而不是skus。
        :param num_iids: 商品ID列表，多个ID用半角逗号隔开，一次最多不超过20个。注：获取不存在的商品ID或获取别人的商品都不会报错，但没有商品数据返回。
        """
        return self._top_request(
            "taobao.items.seller.list.get",
            {
                "fields": fields,
                "num_iids": num_iids
            },
            result_processor=lambda x: x["items"]
        )

    def tmall_item_outerid_update(
            self,
            item_id,
            outer_id='',
            sku_outers=None
    ):
        """
        天猫商品/SKU商家编码更新接口
        天猫商品/SKU商家编码更新接口；支持商品、SKU的商家编码同时更新；支持同一商品下的SKU批量更新。（感谢sample小雨提供接口命名）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25076

        :param item_id: 商品ID
        :param outer_id: 商品维度商家编码，如果不修改可以不传；清空请设置空串
        :param sku_outers: 商品SKU更新OuterId时候用的数据
        """
        return self._top_request(
            "tmall.item.outerid.update",
            {
                "item_id": item_id,
                "outer_id": outer_id,
                "sku_outers": sku_outers
            },
            result_processor=lambda x: x["outerid_update_result"]
        )

    def tmall_item_shiptime_update(
            self,
            item_id,
            option,
            ship_time='',
            sku_ship_times=None
    ):
        """
        更新商品发货时间
        增加更新删除商品/SKU发货时间(支持同一商品下的SKU同时批量更新)
        1.
        {
        'shipTimeType': 2,  ----相对发货时间（值为1则为绝对发货时间）
        'updateType': 0 ---更新SKU
        },
        按照指定SKU更新指定SKU的发货时间，如果原本是商品级发货时间，商品级发货时间也清空
        2.
        {
        'shipTimeType': 0, -- 删除发货时间
        'updateType': 0 --更新SKU
        },
        按照指定SKU删除指定SKU的发货时间
        3.
        {
        'shipTimeType': 2,  ----相对发货时间（值为1则为绝对发货时间）
        'updateType': 1 ---更新商品
        },
        更新商品级发货时间，如果原本是SKU级发货时间，清空所有SKU上的发货时间
        4.
        {
        'shipTimeType': 0, -- 删除发货时间
        'updateType': 1 --更新商品
        },
        删除商品级的发货时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25393

        :param item_id: 商品ID
        :param option: 批量更新商品/SKU发货时间的备选项
        :param ship_time: 被更新发货时间（商品级）；格式和具体设置的发货时间格式相关。绝对发货时间填写yyyy-MM-dd;相对发货时间填写数字。发货时间必须在当前时间后三天。如果设置的绝对时间小于当前时间的三天后，会清除该商品的发货时间设置。如果是相对时间小于3，则会提示出错。如果shiptimeType为0，要清除商品上的发货时间，该字段可以填任意字符,也可以不填。
        :param sku_ship_times: 被更新SKU的发货时间，后台会根据三个子属性去查找匹配的sku，如果找到就默认对sku进行更新，当无匹配sku且更新类型针对sku，会报错。
        """
        return self._top_request(
            "tmall.item.shiptime.update",
            {
                "item_id": item_id,
                "option": option,
                "ship_time": ship_time,
                "sku_ship_times": sku_ship_times
            }
        )

    def alibaba_wholesale_shippingline_template_init(
            self,
            initial_template=None
    ):
        """
        创建初始模板
        创建默认的几种运费模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25397

        :param initial_template: 创建初始运费模板参数
        """
        return self._top_request(
            "alibaba.wholesale.shippingline.template.init",
            {
                "initial_template": initial_template
            },
            result_processor=lambda x: x["init_template_response"]
        )

    def tmall_item_simpleschema_add(
            self,
            schema_xml_fields
    ):
        """
        天猫简化发布商品
        天猫简化版schema发布商品。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25455

        :param schema_xml_fields: 根据tmall.item.add.simpleschema.get生成的商品发布规则入参数据
        """
        return self._top_request(
            "tmall.item.simpleschema.add",
            {
                "schema_xml_fields": schema_xml_fields
            }
        )

    def tmall_item_add_simpleschema_get(
            self
    ):
        """
        天猫发布商品规则获取
        通过商家信息获取商品发布字段和规则。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25456

        """
        return self._top_request(
            "tmall.item.add.simpleschema.get"
        )

    def taobao_item_qualification_display_get(
            self,
            param='',
            item_id='',
            category_id=''
    ):
        """
        资质采集配置异步获取接口
        根据类目，商品，属性等参与动态获得资质采集配置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25726

        :param param: 参数列表，为key和value都是string的map的转化的json格式
        :param item_id: 商品id
        :param category_id: 类目id
        """
        return self._top_request(
            "taobao.item.qualification.display.get",
            {
                "param": param,
                "item_id": item_id,
                "category_id": category_id
            },
            result_processor=lambda x: x["display_conf"]
        )

    def tmall_item_simpleschema_update(
            self,
            item_id,
            schema_xml_fields
    ):
        """
        天猫简化编辑商品
        国外大商家天猫简化编辑商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26072

        :param item_id: 商品id
        :param schema_xml_fields: 编辑商品时提交的xml信息
        """
        return self._top_request(
            "tmall.item.simpleschema.update",
            {
                "item_id": item_id,
                "schema_xml_fields": schema_xml_fields
            }
        )

    def tmall_item_quantity_update(
            self,
            item_id,
            sku_quantities=None,
            options=None,
            item_quantity=''
    ):
        """
        天猫商品/SKU库存更新接口
        天猫商品/SKU库存更新接口；支持商品库存更新；支持同一商品下的SKU批量更新。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26178

        :param item_id: 商品id
        :param sku_quantities: 更新SKU库存时候的SKU库存对象；如果没有SKU或者不更新SKU库存，可以不填;查找SKU目前支持ID，属性串和商家编码三种模式，建议选用一种最合适的，切勿滥用，一次调用中如果混合使用，更新结果不可预期！
        :param options: 商品库存更新时候的可选参数
        :param item_quantity: 商品库存数；增量编辑方式支持正数、负数
        """
        return self._top_request(
            "tmall.item.quantity.update",
            {
                "item_id": item_id,
                "sku_quantities": sku_quantities,
                "options": options,
                "item_quantity": item_quantity
            },
            result_processor=lambda x: x["quantity_update_result"]
        )

    def tmall_item_update_simpleschema_get(
            self,
            item_id='0'
    ):
        """
        官网同购编辑商品的get接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26232

        :param item_id: 商品id
        """
        return self._top_request(
            "tmall.item.update.simpleschema.get",
            {
                "item_id": item_id
            }
        )

    def tmall_item_calculate_hscode_get(
            self,
            item_id=''
    ):
        """
        算法获取hscode
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26569

        :param item_id: 商品id
        """
        return self._top_request(
            "tmall.item.calculate.hscode.get",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["results"]
        )

    def tmall_item_combine_get(
            self,
            item_id=''
    ):
        """
        组合商品获取接口
        查询组合商品的SKU信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27227

        :param item_id: 组合商品ID
        """
        return self._top_request(
            "tmall.item.combine.get",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["results"]
        )

    def tmall_item_zhizu_shoes_size_upload(
            self,
            item_id,
            type,
            size_mapping
    ):
        """
        知足鞋品数据上传接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        天猫尺码拍照导购需要提供给北京知足公司上传测鞋数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27340

        :param item_id: 天猫商品ID
        :param type: 知足鞋类型
        :param size_mapping: 天猫尺码和知足码映射
        """
        return self._top_request(
            "tmall.item.zhizu.shoes.size.upload",
            {
                "item_id": item_id,
                "type": type,
                "size_mapping": size_mapping
            }
        )

    def tmall_item_dapei_template_query(
            self,
            title='',
            page_index='1',
            page_size='10000'
    ):
        """
        搭配查询接口
        根据条件获取搭配内容
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27341

        :param title: 搭配标题
        :param page_index: 页码
        :param page_size: 分页大小
        """
        return self._top_request(
            "tmall.item.dapei.template.query",
            {
                "title": title,
                "page_index": page_index,
                "page_size": page_size
            }
        )

    def taobao_baike_import_zhubao_picture(
            self,
            picture
    ):
        """
        百科图片数据导入
        用于接入外部--图片--录入到商品百科中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30112

        :param picture: 图片二进制数据
        """
        return self._top_request(
            "taobao.baike.import.zhubao.picture",
            {
                "picture": picture
            }
        )

    def taobao_baike_import_zhubao_data(
            self,
            data_json_str
    ):
        """
        导入数据到商品百科服务
        用于接入外部数据录入到商品百科中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30113

        :param data_json_str: 约定的Json数据
        """
        return self._top_request(
            "taobao.baike.import.zhubao.data",
            {
                "data_json_str": data_json_str
            }
        )

    def tmall_item_hscode_detail_get(
            self,
            hscode
    ):
        """
        通过hscode获取计量单位
        通过hscode获取计量单位和销售单位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30672

        :param hscode: hscode
        """
        return self._top_request(
            "tmall.item.hscode.detail.get",
            {
                "hscode": hscode
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_baike_permission_zhubao_disable(
            self,
            user_app_secret='',
            topic_name=''
    ):
        """
        百科开发平台录入权限控制
        用于外部数据删除数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30777

        :param user_app_secret: 权限密码
        :param topic_name: 词条主键名称
        """
        return self._top_request(
            "taobao.baike.permission.zhubao.disable",
            {
                "user_app_secret": user_app_secret,
                "topic_name": topic_name
            }
        )

    def taobao_baike_permission_zhubao_enable(
            self,
            user_app_secret='',
            user_topic_name=''
    ):
        """
        珠宝权限删除恢复接口
        阿里巴巴商品百科开放数据删除恢复服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30778

        :param user_app_secret: 权限密码
        :param user_topic_name: 词条主键名称
        """
        return self._top_request(
            "taobao.baike.permission.zhubao.enable",
            {
                "user_app_secret": user_app_secret,
                "user_topic_name": user_topic_name
            }
        )

    def tmall_item_edu_update_outline(
            self,
            item_id,
            outline_info
    ):
        """
        教育联盟商家上传课程大纲api
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31082

        :param item_id: 宝贝Id
        :param outline_info: 课程大纲json
        """
        return self._top_request(
            "tmall.item.edu.update.outline",
            {
                "item_id": item_id,
                "outline_info": outline_info
            }
        )

    def alibaba_interact_item_query(
            self,
            store_code,
            item_id,
            include_lbs='false',
            include_sku='false',
            include_service='false'
    ):
        """
        查询单个门店商品
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31480

        :param store_code: 门店编码
        :param item_id: 商品Id
        :param include_lbs: 是否包含位置信息
        :param include_sku: 是否包含Sku信息
        :param include_service: 是否包含服务信息
        """
        return self._top_request(
            "alibaba.interact.item.query",
            {
                "store_code": store_code,
                "item_id": item_id,
                "include_lbs": include_lbs,
                "include_sku": include_sku,
                "include_service": include_service
            }
        )

    def alibaba_interact_item_search(
            self,
            param0,
            param1=None,
            include_lbs='false',
            include_sku='false',
            include_service='false'
    ):
        """
        门店商品搜索接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31498

        :param param0: 门店编码
        :param param1: 查询参数
        :param include_lbs: 是否包含lbs
        :param include_sku: 是否包含sku信息
        :param include_service: 是否包含服务信息
        """
        return self._top_request(
            "alibaba.interact.item.search",
            {
                "param0": param0,
                "param1": param1,
                "include_lbs": include_lbs,
                "include_sku": include_sku,
                "include_service": include_service
            }
        )

    def alibaba_gpu_add_schema_get(
            self,
            leaf_cat_id,
            provider_id,
            brand_id=''
    ):
        """
        获取产品发布规则接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38593

        :param leaf_cat_id: 叶子类目ID
        :param provider_id: 当前用户所在渠道如0代表天猫，8代表淘宝
        :param brand_id: 品牌ID
        """
        return self._top_request(
            "alibaba.gpu.add.schema.get",
            {
                "leaf_cat_id": leaf_cat_id,
                "provider_id": provider_id,
                "brand_id": brand_id
            },
            result_processor=lambda x: x["add_product_rule"]
        )

    def alibaba_gpu_schema_add(
            self,
            leaf_cat_id,
            schema_xml_fields,
            provider_id,
            brand_id=''
    ):
        """
        使用schema文件发布产品
        使用Schema文件发布一个产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38595

        :param leaf_cat_id: 叶子类目ID
        :param schema_xml_fields: 根据alibaba.gpu.add.schema.get获取的规则提交上来的schema
        :param provider_id: 当前用户所在渠道如0代表天猫，8代表淘宝
        :param brand_id: 品牌ID
        """
        return self._top_request(
            "alibaba.gpu.schema.add",
            {
                "leaf_cat_id": leaf_cat_id,
                "schema_xml_fields": schema_xml_fields,
                "provider_id": provider_id,
                "brand_id": brand_id
            },
            result_processor=lambda x: x["add_product_result"]
        )

    def alibaba_gpu_update_schema_get(
            self,
            product_id,
            provider_id
    ):
        """
        获取产品编辑schema规则的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38596

        :param product_id: 产品ID
        :param provider_id: 当前用户所在渠道如0代表天猫，8代表淘宝
        """
        return self._top_request(
            "alibaba.gpu.update.schema.get",
            {
                "product_id": product_id,
                "provider_id": provider_id
            },
            result_processor=lambda x: x["update_product_rule"]
        )

    def alibaba_gpu_schema_update(
            self,
            product_id,
            schema_xml_fields,
            provider_id
    ):
        """
        产品更新接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38597

        :param product_id: 产品ID
        :param schema_xml_fields: 更新产品提交的schema数据
        :param provider_id: 当前用户所在渠道如0代表天猫，8代表淘宝
        """
        return self._top_request(
            "alibaba.gpu.schema.update",
            {
                "product_id": product_id,
                "schema_xml_fields": schema_xml_fields,
                "provider_id": provider_id
            },
            result_processor=lambda x: x["update_product_result"]
        )

    def alibaba_gpu_schema_catsearch(
            self,
            leaf_cat_id,
            current_page,
            page_size,
            provider_id
    ):
        """
        按类目查询spu接口
        按类目查询spu的schema接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38598

        :param leaf_cat_id: 叶子类目ID
        :param current_page: 当前页
        :param page_size: 每页大小
        :param provider_id: 渠道Id，如0代表天猫，8代表淘宝
        """
        return self._top_request(
            "alibaba.gpu.schema.catsearch",
            {
                "leaf_cat_id": leaf_cat_id,
                "current_page": current_page,
                "page_size": page_size,
                "provider_id": provider_id
            }
        )

    def taobao_isp_pos_vendor_feedback(
            self,
            source,
            action,
            device_code,
            op_time,
            province,
            province_code,
            city,
            city_code,
            district,
            district_code,
            latitude,
            longitude,
            user_nick,
            address='',
            item_id='',
            item_name='',
            category='',
            properties='',
            item_quantity='',
            coupon_id='',
            div_pay_amt='',
            total_pay_amt='',
            trade_no='',
            trade_type='',
            user_mobile='',
            out_user='',
            out_biz_id=''
    ):
        """
        新零售线下售货机POS数据回流
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        新零售行业线下售货机商品数据回流，提供给相关线下售卖机终端ISV，将商品的POS信息回流，包括但不限于事件、用户昵称、商品信息、购买量、消费金额等。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39455

        :param source: 行业数据来源，需要与指定业务对接人授权注册。天猫无人售货机:TMALL_VENDOR;天猫游戏桌面:TMALL_BOX
        :param action: 'ACTION枚举值： ITEM_CLICK（商品点击时必须设置ITEM_ID） BUY_CLICK（点击购买） VENDING_MACHINE_SHIPMENT（售货机出货时TRADE_TYPE、TRADE_NO要设置） RECEIVE_COUPONS（领取优惠券时必须设置COUPON_ID） SHARE_CLICK（内容分享）'
        :param device_code: 设备硬件CODE
        :param op_time: 用户操作时间
        :param province: 省名称
        :param province_code: 省代码
        :param city: 设备所在城市名称
        :param city_code: 城市代码
        :param district: 行政区名称
        :param district_code: 行政区代码
        :param latitude: 设备地理位置纬度（采用火星坐标系）
        :param longitude: 设备地理位置经度（采用火星坐标系）
        :param user_nick: 用户淘宝昵称
        :param address: 设备的详细地址信息
        :param item_id: 商品id
        :param item_name: 商品名称
        :param category: 商品所属类目
        :param properties: 商品属性信息，(格式：属性名:属性值),多个属性间用分号分隔
        :param item_quantity: 商品购买数量
        :param coupon_id: '例如官方领取优惠券链接里的activityId： https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=2649119619&activityId=9d390579777e41a981b54aa4d6154f5e'
        :param div_pay_amt: 商品购买金额
        :param total_pay_amt: 订单支付总额（一个订单内的多个商品总消费金额）
        :param trade_no: 订单编号
        :param trade_type: 'trade_type枚举值： alipay_trade（支付宝订单类型，对应的trade_no设置支付宝订单号） tmall_trade（天猫/淘宝订单类型，对应的trade_no设置天猫/淘宝订单号）'
        :param user_mobile: 用户手机号码
        :param out_user: 外部设备识别用户标识
        :param out_biz_id: 数据外部编码，保证数据唯一性
        """
        return self._top_request(
            "taobao.isp.pos.vendor.feedback",
            {
                "source": source,
                "action": action,
                "device_code": device_code,
                "op_time": op_time,
                "province": province,
                "province_code": province_code,
                "city": city,
                "city_code": city_code,
                "district": district,
                "district_code": district_code,
                "latitude": latitude,
                "longitude": longitude,
                "user_nick": user_nick,
                "address": address,
                "item_id": item_id,
                "item_name": item_name,
                "category": category,
                "properties": properties,
                "item_quantity": item_quantity,
                "coupon_id": coupon_id,
                "div_pay_amt": div_pay_amt,
                "total_pay_amt": total_pay_amt,
                "trade_no": trade_no,
                "trade_type": trade_type,
                "user_mobile": user_mobile,
                "out_user": out_user,
                "out_biz_id": out_biz_id
            }
        )

    def taobao_item_carturl_get(
            self,
            item_ids,
            callback_url='',
            user_nick='',
            user_id='',
            ext_params=''
    ):
        """
        加购URL获取
        获取加购URL，支持添加商品到购物车
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40701

        :param item_ids: 商品信息，格式为 商品ID_SKU ID_数量，多条记录以逗号(,)分割
        :param callback_url: 回调地址，需要是EWS域名地址。可不填，默认到购物车页面
        :param user_nick: 商家Nick，优先使用user_id
        :param user_id: 商家ID
        :param ext_params: 扩展属性，关注店铺的时候会传递下去，格式为K:V|K:V格式
        """
        return self._top_request(
            "taobao.item.carturl.get",
            {
                "item_ids": item_ids,
                "callback_url": callback_url,
                "user_nick": user_nick,
                "user_id": user_id,
                "ext_params": ext_params
            }
        )


class TbJiaoYi(DingTalkBaseAPI):
    """
    交易API
    """

    def taobao_trades_sold_get(
            self,
            fields,
            start_created='',
            end_created='',
            status='',
            buyer_nick='',
            type='',
            ext_type='',
            rate_status='',
            tag='',
            page_no='1',
            page_size='40',
            use_has_next='false',
            buyer_open_id=''
    ):
        """
        查询卖家已卖出的交易数据（根据创建时间）
        搜索当前会话用户作为卖家已卖出的交易数据（只能获取到三个月以内的交易信息）<br/><br/>1. 返回的数据结果是以订单的创建时间倒序排列的。<br/><br/>2. 返回的数据结果只包含了订单的部分数据，可通过taobao.trade.fullinfo.get获取订单详情。<br/><br/> <span style='color:red'>注意：type字段的说明，如果该字段不传，接口默认只查4种类型订单，非默认查询的订单是不返回。遇到订单查不到的情况的，通常都是这个原因造成。解决办法就是type加上订单类型就可正常返回了。用taobao.trade.fullinfo.get 查订单fields返回type 很容易的能知道订单的类型（type）</span>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=46

        :param fields: 需要返回的字段列表，多个字段用半角逗号分隔，可选值为返回示例中能看到的所有字段。rx_audit_status=0,处方药未审核
        :param start_created: 查询三个月内交易创建时间开始。格式:yyyy-MM-dd HH:mm:ss
        :param end_created: 查询交易创建时间结束。格式:yyyy-MM-dd HH:mm:ss
        :param status: 交易状态（<a href='http://open.taobao.com/doc/detail.htm?id=102856' target='_blank'>查看可选值</a>），默认查询所有交易状态的数据，除了默认值外每次只能查询一种状态。
        :param buyer_nick: 买家昵称
        :param type: 交易类型列表，同时查询多种交易类型可用逗号分隔。<span style='color:red;font-weight: bold;'>默认同时查询guarantee_trade,auto_delivery,ec,cod,step 这5 种的交易类型的数据；查询所有交易类型的数据，需要设置下面全部可选值。</span>可选值：fixed(一口价)auction(拍卖)guarantee_trade(一口价、拍卖)step(分阶段付款，万人团，阶梯团订单）independent_simple_trade(旺店入门版交易)independent_shop_trade(旺店标准版交易)auto_delivery(自动发货)ec(直冲)cod(货到付款)game_equipment(游戏装备)shopex_trade(ShopEX交易)netcn_trade(万网交易)external_trade(统一外部交易)instant_trade (即时到账)b2c_cod(大商家货到付款)hotel_trade(酒店类型交易)super_market_trade(商超交易)super_market_cod_trade(商超货到付款交易)taohua(淘花网交易类型）waimai(外卖交易类型）o2o_offlinetrade（O2O交易）nopaid（即时到帐/趣味猜交易类型）step (万人团) eticket(电子凭证) tmall_i18n（天猫国际）;nopaid （无付款交易）insurance_plus（保险）finance（基金）注：guarantee_trade是一个组合查询条件，并不是一种交易类型，获取批量或单个订单中不会返回此种类型的订单。pre_auth_type(预授权0元购) lazada（获取lazada订单类型）
        :param ext_type: 可选值有ershou(二手市场的订单）,service（商城服务子订单）mark（双十一大促活动异常订单）作为扩展类型筛选只能做单个ext_type查询，不能全部查询所有的ext_type类型
        :param rate_status: 评价状态，默认查询所有评价状态的数据，除了默认值外每次只能查询一种状态。<br>可选值：RATE_UNBUYER(买家未评)RATE_UNSELLER(卖家未评)RATE_BUYER_UNSELLER(买家已评，卖家未评)RATE_UNBUYER_SELLER(买家未评，卖家已评)RATE_BUYER_SELLER(买家已评,卖家已评)
        :param tag: 卖家对交易的自定义分组标签，目前可选值为：time_card（点卡软件代充），fee_card（话费软件代充）
        :param page_no: 页码。取值范围:大于零的整数; 默认值:1
        :param page_size: 每页条数。取值范围:大于零的整数; 默认值:40;最大值:100
        :param use_has_next: 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，通过此种方式获取增量交易，接口调用成功率在原有的基础上有所提升。
        :param buyer_open_id: 买家的openId
        """
        return self._top_request(
            "taobao.trades.sold.get",
            {
                "fields": fields,
                "start_created": start_created,
                "end_created": end_created,
                "status": status,
                "buyer_nick": buyer_nick,
                "type": type,
                "ext_type": ext_type,
                "rate_status": rate_status,
                "tag": tag,
                "page_no": page_no,
                "page_size": page_size,
                "use_has_next": use_has_next,
                "buyer_open_id": buyer_open_id
            }
        )

    def taobao_trade_get(
            self,
            fields,
            tid
    ):
        """
        获取单笔交易的部分信息(性能高)
        获取单笔交易的部分信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=47

        :param fields: 需要返回的字段列表，多个字段用半角逗号分隔，可选值为返回示例中能看到的所有字段。
        :param tid: 交易编号
        """
        return self._top_request(
            "taobao.trade.get",
            {
                "fields": fields,
                "tid": tid
            },
            result_processor=lambda x: x["trade"]
        )

    def taobao_trade_memo_add(
            self,
            tid,
            memo,
            flag='0'
    ):
        """
        对一笔交易添加备注
        根据登录用户的身份（买家或卖家），自动添加相应的交易备注,不能重复调用些接口添加备注，需要更新备注请用taobao.trade.memo.update
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=48

        :param tid: 交易编号
        :param memo: 交易备注。最大长度: 1000个字节
        :param flag: 交易备注旗帜，可选值为：0(灰色), 1(红色), 2(黄色), 3(绿色), 4(蓝色), 5(粉红色)，默认值为0
        """
        return self._top_request(
            "taobao.trade.memo.add",
            {
                "tid": tid,
                "memo": memo,
                "flag": flag
            },
            result_processor=lambda x: x["trade"]
        )

    def taobao_trade_memo_update(
            self,
            tid,
            memo='',
            flag='',
            reset='false'
    ):
        """
        修改交易备注
        需要商家或以上权限才可调用此接口，可重复调用本接口更新交易备注，本接口同时具有添加备注的功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=49

        :param tid: 交易编号
        :param memo: 卖家交易备注。最大长度: 1000个字节
        :param flag: 卖家交易备注旗帜，可选值为：0(灰色), 1(红色), 2(黄色), 3(绿色), 4(蓝色), 5(粉红色)，默认值为0
        :param reset: 是否对memo的值置空若为true，则不管传入的memo字段的值是否为空，都将会对已有的memo值清空，慎用；若用false，则会根据memo是否为空来修改memo的值：若memo为空则忽略对已有memo字段的修改，若memo非空，则使用新传入的memo覆盖已有的memo的值
        """
        return self._top_request(
            "taobao.trade.memo.update",
            {
                "tid": tid,
                "memo": memo,
                "flag": flag,
                "reset": reset
            },
            result_processor=lambda x: x["trade"]
        )

    def taobao_refunds_receive_get(
            self,
            fields,
            status='',
            buyer_nick='',
            type='',
            start_modified='',
            end_modified='',
            page_no='1',
            page_size='40',
            use_has_next='false'
    ):
        """
        查询卖家收到的退款列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=52

        :param fields: 需要返回的字段。目前支持有：refund_id, tid, title, buyer_nick, seller_nick, total_fee, status, created, refund_fee, oid, good_status, company_name, sid, payment, reason, desc, has_good_return, modified, order_status,refund_phase
        :param status: 退款状态，默认查询所有退款状态的数据，除了默认值外每次只能查询一种状态。WAIT_SELLER_AGREE(买家已经申请退款，等待卖家同意) WAIT_BUYER_RETURN_GOODS(卖家已经同意退款，等待买家退货) WAIT_SELLER_CONFIRM_GOODS(买家已经退货，等待卖家确认收货) SELLER_REFUSE_BUYER(卖家拒绝退款) CLOSED(退款关闭) SUCCESS(退款成功)
        :param buyer_nick: 买家昵称
        :param type: 交易类型列表，一次查询多种类型可用半角逗号分隔，默认同时查询guarantee_trade, auto_delivery这两种类型的数据，<a href='http://open.taobao.com/doc/detail.htm?id=102855' target='_blank'>查看可选值</a>
        :param start_modified: 查询修改时间开始。格式: yyyy-MM-dd HH:mm:ss
        :param end_modified: 查询修改时间结束。格式: yyyy-MM-dd HH:mm:ss
        :param page_no: 页码。取值范围:大于零的整数; 默认值:1
        :param page_size: 每页条数。取值范围:大于零的整数; 默认值:40;最大值:100
        :param use_has_next: 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，通过此种方式获取增量退款，接口调用成功率在原有的基础上有所提升。
        """
        return self._top_request(
            "taobao.refunds.receive.get",
            {
                "fields": fields,
                "status": status,
                "buyer_nick": buyer_nick,
                "type": type,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "page_no": page_no,
                "page_size": page_size,
                "use_has_next": use_has_next
            }
        )

    def taobao_trade_fullinfo_get(
            self,
            fields,
            tid
    ):
        """
        获取单笔交易的详细信息
        <br/>1. 只有在交易成功的状态下才能取到交易佣金，其它状态下取到的都是零或空值
        <br/>2. 只有单笔订单的情况下Trade数据结构中才包含商品相关的信息
        <br/>3. 获取到的Order中的payment字段在单笔子订单时包含物流费用，多笔子订单时不包含物流费用
        <br/>4. 获取红包优惠金额可以使用字段 coupon_fee
        <br/>5. 请按需获取字段，减少TOP系统的压力
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=54

        :param fields: 需要返回的字段列表，多个字段用半角逗号分隔，可选值为返回示例中能看到的所有字段。
        :param tid: 交易编号
        """
        return self._top_request(
            "taobao.trade.fullinfo.get",
            {
                "fields": fields,
                "tid": tid
            },
            result_processor=lambda x: x["trade"]
        )

    def taobao_trade_close(
            self,
            tid,
            close_reason
    ):
        """
        卖家关闭一笔交易
        关闭一笔订单，可以是主订单或子订单。当订单从创建到关闭时间小于10s的时候，会报“CLOSE_TRADE_TOO_FAST”错误。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=83

        :param tid: 主订单或子订单编号。
        :param close_reason: 交易关闭原因。可以选择的理由有：1.未及时付款2、买家不想买了3、买家信息填写错误，重新拍4、恶意买家/同行捣乱5、缺货6、买家拍错了7、同城见面交易
        """
        return self._top_request(
            "taobao.trade.close",
            {
                "tid": tid,
                "close_reason": close_reason
            },
            result_processor=lambda x: x["trade"]
        )

    def taobao_trades_sold_increment_get(
            self,
            fields,
            start_modified,
            end_modified,
            status='',
            type='',
            buyer_nick='',
            ext_type='',
            tag='',
            page_no='1',
            page_size='40',
            use_has_next='false'
    ):
        """
        查询卖家已卖出的增量交易数据（根据修改时间）
        搜索当前会话用户作为卖家已卖出的增量交易数据（只能获取到三个月以内的交易信息）<br/><br/>1. 一次请求只能查询时间跨度为一天的增量交易记录，即end_modified - start_modified <= 1天。<br/><br/>2. 返回的数据结果是以订单的修改时间倒序排列的，通过从后往前翻页的方式可以避免漏单问题。<br/><br/>3. 返回的数据结果只包含了订单的部分数据，可通过taobao.trade.fullinfo.get获取订单详情。<br/><br/>4. <span style='color:red'>使用<a href='http://open.taobao.com/doc/detail.htm?spm=0.0.0.0.F9TTxy&id=101744'>消息服务</a>监听订单变更事件，可以实时获取订单更新数据。</span><br/><br/>注意：type字段的说明，如果该字段不传，接口默认只查4种类型订单，非默认查询的订单是不返回。遇到订单查不到的情况的，通常都是这个原因造成。解决办法就是type加上订单类型就可正常返回了。用taobao.trade.fullinfo.get 查订单fields返回type 很容易的能知道订单的类型（type）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=128

        :param fields: 需要返回的字段列表，多个字段用半角逗号分隔，可选值为返回示例中能看到的所有字段。rx_audit_status=0为处方药未审核状态
        :param start_modified: 查询修改开始时间(修改时间跨度不能大于一天)。格式:yyyy-MM-dd HH:mm:ss
        :param end_modified: 查询修改结束时间，必须大于修改开始时间(修改时间跨度不能大于一天)，格式:yyyy-MM-dd HH:mm:ss。<span style='color:red;font-weight: bold;'>建议使用30分钟以内的时间跨度，能大大提高响应速度和成功率</span>。
        :param status: 交易状态（<a href='http://open.taobao.com/doc/detail.htm?id=102856' target='_blank'>查看可选值</a>），默认查询所有交易状态的数据，除了默认值外每次只能查询一种状态。
        :param type: 交易类型列表（<a href='http://open.taobao.com/doc/detail.htm?id=102855' target='_blank'>查看可选值</a>），一次查询多种类型可用半角逗号分隔，默认同时查询guarantee_trade,auto_delivery,ec,cod,step这5种类型的数据。
        :param buyer_nick: 买家昵称
        :param ext_type: 可选值有ershou(二手市场的订单）,service（商城服务子订单）mark（双十一大促活动异常订单）作为扩展类型筛选只能做单个ext_type查询，不能全部查询所有的ext_type类型
        :param tag: 卖家对交易的自定义分组标签，目前可选值为：time_card（点卡软件代充），fee_card（话费软件代充）
        :param page_no: 页码。取值范围:大于零的整数;默认值:1。<span style='color:red;font-weight: bold;'>注：必须采用倒序的分页方式（从最后一页往回取）才能避免漏单问题。</span>
        :param page_size: 每页条数。取值范围：1~100，默认值：40。<span style='color:red;font-weight: bold;'>建议使用40~50，可以提高成功率，减少超时数量</span>。
        :param use_has_next: 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，<span style='color:red;font-weight: bold;'>通过此种方式获取增量交易，效率在原有的基础上有80%的提升</span>。
        """
        return self._top_request(
            "taobao.trades.sold.increment.get",
            {
                "fields": fields,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "status": status,
                "type": type,
                "buyer_nick": buyer_nick,
                "ext_type": ext_type,
                "tag": tag,
                "page_no": page_no,
                "page_size": page_size,
                "use_has_next": use_has_next
            }
        )

    def taobao_trade_confirmfee_get(
            self,
            tid
    ):
        """
        获取交易确认收货费用
        获取交易确认收货费用，可以获取主订单或子订单的确认收货费用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=146

        :param tid: 交易主订单或子订单ID
        """
        return self._top_request(
            "taobao.trade.confirmfee.get",
            {
                "tid": tid
            },
            result_processor=lambda x: x["trade_confirm_fee"]
        )

    def taobao_trade_ordersku_update(
            self,
            oid,
            sku_id='',
            sku_props=''
    ):
        """
        更新交易的销售属性
        只能更新发货前子订单的销售属性 <br/>只能更新价格相同的销售属性。对于拍下减库存的交易会同步更新销售属性的库存量。对于旺店的交易，要使用商品扩展信息中的SKU价格来比较。 <br/>必须使用sku_id或sku_props中的一个参数来更新，如果两个都传的话，sku_id优先
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=240

        :param oid: 子订单编号（对于单笔订单的交易可以传交易编号）。
        :param sku_id: 销售属性编号，可以通过taobao.item.skus.get获取订单对应的商品的所有销售属性。
        :param sku_props: 销售属性组合串，格式：p1:v1;p2:v2，如：1627207:28329;20509:28314。可以通过taobao.item.skus.get获取订单对应的商品的所有销售属性。
        """
        return self._top_request(
            "taobao.trade.ordersku.update",
            {
                "oid": oid,
                "sku_id": sku_id,
                "sku_props": sku_props
            },
            result_processor=lambda x: x["order"]
        )

    def taobao_trade_shippingaddress_update(
            self,
            tid,
            receiver_name='',
            receiver_phone='',
            receiver_mobile='',
            receiver_state='',
            receiver_city='',
            receiver_district='',
            receiver_address='',
            receiver_zip=''
    ):
        """
        更改交易的收货地址
        只能更新一笔交易里面的买家收货地址 <br/>只能更新发货前（即买家已付款，等待卖家发货状态）的交易的买家收货地址 <br/>更新后的发货地址可以通过taobao.trade.fullinfo.get查到 <br/>参数中所说的字节为GBK编码的（英文和数字占1字节，中文占2字节）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=241

        :param tid: 交易编号。
        :param receiver_name: 收货人全名。最大长度为50个字节。
        :param receiver_phone: 固定电话。最大长度为30个字节。
        :param receiver_mobile: 移动电话。最大长度为11个字节。
        :param receiver_state: 省份。最大长度为32个字节。如：浙江
        :param receiver_city: 城市。最大长度为32个字节。如：杭州
        :param receiver_district: 区/县。最大长度为32个字节。如：西湖区
        :param receiver_address: 收货地址。最大长度为228个字节。
        :param receiver_zip: 邮政编码。必须由6个数字组成。
        """
        return self._top_request(
            "taobao.trade.shippingaddress.update",
            {
                "tid": tid,
                "receiver_name": receiver_name,
                "receiver_phone": receiver_phone,
                "receiver_mobile": receiver_mobile,
                "receiver_state": receiver_state,
                "receiver_city": receiver_city,
                "receiver_district": receiver_district,
                "receiver_address": receiver_address,
                "receiver_zip": receiver_zip
            },
            result_processor=lambda x: x["trade"]
        )

    def taobao_trade_amount_get(
            self,
            tid,
            fields
    ):
        """
        交易帐务查询
        卖家查询该笔交易的资金帐务相关的数据；
        1. 只供卖家使用，买家不可使用
        2. 可查询所有的状态的交易，但不同状态时交易的相关数据可能会有不同
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10481

        :param tid: 交易编号
        :param fields: 订单帐务详情需要返回的字段信息，可选值如下：1. TradeAmount中可指定的fields：tid,alipay_no,created,pay_time,end_time,total_fee,payment,post_fee,cod_fee,commission_fee,buyer_obtain_point_fee2. OrderAmount中可指定的fields：order_amounts.oid,order_amounts.title,order_amounts.num_iid,order_amounts.sku_properties_name,order_amounts.sku_id,order_amounts.num,order_amounts.price,order_amounts.discount_fee,order_amounts.adjust_fee,order_amounts.payment,order_amounts.promotion_name3. order_amounts(返回OrderAmount的所有内容)4. promotion_details(指定该值会返回主订单的promotion_details中除id之外的所有字段)
        """
        return self._top_request(
            "taobao.trade.amount.get",
            {
                "tid": tid,
                "fields": fields
            },
            result_processor=lambda x: x["trade_amount"]
        )

    def taobao_trade_receivetime_delay(
            self,
            tid,
            days
    ):
        """
        延长交易收货时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10560

        :param tid: 主订单号
        :param days: 延长收货的天数，可选值为：3, 5, 7, 10。
        """
        return self._top_request(
            "taobao.trade.receivetime.delay",
            {
                "tid": tid,
                "days": days
            },
            result_processor=lambda x: x["trade"]
        )

    def taobao_trade_postage_update(
            self,
            tid,
            post_fee
    ):
        """
        修改交易邮费价格
        修改订单邮费接口，通过传入订单编号和邮费价格，修改订单的邮费，返回修改时间modified,邮费post_fee,总费用total_fee。
        <br/> <span style='color:red'> API取消加邮费功能通知：http://open.taobao.com/support/announcement_detail.htm?tid=24750</span>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10897

        :param tid: 主订单编号
        :param post_fee: 邮费价格(邮费单位是元）
        """
        return self._top_request(
            "taobao.trade.postage.update",
            {
                "tid": tid,
                "post_fee": post_fee
            },
            result_processor=lambda x: x["trade"]
        )

    def taobao_trades_sold_incrementv_get(
            self,
            fields,
            start_create,
            end_create,
            status='',
            type='',
            ext_type='',
            tag='',
            page_no='1',
            page_size='40',
            use_has_next='false'
    ):
        """
        查询卖家已卖出的增量交易数据（根据入库时间）
        搜索当前会话用户作为卖家已卖出的增量交易数据（只能获取到三个月以内的交易信息） <br/><br/>1. 一次请求只能查询时间跨度为一天的增量交易记录，即end_create - start_create <= 1天。 <br/><br/>2. 返回的数据结果是以订单入库时间的倒序排列的(该时间和订单修改时间不同)，通过从后往前翻页的方式可以避免漏单问题。 <br/><br/>3. 返回的数据结果只包含了订单的部分数据，可通过taobao.trade.fullinfo.get获取订单详情。 <br/><br/>4. 使用主动通知监听订单变更事件，可以实时获取订单更新数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21470

        :param fields: 需要返回的字段列表，多个字段用半角逗号分隔，可选值为返回示例中能看到的所有字段。
        :param start_create: 查询入库开始时间(修改时间跨度不能大于一天)。格式:yyyy-MM-dd HH:mm:ss
        :param end_create: 查询入库结束时间，必须大于入库开始时间(修改时间跨度不能大于一天)，格式:yyyy-MM-dd HH:mm:ss。<span style='color:red;font-weight: bold;'>建议使用30分钟以内的时间跨度，能大大提高响应速度和成功率</span>。
        :param status: 交易状态（<a href='http://open.taobao.com/doc/detail.htm?id=102856' target='_blank'>查看可选值</a>），默认查询所有交易状态的数据，除了默认值外每次只能查询一种状态。
        :param type: 交易类型列表（<a href='http://open.taobao.com/doc/detail.htm?id=102855' target='_blank'>查看可选值</a>），一次查询多种类型可用半角逗号分隔，默认同时查询guarantee_trade,auto_delivery,ec,cod,step这5种类型的数据。
        :param ext_type: 可选值有ershou(二手市场的订单）,service（商城服务子订单）mark（双十一大促活动异常订单）作为扩展类型筛选只能做单个ext_type查询，不能全部查询所有的ext_type类型
        :param tag: 卖家对交易的自定义分组标签，目前可选值为：time_card（点卡软件代充），fee_card（话费软件代充）
        :param page_no: 页码。取值范围:大于零的整数;默认值:1。<span style='color:red;font-weight: bold;'>注：必须采用倒序的分页方式（从最后一页往回取）才能避免漏单问题。</span>
        :param page_size: 每页条数。取值范围：1~100，默认值：40。<span style='color:red;font-weight: bold;'>建议使用40~50，可以提高成功率，减少超时数量</span>。
        :param use_has_next: 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，<span style='color:red;font-weight: bold;'>通过此种方式获取增量交易，效率在原有的基础上有80%的提升</span>。
        """
        return self._top_request(
            "taobao.trades.sold.incrementv.get",
            {
                "fields": fields,
                "start_create": start_create,
                "end_create": end_create,
                "status": status,
                "type": type,
                "ext_type": ext_type,
                "tag": tag,
                "page_no": page_no,
                "page_size": page_size,
                "use_has_next": use_has_next
            }
        )

    def taobao_trade_acquire_online_precreate(
            self,
            cart_info,
            guide_id,
            guide_name,
            shop_id,
            shop_name,
            delivery_type,
            total_fee='',
            ext_info=''
    ):
        """
        导购宝预下单
        提供导购宝预下单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23219

        :param cart_info: 购物车信息，格式为：商品id:skuId:购买数量。一次购买多个商品，用分号隔开。
        :param guide_id: 导购员id
        :param guide_name: 导购员姓名
        :param shop_id: 店铺id
        :param shop_name: 店铺名称
        :param delivery_type: 是店内提货还是线上发货，店内提货传入:inshop；线上发货传入：online
        :param total_fee: 修改订单总额，单位为分
        :param ext_info: 传入扩展参数，目前包含外部订单号设置
        """
        return self._top_request(
            "taobao.trade.acquire.online.precreate",
            {
                "cart_info": cart_info,
                "guide_id": guide_id,
                "guide_name": guide_name,
                "shop_id": shop_id,
                "shop_name": shop_name,
                "delivery_type": delivery_type,
                "total_fee": total_fee,
                "ext_info": ext_info
            },
            result_processor=lambda x: x["online_precreate_order_result"]
        )

    def alibaba_trade_aliance_create(
            self,
            param_isv_create_order_param=None
    ):
        """
        推客平台订单回流
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29515

        :param param_isv_create_order_param: 下单请求
        """
        return self._top_request(
            "alibaba.trade.aliance.create",
            {
                "param_isv_create_order_param": param_isv_create_order_param
            }
        )

    def alibaba_wdk_trade_order_query(
            self,
            query=None
    ):
        """
        查询外部交易订单接口
        通过该接口可以在盒马查询交易订单，并处理相关业务流程。主要用于和外部商户的订单进行同步和融合业务流程处理
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33907

        :param query: 订单查询
        """
        return self._top_request(
            "alibaba.wdk.trade.order.query",
            {
                "query": query
            }
        )

    def alibaba_wdk_trade_order_create(
            self,
            trade=None
    ):
        """
        外部交易订单创单接口
        通过该接口可以再盒马创建交易订单，并处理相关业务流程。主要用于和外部商户的订单进行同步和融合业务流程处理
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33908

        :param trade: 待创建的订单
        """
        return self._top_request(
            "alibaba.wdk.trade.order.create",
            {
                "trade": trade
            }
        )

    def alibaba_wdk_trade_order_cancel(
            self,
            trade=None
    ):
        """
        外部交易订单取消接口
        通过该接口可以再盒马取消交易订单，并处理相关业务流程。主要用于和外部商户的订单进行同步和融合业务流程处理
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33912

        :param trade: 待取消的订单
        """
        return self._top_request(
            "alibaba.wdk.trade.order.cancel",
            {
                "trade": trade
            }
        )

    def taobao_trade_fullinfo_get_customization(
            self,
            fields,
            tid
    ):
        """
        获取单笔交易业务定制的详细信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取单笔交易的详细信息
        <br/>1. 只有在交易成功的状态下才能取到交易佣金，其它状态下取到的都是零或空值
        <br/>2. 只有单笔订单的情况下Trade数据结构中才包含商品相关的信息
        <br/>3. 获取到的Order中的payment字段在单笔子订单时包含物流费用，多笔子订单时不包含物流费用
        <br/>4. 获取红包优惠金额可以使用字段 coupon_fee
        <br/>5. 请按需获取字段，减少TOP系统的压力
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35072

        :param fields: 需要返回的字段列表，多个字段用半角逗号分隔，可选值为返回示例中能看到的所有字段。
        :param tid: 交易编号
        """
        return self._top_request(
            "taobao.trade.fullinfo.get.customization",
            {
                "fields": fields,
                "tid": tid
            },
            result_processor=lambda x: x["trade"]
        )

    def alibaba_wdk_trade_refund_create(
            self,
            refund_goods_create_request=None
    ):
        """
        外部渠道逆向订单创建
        该接口是创建退货订单的服务。当外部渠道发起退款后，调用此接口可以完成五道口底层交易、履约、配送等一系列流程进行退货。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36172

        :param refund_goods_create_request: 退货请求
        """
        return self._top_request(
            "alibaba.wdk.trade.refund.create",
            {
                "refund_goods_create_request": refund_goods_create_request
            }
        )

    def alibaba_wdk_trade_refund_query(
            self,
            refund_goods_query_request=None
    ):
        """
        外部渠道查询退货订单详情接口
        该接口提供给外部渠道商家，比如欧尚外卖等查询退货订单详情，里面包含退货进度等信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36173

        :param refund_goods_query_request: 查询请求
        """
        return self._top_request(
            "alibaba.wdk.trade.refund.query",
            {
                "refund_goods_query_request": refund_goods_query_request
            },
            result_processor=lambda x: x["refund_goods_query_result"]
        )

    def alibaba_wdk_trade_refund_inform(
            self,
            inform_refund_success_request=None
    ):
        """
        外部渠道通知淘鲜达退款成功接口
        该接口用于外部渠道退款成功后，通知淘鲜达底层履约完成退款流程。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36213

        :param inform_refund_success_request: 通知退款成功请求
        """
        return self._top_request(
            "alibaba.wdk.trade.refund.inform",
            {
                "inform_refund_success_request": inform_refund_success_request
            }
        )

    def alibaba_omni_saas_order_create(
            self,
            goods_details,
            store_id,
            buyer_id_type,
            pay_channel,
            store_id_type,
            request_no,
            buyer_id='',
            device='',
            device_no='',
            operator_id='',
            coupon_infos=None
    ):
        """
        订单创建接口
        服务商利用现有的saas系统和阿里完成交易系统的对接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37282

        :param goods_details: 商品列表
        :param store_id: 门店ID
        :param buyer_id_type: ALIPAY：支付宝用户；TAOBAO：淘宝会员码；MOBILE：手机号
        :param pay_channel: ALIPAY：支付宝付款；BANK_CARD：刷卡
        :param store_id_type: PLACE：淘宝商户中心门店ID；CUSTOM：商户自有门店编码，需要维护到淘宝商户中心
        :param request_no: 请求号，用于标识一次请求
        :param buyer_id: 买家标识，淘系用户或用户手机号。当支付渠道为支付宝时，此字段为淘宝会员码或支付宝付款码。(当前仅支持淘系用户，手机号下单稍后开放)
        :param device: 收银设备类型
        :param device_no: 收银设备号
        :param operator_id: 收银员标识
        :param coupon_infos: 商家自有优惠
        """
        return self._top_request(
            "alibaba.omni.saas.order.create",
            {
                "goods_details": goods_details,
                "store_id": store_id,
                "buyer_id_type": buyer_id_type,
                "pay_channel": pay_channel,
                "store_id_type": store_id_type,
                "request_no": request_no,
                "buyer_id": buyer_id,
                "device": device,
                "device_no": device_no,
                "operator_id": operator_id,
                "coupon_infos": coupon_infos
            }
        )

    def tmall_ascp_orders_sale_create(
            self,
            channel_order_request=None
    ):
        """
        ASCP渠道中心销售单创建接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38211

        :param channel_order_request: 请求对象
        """
        return self._top_request(
            "tmall.ascp.orders.sale.create",
            {
                "channel_order_request": channel_order_request
            }
        )

    def taobao_rdc_aligenius_ordermsg_update(
            self,
            oid,
            status,
            tid
    ):
        """
        订单消息状态回传
        用于订单消息处理状态回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39964

        :param oid: 子订单（消息中传的子订单）
        :param status: 处理状态，1=成功，2=处理失败
        :param tid: 主订单（消息中传的主订单）
        """
        return self._top_request(
            "taobao.rdc.aligenius.ordermsg.update",
            {
                "oid": oid,
                "status": status,
                "tid": tid
            }
        )

    def taobao_rdc_aligenius_order_event_update(
            self,
            param0=None
    ):
        """
        erp订单相关状态变更信息回传
        供erp回传订单变更状态事件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41264

        :param param0: 参数
        """
        return self._top_request(
            "taobao.rdc.aligenius.order.event.update",
            {
                "param0": param0
            }
        )

    def tmall_cloudstore_trade_pos_update(
            self,
            serial_no='',
            request_time='',
            pos_no='',
            order_id=''
    ):
        """
        pos单号回传
        云店交易订单pos单号回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41970

        :param serial_no: 流水号
        :param request_time: 请求时间
        :param pos_no: pos单号
        :param order_id: 主订单号
        """
        return self._top_request(
            "tmall.cloudstore.trade.pos.update",
            {
                "serial_no": serial_no,
                "request_time": request_time,
                "pos_no": pos_no,
                "order_id": order_id
            }
        )

    def taobao_trade_voucher_upload(
            self,
            file_name,
            file_data,
            seller_nick='',
            buyer_nick=''
    ):
        """
        淘宝交易凭证上传
        定制化交易流程中，涉及到 买家自定义 图片、声音、视频 等多富媒体文件，且该商品或服务的附属sku，通过此接口上传作为交易凭证。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26451

        :param file_name: 上传文件的名称
        :param file_data: 文件
        :param seller_nick: 该笔订单的卖家Nick
        :param buyer_nick: 该笔订单的买家Nick（混淆nick）
        """
        return self._top_request(
            "taobao.trade.voucher.upload",
            {
                "file_name": file_name,
                "file_data": file_data,
                "seller_nick": seller_nick,
                "buyer_nick": buyer_nick
            },
            result_processor=lambda x: x["file"]
        )

    def cainiao_refund_refundactions_display(
            self,
            param0=None
    ):
        """
        退货退款操作的展示信息(展现给买家)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43911

        :param param0: 请求入参
        """
        return self._top_request(
            "cainiao.refund.refundactions.display",
            {
                "param0": param0
            }
        )

    def cainiao_refund_refundactions_get(
            self,
            order_id
    ):
        """
        判断该订单能执行的逆向操作集合列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43912

        :param order_id: 子订单ID
        """
        return self._top_request(
            "cainiao.refund.refundactions.get",
            {
                "order_id": order_id
            }
        )

    def cainiao_refund_refundactions_judgement(
            self,
            param0=None
    ):
        """
        判断当前用户是否能对订单执行一些逆向操作，比如退货操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43913

        :param param0: 操作请求
        """
        return self._top_request(
            "cainiao.refund.refundactions.judgement",
            {
                "param0": param0
            }
        )


class TbPingJia(DingTalkBaseAPI):
    """
    评价API
    """

    def taobao_traderates_get(
            self,
            fields,
            rate_type,
            role,
            result='',
            page_no='',
            page_size='40',
            start_date='',
            end_date='',
            tid='',
            use_has_next='false',
            num_iid=''
    ):
        """
        搜索评价信息
        搜索评价信息，只能获取距今180天内的评价记录(只支持查询卖家给出或得到的评价)。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=55

        :param fields: 需返回的字段列表。可选值：TradeRate 结构中的所有字段，多个字段之间用“,”分隔
        :param rate_type: 评价类型。可选值:get(得到),give(给出)
        :param role: 评价者角色即评价的发起方。可选值:seller(卖家),buyer(买家)。 当 give buyer 以买家身份给卖家的评价； 当 get seller 以买家身份得到卖家给的评价； 当 give seller 以卖家身份给买家的评价； 当 get buyer 以卖家身份得到买家给的评价。
        :param result: 评价结果。可选值:good(好评),neutral(中评),bad(差评)
        :param page_no: 页码。取值范围:大于零的整数最大限制为200; 默认值:1
        :param page_size: 每页获取条数。默认值40，最小值1，最大值150。
        :param start_date: 评价开始时。如果只输入开始时间，那么能返回开始时间之后的评价数据。
        :param end_date: 评价结束时间。如果只输入结束时间，那么全部返回所有评价数据。
        :param tid: 交易订单id，可以是父订单id号，也可以是子订单id号
        :param use_has_next: 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，通过此种方式获取评价信息，效率在原有的基础上有80%的提升。
        :param num_iid: 商品的数字ID
        """
        return self._top_request(
            "taobao.traderates.get",
            {
                "fields": fields,
                "rate_type": rate_type,
                "role": role,
                "result": result,
                "page_no": page_no,
                "page_size": page_size,
                "start_date": start_date,
                "end_date": end_date,
                "tid": tid,
                "use_has_next": use_has_next,
                "num_iid": num_iid
            }
        )

    def taobao_traderate_add(
            self,
            tid,
            result,
            role,
            oid='',
            content='',
            anony=''
    ):
        """
        新增单个评价
        新增单个评价(<font color='red'>注：在评价之前需要对订单成功的时间进行判定（end_time）,如果超过15天，不能再通过该接口进行评价</font>)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=56

        :param tid: 交易ID
        :param result: 评价结果,可选值:good(好评),neutral(中评),bad(差评)
        :param role: 评价者角色,可选值:seller(卖家),buyer(买家)
        :param oid: 子订单ID
        :param content: 评价内容,最大长度: 500个汉字 .注意：当评价结果为good时就不用输入评价内容.评价内容为neutral/bad的时候需要输入评价内容
        :param anony: 是否匿名,卖家评不能匿名。可选值:true(匿名),false(非匿名)。注意：如果交易订单匿名，则评价也匿名
        """
        return self._top_request(
            "taobao.traderate.add",
            {
                "tid": tid,
                "result": result,
                "role": role,
                "oid": oid,
                "content": content,
                "anony": anony
            },
            result_processor=lambda x: x["trade_rate"]
        )

    def taobao_traderate_list_add(
            self,
            tid,
            result,
            role,
            content='',
            anony=''
    ):
        """
        针对父子订单新增批量评价
        针对父子订单新增批量评价(<font color='red'>注：在评价之前需要对订单成功的时间进行判定（end_time）,如果超过15天，不用再通过该接口进行评价</font>)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=57

        :param tid: 交易ID
        :param result: 评价结果。可选值:good(好评),neutral(中评),bad(差评)
        :param role: 评价者角色。可选值:seller(卖家),buyer(买家)
        :param content: 评价内容,最大长度: 500个汉字 .注意：当评价结果为good时就不用输入评价内容.评价内容为neutral/bad的时候需要输入评价内容
        :param anony: 是否匿名，卖家评不能匿名。可选值:true(匿名),false(非匿名)。 注意：如果买家匿名购买，那么买家的评价默认匿名
        """
        return self._top_request(
            "taobao.traderate.list.add",
            {
                "tid": tid,
                "result": result,
                "role": role,
                "content": content,
                "anony": anony
            },
            result_processor=lambda x: x["trade_rate"]
        )

    def taobao_traderate_explain_add(
            self,
            oid,
            reply
    ):
        """
        商城评价解释接口
        商城卖家给评价做出解释（买家追加评论后、评价超过30天的，都不能再做评价解释）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21158

        :param oid: 子订单ID
        :param reply: 评价解释内容,最大长度: 500个汉字
        """
        return self._top_request(
            "taobao.traderate.explain.add",
            {
                "oid": oid,
                "reply": reply
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_traderate_impr_imprword_byfeedid_get(
            self,
            child_trade_id
    ):
        """
        根据交易订单id和卖家nick查询到该条评价的印象标签
        根据卖家nick和交易id（如果是子订单，输入子订单id），查询到该条评价的大家印象标签
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21897

        :param child_trade_id: 交易订单id号（如果包含子订单，请使用子订单id号）
        """
        return self._top_request(
            "taobao.traderate.impr.imprword.byfeedid.get",
            {
                "child_trade_id": child_trade_id
            },
            result_processor=lambda x: x["impr_feed"]
        )

    def taobao_traderate_impr_imprwords_get(
            self,
            cat_root_id,
            cat_leaf_id=''
    ):
        """
        评价大家印象印象短语接口
        根据淘宝后台类目的一级类目和叶子类目
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21899

        :param cat_root_id: 淘宝一级类目id
        :param cat_leaf_id: 淘宝叶子类目id
        """
        return self._top_request(
            "taobao.traderate.impr.imprwords.get",
            {
                "cat_root_id": cat_root_id,
                "cat_leaf_id": cat_leaf_id
            },
            result_processor=lambda x: x["impr_words"]
        )

    def tmall_traderate_feeds_get(
            self,
            child_trade_id
    ):
        """
        查询子订单对应的评价、追评以及语义标签
        通过子订单ID获取天猫订单对应的评价，追评，以及对应的语义标签
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22532

        :param child_trade_id: 交易子订单ID
        """
        return self._top_request(
            "tmall.traderate.feeds.get",
            {
                "child_trade_id": child_trade_id
            },
            result_processor=lambda x: x["tmall_rate_info"]
        )

    def tmall_traderate_itemtags_get(
            self,
            item_id
    ):
        """
        通过商品ID获取标签列表
        通过商品ID获取标签详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22533

        :param item_id: 商品ID
        """
        return self._top_request(
            "tmall.traderate.itemtags.get",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["tags"]
        )


class TbWuLiu(DingTalkBaseAPI):
    """
    物流API
    """

    def taobao_areas_get(
            self,
            fields
    ):
        """
        查询地址区域
        查询标准地址区域代码信息。可以直接参考最新的行政区域代码：
        <a href='http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html'>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html</a>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=59

        :param fields: 需返回的字段列表.可选值:Area 结构中的所有字段;多个字段之间用','分隔.如:id,type,name,parent_id,zip.
        """
        return self._top_request(
            "taobao.areas.get",
            {
                "fields": fields
            },
            result_processor=lambda x: x["areas"]
        )

    def taobao_logistics_companies_get(
            self,
            fields,
            is_recommended='',
            order_mode=''
    ):
        """
        查询物流公司信息
        查询淘宝网合作的物流公司信息，用于发货接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=233

        :param fields: 需返回的字段列表。可选值:LogisticCompany 结构中的所有字段;多个字段间用','逗号隔开.<br/>如:id,code,name,reg_mail_no<br/><br><font color='red'>说明：</font><br/><br>id：物流公司ID<br/><br>code：物流公司code<br/><br>name：物流公司名称<br/><br>reg_mail_no：物流公司对应的运单规则
        :param is_recommended: 是否查询推荐物流公司.可选值:true,false.如果不提供此参数,将会返回所有支持电话联系的物流公司.
        :param order_mode: 推荐物流公司的下单方式.可选值:offline(电话联系/自己联系),online(在线下单),all(即电话联系又在线下单). 此参数仅仅用于is_recommended 为ture时。就是说对于推荐物流公司才可用.如果不选择此参数将会返回推荐物流中支持电话联系的物流公司.
        """
        return self._top_request(
            "taobao.logistics.companies.get",
            {
                "fields": fields,
                "is_recommended": is_recommended,
                "order_mode": order_mode
            },
            result_processor=lambda x: x["logistics_companies"]
        )

    def taobao_logistics_orders_detail_get(
            self,
            fields,
            tid='',
            buyer_nick='',
            status='',
            seller_confirm='',
            receiver_name='',
            start_created='',
            end_created='',
            freight_payer='',
            type='',
            page_no='1',
            page_size='40'
    ):
        """
        批量查询物流订单,返回详细信息
        查询物流订单的详细信息，涉及用户隐私字段。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=234

        :param fields: 需返回的字段列表.可选值:Shipping 物流数据结构中所有字段.fileds中可以指定返回以上任意一个或者多个字段,以','分隔.
        :param tid: 交易ID.如果加入tid参数的话,不用传其他的参数,但是仅会返回一条物流订单信息.
        :param buyer_nick: 买家昵称
        :param status: 物流状态.可查看数据结构 Shipping 中的status字段.
        :param seller_confirm: 卖家是否发货.可选值:yes(是),no(否).如:yes.
        :param receiver_name: 收货人姓名
        :param start_created: 创建时间开始.格式:yyyy-MM-dd HH:mm:ss
        :param end_created: 创建时间结束.格式:yyyy-MM-dd HH:mm:ss
        :param freight_payer: 谁承担运费.可选值:buyer(买家),seller(卖家).如:buyer
        :param type: 物流方式.可选值:post(平邮),express(快递),ems(EMS).如:post
        :param page_no: 页码.该字段没传 或 值<1 ,则默认page_no为1
        :param page_size: 每页条数.该字段没传 或 值<1 ，则默认page_size为40
        """
        return self._top_request(
            "taobao.logistics.orders.detail.get",
            {
                "fields": fields,
                "tid": tid,
                "buyer_nick": buyer_nick,
                "status": status,
                "seller_confirm": seller_confirm,
                "receiver_name": receiver_name,
                "start_created": start_created,
                "end_created": end_created,
                "freight_payer": freight_payer,
                "type": type,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_logistics_orders_get(
            self,
            fields,
            tid='',
            buyer_nick='',
            status='',
            seller_confirm='',
            receiver_name='',
            start_created='',
            end_created='',
            freight_payer='',
            type='',
            page_no='1',
            page_size='40'
    ):
        """
        批量查询物流订单
        批量查询物流订单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=235

        :param fields: 需返回的字段列表.可选值:Shipping 物流数据结构中的以下字段: <br><br/>tid,order_code,seller_nick,buyer_nick,delivery_start, delivery_end,out_sid,item_title,receiver_name, created,modified,status,type,freight_payer,seller_confirm,company_name,sub_tids,is_spilt；<br>多个字段之间用','分隔。如tid,seller_nick,buyer_nick,delivery_start。
        :param tid: 交易ID.如果加入tid参数的话,不用传其他的参数,若传入tid：非拆单场景，仅会返回一条物流订单信息；拆单场景，会返回多条物流订单信息
        :param buyer_nick: 买家昵称
        :param status: 物流状态.查看数据结构 Shipping 中的status字段.
        :param seller_confirm: 卖家是否发货.可选值:yes(是),no(否).如:yes
        :param receiver_name: 收货人姓名
        :param start_created: 创建时间开始
        :param end_created: 创建时间结束
        :param freight_payer: 谁承担运费.可选值:buyer(买家),seller(卖家).如:buyer
        :param type: 物流方式.可选值:post(平邮),express(快递),ems(EMS).如:post
        :param page_no: 页码.该字段没传 或 值<1 ,则默认page_no为1
        :param page_size: 每页条数.该字段没传 或 值<1 ,则默认page_size为40
        """
        return self._top_request(
            "taobao.logistics.orders.get",
            {
                "fields": fields,
                "tid": tid,
                "buyer_nick": buyer_nick,
                "status": status,
                "seller_confirm": seller_confirm,
                "receiver_name": receiver_name,
                "start_created": start_created,
                "end_created": end_created,
                "freight_payer": freight_payer,
                "type": type,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_logistics_partners_get(
            self,
            source_id='0',
            target_id='0',
            service_type='',
            goods_value='0',
            is_need_carriage='false'
    ):
        """
        查询支持起始地到目的地范围的物流公司
        查询物流公司信息（可以查询目的地可不可达情况）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=271

        :param source_id: 物流公司揽货地地区码（必须是区、县一级的）.参考:http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/201401/t20140116_501070.html或者调用 taobao.areas.get 获取
        :param target_id: 物流公司派送地地区码（必须是区、县一级的）.参考:http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/201401/t20140116_501070.html或者调用 taobao.areas.get 获取
        :param service_type: 服务类型，根据此参数可查出提供相应服务类型的物流公司信息(物流公司状态正常)，可选值：cod(货到付款)、online(在线下单)、 offline(自己联系)、limit(限时物流)。然后再根据source_id,target_id,goods_value这三个条件来过滤物流公司. 目前输入自己联系服务类型将会返回空，因为自己联系并没有具体的服务信息，所以不会有记录。
        :param goods_value: 货物价格.只有当选择货到付款此参数才会有效
        :param is_need_carriage: 是否需要揽收资费信息，默认false。在此值为false时，返回内容中将无carriage。在未设置source_id或target_id的情况下，无法查询揽收资费信息。自己联系无揽收资费记录。
        """
        return self._top_request(
            "taobao.logistics.partners.get",
            {
                "source_id": source_id,
                "target_id": target_id,
                "service_type": service_type,
                "goods_value": goods_value,
                "is_need_carriage": is_need_carriage
            },
            result_processor=lambda x: x["logistics_partners"]
        )

    def taobao_logistics_trace_search(
            self,
            tid,
            is_split='0',
            sub_tid=''
    ):
        """
        物流流转信息查询
        用户根据淘宝交易号查询物流流转信息，如2010-8-10 15：23：00到达杭州集散地。<br/>此接口的返回信息都由物流公司提供。（备注：使用线下发货（offline.send）的运单，不支持运单状态的实时跟踪，只要一发货，状态就会变为<status>对方已签收</status>，该字段仅对线上发货（online.send）的运单有效。）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10463

        :param tid: 淘宝交易号，请勿传非淘宝交易号
        :param is_split: 表明是否是拆单，默认值0，1表示拆单
        :param sub_tid: 拆单子订单列表，当is_split=1时，需要传人；对应的数据是：子订单号的列表。
        """
        return self._top_request(
            "taobao.logistics.trace.search",
            {
                "tid": tid,
                "is_split": is_split,
                "sub_tid": sub_tid
            }
        )

    def taobao_logistics_address_search(
            self,
            rdef=''
    ):
        """
        查询卖家地址库
        通过此接口查询卖家地址库，
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10683

        :param rdef: 可选，参数列表如下：<br><font color='red'>no_def:查询非默认地址<br>get_def:查询默认取货地址，也即对应卖家后台地址库中发货地址（send_def暂不起作用）<br>cancel_def:查询默认退货地址<br>缺省此参数时，查询所有当前用户的地址库</font>
        """
        return self._top_request(
            "taobao.logistics.address.search",
            {
                "rdef": rdef
            },
            result_processor=lambda x: x["addresses"]
        )

    def taobao_logistics_address_remove(
            self,
            contact_id
    ):
        """
        删除卖家地址库
        用此接口删除卖家地址库
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10684

        :param contact_id: 地址库ID
        """
        return self._top_request(
            "taobao.logistics.address.remove",
            {
                "contact_id": contact_id
            },
            result_processor=lambda x: x["address_result"]
        )

    def taobao_logistics_address_modify(
            self,
            contact_id,
            contact_name,
            province,
            city,
            addr,
            country='',
            zip_code='',
            phone='',
            mobile_phone='',
            seller_company='',
            memo='',
            get_def='',
            cancel_def=''
    ):
        """
        卖家地址库修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10685

        :param contact_id: 地址库ID
        :param contact_name: 联系人姓名<br/><font color='red'>长度不可超过20个字节</font>
        :param province: 所在省
        :param city: 所在市
        :param addr: 详细街道地址，不需要重复填写省/市/区
        :param country: 区、县<br/><br><font color='red'>如果所在地区是海外的可以为空，否则为必参</font>
        :param zip_code: 地区邮政编码<br/><br><font color='red'>如果所在地区是海外的可以为空，否则为必参</font>
        :param phone: 电话号码,手机与电话必需有一个
        :param mobile_phone: 手机号码，手机与电话必需有一个 <br><font color='red'>手机号码不能超过20位</font>
        :param seller_company: 公司名称,<br/><br><font color='red'>公司名称长能不能超过20字节</font>
        :param memo: 备注,<br><font color='red'>备注不能超过256字节</font>
        :param get_def: 默认取货地址。<br><br/><font color='red'>选择此项(true)，将当前地址设为默认取货地址，撤消原默认取货地址</font>
        :param cancel_def: 默认退货地址。<br><br/><font color='red'>选择此项(true)，将当前地址设为默认退货地址，撤消原默认退货地址</font>
        """
        return self._top_request(
            "taobao.logistics.address.modify",
            {
                "contact_id": contact_id,
                "contact_name": contact_name,
                "province": province,
                "city": city,
                "addr": addr,
                "country": country,
                "zip_code": zip_code,
                "phone": phone,
                "mobile_phone": mobile_phone,
                "seller_company": seller_company,
                "memo": memo,
                "get_def": get_def,
                "cancel_def": cancel_def
            },
            result_processor=lambda x: x["address_result"]
        )

    def taobao_logistics_address_add(
            self,
            contact_name,
            province,
            city,
            addr,
            country='',
            zip_code='',
            phone='',
            mobile_phone='',
            seller_company='',
            memo='',
            get_def='',
            cancel_def=''
    ):
        """
        卖家地址库新增接口
        通过此接口新增卖家地址库,卖家最多可添加5条地址库,新增第一条卖家地址，将会自动设为默认地址库
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10686

        :param contact_name: 联系人姓名 <font color='red'>长度不可超过20个字节</font>
        :param province: 所在省
        :param city: 所在市
        :param addr: 详细街道地址，不需要重复填写省/市/区
        :param country: 区、县<br/><br><font color='red'>如果所在地区是海外的可以为空，否则为必参</font>
        :param zip_code: 地区邮政编码<br/><br><font color='red'>如果所在地区是海外的可以为空，否则为必参</font>
        :param phone: 电话号码,手机与电话必需有一个
        :param mobile_phone: 手机号码，手机与电话必需有一个<br/><br><font color='red'>手机号码不能超过20位</font>
        :param seller_company: 公司名称,<br><font color='red'>公司名称长能不能超过20字节</font>
        :param memo: 备注,<br><font color='red'>备注不能超过256字节</font>
        :param get_def: 默认取货地址。<br><br/><font color='red'>选择此项(true)，将当前地址设为默认取货地址，撤消原默认取货地址</font>
        :param cancel_def: 默认退货地址。<br><br/><font color='red'>选择此项(true)，将当前地址设为默认退货地址，撤消原默认退货地址</font>
        """
        return self._top_request(
            "taobao.logistics.address.add",
            {
                "contact_name": contact_name,
                "province": province,
                "city": city,
                "addr": addr,
                "country": country,
                "zip_code": zip_code,
                "phone": phone,
                "mobile_phone": mobile_phone,
                "seller_company": seller_company,
                "memo": memo,
                "get_def": get_def,
                "cancel_def": cancel_def
            },
            result_processor=lambda x: x["address_result"]
        )

    def taobao_logistics_online_send(
            self,
            tid,
            company_code,
            sub_tid='',
            is_split='',
            out_sid='',
            sender_id='',
            cancel_id='',
            feature='',
            seller_ip=''
    ):
        """
        在线订单发货处理（支持货到付款）
        用户调用该接口可实现在线订单发货（支持货到付款）<br/>调用该接口实现在线下单发货，有两种情况：<br><br/><font color='red'>如果不输入运单号的情况：交易状态不会改变，需要调用taobao.logistics.online.confirm确认发货后交易状态才会变成卖家已发货。<br><br/>如果输入运单号的情况发货：交易订单状态会直接变成卖家已发货 。</font>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10687

        :param tid: 淘宝交易ID
        :param company_code: 物流公司代码.如'POST'就代表中国邮政,'ZJS'就代表宅急送.调用 taobao.logistics.companies.get 获取。
        :param sub_tid: 需要拆单发货的子订单集合，针对的是一笔交易下有多个子订单需要分开发货的场景；1次可传人多个子订单号，子订单间用逗号隔开；为空表示不做拆单发货。
        :param is_split: 表明是否是拆单，默认值0，1表示拆单
        :param out_sid: 运单号.具体一个物流公司的真实运单号码。淘宝官方物流会校验，请谨慎传入；
        :param sender_id: 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。如果为空，取的卖家的默认取货地址
        :param cancel_id: 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。 如果为空，取的卖家的默认退货地址
        :param feature: feature参数格式 范例: identCode=tid1:识别码1,识别码2|tid2:识别码3;machineCode=tid3:3C机器号A,3C机器号B identCode为识别码的KEY,machineCode为3C的KEY,多个key之间用”;”分隔 “tid1:识别码1,识别码2|tid2:识别码3”为identCode对应的value。 '|'不同商品间的分隔符。 例1商品和2商品，之间就用'|'分开。 TID就是商品代表的子订单号，对应taobao.trade.fullinfo.get 接口获得的oid字段。(通过OID可以唯一定位到当前商品上) ':'TID和具体传入参数间的分隔符。冒号前表示TID,之后代表该商品的参数属性。 ',' 属性间分隔符。（对应商品数量，当存在一个商品的数量超过1个时，用逗号分开）。 具体:当订单中A商品的数量为2个，其中手机串号分别为'12345','67890'。 参数格式：identCode=TIDA:12345,67890。 TIDA对应了A宝贝，冒号后用逗号分隔的'12345','67890'.说明本订单A宝贝的数量为2，值分别为'12345','67890'。 当存在'|'时，就说明订单中存在多个商品，商品间用'|'分隔了开来。|'之后的内容含义同上。retailStoreId=12345，发货门店ID或仓信息。retailStoreType=STORE: 发货门店类别，STORE表示门店，WAREHOUSE表示电商仓。对于全渠道订单回传的商家，retailStoreId和retailStoreType字段为必填字段。
        :param seller_ip: 商家的IP地址
        """
        return self._top_request(
            "taobao.logistics.online.send",
            {
                "tid": tid,
                "company_code": company_code,
                "sub_tid": sub_tid,
                "is_split": is_split,
                "out_sid": out_sid,
                "sender_id": sender_id,
                "cancel_id": cancel_id,
                "feature": feature,
                "seller_ip": seller_ip
            },
            result_processor=lambda x: x["shipping"]
        )

    def taobao_logistics_online_cancel(
            self,
            tid
    ):
        """
        取消物流订单接口
        调此接口取消发货的订单，重新选择物流公司发货。前提是物流公司未揽收货物。对未发货和已经被物流公司揽收的物流订单，是不能取消的。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10688

        :param tid: 淘宝交易ID
        """
        return self._top_request(
            "taobao.logistics.online.cancel",
            {
                "tid": tid
            }
        )

    def taobao_logistics_online_confirm(
            self,
            tid,
            out_sid,
            sub_tid='',
            is_split='',
            seller_ip=''
    ):
        """
        确认发货通知接口
        <br><font color='red'>仅使用taobao.logistics.online.send 发货时，未输入运单号的情况下，需要使用该接口确认发货。发货接口主要有taobao.logistics.offline.send 和taobao.logistics.online.send <br><br/>确认发货的目的是让交易流程继承走下去，确认发货后交易状态会由【买家已付款】变为【卖家已发货】，然后买家才可以确认收货，货款打入卖家账号。货到付款的订单除外
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10689

        :param tid: 淘宝交易ID
        :param out_sid: 运单号.具体一个物流公司的真实运单号码。淘宝官方物流会校验，请谨慎传入；
        :param sub_tid: 拆单子订单列表，对应的数据是：子订单号的列表。可以不传，但是如果传了则必须符合传递的规则。子订单必须是操作的物流订单的子订单的真子集
        :param is_split: 表明是否是拆单，默认值0，1表示拆单
        :param seller_ip: 商家的IP地址
        """
        return self._top_request(
            "taobao.logistics.online.confirm",
            {
                "tid": tid,
                "out_sid": out_sid,
                "sub_tid": sub_tid,
                "is_split": is_split,
                "seller_ip": seller_ip
            },
            result_processor=lambda x: x["shipping"]
        )

    def taobao_logistics_offline_send(
            self,
            tid,
            out_sid,
            company_code,
            sub_tid='',
            is_split='',
            sender_id='',
            cancel_id='',
            feature='',
            seller_ip=''
    ):
        """
        自己联系物流（线下物流）发货
        用户调用该接口可实现自己联系发货（线下物流），使用该接口发货，交易订单状态会直接变成卖家已发货。不支持货到付款、在线下单类型的订单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10690

        :param tid: 淘宝交易ID
        :param out_sid: 运单号.具体一个物流公司的真实运单号码。淘宝官方物流会校验，请谨慎传入；
        :param company_code: 物流公司代码.如'POST'就代表中国邮政,'ZJS'就代表宅急送.调用 taobao.logistics.companies.get 获取。
        :param sub_tid: 需要拆单发货的子订单集合，针对的是一笔交易下有多个子订单需要分开发货的场景；1次可传人多个子订单号，子订单间用逗号隔开；为空表示不做拆单发货。
        :param is_split: 表明是否是拆单，默认值0，1表示拆单
        :param sender_id: 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。如果为空，取的卖家的默认取货地址
        :param cancel_id: 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。 如果为空，取的卖家的默认退货地址
        :param feature: feature参数格式 范例: identCode=tid1:识别码1,识别码2|tid2:识别码3;machineCode=tid3:3C机器号A,3C机器号B identCode为识别码的KEY,machineCode为3C的KEY,多个key之间用”;”分隔 “tid1:识别码1,识别码2|tid2:识别码3”为identCode对应的value。 '|'不同商品间的分隔符。 例1商品和2商品，之间就用'|'分开。 TID就是商品代表的子订单号，对应taobao.trade.fullinfo.get 接口获得的oid字段。(通过OID可以唯一定位到当前商品上) ':'TID和具体传入参数间的分隔符。冒号前表示TID,之后代表该商品的参数属性。 ',' 属性间分隔符。（对应商品数量，当存在一个商品的数量超过1个时，用逗号分开）。 具体:当订单中A商品的数量为2个，其中手机串号分别为'12345','67890'。 参数格式：identCode=TIDA:12345,67890。 TIDA对应了A宝贝，冒号后用逗号分隔的'12345','67890'.说明本订单A宝贝的数量为2，值分别为'12345','67890'。 当存在'|'时，就说明订单中存在多个商品，商品间用'|'分隔了开来。|'之后的内容含义同上。retailStoreId=12345，发货门店ID或仓信息。retailStoreType=STORE: 发货门店类别，STORE表示门店，WAREHOUSE表示电商仓。对于全渠道订单回传的商家，retailStoreId和retailStoreType字段为必填字段。
        :param seller_ip: 商家的IP地址
        """
        return self._top_request(
            "taobao.logistics.offline.send",
            {
                "tid": tid,
                "out_sid": out_sid,
                "company_code": company_code,
                "sub_tid": sub_tid,
                "is_split": is_split,
                "sender_id": sender_id,
                "cancel_id": cancel_id,
                "feature": feature,
                "seller_ip": seller_ip
            },
            result_processor=lambda x: x["shipping"]
        )

    def taobao_logistics_dummy_send(
            self,
            tid,
            feature='',
            seller_ip=''
    ):
        """
        无需物流（虚拟）发货处理
        用户调用该接口可实现无需物流（虚拟）发货,使用该接口发货，交易订单状态会直接变成卖家已发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10691

        :param tid: 淘宝交易ID
        :param feature: feature参数格式<br>范例: identCode=tid1:识别码1,识别码2|tid2:识别码3;machineCode=tid3:3C机器号A,3C机器号B<br>identCode为识别码的KEY,machineCode为3C的KEY,多个key之间用”;”分隔<br>“tid1:识别码1,识别码2|tid2:识别码3”为identCode对应的value。'|'不同商品间的分隔符。<br>例1商品和2商品，之间就用'|'分开。<br>TID就是商品代表的子订单号，对应taobao.trade.fullinfo.get 接口获得的oid字段。(通过OID可以唯一定位到当前商品上)<br>':'TID和具体传入参数间的分隔符。冒号前表示TID,之后代表该商品的参数属性。<br>',' 属性间分隔符。（对应商品数量，当存在一个商品的数量超过1个时，用逗号分开）。<br>具体:当订单中A商品的数量为2个，其中手机串号分别为'12345','67890'。<br>参数格式：identCode=TIDA:12345,67890。TIDA对应了A宝贝，冒号后用逗号分隔的'12345','67890'.说明本订单A宝贝的数量为2，值分别为'12345','67890'。<br>当存在'|'时，就说明订单中存在多个商品，商品间用'|'分隔了开来。|'之后的内容含义同上。
        :param seller_ip: 商家的IP地址
        """
        return self._top_request(
            "taobao.logistics.dummy.send",
            {
                "tid": tid,
                "feature": feature,
                "seller_ip": seller_ip
            },
            result_processor=lambda x: x["shipping"]
        )

    def taobao_delivery_template_get(
            self,
            template_ids,
            fields,
            user_nick=''
    ):
        """
        获取用户指定运费模板信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10915

        :param template_ids: 需要查询的运费模板ID列表
        :param fields: 需返回的字段列表。 <br/> <br/><B><br/>可选值:示例中的值;各字段之间用','隔开<br/></B><br/><br/><br/> <br/><font color=blue><br/>template_id：查询模板ID <br/> <br/>template_name:查询模板名称 <br/> <br/>assumer：查询服务承担放 <br/> <br/>valuation:查询计价规则 <br/> <br/>supports:查询增值服务列表 <br/> <br/>created:查询模板创建时间 <br/> <br/>modified:查询修改时间<br/> <br/>consign_area_id:运费模板上设置的卖家发货地址最小级别ID<br/> <br/>address:卖家地址信息<br/></font><br/><br/><br/> <br/><font color=bule><br/>query_cod:查询货到付款运费信息<br/> <br/>query_post:查询平邮运费信息 <br/> <br/>query_express:查询快递公司运费信息 <br/> <br/>query_ems:查询EMS运费信息<br/> <br/>query_bzsd:查询普通保障速递运费信息<br/> <br/>query_wlb:查询物流宝保障速递运费信息<br/> <br/>query_furniture:查询家装物流运费信息<br/><font color=blue><br/><br/><br/><br/><font color=red>不能有空格</font>
        :param user_nick: 在没有登录的情况下根据淘宝用户昵称查询指定的模板
        """
        return self._top_request(
            "taobao.delivery.template.get",
            {
                "template_ids": template_ids,
                "fields": fields,
                "user_nick": user_nick
            }
        )

    def taobao_delivery_templates_get(
            self,
            fields
    ):
        """
        获取用户下所有模板
        根据用户ID获取用户下所有模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10916

        :param fields: 需返回的字段列表。 <br/> <br/><B><br/>可选值:示例中的值;各字段之间用','隔开<br/></B><br/><br/><br/> <br/><font color=blue><br/>template_id：查询模板ID <br/> <br/>template_name:查询模板名称 <br/> <br/>assumer：查询服务承担放 <br/> <br/>valuation:查询计价规则 <br/> <br/>supports:查询增值服务列表 <br/> <br/>created:查询模板创建时间 <br/> <br/>modified:查询修改时间<br/> <br/>consign_area_id:运费模板上设置的卖家发货地址最小级别ID<br/> <br/>address:卖家地址信息<br/></font><br/><br/><br/> <br/><font color=bule><br/>query_cod:查询货到付款运费信息<br/> <br/>query_post:查询平邮运费信息 <br/> <br/>query_express:查询快递公司运费信息 <br/> <br/>query_ems:查询EMS运费信息<br/> <br/>query_bzsd:查询普通保障速递运费信息<br/> <br/>query_wlb:查询物流宝保障速递运费信息<br/> <br/>query_furniture:查询家装物流运费信息<br/><font color=blue><br/><br/><br/><br/><font color=red>不能有空格</font>
        """
        return self._top_request(
            "taobao.delivery.templates.get",
            {
                "fields": fields
            }
        )

    def taobao_delivery_template_delete(
            self,
            template_id
    ):
        """
        删除运费模板
        根据用户指定的模板ID删除指定的模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10917

        :param template_id: 运费模板ID
        """
        return self._top_request(
            "taobao.delivery.template.delete",
            {
                "template_id": template_id
            },
            result_processor=lambda x: x["complete"]
        )

    def taobao_delivery_template_add(
            self,
            name,
            assumer,
            valuation,
            template_types,
            template_dests,
            template_start_standards,
            template_start_fees,
            template_add_standards,
            template_add_fees,
            consign_area_id=''
    ):
        """
        新增运费模板
        增加运费模板的外部接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10918

        :param name: 运费模板的名称，长度不能超过50个字节
        :param assumer: 可选值：0、1 ，说明如下<br>0:表示买家承担服务费;<br>1:表示卖家承担服务费
        :param valuation: 可选值：0、1、3，说明如下。<br>0:表示按宝贝件数计算运费 <br>1:表示按宝贝重量计算运费
                          <br>3:表示按宝贝体积计算运费
        :param template_types: 运费方式:平邮 (post),快递公司(express),EMS (ems),货到付款(cod),物流宝保障速递(wlb),家装物流(furniture)结构:value1;value2;value3;value4
                               如: post;express;ems;cod
                               <br/><font color=red>
                               注意:在添加多个运费方式时,字符串中使用 ';' 分号区分
                               。template_dests(指定地区)
                               template_start_standards(首费标准)、template_start_fees(首费)、template_add_standards(增费标准)、template_add_fees(增费)必须与template_types的分号数量相同. </font>
                               <br>
                               <font color=blue>
                               注意：<br/>
                               1、post,ems,express三种运费方式必须填写一个<br/>
                               2、只有订购了货到付款用户可以填cod;只有家装物流用户可以填写furniture
                               只有订购了保障速递的用户可以填写bzsd,只有物流宝用户可以填写wlb<br/>
                               3、如果是货到付款用户当没有填写cod运送方式时，运费模板会默认继承express的费用为cod的费用<br/>
                               4、如果是保障速递户当没有填写bzsd运送方式时，运费模板会默认继承express的费用为bzsd的费用<br/>
                               5、由于3和4的原因所以当是货到付款用户或保障速递用户时如果没填写对应的运送方式express是必须填写的
                               </font>
        :param template_dests: 邮费子项涉及的地区.结构: value1;value2;value3,value4
                               <br>如:1,110000;1,110000;1,310000;1,320000,330000。 aredId解释(1=全国,110000=北京,310000=上海,320000=江苏,330000=浙江)
                               如果template_types设置为post;ems;exmpress;cod则表示为平邮(post)指定默认地区(全国)和北京地区的运费;其他的类似以分号区分一一对应
                               <br/>可以用taobao.areas.get接口获取.或者参考：http://www.stats.gov.cn/tjbz/xzqhdm/t20080215_402462675.htm<br/>
                               <br/><font color=red>每个运费方式设置涉及的地区中必须包含全国地区（areaId=1）表示默认运费,可以只设置默认运费</font>
                               <br><font color=blue>注意:为多个地区指定指定不同（首费标准、首费、增费标准、增费一项不一样就算不同）的运费以逗号','区分，
                               template_start_standards(首费标准)、template_start_fees(首费)、
                               template_add_standards(增费标准)、
                               template_add_fees(增费)必须与template_types分号数量相同。如果为需要为多个地区指定相同运费则地区之间用“|”隔开即可。</font>
                               <font color=red>如果卖家没有传入发货地址则默认地址库的发货地址</font>
        :param template_start_standards: 首费标准：当valuation(记价方式)为0时输入1-9999范围内的整数<br/><font color=red>当valuation(记价方式)为1时输入0.1-9999.9范围内的小数只能包含以为小数（单位为千克）<br/><font color=blue>当valuation(记价方式)为3时输入0.1-999.9范围内的数值，数值只能包含一位小数（单位为 立方米）
                                         <br/>
                                         <font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font>
        :param template_start_fees: 首费：输入0.00-999.99（最多包含两位小数）
                                    <br/><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font>
        :param template_add_standards: 增费标准：当valuation(记价方式)为0时输入1-9999范围内的整数<br/><font color=red>当valuation(记价方式)为1时输入0.1-9999.9范围内的小数只能包含以为小数（单位为千克）<br/><font color=blue>当valuation(记价方式)为3时输入0.1-999.9范围内的数值，数值只能包含一位小数（单位为 立方米）
                                       <br/>
                                       <br><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font>
        :param template_add_fees: 增费：输入0.00-999.99（最多包含两位小数）<br/><br/><br/><br/><font color=blue>增费必须小于等于首费，但是当首费为0时增费可以大于首费</font><br/><br/><br/><br/><br/><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font>
        :param consign_area_id: 卖家发货地址区域ID<br/><br/><br/><font color=blue>可以不填，如果没有填写取卖家默认发货地址的区域ID，如果需要输入必须用taobao.areas.get接口获取.或者参考：http://www.stats.gov.cn/tjbz/xzqhdm/t20080215_402462675.htm <br/></font><br/><br/><br/><br/><font color=red>注意：填入该值时必须取您的发货地址最小区域级别ID，比如您的发货地址是：某省XX市xx区（县）时需要填入区(县)的ID，当然有些地方没有区或县可以直接填市级别的ID</font>
        """
        return self._top_request(
            "taobao.delivery.template.add",
            {
                "name": name,
                "assumer": assumer,
                "valuation": valuation,
                "template_types": template_types,
                "template_dests": template_dests,
                "template_start_standards": template_start_standards,
                "template_start_fees": template_start_fees,
                "template_add_standards": template_add_standards,
                "template_add_fees": template_add_fees,
                "consign_area_id": consign_area_id
            },
            result_processor=lambda x: x["delivery_template"]
        )

    def taobao_delivery_template_update(
            self,
            template_id,
            template_types,
            template_dests,
            template_start_standards,
            template_start_fees,
            template_add_standards,
            template_add_fees,
            name='',
            assumer=''
    ):
        """
        修改运费模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10919

        :param template_id: 需要修改的模板对应的模板ID
        :param template_types: 运费方式:平邮 (post),快递公司(express),EMS (ems),货到付款(cod)结构:value1;value2;value3;value4 <br/>如: post;express;ems;cod <br/><br/><font color=red><br/>注意:在添加多个运费方式时,字符串中使用 ';' 分号区分。template_dests(指定地区) template_start_standards(首费标准)、template_start_fees(首费)、template_add_standards(增费标准)、template_add_fees(增费)必须与template_types的分号数量相同. <br/> </font><br/><br/><br/><font color=blue><br/>普通用户：post,ems,express三种运费方式必须填写一个，不能填写cod。<br/>货到付款用户：如果填写了cod运费方式，则post,ems,express三种运费方式也必须填写一个，如果没有填写cod则填写的运费方式中必须存在express</font>
        :param template_dests: 邮费子项涉及的地区.结构: value1;value2;value3,value4
                               <br>如:1,110000;1,110000;1,310000;1,320000,330000。 aredId解释(1=全国,110000=北京,310000=上海,320000=江苏,330000=浙江)
                               如果template_types设置为post;ems;exmpress;cod则表示为平邮(post)指定默认地区(全国)和北京地区的运费;其他的类似以分号区分一一对应
                               <br/>可以用taobao.areas.get接口获取.或者参考：http://www.stats.gov.cn/tjbz/xzqhdm/t20080215_402462675.htm
                               <br/><font color=red>每个运费方式设置的设涉及地区中必须包含全国地区（areaId=1）表示默认运费,可以只设置默认运费</font>
                               <br><font color=blue>注意:为多个地区指定指定不同（首费标准、首费、增费标准、增费一项不一样就算不同）的运费以逗号','区分，
                               template_start_standards(首费标准)、template_start_fees(首费)、
                               template_add_standards(增费标准)、
                               template_add_fees(增费)必须与template_types分号数量相同。如果为需要为多个地区指定相同运费则地区之间用“|”隔开即可。</font>
        :param template_start_standards: 首费标准：当valuation(记价方式)为0时输入1-9999范围内的整数<br><font color=blue>首费标准目前只能为1</br>
                                         <br><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font>
        :param template_start_fees: 首费：输入0.01-999.99（最多包含两位小数）<br/><br/><font color=blue> 首费不能为0</font><br><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font>
        :param template_add_standards: 增费标准：当valuation(记价方式)为0时输入1-9999范围内的整数<br><font color=blue>增费标准目前只能为1</font>
                                       <br><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font>
        :param template_add_fees: 增费：输入0.00-999.99（最多包含两位小数）<br/><font color=blue>增费可以为0</font><br/><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font>
        :param name: 模板名称，长度不能大于50个字节
        :param assumer: 可选值：0,1 <br>  说明<br>0:表示买家承担服务费;<br>1:表示卖家承担服务费
        """
        return self._top_request(
            "taobao.delivery.template.update",
            {
                "template_id": template_id,
                "template_types": template_types,
                "template_dests": template_dests,
                "template_start_standards": template_start_standards,
                "template_start_fees": template_start_fees,
                "template_add_standards": template_add_standards,
                "template_add_fees": template_add_fees,
                "name": name,
                "assumer": assumer
            },
            result_processor=lambda x: x["complete"]
        )

    def taobao_logistics_order_create(
            self,
            goods_names,
            goods_quantities,
            item_values,
            seller_wangwang_id,
            logis_type='OFFLINE',
            logis_company_code='',
            mail_no='',
            trade_id='',
            is_consign='true',
            shipping='1'
    ):
        """
        创建物流订单
        用户调用该接口可以创建物流订单。目前仅支持手工订单的创建，创建完毕后默认自动使用“自己联系”的方式发货并且初始状态为”已发货“。也可以通过可选参数选择是否发货以及何种方式进行发货。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10997

        :param goods_names: 运送的货物名称列表，用|号隔开
        :param goods_quantities: 运送货物的数量列表，用|号隔开
        :param item_values: 运送货物的单价列表(注意：单位为分），用|号隔开
        :param seller_wangwang_id: 卖家旺旺号
        :param logis_type: 发货方式,默认为自己联系发货。可选值:ONLINE(在线下单)、OFFLINE(自己联系)。
        :param logis_company_code: 发货的物流公司代码，如申通=STO，圆通=YTO。is_consign=true时，此项必填。
        :param mail_no: 发货的物流公司运单号。在logis_type=OFFLINE且is_consign=true时，此项必填。
        :param trade_id: 订单的交易号码
        :param is_consign: 创建订单同时是否进行发货，默认发货。
        :param shipping: 运费承担方式。1为买家承担运费，2为卖家承担运费，其他值为错误参数。
        """
        return self._top_request(
            "taobao.logistics.order.create",
            {
                "goods_names": goods_names,
                "goods_quantities": goods_quantities,
                "item_values": item_values,
                "seller_wangwang_id": seller_wangwang_id,
                "logis_type": logis_type,
                "logis_company_code": logis_company_code,
                "mail_no": mail_no,
                "trade_id": trade_id,
                "is_consign": is_consign,
                "shipping": shipping
            },
            result_processor=lambda x: x["trade_id"]
        )

    def taobao_logistics_consign_resend(
            self,
            tid,
            out_sid,
            company_code,
            sub_tid='',
            is_split='0',
            feature='',
            seller_ip=''
    ):
        """
        修改物流公司和运单号
        支持卖家发货后修改运单号;支持在线下单和自己联系两种发货方式;使用条件：<br><br/>1、必须是已发货订单，自己联系发货的必须24小时内才可修改；在线下单的，必须下单后物流公司未揽收成功前才可修改；<br/>2、自己联系只能切换为自己联系的公司，在线下单也只能切换为在线下单的物流公司。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21492

        :param tid: 淘宝交易ID
        :param out_sid: 运单号.具体一个物流公司的真实运单号码。淘宝官方物流会校验，请谨慎传入；
        :param company_code: 物流公司代码.如'POST'代表中国邮政,'ZJS'代表宅急送。调用 taobao.logistics.companies.get 获取。<br><font color='red'>如果是货到付款订单，选择的物流公司必须支持货到付款发货方式</font>
        :param sub_tid: 拆单子订单列表，对应的数据是：子订单号列表。可以不传，但是如果传了则必须符合传递的规则。子订单必须是操作的物流订单的子订单的真子集！
        :param is_split: 表明是否是拆单，默认值0，1表示拆单
        :param feature: feature参数格式<br>范例: identCode=tid1:识别码1,识别码2|tid2:识别码3;machineCode=tid3:3C机器号A,3C机器号B<br>identCode为识别码的KEY,machineCode为3C的KEY,多个key之间用”;”分隔<br>“tid1:识别码1,识别码2|tid2:识别码3”为identCode对应的value。'|'不同商品间的分隔符。<br>例1商品和2商品，之间就用'|'分开。<br>TID就是商品代表的子订单号，对应taobao.trade.fullinfo.get 接口获得的oid字段。(通过OID可以唯一定位到当前商品上)<br>':'TID和具体传入参数间的分隔符。冒号前表示TID,之后代表该商品的参数属性。<br>',' 属性间分隔符。（对应商品数量，当存在一个商品的数量超过1个时，用逗号分开）。<br>具体:当订单中A商品的数量为2个，其中手机串号分别为'12345','67890'。<br>参数格式：identCode=TIDA:12345,67890。TIDA对应了A宝贝，冒号后用逗号分隔的'12345','67890'.说明本订单A宝贝的数量为2，值分别为'12345','67890'。<br>当存在'|'时，就说明订单中存在多个商品，商品间用'|'分隔了开来。|'之后的内容含义同上。
        :param seller_ip: 商家的IP地址
        """
        return self._top_request(
            "taobao.logistics.consign.resend",
            {
                "tid": tid,
                "out_sid": out_sid,
                "company_code": company_code,
                "sub_tid": sub_tid,
                "is_split": is_split,
                "feature": feature,
                "seller_ip": seller_ip
            },
            result_processor=lambda x: x["shipping"]
        )

    def taobao_logistics_consign_order_createandsend(
            self,
            user_id,
            order_source,
            order_type,
            logis_type,
            company_id,
            trade_id,
            s_name,
            s_area_id,
            s_address,
            s_zip_code,
            s_prov_name,
            s_city_name,
            r_name,
            r_area_id,
            r_address,
            r_zip_code,
            r_prov_name,
            r_city_name,
            item_json_string,
            mail_no='',
            shipping='',
            s_mobile_phone='',
            s_telephone='',
            s_dist_name='',
            r_mobile_phone='',
            r_telephone='',
            r_dist_name=''
    ):
        """
        创建订单并发货
        创建物流订单，并发货。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22172

        :param user_id: 用户ID
        :param order_source: 订单来源，值选择：30
        :param order_type: 订单类型，值固定选择：30
        :param logis_type: 物流订单物流类型，值固定选择：2
        :param company_id: 物流公司ID
        :param trade_id: 交易流水号，淘外订单号或者商家内部交易流水号
        :param s_name: 发件人名称
        :param s_area_id: 发件人区域ID
        :param s_address: 发件人街道地址
        :param s_zip_code: 发件人出编
        :param s_prov_name: 省
        :param s_city_name: 市
        :param r_name: 收件人名称
        :param r_area_id: 收件人区域ID
        :param r_address: 收件人街道地址
        :param r_zip_code: 收件人邮编
        :param r_prov_name: 省
        :param r_city_name: 市
        :param item_json_string: 物品的json数据。
        :param mail_no: 运单号
        :param shipping: 费用承担方式 1买家承担运费 2卖家承担运费
        :param s_mobile_phone: 手机号码
        :param s_telephone: 电话号码
        :param s_dist_name: 区
        :param r_mobile_phone: 手机号码
        :param r_telephone: 电话号码
        :param r_dist_name: 区
        """
        return self._top_request(
            "taobao.logistics.consign.order.createandsend",
            {
                "user_id": user_id,
                "order_source": order_source,
                "order_type": order_type,
                "logis_type": logis_type,
                "company_id": company_id,
                "trade_id": trade_id,
                "s_name": s_name,
                "s_area_id": s_area_id,
                "s_address": s_address,
                "s_zip_code": s_zip_code,
                "s_prov_name": s_prov_name,
                "s_city_name": s_city_name,
                "r_name": r_name,
                "r_area_id": r_area_id,
                "r_address": r_address,
                "r_zip_code": r_zip_code,
                "r_prov_name": r_prov_name,
                "r_city_name": r_city_name,
                "item_json_string": item_json_string,
                "mail_no": mail_no,
                "shipping": shipping,
                "s_mobile_phone": s_mobile_phone,
                "s_telephone": s_telephone,
                "s_dist_name": s_dist_name,
                "r_mobile_phone": r_mobile_phone,
                "r_telephone": r_telephone,
                "r_dist_name": r_dist_name
            }
        )

    def taobao_logistics_address_reachable(
            self,
            partner_ids,
            service_type,
            area_code='',
            address='',
            source_area_code=''
    ):
        """
        判定服务是否可达
        根据输入的目标地址，判断服务是否可达。
        现已支持筛单的快递公司共15家：中国邮政、EMS、国通、汇通、快捷、全峰、优速、圆通、宅急送、中通、顺丰、天天、韵达、德邦快递、申通
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22688

        :param partner_ids: 物流公司编码ID，可以从这个接口获取所有物流公司的标准编码taobao.logistics.companies.get，可以传入多个值，以英文逗号分隔，如“1000000952,1000000953”
        :param service_type: 服务对应的数字编码，如揽派范围对应88
        :param area_code: 标准区域编码(三级行政区编码或是四级行政区)，可以通过taobao.areas.get获取，如北京市朝阳区为110105
        :param address: 详细地址
        :param source_area_code: 发货地，标准区域编码(四级行政)，可以通过taobao.areas.get获取，如浙江省杭州市余杭区闲林街道为 330110011
        """
        return self._top_request(
            "taobao.logistics.address.reachable",
            {
                "partner_ids": partner_ids,
                "service_type": service_type,
                "area_code": area_code,
                "address": address,
                "source_area_code": source_area_code
            },
            result_processor=lambda x: x["reachable_result_list"]
        )

    def taobao_logistics_order_shengxian_confirm(
            self,
            out_sid,
            delivery_type,
            tid='',
            sender_id='',
            cancel_id='',
            seller_ip='',
            logis_id='',
            service_code=''
    ):
        """
        物流宝生鲜冷链的发货
        优鲜送，生鲜业务使用该接口发货，交易订单状态会直接变成卖家已发货。不支持货到付款、在线下单类型的订单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23039

        :param out_sid: 运单号.具体一个物流公司的真实运单号码。支持多个运单号，多个运单号之间用英文分号（;）隔开，不能重复。淘宝官方物流会校验，请谨慎传入；
        :param delivery_type: 1：冷链。0：常温
        :param tid: 淘宝交易ID
        :param sender_id: 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。<font color='red'>如果为空，取的卖家的默认取货地址</font>如果service_code不为空，默认使用service_code如果service_code为空，sender_id不为空，使用sender_id对应的地址发货如果service_code与sender_id都为空，使用默认地址发货
        :param cancel_id: 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。<br><font color='red'>如果为空，取的卖家的默认退货地址</font><br>
        :param seller_ip: 商家的IP地址
        :param logis_id: 物流订单ID 。同淘宝交易订单互斥，淘宝交易号存在，，以淘宝交易号为准
        :param service_code: 仓库的服务代码标示，代码一个仓库的实体。(可以通过taobao.wlb.stores.baseinfo.get接口查询)如果service_code为空，默认通过sender_id来发货
        """
        return self._top_request(
            "taobao.logistics.order.shengxian.confirm",
            {
                "out_sid": out_sid,
                "delivery_type": delivery_type,
                "tid": tid,
                "sender_id": sender_id,
                "cancel_id": cancel_id,
                "seller_ip": seller_ip,
                "logis_id": logis_id,
                "service_code": service_code
            }
        )

    def taobao_wlb_stores_baseinfo_get(
            self,
            type='0'
    ):
        """
        商家按照仓的类型获取仓库接口
        通过USERID和仓库类型，获取商家自有仓库或菜鸟仓库或全部仓库
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23040

        :param type: 0.商家仓库.1.菜鸟仓库.2全部被划分的仓库
        """
        return self._top_request(
            "taobao.wlb.stores.baseinfo.get",
            {
                "type": type
            }
        )

    def taobao_logistics_address_reachablebatch_get(
            self,
            address_list=None
    ):
        """
        批量判定服务是否可达
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23566

        :param address_list: 筛单用户输入地址结构
        """
        return self._top_request(
            "taobao.logistics.address.reachablebatch.get",
            {
                "address_list": address_list
            },
            result_processor=lambda x: x["reachable_results"]
        )

    def taobao_logistics_consign_tc_confirm(
            self,
            provider_id,
            app_name,
            out_trade_no,
            seller_id,
            trade_id,
            extend_fields='',
            goods_list=None
    ):
        """
        通知交易确认发货接口
        下述业务场景可以使用此接口通知相关的交易订单发货：
        1、发货过程分为多段操作，在确定发货之前，不需要通知交易，当货确认已发出之后，才通知交易发货。
        2、发货过程涉及到多个订单，其中一个订单是跟实操的发货操作同步的，剩下的订单，需要在实操的订单发货之后，一并通知交易发货。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25147

        :param provider_id: 货主id
        :param app_name: ERP的名称
        :param out_trade_no: 已发货的外部订单号
        :param seller_id: 卖家id
        :param trade_id: 待发货的淘宝主交易号
        :param extend_fields: 扩展字段 K:V;
        :param goods_list: 发货的包裹
        """
        return self._top_request(
            "taobao.logistics.consign.tc.confirm",
            {
                "provider_id": provider_id,
                "app_name": app_name,
                "out_trade_no": out_trade_no,
                "seller_id": seller_id,
                "trade_id": trade_id,
                "extend_fields": extend_fields,
                "goods_list": goods_list
            }
        )

    def taobao_wms_order_warehouse_route_get(
            self,
            order_code
    ):
        """
        获取订单仓库路由信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25412

        :param order_code: 订单编号
        """
        return self._top_request(
            "taobao.wms.order.warehouse.route.get",
            {
                "order_code": order_code
            }
        )

    def taobao_wlb_order_jz_query(
            self,
            tid='',
            jz_receiver_to=None,
            sender_id='',
            ins_jz_receiver_t_o=None
    ):
        """
        家装业务查询物流公司api
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26007

        :param tid: 交易id
        :param jz_receiver_to: 家装收货人信息
        :param sender_id: 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。如果为空，取的卖家的默认取货地址
        :param ins_jz_receiver_t_o: 家装安装服务收货人信息
        """
        return self._top_request(
            "taobao.wlb.order.jz.query",
            {
                "tid": tid,
                "jz_receiver_to": jz_receiver_to,
                "sender_id": sender_id,
                "ins_jz_receiver_t_o": ins_jz_receiver_t_o
            }
        )

    def taobao_wlb_order_jz_consign(
            self,
            tid,
            lg_tp_dto,
            sender_id='',
            jz_receiver_to=None,
            jz_top_args=None,
            ins_tp_dto=None,
            ins_receiver_to=None
    ):
        """
        家装发货接口
        家装类订单使用该接口发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26009

        :param tid: 交易号
        :param lg_tp_dto: 物流公司信息
        :param sender_id: 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。如果为空，取的卖家的默认取货地址
        :param jz_receiver_to: 家装收货人信息,如果为空,则取默认收货信息
        :param jz_top_args: 发货参数
        :param ins_tp_dto: 安装公司信息,需要安装时,才填写
        :param ins_receiver_to: 安装收货人信息,如果为空,则取默认收货人信息
        """
        return self._top_request(
            "taobao.wlb.order.jz.consign",
            {
                "tid": tid,
                "lg_tp_dto": lg_tp_dto,
                "sender_id": sender_id,
                "jz_receiver_to": jz_receiver_to,
                "jz_top_args": jz_top_args,
                "ins_tp_dto": ins_tp_dto,
                "ins_receiver_to": ins_receiver_to
            }
        )

    def cainiao_cboss_workplatform_workorder_task_notify(
            self,
            content
    ):
        """
        TOP-SPI工单任务下发接口
        TOP-SPI工单任务下发接口（菜鸟--->商家ISV）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27022

        :param content: content
        """
        return self._top_request(
            "cainiao.cboss.workplatform.workorder.task.notify",
            {
                "content": content
            },
            result_processor=lambda x: x["response"]
        )

    def cainiao_cboss_workplatform_workorder_process_notify(
            self,
            content
    ):
        """
        菜鸟工单系统的工单进度下发
        菜鸟工单系统的工单进度下发（SPI）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27025

        :param content: 服务入参
        """
        return self._top_request(
            "cainiao.cboss.workplatform.workorder.process.notify",
            {
                "content": content
            },
            result_processor=lambda x: x["response"]
        )

    def cainiao_cboss_workplatform_workorder_create(
            self,
            work_order_type='null',
            biz_type='null',
            memo='null',
            member_id='null',
            member_role='null',
            creator_id='null',
            creator_role='null',
            biz_entity_value='null',
            shop_user_id='null',
            trade_id='null',
            source='null',
            source_sign='null',
            mail_no='null',
            features='null',
            attach_path_list='null'
    ):
        """
        菜鸟工单创建接口
        菜鸟工单创建接口，目前调用者ISV
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27052

        :param work_order_type: 工单类型
        :param biz_type: 业务类型
        :param memo: 工单创建备注
        :param member_id: 货主商家用户id
        :param member_role: 货主用户角色
        :param creator_id: 创建者淘宝id（区分子账号）
        :param creator_role: 创建者角色
        :param biz_entity_value: 外部业务系统主键
        :param shop_user_id: 店铺用户id
        :param trade_id: 交易订单id
        :param source: 工单来源
        :param source_sign: 来源签名，用于唯一区分不同的来源方
        :param mail_no: 运单号
        :param features: 扩展字段
        :param attach_path_list: 凭证地址列表
        """
        return self._top_request(
            "cainiao.cboss.workplatform.workorder.create",
            {
                "work_order_type": work_order_type,
                "biz_type": biz_type,
                "memo": memo,
                "member_id": member_id,
                "member_role": member_role,
                "creator_id": creator_id,
                "creator_role": creator_role,
                "biz_entity_value": biz_entity_value,
                "shop_user_id": shop_user_id,
                "trade_id": trade_id,
                "source": source,
                "source_sign": source_sign,
                "mail_no": mail_no,
                "features": features,
                "attach_path_list": attach_path_list
            }
        )

    def cainiao_cboss_workplatform_operation_reply(
            self,
            work_order_id='null',
            task_id='null',
            action_time='2016-05-23 19:00:00',
            action_type='0',
            dealer_user_id='null',
            dealer_contact='null',
            memo='null',
            attach_path='null',
            features='null'
    ):
        """
        菜鸟工单操作回传
        菜鸟工单进度下发接口，目前调用者ISV
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27053

        :param work_order_id: 工单id
        :param task_id: 工单任务id
        :param action_time: 任务操作时间
        :param action_type: 任务操作类型
        :param dealer_user_id: 操作者userId
        :param dealer_contact: 操作者联系方式
        :param memo: 商家工单操作回传备注
        :param attach_path: 凭证照片地址拼接
        :param features: 扩展字段
        """
        return self._top_request(
            "cainiao.cboss.workplatform.operation.reply",
            {
                "work_order_id": work_order_id,
                "task_id": task_id,
                "action_time": action_time,
                "action_type": action_type,
                "dealer_user_id": dealer_user_id,
                "dealer_contact": dealer_contact,
                "memo": memo,
                "attach_path": attach_path,
                "features": features
            }
        )

    def cainiao_cboss_workplatform_biztype_queryall(
            self,
            trade_id,
            level=''
    ):
        """
        菜鸟工单平台根据交易订单查询某条业务线上的所有业务类型
        菜鸟工单平台根据交易订单查询某条业务线上的所有业务类型。 目前调用者ISV
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27054

        :param trade_id: tradeId
        :param level: level
        """
        return self._top_request(
            "cainiao.cboss.workplatform.biztype.queryall",
            {
                "trade_id": trade_id,
                "level": level
            }
        )

    def cainiao_cboss_workplatform_biztype_querybyid(
            self,
            biz_type_id='null'
    ):
        """
        菜鸟工单平台根据业务类型id查询业务类型详细信息
        菜鸟工单平台根据业务类型id查询业务类型详细信息。 目前调用者ISV
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27055

        :param biz_type_id: 业务类型id
        """
        return self._top_request(
            "cainiao.cboss.workplatform.biztype.querybyid",
            {
                "biz_type_id": biz_type_id
            }
        )

    def cainiao_cboss_workplatform_logistics_iscainiaoorder(
            self,
            trade_id='null'
    ):
        """
        根据交易单号判断是否为菜鸟发货订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27056

        :param trade_id: 交易单号
        """
        return self._top_request(
            "cainiao.cboss.workplatform.logistics.iscainiaoorder",
            {
                "trade_id": trade_id
            }
        )

    def cainiao_member_courier_cpresign(
            self,
            account_id
    ):
        """
        cp清理离职用户信息
        CP清理内部离职的用户信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28075

        :param account_id: 菜鸟用户id
        """
        return self._top_request(
            "cainiao.member.courier.cpresign",
            {
                "account_id": account_id
            }
        )

    def taobao_nextone_logistics_sign_update(
            self,
            refund_id,
            sign_status
    ):
        """
        AG物流签收状态写接口
        商家上传退货的签收状态给AG
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28151

        :param refund_id: 退款编号
        :param sign_status: 货物签收状态
        """
        return self._top_request(
            "taobao.nextone.logistics.sign.update",
            {
                "refund_id": refund_id,
                "sign_status": sign_status
            }
        )

    def taobao_nextone_logistics_warehouse_update(
            self,
            refund_id,
            warehouse_status
    ):
        """
        AG退货入仓状态写接口
        商家上传退货入仓状态给ag
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28206

        :param refund_id: 退款编号
        :param warehouse_status: 退货入仓状态 1.已入仓
        """
        return self._top_request(
            "taobao.nextone.logistics.warehouse.update",
            {
                "refund_id": refund_id,
                "warehouse_status": warehouse_status
            }
        )

    def alibaba_alink_message_history_action(
            self,
            action,
            index=''
    ):
        """
        操作历史消息
        阿里智能操作历史消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28329

        :param action: 删除：delete,已读：read
        :param index: 消息id
        """
        return self._top_request(
            "alibaba.alink.message.history.action",
            {
                "action": action,
                "index": index
            }
        )

    def taobao_wlb_import_threepl_resource_get(
            self,
            type,
            from_id,
            to_address
    ):
        """
        3PL直邮获取资源列表
        获取3pl直邮的发货可用资源
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28876

        :param type: ONLINE或者OFFLINE
        :param from_id: 发货地区域id
        :param to_address: 收件人地址
        """
        return self._top_request(
            "taobao.wlb.import.threepl.resource.get",
            {
                "type": type,
                "from_id": from_id,
                "to_address": to_address
            }
        )

    def taobao_wlb_import_threepl_offline_consign(
            self,
            trade_id='',
            res_id='',
            res_code='',
            waybill_no='',
            from_id=''
    ):
        """
        3PL直邮线下发货
        菜鸟认证直邮线下发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28877

        :param trade_id: 交易单号
        :param res_id: 资源id
        :param res_code: 资源code
        :param waybill_no: 运单号
        :param from_id: 发件人地址库id
        """
        return self._top_request(
            "taobao.wlb.import.threepl.offline.consign",
            {
                "trade_id": trade_id,
                "res_id": res_id,
                "res_code": res_code,
                "waybill_no": waybill_no,
                "from_id": from_id
            }
        )

    def cainiao_logistics_package_overview_get(
            self,
            from_date,
            to_date
    ):
        """
        获取物流管家的包裹基础数据
        获取物流管家的包裹基础数据，包含：发货包裹数、揽收包裹数、派送包裹数、已发货未揽收包裹数、已揽收未中转包裹数、已中转未派件包裹数、已派件未签收包裹数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34711

        :param from_date: 开始日期，最小为T-30。返回的结果包含开始日期当日的数据。
        :param to_date: 结束日期，最大为T日。返回的结果包含结束日期当日的数据。
        """
        return self._top_request(
            "cainiao.logistics.package.overview.get",
            {
                "from_date": from_date,
                "to_date": to_date
            },
            result_processor=lambda x: x["data"]
        )

    def cainiao_logistics_abnormal_get(
            self,
            from_date,
            to_date
    ):
        """
        获取物流管家的异常包裹数据
        获取物流管家的异常包裹数据，包括异常包裹总数、揽收超时包裹、中转超时包裹、派签超时包裹、虚假签收包裹、快递反馈异常包裹。时间可在T-15至T日范围内自定义。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34712

        :param from_date: 开始日期，最小为T-15日。返回结果包含开始日期当天的数据。
        :param to_date: 结束日期，最大为T日。返回结果中的揽收超时包裹数、中转超时包裹数、派签超时包裹数、包含结束日期当天的数据，虚假签收包裹数和快递反馈异常包裹数不包含结束日期当天的数据。
        """
        return self._top_request(
            "cainiao.logistics.abnormal.get",
            {
                "from_date": from_date,
                "to_date": to_date
            },
            result_processor=lambda x: x["data"]
        )

    def cainiao_logistics_performance_get(
            self,
            date_num
    ):
        """
        获取物流管家的物流绩效数据
        获取物流管家的物流绩效数据，包含平均支付-发货时长、平均发货-揽收时长、平均发货-签收时长、平均揽收-签收时长、平均支付-签收时长。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34713

        :param date_num: date_num只能取7、15或者30。比如：7表示获取近7天的物流绩效数据，不包含今天的数据。
        """
        return self._top_request(
            "cainiao.logistics.performance.get",
            {
                "date_num": date_num
            },
            result_processor=lambda x: x["performance"]
        )

    def taobao_logistics_express_modify_appoint(
            self,
            express_modify_appoint_top_request
    ):
        """
        快递改约api
        商家通过此api操作修改物流单，交易单的收货人地址、收货人联系方式、预约配送日期
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35777

        :param express_modify_appoint_top_request: 改约请求对象
        """
        return self._top_request(
            "taobao.logistics.express.modify.appoint",
            {
                "express_modify_appoint_top_request": express_modify_appoint_top_request
            }
        )

    def taobao_rdc_aligenius_warehouse_reverse_update(
            self,
            param0
    ):
        """
        销退单状态回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37381

        :param param0: 参数
        """
        return self._top_request(
            "taobao.rdc.aligenius.warehouse.reverse.update",
            {
                "param0": param0
            }
        )

    def taobao_rdc_aligenius_distribution_logistics_cancel(
            self,
            param0=None
    ):
        """
        截配状态回传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37391

        :param param0: 参数
        """
        return self._top_request(
            "taobao.rdc.aligenius.distribution.logistics.cancel",
            {
                "param0": param0
            }
        )

    def cainiao_mdec_nooneshelf_order_save(
            self,
            nos_order
    ):
        """
        无人货架-订单同步
        无人货架-实时订单信息同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37830

        :param nos_order: 订单对象
        """
        return self._top_request(
            "cainiao.mdec.nooneshelf.order.save",
            {
                "nos_order": nos_order
            }
        )

    def cainiao_mdec_nooneshelf_baseinfo_save(
            self,
            nos_baseinfo
    ):
        """
        无人货架-货架基础信息同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37831

        :param nos_baseinfo: 货架基础信息
        """
        return self._top_request(
            "cainiao.mdec.nooneshelf.baseinfo.save",
            {
                "nos_baseinfo": nos_baseinfo
            }
        )

    def cainiao_mdec_nooneshelf_inventory_save(
            self,
            nos_inventory
    ):
        """
        无人货架-货架库存信息同步
        无人货架-库存信息同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37832

        :param nos_inventory: 货架库存对象
        """
        return self._top_request(
            "cainiao.mdec.nooneshelf.inventory.save",
            {
                "nos_inventory": nos_inventory
            }
        )

    def taobao_rdc_aligenius_warehouse_resend_logistics_msg_post(
            self,
            param0
    ):
        """
        补发单物流信息回传
        补发单erp物流信息回传平台
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38741

        :param param0: 参数
        """
        return self._top_request(
            "taobao.rdc.aligenius.warehouse.resend.logistics.msg.post",
            {
                "param0": param0
            }
        )

    def taobao_rdc_aligenius_warehouse_resend_update(
            self,
            param0
    ):
        """
        补发单状态回传
        补发单状态回传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38742

        :param param0: 参数
        """
        return self._top_request(
            "taobao.rdc.aligenius.warehouse.resend.update",
            {
                "param0": param0
            }
        )

    def alibaba_ele_fengniao_trade_update(
            self,
            param=None
    ):
        """
        更新蜂鸟扣费状态
        汇金扣费成功后，回调该接口更新扣费状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39569

        :param param: param 参数
        """
        return self._top_request(
            "alibaba.ele.fengniao.trade.update",
            {
                "param": param
            }
        )

    def alibaba_ele_fengniao_cancel_merchant(
            self,
            param
    ):
        """
        商户取消
        商户取消配送
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39570

        :param param: 参数param
        """
        return self._top_request(
            "alibaba.ele.fengniao.cancel.merchant",
            {
                "param": param
            },
            result_processor=lambda x: x["message"]
        )

    def alibaba_ele_fengniao_order_push(
            self,
            param
    ):
        """
        推送订单
        推送淘宝订单至蜂鸟开放平台配送
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39571

        :param param: 参数param
        """
        return self._top_request(
            "alibaba.ele.fengniao.order.push",
            {
                "param": param
            },
            result_processor=lambda x: x["message"]
        )

    def alibaba_ele_fengniao_user_time_query(
            self,
            param
    ):
        """
        蜂鸟询用户T
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39573

        :param param: 询T入参
        """
        return self._top_request(
            "alibaba.ele.fengniao.user.time.query",
            {
                "param": param
            }
        )

    def alibaba_ele_fengniao_order_query(
            self,
            param=None
    ):
        """
        查询订单基本信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39586

        :param param: 参数
        """
        return self._top_request(
            "alibaba.ele.fengniao.order.query",
            {
                "param": param
            }
        )

    def alibaba_ele_fengniao_shippingorder_event(
            self,
            app_id='',
            partner_order_code=''
    ):
        """
        查询运单事件信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39587

        :param app_id: appid
        :param partner_order_code: 外部订单号
        """
        return self._top_request(
            "alibaba.ele.fengniao.shippingorder.event",
            {
                "app_id": app_id,
                "partner_order_code": partner_order_code
            }
        )

    def alibaba_ele_fengniao_carrierdriver_location(
            self,
            app_id='',
            partner_order_code=''
    ):
        """
        查询骑手当前位置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39599

        :param app_id: appid
        :param partner_order_code: 外部订单号
        """
        return self._top_request(
            "alibaba.ele.fengniao.carrierdriver.location",
            {
                "app_id": app_id,
                "partner_order_code": partner_order_code
            }
        )

    def alibaba_ele_fengniao_service_package_query(
            self,
            param
    ):
        """
        预采购服务包查询接口
        查询门店所在经纬度可用服务包的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40494

        :param param: 入参
        """
        return self._top_request(
            "alibaba.ele.fengniao.service.package.query",
            {
                "param": param
            },
            result_processor=lambda x: x["service_packages"]
        )

    def alibaba_ele_fengniao_chainstore_ranges(
            self,
            merchant_code='',
            app_id='',
            chainstore_code=''
    ):
        """
        蜂鸟查询门店配送范围接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40495

        :param merchant_code: 商户code
        :param app_id: appId
        :param chainstore_code: 门店code
        """
        return self._top_request(
            "alibaba.ele.fengniao.chainstore.ranges",
            {
                "merchant_code": merchant_code,
                "app_id": app_id,
                "chainstore_code": chainstore_code
            },
            result_processor=lambda x: x["range_list"]
        )

    def alibaba_ele_fengniao_chainstore_contract_cancel(
            self,
            param=None
    ):
        """
        门店解约接口
        调用成功后，门店和蜂鸟解除物流合同，不能再使用此门店推单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41491

        :param param: 系统自动生成
        """
        return self._top_request(
            "alibaba.ele.fengniao.chainstore.contract.cancel",
            {
                "param": param
            },
            result_processor=lambda x: x["message"]
        )

    def alibaba_ele_fengniao_chainstore_contract_change(
            self,
            param
    ):
        """
        门店改签合同接口
        通过调用接口，门店改签物流服务包
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41492

        :param param: 系统自动生成
        """
        return self._top_request(
            "alibaba.ele.fengniao.chainstore.contract.change",
            {
                "param": param
            },
            result_processor=lambda x: x["message"]
        )

    def alibaba_ele_fengniao_chainstore_update(
            self,
            param=None
    ):
        """
        修改门店信息接口
        修改门店的经纬度，文本地址，电话，门店名
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41493

        :param param: 入参
        """
        return self._top_request(
            "alibaba.ele.fengniao.chainstore.update",
            {
                "param": param
            },
            result_processor=lambda x: x["message"]
        )

    def alibaba_ele_fengniao_merchant_contract_cancel(
            self,
            param=None
    ):
        """
        蜂鸟商户解约接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        通过调用此接口，商家及商家下的所有门店解除蜂鸟物流服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41494

        :param param: 系统自动生成
        """
        return self._top_request(
            "alibaba.ele.fengniao.merchant.contract.cancel",
            {
                "param": param
            },
            result_processor=lambda x: x["message"]
        )

    def taobao_rdc_aligenius_warehouse_reverse_event_update(
            self,
            param0
    ):
        """
        销退单事件回传接口
        用于erp回传销退单相关信息到平台
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42139

        :param param0: 参数
        """
        return self._top_request(
            "taobao.rdc.aligenius.warehouse.reverse.event.update",
            {
                "param0": param0
            }
        )

    def taobao_rdc_aligenius_warehouse_reverse_uploading(
            self,
            param0=None
    ):
        """
        销退单上传
        主要用于商家上传仓库销退单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42161

        :param param0: 参数
        """
        return self._top_request(
            "taobao.rdc.aligenius.warehouse.reverse.uploading",
            {
                "param0": param0
            }
        )


class TbDianPu(DingTalkBaseAPI):
    """
    店铺API
    """

    def taobao_shopcats_list_get(
            self,
            fields='cid,parent_cid,name,is_parent'
    ):
        """
        获取前台展示的店铺类目
        获取淘宝面向买家的浏览导航类目（跟后台卖家商品管理的类目有差异）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=64

        :param fields: 需要返回的字段列表，见ShopCat，默认返回：cid,parent_cid,name,is_parent
        """
        return self._top_request(
            "taobao.shopcats.list.get",
            {
                "fields": fields
            },
            result_processor=lambda x: x["shop_cats"]
        )

    def taobao_sellercats_list_get(
            self
    ):
        """
        获取前台展示的店铺内卖家自定义商品类目
        此API获取当前卖家店铺在淘宝前端被展示的浏览导航类目（面向买家）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=65

        """
        return self._top_request(
            "taobao.sellercats.list.get",
            result_processor=lambda x: x["seller_cats"]
        )

    def taobao_sellercats_list_add(
            self,
            name,
            pict_url='',
            parent_cid='',
            sort_order=''
    ):
        """
        添加卖家自定义类目
        此API添加卖家店铺内自定义类目 <br/>父类目parent_cid值等于0：表示此类目为店铺下的一级类目，值不等于0：表示此类目有父类目 <br/>注：因为缓存的关系,添加的新类目需8个小时后才可以在淘宝页面上正常显示，但是不影响在该类目下商品发布
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=66

        :param name: 卖家自定义类目名称。不超过20个字符
        :param pict_url: 链接图片URL地址。(绝对地址，格式：http://host/image_path)
        :param parent_cid: 父类目编号，如果类目为店铺下的一级类目：值等于0，如果类目为子类目，调用获取taobao.sellercats.list.get父类目编号
        :param sort_order: 该类目在页面上的排序位置,取值范围:大于零的整数
        """
        return self._top_request(
            "taobao.sellercats.list.add",
            {
                "name": name,
                "pict_url": pict_url,
                "parent_cid": parent_cid,
                "sort_order": sort_order
            },
            result_processor=lambda x: x["seller_cat"]
        )

    def taobao_sellercats_list_update(
            self,
            cid,
            name='',
            pict_url='',
            sort_order=''
    ):
        """
        更新卖家自定义类目
        此API更新卖家店铺内自定义类目 <br/>注：因为缓存的关系，添加的新类目需8个小时后才可以在淘宝页面上正常显示，但是不影响在该类目下商品发布
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=67

        :param cid: 卖家自定义类目编号
        :param name: 卖家自定义类目名称。不超过20个字符
        :param pict_url: 链接图片URL地址
        :param sort_order: 该类目在页面上的排序位置,取值范围:大于零的整数
        """
        return self._top_request(
            "taobao.sellercats.list.update",
            {
                "cid": cid,
                "name": name,
                "pict_url": pict_url,
                "sort_order": sort_order
            },
            result_processor=lambda x: x["seller_cat"]
        )

    def taobao_shop_get(
            self,
            fields,
            nick
    ):
        """
        获取卖家店铺的基本信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=68

        :param fields: 需返回的字段列表。可选值：Shop 结构中的所有字段；多个字段之间用逗号(,)分隔
        :param nick: 卖家昵称
        """
        return self._top_request(
            "taobao.shop.get",
            {
                "fields": fields,
                "nick": nick
            },
            result_processor=lambda x: x["shop"]
        )

    def taobao_shop_update(
            self,
            title='',
            bulletin='',
            desc=''
    ):
        """
        更新店铺基本信息
        目前只支持标题、公告和描述的更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=69

        :param title: 店铺标题。不超过30个字符；过滤敏感词，如淘咖啡、阿里巴巴等。title, bulletin和desc至少必须传一个
        :param bulletin: 店铺公告。不超过1024个字符
        :param desc: 店铺描述。10～2000个字符以内
        """
        return self._top_request(
            "taobao.shop.update",
            {
                "title": title,
                "bulletin": bulletin,
                "desc": desc
            },
            result_processor=lambda x: x["shop"]
        )

    def taobao_shop_getbytitle(
            self,
            title,
            fields='sid,cid,title,nick,desc,bulletin,pic_path,created,modified,shop_score'
    ):
        """
        根据店铺名称获取店铺信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24852

        :param title: 店铺名称，必须严格匹配（不支持模糊查询）
        :param fields: 代表需要获取的店铺信息：sid,cid,title,nick,desc,bulletin,pic_path,created,modified,shop_score
        """
        return self._top_request(
            "taobao.shop.getbytitle",
            {
                "title": title,
                "fields": fields
            }
        )

    def alibaba_interact_sensor_clipbroad(
            self,
            un_named=''
    ):
        """
        Weex页面设置或读取剪切板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30887

        :param un_named: 客户端鉴权使用，实际不会发送或接收数据
        """
        return self._top_request(
            "alibaba.interact.sensor.clipbroad",
            {
                "un_named": un_named
            }
        )

    def alibaba_interact_windvane_call(
            self,
            un_named=''
    ):
        """
        Weex页面调用windvane
        客户端鉴权使用，实际不会发送或接收数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30888

        :param un_named: 客户端鉴权使用，实际不会发送或接收数据
        """
        return self._top_request(
            "alibaba.interact.windvane.call",
            {
                "un_named": un_named
            },
            result_processor=lambda x: x["unnamed"]
        )

    def alibaba_data_item_get(
            self,
            un_named=''
    ):
        """
        获取商品
        获取商品信息，作为客户端Weex鉴权的虚拟api
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30897

        :param un_named: 获取商品信息，作为客户端Weex鉴权的虚拟api
        """
        return self._top_request(
            "alibaba.data.item.get",
            {
                "un_named": un_named
            },
            result_processor=lambda x: x["unnamed"]
        )

    def alibaba_data_coupon_get(
            self,
            un_named=''
    ):
        """
        获取优惠券信息
        获取优惠券信息，仅作客户端鉴权虚拟api使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30898

        :param un_named: 客户端鉴权虚拟api使用
        """
        return self._top_request(
            "alibaba.data.coupon.get",
            {
                "un_named": un_named
            },
            result_processor=lambda x: x["unnamed"]
        )

    def alibaba_data_recommond_get(
            self,
            un_named=''
    ):
        """
        获取推荐信息
        获取优惠券信息，仅作客户端鉴权虚拟api使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30899

        :param un_named: 客户端鉴权虚拟api使用
        """
        return self._top_request(
            "alibaba.data.recommond.get",
            {
                "un_named": un_named
            },
            result_processor=lambda x: x["unnamed"]
        )

    def alibaba_taobao_shop_cat_neo_get(
            self,
            un_named=''
    ):
        """
        店铺mtop接口鉴权虚拟api
        获取优惠券信息，仅作客户端鉴权虚拟api使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30900

        :param un_named: 客户端鉴权虚拟api
        """
        return self._top_request(
            "alibaba.taobao.shop.cat.neo.get",
            {
                "un_named": un_named
            },
            result_processor=lambda x: x["unnamed"]
        )

    def taobao_store_followurl_get(
            self,
            callback_url='',
            user_nick='',
            user_id=''
    ):
        """
        获取店铺关注URL
        获取关注店铺的URL
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40699

        :param callback_url: 关注完成后的回调地址,需要是EWS地址。如果不设置，会跳转到店铺首页
        :param user_nick: 商家nick
        :param user_id: 商家ID
        """
        return self._top_request(
            "taobao.store.followurl.get",
            {
                "callback_url": callback_url,
                "user_nick": user_nick,
                "user_id": user_id
            },
            result_processor=lambda x: x["url"]
        )

    def taobao_shop_seller_get(
            self,
            fields
    ):
        """
        卖家店铺基础信息查询
        获取卖家店铺的基本信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42908

        :param fields: 需返回的字段列表。可选值：Shop 结构中的所有字段；多个字段之间用逗号(,)分隔
        """
        return self._top_request(
            "taobao.shop.seller.get",
            {
                "fields": fields
            },
            result_processor=lambda x: x["shop"]
        )


class TbFenXiao(DingTalkBaseAPI):
    """
    分销API
    """

    def taobao_fenxiao_orders_get(
            self,
            status='',
            start_created='',
            end_created='',
            time_type='',
            page_no='',
            page_size='',
            purchase_order_id='',
            fields='',
            tc_order_id=''
    ):
        """
        查询采购单信息
        分销商或供应商均可用此接口查询采购单信息（代销）； (发货请调用物流API中的发货接口taobao.logistics.offline.send 进行发货，需要注意的是这里是供应商发货，因此调发货接口时需要传人供应商账号对应的sessionkey，tid 需传入供销平台的采购单（即fenxiao_id  分销流水号）)。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=180

        :param status: 交易状态，不传默认查询所有采购单根据身份选择自身状态可选值: *供应商： WAIT_SELLER_SEND_GOODS(等待发货) WAIT_SELLER_CONFIRM_PAY(待确认收款) WAIT_BUYER_PAY(等待付款) WAIT_BUYER_CONFIRM_GOODS(已发货) TRADE_REFUNDING(退款中) TRADE_FINISHED(采购成功) TRADE_CLOSED(已关闭) *分销商： WAIT_BUYER_PAY(等待付款) WAIT_BUYER_CONFIRM_GOODS(待收货确认) TRADE_FOR_PAY(已付款) TRADE_REFUNDING(退款中) TRADE_FINISHED(采购成功) TRADE_CLOSED(已关闭)
        :param start_created: 起始时间 格式 yyyy-MM-dd HH:mm:ss.支持到秒的查询。若不传时分秒，默认为0时0分0秒。若purchase_order_id没传，则此参数必传。
        :param end_created: 结束时间 格式 yyyy-MM-dd HH:mm:ss.支持到秒的查询。若不传时分秒，默认为0时0分0秒。若purchase_order_id没传，则此参数必传。
        :param time_type: 可选值：trade_time_type(采购单按照成交时间范围查询),update_time_type(采购单按照更新时间范围查询)
        :param page_no: 页码。（大于0的整数。默认为1）
        :param page_size: 每页条数。（每页条数不超过50条）
        :param purchase_order_id: 采购单编号或分销流水号，若其它参数没传，则此参数必传。
        :param fields: 多个字段用','分隔。<br/><br/>fields<br/>如果为空：返回所有采购单对象(purchase_orders)字段。<br/>如果不为空：返回指定采购单对象(purchase_orders)字段。<br/><br/>例1：<br/>sub_purchase_orders.tc_order_id 表示只返回tc_order_id <br/>例2：<br/>sub_purchase_orders表示只返回子采购单列表
        :param tc_order_id: 采购单下游买家订单id
        """
        return self._top_request(
            "taobao.fenxiao.orders.get",
            {
                "status": status,
                "start_created": start_created,
                "end_created": end_created,
                "time_type": time_type,
                "page_no": page_no,
                "page_size": page_size,
                "purchase_order_id": purchase_order_id,
                "fields": fields,
                "tc_order_id": tc_order_id
            }
        )

    def taobao_fenxiao_product_add(
            self,
            name,
            productcat_id,
            standard_price,
            retail_price_low,
            retail_price_high,
            category_id,
            quantity,
            desc,
            prov,
            city,
            postage_type='',
            have_invoice='',
            have_quarantee='',
            trade_type='',
            cost_price='',
            outer_id='',
            postage_id='',
            postage_ordinary='',
            postage_fast='',
            postage_ems='',
            discount_id='',
            is_authz='yes',
            pic_path='',
            image='',
            properties='',
            property_alias='',
            input_properties='',
            sku_standard_prices='',
            sku_cost_prices='',
            sku_outer_ids='',
            sku_quantitys='',
            sku_properties='',
            dealer_cost_price='',
            sku_dealer_cost_prices='',
            item_id='',
            standard_retail_price='',
            spu_id=''
    ):
        """
        添加产品
        添加分销平台产品数据。业务逻辑与分销系统前台页面一致。<br/><br/>    * 产品图片默认为空<br/>    * 产品发布后默认为下架状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=325

        :param name: 产品名称，长度不超过60个字节。
        :param productcat_id: 产品线ID
        :param standard_price: 采购基准价格，单位：元。例：“10.56”。必须在0.01元到10000000元之间。
        :param retail_price_low: 最低零售价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。
        :param retail_price_high: 最高零售价，单位：元。例：“10.56”。必须在0.01元到10000000元之间，最高零售价必须大于最低零售价。
        :param category_id: 所属类目id，参考Taobao.itemcats.get，不支持成人等类目，输入成人类目id保存提示类目属性错误。
        :param quantity: 产品库存必须是1到999999。
        :param desc: 产品描述，长度为5到25000字符。
        :param prov: 所在地：省，例：“浙江”
        :param city: 所在地：市，例：“杭州”
        :param postage_type: 运费类型，可选值：seller（供应商承担运费）、buyer（分销商承担运费）,默认seller。
        :param have_invoice: 是否有发票，可选值：false（否）、true（是），默认false。
        :param have_quarantee: 是否有保修，可选值：false（否）、true（是），默认false。
        :param trade_type: 分销方式：AGENT（只做代销，默认值）、DEALER（只做经销）、ALL（代销和经销都做）
        :param cost_price: 代销采购价格，单位：元。例：“10.56”。必须在0.01元到10000000元之间。
        :param outer_id: 商家编码，长度不能超过60个字节。
        :param postage_id: 运费模板ID，参考taobao.postages.get。
        :param postage_ordinary: 平邮费用，单位：元。例：“10.56”。 大小为0.01元到999999元之间。
        :param postage_fast: 快递费用，单位：元。例：“10.56”。 大小为0.01元到999999元之间。
        :param postage_ems: ems费用，单位：元。例：“10.56”。 大小为0.00元到999999元之间。
        :param discount_id: 折扣ID
        :param is_authz: 添加产品时，添加入参isAuthz:yes|no <br/>yes:需要授权 <br/>no:不需要授权 <br/>默认是需要授权
        :param pic_path: 产品主图图片空间相对路径或绝对路径
        :param image: 产品主图，大小不超过500k，格式为gif,jpg,jpeg,png,bmp等图片
        :param properties: 产品属性，格式为pid:vid;pid:vid
        :param property_alias: 属性别名，格式为：pid:vid:alias;pid:vid:alias（alias为别名）
        :param input_properties: 自定义属性。格式为pid:value;pid:value
        :param sku_standard_prices: sku的采购基准价。如果多个，用逗号分隔，并与其他sku信息保持相同顺序
        :param sku_cost_prices: sku的采购价。如果多个，用逗号分隔，并与其他sku信息保持相同顺序
        :param sku_outer_ids: sku的商家编码。如果多个，用逗号分隔，并与其他sku信息保持相同顺序
        :param sku_quantitys: sku的库存。如果多个，用逗号分隔，并与其他sku信息保持相同顺序
        :param sku_properties: sku的属性。如果多个，用逗号分隔，并与其他sku信息保持相同顺序
        :param dealer_cost_price: 经销采购价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。
        :param sku_dealer_cost_prices: sku的经销采购价。如果多个，用逗号分隔，并与其他sku信息保持相同顺序。其中每个值的单位：元。例：“10.56,12.3”。必须在0.01元到10000000元之间。
        :param item_id: 导入的商品ID
        :param standard_retail_price: 零售基准价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。
        :param spu_id: 产品spuID，达尔文产品必须要传spuID，否则不能发布。其他非达尔文产品，看情况传
        """
        return self._top_request(
            "taobao.fenxiao.product.add",
            {
                "name": name,
                "productcat_id": productcat_id,
                "standard_price": standard_price,
                "retail_price_low": retail_price_low,
                "retail_price_high": retail_price_high,
                "category_id": category_id,
                "quantity": quantity,
                "desc": desc,
                "prov": prov,
                "city": city,
                "postage_type": postage_type,
                "have_invoice": have_invoice,
                "have_quarantee": have_quarantee,
                "trade_type": trade_type,
                "cost_price": cost_price,
                "outer_id": outer_id,
                "postage_id": postage_id,
                "postage_ordinary": postage_ordinary,
                "postage_fast": postage_fast,
                "postage_ems": postage_ems,
                "discount_id": discount_id,
                "is_authz": is_authz,
                "pic_path": pic_path,
                "image": image,
                "properties": properties,
                "property_alias": property_alias,
                "input_properties": input_properties,
                "sku_standard_prices": sku_standard_prices,
                "sku_cost_prices": sku_cost_prices,
                "sku_outer_ids": sku_outer_ids,
                "sku_quantitys": sku_quantitys,
                "sku_properties": sku_properties,
                "dealer_cost_price": dealer_cost_price,
                "sku_dealer_cost_prices": sku_dealer_cost_prices,
                "item_id": item_id,
                "standard_retail_price": standard_retail_price,
                "spu_id": spu_id
            }
        )

    def taobao_fenxiao_product_update(
            self,
            pid,
            postage_type='',
            have_invoice='',
            have_quarantee='',
            status='',
            name='',
            standard_price='',
            cost_price='',
            retail_price_low='',
            retail_price_high='',
            outer_id='',
            quantity='',
            desc='',
            prov='',
            city='',
            postage_id='',
            postage_ordinary='',
            postage_fast='',
            postage_ems='',
            sku_ids='',
            sku_cost_prices='',
            sku_quantitys='',
            sku_outer_ids='',
            discount_id='',
            sku_standard_prices='',
            sku_properties='',
            sku_properties_del='',
            is_authz='',
            pic_path='',
            image='',
            properties='',
            property_alias='',
            input_properties='',
            dealer_cost_price='',
            sku_dealer_cost_prices='',
            category_id='',
            standard_retail_price=''
    ):
        """
        更新产品
        更新分销平台产品数据，不传更新数据返回失败<br><br/>1. 对sku进行增、删操作时，原有的sku_ids字段会被忽略，请使用sku_properties和sku_properties_del。<br>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=326

        :param pid: 产品ID
        :param postage_type: 运费类型，可选值：seller（供应商承担运费）、buyer（分销商承担运费）。
        :param have_invoice: 是否有发票，可选值：false（否）、true（是），默认false。
        :param have_quarantee: 是否有保修，可选值：false（否）、true（是），默认false。
        :param status: 发布状态，可选值：up（上架）、down（下架）、delete（删除），输入非法字符则忽略。
        :param name: 产品名称，长度不超过60个字节。
        :param standard_price: 采购基准价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。
        :param cost_price: 代销采购价格，单位：元。例：“10.56”。必须在0.01元到10000000元之间。
        :param retail_price_low: 最低零售价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。
        :param retail_price_high: 最高零售价，单位：元。例：“10.56”。必须在0.01元到10000000元之间，最高零售价必须大于最低零售价。
        :param outer_id: 商家编码，长度不能超过60个字节。
        :param quantity: 产品库存必须是1到999999。
        :param desc: 产品描述，长度为5到25000字符。
        :param prov: 所在地：省，例：“浙江”
        :param city: 所在地：市，例：“杭州”
        :param postage_id: 运费模板ID，参考taobao.postages.get。更新时必须指定运费类型为 buyer，否则不更新。
        :param postage_ordinary: 平邮费用，单位：元。例：“10.56”。大小为0.01元到999999元之间。更新时必须指定运费类型为buyer，否则不更新。
        :param postage_fast: 快递费用，单位：元。例：“10.56”。大小为0.01元到999999元之间。更新时必须指定运费类型为buyer，否则不更新。
        :param postage_ems: ems费用，单位：元。例：“10.56”。大小为0.01元到999999元之间。更新时必须指定运费类型为buyer，否则不更新。
        :param sku_ids: sku id列表，例：1001,1002,1003。如果传入sku_properties将忽略此参数。
        :param sku_cost_prices: sku采购价格，单位元，例：'10.50,11.00,20.50'，字段必须和上面的sku_ids或sku_properties保持一致。
        :param sku_quantitys: sku库存，单位元，例：'10,20,30'，字段必须和sku_ids或sku_properties保持一致。
        :param sku_outer_ids: sku商家编码 ，单位元，例：'S1000,S1002,S1003'，字段必须和上面的id或sku_properties保持一致，如果没有可以写成',,'
        :param discount_id: 折扣ID
        :param sku_standard_prices: sku采购基准价，单位元，例：'10.50,11.00,20.50'，字段必须和上面的sku_ids或sku_properties保持一致。
        :param sku_properties: sku属性。格式:pid:vid;pid:vid,表示一组属性如:1627207:3232483;1630696:3284570,表示一组:机身颜色:军绿色;手机套餐:一电一充。多组之间用逗号“,”区分。(属性的pid调用taobao.itemprops.get取得，属性值的vid用taobao.itempropvalues.get取得vid)<br/>通过此字段可新增和更新sku。若传入此值将忽略sku_ids字段。sku其他字段与此值保持一致。
        :param sku_properties_del: 根据sku属性删除sku信息。需要按组删除属性。
        :param is_authz: 产品是否需要授权isAuthz:yes|no <br/>yes:需要授权 <br/>no:不需要授权
        :param pic_path: 产品主图图片空间相对路径或绝对路径
        :param image: 主图图片，如果pic_path参数不空，则优先使用pic_path，忽略该参数
        :param properties: 产品属性
        :param property_alias: 属性别名
        :param input_properties: 自定义属性。格式为pid:value;pid:value
        :param dealer_cost_price: 经销采购价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。
        :param sku_dealer_cost_prices: sku的经销采购价。如果多个，用逗号分隔，并与其他sku信息保持相同顺序。其中每个值的单位：元。例：“10.56,12.3”。必须在0.01元到10000000元之间。
        :param category_id: 所属类目id，参考Taobao.itemcats.get，不支持成人等类目，输入成人类目id保存提示类目属性错误。
        :param standard_retail_price: 零售基准价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。
        """
        return self._top_request(
            "taobao.fenxiao.product.update",
            {
                "pid": pid,
                "postage_type": postage_type,
                "have_invoice": have_invoice,
                "have_quarantee": have_quarantee,
                "status": status,
                "name": name,
                "standard_price": standard_price,
                "cost_price": cost_price,
                "retail_price_low": retail_price_low,
                "retail_price_high": retail_price_high,
                "outer_id": outer_id,
                "quantity": quantity,
                "desc": desc,
                "prov": prov,
                "city": city,
                "postage_id": postage_id,
                "postage_ordinary": postage_ordinary,
                "postage_fast": postage_fast,
                "postage_ems": postage_ems,
                "sku_ids": sku_ids,
                "sku_cost_prices": sku_cost_prices,
                "sku_quantitys": sku_quantitys,
                "sku_outer_ids": sku_outer_ids,
                "discount_id": discount_id,
                "sku_standard_prices": sku_standard_prices,
                "sku_properties": sku_properties,
                "sku_properties_del": sku_properties_del,
                "is_authz": is_authz,
                "pic_path": pic_path,
                "image": image,
                "properties": properties,
                "property_alias": property_alias,
                "input_properties": input_properties,
                "dealer_cost_price": dealer_cost_price,
                "sku_dealer_cost_prices": sku_dealer_cost_prices,
                "category_id": category_id,
                "standard_retail_price": standard_retail_price
            }
        )

    def taobao_fenxiao_productcats_get(
            self,
            fields=''
    ):
        """
        查询产品线列表
        查询供应商的所有产品线数据。根据登陆用户来查询，不需要其他入参
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=327

        :param fields: 返回字段列表
        """
        return self._top_request(
            "taobao.fenxiao.productcats.get",
            {
                "fields": fields
            }
        )

    def taobao_fenxiao_products_get(
            self,
            outer_id='',
            productcat_id='',
            pids='',
            fields='',
            start_modified='',
            end_modified='',
            page_no='',
            page_size='',
            sku_number='',
            is_authz='',
            item_ids=''
    ):
        """
        查询产品列表
        查询供应商的产品数据。<br/><br/>    * 入参传入pids将优先查询，即只按这个条件查询。<br/>    *入参传入sku_number将优先查询(没有传入pids)，即只按这个条件查询(最多显示50条)<br/>    * 入参fields传skus将查询sku的数据，不传该参数默认不查询，返回产品的其它信息。<br/>    * 入参fields传入images将查询多图数据，不传只返回主图数据。<br/>    * 入参fields仅对传入pids生效（只有按ID查询时，才能查询额外的数据）<br/>    * 查询结果按照产品发布时间倒序，即时间近的数据在前。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=328

        :param outer_id: 商家编码
        :param productcat_id: 产品线ID
        :param pids: 产品ID列表（最大限制30），用逗号分割，例如：“1001,1002,1003,1004,1005”
        :param fields: 指定查询额外的信息，可选值：skus（sku数据）、images（多图），多个可选值用逗号分割。
        :param start_modified: 开始修改时间
        :param end_modified: 结束修改时间
        :param page_no: 页码（大于0的整数，默认1）
        :param page_size: 每页记录数（默认20，最大50）
        :param sku_number: sku商家编码
        :param is_authz: 查询产品列表时，查询入参“是否需要授权”<br/>yes:需要授权 <br/>no:不需要授权
        :param item_ids: 可根据导入的商品ID列表查询，优先级次于产品ID、sku_numbers，高于其他分页查询条件。最大限制20，用逗号分割，例如：“1001,1002,1003,1004,1005”
        """
        return self._top_request(
            "taobao.fenxiao.products.get",
            {
                "outer_id": outer_id,
                "productcat_id": productcat_id,
                "pids": pids,
                "fields": fields,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "page_no": page_no,
                "page_size": page_size,
                "sku_number": sku_number,
                "is_authz": is_authz,
                "item_ids": item_ids
            }
        )

    def taobao_fenxiao_distributors_get(
            self,
            nicks
    ):
        """
        获取分销商信息
        查询和当前登录供应商有合作关系的分销商的信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10379

        :param nicks: 分销商用户名列表。多个之间以“,”分隔;最多支持50个分销商用户名。
        """
        return self._top_request(
            "taobao.fenxiao.distributors.get",
            {
                "nicks": nicks
            },
            result_processor=lambda x: x["distributors"]
        )

    def taobao_fenxiao_cooperation_update(
            self,
            distributor_id,
            grade_id,
            trade_type=''
    ):
        """
        更新合作关系等级
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        供应商更新合作的分销商等级
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10568

        :param distributor_id: 分销商ID
        :param grade_id: 等级ID(0代表取消)
        :param trade_type: 分销方式(新增)： AGENT(代销)、DEALER(经销)(默认为代销)
        """
        return self._top_request(
            "taobao.fenxiao.cooperation.update",
            {
                "distributor_id": distributor_id,
                "grade_id": grade_id,
                "trade_type": trade_type
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_grades_get(
            self
    ):
        """
        分销商等级查询
        根据供应商ID，查询他的分销商等级信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10569

        """
        return self._top_request(
            "taobao.fenxiao.grades.get",
            result_processor=lambda x: x["fenxiao_grades"]
        )

    def taobao_fenxiao_discounts_get(
            self,
            discount_id='',
            ext_fields=''
    ):
        """
        获取折扣信息
        查询折扣信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10571

        :param discount_id: 折扣ID
        :param ext_fields: 指定查询额外的信息，可选值：DETAIL（查询折扣详情），多个可选值用逗号分割。（只允许指定折扣ID情况下使用）
        """
        return self._top_request(
            "taobao.fenxiao.discounts.get",
            {
                "discount_id": discount_id,
                "ext_fields": ext_fields
            }
        )

    def taobao_fenxiao_order_confirm_paid(
            self,
            purchase_order_id,
            confirm_remark=''
    ):
        """
        确认收款
        供应商确认收款（非支付宝交易）。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10692

        :param purchase_order_id: 采购单编号。
        :param confirm_remark: 确认支付信息（字数小于100）
        """
        return self._top_request(
            "taobao.fenxiao.order.confirm.paid",
            {
                "purchase_order_id": purchase_order_id,
                "confirm_remark": confirm_remark
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_distributor_items_get(
            self,
            distributor_id='',
            start_modified='',
            end_modified='',
            page_no='',
            page_size='',
            product_id=''
    ):
        """
        查询商品下载记录
        供应商查询分销商商品下载记录。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10693

        :param distributor_id: 分销商ID 。
        :param start_modified: 设置开始时间。空为不设置。
        :param end_modified: 设置结束时间,空为不设置。
        :param page_no: 页码（大于0的整数，默认1）
        :param page_size: 每页记录数（默认20，最大50）
        :param product_id: 产品ID
        """
        return self._top_request(
            "taobao.fenxiao.distributor.items.get",
            {
                "distributor_id": distributor_id,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "page_no": page_no,
                "page_size": page_size,
                "product_id": product_id
            }
        )

    def taobao_fenxiao_cooperation_get(
            self,
            status='',
            start_date='',
            end_date='',
            trade_type='',
            page_no='',
            page_size=''
    ):
        """
        供应商或分销商获取合作关系信息
        获取供应商的合作关系信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10694

        :param status: 合作状态： NORMAL(合作中)、 ENDING(终止中) 、END (终止)
        :param start_date: 合作开始时间yyyy-MM-dd HH:mm:ss
        :param end_date: 合作结束时间yyyy-MM-dd HH:mm:ss
        :param trade_type: 分销方式：AGENT(代销) 、DEALER（经销）
        :param page_no: 页码（大于0的整数，默认1）
        :param page_size: 每页记录数（默认20，最大50）
        """
        return self._top_request(
            "taobao.fenxiao.cooperation.get",
            {
                "status": status,
                "start_date": start_date,
                "end_date": end_date,
                "trade_type": trade_type,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_fenxiao_login_user_get(
            self
    ):
        """
        获取分销用户登录信息
        获取用户登录信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10781

        """
        return self._top_request(
            "taobao.fenxiao.login.user.get",
            result_processor=lambda x: x["login_user"]
        )

    def taobao_fenxiao_product_sku_delete(
            self,
            product_id,
            properties
    ):
        """
        产品SKU删除接口
        根据sku properties删除sku数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10944

        :param product_id: 产品id
        :param properties: sku属性
        """
        return self._top_request(
            "taobao.fenxiao.product.sku.delete",
            {
                "product_id": product_id,
                "properties": properties
            }
        )

    def taobao_fenxiao_product_sku_add(
            self,
            product_id,
            standard_price,
            properties,
            quantity='',
            agent_cost_price='',
            sku_number='',
            dealer_cost_price=''
    ):
        """
        产品sku添加接口
        添加产品SKU信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10945

        :param product_id: 产品ID
        :param standard_price: 采购基准价，最大值1000000000
        :param properties: sku属性
        :param quantity: sku产品库存，在0到1000000之间，如果不传，则库存为0
        :param agent_cost_price: 代销采购价
        :param sku_number: 商家编码
        :param dealer_cost_price: 经销采购价
        """
        return self._top_request(
            "taobao.fenxiao.product.sku.add",
            {
                "product_id": product_id,
                "standard_price": standard_price,
                "properties": properties,
                "quantity": quantity,
                "agent_cost_price": agent_cost_price,
                "sku_number": sku_number,
                "dealer_cost_price": dealer_cost_price
            }
        )

    def taobao_fenxiao_product_sku_update(
            self,
            product_id,
            properties,
            quantity='',
            standard_price='',
            agent_cost_price='',
            sku_number='',
            dealer_cost_price=''
    ):
        """
        产品sku编辑接口
        产品SKU信息更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10946

        :param product_id: 产品ID
        :param properties: sku属性
        :param quantity: 产品SKU库存
        :param standard_price: 采购基准价
        :param agent_cost_price: 代销采购价
        :param sku_number: 商家编码
        :param dealer_cost_price: 经销采购价
        """
        return self._top_request(
            "taobao.fenxiao.product.sku.update",
            {
                "product_id": product_id,
                "properties": properties,
                "quantity": quantity,
                "standard_price": standard_price,
                "agent_cost_price": agent_cost_price,
                "sku_number": sku_number,
                "dealer_cost_price": dealer_cost_price
            }
        )

    def taobao_fenxiao_product_skus_get(
            self,
            product_id
    ):
        """
        SKU查询接口
        产品sku查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10947

        :param product_id: 产品ID
        """
        return self._top_request(
            "taobao.fenxiao.product.skus.get",
            {
                "product_id": product_id
            }
        )

    def taobao_fenxiao_product_image_upload(
            self,
            product_id,
            position,
            pic_path='',
            image='',
            properties=''
    ):
        """
        产品图片上传
        产品主图图片空间相对路径或绝对路径添加或更新，或者是图片上传。如果指定位置的图片已存在，则覆盖原有信息。如果位置为1,自动设为主图；如果位置为0，表示属性图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10948

        :param product_id: 产品ID
        :param position: 图片位置，0-14之间。0：操作sku属性图片，1：主图，2-5：细节图，6-14：额外主图
        :param pic_path: 产品主图图片空间相对路径或绝对路径
        :param image: 产品图片
        :param properties: properties表示sku图片的属性。key:value形式，key是pid，value是vid。如果position是0的话，则properties需要是必传项
        """
        return self._top_request(
            "taobao.fenxiao.product.image.upload",
            {
                "product_id": product_id,
                "position": position,
                "pic_path": pic_path,
                "image": image,
                "properties": properties
            }
        )

    def taobao_fenxiao_product_image_delete(
            self,
            product_id,
            position,
            properties=''
    ):
        """
        产品图片删除
        产品图片删除，只删除图片信息，不真正删除图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10949

        :param product_id: 产品ID
        :param position: 图片位置
        :param properties: properties表示sku图片的属性。key:value形式，key是pid，value是vid。如果position是0的话，则properties需要是必传项
        """
        return self._top_request(
            "taobao.fenxiao.product.image.delete",
            {
                "product_id": product_id,
                "position": position,
                "properties": properties
            }
        )

    def taobao_fenxiao_order_remark_update(
            self,
            purchase_order_id,
            supplier_memo,
            supplier_memo_flag=''
    ):
        """
        修改采购单备注
        供应商修改采购单备注
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11106

        :param purchase_order_id: 采购单编号
        :param supplier_memo: 备注内容(供应商操作)
        :param supplier_memo_flag: 旗子的标记，1-5之间的数字。非1-5之间，都采用1作为默认。<br/>1:红色<br/>2:黄色<br/>3:绿色<br/>4:蓝色<br/>5:粉红色
        """
        return self._top_request(
            "taobao.fenxiao.order.remark.update",
            {
                "purchase_order_id": purchase_order_id,
                "supplier_memo": supplier_memo,
                "supplier_memo_flag": supplier_memo_flag
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_trademonitor_get(
            self,
            start_created='',
            end_created='',
            page_no='1',
            page_size='50',
            product_id='',
            distributor_nick='',
            fields=''
    ):
        """
        查询经销商品监控
        仅限供应商调用此接口查询经销商品监控信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21391

        :param start_created: 起始时间 格式 yyyy-MM-dd HH:mm:ss.支持到秒的查询。若不传时分秒，默认为0时0分0秒。
        :param end_created: 结束时间 格式 yyyy-MM-dd HH:mm:ss.支持到秒的查询。若不传时分秒，默认为0时0分0秒。
        :param page_no: 页码。（大于0的整数。小于1按1计）
        :param page_size: 每页条数。（每页条数不超过50条，超过50或小于0均按50计）
        :param product_id: 产品id
        :param distributor_nick: 经销商的淘宝账号
        :param fields: 多个字段用','分隔。 fields 如果为空：返回所有采购单对象(purchase_orders)字段。 如果不为空：返回指定采购单对象(purchase_orders)字段。例如：trade_monitors.item_title表示只返回item_title
        """
        return self._top_request(
            "taobao.fenxiao.trademonitor.get",
            {
                "start_created": start_created,
                "end_created": end_created,
                "page_no": page_no,
                "page_size": page_size,
                "product_id": product_id,
                "distributor_nick": distributor_nick,
                "fields": fields
            }
        )

    def taobao_fenxiao_product_gradeprice_update(
            self,
            product_id,
            target_type,
            ids,
            prices,
            trade_type='',
            sku_id=''
    ):
        """
        根据sku设置折扣价
        供应商可以针对产品不同的sku，指定对应交易类型（代销or经销）方式下，设定折扣方式（按等级or指定分销商）以及对应优惠后的采购价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21420

        :param product_id: 产品Id
        :param target_type: 选择折扣方式：GRADE（按等级进行设置）;DISCITUTOR(按分销商进行设置）。例如'GRADE,DISTRIBUTOR'
        :param ids: 会员等级的id或者分销商id，例如：”1001,2001,1002”
        :param prices: 优惠价格,大小为0到100000000之间的整数或两位小数，例：优惠价格为：100元2角5分，传入的参数应写成：100.25
        :param trade_type: 交易类型： AGENT(代销)、DEALER(经销)，ALL(代销和经销)
        :param sku_id: skuId，如果产品有skuId,必须要输入skuId;没有skuId的时候不必选
        """
        return self._top_request(
            "taobao.fenxiao.product.gradeprice.update",
            {
                "product_id": product_id,
                "target_type": target_type,
                "ids": ids,
                "prices": prices,
                "trade_type": trade_type,
                "sku_id": sku_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_product_map_add(
            self,
            product_id,
            sc_item_id='',
            sku_ids='',
            sc_item_ids='',
            not_check_outer_code='true'
    ):
        """
        创建分销和后端商品映射关系
        创建分销和供应链商品映射关系。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21589

        :param product_id: 分销产品id。
        :param sc_item_id: 后端商品id（如果当前分销产品没有sku和后端商品时需要指定）。
        :param sku_ids: 分销产品的sku id。逗号分隔，顺序需要保证与sc_item_ids一致（没有sku就不传）。
        :param sc_item_ids: 在有sku的情况下，与各个sku对应的后端商品id列表。逗号分隔，顺序需要保证与sku_ids一致。
        :param not_check_outer_code: 是否需要校验商家编码，true不校验，false校验。
        """
        return self._top_request(
            "taobao.fenxiao.product.map.add",
            {
                "product_id": product_id,
                "sc_item_id": sc_item_id,
                "sku_ids": sku_ids,
                "sc_item_ids": sc_item_ids,
                "not_check_outer_code": not_check_outer_code
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_scitem_outercode_get(
            self,
            outer_code
    ):
        """
        根据outerCode查询商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21593

        :param outer_code: 商品编码
        """
        return self._top_request(
            "taobao.scitem.outercode.get",
            {
                "outer_code": outer_code
            },
            result_processor=lambda x: x["sc_item"]
        )

    def taobao_scitem_get(
            self,
            item_id
    ):
        """
        根据id查询商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21594

        :param item_id: 商品id
        """
        return self._top_request(
            "taobao.scitem.get",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["sc_item"]
        )

    def taobao_scitem_query(
            self,
            item_name='',
            outer_code='',
            bar_code='',
            item_type='',
            wms_code='',
            page_index='',
            page_size=''
    ):
        """
        查询后端商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21595

        :param item_name: 商品名称
        :param outer_code: 商家给商品的一个编码
        :param bar_code: 条形码
        :param item_type: ITEM类型(只允许输入以下英文或空) NORMAL 0:普通商品; COMBINE 1:是否是组合商品 DISTRIBUTION
        :param wms_code: 仓库编码
        :param page_index: 当前页码数
        :param page_size: 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录
        """
        return self._top_request(
            "taobao.scitem.query",
            {
                "item_name": item_name,
                "outer_code": outer_code,
                "bar_code": bar_code,
                "item_type": item_type,
                "wms_code": wms_code,
                "page_index": page_index,
                "page_size": page_size
            }
        )

    def taobao_scitem_update(
            self,
            item_id='',
            outer_code='',
            item_name='',
            item_type='0',
            update_properties='',
            bar_code='',
            wms_code='',
            is_friable='',
            is_dangerous='',
            is_costly='',
            is_warranty='',
            weight='',
            length='',
            width='',
            height='',
            volume='',
            price='',
            remark='',
            matter_status='',
            brand_id='',
            brand_name='',
            spu_id='',
            remove_properties='',
            is_area_sale=''
    ):
        """
        根据商品ID或商家编码修改后端商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21596

        :param item_id: 后端商品ID，跟outer_code必须指定一个
        :param outer_code: 商家编码，跟item_id必须指定一个
        :param item_name: 商品名称
        :param item_type: 0.普通供应链商品 1.供应链组合主商品
        :param update_properties: 需要更新的商品属性格式是  p1:v1,p2:v2,p3:v3
        :param bar_code: 条形码
        :param wms_code: 仓储商编码
        :param is_friable: 是否易碎 0：不是  1：是
        :param is_dangerous: 是否危险 0：不是  0：是
        :param is_costly: 是否是贵重品 0:不是 1：是
        :param is_warranty: 是否保质期：0:不是 1：是
        :param weight: weight
        :param length: 长度 单位：mm
        :param width: 宽 单位：mm
        :param height: 高 单位：mm
        :param volume: 体积：立方厘米
        :param price: price
        :param remark: remark
        :param matter_status: 0:液体，1：粉体，2：固体
        :param brand_id: 品牌id
        :param brand_name: brand_Name
        :param spu_id: 淘宝SKU产品级编码CSPU ID
        :param remove_properties: 移除商品属性P列表,P由系统分配：p1；p2
        :param is_area_sale: 1表示区域销售，0或是空是非区域销售
        """
        return self._top_request(
            "taobao.scitem.update",
            {
                "item_id": item_id,
                "outer_code": outer_code,
                "item_name": item_name,
                "item_type": item_type,
                "update_properties": update_properties,
                "bar_code": bar_code,
                "wms_code": wms_code,
                "is_friable": is_friable,
                "is_dangerous": is_dangerous,
                "is_costly": is_costly,
                "is_warranty": is_warranty,
                "weight": weight,
                "length": length,
                "width": width,
                "height": height,
                "volume": volume,
                "price": price,
                "remark": remark,
                "matter_status": matter_status,
                "brand_id": brand_id,
                "brand_name": brand_name,
                "spu_id": spu_id,
                "remove_properties": remove_properties,
                "is_area_sale": is_area_sale
            },
            result_processor=lambda x: x["update_rows"]
        )

    def taobao_scitem_add(
            self,
            item_name,
            outer_code,
            item_type='0',
            properties='',
            bar_code='',
            wms_code='',
            is_friable='',
            is_dangerous='',
            is_costly='',
            is_warranty='',
            weight='',
            length='',
            width='',
            height='',
            volume='',
            price='',
            remark='',
            matter_status='',
            brand_id='',
            brand_name='',
            spu_id='',
            is_area_sale='0'
    ):
        """
        发布后端商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21597

        :param item_name: 商品名称
        :param outer_code: 商家编码
        :param item_type: 0.普通供应链商品 1.供应链组合主商品
        :param properties: 商品属性格式是  p1:v1,p2:v2,p3:v3
        :param bar_code: 条形码
        :param wms_code: 仓储商编码
        :param is_friable: 是否易碎 0：不是  1：是
        :param is_dangerous: 是否危险 0：不是  1：是
        :param is_costly: 是否是贵重品 0:不是 1：是
        :param is_warranty: 是否保质期：0:不是 1：是
        :param weight: 重量 单位：g
        :param length: 长度 单位：mm
        :param width: 宽 单位：mm
        :param height: 高 单位：mm
        :param volume: 体积：立方厘米
        :param price: 价格 单位：分
        :param remark: remark
        :param matter_status: 0:液体，1：粉体，2：固体
        :param brand_id: 品牌id
        :param brand_name: brand_Name
        :param spu_id: spuId或是cspuid
        :param is_area_sale: 1表示区域销售，0或是空是非区域销售
        """
        return self._top_request(
            "taobao.scitem.add",
            {
                "item_name": item_name,
                "outer_code": outer_code,
                "item_type": item_type,
                "properties": properties,
                "bar_code": bar_code,
                "wms_code": wms_code,
                "is_friable": is_friable,
                "is_dangerous": is_dangerous,
                "is_costly": is_costly,
                "is_warranty": is_warranty,
                "weight": weight,
                "length": length,
                "width": width,
                "height": height,
                "volume": volume,
                "price": price,
                "remark": remark,
                "matter_status": matter_status,
                "brand_id": brand_id,
                "brand_name": brand_name,
                "spu_id": spu_id,
                "is_area_sale": is_area_sale
            },
            result_processor=lambda x: x["sc_item"]
        )

    def taobao_scitem_map_delete(
            self,
            sc_item_id,
            user_nick=''
    ):
        """
        失效指定用户的商品与后端商品的映射关系
        根据后端商品Id，失效指定用户的商品与后端商品的映射关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21598

        :param sc_item_id: 后台商品ID
        :param user_nick: 店铺用户nick。 如果该参数为空则删除后端商品与当前调用人的商品映射关系;如果不为空则删除指定用户与后端商品的映射关系
        """
        return self._top_request(
            "taobao.scitem.map.delete",
            {
                "sc_item_id": sc_item_id,
                "user_nick": user_nick
            },
            result_processor=lambda x: x["module"]
        )

    def taobao_scitem_map_query(
            self,
            item_id,
            sku_id=''
    ):
        """
        查找IC商品或分销商品与后端商品的关联信息
        查找IC商品或分销商品与后端商品的关联信息。skuId如果不传就查找该itemId下所有的sku
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21599

        :param item_id: map_type为1：前台ic商品id<br/>map_type为2：分销productid
        :param sku_id: map_type为1：前台ic商品skuid <br/>map_type为2：分销商品的skuid
        """
        return self._top_request(
            "taobao.scitem.map.query",
            {
                "item_id": item_id,
                "sku_id": sku_id
            },
            result_processor=lambda x: x["sc_item_maps"]
        )

    def taobao_scitem_map_add(
            self,
            item_id,
            sku_id='',
            sc_item_id='',
            outer_code='',
            need_check='false'
    ):
        """
        创建IC商品与后端商品的映射关系
        创建IC商品或分销商品与后端商品的映射关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21600

        :param item_id: 前台ic商品id
        :param sku_id: 前台ic商品skuid
        :param sc_item_id: sc_item_id和outer_code 其中一个不能为空
        :param outer_code: sc_item_id和outer_code 其中一个不能为空
        :param need_check: 默认值为false<br/>true:进行高级校验,前端商品或SKU的商家编码必须与后端商品的商家编码一致，否则会拒绝关联<br/>false:不进行高级校验
        """
        return self._top_request(
            "taobao.scitem.map.add",
            {
                "item_id": item_id,
                "sku_id": sku_id,
                "sc_item_id": sc_item_id,
                "outer_code": outer_code,
                "need_check": need_check
            },
            result_processor=lambda x: x["outer_code"]
        )

    def taobao_inventory_store_query(
            self,
            store_code=''
    ):
        """
        查询仓库信息
        查询商家仓信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21601

        :param store_code: 商家的仓库编码
        """
        return self._top_request(
            "taobao.inventory.store.query",
            {
                "store_code": store_code
            },
            result_processor=lambda x: x["store_list"]
        )

    def taobao_inventory_adjust_trade(
            self,
            tb_order_type,
            operate_time,
            biz_unique_code,
            items
    ):
        """
        交易库存调整单
        商家交易调整库存，淘宝交易、B2B经销等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21607

        :param tb_order_type: 订单类型：B2C、B2B
        :param operate_time: 业务操作时间
        :param biz_unique_code: 商家外部定单号
        :param items: 商品初始库存信息： [{ 'TBOrderCode”:”淘宝交易号”,'TBSubOrderCode ':'淘宝子交易单号,赠品可以不填','”isGift”:”TRUE或者FALSE,是否赠品”,storeCode':'商家仓库编码',' scItemId ':'商品后端ID','scItemCode':'商品商家编码',' originScItemId ':'原商品ID','inventoryType':'','quantity':'111','isComplete':'TRUE或者FALSE，是否全部确认出库'}]
        """
        return self._top_request(
            "taobao.inventory.adjust.trade",
            {
                "tb_order_type": tb_order_type,
                "operate_time": operate_time,
                "biz_unique_code": biz_unique_code,
                "items": items
            }
        )

    def taobao_inventory_adjust_external(
            self,
            biz_unique_code,
            items,
            store_code,
            reduce_type='',
            biz_type='',
            operate_type='',
            occupy_operate_code='',
            operate_time=''
    ):
        """
        非交易库存调整单
        商家非交易调整库存，调拨出库、盘点等时调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21608

        :param biz_unique_code: 商家外部定单号
        :param items: 商品初始库存信息： [{'scItemId':'商品后端ID，如果有传scItemCode,参数可以为0','scItemCode':'商品商家编码','inventoryType':'库存类型  1：正常,”direction”: 1: 盘盈 -1: 盘亏,参数可选,'quantity':'数量(正数)'}]
        :param store_code: 商家仓库编码
        :param reduce_type: test
        :param biz_type: 外部订单类型, BALANCE:盘点、NON_TAOBAO_TRADE:非淘宝交易、ALLOCATE:调拨、OTHERS:其他
        :param operate_type: test
        :param occupy_operate_code: 库存占用返回的操作码.operate_type 为OUTBOUND时，如果是确认事先进行过的库存占用，需要传入当时返回的操作码，并且明细必须与申请时保持一致
        :param operate_time: 业务操作时间
        """
        return self._top_request(
            "taobao.inventory.adjust.external",
            {
                "biz_unique_code": biz_unique_code,
                "items": items,
                "store_code": store_code,
                "reduce_type": reduce_type,
                "biz_type": biz_type,
                "operate_type": operate_type,
                "occupy_operate_code": occupy_operate_code,
                "operate_time": operate_time
            }
        )

    def taobao_inventory_store_manage(
            self,
            operate_type,
            store_code,
            store_name,
            store_type,
            address,
            address_area_name,
            alias_name='',
            contact='',
            phone='',
            postcode=''
    ):
        """
        创建或更新仓库
        创建商家仓或者更新商家仓信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21611

        :param operate_type: 参数定义，ADD：新建; UPDATE：更新
        :param store_code: 商家的仓库编码，不允许重复，不允许更新
        :param store_name: 商家的仓库名称，可更新
        :param store_type: 仓库类型，可更新。目前只支持自有仓，TYPE_OWN：自有物理仓
        :param address: 仓库的物理地址，可更新
        :param address_area_name: 仓库区域名，可更新
        :param alias_name: 仓库简称，可更新
        :param contact: 联系人，可更新
        :param phone: 联系电话，可更新
        :param postcode: 邮编，可更新
        """
        return self._top_request(
            "taobao.inventory.store.manage",
            {
                "operate_type": operate_type,
                "store_code": store_code,
                "store_name": store_name,
                "store_type": store_type,
                "address": address,
                "address_area_name": address_area_name,
                "alias_name": alias_name,
                "contact": contact,
                "phone": phone,
                "postcode": postcode
            },
            result_processor=lambda x: x["store_list"]
        )

    def taobao_inventory_initial(
            self,
            store_code,
            items
    ):
        """
        库存初始化
        商家仓库存初始化接口，直接按照商家指定的商品库存数进行填充，没有单据核对，不参与库存对账
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21612

        :param store_code: 商家仓库编码
        :param items: 商品初始库存信息： [{'scItemId':'商品后端ID，如果有传scItemCode,参数可以为0','scItemCode':'商品商家编码','inventoryType':'库存类型  1：正常,2：损坏,3：冻结,10：质押,11-20:用户自定义','quantity':'数量'}]
        """
        return self._top_request(
            "taobao.inventory.initial",
            {
                "store_code": store_code,
                "items": items
            },
            result_processor=lambda x: x["tip_infos"]
        )

    def taobao_inventory_query(
            self,
            sc_item_ids,
            sc_item_codes='',
            seller_nick='',
            store_codes=''
    ):
        """
        查询商品库存信息
        商家查询商品总体库存信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21613

        :param sc_item_ids: 后端商品ID 列表，控制到50个
        :param sc_item_codes: 后端商品的商家编码列表，控制到50个
        :param seller_nick: 卖家昵称
        :param store_codes: 仓库列表:GLY001^GLY002
        """
        return self._top_request(
            "taobao.inventory.query",
            {
                "sc_item_ids": sc_item_ids,
                "sc_item_codes": sc_item_codes,
                "seller_nick": seller_nick,
                "store_codes": store_codes
            }
        )

    def taobao_fenxiao_requisitions_get(
            self,
            status='',
            apply_start='',
            apply_end='',
            page_no='',
            page_size=''
    ):
        """
        合作申请查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21617

        :param status: 申请状态（1-申请中、2-成功、3-被退回、4-已撤消、5-过期）
        :param apply_start: 申请开始时间yyyy-MM-dd
        :param apply_end: 申请结束时间yyyy-MM-dd
        :param page_no: 页码（大于0的整数，默认1）
        :param page_size: 每页记录数（默认20，最大50）
        """
        return self._top_request(
            "taobao.fenxiao.requisitions.get",
            {
                "status": status,
                "apply_start": apply_start,
                "apply_end": apply_end,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_fenxiao_cooperation_productcat_add(
            self,
            cooperate_id,
            product_line_list,
            grade_id=''
    ):
        """
        追加授权产品线
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21618

        :param cooperate_id: 合作关系id
        :param product_line_list: 产品线id列表，若有多个，以逗号分隔
        :param grade_id: 等级ID（为空则不修改）
        """
        return self._top_request(
            "taobao.fenxiao.cooperation.productcat.add",
            {
                "cooperate_id": cooperate_id,
                "product_line_list": product_line_list,
                "grade_id": grade_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_cooperation_audit(
            self,
            requisition_id,
            audit_result,
            remark,
            product_line_list_agent='',
            product_line_list_dealer=''
    ):
        """
        合作授权审批
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21619

        :param requisition_id: 合作申请Id
        :param audit_result: 1:审批通过，审批通过后要加入授权产品线列表；<br/>2:审批拒绝
        :param remark: 备注
        :param product_line_list_agent: 当审批通过时需要指定授权产品线id列表(代销)，如果没传则表示不开通，且经销和代销的授权产品线列表至少传入一种，同时传入则表示都开通。
        :param product_line_list_dealer: 当审批通过时需要指定授权产品线id列表(经销)，如果没传则表示不开通，且经销和代销的授权产品线列表至少传入一种，同时传入则表示都开通。
        """
        return self._top_request(
            "taobao.fenxiao.cooperation.audit",
            {
                "requisition_id": requisition_id,
                "audit_result": audit_result,
                "remark": remark,
                "product_line_list_agent": product_line_list_agent,
                "product_line_list_dealer": product_line_list_dealer
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_cooperation_terminate(
            self,
            cooperate_id,
            end_remain_days,
            end_remark
    ):
        """
        终止合作
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        终止与分销商的合作关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21620

        :param cooperate_id: 合作编号
        :param end_remain_days: 终止天数，可选1,2,3,5,7,15，在多少天数内终止
        :param end_remark: 终止说明（5-2000字）
        """
        return self._top_request(
            "taobao.fenxiao.cooperation.terminate",
            {
                "cooperate_id": cooperate_id,
                "end_remain_days": end_remain_days,
                "end_remark": end_remark
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_product_gradeprice_get(
            self,
            product_id,
            sku_id='',
            trade_type=''
    ):
        """
        等级折扣查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21621

        :param product_id: 产品id
        :param sku_id: skuId
        :param trade_type: 经、代销模式（1：代销、2：经销）
        """
        return self._top_request(
            "taobao.fenxiao.product.gradeprice.get",
            {
                "product_id": product_id,
                "sku_id": sku_id,
                "trade_type": trade_type
            }
        )

    def taobao_fenxiao_grade_add(
            self,
            name
    ):
        """
        新建等级
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21624

        :param name: 等级名称，等级名称不可重复
        """
        return self._top_request(
            "taobao.fenxiao.grade.add",
            {
                "name": name
            }
        )

    def taobao_fenxiao_productcat_delete(
            self,
            product_line_id
    ):
        """
        删除产品线
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21625

        :param product_line_id: 产品线ID
        """
        return self._top_request(
            "taobao.fenxiao.productcat.delete",
            {
                "product_line_id": product_line_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_productcat_update(
            self,
            product_line_id,
            name='',
            retail_low_percent='',
            retail_high_percent='',
            agent_cost_percent='',
            dealer_cost_percent=''
    ):
        """
        修改产品线
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21626

        :param product_line_id: 产品线ID
        :param name: 产品线名称
        :param retail_low_percent: 最低零售价比例，注意：100.00%，则输入为10000
        :param retail_high_percent: 最高零售价比例，注意：100.00%，则输入为10000
        :param agent_cost_percent: 代销默认采购价比例，注意：100.00%，则输入为10000
        :param dealer_cost_percent: 经销默认采购价比例，注意：100.00%，则输入为10000
        """
        return self._top_request(
            "taobao.fenxiao.productcat.update",
            {
                "product_line_id": product_line_id,
                "name": name,
                "retail_low_percent": retail_low_percent,
                "retail_high_percent": retail_high_percent,
                "agent_cost_percent": agent_cost_percent,
                "dealer_cost_percent": dealer_cost_percent
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_productcat_add(
            self,
            name,
            retail_low_percent,
            retail_high_percent,
            agent_cost_percent,
            dealer_cost_percent
    ):
        """
        新增产品线
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21627

        :param name: 产品线名称
        :param retail_low_percent: 最低零售价比例，注意：100.00%，则输入为10000
        :param retail_high_percent: 最高零售价比例，注意：100.00%，则输入为10000
        :param agent_cost_percent: 代销默认采购价比例，注意：100.00%，则输入为10000
        :param dealer_cost_percent: 经销默认采购价比例，注意：100.00%，则输入为10000
        """
        return self._top_request(
            "taobao.fenxiao.productcat.add",
            {
                "name": name,
                "retail_low_percent": retail_low_percent,
                "retail_high_percent": retail_high_percent,
                "agent_cost_percent": agent_cost_percent,
                "dealer_cost_percent": dealer_cost_percent
            }
        )

    def taobao_inventory_initial_item(
            self,
            sc_item_id,
            store_inventorys
    ):
        """
        商品库存初始化
        商家仓商品初始化在各个仓中库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21728

        :param sc_item_id: 后端商品id
        :param store_inventorys: 商品初始库存信息： [{'storeCode':'必选,商家仓库编号','inventoryType':'可选，库存类型 1：正常,2：损坏,3：冻结,10：质押,11-20:用户自定义,默认为1','quantity':'必选,数量'}]
        """
        return self._top_request(
            "taobao.inventory.initial.item",
            {
                "sc_item_id": sc_item_id,
                "store_inventorys": store_inventorys
            },
            result_processor=lambda x: x["tip_infos"]
        )

    def taobao_fenxiao_refund_get(
            self,
            sub_order_id,
            query_seller_refund=''
    ):
        """
        查询采购单退款信息
        分销商或供应商可以查询某子单的退款信息，以及下游订单的退款信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21873

        :param sub_order_id: 要查询的退款子单的id
        :param query_seller_refund: 是否查询下游买家的退款信息
        """
        return self._top_request(
            "taobao.fenxiao.refund.get",
            {
                "sub_order_id": sub_order_id,
                "query_seller_refund": query_seller_refund
            },
            result_processor=lambda x: x["refund_detail"]
        )

    def taobao_fenxiao_distributor_products_get(
            self,
            order_by='',
            time_type='',
            download_status='',
            trade_type='',
            end_time='',
            fields='',
            item_ids='',
            productcat_id='',
            pids='',
            start_time='',
            page_no='',
            page_size='',
            supplier_nick=''
    ):
        """
        分销商查询产品信息
        分销商查询供应商产品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21875

        :param order_by: order_by
        :param time_type: time_type
        :param download_status: download_status
        :param trade_type: trade_type
        :param end_time: 结束时间
        :param fields: 指定查询额外的信息，可选值：skus（sku数据）、images（多图），多个可选值用逗号分割。
        :param item_ids: 根据商品ID列表查询，优先级次于产品ID列表，高于其他分页查询条件。如果商品不是分销商品，自动过滤。最大限制20，用逗号分割，例如：“1001,1002,1003,1004,1005”
        :param productcat_id: 产品线ID
        :param pids: 产品ID列表（最大限制30），用逗号分割，例如：“1001,1002,1003,1004,1005”
        :param start_time: 开始修改时间
        :param page_no: 页码（大于0的整数，默认1）
        :param page_size: 每页记录数（默认20，最大50）
        :param supplier_nick: 供应商nick，分页查询时，必传
        """
        return self._top_request(
            "taobao.fenxiao.distributor.products.get",
            {
                "order_by": order_by,
                "time_type": time_type,
                "download_status": download_status,
                "trade_type": trade_type,
                "end_time": end_time,
                "fields": fields,
                "item_ids": item_ids,
                "productcat_id": productcat_id,
                "pids": pids,
                "start_time": start_time,
                "page_no": page_no,
                "page_size": page_size,
                "supplier_nick": supplier_nick
            }
        )

    def taobao_fenxiao_dealer_requisitionorder_close(
            self,
            dealer_order_id,
            reason,
            reason_detail
    ):
        """
        供应商/分销商关闭采购申请/经销采购单
        供应商或分销商关闭采购申请/经销采购单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22028

        :param dealer_order_id: 经销采购单编号
        :param reason: 关闭原因：<br/>1：长时间无法联系到分销商，取消交易。<br/>2：分销商错误提交申请，取消交易。<br/>3：缺货，近段时间都无法发货。<br/>4：分销商恶意提交申请单。<br/>5：其他原因。
        :param reason_detail: 关闭详细原因，字数5-200字
        """
        return self._top_request(
            "taobao.fenxiao.dealer.requisitionorder.close",
            {
                "dealer_order_id": dealer_order_id,
                "reason": reason,
                "reason_detail": reason_detail
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_dealer_requisitionorder_agree(
            self,
            dealer_order_id
    ):
        """
        供应商/分销商通过采购申请/经销采购单申请
        供应商或分销商通过采购申请/经销采购单审核
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22031

        :param dealer_order_id: 采购申请/经销采购单编号
        """
        return self._top_request(
            "taobao.fenxiao.dealer.requisitionorder.agree",
            {
                "dealer_order_id": dealer_order_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_dealer_requisitionorder_get(
            self,
            start_date,
            end_date,
            identity,
            page_no='1',
            page_size='50',
            order_status='0',
            fields=''
    ):
        """
        批量查询采购申请/经销采购单
        批量查询采购申请/经销采购单，目前支持供应商和分销商查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22032

        :param start_date: 采购申请/经销采购单最早修改时间
        :param end_date: 采购申请/经销采购单最迟修改时间。与start_date字段的最大时间间隔不能超过30天
        :param identity: 查询者自己在所要查询的采购申请/经销采购单中的身份。<br/>1：供应商。<br/>2：分销商。<br/>注：填写其他值当做错误处理。
        :param page_no: 页码（大于0的整数。无值或小于1的值按默认值1计）
        :param page_size: 每页条数（大于0但小于等于50的整数。无值或大于50或小于1的值按默认值50计）
        :param order_status: 采购申请/经销采购单状态。<br/>0：全部状态。<br/>1：分销商提交申请，待供应商审核。<br/>2：供应商驳回申请，待分销商确认。<br/>3：供应商修改后，待分销商确认。<br/>4：分销商拒绝修改，待供应商再审核。<br/>5：审核通过下单成功，待分销商付款。<br/>7：付款成功，待供应商发货。<br/>8：供应商发货，待分销商收货。<br/>9：分销商收货，交易成功。<br/>10：采购申请/经销采购单关闭。<br/><br/>注：无值按默认值0计，超出状态范围返回错误信息。
        :param fields: 多个字段用','分隔。 fields 如果为空：返回所有采购申请/经销采购单对象(dealer_orders)字段。 如果不为空：返回指定采购单对象(dealer_orders)字段。 例1： dealer_order_details.product_id 表示只返回product_id 例2： dealer_order_details 表示只返回明细列表
        """
        return self._top_request(
            "taobao.fenxiao.dealer.requisitionorder.get",
            {
                "start_date": start_date,
                "end_date": end_date,
                "identity": identity,
                "page_no": page_no,
                "page_size": page_size,
                "order_status": order_status,
                "fields": fields
            }
        )

    def taobao_fenxiao_dealer_requisitionorder_query(
            self,
            dealer_order_ids,
            fields=''
    ):
        """
        按编号查询采购申请/经销采购单
        按编号查询采购申请/经销采购单，目前支持供应商和分销商查询。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22033

        :param dealer_order_ids: 经销采购单编号。<br/>多个编号用英文符号的逗号隔开。最多支持50个经销采购单编号的查询。
        :param fields: 多个字段用','分隔。 fields 如果为空：返回所有经销采购单对象(dealer_orders)字段。 如果不为空：返回指定采购单对象(dealer_orders)字段。 例1： dealer_order_details.product_id 表示只返回product_id 例2： dealer_order_details 表示只返回明细列表
        """
        return self._top_request(
            "taobao.fenxiao.dealer.requisitionorder.query",
            {
                "dealer_order_ids": dealer_order_ids,
                "fields": fields
            },
            result_processor=lambda x: x["dealer_orders"]
        )

    def taobao_fenxiao_dealer_requisitionorder_remark_update(
            self,
            dealer_order_id,
            supplier_memo_flag,
            supplier_memo=''
    ):
        """
        修改经销采购单备注
        供应商修改经销采购单备注
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22522

        :param dealer_order_id: 经销采购单ID
        :param supplier_memo_flag: 旗子的标记，必选。<br/>1-5之间的数字。<br/>非1-5之间，都采用1作为默认。<br/>1:红色<br/>2:黄色<br/>3:绿色<br/>4:蓝色<br/>5:粉红色
        :param supplier_memo: 备注留言，可为空
        """
        return self._top_request(
            "taobao.fenxiao.dealer.requisitionorder.remark.update",
            {
                "dealer_order_id": dealer_order_id,
                "supplier_memo_flag": supplier_memo_flag,
                "supplier_memo": supplier_memo
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_fenxiao_dealer_requisitionorder_create(
            self,
            order_detail,
            province,
            address,
            buyer_name,
            logistics_type='',
            city='',
            district='',
            post_code='',
            phone='',
            mobile='',
            id_card_number=''
    ):
        """
        创建经销采购申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22852

        :param order_detail: 采购清单，存放多个采购明细，每个采购明细内部以‘:’隔开，多个采购明细之间以‘,’隔开. 例(分销产品id:skuid:购买数量:申请单价,分销产品id:skuid:购买数量:申请单价)，申请单价的单位为分。不存在sku请留空skuid，如（分销产品id::购买数量:申请单价）
        :param province: 收货人所在省份
        :param address: 收货人所在街道地址
        :param buyer_name: 买家姓名（自提方式填写提货人姓名）
        :param logistics_type: 配送方式。SELF_PICKUP：自提；LOGISTICS：仓库发货
        :param city: 收货人所在市
        :param district: 收货人所在区
        :param post_code: 收货人所在地区邮政编码
        :param phone: 买家联系电话（此字段和mobile字段至少填写一个）
        :param mobile: 买家的手机号码（1、此字段与phone字段至少填写一个。2、自提方式下此字段必填，保存提货人联系电话）
        :param id_card_number: 身份证号（自提方式必填，填写提货人身份证号码，提货时用于确认提货人身份）
        """
        return self._top_request(
            "taobao.fenxiao.dealer.requisitionorder.create",
            {
                "order_detail": order_detail,
                "province": province,
                "address": address,
                "buyer_name": buyer_name,
                "logistics_type": logistics_type,
                "city": city,
                "district": district,
                "post_code": post_code,
                "phone": phone,
                "mobile": mobile,
                "id_card_number": id_card_number
            },
            result_processor=lambda x: x["dealer_order_id"]
        )

    def taobao_fenxiao_refund_query(
            self,
            start_date,
            end_date,
            page_no='1',
            page_size='50',
            query_seller_refund=''
    ):
        """
        批量查询采购退款
        供应商按查询条件批量查询代销采购退款
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23000

        :param start_date: 代销采购退款单最早修改时间
        :param end_date: 代销采购退款最迟修改时间。与start_date的最大时间间隔不能超过30天
        :param page_no: 页码（大于0的整数。无值或小于1的值按默认值1计）
        :param page_size: 每页条数（大于0但小于等于50的整数。无值或大于50或小于1的值按默认值50计）
        :param query_seller_refund: 是否查询下游买家的退款信息
        """
        return self._top_request(
            "taobao.fenxiao.refund.query",
            {
                "start_date": start_date,
                "end_date": end_date,
                "page_no": page_no,
                "page_size": page_size,
                "query_seller_refund": query_seller_refund
            }
        )

    def taobao_fenxiao_product_quantity_update(
            self,
            product_id,
            quantity,
            type='',
            properties=''
    ):
        """
        产品库存修改
        修改产品库存信息，支持全量修改以及增量修改两种方式
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23616

        :param product_id: 产品ID
        :param quantity: 库存修改值。产品有sku时，与sku属性顺序对应，用,分隔。产品无sku时，只写库存值。
                         当全量更新库存时，quantity必须为大于等于0的正整数；当增量更新库存时，quantity为整数，可小于等于0。若增量更新时传入的库存为负数，则负数与实际库存之和不能小于0。比如当前实际库存为1，传入增量更新quantity=-1，库存改为0
        :param type: 库存更新方式，可选。1为全量更新，2为增量更新。如果不填，默认为全量更新。当选择全量更新时，如果库存更新值传入的是负数，会出错并返回错误码；当选择增量更新时，如果库存更新值为负数且绝对值大于当前库存，则sku库存会设置为0
        :param properties: sku属性值，产品有sku时填写，多个sku用,分隔。为空时默认该产品无sku，则只修改产品的库存。
        """
        return self._top_request(
            "taobao.fenxiao.product.quantity.update",
            {
                "product_id": product_id,
                "quantity": quantity,
                "type": type,
                "properties": properties
            }
        )

    def tmall_inventory_query_forstore(
            self,
            param_list
    ):
        """
        查询后端商品仓库库存
        商家查询后端商品仓库库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26481

        :param param_list: 查询列表
        """
        return self._top_request(
            "tmall.inventory.query.forstore",
            {
                "param_list": param_list
            }
        )

    def taobao_inventory_warehouse_query(
            self,
            page_no,
            page_size
    ):
        """
        分页查询商家仓信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27165

        :param page_no: 页码
        :param page_size: 页大小
        """
        return self._top_request(
            "taobao.inventory.warehouse.query",
            {
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_inventory_warehouse_get(
            self,
            store_code
    ):
        """
        获取商家仓信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27166

        :param store_code: 仓库编码
        """
        return self._top_request(
            "taobao.inventory.warehouse.get",
            {
                "store_code": store_code
            }
        )

    def taobao_inventory_warehouse_manage(
            self,
            ware_house_dto
    ):
        """
        创建商家仓或者更新商家仓信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27167

        :param ware_house_dto: 仓库信息
        """
        return self._top_request(
            "taobao.inventory.warehouse.manage",
            {
                "ware_house_dto": ware_house_dto
            }
        )

    def taobao_region_warehouse_manage(
            self,
            store_code,
            regions
    ):
        """
        编辑仓库覆盖范围
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27170

        :param store_code: 仓库编码
        :param regions: 可映射三级地址,例: 广东省
        """
        return self._top_request(
            "taobao.region.warehouse.manage",
            {
                "store_code": store_code,
                "regions": regions
            }
        )

    def taobao_region_sale_query(
            self,
            item_id,
            sku_id,
            sale_region_level
    ):
        """
        查询商品销售区域
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27171

        :param item_id: 商品id
        :param sku_id: 无sku传0
        :param sale_region_level: 1:国家;2:省;3: 市;4:区县
        """
        return self._top_request(
            "taobao.region.sale.query",
            {
                "item_id": item_id,
                "sku_id": sku_id,
                "sale_region_level": sale_region_level
            }
        )

    def taobao_region_warehouse_query(
            self,
            store_code
    ):
        """
        查询仓库覆盖范围
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27173

        :param store_code: 仓库编码
        """
        return self._top_request(
            "taobao.region.warehouse.query",
            {
                "store_code": store_code
            }
        )

    def taobao_region_price_manage(
            self,
            item_id,
            regional_price_dtos,
            sku_id='0',
            is_full='true'
    ):
        """
        编辑区域价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27253

        :param item_id: 商品id
        :param regional_price_dtos: 列表
        :param sku_id: 无sku传0
        :param is_full: true:全量, false:增量
        """
        return self._top_request(
            "taobao.region.price.manage",
            {
                "item_id": item_id,
                "regional_price_dtos": regional_price_dtos,
                "sku_id": sku_id,
                "is_full": is_full
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_region_price_query(
            self,
            item_id,
            sku_id='0',
            regional_price_dtos=None
    ):
        """
        区域价格查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27254

        :param item_id: 商品id
        :param sku_id: 无sku可传0
        :param regional_price_dtos: 不传则返回所有设置的区域价格
        """
        return self._top_request(
            "taobao.region.price.query",
            {
                "item_id": item_id,
                "sku_id": sku_id,
                "regional_price_dtos": regional_price_dtos
            }
        )

    def taobao_region_price_cancle(
            self,
            item_id,
            sku_id
    ):
        """
        取消区域价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27286

        :param item_id: 商品
        :param sku_id: 无sku传0
        """
        return self._top_request(
            "taobao.region.price.cancle",
            {
                "item_id": item_id,
                "sku_id": sku_id
            }
        )

    def taobao_fenxiao_product_import_from_auction(
            self,
            trade_type,
            auction_id,
            product_line_id
    ):
        """
        导入商品生成产品
        供应商选择关联店铺的前台宝贝，导入生成产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32941

        :param trade_type: 导入产品需要支持的交易类型：[1 代销][ 2 经销 ][3 代销和经销]
        :param auction_id: 店铺宝贝id
        :param product_line_id: 产品线id
        """
        return self._top_request(
            "taobao.fenxiao.product.import.from.auction",
            {
                "trade_type": trade_type,
                "auction_id": auction_id,
                "product_line_id": product_line_id
            }
        )

    def taobao_fenxiao_product_to_channel_import(
            self,
            channel,
            product_id
    ):
        """
        产品导入到渠道
        支持供应商将已有产品导入到某个渠道销售
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33028

        :param channel: 要导入的渠道[21 零售PLUS]目前仅支持此渠道
        :param product_id: 要导入的产品id
        """
        return self._top_request(
            "taobao.fenxiao.product.to.channel.import",
            {
                "channel": channel,
                "product_id": product_id
            }
        )

    def tmall_channel_products_get(
            self,
            top_query_product_d_o=None
    ):
        """
        查询供应商的产品数据
        查询供应商的产品数据。
        * 入参传入pids将优先查询，即只按这个条件查询。
        *入参传入sku_number将优先查询(没有传入pids)，即只按这个条件查询(最多显示50条)
        * 入参fields传skus将查询sku的数据，不传该参数默认不查询，返回产品的其它信息。
        * 入参fields传入images将查询多图数据，不传只返回主图数据。
        * 入参fields仅对传入pids生效（只有按ID查询时，才能查询额外的数据）
        * 查询结果按照产品发布时间倒序，即时间近的数据在前。
        * 传入channel 渠道，会只返回相应渠道的产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33036

        :param top_query_product_d_o: top_query_product_d_o
        """
        return self._top_request(
            "tmall.channel.products.get",
            {
                "top_query_product_d_o": top_query_product_d_o
            }
        )

    def taobao_fenxiao_trade_prepay_offline_add(
            self,
            offline_add_prepay_param
    ):
        """
        线下预存款流水增加
        渠道分销供应商上传线下流水预存款（增加）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33474

        :param offline_add_prepay_param: 增加流水
        """
        return self._top_request(
            "taobao.fenxiao.trade.prepay.offline.add",
            {
                "offline_add_prepay_param": offline_add_prepay_param
            },
            result_processor=lambda x: x["success"]
        )

    def taobao_fenxiao_trade_prepay_offline_reduce(
            self,
            offline_reduce_prepay_param
    ):
        """
        渠道分销供应商上传线下流水预存款（减少）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33475

        :param offline_reduce_prepay_param: 减少流水
        """
        return self._top_request(
            "taobao.fenxiao.trade.prepay.offline.reduce",
            {
                "offline_reduce_prepay_param": offline_reduce_prepay_param
            },
            result_processor=lambda x: x["success"]
        )


class TbWangWang(DingTalkBaseAPI):
    """
    旺旺API
    """

    def taobao_wangwang_eservice_chatpeers_get(
            self
    ):
        """
        获取聊天对象列表
        获取聊天对象列表，只能获取最近1个月内的数据且查询时间段<=7天,只支持xml返回 。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=330

        """
        return self._top_request(
            "taobao.wangwang.eservice.chatpeers.get"
        )

    def taobao_wangwang_abstract_logquery(
            self,
            to_id,
            from_id,
            start_date,
            end_date,
            count='1000',
            next_key='',
            charset=''
    ):
        """
        聊天记录查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21804

        :param to_id: 买家id，有cntaobao前缀
        :param from_id: 卖家id，有cntaobao前缀
        :param start_date: utc
        :param end_date: utc
        :param count: 获取记录条数，默认值是1000
        :param next_key: 设置了这个值，那么聊天记录就从这个点开始查询
        :param charset: 传入参数的字符集
        """
        return self._top_request(
            "taobao.wangwang.abstract.logquery",
            {
                "to_id": to_id,
                "from_id": from_id,
                "start_date": start_date,
                "end_date": end_date,
                "count": count,
                "next_key": next_key,
                "charset": charset
            }
        )

    def taobao_wangwang_abstract_getwordlist(
            self,
            charset=''
    ):
        """
        获取关键词列表
        获取关键词列表，只支持json返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21805

        :param charset: 传入参数的字符集
        """
        return self._top_request(
            "taobao.wangwang.abstract.getwordlist",
            {
                "charset": charset
            }
        )

    def taobao_wangwang_abstract_deleteword(
            self,
            word,
            charset=''
    ):
        """
        删除关键词
        删除关键词，只支持json返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21806

        :param word: 关键词，长度大于0
        :param charset: 传入参数的字符集
        """
        return self._top_request(
            "taobao.wangwang.abstract.deleteword",
            {
                "word": word,
                "charset": charset
            }
        )

    def taobao_wangwang_abstract_addword(
            self,
            word,
            charset=''
    ):
        """
        增加关键词
        增加关键词，只支持json返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21807

        :param word: 关键词，长度大于0
        :param charset: 传入参数的字符集
        """
        return self._top_request(
            "taobao.wangwang.abstract.addword",
            {
                "word": word,
                "charset": charset
            }
        )

    def taobao_wangwang_abstract_initialize(
            self,
            charset=''
    ):
        """
        模糊查询服务初始化
        模糊查询服务初始化，只支持json返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21808

        :param charset: 传入参数的字符集
        """
        return self._top_request(
            "taobao.wangwang.abstract.initialize",
            {
                "charset": charset
            }
        )

    def taobao_wangwang_clientid_bind(
            self,
            app_name,
            client_id
    ):
        """
        nick和客户端id绑定
        绑定nick和客户端id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24613

        :param app_name: 应用名
        :param client_id: 客户端Id
        """
        return self._top_request(
            "taobao.wangwang.clientid.bind",
            {
                "app_name": app_name,
                "client_id": client_id
            }
        )

    def taobao_wangwang_clientid_unbind(
            self,
            app_name,
            client_id
    ):
        """
        解除账号和客户端Id的绑定
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24614

        :param app_name: 应用名
        :param client_id: 客户端Id
        """
        return self._top_request(
            "taobao.wangwang.clientid.unbind",
            {
                "app_name": app_name,
                "client_id": client_id
            }
        )

    def taobao_qianniu_kefueval_get(
            self,
            query_ids,
            btime,
            etime
    ):
        """
        客服评价详情接口
        获取买家对客服的服务评价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27589

        :param query_ids: 客服的nick，多个用逗号分隔，不要超过10个，带cntaobao的长nick
        :param btime: 开始时间，格式yyyyMMddHHmmss
        :param etime: 结束时间,格式yyyyMMddHHmmss
        """
        return self._top_request(
            "taobao.qianniu.kefueval.get",
            {
                "query_ids": query_ids,
                "btime": btime,
                "etime": etime
            }
        )

    def taobao_wangwang_eservice_chatrelation_get(
            self,
            chat_relation_request
    ):
        """
        聊天关系获取接口
        获取指定时间区间内的聊天关系（查询账号，和谁，在哪天说过话）。如：
        A 和 B 在2016-09-01 和 2016-09-02 都说过话。以A为查询账号，则该接口将返回：
        2016-09-01， B
        2016-09-02， B
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27954

        :param chat_relation_request: 请求参数
        """
        return self._top_request(
            "taobao.wangwang.eservice.chatrelation.get",
            {
                "chat_relation_request": chat_relation_request
            }
        )

    def taobao_wangwang_eservice_abs_word_get(
            self
    ):
        """
        获取关键词
        获取关键词列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28015

        """
        return self._top_request(
            "taobao.wangwang.eservice.abs.word.get",
            result_processor=lambda x: x["words"]
        )

    def taobao_wangwang_eservice_abs_word_del(
            self,
            word
    ):
        """
        删除关键词接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28016

        :param word: 要删除的关键字
        """
        return self._top_request(
            "taobao.wangwang.eservice.abs.word.del",
            {
                "word": word
            }
        )

    def taobao_wangwang_eservice_abs_word_add(
            self,
            word
    ):
        """
        添加关键词
        为聊天记录查询接口添加关键词。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28017

        :param word: 关键词
        """
        return self._top_request(
            "taobao.wangwang.eservice.abs.word.add",
            {
                "word": word
            }
        )

    def taobao_wangwang_eservice_abs_chatlog_get(
            self,
            query_info
    ):
        """
        商家聊天记录查询接口
        查询授权商家的聊天记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28019

        :param query_info: 查询参数
        """
        return self._top_request(
            "taobao.wangwang.eservice.abs.chatlog.get",
            {
                "query_info": query_info
            }
        )


class TbTaoBaoKe(DingTalkBaseAPI):
    """
    淘宝客API
    """

    def taobao_tbk_item_get(
            self,
            fields,
            q='',
            cat='',
            itemloc='',
            sort='',
            is_tmall='',
            is_overseas='',
            start_price='',
            end_price='',
            start_tk_rate='',
            end_tk_rate='',
            platform='',
            page_no='0',
            page_size='0'
    ):
        """
        淘宝客商品查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24515

        :param fields: 需返回的字段列表
        :param q: 查询词
        :param cat: 后台类目ID，用,分割，最大10个，该ID可以通过taobao.itemcats.get接口获取到
        :param itemloc: 所在地
        :param sort: 排序_des（降序），排序_asc（升序），销量（total_sales），淘客佣金比率（tk_rate）， 累计推广量（tk_total_sales），总支出佣金（tk_total_commi）
        :param is_tmall: 是否商城商品，设置为true表示该商品是属于淘宝商城商品，设置为false或不设置表示不判断这个属性
        :param is_overseas: 是否海外商品，设置为true表示该商品是属于海外商品，设置为false或不设置表示不判断这个属性
        :param start_price: 折扣价范围下限，单位：元
        :param end_price: 折扣价范围上限，单位：元
        :param start_tk_rate: 淘客佣金比率上限，如：1234表示12.34%
        :param end_tk_rate: 淘客佣金比率下限，如：1234表示12.34%
        :param platform: 链接形式：1：PC，2：无线，默认：１
        :param page_no: 第几页，默认：１
        :param page_size: 页大小，默认20，1~100
        """
        return self._top_request(
            "taobao.tbk.item.get",
            {
                "fields": fields,
                "q": q,
                "cat": cat,
                "itemloc": itemloc,
                "sort": sort,
                "is_tmall": is_tmall,
                "is_overseas": is_overseas,
                "start_price": start_price,
                "end_price": end_price,
                "start_tk_rate": start_tk_rate,
                "end_tk_rate": end_tk_rate,
                "platform": platform,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_tbk_item_recommend_get(
            self,
            fields,
            num_iid,
            count='20',
            platform='1'
    ):
        """
        淘宝客商品关联推荐查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24517

        :param fields: 需返回的字段列表
        :param num_iid: 商品Id
        :param count: 返回数量，默认20，最大值40
        :param platform: 链接形式：1：PC，2：无线，默认：１
        """
        return self._top_request(
            "taobao.tbk.item.recommend.get",
            {
                "fields": fields,
                "num_iid": num_iid,
                "count": count,
                "platform": platform
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_tbk_item_info_get(
            self,
            num_iids,
            platform='1',
            ip=''
    ):
        """
        淘宝客商品详情（简版）
        淘宝客商品详情查询（简版）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24518

        :param num_iids: 商品ID串，用,分割，最大40个
        :param platform: 链接形式：1：PC，2：无线，默认：１
        :param ip: ip地址，影响邮费获取，如果不传或者传入不准确，邮费无法精准提供
        """
        return self._top_request(
            "taobao.tbk.item.info.get",
            {
                "num_iids": num_iids,
                "platform": platform,
                "ip": ip
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_tbk_shop_get(
            self,
            fields,
            q,
            sort='',
            is_tmall='',
            start_credit='',
            end_credit='',
            start_commission_rate='',
            end_commission_rate='',
            start_total_action='',
            end_total_action='',
            start_auction_count='',
            end_auction_count='',
            platform='1',
            page_no='1',
            page_size='20'
    ):
        """
        淘宝客店铺查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24521

        :param fields: 需返回的字段列表
        :param q: 查询词
        :param sort: 排序_des（降序），排序_asc（升序），佣金比率（commission_rate）， 商品数量（auction_count），销售总数量（total_auction）
        :param is_tmall: 是否商城的店铺，设置为true表示该是属于淘宝商城的店铺，设置为false或不设置表示不判断这个属性
        :param start_credit: 信用等级下限，1~20
        :param end_credit: 信用等级上限，1~20
        :param start_commission_rate: 淘客佣金比率下限，1~10000
        :param end_commission_rate: 淘客佣金比率上限，1~10000
        :param start_total_action: 店铺商品总数下限
        :param end_total_action: 店铺商品总数上限
        :param start_auction_count: 累计推广商品下限
        :param end_auction_count: 累计推广商品上限
        :param platform: 链接形式：1：PC，2：无线，默认：１
        :param page_no: 第几页，默认1，1~100
        :param page_size: 页大小，默认20，1~100
        """
        return self._top_request(
            "taobao.tbk.shop.get",
            {
                "fields": fields,
                "q": q,
                "sort": sort,
                "is_tmall": is_tmall,
                "start_credit": start_credit,
                "end_credit": end_credit,
                "start_commission_rate": start_commission_rate,
                "end_commission_rate": end_commission_rate,
                "start_total_action": start_total_action,
                "end_total_action": end_total_action,
                "start_auction_count": start_auction_count,
                "end_auction_count": end_auction_count,
                "platform": platform,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_tbk_shop_recommend_get(
            self,
            fields,
            user_id,
            count='',
            platform=''
    ):
        """
        淘宝客店铺关联推荐查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24522

        :param fields: 需返回的字段列表
        :param user_id: 卖家Id
        :param count: 返回数量，默认20，最大值40
        :param platform: 链接形式：1：PC，2：无线，默认：１
        """
        return self._top_request(
            "taobao.tbk.shop.recommend.get",
            {
                "fields": fields,
                "user_id": user_id,
                "count": count,
                "platform": platform
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_tbk_uatm_favorites_item_get(
            self,
            adzone_id,
            favorites_id,
            fields,
            platform='1',
            page_size='20',
            unid='',
            page_no='1'
    ):
        """
        获取淘宝联盟选品库的宝贝信息
        指定选品库id，获取该选品库的宝贝信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26619

        :param adzone_id: 推广位id，需要在淘宝联盟后台创建；且属于appkey备案的媒体id（siteid），如何获取adzoneid，请参考，http://club.alimama.com/read-htm-tid-6333967.html?spm=0.0.0.0.msZnx5
        :param favorites_id: 选品库的id
        :param fields: 需要输出则字段列表，逗号分隔
        :param platform: 链接形式：1：PC，2：无线，默认：１
        :param page_size: 页大小，默认20，1~100
        :param unid: 自定义输入串，英文和数字组成，长度不能大于12个字符，区分不同的推广渠道
        :param page_no: 第几页，默认：1，从1开始计数
        """
        return self._top_request(
            "taobao.tbk.uatm.favorites.item.get",
            {
                "adzone_id": adzone_id,
                "favorites_id": favorites_id,
                "fields": fields,
                "platform": platform,
                "page_size": page_size,
                "unid": unid,
                "page_no": page_no
            }
        )

    def taobao_tbk_uatm_favorites_get(
            self,
            fields,
            page_no='1',
            page_size='20',
            type='-1'
    ):
        """
        获取淘宝联盟选品库列表
        枚举出淘宝客在淘宝联盟超级搜索，特色频道中，创建的选品库列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26620

        :param fields: 需要返回的字段列表，不能为空，字段名之间使用逗号分隔
        :param page_no: 第几页，从1开始计数
        :param page_size: 默认20，页大小，即每一页的活动个数
        :param type: 默认值-1；选品库类型，1：普通选品组，2：高佣选品组，-1，同时输出所有类型的选品组
        """
        return self._top_request(
            "taobao.tbk.uatm.favorites.get",
            {
                "fields": fields,
                "page_no": page_no,
                "page_size": page_size,
                "type": type
            }
        )

    def taobao_tbk_ju_tqg_get(
            self,
            adzone_id,
            fields,
            start_time,
            end_time,
            page_no='1',
            page_size='40'
    ):
        """
        淘抢购api
        获取淘抢购的数据，淘客商品转淘客链接，非淘客商品输出普通链接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27543

        :param adzone_id: 推广位id（推广位申请方式：http://club.alimama.com/read.php?spm=0.0.0.0.npQdST&tid=6306396&ds=1&page=1&toread=1）
        :param fields: 需返回的字段列表
        :param start_time: 最早开团时间
        :param end_time: 最晚开团时间
        :param page_no: 第几页，默认1，1~100
        :param page_size: 页大小，默认40，1~40
        """
        return self._top_request(
            "taobao.tbk.ju.tqg.get",
            {
                "adzone_id": adzone_id,
                "fields": fields,
                "start_time": start_time,
                "end_time": end_time,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_tbk_item_click_extract(
            self,
            click_url
    ):
        """
        链接解析api
        从长链接或短链接中解析出open_iid
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28156

        :param click_url: 长链接或短链接
        """
        return self._top_request(
            "taobao.tbk.item.click.extract",
            {
                "click_url": click_url
            }
        )

    def taobao_tbk_item_guess_like(
            self,
            adzone_id,
            os,
            ip,
            ua,
            net,
            user_nick='',
            user_id='',
            idfa='',
            imei='',
            imei_md5='',
            apnm='',
            mn='',
            page_no='1',
            page_size='20'
    ):
        """
        淘宝客商品猜你喜欢
        淘宝客猜你喜欢商品API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29528

        :param adzone_id: 广告位ID
        :param os: 系统类型，ios, android, other
        :param ip: 客户端ip
        :param ua: userAgent
        :param net: 联网方式，wifi, cell, unknown
        :param user_nick: 用户昵称，from cookie : _nk_或者tracknick ; from百川sdk : nick
        :param user_id: 用户数字ID，from cookie : unb
        :param idfa: ios广告跟踪id
        :param imei: android设备imei
        :param imei_md5: android设备imeiMD5值，32位小写
        :param apnm: 应用包名
        :param mn: 设备型号
        :param page_no: 第几页
        :param page_size: 页大小
        """
        return self._top_request(
            "taobao.tbk.item.guess.like",
            {
                "adzone_id": adzone_id,
                "os": os,
                "ip": ip,
                "ua": ua,
                "net": net,
                "user_nick": user_nick,
                "user_id": user_id,
                "idfa": idfa,
                "imei": imei,
                "imei_md5": imei_md5,
                "apnm": apnm,
                "mn": mn,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_tbk_dg_item_coupon_get(
            self,
            adzone_id,
            platform='1',
            cat='',
            page_size='20',
            q='',
            page_no='1'
    ):
        """
        好券清单API【导购】
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29821

        :param adzone_id: mm_xxx_xxx_xxx的第三位
        :param platform: 1：PC，2：无线，默认：1
        :param cat: 后台类目ID，用,分割，最大10个，该ID可以通过taobao.itemcats.get接口获取到
        :param page_size: 页大小，默认20，1~100
        :param q: 查询词
        :param page_no: 第几页，默认：1（当后台类目和查询词均不指定的时候，最多出10000个结果，即page_no*page_size不能超过10000；当指定类目或关键词的时候，则最多出100个结果）
        """
        return self._top_request(
            "taobao.tbk.dg.item.coupon.get",
            {
                "adzone_id": adzone_id,
                "platform": platform,
                "cat": cat,
                "page_size": page_size,
                "q": q,
                "page_no": page_no
            }
        )

    def taobao_tbk_coupon_get(
            self,
            me='',
            item_id='',
            activity_id=''
    ):
        """
        阿里妈妈推广券信息查询
        阿里妈妈推广券信息查询。传入商品ID+券ID，或者传入me参数，均可查询券信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31106

        :param me: 带券ID与商品ID的加密串
        :param item_id: 商品ID
        :param activity_id: 券ID
        """
        return self._top_request(
            "taobao.tbk.coupon.get",
            {
                "me": me,
                "item_id": item_id,
                "activity_id": activity_id
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_tbk_tpwd_create(
            self,
            text,
            url,
            user_id='',
            logo='',
            ext=''
    ):
        """
        淘宝客淘口令
        提供淘客生成淘口令接口，淘客提交口令内容、logo、url等参数，生成淘口令关键key如：￥SADadW￥，后续进行文案包装组装用于传播
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31127

        :param text: 口令弹框内容
        :param url: 口令跳转目标页
        :param user_id: 生成口令的淘宝用户ID
        :param logo: 口令弹框logoURL
        :param ext: 扩展字段JSON格式
        """
        return self._top_request(
            "taobao.tbk.tpwd.create",
            {
                "text": text,
                "url": url,
                "user_id": user_id,
                "logo": logo,
                "ext": ext
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_tbk_dg_newuser_order_get(
            self,
            activity_id,
            page_size='20',
            adzone_id='',
            page_no='1',
            start_time='',
            end_time=''
    ):
        """
        淘宝客新用户订单API--导购
        拉新API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33892

        :param activity_id: 活动id， 活动名称与活动ID列表，请参见https://tbk.bbs.taobao.com/detail.html?appId=45301&postId=8599277
        :param page_size: 页大小，默认20，1~100
        :param adzone_id: mm_xxx_xxx_xxx的第三位
        :param page_no: 页码，默认1
        :param start_time: 开始时间，当活动为淘宝活动，表示最早注册时间；当活动为支付宝活动，表示最早绑定时间；当活动为天猫活动，表示最早领取红包时间
        :param end_time: 结束时间，当活动为淘宝活动，表示最晚结束时间；当活动为支付宝活动，表示最晚绑定时间；当活动为天猫活动，表示最晚领取红包的时间
        """
        return self._top_request(
            "taobao.tbk.dg.newuser.order.get",
            {
                "activity_id": activity_id,
                "page_size": page_size,
                "adzone_id": adzone_id,
                "page_no": page_no,
                "start_time": start_time,
                "end_time": end_time
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_tbk_sc_newuser_order_get(
            self,
            activity_id,
            page_size='20',
            adzone_id='',
            page_no='1',
            site_id='',
            end_time='',
            start_time=''
    ):
        """
        淘宝客新用户订单API--社交
        拉新API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33897

        :param activity_id: 活动id， 现有活动id包括： 2月手淘拉新：119013_2 3月手淘拉新：119013_3 4月手淘拉新：119013_4 拉手机支付宝新用户_赚赏金：200000_5
        :param page_size: 页大小，默认20，1~100
        :param adzone_id: mm_xxx_xxx_xxx的第三位
        :param page_no: 页码，默认1
        :param site_id: mm_xxx_xxx_xxx的第二位
        :param end_time: 结束时间，当活动为淘宝活动，表示最晚结束时间；当活动为支付宝活动，表示最晚绑定时间；当活动为天猫活动，表示最晚领取红包的时间
        :param start_time: 开始时间，当活动为淘宝活动，表示最早注册时间；当活动为支付宝活动，表示最早绑定时间；当活动为天猫活动，表示最早领取红包时间
        """
        return self._top_request(
            "taobao.tbk.sc.newuser.order.get",
            {
                "activity_id": activity_id,
                "page_size": page_size,
                "adzone_id": adzone_id,
                "page_no": page_no,
                "site_id": site_id,
                "end_time": end_time,
                "start_time": start_time
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_tbk_dg_optimus_material(
            self,
            adzone_id,
            page_size='20',
            page_no='1',
            material_id='0',
            device_value='',
            device_encrypt='',
            device_type='',
            content_id='',
            content_source='',
            item_id=''
    ):
        """
        淘宝客物料下行-导购
        通用物料推荐，传入官方公布的物料id，可获取指定物料
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33947

        :param adzone_id: mm_xxx_xxx_xxx的第三位
        :param page_size: 页大小，默认20，1~100
        :param page_no: 第几页，默认：1
        :param material_id: 官方的物料Id(详细物料id见：https://tbk.bbs.taobao.com/detail.html?appId=45301&postId=8576096)
        :param device_value: 智能匹配-设备号加密后的值（MD5加密需32位小写）
        :param device_encrypt: 智能匹配-设备号加密类型：MD5
        :param device_type: 智能匹配-设备号类型：IMEI，或者IDFA，或者UTDID（UTDID不支持MD5加密）
        :param content_id: 内容专用-内容详情ID
        :param content_source: 内容专用-内容渠道信息
        :param item_id: 商品ID，用于相似商品推荐
        """
        return self._top_request(
            "taobao.tbk.dg.optimus.material",
            {
                "adzone_id": adzone_id,
                "page_size": page_size,
                "page_no": page_no,
                "material_id": material_id,
                "device_value": device_value,
                "device_encrypt": device_encrypt,
                "device_type": device_type,
                "content_id": content_id,
                "content_source": content_source,
                "item_id": item_id
            }
        )

    def taobao_tbk_dg_material_optional(
            self,
            adzone_id,
            start_dsr='',
            page_size='20',
            page_no='1',
            platform='1',
            end_tk_rate='',
            start_tk_rate='',
            end_price='',
            start_price='',
            is_overseas='',
            is_tmall='',
            sort='',
            itemloc='',
            cat='',
            q='',
            material_id='2836',
            has_coupon='',
            ip='',
            need_free_shipment='',
            need_prepay='',
            include_pay_rate_30='',
            include_good_rate='',
            include_rfd_rate='',
            npx_level='1',
            end_ka_tk_rate='',
            start_ka_tk_rate='',
            device_encrypt='',
            device_value='',
            device_type=''
    ):
        """
        通用物料搜索API（导购）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35896

        :param adzone_id: mm_xxx_xxx_12345678三段式的最后一段数字
        :param start_dsr: 商品筛选(特定媒体支持)-店铺dsr评分。筛选大于等于当前设置的店铺dsr评分的商品0-50000之间
        :param page_size: 页大小，默认20，1~100
        :param page_no: 第几页，默认：１
        :param platform: 链接形式：1：PC，2：无线，默认：１
        :param end_tk_rate: 商品筛选-淘客佣金比率上限。如：1234表示12.34%
        :param start_tk_rate: 商品筛选-淘客佣金比率下限。如：1234表示12.34%
        :param end_price: 商品筛选-折扣价范围上限。单位：元
        :param start_price: 商品筛选-折扣价范围下限。单位：元
        :param is_overseas: 商品筛选-是否海外商品。true表示属于海外商品，false或不设置表示不限
        :param is_tmall: 商品筛选-是否天猫商品。true表示属于天猫商品，false或不设置表示不限
        :param sort: 排序_des（降序），排序_asc（升序），销量（total_sales），淘客佣金比率（tk_rate）， 累计推广量（tk_total_sales），总支出佣金（tk_total_commi），价格（price）
        :param itemloc: 商品筛选-所在地
        :param cat: 商品筛选-后台类目ID。用,分割，最大10个，该ID可以通过taobao.itemcats.get接口获取到
        :param q: 商品筛选-查询词
        :param material_id: 官方的物料Id(详细物料id见：https://tbk.bbs.taobao.com/detail.html?appId=45301&postId=8576096)，不传时默认为2836
        :param has_coupon: 优惠券筛选-是否有优惠券。true表示该商品有优惠券，false或不设置表示不限
        :param ip: ip参数影响邮费获取，如果不传或者传入不准确，邮费无法精准提供
        :param need_free_shipment: 商品筛选-是否包邮。true表示包邮，false或不设置表示不限
        :param need_prepay: 商品筛选-是否加入消费者保障。true表示加入，false或不设置表示不限
        :param include_pay_rate_30: 商品筛选(特定媒体支持)-成交转化是否高于行业均值。True表示大于等于，false或不设置表示不限
        :param include_good_rate: 商品筛选-好评率是否高于行业均值。True表示大于等于，false或不设置表示不限
        :param include_rfd_rate: 商品筛选(特定媒体支持)-退款率是否低于行业均值。True表示大于等于，false或不设置表示不限
        :param npx_level: 商品筛选-牛皮癣程度。取值：1不限，2无，3轻微
        :param end_ka_tk_rate: 商品筛选-KA媒体淘客佣金比率上限。如：1234表示12.34%
        :param start_ka_tk_rate: 商品筛选-KA媒体淘客佣金比率下限。如：1234表示12.34%
        :param device_encrypt: 智能匹配-设备号加密类型：MD5
        :param device_value: 智能匹配-设备号加密后的值（MD5加密需32位小写）
        :param device_type: 智能匹配-设备号类型：IMEI，或者IDFA，或者UTDID（UTDID不支持MD5加密）
        """
        return self._top_request(
            "taobao.tbk.dg.material.optional",
            {
                "adzone_id": adzone_id,
                "start_dsr": start_dsr,
                "page_size": page_size,
                "page_no": page_no,
                "platform": platform,
                "end_tk_rate": end_tk_rate,
                "start_tk_rate": start_tk_rate,
                "end_price": end_price,
                "start_price": start_price,
                "is_overseas": is_overseas,
                "is_tmall": is_tmall,
                "sort": sort,
                "itemloc": itemloc,
                "cat": cat,
                "q": q,
                "material_id": material_id,
                "has_coupon": has_coupon,
                "ip": ip,
                "need_free_shipment": need_free_shipment,
                "need_prepay": need_prepay,
                "include_pay_rate_30": include_pay_rate_30,
                "include_good_rate": include_good_rate,
                "include_rfd_rate": include_rfd_rate,
                "npx_level": npx_level,
                "end_ka_tk_rate": end_ka_tk_rate,
                "start_ka_tk_rate": start_ka_tk_rate,
                "device_encrypt": device_encrypt,
                "device_value": device_value,
                "device_type": device_type
            }
        )

    def taobao_tbk_dg_newuser_order_sum(
            self,
            page_size,
            page_no,
            activity_id,
            adzone_id='',
            site_id='',
            settle_month=''
    ):
        """
        拉新活动汇总API--导购
        拉新活动汇总API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36836

        :param page_size: 页大小，默认20，1~100
        :param page_no: 页码，默认1
        :param activity_id: 活动id， 活动名称与活动ID列表，请参见https://tbk.bbs.taobao.com/detail.html?appId=45301&postId=8599277
        :param adzone_id: mm_xxx_xxx_xxx的第三位
        :param site_id: mm_xxx_xxx_xxx的第二位
        :param settle_month: 结算月份
        """
        return self._top_request(
            "taobao.tbk.dg.newuser.order.sum",
            {
                "page_size": page_size,
                "page_no": page_no,
                "activity_id": activity_id,
                "adzone_id": adzone_id,
                "site_id": site_id,
                "settle_month": settle_month
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_tbk_sc_newuser_order_sum(
            self,
            page_size,
            page_no,
            activity_id,
            adzone_id='',
            site_id='',
            settle_month=''
    ):
        """
        拉新活动汇总API--社交
        拉新活动汇总API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36837

        :param page_size: 页大小，默认20，1~100
        :param page_no: 页码，默认1
        :param activity_id: 活动ID，现有活动id包括： 2月手淘拉新：119013_2；3月手淘拉新：119013_3；
        :param adzone_id: mm_xxx_xxx_xxx的第三位
        :param site_id: mm_xxx_xxx_xxx的第二位
        :param settle_month: 结算月份，需按照活动的结算月份传入具体的值：201807
        """
        return self._top_request(
            "taobao.tbk.sc.newuser.order.sum",
            {
                "page_size": page_size,
                "page_no": page_no,
                "activity_id": activity_id,
                "adzone_id": adzone_id,
                "site_id": site_id,
                "settle_month": settle_month
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_tbk_sc_optimus_material(
            self,
            adzone_id,
            site_id,
            page_size='20',
            page_no='1',
            material_id='0',
            device_type='',
            device_encrypt='',
            device_value='',
            content_id='',
            content_source='',
            item_id=''
    ):
        """
        淘宝客擎天柱通用物料API - 社交
        通用物料推荐，传入官方公布的物料id，可获取指定物料
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37884

        :param adzone_id: mm_xxx_xxx_xxx的第三位
        :param site_id: mm_xxx_xxx_xxx的第二位
        :param page_size: 页大小，默认20，1~100
        :param page_no: 第几页，默认：1
        :param material_id: 官方的物料Id(详细物料id见：https://tbk.bbs.taobao.com/detail.html?appId=45301&postId=8576096)
        :param device_type: 智能匹配-设备号类型：IMEI，或者IDFA，或者UTDID（UTDID不支持MD5加密）
        :param device_encrypt: 智能匹配-设备号加密类型：MD5
        :param device_value: 智能匹配-设备号加密后的值（MD5加密需32位小写）
        :param content_id: 内容专用-内容详情ID
        :param content_source: 内容专用-内容渠道信息
        :param item_id: 商品ID，用于相似商品推荐
        """
        return self._top_request(
            "taobao.tbk.sc.optimus.material",
            {
                "adzone_id": adzone_id,
                "site_id": site_id,
                "page_size": page_size,
                "page_no": page_no,
                "material_id": material_id,
                "device_type": device_type,
                "device_encrypt": device_encrypt,
                "device_value": device_value,
                "content_id": content_id,
                "content_source": content_source,
                "item_id": item_id
            }
        )

    def taobao_tbk_activitylink_get(
            self,
            adzone_id,
            promotion_scene_id,
            platform='1',
            union_id='',
            sub_pid='',
            relation_id=''
    ):
        """
        淘宝联盟官方活动推广API-媒体
        淘宝联盟官方活动推广API-媒体，从官方活动列表页取出“官方活动ID”，支持二方、三方
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41918

        :param adzone_id: 推广位id，mm_xx_xx_xx pid三段式中的第三段。adzone_id需属于appKey拥有者
        :param promotion_scene_id: 官方活动ID，从官方活动页获取
        :param platform: 1：PC，2：无线，默认：１
        :param union_id: 自定义输入串，英文和数字组成，长度不能大于12个字符，区分不同的推广渠道
        :param sub_pid: 媒体平台下达人的淘客pid
        :param relation_id: 渠道关系ID，仅适用于渠道推广场景
        """
        return self._top_request(
            "taobao.tbk.activitylink.get",
            {
                "adzone_id": adzone_id,
                "promotion_scene_id": promotion_scene_id,
                "platform": platform,
                "union_id": union_id,
                "sub_pid": sub_pid,
                "relation_id": relation_id
            }
        )

    def taobao_tbk_sc_activitylink_toolget(
            self,
            adzone_id,
            site_id,
            promotion_scene_id,
            platform='1',
            union_id='',
            relation_id=''
    ):
        """
        淘宝联盟官方活动推广API-工具
        淘宝联盟官方活动推广API-工具，从官方活动列表页取出“官方活动ID”进行转链，支持二方、三方
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41921

        :param adzone_id: 推广位id，mm_xx_xx_xx pid三段式中的第三段
        :param site_id: 推广位id，mm_xx_xx_xx pid三段式中的第二段
        :param promotion_scene_id: 官方活动ID，从官方活动页获取
        :param platform: 1：PC，2：无线，默认：１
        :param union_id: 自定义输入串，英文和数字组成，长度不能大于12个字符，区分不同的推广渠道
        :param relation_id: 渠道关系ID，仅适用于渠道推广场景
        """
        return self._top_request(
            "taobao.tbk.sc.activitylink.toolget",
            {
                "adzone_id": adzone_id,
                "site_id": site_id,
                "promotion_scene_id": promotion_scene_id,
                "platform": platform,
                "union_id": union_id,
                "relation_id": relation_id
            }
        )

    def taobao_tbk_dg_punish_order_get(
            self,
            af_order_option=None
    ):
        """
        处罚订单查询 -导购-私域用户管理专用
        新增处罚订单查询API，提供媒体调用查询能力。这个是给媒体自己用的
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42050

        :param af_order_option: 入参的对象
        """
        return self._top_request(
            "taobao.tbk.dg.punish.order.get",
            {
                "af_order_option": af_order_option
            }
        )

    def taobao_tbk_content_get(
            self,
            adzone_id,
            type='',
            before_timestamp='',
            count='10',
            cid='',
            image_width='300',
            image_height='300',
            content_set=''
    ):
        """
        淘客媒体内容输出
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31137

        :param adzone_id: 推广位
        :param type: 内容类型，1:图文、2: 图集、3: 短视频
        :param before_timestamp: 表示取这个时间点以前的数据，以毫秒为单位（出参中的last_timestamp是指本次返回的内容中最早一条的数据，下一次作为before_timestamp传过来，即可实现翻页）
        :param count: 表示期望获取条数
        :param cid: 类目
        :param image_width: 图片宽度
        :param image_height: 图片高度
        :param content_set: 默认可不传,内容库类型:1 优质内容
        """
        return self._top_request(
            "taobao.tbk.content.get",
            {
                "adzone_id": adzone_id,
                "type": type,
                "before_timestamp": before_timestamp,
                "count": count,
                "cid": cid,
                "image_width": image_width,
                "image_height": image_height,
                "content_set": content_set
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_tbk_content_effect_get(
            self,
            option=None
    ):
        """
        淘客媒体内容效果输出
        淘客媒体内容维度的效果输出。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37130

        :param option: 入参
        """
        return self._top_request(
            "taobao.tbk.content.effect.get",
            {
                "option": option
            }
        )

    def taobao_tbk_dg_vegas_tlj_create(
            self,
            adzone_id,
            item_id,
            total_num,
            name,
            user_total_win_num_limit,
            security_switch,
            per_face,
            send_start_time,
            campaign_type='MKT',
            send_end_time='',
            use_end_time='',
            use_end_time_mode='',
            use_start_time=''
    ):
        """
        淘礼金创建
        创建淘礼金
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40173

        :param adzone_id: 妈妈广告位Id
        :param item_id: 宝贝id
        :param total_num: 淘礼金总个数
        :param name: 淘礼金名称，最大10个字符
        :param user_total_win_num_limit: 单用户累计中奖次数上限
        :param security_switch: 安全开关
        :param per_face: 单个淘礼金面额，支持两位小数，单位元
        :param send_start_time: 发放开始时间
        :param campaign_type: CPS佣金计划类型
        :param send_end_time: 发放截止时间
        :param use_end_time: 使用结束日期。如果是结束时间模式为相对时间，时间格式为1-7直接的整数, 例如，1（相对领取时间1天）； 如果是绝对时间，格式为yyyy-MM-dd，例如，2019-01-29，表示到2019-01-29 23:59:59结束
        :param use_end_time_mode: 结束日期的模式,1:相对时间，2:绝对时间
        :param use_start_time: 使用开始日期。相对时间，无需填写，以用户领取时间作为使用开始时间。绝对时间，格式 yyyy-MM-dd，例如，2019-01-29，表示从2019-01-29 00:00:00 开始
        """
        return self._top_request(
            "taobao.tbk.dg.vegas.tlj.create",
            {
                "adzone_id": adzone_id,
                "item_id": item_id,
                "total_num": total_num,
                "name": name,
                "user_total_win_num_limit": user_total_win_num_limit,
                "security_switch": security_switch,
                "per_face": per_face,
                "send_start_time": send_start_time,
                "campaign_type": campaign_type,
                "send_end_time": send_end_time,
                "use_end_time": use_end_time,
                "use_end_time_mode": use_end_time_mode,
                "use_start_time": use_start_time
            }
        )

    def taobao_tbk_dg_vegas_tlj_instance_report(
            self,
            rights_id
    ):
        """
        导购淘礼金实例维度报表
        淘礼金实例维度相关报表数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43317

        :param rights_id: 实例ID
        """
        return self._top_request(
            "taobao.tbk.dg.vegas.tlj.instance.report",
            {
                "rights_id": rights_id
            }
        )


class TbGongJu(DingTalkBaseAPI):
    """
    工具API
    """

    def taobao_time_get(
            self
    ):
        """
        获取淘宝系统当前时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=120

        """
        return self._top_request(
            "taobao.time.get",
            result_processor=lambda x: x["time"]
        )

    def taobao_kfc_keyword_search(
            self,
            content,
            nick='',
            apply=''
    ):
        """
        关键词过滤匹配
        对输入的文本信息进行禁忌关键词匹配，返回匹配的结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10385

        :param content: 需要过滤的文本信息
        :param nick: 发布信息的淘宝会员名，可以不传
        :param apply: 应用点，分为一级应用点、二级应用点。其中一级应用点通常是指某一个系统或产品，比如淘宝的商品应用（taobao_auction）；二级应用点，是指一级应用点下的具体的分类，比如商品标题(title)、商品描述(content)。不同的二级应用可以设置不同关键词。<br/><br/>这里的apply参数是由一级应用点与二级应用点合起来的字符（一级应用点+'.'+二级应用点），如taobao_auction.title。<br/><br/><br/>通常apply参数是不需要传递的。如有特殊需求（比如特殊的过滤需求，需要自己维护一套自己词库），需传递此参数。
        """
        return self._top_request(
            "taobao.kfc.keyword.search",
            {
                "content": content,
                "nick": nick,
                "apply": apply
            },
            result_processor=lambda x: x["kfc_search_result"]
        )

    def taobao_topats_result_get(
            self,
            task_id
    ):
        """
        获取异步任务结果
        获取异步任务结果。<br/><br/>异步API使用方法，请查看：<a href='http://open.taobao.com/doc/detail.htm?id=30'>异步API使用说明</a><br/><br/>1. 只能获取AppKey自身创建的异步任务结果<br/><br/>2. 如果任务状态为done，则返回任务结果（如taobao.topats.trades.fullinfo.get）或下载地址（如taobao.topats.trades.sold.get）<br/><br/>3. 任务结果下载地址只能使用一次，需要重复下载可重新调用此接口获取下载地址
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10415

        :param task_id: 任务ID，创建任务时返回的task_id
        """
        return self._top_request(
            "taobao.topats.result.get",
            {
                "task_id": task_id
            },
            result_processor=lambda x: x["task"]
        )

    def taobao_topats_task_delete(
            self,
            task_id
    ):
        """
        取消已经创建的异步任务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        可用于取消已经创建的异步任务。</br><br/>条件限制：</br><br/>1)一次只可以取消一个任务</br><br/>2）只能取消自己创建的任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11069

        :param task_id: 需要取消的任务ID
        """
        return self._top_request(
            "taobao.topats.task.delete",
            {
                "task_id": task_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_appip_get(
            self
    ):
        """
        获取ISV发起请求服务器IP
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21784

        """
        return self._top_request(
            "taobao.appip.get",
            result_processor=lambda x: x["ip"]
        )

    def taobao_openuid_change(
            self,
            open_uid,
            target_app_key
    ):
        """
        淘宝openUid 转换
        将当前应用所属的openUId 转换为对应targetAppkey的openUid
        规则：
        1.如果两个appkey是应用前后台关系，可以直接转换；
        2.如果appkey和targetAppkey都属于同一个开发者，不允许互相转换。
        3.如果appkey和targetAppkey不属于同一个开发者，不允许互相转换。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23831

        :param open_uid: openUid
        :param target_app_key: 转换到的appkey
        """
        return self._top_request(
            "taobao.openuid.change",
            {
                "open_uid": open_uid,
                "target_app_key": target_app_key
            },
            result_processor=lambda x: x["new_open_uid"]
        )

    def taobao_top_auth_token_refresh(
            self,
            refresh_token
    ):
        """
        刷新Access Token
        根据refresh_token重新生成token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25387

        :param refresh_token: grantType==refresh_token 时需要
        """
        return self._top_request(
            "taobao.top.auth.token.refresh",
            {
                "refresh_token": refresh_token
            },
            result_processor=lambda x: x["token_result"]
        )

    def taobao_top_auth_token_create(
            self,
            code,
            uuid=''
    ):
        """
        获取Access Token
        用户通过code换获取access_token，https only
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25388

        :param code: 授权code，grantType==authorization_code 时需要
        :param uuid: 与生成code的uuid配对
        """
        return self._top_request(
            "taobao.top.auth.token.create",
            {
                "code": code,
                "uuid": uuid
            },
            result_processor=lambda x: x["token_result"]
        )

    def taobao_httpdns_get(
            self
    ):
        """
        TOPDNS配置
        获取TOP DNS配置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25414

        """
        return self._top_request(
            "taobao.httpdns.get"
        )

    def taobao_top_ipout_get(
            self
    ):
        """
        获取开放平台出口IP段
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25441

        """
        return self._top_request(
            "taobao.top.ipout.get",
            result_processor=lambda x: x["ip_list"]
        )

    def taobao_top_secret_get(
            self,
            random_num,
            secret_version='',
            customer_user_id=''
    ):
        """
        获取TOP通道解密秘钥
        top sdk通过api获取对应解密秘钥
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26567

        :param random_num: 伪随机数
        :param secret_version: 秘钥版本号
        :param customer_user_id: 自定义用户id
        """
        return self._top_request(
            "taobao.top.secret.get",
            {
                "random_num": random_num,
                "secret_version": secret_version,
                "customer_user_id": customer_user_id
            }
        )

    def taobao_top_secret_register(
            self,
            user_id=''
    ):
        """
        注册加密账号
        提供给isv注册非淘系账号秘钥，isv依赖sdk自主加、解密
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27385

        :param user_id: 用户id，保证唯一
        """
        return self._top_request(
            "taobao.top.secret.register",
            {
                "user_id": user_id
            }
        )

    def taobao_top_sdk_feedback_upload(
            self,
            type,
            content=''
    ):
        """
        sdk信息回调
        sdk回调客户端基本信息到开放平台，用于做监控之类，有助于帮助isv监控系统稳定性
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27512

        :param type: 1、回传加密信息
        :param content: 具体内容，json形式
        """
        return self._top_request(
            "taobao.top.sdk.feedback.upload",
            {
                "type": type,
                "content": content
            },
            result_processor=lambda x: x["upload_interval"]
        )

    def taobao_streetest_session_get(
            self
    ):
        """
        根据获取压测用户的sessionKey
        根据正常用户sessionKey获取对应压测用户的sessionKey，该sessionKey只能用户服务商全链路压测
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28185

        """
        return self._top_request(
            "taobao.streetest.session.get",
            result_processor=lambda x: x["stree_test_session_key"]
        )

    def taobao_qimen_trade_users_get(
            self,
            page_index,
            page_size
    ):
        """
        获取奇门用户列表
        获取已开通奇门订单服务的用户列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28674

        :param page_index: 每页的数量
        :param page_size: 页数
        """
        return self._top_request(
            "taobao.qimen.trade.users.get",
            {
                "page_index": page_index,
                "page_size": page_size
            }
        )

    def taobao_qimen_trade_user_delete(
            self
    ):
        """
        删除奇门订单链路用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28675

        """
        return self._top_request(
            "taobao.qimen.trade.user.delete",
            result_processor=lambda x: x["modal"]
        )

    def taobao_qimen_trade_user_add(
            self,
            memo=''
    ):
        """
        添加奇门订单链路用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28676

        :param memo: 商家备注
        """
        return self._top_request(
            "taobao.qimen.trade.user.add",
            {
                "memo": memo
            }
        )

    def taobao_qimen_events_produce(
            self,
            messages
    ):
        """
        批量发送奇门事件
        批量发送消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28677

        :param messages: 奇门事件列表, 最多50条
        """
        return self._top_request(
            "taobao.qimen.events.produce",
            {
                "messages": messages
            }
        )

    def taobao_qimen_event_produce(
            self,
            status,
            tid,
            ext='',
            platform='',
            create='',
            nick=''
    ):
        """
        发出奇门事件
        当订单被处理时，用于通知奇门系统。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28678

        :param status: 事件状态，如QIMEN_ERP_TRANSFER，QIMEN_ERP_CHECK
        :param tid: 淘宝订单号
        :param ext: JSON格式扩展字段
        :param platform: 商家平台编码.MAIN:官方渠道,JD:京东,DD:当当,PP:拍拍,YX:易讯,EBAY:ebay,AMAZON:亚马逊,SN:苏宁,GM:国美,WPH:唯品会,JM:聚美,MGJ:蘑菇街,YT:银泰,YHD:1号店,1688:1688,POS:POS门店,OTHER:其他
        :param create: 订单创建时间,数字
        :param nick: 外部商家名称。必须同时填写platform
        """
        return self._top_request(
            "taobao.qimen.event.produce",
            {
                "status": status,
                "tid": tid,
                "ext": ext,
                "platform": platform,
                "create": create,
                "nick": nick
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_tmc_auth_get(
            self,
            group=''
    ):
        """
        TMC授权token
        TMC连接授权Token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29033

        :param group: tmc组名
        """
        return self._top_request(
            "taobao.tmc.auth.get",
            {
                "group": group
            }
        )

    def taobao_rdc_aligenius_refunds_check(
            self,
            param
    ):
        """
        退款信息审核
        根据退款信息，对退款单进行审核
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29161

        :param param: 入参
        """
        return self._top_request(
            "taobao.rdc.aligenius.refunds.check",
            {
                "param": param
            }
        )

    def taobao_rdc_aligenius_autorefunds_query(
            self,
            start_time,
            end_time,
            page_no,
            page_size
    ):
        """
        退款信息查询
        （此接口后期将不再维护，请勿使用）供第三方商家查询授权给自己的所有退款款订单的退款信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29167

        :param start_time: 查询数据时间段开始时间
        :param end_time: 查询数据时间段结束时间
        :param page_no: 页数
        :param page_size: 每页数据数
        """
        return self._top_request(
            "taobao.rdc.aligenius.autorefunds.query",
            {
                "start_time": start_time,
                "end_time": end_time,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_interact_sensor_ui(
            self,
            un_named=''
    ):
        """
        基本ui操作
        Weex 基本UI操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30850

        :param un_named: 仅作客户端鉴权使用，不会发送接收请求
        """
        return self._top_request(
            "alibaba.interact.sensor.ui",
            {
                "un_named": un_named
            },
            result_processor=lambda x: x["unnamed"]
        )

    def tmall_marketing_face_skindetect(
            self,
            image,
            source,
            front_camera='0',
            mixnick='mixnick'
    ):
        """
        肌肤检测
        提供人脸肌肤属性报告
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31053

        :param image: 图片的base64（必须以base64,开头）
        :param source: isv标识
        :param front_camera: 前置摄像头1，后置摄像头0
        :param mixnick: 混淆nick
        """
        return self._top_request(
            "tmall.marketing.face.skindetect",
            {
                "image": image,
                "source": source,
                "front_camera": front_camera,
                "mixnick": mixnick
            },
            result_processor=lambda x: x["detect_result"]
        )

    def alibaba_retail_shorturl_get(
            self,
            source_url,
            options=None
    ):
        """
        短链接获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31753

        :param source_url: 源url
        :param options: 系统自动生成
        """
        return self._top_request(
            "alibaba.retail.shorturl.get",
            {
                "source_url": source_url,
                "options": options
            }
        )

    def alibaba_retail_device_trade_ship(
            self,
            device_type,
            device_id,
            trade_no,
            ship_detail_list,
            order_update_option=None
    ):
        """
        贩卖机掉货成功通知
        贩卖机发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31756

        :param device_type: 设备类型
        :param device_id: 设备ID
        :param trade_no: 内部订单编号
        :param ship_detail_list: 详情
        :param order_update_option: 选项
        """
        return self._top_request(
            "alibaba.retail.device.trade.ship",
            {
                "device_type": device_type,
                "device_id": device_id,
                "trade_no": trade_no,
                "ship_detail_list": ship_detail_list,
                "order_update_option": order_update_option
            }
        )

    def taobao_files_get(
            self,
            start_date,
            end_date,
            status=''
    ):
        """
        业务文件获取
        获取业务方暂存给ISV的文件列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32298

        :param start_date: 搜索开始时间
        :param end_date: 搜索结束时间
        :param status: 下载链接状态。1:未下载。2:已下载
        """
        return self._top_request(
            "taobao.files.get",
            {
                "start_date": start_date,
                "end_date": end_date,
                "status": status
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_openlink_session_get(
            self,
            code
    ):
        """
        获取授权session信息
        帮助第三方isv生成三方session
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32315

        :param code: 授权码
        """
        return self._top_request(
            "taobao.openlink.session.get",
            {
                "code": code
            }
        )

    def taobao_cloudbridge_caseinvest_execute(
            self,
            api_name='',
            data=''
    ):
        """
        红盾云桥案件协查服务
        通过API接口直接提供政府部门录入及查询函件服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32353

        :param api_name: 方法名称
        :param data: 方法参数
        """
        return self._top_request(
            "taobao.cloudbridge.caseinvest.execute",
            {
                "api_name": api_name,
                "data": data
            }
        )

    def taobao_openuid_get(
            self
    ):
        """
        获取授权账号对应的OpenUid
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33220

        """
        return self._top_request(
            "taobao.openuid.get",
            result_processor=lambda x: x["open_uid"]
        )

    def taobao_openuid_get_bytrade(
            self,
            tid
    ):
        """
        通过订单获取对应买家的openUID
        通过订单获取对应买家的openUID,需要卖家授权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33221

        :param tid: 订单ID
        """
        return self._top_request(
            "taobao.openuid.get.bytrade",
            {
                "tid": tid
            },
            result_processor=lambda x: x["open_uid"]
        )

    def taobao_openuid_get_bymixnick(
            self,
            mix_nick
    ):
        """
        通过mixnick转换openuid
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33223

        :param mix_nick: 无线类应用获取到的混淆的nick
        """
        return self._top_request(
            "taobao.openuid.get.bymixnick",
            {
                "mix_nick": mix_nick
            },
            result_processor=lambda x: x["open_uid"]
        )

    def tmall_marketing_face_faceinference(
            self,
            image,
            source,
            user_id='mixnick'
    ):
        """
        人脸特征推断
        提供人脸特征检测功能，如脸型，发型等信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33934

        :param image: 图片url
        :param source: isv标识
        :param user_id: 混淆昵称
        """
        return self._top_request(
            "tmall.marketing.face.faceinference",
            {
                "image": image,
                "source": source,
                "user_id": user_id
            },
            result_processor=lambda x: x["inference_result"]
        )

    def alibaba_cuntao_interact_requisition_update(
            self,
            status='"makeEnd"',
            uuid_list=''
    ):
        """
        更新物料制作状态
        村淘物料下沉，更新物料制作状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40393

        :param status: 物料制作状态
        :param uuid_list: 申请单id列表
        """
        return self._top_request(
            "alibaba.cuntao.interact.requisition.update",
            {
                "status": status,
                "uuid_list": uuid_list
            }
        )

    def alibaba_cuntao_interact_requisition_get(
            self,
            page_size='20',
            gmt_create_end='',
            gmt_create_start='',
            page_index='0'
    ):
        """
        供应商获取物料申请单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40394

        :param page_size: 页大小，默认20
        :param gmt_create_end: 截止时间戳，开区间
        :param gmt_create_start: 开始时间戳，闭区间
        :param page_index: 页码，从0开始
        """
        return self._top_request(
            "alibaba.cuntao.interact.requisition.get",
            {
                "page_size": page_size,
                "gmt_create_end": gmt_create_end,
                "gmt_create_start": gmt_create_start,
                "page_index": page_index
            }
        )

    def alibaba_interact_supplier_award_resource_get_cuntao(
            self,
            user_nick,
            activity_key,
            lng='',
            lat=''
    ):
        """
        权益池信息查询
        农村淘宝营销互动权益池信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42702

        :param user_nick: 用户昵称
        :param activity_key: 活动code
        :param lng: 经度
        :param lat: 纬度
        """
        return self._top_request(
            "alibaba.interact.supplier.award.resource.get.cuntao",
            {
                "user_nick": user_nick,
                "activity_key": activity_key,
                "lng": lng,
                "lat": lat
            }
        )


class TbWuLiuBao(DingTalkBaseAPI):
    """
    物流宝API
    """

    def taobao_wlb_order_consign(
            self,
            wlb_order_code
    ):
        """
        物流宝订单已发货通知接口
        如果erp导入淘宝交易订单到物流宝，当物流宝订单已发货的时候，erp需要调用该接口来通知物流订单和淘宝交易订单已发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10597

        :param wlb_order_code: 物流宝订单编号
        """
        return self._top_request(
            "taobao.wlb.order.consign",
            {
                "wlb_order_code": wlb_order_code
            },
            result_processor=lambda x: x["modify_time"]
        )

    def taobao_wlb_notify_message_confirm(
            self,
            message_id
    ):
        """
        物流宝通知消息确认
        确认物流宝可执行消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10603

        :param message_id: 物流宝通知消息的id，通过taobao.wlb.notify.message.page.get接口得到的WlbMessage数据结构中的id字段
        """
        return self._top_request(
            "taobao.wlb.notify.message.confirm",
            {
                "message_id": message_id
            },
            result_processor=lambda x: x["gmt_modified"]
        )

    def taobao_wlb_notify_message_page_get(
            self,
            msg_code='',
            page_no='',
            page_size='',
            start_date='',
            end_date='',
            status=''
    ):
        """
        物流宝通知消息查询接口
        物流宝提供的消息通知查询接口，消息内容包括;出入库单不一致消息，取消订单成功消息，盘点单消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10604

        :param msg_code: 通知消息编码： STOCK_IN_NOT_CONSISTENT---入库单不一致 CANCEL_ORDER_SUCCESS---取消订单成功 INVENTORY_CHECK---盘点 CANCEL_ORDER_FAILURE---取消订单失败 ORDER_REJECT--wms拒单 ORDER_CONFIRMED--订单处理成功
        :param page_no: 分页查询页数
        :param page_size: 分页查询的每页页数
        :param start_date: 记录开始时间
        :param end_date: 记录截至时间
        :param status: 消息状态： 不需要确认：NO_NEED_CONFIRM 已确认：CONFIRMED 待确认：TO_BE_CONFIRM
        """
        return self._top_request(
            "taobao.wlb.notify.message.page.get",
            {
                "msg_code": msg_code,
                "page_no": page_no,
                "page_size": page_size,
                "start_date": start_date,
                "end_date": end_date,
                "status": status
            }
        )

    def taobao_wlb_tmsorder_query(
            self,
            order_code,
            page_no='1',
            page_size='20'
    ):
        """
        通过物流订单编号查询物流信息
        通过物流订单编号分页查询物流信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10609

        :param order_code: 物流订单编号
        :param page_no: 当前页
        :param page_size: 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录
        """
        return self._top_request(
            "taobao.wlb.tmsorder.query",
            {
                "order_code": order_code,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_wlb_item_map_get(
            self,
            item_id
    ):
        """
        根据物流宝商品ID查询商品映射关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10614

        :param item_id: 要查询映射关系的物流宝商品id
        """
        return self._top_request(
            "taobao.wlb.item.map.get",
            {
                "item_id": item_id
            }
        )

    def taobao_wlb_item_combination_get(
            self,
            item_id
    ):
        """
        根据商品id查询商品组合关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10615

        :param item_id: 要查询的组合商品id
        """
        return self._top_request(
            "taobao.wlb.item.combination.get",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["item_id_list"]
        )

    def taobao_wlb_inventorylog_query(
            self,
            item_id='',
            store_code='',
            order_code='',
            gmt_start='',
            gmt_end='',
            page_no='1',
            page_size='20',
            op_user_id='',
            op_type=''
    ):
        """
        根据商品ID查询所有库存变更记录
        通过商品ID等几个条件来分页查询库存变更记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10617

        :param item_id: 商品ID
        :param store_code: 仓库编码
        :param order_code: 单号
        :param gmt_start: 起始修改时间,大于等于该时间
        :param gmt_end: 结束修改时间,小于等于该时间
        :param page_no: 当前页
        :param page_size: 分页记录个数
        :param op_user_id: 可指定授权的用户来查询
        :param op_type: 库存操作作类型(可以为空) CHU_KU 1-出库 RU_KU 2-入库 FREEZE 3-冻结 THAW 4-解冻 CHECK_FREEZE 5-冻结确认 CHANGE_KU 6-库存类型变更 若值不在范围内，则按CHU_KU处理
        """
        return self._top_request(
            "taobao.wlb.inventorylog.query",
            {
                "item_id": item_id,
                "store_code": store_code,
                "order_code": order_code,
                "gmt_start": gmt_start,
                "gmt_end": gmt_end,
                "page_no": page_no,
                "page_size": page_size,
                "op_user_id": op_user_id,
                "op_type": op_type
            }
        )

    def taobao_wlb_item_update(
            self,
            id,
            update_property_key_list='',
            delete_property_key_list='',
            update_property_value_list='',
            name='',
            title='',
            remark='',
            is_friable='',
            is_dangerous='',
            color='',
            weight='',
            length='',
            width='',
            height='',
            volume='',
            goods_cat='',
            pricing_cat='',
            package_material=''
    ):
        """
        物流宝商品修改
        修改物流宝商品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10619

        :param id: 要修改的商品id
        :param update_property_key_list: 需要修改的商品属性值的列表，如果属性不存在，则新增属性
        :param delete_property_key_list: 需要删除的商品属性key列表
        :param update_property_value_list: 需要修改的属性值的列表
        :param name: 要修改的商品名称
        :param title: 要修改的商品标题
        :param remark: 要修改的商品备注
        :param is_friable: 是否易碎品
        :param is_dangerous: 是否危险品
        :param color: 商品颜色
        :param weight: 商品重量，单位G
        :param length: 商品长度，单位厘米
        :param width: 商品宽度，单位厘米
        :param height: 商品高度，单位厘米
        :param volume: 商品体积，单位立方厘米
        :param goods_cat: 商品货类
        :param pricing_cat: 商品计价货类
        :param package_material: 商品包装材料类型
        """
        return self._top_request(
            "taobao.wlb.item.update",
            {
                "id": id,
                "update_property_key_list": update_property_key_list,
                "delete_property_key_list": delete_property_key_list,
                "update_property_value_list": update_property_value_list,
                "name": name,
                "title": title,
                "remark": remark,
                "is_friable": is_friable,
                "is_dangerous": is_dangerous,
                "color": color,
                "weight": weight,
                "length": length,
                "width": width,
                "height": height,
                "volume": volume,
                "goods_cat": goods_cat,
                "pricing_cat": pricing_cat,
                "package_material": package_material
            },
            result_processor=lambda x: x["gmt_modified"]
        )

    def taobao_wlb_subscription_query(
            self,
            status='',
            page_no='1',
            page_size='20'
    ):
        """
        查询商家定购的所有服务
        查询商家定购的所有服务,可通过入参状态来筛选
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10620

        :param status: 状态 <br/>AUDITING 1-待审核; <br/>CANCEL 2-撤销 ;<br/>CHECKED 3-审核通过 ;<br/>FAILED 4-审核未通过 ;<br/>SYNCHRONIZING 5-同步中;<br/>只允许输入上面指定的值，且可以为空，为空时查询所有状态。若输错了，则按AUDITING处理。
        :param page_no: 当前页
        :param page_size: 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录
        """
        return self._top_request(
            "taobao.wlb.subscription.query",
            {
                "status": status,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_wlb_order_page_get(
            self,
            page_size='20',
            page_no='1',
            order_status='',
            order_code='',
            order_type='',
            order_sub_type='',
            end_time='',
            start_time=''
    ):
        """
        分页查询物流宝订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10622

        :param page_size: 每页多少条
        :param page_no: 分页的第几页
        :param order_status: TMS拒签：-100 接收方拒签：-200
        :param order_code: 物流订单编号
        :param order_type: 订单类型: （1）NORMAL_OUT ：正常出库 （2）NORMAL_IN：正常入库 （3）RETURN_IN：退货入库 （4）EXCHANGE_OUT：换货出库
        :param order_sub_type: 订单子类型： （1）OTHER： 其他 （2）TAOBAO_TRADE： 淘宝交易 （3）OTHER_TRADE：其他交易 （4）ALLCOATE： 调拨 （5）CHECK: 盘点单 （6）PURCHASE: 采购单
        :param end_time: 查询截止时间
        :param start_time: 查询开始时间
        """
        return self._top_request(
            "taobao.wlb.order.page.get",
            {
                "page_size": page_size,
                "page_no": page_no,
                "order_status": order_status,
                "order_code": order_code,
                "order_type": order_type,
                "order_sub_type": order_sub_type,
                "end_time": end_time,
                "start_time": start_time
            }
        )

    def taobao_wlb_orderstatus_get(
            self,
            order_code
    ):
        """
        物流宝订单流转状态查询
        根据物流宝订单号查询物流宝订单至目前为止的流转状态列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10625

        :param order_code: 物流宝订单编码
        """
        return self._top_request(
            "taobao.wlb.orderstatus.get",
            {
                "order_code": order_code
            },
            result_processor=lambda x: x["wlb_order_status"]
        )

    def taobao_wlb_order_cancel(
            self,
            wlb_order_code
    ):
        """
        取消物流宝订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10626

        :param wlb_order_code: 物流宝订单编号
        """
        return self._top_request(
            "taobao.wlb.order.cancel",
            {
                "wlb_order_code": wlb_order_code
            }
        )

    def taobao_wlb_item_get(
            self,
            item_id
    ):
        """
        根据商品ID获取商品信息
        根据商品ID获取商品信息,除了获取商品信息外还可获取商品属性信息和库存信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10627

        :param item_id: 商品ID
        """
        return self._top_request(
            "taobao.wlb.item.get",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["item"]
        )

    def taobao_wlb_tradeorder_get(
            self,
            trade_id,
            trade_type,
            sub_trade_id=''
    ):
        """
        根据交易号获取物流宝订单
        根据交易类型和交易id查询物流宝订单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10628

        :param trade_id: 指定交易类型的交易号
        :param trade_type: 交易类型: TAOBAO--淘宝交易 OTHER_TRADE--其它交易
        :param sub_trade_id: 子交易号
        """
        return self._top_request(
            "taobao.wlb.tradeorder.get",
            {
                "trade_id": trade_id,
                "trade_type": trade_type,
                "sub_trade_id": sub_trade_id
            },
            result_processor=lambda x: x["wlb_order_list"]
        )

    def taobao_wlb_inventory_detail_get(
            self,
            item_id,
            inventory_type_list='',
            store_code=''
    ):
        """
        查询库存详情
        查询库存详情，通过商品ID获取发送请求的卖家的库存详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10629

        :param item_id: 商品ID
        :param inventory_type_list: 库存类型列表，值包括：<br/>VENDIBLE--可销售库存<br/>FREEZE--冻结库存<br/>ONWAY--在途库存<br/>DEFECT--残次品库存<br/>ENGINE_DAMAGE--机损<br/>BOX_DAMAGE--箱损<br/>EXPIRATION--过保
        :param store_code: 仓库编码
        """
        return self._top_request(
            "taobao.wlb.inventory.detail.get",
            {
                "item_id": item_id,
                "inventory_type_list": inventory_type_list,
                "store_code": store_code
            }
        )

    def taobao_wlb_order_create(
            self,
            order_sub_type,
            order_type,
            out_biz_code,
            store_code,
            is_finished,
            order_item_list,
            schedule_type='',
            order_code='',
            prev_order_code='',
            tms_service_code='',
            tms_order_code='',
            schedule_start='',
            schedule_end='',
            order_flag='',
            alipay_no='',
            total_amount='',
            payable_amount='',
            service_fee='',
            buyer_nick='',
            receiver_info='',
            sender_info='',
            expect_start_time='',
            expect_end_time='',
            package_count='',
            tms_info='',
            invoince_info='',
            attributes='',
            remark=''
    ):
        """
        创建物流宝订单
        创建物流宝订单，由外部ISV或者ERP，Elink，淘宝交易产生
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10630

        :param order_sub_type: 订单子类型：  （1）OTHER： 其他  （2）TAOBAO_TRADE： 淘宝交易  （3）OTHER_TRADE：其他交易  （4）ALLCOATE： 调拨  （5）PURCHASE:采购
        :param order_type: 订单类型:  （1）NORMAL_OUT ：正常出库  （2）NORMAL_IN：正常入库  （3）RETURN_IN：退货入库  （4）EXCHANGE_OUT：换货出库
        :param out_biz_code: 外部订单业务ID，该编号在isv中是唯一编号， 用来控制并发，去重用
        :param store_code: 仓库编码
        :param is_finished: 该物流宝订单是否已完成，如果完成则设置为true，如果为false，则需要等待继续创建订单商品信息。
        :param order_item_list: 订单商品列表： {'order_item_list':[{'trade_code':'可选,淘宝交易订单，并且不是赠品，必须要传订单来源编号',' sub_trade_code ':'可选,淘宝子交易号','item_id':'必须,商品Id','item_code':'必须,商家编码','item_name':'可选,物流宝商品名称','item_quantity':'必选,计划数量','item_price':'必选,物品价格,单位为分','owner_user_nick
                                ':'可选,货主nick 代销模式下会存在','flag':'判断是否为赠品0 不是1是','remarks':'可选,备注','batch_remark':'可选，批次描述信息会把这个信息带给WMS，但不会跟物流宝库存相关联'，'inventory_type':'库存类型1 可销售库存 101 类型用来定义残次品 201 冻结类型库存 301 在途库存','picture_url':'图片Url','distributor_user_nick': '分销商NICK',必选'ext_order_item_code':'可选，外部商品的商家编码']} ======================================== 如果订单中的商品条目数大于50条的时候，我们会校验，不能创建成功，需要你按照50个一批的数量传，需要分批调用该接口，第二次传的时候，需要带上wlb_order_code和is_finished和order_item_list三个字段是必传的，is_finished为true表示传输完毕，为false表示还没完全传完。
        :param schedule_type: 投递时延要求:  （1）INSTANT_ARRIVED： 当日达  （2）TOMMORROY_MORNING_ARRIVED：次晨达  （3）TOMMORROY_ARRIVED：次日达  （4）工作日：WORK_DAY  （5）节假日：WEEKED_DAY
        :param order_code: 物流宝订单编号，该接口约定每次最多只能传50条order_item_list，如果一个物流宝订单超过50条商品的时候，需要批量来调用该接口，第一次调用的时候，wlb_order_code为空，如果第一次创建成功，该接口返回wlb_order_code，其后继续再该订单上添加商品条目，需要带上wlb_order_code，out_biz_code，order_item_list,is_finished四个字段。
        :param prev_order_code: 源订单编号
        :param tms_service_code: 物流公司编码
        :param tms_order_code: 运单编号，退货单时可能会使用
        :param schedule_start: 投递时间范围要求,格式'13:20'用分号隔开
        :param schedule_end: 投递时间范围要求,格式'15:20'用分号隔开
        :param order_flag: 用字符串格式来表示订单标记列表：比如COD^PRESELL^SPLIT^LIMIT 等，中间用“^”来隔开 ---------------------------------------- 订单标记list（所有字母全部大写）： 1: COD –货到付款 2: LIMIT-限时配送 3: PRESELL-预售 5:COMPLAIN-已投诉 7:SPLIT-拆单， 8:EXCHANGE-换货， 9:VISIT-上门 ， 10: MODIFYTRANSPORT-是否可改配送方式，<br/>: 是否可改配送方式  默认可更改<br/>11 CONSIGN 物流宝代理发货,自动更改发货状态<br/>12: SELLER_AFFORD 是否卖家承担运费 默认是，即没 13: SYNC_RETURN_BILL，同时退回发票
        :param alipay_no: 支付宝交易号
        :param total_amount: 总金额
        :param payable_amount: 应收金额，cod订单必选
        :param service_fee: cod服务费，只有cod订单的时候，才需要这个字段
        :param buyer_nick: 买家呢称
        :param receiver_info: 收货方信息，必须传， 手机和电话必选其一。
                              收货方信息：
                              邮编^^^省^^^市^^^区^^^具体地址^^^收件方名称^^^手机^^^电话
                              如果某一个字段的数据为空时，必须传NA
        :param sender_info: 发货方信息，发货方信息必须传， 手机和电话必选其一。 发货方信息：
                            邮编^^^省^^^市^^^区^^^具体地址^^^收件方名称^^^手机^^^电话
                            如果某一个字段的数据为空时，必须传NA
        :param expect_start_time: 计划开始送达时间  在入库单中可能会使用
        :param expect_end_time: 期望结束时间，在入库单会使用到
        :param package_count: 包裹件数，入库单和出库单中会用到
        :param tms_info: 出库单中可能会用到<br/>运输公司名称^^^运输公司联系人^^^运输公司运单号^^^运输公司电话^^^运输公司联系人身份证号<br/><br/>========================================<br/>如果某一个字段的数据为空时，必须传NA
        :param invoince_info: {'invoince_info': [{'bill_type':'发票类型，必选', 'bill_title':'发票抬头，必选', 'bill_amount':'发票金额(单位是分)，必选','bill_content':'发票内容，可选'}]}
        :param attributes: 该字段暂时保留
        :param remark: 备注
        """
        return self._top_request(
            "taobao.wlb.order.create",
            {
                "order_sub_type": order_sub_type,
                "order_type": order_type,
                "out_biz_code": out_biz_code,
                "store_code": store_code,
                "is_finished": is_finished,
                "order_item_list": order_item_list,
                "schedule_type": schedule_type,
                "order_code": order_code,
                "prev_order_code": prev_order_code,
                "tms_service_code": tms_service_code,
                "tms_order_code": tms_order_code,
                "schedule_start": schedule_start,
                "schedule_end": schedule_end,
                "order_flag": order_flag,
                "alipay_no": alipay_no,
                "total_amount": total_amount,
                "payable_amount": payable_amount,
                "service_fee": service_fee,
                "buyer_nick": buyer_nick,
                "receiver_info": receiver_info,
                "sender_info": sender_info,
                "expect_start_time": expect_start_time,
                "expect_end_time": expect_end_time,
                "package_count": package_count,
                "tms_info": tms_info,
                "invoince_info": invoince_info,
                "attributes": attributes,
                "remark": remark
            }
        )

    def taobao_wlb_item_query(
            self,
            is_sku='',
            status='',
            item_type='',
            name='',
            title='',
            item_code='',
            parent_id='',
            page_no='1',
            page_size='20'
    ):
        """
        分页查询商品
        根据状态、卖家、SKU等信息查询商品列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10631

        :param is_sku: 是否是最小库存单元，只有最小库存单元的商品才可以有库存,值只能给'true','false'来表示;  若值不在范围内，则按true处理
        :param status: 只能输入以下值或空：  ITEM_STATUS_VALID -- 1 表示 有效；  ITEM_STATUS_LOCK -- 2 表示锁住。  若值不在范围内，按ITEM_STATUS_VALID处理
        :param item_type: ITEM类型(只允许输入以下英文或空)  NORMAL 0:普通商品;  COMBINE 1:是否是组合商品  DISTRIBUTION 2:是否是分销商品(货主是别人)  若值不在范围内，则按NORMAL处理
        :param name: 商品名称
        :param title: 商品前台销售名字
        :param item_code: 商家编码
        :param parent_id: 父ID,只有is_sku=1时才能有父ID，商品也可以没有付商品
        :param page_no: 当前页
        :param page_size: 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录
        """
        return self._top_request(
            "taobao.wlb.item.query",
            {
                "is_sku": is_sku,
                "status": status,
                "item_type": item_type,
                "name": name,
                "title": title,
                "item_code": item_code,
                "parent_id": parent_id,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_wlb_wlborder_get(
            self,
            wlb_order_code
    ):
        """
        根据物流宝订单编号查询物流宝订单概要信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10632

        :param wlb_order_code: 物流宝订单编码
        """
        return self._top_request(
            "taobao.wlb.wlborder.get",
            {
                "wlb_order_code": wlb_order_code
            },
            result_processor=lambda x: x["wlb_order"]
        )

    def taobao_wlb_item_add(
            self,
            name,
            item_code,
            is_sku,
            title='',
            remark='',
            type='NORMAL',
            pro_name_list='',
            pro_value_list='',
            is_friable='',
            is_dangerous='',
            color='',
            weight='',
            length='',
            width='',
            height='',
            volume='',
            goods_cat='',
            pricing_cat='',
            package_material='',
            price='',
            support_batch=''
    ):
        """
        添加单个物流宝商品
        添加物流宝商品，支持物流宝子商品和属性添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10633

        :param name: 商品名称
        :param item_code: 商品编码
        :param is_sku: 是否sku
        :param title: 商品标题
        :param remark: 商品备注
        :param type: NORMAL--普通商品<br/>COMBINE--组合商品<br/>DISTRIBUTION--分销
        :param pro_name_list: 属性名列表,目前支持的属性：<br/>毛重:GWeight	<br/>净重:Nweight<br/>皮重: Tweight<br/>自定义属性：<br/>paramkey1<br/>paramkey2<br/>paramkey3<br/>paramkey4
        :param pro_value_list: 属性值列表：<br/>10,8
        :param is_friable: 是否易碎品
        :param is_dangerous: 是否危险品
        :param color: 商品颜色
        :param weight: 商品重量，单位G
        :param length: 商品长度，单位毫米
        :param width: 商品宽度，单位毫米
        :param height: 商品高度，单位毫米
        :param volume: 商品体积，单位立方厘米
        :param goods_cat: 货类
        :param pricing_cat: 计价货类
        :param package_material: 商品包装材料类型
        :param price: 商品价格，单位：分
        :param support_batch: 是否支持批次
        """
        return self._top_request(
            "taobao.wlb.item.add",
            {
                "name": name,
                "item_code": item_code,
                "is_sku": is_sku,
                "title": title,
                "remark": remark,
                "type": type,
                "pro_name_list": pro_name_list,
                "pro_value_list": pro_value_list,
                "is_friable": is_friable,
                "is_dangerous": is_dangerous,
                "color": color,
                "weight": weight,
                "length": length,
                "width": width,
                "height": height,
                "volume": volume,
                "goods_cat": goods_cat,
                "pricing_cat": pricing_cat,
                "package_material": package_material,
                "price": price,
                "support_batch": support_batch
            },
            result_processor=lambda x: x["item_id"]
        )

    def taobao_wlb_out_inventory_change_notify(
            self,
            type,
            op_type,
            source,
            item_id,
            change_count,
            result_count,
            out_biz_code,
            order_source_code='',
            store_code=''
    ):
        """
        外部库存变化通知（企业物流用户使用）
        拥有自有仓的企业物流用户通过该接口把自有仓的库存通知到物流宝，由物流宝维护该库存，控制前台显示库存的准确性。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10896

        :param type: WLB_ITEM--物流宝商品 IC_ITEM--淘宝商品 IC_SKU--淘宝sku
        :param op_type: OUT--出库 IN--入库
        :param source: （1）OTHER： 其他 （2）TAOBAO_TRADE： 淘宝交易 （3）OTHER_TRADE：其他交易 （4）ALLCOATE： 调拨 （5）CHECK:盘点 （6）PURCHASE:采购
        :param item_id: 物流宝商品id或前台宝贝id（由type类型决定）
        :param change_count: 库存变化数量
        :param result_count: 本次库存变化后库存余额
        :param out_biz_code: 库存变化唯一标识，用于去重，一个外部唯一编码唯一标识一次库存变化。
        :param order_source_code: 订单号，如果source为TAOBAO_TRADE,order_source_code必须为淘宝交易号
        :param store_code: 目前非必须，系统会选择默认值
        """
        return self._top_request(
            "taobao.wlb.out.inventory.change.notify",
            {
                "type": type,
                "op_type": op_type,
                "source": source,
                "item_id": item_id,
                "change_count": change_count,
                "result_count": result_count,
                "out_biz_code": out_biz_code,
                "order_source_code": order_source_code,
                "store_code": store_code
            },
            result_processor=lambda x: x["gmt_modified"]
        )

    def taobao_wlb_item_batch_query(
            self,
            item_ids,
            store_code='',
            page_no='1',
            page_size='20'
    ):
        """
        批次库存查询接口
        根据用户id，item id list和store code来查询商品库存信息和批次信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10970

        :param item_ids: 需要查询的商品ID列表，以字符串表示，ID间以;隔开
        :param store_code: 仓库编号
        :param page_no: 分页查询参数，指定查询页数，默认为1
        :param page_size: 分页查询参数，每页查询数量，默认20，最大值50,大于50时按照50条查询
        """
        return self._top_request(
            "taobao.wlb.item.batch.query",
            {
                "item_ids": item_ids,
                "store_code": store_code,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_inventory_ipc_inventorydetail_get(
            self,
            sc_item_id,
            page_index,
            page_size,
            status_query,
            biz_order_id='',
            biz_sub_order_id=''
    ):
        """
        库存明细查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询库存明细
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22175

        :param sc_item_id: 仓储商品id
        :param page_index: 当前页数
        :param page_size: 一页显示多少条
        :param status_query: 1:查询预扣  4：查询占用
        :param biz_order_id: 主订单号，可选
        :param biz_sub_order_id: 子订单号，可选
        """
        return self._top_request(
            "taobao.inventory.ipc.inventorydetail.get",
            {
                "sc_item_id": sc_item_id,
                "page_index": page_index,
                "page_size": page_size,
                "status_query": status_query,
                "biz_order_id": biz_order_id,
                "biz_sub_order_id": biz_sub_order_id
            },
            result_processor=lambda x: x["inventory_details"]
        )

    def taobao_wlb_orderdetail_date_get(
            self,
            start_time,
            end_time,
            page_size='20',
            page_no='1'
    ):
        """
        按照日期范围查询物流订单详情
        外部ERP可通过该接口查询一段时间内的物流宝订单，以及订单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22288

        :param start_time: 创建时间起始
        :param end_time: 创建时间结束
        :param page_size: 分页大小
        :param page_no: 分页下标
        """
        return self._top_request(
            "taobao.wlb.orderdetail.date.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "page_size": page_size,
                "page_no": page_no
            }
        )

    def taobao_wlb_waybill_shengxian_get(
            self,
            biz_code,
            delivery_type,
            order_channels_type,
            trade_id,
            sender_address_id='',
            service_code='',
            feature=''
    ):
        """
        商家获取生鲜电子面单号
        商家通过交易订单号获取电子面单接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23617

        :param biz_code: 物流服务方代码，生鲜配送：YXSR
        :param delivery_type: 物流服务类型。冷链：602，常温：502
        :param order_channels_type: 订单渠道： 淘宝平台订单：'TB'; 天猫平台订单：'TM'; 京东：'JD'; 拍拍：'PP'; 易迅平台订单：'YX'; 一号店平台订单：'YHD'; 当当网平台订单：'DD'; EBAY：'EBAY'; QQ网购：'QQ'; 苏宁：'SN'; 国美：'GM'; 唯品会：'WPH'; 聚美：'Jm'; 乐峰：'LF'; 蘑菇街：'MGJ'; 聚尚：'JS'; 银泰：'YT'; VANCL：'VANCL'; 邮乐：'YL'; 优购：'YG'; 拍鞋：'PX'; 1688平台：'1688';
        :param trade_id: 交易号，传入交易号不能存在拆单场景。
        :param sender_address_id: 商家淘宝地址信息ID
        :param service_code: 仓库的服务代码标示，代码一个仓库的实体。(可以通过taobao.wlb.stores.baseinfo.get接口查询)
        :param feature: 预留扩展字段
        """
        return self._top_request(
            "taobao.wlb.waybill.shengxian.get",
            {
                "biz_code": biz_code,
                "delivery_type": delivery_type,
                "order_channels_type": order_channels_type,
                "trade_id": trade_id,
                "sender_address_id": sender_address_id,
                "service_code": service_code,
                "feature": feature
            }
        )

    def taobao_wlb_order_jzpartner_query(
            self,
            taobao_trade_id='',
            service_type=''
    ):
        """
        查询家装服务商列表
        为支持家装类目的商家，对绑定家装物流服务的订单可以在商家的ERP中发货、批量发货，因此开发根据服务类型查询所有的服务商列表的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24051

        :param taobao_trade_id: 淘宝交易订单号，如果不填写Tid则必须填写serviceType。如果填写Tid，则表明只需要查询对应订单的服务商。
        :param service_type: serviceType表示查询所有的支持服务类型的服务商。 家装干线服务     11 家装干支服务     12 家装干支装服务   13 卫浴大件干线     14 卫浴大件干支     15 卫浴大件安装     16 地板干线         17 地板干支         18 地板安装         19 灯具安装         20 卫浴小件安装     21 （注：同一个服务商针对不同类型的serviceType是具有不同的tpCode的）
        """
        return self._top_request(
            "taobao.wlb.order.jzpartner.query",
            {
                "taobao_trade_id": taobao_trade_id,
                "service_type": service_type
            }
        )

    def taobao_wlb_order_jzwithins_consign(
            self,
            tid,
            tms_partner,
            jz_consign_args,
            ins_partner=None
    ):
        """
        家装发货接口
        为支持家装类目的商家，对绑定家装物流服务的订单可以在商家的ERP中发货、批量发货，因此开发带安装服务商的发货接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24052

        :param tid: 淘宝交易订单号
        :param tms_partner: 物流服务商信息
        :param jz_consign_args: 家装物流发货参数
        :param ins_partner: 物流服务商信息
        """
        return self._top_request(
            "taobao.wlb.order.jzwithins.consign",
            {
                "tid": tid,
                "tms_partner": tms_partner,
                "jz_consign_args": jz_consign_args,
                "ins_partner": ins_partner
            }
        )

    def taobao_wlb_wms_inventory_lack_upload(
            self,
            content=None
    ):
        """
        缺货通知
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24617

        :param content: 缺货通知信息
        """
        return self._top_request(
            "taobao.wlb.wms.inventory.lack.upload",
            {
                "content": content
            }
        )

    def taobao_wlb_wms_inventory_count(
            self,
            content=None
    ):
        """
        损益单回传
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24621

        :param content: 损益单回传信息
        """
        return self._top_request(
            "taobao.wlb.wms.inventory.count",
            {
                "content": content
            }
        )

    def cainiao_merchant_inventory_adjust(
            self,
            adjust_request,
            app_name,
            operation=''
    ):
        """
        商家库存调整
        商家仓库存调整接口，目前仅支持全量更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34736

        :param adjust_request: 商家仓编辑库存
        :param app_name: 调用方应用名
        :param operation: 操作
        """
        return self._top_request(
            "cainiao.merchant.inventory.adjust",
            {
                "adjust_request": adjust_request,
                "app_name": app_name,
                "operation": operation
            }
        )

    def taobao_uop_tob_order_create(
            self,
            delivery_order=None
    ):
        """
        ToB仓储发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36089

        :param delivery_order: ERP出库对象
        """
        return self._top_request(
            "taobao.uop.tob.order.create",
            {
                "delivery_order": delivery_order
            }
        )

    def cainiao_bms_order_consign_confirm(
            self,
            content=None
    ):
        """
        BMS出库通知
        BMS出库后，通知ISV
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28394

        :param content: 通知消息主体
        """
        return self._top_request(
            "cainiao.bms.order.consign.confirm",
            {
                "content": content
            }
        )


class TbZhiTongChe(DingTalkBaseAPI):
    """
    直通车API
    """

    def taobao_simba_keywords_recommend_get(
            self,
            adgroup_id,
            page_size,
            page_no,
            nick='',
            search='',
            pertinence='',
            order_by='non'
    ):
        """
        取得一个推广组的推荐关键词列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10527

        :param adgroup_id: 推广组ID
        :param page_size: 返回的每页数据量大小,最大200
        :param page_no: 返回的第几页数据，默认为1
        :param nick: 主人昵称
        :param search: 搜索量,设置此值后返回的就是大于此搜索量的词列表
        :param pertinence: 相关度
        :param order_by: 排序方式: 搜索量 search_volume 市场平均价格 average_price 相关度 relevance 不排序 non 默认为 non
        """
        return self._top_request(
            "taobao.simba.keywords.recommend.get",
            {
                "adgroup_id": adgroup_id,
                "page_size": page_size,
                "page_no": page_no,
                "nick": nick,
                "search": search,
                "pertinence": pertinence,
                "order_by": order_by
            },
            result_processor=lambda x: x["recommend_words"]
        )

    def taobao_simba_customers_authorized_get(
            self
    ):
        """
        取得当前登录用户的授权账户列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10528

        """
        return self._top_request(
            "taobao.simba.customers.authorized.get",
            result_processor=lambda x: x["nicks"]
        )

    def taobao_simba_tools_items_top_get(
            self,
            keyword,
            ip,
            nick=''
    ):
        """
        取得一个关键词的推广组排名列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10529

        :param keyword: 关键词
        :param ip: 输入的必须是一个符合ipv4或者ipv6格式的IP地址
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.tools.items.top.get",
            {
                "keyword": keyword,
                "ip": ip,
                "nick": nick
            },
            result_processor=lambda x: x["rankeditems"]
        )

    def taobao_simba_creatives_get(
            self,
            nick='',
            creative_ids='',
            adgroup_id=''
    ):
        """
        批量获得创意
        取得一个推广组的所有创意或者根据一个创意Id列表取得一组创意；<br/>如果同时提供了推广组Id和创意id列表，则优先使用推广组Id；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10530

        :param nick: 主人昵称
        :param creative_ids: 创意Id数组，最多200个
        :param adgroup_id: 推广组Id
        """
        return self._top_request(
            "taobao.simba.creatives.get",
            {
                "nick": nick,
                "creative_ids": creative_ids,
                "adgroup_id": adgroup_id
            },
            result_processor=lambda x: x["creatives"]
        )

    def taobao_simba_creatives_record_get(
            self,
            creative_ids,
            nick=''
    ):
        """
        批量得到创意修改记录
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据一个创意Id列表取得创意对应的修改记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10531

        :param creative_ids: 创意Id数组，最多200个
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.creatives.record.get",
            {
                "creative_ids": creative_ids,
                "nick": nick
            },
            result_processor=lambda x: x["creativerecords"]
        )

    def taobao_simba_creative_update(
            self,
            adgroup_id,
            creative_id,
            title,
            img_url,
            nick='',
            picture_id=''
    ):
        """
        修改创意与
        更新一个创意的信息，可以设置创意标题、创意图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10532

        :param adgroup_id: 推广组Id
        :param creative_id: 创意Id
        :param title: 创意标题，最多20个汉字
        :param img_url: 创意图片地址，必须是推广组对应商品的图片之一
        :param nick: 主人昵称
        :param picture_id: 如果用户开通了创意本地上传图片功能的，可以使用该用户图片空间的图片来修改创意，pictureId为图片空间中图片的pictureId，img_url为图片空间中图片链接地址，如果是使用的主图或副图修改创意，则pictureId必须为空
        """
        return self._top_request(
            "taobao.simba.creative.update",
            {
                "adgroup_id": adgroup_id,
                "creative_id": creative_id,
                "title": title,
                "img_url": img_url,
                "nick": nick,
                "picture_id": picture_id
            },
            result_processor=lambda x: x["creativerecord"]
        )

    def taobao_simba_creative_delete(
            self,
            creative_id,
            nick=''
    ):
        """
        删除创意
        删除一个创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10533

        :param creative_id: 创意Id
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.creative.delete",
            {
                "creative_id": creative_id,
                "nick": nick
            },
            result_processor=lambda x: x["creative"]
        )

    def taobao_simba_creative_add(
            self,
            adgroup_id,
            title,
            img_url,
            nick=''
    ):
        """
        增加创意
        创建一个创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10534

        :param adgroup_id: 推广组Id
        :param title: 创意标题，最多20个汉字
        :param img_url: 创意图片地址，必须是推广组对应商品的图片之一
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.creative.add",
            {
                "adgroup_id": adgroup_id,
                "title": title,
                "img_url": img_url,
                "nick": nick
            },
            result_processor=lambda x: x["creative"]
        )

    def taobao_simba_adgroups_item_exist(
            self,
            campaign_id,
            item_id,
            nick='',
            product_id='101001005'
    ):
        """
        商品是否推广
        判断在一个推广计划中是否已经推广了一个商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10535

        :param campaign_id: 推广计划Id
        :param item_id: 商品Id
        :param nick: 主人昵称
        :param product_id: 产品类型 101001005 代表普通推广，101001014代表销量明星
        """
        return self._top_request(
            "taobao.simba.adgroups.item.exist",
            {
                "campaign_id": campaign_id,
                "item_id": item_id,
                "nick": nick,
                "product_id": product_id
            },
            result_processor=lambda x: x["exist"]
        )

    def taobao_simba_adgroup_update(
            self,
            adgroup_id,
            use_nonsearch_default_price='',
            online_status='',
            default_price='',
            nonsearch_max_price='',
            nick=''
    ):
        """
        更新一个推广组的信息
        更新一个推广组的信息，可以设置默认出价、是否上线、非搜索出价、非搜索是否使用默认出价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10539

        :param adgroup_id: 推广组Id
        :param use_nonsearch_default_price: 非搜索是否使用默认出价，false-不用；true-使用；默认为true;
        :param online_status: 用户设置的上下线状态 offline-下线(暂停竞价)； online-上线；默认为online
        :param default_price: 默认出价，单位是分，不能小于5
        :param nonsearch_max_price: 非搜索出价，单位是分，不能小于5，如果use_nonseatch_default_price为使用默认出价，则此nonsearch_max_price字段传入的数据不起作用，商品将使用默认非搜索出价
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.adgroup.update",
            {
                "adgroup_id": adgroup_id,
                "use_nonsearch_default_price": use_nonsearch_default_price,
                "online_status": online_status,
                "default_price": default_price,
                "nonsearch_max_price": nonsearch_max_price,
                "nick": nick
            },
            result_processor=lambda x: x["adgroup"]
        )

    def taobao_simba_adgroup_delete(
            self,
            adgroup_id,
            nick=''
    ):
        """
        删除一个推广组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10540

        :param adgroup_id: 推广组Id
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.adgroup.delete",
            {
                "adgroup_id": adgroup_id,
                "nick": nick
            },
            result_processor=lambda x: x["adgroup"]
        )

    def taobao_simba_adgroup_add(
            self,
            campaign_id,
            item_id,
            default_price,
            title,
            img_url,
            nick=''
    ):
        """
        创建一个推广组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10541

        :param campaign_id: 推广计划Id
        :param item_id: 商品Id
        :param default_price: 推广组默认出价，单位为分，不能小于5 不能大于日最高限额
        :param title: 创意标题，最多20个汉字
        :param img_url: 创意图片地址，必须是商品的图片之一
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.adgroup.add",
            {
                "campaign_id": campaign_id,
                "item_id": item_id,
                "default_price": default_price,
                "title": title,
                "img_url": img_url,
                "nick": nick
            },
            result_processor=lambda x: x["adgroup"]
        )

    def taobao_simba_campaign_platform_update(
            self,
            campaign_id,
            search_channels,
            nonsearch_channels='',
            outside_discount='100',
            mobile_discount='100',
            nick=''
    ):
        """
        更新一个推广计划的平台设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10542

        :param campaign_id: 推广计划Id
        :param search_channels: 搜索投放频道代码数组，频道代码必须是直通车搜索类频道列表中的值。1：淘宝站内搜索，8、无线站内搜索；16:无线站外搜索
        :param nonsearch_channels: 非搜索投放频道代码数组，频道代码必须是直通车非搜索类频道列表中的值。1、淘宝站内定向；2、站外定向；8、无线站内定向；16、无线站外定向
        :param outside_discount: 溢价的百分比，必须是大于等于 1小于等于200的整数
        :param mobile_discount: 站内无线频道折扣。百分比，数值必须是大于等于 1小于等于200的整数
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.campaign.platform.update",
            {
                "campaign_id": campaign_id,
                "search_channels": search_channels,
                "nonsearch_channels": nonsearch_channels,
                "outside_discount": outside_discount,
                "mobile_discount": mobile_discount,
                "nick": nick
            },
            result_processor=lambda x: x["campaign_platform"]
        )

    def taobao_simba_campaign_platform_get(
            self,
            campaign_id,
            nick=''
    ):
        """
        取得一个推广计划的投放平台设置
        获得一个推广计划的投放平台设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10543

        :param campaign_id: 推广计划Id
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.campaign.platform.get",
            {
                "campaign_id": campaign_id,
                "nick": nick
            },
            result_processor=lambda x: x["campaign_platform"]
        )

    def taobao_simba_campaign_channeloptions_get(
            self
    ):
        """
        取得推广计划的可设置投放频道列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        取得推广计划的可设置投放频道列表--接口已经废弃
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10544

        """
        return self._top_request(
            "taobao.simba.campaign.channeloptions.get",
            result_processor=lambda x: x["channel_options"]
        )

    def taobao_simba_campaign_areaoptions_get(
            self
    ):
        """
        取得推广计划的可设置投放地域列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10545

        """
        return self._top_request(
            "taobao.simba.campaign.areaoptions.get",
            result_processor=lambda x: x["area_options"]
        )

    def taobao_simba_campaign_schedule_update(
            self,
            campaign_id,
            schedule,
            nick=''
    ):
        """
        更新一个推广计划的分时折扣设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10546

        :param campaign_id: 推广计划Id
        :param schedule: 值为：“all”；或者用“;”分割的每天的设置字符串，该字符串为用“,”分割的时段折扣字符串，格式为：起始时间-结束时间:折扣，其中时间是24小时格式记录，折扣是1-150整数，表示折扣百分比；
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.campaign.schedule.update",
            {
                "campaign_id": campaign_id,
                "schedule": schedule,
                "nick": nick
            },
            result_processor=lambda x: x["campaign_schedule"]
        )

    def taobao_simba_campaign_schedule_get(
            self,
            campaign_id,
            nick=''
    ):
        """
        取得一个推广计划的分时折扣设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10547

        :param campaign_id: 推广计划Id
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.campaign.schedule.get",
            {
                "campaign_id": campaign_id,
                "nick": nick
            },
            result_processor=lambda x: x["campaign_schedule"]
        )

    def taobao_simba_campaign_budget_update(
            self,
            use_smooth,
            campaign_id,
            budget='',
            nick=''
    ):
        """
        更新一个推广计划的日限额
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10548

        :param use_smooth: 是否平滑消耗：false-否，true-是
        :param campaign_id: 推广计划Id
        :param budget: 如果为空则取消限额；否则必须为整数，单位是元，不得小于30；
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.campaign.budget.update",
            {
                "use_smooth": use_smooth,
                "campaign_id": campaign_id,
                "budget": budget,
                "nick": nick
            },
            result_processor=lambda x: x["campaign_budget"]
        )

    def taobao_simba_campaign_budget_get(
            self,
            campaign_id,
            nick=''
    ):
        """
        取得一个推广计划的日限额
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10549

        :param campaign_id: 推广计划Id
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.campaign.budget.get",
            {
                "campaign_id": campaign_id,
                "nick": nick
            },
            result_processor=lambda x: x["campaign_budget"]
        )

    def taobao_simba_campaign_area_update(
            self,
            campaign_id,
            area,
            nick=''
    ):
        """
        更新一个推广计划的投放地域
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10550

        :param campaign_id: 推广计划Id
        :param area: 值为：“all”；或者用“,”分割的数字，数字必须是直通车全国省市列表的AreaID；
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.campaign.area.update",
            {
                "campaign_id": campaign_id,
                "area": area,
                "nick": nick
            },
            result_processor=lambda x: x["campaign_area"]
        )

    def taobao_simba_account_balance_get(
            self,
            nick=''
    ):
        """
        获取实时余额，”元”为单位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10551

        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.account.balance.get",
            {
                "nick": nick
            },
            result_processor=lambda x: x["balance"]
        )

    def taobao_simba_keywords_delete(
            self,
            campaign_id,
            keyword_ids,
            nick=''
    ):
        """
        删除一批关键词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10554

        :param campaign_id: 推广计划Id
        :param keyword_ids: 关键词Id数组，最多100个
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.keywords.delete",
            {
                "campaign_id": campaign_id,
                "keyword_ids": keyword_ids,
                "nick": nick
            },
            result_processor=lambda x: x["keywords"]
        )

    def taobao_simba_campaign_area_get(
            self,
            campaign_id,
            nick=''
    ):
        """
        取得一个推广计划的投放地域设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10555

        :param campaign_id: 推广计划Id
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.campaign.area.get",
            {
                "campaign_id": campaign_id,
                "nick": nick
            },
            result_processor=lambda x: x["campaign_area"]
        )

    def taobao_simba_campaign_update(
            self,
            online_status,
            campaign_id,
            title,
            nick=''
    ):
        """
        更新一个推广计划
        更新一个推广计划，可以设置推广计划名字，修改推广计划上下线状态。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10556

        :param online_status: 用户设置的上下限状态；offline-下线；online-上线；
        :param campaign_id: 推广计划Id
        :param title: 推广计划名称，不能多余40个字符，不能和客户其他推广计划同名。
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.campaign.update",
            {
                "online_status": online_status,
                "campaign_id": campaign_id,
                "title": title,
                "nick": nick
            },
            result_processor=lambda x: x["campaign"]
        )

    def taobao_simba_campaigns_get(
            self,
            nick='',
            type='0'
    ):
        """
        取得一组推广计划
        取得一个客户的推广计划；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10557

        :param nick: 主人昵称
        :param type: 计划类型0位标准计划，16位销量明星计划
        """
        return self._top_request(
            "taobao.simba.campaigns.get",
            {
                "nick": nick,
                "type": type
            },
            result_processor=lambda x: x["campaigns"]
        )

    def taobao_simba_campaign_add(
            self,
            title,
            nick='',
            type='0'
    ):
        """
        创建一个推广计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10558

        :param title: 推广计划名称，不能多余20个汉字，不能和客户其他推广计划同名。
        :param nick: 主人昵称
        :param type: 计划类型，当前仅支持两种标准推广0，销量明星16，默认为0
        """
        return self._top_request(
            "taobao.simba.campaign.add",
            {
                "title": title,
                "nick": nick,
                "type": type
            },
            result_processor=lambda x: x["campaign"]
        )

    def taobao_simba_keywordids_deleted_get(
            self,
            start_time,
            nick='',
            page_size='200',
            page_no='1'
    ):
        """
        获取删除的词ID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10797

        :param start_time: 得到此时间点之后的数据，不能大于一个月
        :param nick: 主人昵称
        :param page_size: 返回的每页数据量大小,默认200最大1000
        :param page_no: 返回的第几页数据，默认为1
        """
        return self._top_request(
            "taobao.simba.keywordids.deleted.get",
            {
                "start_time": start_time,
                "nick": nick,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["deleted_keyword_ids"]
        )

    def taobao_simba_keywordids_changed_get(
            self,
            start_time,
            nick='',
            page_size='200',
            page_no='1'
    ):
        """
        获取修改的词ID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10798

        :param start_time: 得到此时间点之后的数据，不能大于一个月
        :param nick: 主人昵称
        :param page_size: 返回的每页数据量大小,默认200最大1000
        :param page_no: 返回的第几页数据，默认为1
        """
        return self._top_request(
            "taobao.simba.keywordids.changed.get",
            {
                "start_time": start_time,
                "nick": nick,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["changed_keyword_ids"]
        )

    def taobao_simba_adgroupids_deleted_get(
            self,
            start_time,
            nick='',
            page_size='200',
            page_no='1'
    ):
        """
        获取删除的推广组ID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10799

        :param start_time: 得到此时间点之后的数据，不能大于一个月
        :param nick: 主人昵称
        :param page_size: 返回的每页数据量大小,默认200最大1000
        :param page_no: 返回的第几页数据，默认为1
        """
        return self._top_request(
            "taobao.simba.adgroupids.deleted.get",
            {
                "start_time": start_time,
                "nick": nick,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["deleted_adgroup_ids"]
        )

    def taobao_simba_adgroupids_changed_get(
            self,
            start_time,
            nick='',
            page_size='200',
            page_no='1'
    ):
        """
        获取修改的推广组ID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10800

        :param start_time: 得到此时间点之后的数据，不能大于一个月
        :param nick: 主人昵称
        :param page_size: 返回的每页数据量大小,默认200最大1000
        :param page_no: 返回的第几页数据，默认为1
        """
        return self._top_request(
            "taobao.simba.adgroupids.changed.get",
            {
                "start_time": start_time,
                "nick": nick,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["changed_adgroupids"]
        )

    def taobao_simba_creativeids_deleted_get(
            self,
            start_time,
            nick='',
            page_size='200',
            page_no='1'
    ):
        """
        获取删除的创意ID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10801

        :param start_time: 得到这个时间点之后的数据，不能大于一个月
        :param nick: 主人昵称
        :param page_size: 返回的每页数据量大小,默认200最大1000
        :param page_no: 返回的第几页数据，默认为1
        """
        return self._top_request(
            "taobao.simba.creativeids.deleted.get",
            {
                "start_time": start_time,
                "nick": nick,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["deleted_creative_ids"]
        )

    def taobao_simba_creativeids_changed_get(
            self,
            start_time,
            nick='',
            page_size='200',
            page_no='1'
    ):
        """
        获取修改的创意ID
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10802

        :param start_time: 得到此时间点之后的数据，不能大于一个月
        :param nick: 主人昵称
        :param page_size: 返回的每页数据量大小,默认200最大1000
        :param page_no: 返回的第几页数据，默认为1
        """
        return self._top_request(
            "taobao.simba.creativeids.changed.get",
            {
                "start_time": start_time,
                "nick": nick,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["changed_creative_ids"]
        )

    def taobao_simba_login_authsign_get(
            self,
            nick=''
    ):
        """
        获取登陆权限签名
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10950

        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.login.authsign.get",
            {
                "nick": nick
            },
            result_processor=lambda x: x["subway_token"]
        )

    def taobao_simba_rpt_custbase_get(
            self,
            subway_token,
            start_time,
            end_time,
            source,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        客户账户报表基础数据对象
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10951

        :param subway_token: 权限验证信息
        :param start_time: 开始日期，格式yyyy-mm-dd
        :param end_time: 结束日期，格式yyyy-mm-dd
        :param source: 数据来源（站内：1，站外：2 ，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2
        :param nick: 昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.custbase.get",
            {
                "subway_token": subway_token,
                "start_time": start_time,
                "end_time": end_time,
                "source": source,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_cust_base_list"]
        )

    def taobao_simba_rpt_adgroupkeywordeffect_get(
            self,
            campaign_id,
            adgroup_id,
            start_time,
            end_time,
            source,
            subway_token,
            search_type,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        推广组下的词效果报表数据查询(明细数据不分类型查询)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10952

        :param campaign_id: 推广计划ID
        :param adgroup_id: 推广组ID
        :param start_time: 开始时间，格式yyyy-mm-dd
        :param end_time: 结束时间，格式yyyy-mm-dd；开始时间结束时间间隔不能超过30天
        :param source: 数据来源（PC站内：1，PC站外：2，无线站内：4，无线站外 : 5，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2
        :param subway_token: 权限校验参数
        :param search_type: 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH）可多选例如：SEARCH,CAT
        :param nick: 主人昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.adgroupkeywordeffect.get",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "start_time": start_time,
                "end_time": end_time,
                "source": source,
                "subway_token": subway_token,
                "search_type": search_type,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_adgroupkeyword_effect_list"]
        )

    def taobao_simba_rpt_adgroupkeywordbase_get(
            self,
            campaign_id,
            adgroup_id,
            start_time,
            end_time,
            source,
            subway_token,
            search_type,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        推广组下的词基础报表数据查询(明细数据不分类型查询)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10953

        :param campaign_id: 推广计划ID
        :param adgroup_id: 推广组ID
        :param start_time: 开始时间，格式yyyy-mm-dd
        :param end_time: 结束时间，格式yyyy-mm-dd
        :param source: 数据来源（PC站内：1，PC站外：2，无线站内：4，无线站外 : 5，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2
        :param subway_token: 权限校验参数
        :param search_type: 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH）可多选例如：SEARCH,CAT
        :param nick: 主人昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.adgroupkeywordbase.get",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "start_time": start_time,
                "end_time": end_time,
                "source": source,
                "subway_token": subway_token,
                "search_type": search_type,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_adgroupkeyword_base_list"]
        )

    def taobao_simba_rpt_custeffect_get(
            self,
            start_time,
            end_time,
            subway_token,
            source,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        用户账户报表效果数据查询（只有汇总数据，无分类数据）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10954

        :param start_time: 开始时间，格式yyyy-mm-dd
        :param end_time: 结束时间，格式yyyy-mm-dd
        :param subway_token: 权限校验参数
        :param source: 数据来源（站内：1，站外：2 ，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2
        :param nick: 主人昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.custeffect.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "subway_token": subway_token,
                "source": source,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_cust_effect_list"]
        )

    def taobao_simba_rpt_campadgroupeffect_get(
            self,
            subway_token,
            start_time,
            end_time,
            campaign_id,
            source,
            search_type,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        推广计划下的推广组报表效果数据查询(只有汇总数据，无分类类型)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10955

        :param subway_token: 权限验证信息
        :param start_time: 开始日期，格式yyyy-mm-dd
        :param end_time: 结束日期，格式yyyy-mm-dd
        :param campaign_id: 查询推广计划id
        :param source: 数据来源（PC站内：1，PC站外：2，无线站内：4，无线站外 : 5，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2
        :param search_type: 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如：SEARCH,CAT
        :param nick: 昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.campadgroupeffect.get",
            {
                "subway_token": subway_token,
                "start_time": start_time,
                "end_time": end_time,
                "campaign_id": campaign_id,
                "source": source,
                "search_type": search_type,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_campadgroup_effect_list"]
        )

    def taobao_simba_rpt_adgroupeffect_get(
            self,
            subway_token,
            campaign_id,
            adgroup_id,
            start_time,
            end_time,
            search_type,
            source,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        推广组效果报表数据对象
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10956

        :param subway_token: 权限校验参数
        :param campaign_id: 推广计划id
        :param adgroup_id: 推广组id
        :param start_time: 开始时间，格式yyyy-mm-dd
        :param end_time: 结束时间，格式yyyy-mm-dd
        :param search_type: 报表类型（搜索：SEARCH,类目出价：CAT,<br/>定向投放：NOSEARCH ）可以一次取多个例如：SEARCH,CAT
        :param source: 数据来源（PC站内：1，PC站外：2，无线站内：4，无线站外 : 5）可多选，以逗号分隔
        :param nick: 昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.adgroupeffect.get",
            {
                "subway_token": subway_token,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "start_time": start_time,
                "end_time": end_time,
                "search_type": search_type,
                "source": source,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_adgroup_effect_list"]
        )

    def taobao_simba_rpt_campadgroupbase_get(
            self,
            subway_token,
            start_time,
            end_time,
            campaign_id,
            source,
            search_type,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        推广计划下的推广组报表基础数据查询(只有汇总数据，无分类类型)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10957

        :param subway_token: 权限验证信息
        :param start_time: 开始日期,格式yyyy-mm-dd
        :param end_time: 结束日期,格式yyyy-mm-dd
        :param campaign_id: 查询推广计划id
        :param source: 数据来源（PC站内：1，PC站外：2，无线站内：4，无线站外 : 5, 汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2
        :param search_type: 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如：SEARCH,CAT
        :param nick: 昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.campadgroupbase.get",
            {
                "subway_token": subway_token,
                "start_time": start_time,
                "end_time": end_time,
                "campaign_id": campaign_id,
                "source": source,
                "search_type": search_type,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_campadgroup_base_list"]
        )

    def taobao_simba_rpt_adgroupbase_get(
            self,
            subway_token,
            campaign_id,
            adgroup_id,
            start_time,
            end_time,
            search_type,
            source,
            nick='',
            page_no='1',
            page_size=''
    ):
        """
        推广组基础报表数据对象
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10958

        :param subway_token: 权限校验参数
        :param campaign_id: 推广计划id
        :param adgroup_id: 推广组id
        :param start_time: 开始时间，格式yyyy-mm-dd
        :param end_time: 结束时间，格式yyyy-mm-dd
        :param search_type: 报表类型（搜索：SEARCH,类目出价：CAT,<br/>定向投放：NOSEARCH）可以一次取多个例如：SEARCH,CAT
        :param source: 数据来源（PC站内：1，PC站外：2，无线站内：4，无线站外 : 5）可多选，以逗号分隔
        :param nick: 昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.adgroupbase.get",
            {
                "subway_token": subway_token,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "start_time": start_time,
                "end_time": end_time,
                "search_type": search_type,
                "source": source,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_adgroup_base_list"]
        )

    def taobao_simba_rpt_campaigneffect_get(
            self,
            subway_token,
            start_time,
            end_time,
            campaign_id,
            search_type,
            source,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        推广计划效果报表数据对象
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10959

        :param subway_token: 权限校验参数
        :param start_time: 开始时间，格式yyyy-mm-dd
        :param end_time: 结束时间，格式yyyy-mm-dd
        :param campaign_id: 推广计划id
        :param search_type: 报表类型（搜索：SEARCH,类目出价：CAT,<br/>定向投放：NOSEARCH 全部：ALL）可以一次取多个例如：SEARCH,CAT
        :param source: 数据来源（站内：1，站外：2）可多选以逗号分隔，默认值为：1,2
        :param nick: 昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.campaigneffect.get",
            {
                "subway_token": subway_token,
                "start_time": start_time,
                "end_time": end_time,
                "campaign_id": campaign_id,
                "search_type": search_type,
                "source": source,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_campaign_effect_list"]
        )

    def taobao_simba_rpt_adgroupcreativeeffect_get(
            self,
            subway_token,
            start_time,
            end_time,
            campaign_id,
            adgroup_id,
            source,
            search_type,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        推广组下的创意报表效果数据查询(汇总数据，不分类型)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10960

        :param subway_token: 权限验证信息
        :param start_time: 开始日期，格式yyyy-mm-dd
        :param end_time: 结束日期，格式yyyy-mm-dd
        :param campaign_id: 查询推广计划id
        :param adgroup_id: 推广组id
        :param source: 数据来源（PC站内：1，PC站外：2，无线站内：4，无线站外 : 5，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2
        :param search_type: 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如：SEARCH,CAT
        :param nick: 昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.adgroupcreativeeffect.get",
            {
                "subway_token": subway_token,
                "start_time": start_time,
                "end_time": end_time,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "source": source,
                "search_type": search_type,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_adgroupcreative_effect_list"]
        )

    def taobao_simba_rpt_campaignbase_get(
            self,
            subway_token,
            start_time,
            end_time,
            search_type,
            source,
            campaign_id,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        推广计划报表基础数据对象
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10961

        :param subway_token: 权限校验参数
        :param start_time: 开始时间，格式yyyy-mm-dd
        :param end_time: 结束时间，格式yyyy-mm-dd
        :param search_type: 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH 全部：ALL）可以一次取多个例如：SEARCH,CAT
        :param source: 数据来源（站内：1，站外：2）可多选以逗号分隔，默认值为：1,2
        :param campaign_id: 推广计划id
        :param nick: 昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.campaignbase.get",
            {
                "subway_token": subway_token,
                "start_time": start_time,
                "end_time": end_time,
                "search_type": search_type,
                "source": source,
                "campaign_id": campaign_id,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_campaign_base_list"]
        )

    def taobao_simba_rpt_adgroupcreativebase_get(
            self,
            subway_token,
            start_time,
            end_time,
            campaign_id,
            adgroup_id,
            source,
            search_type,
            nick='',
            page_no='1',
            page_size='500'
    ):
        """
        推广组下创意报表基础数据查询(汇总数据，不分类型)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10962

        :param subway_token: 权限验证信息
        :param start_time: 开始日期，格式yyyy-mm-dd
        :param end_time: 结束日期，格式yyyy-mm-dd
        :param campaign_id: 查询推广计划id
        :param adgroup_id: 推广组id
        :param source: 数据来源（PC站内：1，PC站外：2，无线站内：4，无线站外 : 5，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2
        :param search_type: 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如：SEARCH,CAT
        :param nick: 昵称
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.simba.rpt.adgroupcreativebase.get",
            {
                "subway_token": subway_token,
                "start_time": start_time,
                "end_time": end_time,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "source": source,
                "search_type": search_type,
                "nick": nick,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["rpt_adgroupcreative_base_list"]
        )

    def taobao_topats_simba_campkeywordeffect_get(
            self,
            campaign_id,
            time_slot,
            search_type,
            source
    ):
        """
        推广计划下的词报表效果数据查询
        推广计划下的词报表效果数据查询<br/>
        异步API使用方法，请查看：<a href='http://open.taobao.com/doc/detail.htm?id=30'>异步API使用说明</a><br/>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11058

        :param campaign_id: 查询推广计划ID
        :param time_slot: 时间参数（昨天：DAY、 前一周：7DAY 、前15天：15DAY 、前30天：30DAY 、前90天：90DAY）单选
        :param search_type: 报表类型。可选值：SEARCH（搜索）、CAT（类目出价）、 NOSEARCH（定向投放），可多选，如：SEARCH,CAT
        :param source: 数据来源。可选值：1（站内）、2（站外）、SUMMARY（汇总），其中SUMMARY必须单选，其它值可多选，如：1,2
        """
        return self._top_request(
            "taobao.topats.simba.campkeywordeffect.get",
            {
                "campaign_id": campaign_id,
                "time_slot": time_slot,
                "search_type": search_type,
                "source": source
            },
            result_processor=lambda x: x["task"]
        )

    def taobao_topats_simba_campkeywordbase_get(
            self,
            campaign_id,
            time_slot,
            search_type,
            source
    ):
        """
        推广计划下的词报表效果数据查询
        推广计划下的词报表效果数据查询<br/>
        异步API使用方法，请查看：<a href='http://open.taobao.com/doc/detail.htm?id=30'>异步API使用说明</a><br/>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11059

        :param campaign_id: 查询推广计划ID
        :param time_slot: 时间参数（昨天：DAY、 前一周：7DAY 、前15天：15DAY 、前30天：30DAY 、前90天：90DAY）单选
        :param search_type: 报表类型。可选值：SEARCH（搜索）、CAT（类目出价）、 NOSEARCH（定向投放），可多选，如：SEARCH,CAT
        :param source: 数据来源。可选值：1（站内）、2（站外）、SUMMARY（汇总），其中SUMMARY必须单选，其它值可多选，如：1,2
        """
        return self._top_request(
            "taobao.topats.simba.campkeywordbase.get",
            {
                "campaign_id": campaign_id,
                "time_slot": time_slot,
                "search_type": search_type,
                "source": source
            },
            result_processor=lambda x: x["task"]
        )

    def taobao_simba_keywords_qscore_get(
            self,
            adgroup_id,
            nick=''
    ):
        """
        取得一个推广组的所有关键词的质量得分或者根据关键词Id列表取得一组关键词的质量得分
        取得一个推广组的所有关键词的质量得分列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11091

        :param adgroup_id: 推广组Id
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.keywords.qscore.get",
            {
                "adgroup_id": adgroup_id,
                "nick": nick
            },
            result_processor=lambda x: x["keyword_qscore_list"]
        )

    def taobao_simba_adgroups_changed_get(
            self,
            start_time,
            nick='',
            page_size='200',
            page_no='1'
    ):
        """
        分页获取修改的推广组ID和修改时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21249

        :param start_time: 得到此时间点之后的数据，不能大于一个月
        :param nick: 主人昵称
        :param page_size: 返回的每页数据量大小,默认200最大1000
        :param page_no: 返回的第几页数据，默认为1
        """
        return self._top_request(
            "taobao.simba.adgroups.changed.get",
            {
                "start_time": start_time,
                "nick": nick,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["adgroups"]
        )

    def taobao_simba_creatives_changed_get(
            self,
            start_time,
            nick='',
            page_size='200',
            page_no='1'
    ):
        """
        分页获取修改过的广告创意ID和修改时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21255

        :param start_time: 得到此时间点之后的数据，不能大于一个月
        :param nick: 主人昵称
        :param page_size: 返回的每页数据量大小,默认200最大1000
        :param page_no: 返回的第几页数据，默认为1
        """
        return self._top_request(
            "taobao.simba.creatives.changed.get",
            {
                "start_time": start_time,
                "nick": nick,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["creatives"]
        )

    def taobao_simba_keywords_changed_get(
            self,
            start_time,
            nick='',
            page_size='200',
            page_no='1'
    ):
        """
        分页获取修改过的关键词ID、宝贝id、修改时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21256

        :param start_time: 得到此时间点之后的数据，不能大于一个月
        :param nick: 主人昵称
        :param page_size: 返回的每页数据量大小,默认200最大1000
        :param page_no: 返回的第几页数据，默认为1
        """
        return self._top_request(
            "taobao.simba.keywords.changed.get",
            {
                "start_time": start_time,
                "nick": nick,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["keywords"]
        )

    def taobao_simba_adgroupsbycampaignid_get(
            self,
            page_size,
            page_no,
            nick='',
            campaign_id=''
    ):
        """
        批量得到推广计划下的推广组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21676

        :param page_size: 页尺寸，最大200，如果入参adgroup_ids有传入值，则page_size和page_no值不起作用。如果adgrpup_ids为空而campaign_id有值，此时page_size和page_no值才是返回的页数据大小和页码
        :param page_no: 页码，从1开始
        :param nick: 主人昵称
        :param campaign_id: 推广计划Id
        """
        return self._top_request(
            "taobao.simba.adgroupsbycampaignid.get",
            {
                "page_size": page_size,
                "page_no": page_no,
                "nick": nick,
                "campaign_id": campaign_id
            },
            result_processor=lambda x: x["adgroups"]
        )

    def taobao_simba_adgroupsbyadgroupids_get(
            self,
            page_size,
            page_no,
            nick='',
            adgroup_ids=''
    ):
        """
        批量得到推广组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21679

        :param page_size: 页尺寸，最大200，如果入参adgroup_ids有传入值，则page_size和page_no值不起作用。如果adgrpup_ids为空而campaign_id有值，此时page_size和page_no值才是返回的页数据大小和页码
        :param page_no: 页码，从1开始
        :param nick: 主人昵称
        :param adgroup_ids: 推广组Id列表
        """
        return self._top_request(
            "taobao.simba.adgroupsbyadgroupids.get",
            {
                "page_size": page_size,
                "page_no": page_no,
                "nick": nick,
                "adgroup_ids": adgroup_ids
            },
            result_processor=lambda x: x["adgroups"]
        )

    def taobao_simba_adgroup_onlineitemsvon_get(
            self,
            nick='',
            order_field='',
            order_by='',
            page_size='',
            page_no='',
            product_id='101001005'
    ):
        """
        获取用户上架在线销售的全部宝贝
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21680

        :param nick: 主人昵称
        :param order_field: 排序字段，starts：按开始时间排序bidCount:按销量排序
        :param order_by: 排序，true:降序， false:升序
        :param page_size: 页尺寸，最大200
        :param page_no: 页码，从1开始,最大50。最大只能获取1W个宝贝
        :param product_id: 推广单元类型 101001005代表标准推广，101001014代表销量明星推广
        """
        return self._top_request(
            "taobao.simba.adgroup.onlineitemsvon.get",
            {
                "nick": nick,
                "order_field": order_field,
                "order_by": order_by,
                "page_size": page_size,
                "page_no": page_no,
                "product_id": product_id
            },
            result_processor=lambda x: x["page_item"]
        )

    def taobao_simba_keywordsvon_add(
            self,
            adgroup_id,
            keyword_prices,
            nick=''
    ):
        """
        创建一批关键词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21681

        :param adgroup_id: 推广组id
        :param keyword_prices: 关键词，出价和匹配方式json字符串，word:词，不能有一些特殊字符。maxPrice：价格，是整数，以“分”为单位，不能小于5，不能大于日限额,当使用默认出价时必须将这个值设置为0。; isDefaultPrice：是否使用默认出价，只能是0，1(0代表不使用，1代表使用)。matchscope只能是1,2,4（1代表精确匹配，2代表子串匹配，4代表广泛匹配）。
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.keywordsvon.add",
            {
                "adgroup_id": adgroup_id,
                "keyword_prices": keyword_prices,
                "nick": nick
            },
            result_processor=lambda x: x["keywords"]
        )

    def taobao_simba_keywordsbyadgroupid_get(
            self,
            nick='',
            adgroup_id=''
    ):
        """
        取得一个推广组的所有关键词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21682

        :param nick: 主人昵称
        :param adgroup_id: 推广组Id
        """
        return self._top_request(
            "taobao.simba.keywordsbyadgroupid.get",
            {
                "nick": nick,
                "adgroup_id": adgroup_id
            },
            result_processor=lambda x: x["keywords"]
        )

    def taobao_simba_keywordsbykeywordids_get(
            self,
            nick='',
            keyword_ids=''
    ):
        """
        根据一个关键词Id列表取得一组关键词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21683

        :param nick: 主人昵称
        :param keyword_ids: 关键词Id数组，最多200个；
        """
        return self._top_request(
            "taobao.simba.keywordsbykeywordids.get",
            {
                "nick": nick,
                "keyword_ids": keyword_ids
            },
            result_processor=lambda x: x["keywords"]
        )

    def taobao_simba_keywordscat_qscore_get(
            self,
            adgroup_id,
            nick=''
    ):
        """
        取得一个推广组的所有关键词和类目出价的质量得分
        取得一个推广组的所有关键词和类目出价的质量得分列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21684

        :param adgroup_id: 推广组Id
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.keywordscat.qscore.get",
            {
                "adgroup_id": adgroup_id,
                "nick": nick
            },
            result_processor=lambda x: x["qscore"]
        )

    def taobao_simba_keywords_pricevon_set(
            self,
            keywordid_prices,
            nick=''
    ):
        """
        设置一批关键词的出价
        设置一批关键词的出价，包含无线独立出价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21685

        :param keywordid_prices: 关键词ID，出价和匹配方式json字符串，keywordId:词ID，整数。maxPrice：价格，是整数，以“分”为单位，不能小于5，不能大于日限额,也不能大于99.99元,当使用默认出价时必须将这个值设置为0。; isDefaultPrice：是否使用默认出价，只能是0。matchscope只能是1,2,4（1代表精确匹配，4代表广泛匹配），maxMobilePrice：代表无线出价（如果是0，则代表无线出价=PC*无线溢价），mobileIsDefaultPrice代表无线出价是否采用pc*无线溢价，只能传0
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.keywords.pricevon.set",
            {
                "keywordid_prices": keywordid_prices,
                "nick": nick
            },
            result_processor=lambda x: x["keywords"]
        )

    def taobao_simba_insight_catsforecastnew_get(
            self,
            bidword_list
    ):
        """
        获取词的相关类目预测数据
        根据给定的词，预测这些词的相关类目
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23571

        :param bidword_list: 需要查询的词列表
        """
        return self._top_request(
            "taobao.simba.insight.catsforecastnew.get",
            {
                "bidword_list": bidword_list
            },
            result_processor=lambda x: x["category_forecast_list"]
        )

    def taobao_simba_insight_relatedwords_get(
            self,
            bidword_list,
            number
    ):
        """
        获取词的相关词
        获取给定词的若干相关词，返回结果中越相关的权重越大，排在越前面，根据number参数对返回结果进行截断。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23573

        :param bidword_list: 要查询的词列表
        :param number: 表示返回数据的条数
        """
        return self._top_request(
            "taobao.simba.insight.relatedwords.get",
            {
                "bidword_list": bidword_list,
                "number": number
            },
            result_processor=lambda x: x["related_words_result_list"]
        )

    def taobao_simba_insight_catstopwordnew_get(
            self,
            cat_id,
            start_date,
            end_date,
            dimension,
            page_size
    ):
        """
        获取类目下最热门的词
        按照某个维度，查询某个类目下最热门的词，维度有点击，展现，花费，点击率等，具体可以按哪些字段进行排序，参考参数说明，比如选择了impression，则返回该类目下展现量最高那几个词。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23574

        :param cat_id: 类目id
        :param start_date: 查询开始时间，格式必须为：yyyy-MM-dd
        :param end_date: 查询截止时间，格式只能是：yyyy-MM-dd
        :param dimension: 表示查询的维度，比如选择click，则查询该类目下点击量最大的词，可供选择的值有：impression, click, cost, ctr, cpc, coverage, transactiontotal, transactionshippingtotal, favtotal, roi
        :param page_size: 返回前多少条数据
        """
        return self._top_request(
            "taobao.simba.insight.catstopwordnew.get",
            {
                "cat_id": cat_id,
                "start_date": start_date,
                "end_date": end_date,
                "dimension": dimension,
                "page_size": page_size
            },
            result_processor=lambda x: x["topword_data_list"]
        )

    def taobao_simba_insight_catsworddata_get(
            self,
            cat_id,
            bidword_list,
            start_date,
            end_date
    ):
        """
        获取类目下关键词的数据
        获取给定词在给定类目下的详细数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23575

        :param cat_id: 类目id
        :param bidword_list: 需要查询的关键词列表，最大长度100。
        :param start_date: 开始时间，格式只能为：yyyy-MM-dd
        :param end_date: 结束时间，格式只能为：yyyy-MM-dd
        """
        return self._top_request(
            "taobao.simba.insight.catsworddata.get",
            {
                "cat_id": cat_id,
                "bidword_list": bidword_list,
                "start_date": start_date,
                "end_date": end_date
            },
            result_processor=lambda x: x["catword_data_list"]
        )

    def taobao_simba_insight_wordsdata_get(
            self,
            bidword_list,
            start_date,
            end_date
    ):
        """
        获取关键词的大盘数据
        获取关键词的详细数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23576

        :param bidword_list: 关键词列表，最多可传100个。
        :param start_date: 开始时间
        :param end_date: 结束时间
        """
        return self._top_request(
            "taobao.simba.insight.wordsdata.get",
            {
                "bidword_list": bidword_list,
                "start_date": start_date,
                "end_date": end_date
            },
            result_processor=lambda x: x["word_data_list"]
        )

    def taobao_simba_insight_wordssubdata_get(
            self,
            bidword_list,
            start_date,
            end_date
    ):
        """
        获取关键词按流量细分的数据
        获取关键词按流量进行细分的数据，返回结果中network表示流量的来源，意义如下：1->PC站内，2->PC站外,4->无线站内 5->无线站外
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23577

        :param bidword_list: 关键词列表
        :param start_date: 开始时间
        :param end_date: 结束时间
        """
        return self._top_request(
            "taobao.simba.insight.wordssubdata.get",
            {
                "bidword_list": bidword_list,
                "start_date": start_date,
                "end_date": end_date
            },
            result_processor=lambda x: x["word_subdata_list"]
        )

    def taobao_simba_insight_wordsareadata_get(
            self,
            bidword,
            start_date,
            end_date
    ):
        """
        获取关键词按地域进行细分的数据
        获取关键词按地域细分的详细数据，目前地域只能细化到省级别，返回的结果中包括市，是为了方便以后扩展，目前结果中市的值等于省。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23578

        :param bidword: 关键词
        :param start_date: 开始时间，格式：yyyy-MM-dd
        :param end_date: 结束时间，格式：yyyy-MM-dd
        """
        return self._top_request(
            "taobao.simba.insight.wordsareadata.get",
            {
                "bidword": bidword,
                "start_date": start_date,
                "end_date": end_date
            },
            result_processor=lambda x: x["word_areadata_list"]
        )

    def taobao_simba_insight_wordspricedata_get(
            self,
            bidword,
            start_date,
            end_date
    ):
        """
        关键词按竞价区间的分布数据
        获取关键词按竞价区间进行细分的数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23579

        :param bidword: 关键词
        :param start_date: 开始时间，格式：yyyy-MM-dd
        :param end_date: 结束时间，格式：yyyy-MM-dd
        """
        return self._top_request(
            "taobao.simba.insight.wordspricedata.get",
            {
                "bidword": bidword,
                "start_date": start_date,
                "end_date": end_date
            },
            result_processor=lambda x: x["word_pricedata_list"]
        )

    def taobao_simba_insight_catsinfo_get(
            self,
            type,
            category_id_list=''
    ):
        """
        类目信息获取
        获取类目信息，此接口既提供所有顶级类目的查询，又提供给定类目id自身信息和子类目信息的查询，所以可以根据此接口逐层获取所有的类目信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23580

        :param type: 表示请求的类型：0表示请求所有顶级类目的信息，这时可以忽略第二个参数，1表示获取给定的类目id的详细信息，2表示获取给定类目id的所有子类目的详细信息
        :param category_id_list: 需要查询的类目id
        """
        return self._top_request(
            "taobao.simba.insight.catsinfo.get",
            {
                "type": type,
                "category_id_list": category_id_list
            },
            result_processor=lambda x: x["category_info_list"]
        )

    def taobao_simba_insight_catsdata_get(
            self,
            category_id_list,
            start_date,
            end_date
    ):
        """
        获取类目的大盘数据
        根据类目id获取类目的大盘数据，包括展现指数，点击指数，点击率，本次提供的insight相关的其它接口的都是这种情况。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23581

        :param category_id_list: 表示要查询的类目id
        :param start_date: 开始时间，格式：yyyy-MM-dd
        :param end_date: 查询截止时间，格式：yyyy-MM-dd
        """
        return self._top_request(
            "taobao.simba.insight.catsdata.get",
            {
                "category_id_list": category_id_list,
                "start_date": start_date,
                "end_date": end_date
            },
            result_processor=lambda x: x["cat_data_list"]
        )

    def taobao_simba_rpt_targetingtageffect_get(
            self,
            start_time,
            end_time,
            nick='',
            campaign_id='',
            adgroup_id='',
            page_size='',
            page_number=''
    ):
        """
        获取定向效果报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24977

        :param start_time: 起始时间
        :param end_time: 终止时间 ,必须小于今天
        :param nick: 被操作者昵称
        :param campaign_id: 计划id
        :param adgroup_id: 推广组id
        :param page_size: 页面大小
        :param page_number: 页码
        """
        return self._top_request(
            "taobao.simba.rpt.targetingtageffect.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "nick": nick,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "page_size": page_size,
                "page_number": page_number
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_simba_rpt_targetingtagbase_get(
            self,
            start_time,
            end_time,
            nick='',
            campaign_id='',
            adgroup_id='',
            page_size='',
            page_number=''
    ):
        """
        定向基础报表
        获取定向基础报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24993

        :param start_time: 起始时间
        :param end_time: 结束时间
        :param nick: 被操作者昵称
        :param campaign_id: 计划id
        :param adgroup_id: 推广组id
        :param page_size: 分页大小
        :param page_number: 页码
        """
        return self._top_request(
            "taobao.simba.rpt.targetingtagbase.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "nick": nick,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "page_size": page_size,
                "page_number": page_number
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_simba_rtrpt_creative_get(
            self,
            campaign_id,
            adgroup_id,
            the_date,
            nick=''
    ):
        """
        获取创意实时报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25050

        :param campaign_id: 推广计划id
        :param adgroup_id: 推广组id
        :param the_date: 日期，格式yyyy-mm-dd
        :param nick: 用户名
        """
        return self._top_request(
            "taobao.simba.rtrpt.creative.get",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "the_date": the_date,
                "nick": nick
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_simba_rtrpt_campaign_get(
            self,
            the_date,
            nick=''
    ):
        """
        获取推广计划实时报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25051

        :param the_date: 日期，格式yyyy-mm-dd
        :param nick: 用户名
        """
        return self._top_request(
            "taobao.simba.rtrpt.campaign.get",
            {
                "the_date": the_date,
                "nick": nick
            },
            result_processor=lambda x: x["resultss"]
        )

    def taobao_simba_rtrpt_bidword_get(
            self,
            campaign_id,
            adgroup_id,
            the_date,
            nick=''
    ):
        """
        获取推广词实时报表数据
        获取推广词报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25052

        :param campaign_id: 推广计划id
        :param adgroup_id: 推广组id
        :param the_date: 日期，格式yyyy-mm-dd
        :param nick: 用户名
        """
        return self._top_request(
            "taobao.simba.rtrpt.bidword.get",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "the_date": the_date,
                "nick": nick
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_simba_rtrpt_adgroup_get(
            self,
            campaign_id,
            the_date,
            nick='',
            page_size='',
            page_number=''
    ):
        """
        获取推广组实时报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25053

        :param campaign_id: 推广计划id
        :param the_date: 日期，格式yyyy-mm-dd
        :param nick: 用户名
        :param page_size: 每页大小
        :param page_number: 页码
        """
        return self._top_request(
            "taobao.simba.rtrpt.adgroup.get",
            {
                "campaign_id": campaign_id,
                "the_date": the_date,
                "nick": nick,
                "page_size": page_size,
                "page_number": page_number
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_simba_rtrpt_cust_get(
            self,
            the_date,
            nick=''
    ):
        """
        获取账户实时报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25054

        :param the_date: 日期，格式yyyy-mm-dd
        :param nick: 昵称
        """
        return self._top_request(
            "taobao.simba.rtrpt.cust.get",
            {
                "the_date": the_date,
                "nick": nick
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_simba_keywords_qscore_split_get(
            self,
            ad_group_id,
            bidword_ids,
            nick=''
    ):
        """
        新质量分服务
        获取关键词新的质量分
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25653

        :param ad_group_id: 推广组id
        :param bidword_ids: 词id数组（最多批量获取20个）
        :param nick: 账号昵称
        """
        return self._top_request(
            "taobao.simba.keywords.qscore.split.get",
            {
                "ad_group_id": ad_group_id,
                "bidword_ids": bidword_ids,
                "nick": nick
            }
        )

    def taobao_simba_adgroup_mobilediscount_delete(
            self,
            adgroup_ids,
            nick=''
    ):
        """
        批量删除adgroup的移动溢价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25655

        :param adgroup_ids: adgroup主键数组（批量最多支持200个）
        :param nick: 昵称
        """
        return self._top_request(
            "taobao.simba.adgroup.mobilediscount.delete",
            {
                "adgroup_ids": adgroup_ids,
                "nick": nick
            }
        )

    def taobao_simba_adgroup_mobilediscount_update(
            self,
            adgroup_ids,
            mobile_discount,
            nick=''
    ):
        """
        对推广组进行单独移动溢价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25656

        :param adgroup_ids: 推广组id数组(推广组id集合元素个数在1-200个之间，推广组id需要在同一个推广计划中)
        :param mobile_discount: 折扣（折扣值在1-400之间）
        :param nick: 昵称
        """
        return self._top_request(
            "taobao.simba.adgroup.mobilediscount.update",
            {
                "adgroup_ids": adgroup_ids,
                "mobile_discount": mobile_discount,
                "nick": nick
            }
        )

    def taobao_simba_keywords_realtime_ranking_batch_get(
            self,
            nick,
            ad_group_id,
            bidword_ids
    ):
        """
        获取关键词的新版实时排名
        根据关键词ID获取关键词的新版实时排名
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26824

        :param nick: 旺旺名称
        :param ad_group_id: adgroupId
        :param bidword_ids: 关键词列表集合,id用半角逗号分割，一次最多20个
        """
        return self._top_request(
            "taobao.simba.keywords.realtime.ranking.batch.get",
            {
                "nick": nick,
                "ad_group_id": ad_group_id,
                "bidword_ids": bidword_ids
            }
        )

    def taobao_simba_serchcrowd_get(
            self,
            nick,
            adgroup_id
    ):
        """
        根据推广单元id获取搜索溢价人群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27294

        :param nick: 被操作者的淘宝昵称
        :param adgroup_id: 推广单元id
        """
        return self._top_request(
            "taobao.simba.serchcrowd.get",
            {
                "nick": nick,
                "adgroup_id": adgroup_id
            },
            result_processor=lambda x: x["adgrouptargetingtags"]
        )

    def taobao_simba_serchcrowd_batch_delete(
            self,
            nick,
            adgroup_crowd_ids,
            sub_nick=''
    ):
        """
        单品搜索人群批量取消溢价
        删除单品搜索人群溢价功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27295

        :param nick: 被操作者的淘宝昵称
        :param adgroup_crowd_ids: 需要删除的人群id
        :param sub_nick: 子帐号nick
        """
        return self._top_request(
            "taobao.simba.serchcrowd.batch.delete",
            {
                "nick": nick,
                "adgroup_crowd_ids": adgroup_crowd_ids,
                "sub_nick": sub_nick
            }
        )

    def taobao_simba_searchtagtemplate_get(
            self,
            nick='starshop001',
            sub_nick=''
    ):
        """
        获取搜索人群TOP用户可添加人群信息
        获取搜索人群用户可添加人群信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27296

        :param nick: 被操作者的淘宝昵称
        :param sub_nick: 子帐号nick
        """
        return self._top_request(
            "taobao.simba.searchtagtemplate.get",
            {
                "nick": nick,
                "sub_nick": sub_nick
            },
            result_processor=lambda x: x["template_list"]
        )

    def taobao_simba_serchcrowd_state_batch_update(
            self,
            nick,
            adgroup_crowd_ids,
            adgroup_id,
            state=''
    ):
        """
        单品搜索人群修改状态
        暂停或启用单品推广搜索人群溢价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27297

        :param nick: 被操作者的淘宝昵称
        :param adgroup_crowd_ids: 需要修改出价的人群包id,批量传入时用,分割
        :param adgroup_id: 推广单元id
        :param state: 人群状态,0:暂停;1:启用
        """
        return self._top_request(
            "taobao.simba.serchcrowd.state.batch.update",
            {
                "nick": nick,
                "adgroup_crowd_ids": adgroup_crowd_ids,
                "adgroup_id": adgroup_id,
                "state": state
            }
        )

    def taobao_simba_searchcrowd_batch_add(
            self,
            nick,
            adgroup_id,
            adgroup_targeting_tags
    ):
        """
        推广单元增加搜索人群
        推广单元新增搜索人群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27298

        :param nick: 被操作者的淘宝昵称
        :param adgroup_id: 推广单元id
        :param adgroup_targeting_tags: 新增人群信息,批量接口,入参为list,溢价(discount)范围为[105,400]
        """
        return self._top_request(
            "taobao.simba.searchcrowd.batch.add",
            {
                "nick": nick,
                "adgroup_id": adgroup_id,
                "adgroup_targeting_tags": adgroup_targeting_tags
            },
            result_processor=lambda x: x["adgrouptargetingtags"]
        )

    def taobao_simba_serchcrowd_price_batch_update(
            self,
            nick,
            adgroup_crowd_ids,
            adgroup_id,
            sub_nick='',
            discount=''
    ):
        """
        单品推广搜索人群修改溢价
        单品推广搜索人群修改溢价, 不支持跨推广单元修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27299

        :param nick: 被操作者的淘宝昵称
        :param adgroup_crowd_ids: 需要修改出价的人群包id,批量传入的时候用,分割
        :param adgroup_id: 推广单元id
        :param sub_nick: 子帐号nick
        :param discount: 人群溢价比例，溢价范围[5,300]
        """
        return self._top_request(
            "taobao.simba.serchcrowd.price.batch.update",
            {
                "nick": nick,
                "adgroup_crowd_ids": adgroup_crowd_ids,
                "adgroup_id": adgroup_id,
                "sub_nick": sub_nick,
                "discount": discount
            },
            result_processor=lambda x: x["adgrouptargetingtags"]
        )

    def taobao_simba_rtrpt_targetingtag_get(
            self,
            nick,
            campaign_id,
            adgroup_id,
            the_date,
            traffic_type
    ):
        """
        搜索人群实时报表
        获取搜搜人群实时报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27346

        :param nick: 旺旺名称
        :param campaign_id: 推广计划id
        :param adgroup_id: 推广单元id
        :param the_date: 日期，格式yyyy-mm-dd
        :param traffic_type: 流量类型 1: PC站内, 2: PC站外 , 4: 无线站内, 5: 无线站外,支持多种一起查询,如1,2,4,5
        """
        return self._top_request(
            "taobao.simba.rtrpt.targetingtag.get",
            {
                "nick": nick,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "the_date": the_date,
                "traffic_type": traffic_type
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_simba_rpt_targetingtag_get(
            self,
            nick='',
            campaign_id='',
            adgroup_id='',
            start_time='',
            end_time='',
            traffic_type=''
    ):
        """
        搜索人群离线报表
        获取搜搜人群实时报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27371

        :param nick: 用户旺旺名称
        :param campaign_id: 推广计划id
        :param adgroup_id: 推广单元id
        :param start_time: 开始时间
        :param end_time: 结束时间
        :param traffic_type: 流量类型 1: PC站内, 2: PC站外 , 4: 无线站内, 5: 无线站外,支持多种一起查询,如1,2,4,5
        """
        return self._top_request(
            "taobao.simba.rpt.targetingtag.get",
            {
                "nick": nick,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "start_time": start_time,
                "end_time": end_time,
                "traffic_type": traffic_type
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_simba_customers_sid_get(
            self
    ):
        """
        查看功能权限
        查询用户是否拥有某个功能权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29157

        """
        return self._top_request(
            "taobao.simba.customers.sid.get"
        )

    def taobao_simba_keyword_findbyids(
            self,
            bidword_ids=''
    ):
        """
        （新）根据一堆关键词ids获取关键词
        根据一个关键词Id列表取得一组关键词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43330

        :param bidword_ids: 关键词ids
        """
        return self._top_request(
            "taobao.simba.keyword.findbyids",
            {
                "bidword_ids": bidword_ids
            }
        )

    def taobao_simba_keyword_add(
            self,
            bidwords,
            adgroup_id=''
    ):
        """
        （新）关键词新增接口
        （新）关键词更新相关接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43342

        :param bidwords: 关键词相关信息
        :param adgroup_id: 推广单元id
        """
        return self._top_request(
            "taobao.simba.keyword.add",
            {
                "bidwords": bidwords,
                "adgroup_id": adgroup_id
            }
        )

    def taobao_simba_keyword_update(
            self,
            bidwords
    ):
        """
        （新）关键词更新相关接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43343

        :param bidwords: 关键词相关信息
        """
        return self._top_request(
            "taobao.simba.keyword.update",
            {
                "bidwords": bidwords
            }
        )

    def taobao_simba_keyword_findbyadgroupid(
            self,
            adgroup_id=''
    ):
        """
        根据推广单元id获取关键词
        根据一个关键词Id列表取得一组关键词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43344

        :param adgroup_id: 推广单元id
        """
        return self._top_request(
            "taobao.simba.keyword.findbyadgroupid",
            {
                "adgroup_id": adgroup_id
            }
        )

    def taobao_simba_salestar_campaign_budget_update(
            self,
            campaign_id,
            budget=''
    ):
        """
        销量明星跟新预算相关接口
        更新一个推广计划的日限额
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43351

        :param campaign_id: 推广计划Id
        :param budget: 如果为空则取消限额；否则必须为整数，单位是元，不得小于30；
        """
        return self._top_request(
            "taobao.simba.salestar.campaign.budget.update",
            {
                "campaign_id": campaign_id,
                "budget": budget
            },
            result_processor=lambda x: x["campaign_budget"]
        )

    def taobao_simba_salestar_adgroup_update(
            self,
            adgroup_id,
            online_status=''
    ):
        """
        销量明星更新一个推广组的信息
        更新一个推广组的信息，可以设置 是否上线
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43354

        :param adgroup_id: 推广组Id
        :param online_status: 用户设置的上下线状态 offline-下线(暂停竞价)； online-上线；默认为online
        """
        return self._top_request(
            "taobao.simba.salestar.adgroup.update",
            {
                "adgroup_id": adgroup_id,
                "online_status": online_status
            },
            result_processor=lambda x: x["adgroup"]
        )

    def taobao_simba_salestar_keywords_qscore_split_get(
            self,
            ad_group_id,
            bidword_ids,
            nick=''
    ):
        """
        (新)销量明星质量分相关接口
        获取关键词新的质量分
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43356

        :param ad_group_id: 推广组id
        :param bidword_ids: 词id数组（最多批量获取20个）
        :param nick: 账号昵称
        """
        return self._top_request(
            "taobao.simba.salestar.keywords.qscore.split.get",
            {
                "ad_group_id": ad_group_id,
                "bidword_ids": bidword_ids,
                "nick": nick
            }
        )

    def taobao_simba_salestar_adgroup_delete(
            self,
            adgroup_id,
            nick=''
    ):
        """
        (新)销量明星删除推广单元接口
        删除一个推广组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43357

        :param adgroup_id: 推广组Id
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.salestar.adgroup.delete",
            {
                "adgroup_id": adgroup_id,
                "nick": nick
            }
        )

    def taobao_simba_salestar_adgroup_findbycampid(
            self,
            page_size,
            page_no,
            campaign_id=''
    ):
        """
        (销量明星)批量获取推广计划下的推广组信息
        批量得到推广计划下的推广组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43358

        :param page_size: 页尺寸，最大200，如果入参adgroup_ids有传入值，则page_size和page_no值不起作用。如果adgrpup_ids为空而campaign_id有值，此时page_size和page_no值才是返回的页数据大小和页码
        :param page_no: 页码，从1开始
        :param campaign_id: 推广计划Id
        """
        return self._top_request(
            "taobao.simba.salestar.adgroup.findbycampid",
            {
                "page_size": page_size,
                "page_no": page_no,
                "campaign_id": campaign_id
            },
            result_processor=lambda x: x["adgroups"]
        )

    def taobao_simba_salestar_creatives_get(
            self,
            nick='',
            creative_ids='',
            adgroup_id=''
    ):
        """
        （新）批量获取创意
        取得一个推广组的所有创意或者根据一个创意Id列表取得一组创意；<br/>如果同时提供了推广组Id和创意id列表，则优先使用推广组Id；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43359

        :param nick: 主人昵称
        :param creative_ids: 创意Id数组，最多200个
        :param adgroup_id: 推广组Id
        """
        return self._top_request(
            "taobao.simba.salestar.creatives.get",
            {
                "nick": nick,
                "creative_ids": creative_ids,
                "adgroup_id": adgroup_id
            },
            result_processor=lambda x: x["creatives"]
        )

    def taobao_simba_salestar_creative_add(
            self,
            adgroup_id,
            title,
            img_url,
            nick=''
    ):
        """
        （新）新建创意
        创建一个创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43360

        :param adgroup_id: 推广组Id
        :param title: 创意标题，最多20个汉字
        :param img_url: 创意图片地址，必须是推广组对应商品的图片之一
        :param nick: 主人昵称
        """
        return self._top_request(
            "taobao.simba.salestar.creative.add",
            {
                "adgroup_id": adgroup_id,
                "title": title,
                "img_url": img_url,
                "nick": nick
            },
            result_processor=lambda x: x["creative"]
        )

    def taobao_simba_salestar_creative_update(
            self,
            adgroup_id,
            creative_id,
            title,
            img_url,
            picture_id=''
    ):
        """
        销量明星更新创意相关接口
        更新一个创意的信息，可以设置创意标题、创意图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43361

        :param adgroup_id: 推广组Id
        :param creative_id: 创意Id
        :param title: 创意标题，最多20个汉字
        :param img_url: 创意图片地址，必须是推广组对应商品的图片之一
        :param picture_id: 如果用户开通了创意本地上传图片功能的，可以使用该用户图片空间的图片来修改创意，pictureId为图片空间中图片的pictureId，img_url为图片空间中图片链接地址，如果是使用的主图或副图修改创意，则pictureId必须为空
        """
        return self._top_request(
            "taobao.simba.salestar.creative.update",
            {
                "adgroup_id": adgroup_id,
                "creative_id": creative_id,
                "title": title,
                "img_url": img_url,
                "picture_id": picture_id
            },
            result_processor=lambda x: x["creativerecord"]
        )

    def taobao_simba_salestar_creative_delete(
            self,
            creative_id
    ):
        """
        (新)销量明星删除创意相关接口
        删除一个创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43363

        :param creative_id: 创意Id
        """
        return self._top_request(
            "taobao.simba.salestar.creative.delete",
            {
                "creative_id": creative_id
            },
            result_processor=lambda x: x["creative"]
        )

    def taobao_simba_salestar_adgroup_add(
            self,
            campaign_id,
            item_id,
            title,
            img_url
    ):
        """
        (新)创建一个推广组
        创建一个推广组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43366

        :param campaign_id: 推广计划Id
        :param item_id: 商品Id
        :param title: 创意标题，最多20个汉字
        :param img_url: 创意图片地址，必须是商品的图片之一
        """
        return self._top_request(
            "taobao.simba.salestar.adgroup.add",
            {
                "campaign_id": campaign_id,
                "item_id": item_id,
                "title": title,
                "img_url": img_url
            },
            result_processor=lambda x: x["adgroup"]
        )

    def taobao_simba_salestar_keywords_delete(
            self,
            bidword_ids=''
    ):
        """
        销量明星关键词删除
        （新）关键词删除相关接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43394

        :param bidword_ids: 关键词ids
        """
        return self._top_request(
            "taobao.simba.salestar.keywords.delete",
            {
                "bidword_ids": bidword_ids
            }
        )

    def taobao_simba_salestar_keywords_recommend_get(
            self,
            adgroup_id,
            product_id='101001005'
    ):
        """
        销量明星api相关接口
        取得一个推广组的推荐关键词列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43400

        :param adgroup_id: 推广组ID
        :param product_id: 产品类型101001005代表标准推广，101001014代表销量明星
        """
        return self._top_request(
            "taobao.simba.salestar.keywords.recommend.get",
            {
                "adgroup_id": adgroup_id,
                "product_id": product_id
            },
            result_processor=lambda x: x["recommend_words"]
        )


class TbJiPiao(DingTalkBaseAPI):
    """
    机票API
    """

    def taobao_alitrip_flightchange_add(
            self,
            flight_change_data_do
    ):
        """
        航变信息录入接口
        代理商调用航变录入接口,
        简要描述:完成航变信息的自动录入后飞猪机票平台会发生的动作是匹配所有该代理人的订单,如果接口参数指定了飞猪机票订单号，发生的动作是匹配该代理人的指定订单；
        找到与航变航班相关的订单给旅客下发航变短信并出发IVR自动外呼旅客。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27819

        :param flight_change_data_do: 录入参数类
        """
        return self._top_request(
            "taobao.alitrip.flightchange.add",
            {
                "flight_change_data_do": flight_change_data_do
            }
        )

    def taobao_alitrip_flightchange_get(
            self,
            search_option=None
    ):
        """
        获取航变信息
        查询航变是为了两个目的，阿里旅行抓取到未确认航变的航变信息源时可以由代理确认航变，同时对于确认航变的航变信息也共享给代理人做本体业务使用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27822

        :param search_option: 查询信息封装
        """
        return self._top_request(
            "taobao.alitrip.flightchange.get",
            {
                "search_option": search_option
            },
            result_processor=lambda x: x["result_d_o"]
        )

    def taobao_alitrip_ie_agent_shopping_push(
            self,
            param0=None
    ):
        """
        国际机票大卖家Shopping推送
        用于国际机票大卖家主动推送Shopping结果更新缓存报价。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29496

        :param param0: 政策推送结构体
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.shopping.push",
            {
                "param0": param0
            }
        )

    def alitrip_tripvp_agent_order_issue(
            self,
            agent_id,
            issue_pro_order_vo
    ):
        """
        廉航辅营正向订单出货接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30161

        :param agent_id: 代理商ID
        :param issue_pro_order_vo: 出货通知信息
        """
        return self._top_request(
            "alitrip.tripvp.agent.order.issue",
            {
                "agent_id": agent_id,
                "issue_pro_order_vo": issue_pro_order_vo
            },
            result_processor=lambda x: x["is_success"]
        )

    def alitrip_tripvp_agent_order_get(
            self,
            agent_id,
            trade_order_id
    ):
        """
        廉航辅营正向订单查询详情接口
        【国际机票】查询辅营订单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30242

        :param agent_id: 代理商ID
        :param trade_order_id: 辅营的订单号
        """
        return self._top_request(
            "alitrip.tripvp.agent.order.get",
            {
                "agent_id": agent_id,
                "trade_order_id": trade_order_id
            }
        )

    def taobao_alitrip_totoro_auxproduct_delete(
            self,
            del_aux_product_rq
    ):
        """
        廉航辅营产品删除
        廉航辅营产品删除接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31192

        :param del_aux_product_rq: 廉航辅营产品删除请求
        """
        return self._top_request(
            "taobao.alitrip.totoro.auxproduct.delete",
            {
                "del_aux_product_rq": del_aux_product_rq
            }
        )

    def taobao_alitrip_totoro_auxproduct_push(
            self,
            push_aux_products_rq
    ):
        """
        廉航辅营产品投放
        廉航辅营产品投放接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31193

        :param push_aux_products_rq: 廉航辅营产品推送请求
        """
        return self._top_request(
            "taobao.alitrip.totoro.auxproduct.push",
            {
                "push_aux_products_rq": push_aux_products_rq
            }
        )

    def taobao_alitrip_ie_agent_refund_new_fillconfirmfee(
            self,
            param_refund_order_fill_confirm_fee_rq=None
    ):
        """
        新模型-回填申请单费用
        1. 回填退票费用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37897

        :param param_refund_order_fill_confirm_fee_rq: 请求
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.refund.new.fillconfirmfee",
            {
                "param_refund_order_fill_confirm_fee_rq": param_refund_order_fill_confirm_fee_rq
            }
        )


class TbONSXiaoXiFuWu(DingTalkBaseAPI):
    """
    ONS消息服务
    """

    def taobao_jushita_jms_user_get(
            self,
            user_nick
    ):
        """
        查询某个用户是否同步消息
        查询某个用户是否同步消息，只支持单个查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25343

        :param user_nick: 需要查询的用户名
        """
        return self._top_request(
            "taobao.jushita.jms.user.get",
            {
                "user_nick": user_nick
            },
            result_processor=lambda x: x["ons_user"]
        )

    def taobao_jushita_jms_user_add(
            self,
            topic_names=''
    ):
        """
        添加ONS消息同步用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25344

        :param topic_names: topic列表,不填则继承appkey所订阅的topic
        """
        return self._top_request(
            "taobao.jushita.jms.user.add",
            {
                "topic_names": topic_names
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_jushita_jms_user_delete(
            self,
            user_nick
    ):
        """
        删除ONS消息同步用户
        删除ONS消息同步用户，删除后用户的消息将不会推送到聚石塔的ONS中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25345

        :param user_nick: 需要停止同步消息的用户nick
        """
        return self._top_request(
            "taobao.jushita.jms.user.delete",
            {
                "user_nick": user_nick
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_jushita_jms_group_get(
            self,
            page_no='1',
            page_size='40',
            group_names=''
    ):
        """
        查询ONS分组
        查询当前appkey在ONS中已有的分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25634

        :param page_no: 页码
        :param page_size: 每页返回多少个分组
        :param group_names: 要查询分组的名称，多个分组用半角逗号分隔，不传代表查询所有分组信息，但不会返回组下面的用户信息。如果应用没有设置分组则返回空。组名不能以default开头，default开头是系统默认的组。
        """
        return self._top_request(
            "taobao.jushita.jms.group.get",
            {
                "page_no": page_no,
                "page_size": page_size,
                "group_names": group_names
            }
        )

    def taobao_jushita_jms_group_delete(
            self,
            group_name,
            nicks='',
            user_platform='tbUIC'
    ):
        """
        删除ONS分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25635

        :param group_name: 分组名称，分组删除后，用户的消息将会存储于默认分组中。警告：由于分组已经删除，用户之前未消费的消息将无法再获取。不能以default开头，default开头为系统默认组。
        :param nicks: 用户列表，不传表示删除整个分组，如果用户全部删除后，也会自动删除整个分组
        :param user_platform: 用户所属于的平台类型，tbUIC:淘宝用户; icbu: icbu用户
        """
        return self._top_request(
            "taobao.jushita.jms.group.delete",
            {
                "group_name": group_name,
                "nicks": nicks,
                "user_platform": user_platform
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_jushita_jms_topics_get(
            self,
            nick
    ):
        """
        根据用户nick获取开通的消息列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26278

        :param nick: 卖家nick
        """
        return self._top_request(
            "taobao.jushita.jms.topics.get",
            {
                "nick": nick
            }
        )


class TbYingXiao(DingTalkBaseAPI):
    """
    营销API
    """

    def taobao_promotion_coupon_send(
            self,
            coupon_id,
            buyer_nick
    ):
        """
        店铺优惠券发放接口
        通过接口批量发放店铺优惠券（每次只能发送100张，只能发给当前授权卖家店铺的会员），发送成功则返回为空，发送失败则返回失败的买家列表和发送成功的买家和优惠券的number。注：如果所有买家都发放失败的话，is_success也为true，建议调用者根据返回的集合判断是否送入的买家都发放成功了
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10581

        :param coupon_id: 优惠券的id
        :param buyer_nick: 买家昵称用半角','号分割
        """
        return self._top_request(
            "taobao.promotion.coupon.send",
            {
                "coupon_id": coupon_id,
                "buyer_nick": buyer_nick
            }
        )

    def taobao_promotion_activity_get(
            self,
            activity_id=''
    ):
        """
        查询某个卖家的店铺优惠券领取活动
        查询某个卖家的店铺优惠券领取活动<br/>返回，优惠券领取活动ID，优惠券ID，总领用量，每人限领量，已领取数量<br/>领取活动状态，优惠券领取链接<br/>最多50个优惠券
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10582

        :param activity_id: 活动的id
        """
        return self._top_request(
            "taobao.promotion.activity.get",
            {
                "activity_id": activity_id
            },
            result_processor=lambda x: x["activitys"]
        )

    def taobao_promotion_coupon_add(
            self,
            denominations,
            end_time,
            condition='',
            start_time=''
    ):
        """
        创建店铺优惠券接口
        创建店铺优惠券。有效期内的店铺优惠券总数量不超过50张
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10584

        :param denominations: 优惠券的面额，必须是3，5，10，20，50，100
        :param end_time: 优惠券的截止日期
        :param condition: 订单满多少元才能用这个优惠券，500就是满500元才能使用
        :param start_time: 优惠券的生效时间
        """
        return self._top_request(
            "taobao.promotion.coupon.add",
            {
                "denominations": denominations,
                "end_time": end_time,
                "condition": condition,
                "start_time": start_time
            },
            result_processor=lambda x: x["coupon_id"]
        )

    def taobao_promotion_coupons_get(
            self,
            coupon_id='',
            end_time='',
            denominations='',
            page_no='1',
            page_size='20'
    ):
        """
        查询卖家优惠券
        查询卖家已经创建的优惠券，接口返回信息：优惠券ID，面值，创建时间，有效期，使用条件，使用渠道，创建渠道，优惠券总数量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10585

        :param coupon_id: 优惠券的id，唯一标识这个优惠券
        :param end_time: 优惠券的截止日期
        :param denominations: 优惠券的面额，必须是3，5，10，20，50,100
        :param page_no: 查询的页号，结果集是分页返回的，每页20条
        :param page_size: 每页条数
        """
        return self._top_request(
            "taobao.promotion.coupons.get",
            {
                "coupon_id": coupon_id,
                "end_time": end_time,
                "denominations": denominations,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_promotion_meal_get(
            self,
            meal_id='',
            status=''
    ):
        """
        搭配套餐查询
        搭配套餐查询。每个卖家最多创建50个搭配套餐，所以查询不会分页，会将所有的满足状态的搭配套餐全部查出。该接口不会校验商品的下架或库存为0，查询结果的状态表明搭配套餐在数据库中的状态，商品的状态请isv自己验证。在卖家后台页面点击查看会触发数据库状态的修改。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10594

        :param meal_id: 搭配套餐id
        :param status: 套餐状态。有效：VALID;失效：INVALID(有效套餐为可使用的套餐,无效套餐为套餐中有商品下架或库存为0时)。默认时两种情况都会查询。
        """
        return self._top_request(
            "taobao.promotion.meal.get",
            {
                "meal_id": meal_id,
                "status": status
            },
            result_processor=lambda x: x["meal_list"]
        )

    def taobao_ump_mbb_getbyid(
            self,
            id
    ):
        """
        获取营销积木块
        根据积木块id获取营销积木块。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10709

        :param id: 积木块的id
        """
        return self._top_request(
            "taobao.ump.mbb.getbyid",
            {
                "id": id
            },
            result_processor=lambda x: x["mbb"]
        )

    def taobao_ump_mbbs_get(
            self,
            type=''
    ):
        """
        获取营销积木块列表
        获取营销积木块列表，可以根据类型获取，也可以将该字段设为空，获取所有的
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10710

        :param type: 积木块类型。如果该字段为空表示查出所有类型的<br/>现在有且仅有如下几种：resource,condition,action,target
        """
        return self._top_request(
            "taobao.ump.mbbs.get",
            {
                "type": type
            },
            result_processor=lambda x: x["mbbs"]
        )

    def taobao_ump_tool_get(
            self,
            tool_id
    ):
        """
        查询工具
        根据工具id获取一个工具对象
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10711

        :param tool_id: 工具的id
        """
        return self._top_request(
            "taobao.ump.tool.get",
            {
                "tool_id": tool_id
            },
            result_processor=lambda x: x["content"]
        )

    def taobao_ump_tools_get(
            self,
            tool_code=''
    ):
        """
        查询工具列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10712

        :param tool_code: 工具编码
        """
        return self._top_request(
            "taobao.ump.tools.get",
            {
                "tool_code": tool_code
            },
            result_processor=lambda x: x["tools"]
        )

    def taobao_ump_tool_add(
            self,
            content
    ):
        """
        新增优惠工具
        新增优惠工具。通过ump sdk来完成将积木块拼装成为工具的操作，再使用本接口上传优惠工具。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10713

        :param content: 工具内容，由sdk里面的MarketingTool生成的json字符串
        """
        return self._top_request(
            "taobao.ump.tool.add",
            {
                "content": content
            },
            result_processor=lambda x: x["tool_id"]
        )

    def taobao_ump_tool_delete(
            self,
            tool_id
    ):
        """
        删除工具
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        删除营销工具。当工具正在被使用的时候，是不能被删除的。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10715

        :param tool_id: 营销工具id
        """
        return self._top_request(
            "taobao.ump.tool.delete",
            {
                "tool_id": tool_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_ump_activity_add(
            self,
            tool_id,
            content
    ):
        """
        新增优惠活动
        新增优惠活动。设置优惠活动的基本信息，比如活动时间，活动针对的对象（可以是满足某些条件的买家）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10716

        :param tool_id: 工具id
        :param content: 活动内容，通过ump sdk里面的MarkeitngTool来生成，name必须属于“营销标签词库”——https://huodong.m.taobao.com/api/data/v2/5fe5e737d3314fa2973297f86f7bff3a.js?file=5fe5e737d3314fa2973297f86f7bff3a.js中的word值中的一种。
        """
        return self._top_request(
            "taobao.ump.activity.add",
            {
                "tool_id": tool_id,
                "content": content
            },
            result_processor=lambda x: x["act_id"]
        )

    def taobao_ump_activity_update(
            self,
            act_id,
            content
    ):
        """
        修改活动信息
        修改营销活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10717

        :param act_id: 活动id
        :param content: 营销活动内容，json格式，通过ump sdk 的marketingTool来生成
        """
        return self._top_request(
            "taobao.ump.activity.update",
            {
                "act_id": act_id,
                "content": content
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_ump_activity_delete(
            self,
            act_id
    ):
        """
        删除营销活动
        删除营销活动。对应的活动详情等将会被全部删除。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10718

        :param act_id: 活动id
        """
        return self._top_request(
            "taobao.ump.activity.delete",
            {
                "act_id": act_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_ump_activity_get(
            self,
            act_id
    ):
        """
        查询营销活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10719

        :param act_id: 活动id
        """
        return self._top_request(
            "taobao.ump.activity.get",
            {
                "act_id": act_id
            },
            result_processor=lambda x: x["content"]
        )

    def taobao_ump_activities_get(
            self,
            tool_id,
            page_no,
            page_size
    ):
        """
        查询活动列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10720

        :param tool_id: 工具id
        :param page_no: 分页的页码
        :param page_size: 每页的最大条数
        """
        return self._top_request(
            "taobao.ump.activities.get",
            {
                "tool_id": tool_id,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_ump_detail_get(
            self,
            detail_id
    ):
        """
        查询活动详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10721

        :param detail_id: 活动详情的id
        """
        return self._top_request(
            "taobao.ump.detail.get",
            {
                "detail_id": detail_id
            },
            result_processor=lambda x: x["content"]
        )

    def taobao_ump_details_get(
            self,
            act_id,
            page_no,
            page_size
    ):
        """
        查询活动详情列表
        分页查询优惠详情列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10722

        :param act_id: 营销活动id
        :param page_no: 分页的页码
        :param page_size: 每页的最大条数
        """
        return self._top_request(
            "taobao.ump.details.get",
            {
                "act_id": act_id,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_ump_detail_add(
            self,
            act_id,
            content
    ):
        """
        新增活动详情
        增加活动详情。活动详情里面包括活动的范围（店铺，商品），活动的参数（比如具体的折扣），参与类型（全部，部分，部分不参加）等信息。当参与类型为部分或部分不参加的时候需要和taobao.ump.range.add来配合使用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10723

        :param act_id: 增加工具详情
        :param content: 活动详情内容，json格式，可以通过ump sdk中的MarketingTool来进行处理
        """
        return self._top_request(
            "taobao.ump.detail.add",
            {
                "act_id": act_id,
                "content": content
            },
            result_processor=lambda x: x["detail_id"]
        )

    def taobao_ump_detail_update(
            self,
            detail_id,
            content
    ):
        """
        修改活动详情
        更新活动详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10724

        :param detail_id: 活动详情id
        :param content: 活动详情内容，可以通过ump sdk中的MarketingTool来生成这个内容
        """
        return self._top_request(
            "taobao.ump.detail.update",
            {
                "detail_id": detail_id,
                "content": content
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_ump_detail_delete(
            self,
            detail_id
    ):
        """
        删除活动详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10725

        :param detail_id: 活动详情id
        """
        return self._top_request(
            "taobao.ump.detail.delete",
            {
                "detail_id": detail_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_ump_range_add(
            self,
            act_id,
            type,
            ids
    ):
        """
        添加活动范围
        指定某项活动中，某个商家的某些类型物品（指定商品或者别的）参加或者不参加活动。当活动详情的参与类型为部分或者部分不参加的时候，需要指定具体哪部分参加或者不参加，使用本接口完成操作。比如部分商品满就送，这里的range用来指定具体哪些商品参加满就送活动。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10726

        :param act_id: 活动id
        :param type: 范围的类型，比如是全店，商品，见：MarketingConstants.PARTICIPATE_TYPE_*
        :param ids: id列表，当范围类型为商品时，该id为商品id.多个id用逗号隔开，一次不超过50个
        """
        return self._top_request(
            "taobao.ump.range.add",
            {
                "act_id": act_id,
                "type": type,
                "ids": ids
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_ump_range_delete(
            self,
            act_id,
            type,
            ids
    ):
        """
        删除活动范围
        去指先前指定在某项活动中，某些类型的物品参加或者不参加活动的设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10727

        :param act_id: 活动id
        :param type: 范围的类型，比如是全店，商品，类目见：MarketingConstants.PARTICIPATE_TYPE_*
        :param ids: id列表，当范围类型为商品时，该id为商品id；当范围类型为类目时，该id为类目id
        """
        return self._top_request(
            "taobao.ump.range.delete",
            {
                "act_id": act_id,
                "type": type,
                "ids": ids
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_ump_range_get(
            self,
            act_id
    ):
        """
        查询活动范围
        查询某个卖家所有参加或者不参加某项活动的物品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10728

        :param act_id: 活动id
        """
        return self._top_request(
            "taobao.ump.range.get",
            {
                "act_id": act_id
            },
            result_processor=lambda x: x["ranges"]
        )

    def taobao_ump_mbb_getbycode(
            self,
            code
    ):
        """
        根据营销积木块代码获取积木块
        根据营销积木块代码获取积木块。接口返回该代码最新版本的积木块。如果要查询某个非最新版本的积木块，可以使用积木块id查询接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10729

        :param code: 营销积木块code
        """
        return self._top_request(
            "taobao.ump.mbb.getbycode",
            {
                "code": code
            },
            result_processor=lambda x: x["mbb"]
        )

    def taobao_promotion_limitdiscount_detail_get(
            self,
            limit_discount_id
    ):
        """
        限时打折详情查询
        限时打折详情查询。查询出指定限时打折的对应商品记录信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10770

        :param limit_discount_id: 限时打折ID。这个针对查询唯一限时打折情况。
        """
        return self._top_request(
            "taobao.promotion.limitdiscount.detail.get",
            {
                "limit_discount_id": limit_discount_id
            },
            result_processor=lambda x: x["item_discount_detail_list"]
        )

    def taobao_promotion_limitdiscount_get(
            self,
            limit_discount_id='',
            status='',
            start_time='',
            end_time='',
            page_number=''
    ):
        """
        限时打折查询
        分页查询某个卖家的限时打折信息。每页20条数据，按照结束时间降序排列。也可指定某一个限时打折id查询唯一的限时打折信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10771

        :param limit_discount_id: 限时打折ID。这个针对查询唯一限时打折情况。若此字段不为空，则说明操作为单条限时打折记录查询，其他字段忽略。若想分页按条件查询，这个字段置为空。
        :param status: 限时打折活动状态。ALL:全部状态;OVER:已结束;DOING:进行中;PROPARE:未开始(只支持大写)。当limit_discount_id为空时，为空时，默认为全部的状态。
        :param start_time: 限时打折开始时间。输入的时间会被截取，年月日有效，时分秒忽略。
        :param end_time: 限时打折结束时间。输入的时间会被截取，年月日有效，时分秒忽略。
        :param page_number: 分页页号。默认1。当页数大于最大页数时，结果为最大页数的数据。
        """
        return self._top_request(
            "taobao.promotion.limitdiscount.get",
            {
                "limit_discount_id": limit_discount_id,
                "status": status,
                "start_time": start_time,
                "end_time": end_time,
                "page_number": page_number
            }
        )

    def taobao_marketing_promotion_kfc(
            self,
            promotion_title,
            promotion_desc
    ):
        """
        定向优惠活动名称与描述违禁词检查
        活动名称与描述违禁词检查
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10792

        :param promotion_title: 活动名称
        :param promotion_desc: 活动描述
        """
        return self._top_request(
            "taobao.marketing.promotion.kfc",
            {
                "promotion_title": promotion_title,
                "promotion_desc": promotion_desc
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_ump_mbbs_list_get(
            self,
            ids
    ):
        """
        通过ids列表获取营销积木块列表
        通过营销积木id列表来获取营销积木块列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10845

        :param ids: 营销积木块id组成的字符串。
        """
        return self._top_request(
            "taobao.ump.mbbs.list.get",
            {
                "ids": ids
            },
            result_processor=lambda x: x["mbbs"]
        )

    def taobao_ump_activities_list_get(
            self,
            ids
    ):
        """
        营销活动列表查询
        按照营销活动id的列表ids，查询对应的营销活动列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10846

        :param ids: 营销活动id列表。
        """
        return self._top_request(
            "taobao.ump.activities.list.get",
            {
                "ids": ids
            },
            result_processor=lambda x: x["activities"]
        )

    def taobao_ump_detail_list_add(
            self,
            act_id,
            details
    ):
        """
        营销详情添加
        批量添加营销活动。替代单条添加营销详情的的API。此接口适用针对某个营销活动的多档设置，会按顺序插入detail。若在整个事务过程中出现断点，会将已插入完成的detail_id返回，注意记录这些id，并将其删除，会对交易过程中的优惠产生影响。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10854

        :param act_id: 营销活动id。
        :param details: 营销详情的列表。此列表由detail的json字符串组成。最多插入为10个。
        """
        return self._top_request(
            "taobao.ump.detail.list.add",
            {
                "act_id": act_id,
                "details": details
            },
            result_processor=lambda x: x["detail_id_list"]
        )

    def taobao_promotion_coupon_buyer_search(
            self,
            seller_nick='',
            status='',
            page_size='20',
            current_page='1',
            end_time=''
    ):
        """
        查询买家在相关app领取的优惠券信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10855

        :param seller_nick: 卖家昵称
        :param status: 券状态  '正常',1 '已删除',-1 '已使用',-2 '冻结',0
        :param page_size: 每页数据 建议20左右
        :param current_page: 当前第几页  从第一页开始
        :param end_time: 结束时间
        """
        return self._top_request(
            "taobao.promotion.coupon.buyer.search",
            {
                "seller_nick": seller_nick,
                "status": status,
                "page_size": page_size,
                "current_page": current_page,
                "end_time": end_time
            }
        )

    def taobao_promotionmisc_tool_check(
            self,
            tool_id,
            meta_allow=''
    ):
        """
        UMP工具检测
        UMP工具检测。ISV通过该接口检测（通过taobao.ump.tool.add）创建的UMP工具（tool）是否符合规范，如果不符合，则返回错误信息和对应的解决方案的；工具检测通过后才可以提交工具审核邮件，提交工具审核时，需提供该接口的返回值。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21644

        :param tool_id: 工具ID, taobao.ump.tool.add成功后返回的id。
        :param meta_allow: 可使用的元数据。PRD审核后，会告诉isv可使用的元数据。
        """
        return self._top_request(
            "taobao.promotionmisc.tool.check",
            {
                "tool_id": tool_id,
                "meta_allow": meta_allow
            }
        )

    def tmall_promotag_tag_apply(
            self,
            tag_name,
            tag_desc,
            start_time,
            end_time
    ):
        """
        优惠标签申请
        创建优惠标签
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21771

        :param tag_name: 标签名称。
                         注意在UMP中使用新人群标签top变成大写的“NEW_” 如：老标签是top1234，新标签是NEW_1234 。
        :param tag_desc: 标签用途描述
        :param start_time: 标签开始时间
        :param end_time: 标签结束时间
        """
        return self._top_request(
            "tmall.promotag.tag.apply",
            {
                "tag_name": tag_name,
                "tag_desc": tag_desc,
                "start_time": start_time,
                "end_time": end_time
            }
        )

    def tmall_promotag_tag_find(
            self,
            page_no,
            page_size,
            tag_name='',
            tag_id=''
    ):
        """
        查询标签接口
        查询用户创建的所有标签
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21772

        :param page_no: 当前页码
        :param page_size: 每页显示个数
        :param tag_name: 标签名称，查询时可选项
        :param tag_id: 标签ID
        """
        return self._top_request(
            "tmall.promotag.tag.find",
            {
                "page_no": page_no,
                "page_size": page_size,
                "tag_name": tag_name,
                "tag_id": tag_id
            },
            result_processor=lambda x: x["query_result"]
        )

    def tmall_promotag_taguser_judge(
            self,
            tag_id,
            nick
    ):
        """
        用户标签判断接口
        查询用户是否有标签
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21773

        :param tag_id: 标签ID
        :param nick: 买家昵称
        """
        return self._top_request(
            "tmall.promotag.taguser.judge",
            {
                "tag_id": tag_id,
                "nick": nick
            }
        )

    def tmall_promotag_taguser_remove(
            self,
            tag_id,
            nick
    ):
        """
        给用户移除优惠标签
        给用户载体去标
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21774

        :param tag_id: 标签ID
        :param nick: 买家昵称
        """
        return self._top_request(
            "tmall.promotag.taguser.remove",
            {
                "tag_id": tag_id,
                "nick": nick
            },
            result_processor=lambda x: x["is_success"]
        )

    def tmall_promotag_taguser_save(
            self,
            tag_id,
            nick
    ):
        """
        给用户打上优惠标签
        给用户载体打标
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21775

        :param tag_id: 标签ID
        :param nick: 买家昵称
        """
        return self._top_request(
            "tmall.promotag.taguser.save",
            {
                "tag_id": tag_id,
                "nick": nick
            },
            result_processor=lambda x: x["is_success"]
        )

    def tmall_promotag_tag_removetag(
            self,
            tag_id
    ):
        """
        删除标签定义
        用于删除标签定义，但是要确保目前该标签没有人群在使用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22224

        :param tag_id: 需要删除的标签id
        """
        return self._top_request(
            "tmall.promotag.tag.removetag",
            {
                "tag_id": tag_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotionmisc_item_activity_update(
            self,
            activity_id,
            name,
            participate_range,
            start_time,
            end_time,
            is_user_tag='false',
            user_tag='',
            is_decrease_money='false',
            decrease_amount='',
            is_discount='false',
            discount_rate=''
    ):
        """
        修改无条件单品优惠活动
        修改无条件单品优惠活动。<br/>1、该接口只修改活动基本信息和打折信息，如需要增加、删除参与该活动的商品，请调用taobao.promotionmisc.activity.range.add和taobao.promotionmisc.activity.range.remove接口。 <br/>2、使用该接口时需要同时把未做修改的字段值也传入。 <br/><br/>3、该接口受店铺最低折扣限制，如优惠不生效，请让卖家检查该优惠是否低于店铺的最低折扣设置。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22248

        :param activity_id: 活动id。
        :param name: 活动名称。
        :param participate_range: 活动范围：0表示全部参与； 1表示部分商品参与。
        :param start_time: 活动开始时间。
        :param end_time: 活动结束时间。
        :param is_user_tag: 是否指定用户标签。
        :param user_tag: 用户标签。当is_user_tag为true时，该值才有意义。
        :param is_decrease_money: 是否有减钱行为。
        :param decrease_amount: 减多少钱。当is_decrease_money为true时，该值才有意义。注意：该值单位为分，即100表示1元。
        :param is_discount: 是否有打折行为。
        :param discount_rate: 折扣值。当is_discount为true时，该值才有意义。注意：800表示8折。
        """
        return self._top_request(
            "taobao.promotionmisc.item.activity.update",
            {
                "activity_id": activity_id,
                "name": name,
                "participate_range": participate_range,
                "start_time": start_time,
                "end_time": end_time,
                "is_user_tag": is_user_tag,
                "user_tag": user_tag,
                "is_decrease_money": is_decrease_money,
                "decrease_amount": decrease_amount,
                "is_discount": is_discount,
                "discount_rate": discount_rate
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotionmisc_mjs_activity_add(
            self,
            name,
            type,
            participate_range,
            start_time,
            end_time,
            is_amount_over='false',
            total_price='',
            is_amount_multiple='false',
            is_item_count_over='false',
            item_count='',
            is_item_multiple='false',
            is_shop_member='false',
            shop_member_level='',
            is_user_tag='false',
            user_tag='',
            is_decrease_money='false',
            decrease_amount='',
            is_discount='false',
            discount_rate='',
            is_send_gift='false',
            gift_name='',
            gift_id='',
            gift_url='',
            is_free_post='false',
            exclude_area=''
    ):
        """
        创建满就送活动
        创建满就送活动。<br/>1、可以选择是全店参加或者部分商品参加：participate_range：0表示全部参与； 1表示部分商品参与。 2、如果是部分商品参加，则需要通过taobao.promotionmisc.activity.range.add接口来指定需要参加的商品。 3、该接口创建的优惠受店铺最低折扣限制，如优惠不生效，请让卖家检查该优惠是否低于店铺的最低折扣设置。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22249

        :param name: 活动名称。
        :param type: 活动类型： 1表示商品级别的活动；2表示店铺级别的活动
        :param participate_range: 活动范围：0表示全部参与； 1表示部分商品参与。
        :param start_time: 活动开始时间。
        :param end_time: 活动结束时间。
        :param is_amount_over: 是否有满元条件。
        :param total_price: 满多少元。当is_amount_over为true时，该才字段有意义。注意：单位是分，即10000表示100元。
        :param is_amount_multiple: 满元是否上不封顶。当is_amount_over为true时，该值才有意义。当该值为true时，表示满元上不封顶，例如满100元减10元，当满200时，则减20元。。。默认为false。
        :param is_item_count_over: 是否有满件条件。
        :param item_count: 满多少件。当is_item_count_over为true时，该值才有意义。
        :param is_item_multiple: 满件是否上不封顶。当is_amount_multiple为true时，该值才有意义。当该值为true时，表示满件上不封顶，例如满10件减2元，当满20件时，则减4元。。。 默认为false。
        :param is_shop_member: 是否有店铺会员等级条件。
        :param shop_member_level: 店铺会员等级，当is_shop_member为true时，该值才有意义。0：店铺客户；1：普通客户；2：高级会员；3：VIP会员； 4：至尊VIP会员。
        :param is_user_tag: 是否指定用户标签。
        :param user_tag: 用户标签。当is_user_tag为true时，该值才有意义。
        :param is_decrease_money: 是否有减钱行为。
        :param decrease_amount: 减多少钱。当is_decrease_money为true时，该值才有意义。注意：该值单位为分，即100表示1元。
        :param is_discount: 是否有打折行为。
        :param discount_rate: 折扣值。当is_discount为true时，该值才有意义。注意：800表示8折。
        :param is_send_gift: 是否有送礼品行为。
        :param gift_name: 礼品名称。当is_send_gift为true时，该值才有意义。
        :param gift_id: 礼品id，当is_send_gift为true时，该值才有意义。 1）只有填写真实的淘宝商品id时，才能生成物流单，并且在确定订单的页面上可以点击该商品名称跳转到商品详情页面。2）当礼物为实物商品时(有宝贝id),礼物必须为上架商品,不能为虚拟商品,不能为拍卖商品,不能有sku,不符合条件的,不做为礼物。
        :param gift_url: 商品详情的url，当is_send_gift为true时，该值才有效。
        :param is_free_post: 是否有免邮行为。
        :param exclude_area: 免邮的排除地区，即，除指定地区外，其他地区包邮。当is_free_post为true时，该值才有意义。代码使用*链接，代码为行政区划代码。
        """
        return self._top_request(
            "taobao.promotionmisc.mjs.activity.add",
            {
                "name": name,
                "type": type,
                "participate_range": participate_range,
                "start_time": start_time,
                "end_time": end_time,
                "is_amount_over": is_amount_over,
                "total_price": total_price,
                "is_amount_multiple": is_amount_multiple,
                "is_item_count_over": is_item_count_over,
                "item_count": item_count,
                "is_item_multiple": is_item_multiple,
                "is_shop_member": is_shop_member,
                "shop_member_level": shop_member_level,
                "is_user_tag": is_user_tag,
                "user_tag": user_tag,
                "is_decrease_money": is_decrease_money,
                "decrease_amount": decrease_amount,
                "is_discount": is_discount,
                "discount_rate": discount_rate,
                "is_send_gift": is_send_gift,
                "gift_name": gift_name,
                "gift_id": gift_id,
                "gift_url": gift_url,
                "is_free_post": is_free_post,
                "exclude_area": exclude_area
            }
        )

    def taobao_promotionmisc_mjs_activity_get(
            self,
            activity_id
    ):
        """
        查询满就送活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22250

        :param activity_id: 活动id。
        """
        return self._top_request(
            "taobao.promotionmisc.mjs.activity.get",
            {
                "activity_id": activity_id
            },
            result_processor=lambda x: x["mjs_promotion"]
        )

    def taobao_promotionmisc_activity_range_add(
            self,
            activity_id,
            ids
    ):
        """
        增加活动参与的商品
        增加活动参与的商品，部分商品参与的活动，最大支持指定150个商品。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22251

        :param activity_id: 活动id。
        :param ids: 商品id,多个id用逗号隔开，一次不超过50个。
        """
        return self._top_request(
            "taobao.promotionmisc.activity.range.add",
            {
                "activity_id": activity_id,
                "ids": ids
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotionmisc_activity_range_list_get(
            self,
            activity_id
    ):
        """
        查询活动参与的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22252

        :param activity_id: 活动id
        """
        return self._top_request(
            "taobao.promotionmisc.activity.range.list.get",
            {
                "activity_id": activity_id
            },
            result_processor=lambda x: x["promotion_range_list"]
        )

    def taobao_promotionmisc_activity_range_remove(
            self,
            activity_id,
            ids
    ):
        """
        去除活动参与的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22253

        :param activity_id: 活动id。
        :param ids: 商品id,多个id用逗号隔开。
        """
        return self._top_request(
            "taobao.promotionmisc.activity.range.remove",
            {
                "activity_id": activity_id,
                "ids": ids
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotionmisc_activity_range_all_remove(
            self,
            activity_id
    ):
        """
        清空活动参与的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22254

        :param activity_id: 活动id。
        """
        return self._top_request(
            "taobao.promotionmisc.activity.range.all.remove",
            {
                "activity_id": activity_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotionmisc_mjs_activity_list_get(
            self,
            activity_type,
            page_no,
            page_size
    ):
        """
        查询满就送活动列表
        查询满就送活动列表。注意，该接口的返回值中，只包含活动的主要信息，如activity_id，name，description，start_time，end_time，type，participate_range。优惠的详细信息，请通过taobao.promotionmisc.mjs.activity.get获取。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22255

        :param activity_type: 活动类型： 1表示商品级别的活动；2表示店铺级别的活动。
        :param page_no: 页码。
        :param page_size: 每页记录数，最大支持50 。
        """
        return self._top_request(
            "taobao.promotionmisc.mjs.activity.list.get",
            {
                "activity_type": activity_type,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_promotionmisc_mjs_activity_update(
            self,
            activity_id,
            name,
            participate_range,
            start_time,
            end_time,
            is_amount_over='false',
            total_price='',
            is_amount_multiple='false',
            is_item_count_over='false',
            item_count='',
            is_item_multiple='false',
            is_shop_member='false',
            shop_member_level='',
            is_user_tag='false',
            user_tag='',
            is_decrease_money='false',
            decrease_amount='',
            is_discount='false',
            discount_rate='',
            is_send_gift='false',
            gift_name='',
            gift_id='',
            gift_url='',
            is_free_post='false',
            exclude_area=''
    ):
        """
        修改满就送活动
        修改满就送活动。 <br/>1、该接口只修改活动基本信息和打折信息，如需要增加、删除参与该活动的商品，请调用taobao.promotionmisc.activity.range.add和taobao.promotionmisc.activity.range.remove接口。 <br/>2、使用该接口时需要同时把未做修改的字段值也传入。 <br/>3、该接口创建的优惠受店铺最低折扣限制，如优惠不生效，请让卖家检查该优惠是否低于店铺的最低折扣设置。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22256

        :param activity_id: 活动id。
        :param name: 活动名称。
        :param participate_range: 活动范围：0表示全部参与； 1表示部分商品参与。
        :param start_time: 活动开始时间。
        :param end_time: 活动结束时间。
        :param is_amount_over: 是否有满元条件。
        :param total_price: 满多少元。当is_amount_over为true时，该才字段有意义。注意：单位是分，即10000表示100元。
        :param is_amount_multiple: 满元是否上不封顶。当is_amount_over为true时，该值才有意义。当该值为true时，表示满元上不封顶，例如满100元减10元，当满200时，则减20元。。。默认为false。
        :param is_item_count_over: 是否有满件条件。
        :param item_count: 满多少件。当is_item_count_over为true时，该值才有意义。
        :param is_item_multiple: 满件是否上不封顶。当is_amount_multiple为true时，该值才有意义。当该值为true时，表示满件上不封顶，例如满10件减2元，当满20件时，则减4元。。。 默认为false。
        :param is_shop_member: 是否有店铺会员等级条件。
        :param shop_member_level: 店铺会员等级，当is_shop_member为true时，该值才有意义。0：店铺客户；1：普通客户；2：高级会员；3：VIP会员； 4：至尊VIP会员。
        :param is_user_tag: 是否指定用户标签。
        :param user_tag: 用户标签。当is_user_tag为true时，该值才有意义。
        :param is_decrease_money: 是否有减钱行为。
        :param decrease_amount: 减多少钱。当is_decrease_money为true时，该值才有意义。注意：该值单位为分，即100表示1元。
        :param is_discount: 是否有打折行为。
        :param discount_rate: 折扣值。当is_discount为true时，该值才有意义。注意：800表示8折。
        :param is_send_gift: 是否有送礼品行为。
        :param gift_name: 礼品名称。当is_send_gift为true时，该值才有意义。
        :param gift_id: 礼品id，当is_send_gift为true时，该值才有意义。 1）只有填写真实的淘宝商品id时，才能生成物流单，并且在确定订单的页面上可以点击该商品名称跳转到商品详情页面。2）当礼物为实物商品时(有宝贝id),礼物必须为上架商品,不能为虚拟商品,不能为拍卖商品,不能有sku,不符合条件的,不做为礼物。
        :param gift_url: 商品详情的url，当is_send_gift为true时，该值才有效。
        :param is_free_post: 是否有免邮行为。
        :param exclude_area: 免邮的排除地区，即，除指定地区外，其他地区包邮。当is_free_post为true时，该值才有意义。代码使用*链接，代码为行政区划代码。
        """
        return self._top_request(
            "taobao.promotionmisc.mjs.activity.update",
            {
                "activity_id": activity_id,
                "name": name,
                "participate_range": participate_range,
                "start_time": start_time,
                "end_time": end_time,
                "is_amount_over": is_amount_over,
                "total_price": total_price,
                "is_amount_multiple": is_amount_multiple,
                "is_item_count_over": is_item_count_over,
                "item_count": item_count,
                "is_item_multiple": is_item_multiple,
                "is_shop_member": is_shop_member,
                "shop_member_level": shop_member_level,
                "is_user_tag": is_user_tag,
                "user_tag": user_tag,
                "is_decrease_money": is_decrease_money,
                "decrease_amount": decrease_amount,
                "is_discount": is_discount,
                "discount_rate": discount_rate,
                "is_send_gift": is_send_gift,
                "gift_name": gift_name,
                "gift_id": gift_id,
                "gift_url": gift_url,
                "is_free_post": is_free_post,
                "exclude_area": exclude_area
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotionmisc_mjs_activity_delete(
            self,
            activity_id
    ):
        """
        删除满就送活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22257

        :param activity_id: 活动id。
        """
        return self._top_request(
            "taobao.promotionmisc.mjs.activity.delete",
            {
                "activity_id": activity_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotionmisc_item_activity_add(
            self,
            name,
            participate_range,
            start_time,
            end_time,
            is_user_tag='false',
            user_tag='',
            is_decrease_money='false',
            decrease_amount='',
            is_discount='false',
            discount_rate=''
    ):
        """
        创建无条件单品优惠活动
        创建无条件单品优惠活动。1、可以选择是全店参加或者部分商品参加：participate_range：0表示全部参与； 1表示部分商品参与。<br/>2、如果是部分商品参加，则需要通过taobao.promotionmisc.activity.range.add接口来指定需要参加的商品。<br/>3、该接口创建的优惠受店铺最低折扣限制，如优惠不生效，请让卖家检查该优惠是否低于店铺的最低折扣设置。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22258

        :param name: 活动名称，超过5个汉字时，商品详情中显示的优惠名称为：卖家优惠。
        :param participate_range: 活动范围：0表示全部参与； 1表示部分商品参与。
        :param start_time: 活动开始时间。
        :param end_time: 活动结束时间。
        :param is_user_tag: 是否指定用户标签。
        :param user_tag: 用户标签。当is_user_tag为true时，该值才有意义。
        :param is_decrease_money: 是否有减钱行为。
        :param decrease_amount: 减多少钱。当is_decrease_money为true时，该值才有意义。注意：该值单位为分，即100表示1元。
        :param is_discount: 是否有打折行为。
        :param discount_rate: 折扣值。当is_discount为true时，该值才有意义。注意：800表示8折。
        """
        return self._top_request(
            "taobao.promotionmisc.item.activity.add",
            {
                "name": name,
                "participate_range": participate_range,
                "start_time": start_time,
                "end_time": end_time,
                "is_user_tag": is_user_tag,
                "user_tag": user_tag,
                "is_decrease_money": is_decrease_money,
                "decrease_amount": decrease_amount,
                "is_discount": is_discount,
                "discount_rate": discount_rate
            }
        )

    def taobao_promotionmisc_item_activity_get(
            self,
            activity_id
    ):
        """
        查询无条件单品优惠活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22259

        :param activity_id: 活动id。
        """
        return self._top_request(
            "taobao.promotionmisc.item.activity.get",
            {
                "activity_id": activity_id
            },
            result_processor=lambda x: x["item_promotion"]
        )

    def taobao_promotionmisc_item_activity_list_get(
            self,
            page_no,
            page_size
    ):
        """
        查询无条件单品优惠活动列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22260

        :param page_no: 页码。
        :param page_size: 每页记录数，最大支持50 。
        """
        return self._top_request(
            "taobao.promotionmisc.item.activity.list.get",
            {
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_promotionmisc_item_activity_delete(
            self,
            activity_id
    ):
        """
        删除无条件单品优惠活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22261

        :param activity_id: 活动id。
        """
        return self._top_request(
            "taobao.promotionmisc.item.activity.delete",
            {
                "activity_id": activity_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_ump_shoutaotag_add(
            self,
            item_id,
            buyer_id,
            channel_key
    ):
        """
        手淘定向优惠打标接口
        手淘定向优惠的优惠标签打标接口
        给特定的手淘买家打上优惠标记，标记承载在自己的业务标签库中，标签有效期为7天。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24886

        :param item_id: 商品ID
        :param buyer_id: 买家ID
        :param channel_key: 渠道KEY
        """
        return self._top_request(
            "taobao.ump.shoutaotag.add",
            {
                "item_id": item_id,
                "buyer_id": buyer_id,
                "channel_key": channel_key
            },
            result_processor=lambda x: x["add_result"]
        )

    def tmall_promotion_tip_campaign_remove(
            self,
            campaign_id
    ):
        """
        天猫特价宝删除活动接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        天猫特价宝删除活动接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25073

        :param campaign_id: 要删除的活动ID
        """
        return self._top_request(
            "tmall.promotion.tip.campaign.remove",
            {
                "campaign_id": campaign_id
            },
            result_processor=lambda x: x["remove_rst"]
        )

    def tmall_promotion_tip_item_remove(
            self,
            item_id,
            campaign_id
    ):
        """
        天猫特价宝删除活动商品
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        天猫特价宝删除活动商品。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25074

        :param item_id: 商品id
        :param campaign_id: 活动id
        """
        return self._top_request(
            "tmall.promotion.tip.item.remove",
            {
                "item_id": item_id,
                "campaign_id": campaign_id
            },
            result_processor=lambda x: x["remove_rst"]
        )

    def tmall_promotion_tip_item_adds(
            self,
            item_proms
    ):
        """
        天猫特价宝批量添加商品
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25075

        :param item_proms: 商品优惠参数
        """
        return self._top_request(
            "tmall.promotion.tip.item.adds",
            {
                "item_proms": item_proms
            },
            result_processor=lambda x: x["adds_rst"]
        )

    def tmall_promotion_tip_item_modify(
            self,
            item_prom
    ):
        """
        天猫特价宝修改商品优惠
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        天猫特价宝修改商品优惠。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25078

        :param item_prom: 商品优惠参数
        """
        return self._top_request(
            "tmall.promotion.tip.item.modify",
            {
                "item_prom": item_prom
            },
            result_processor=lambda x: x["modify_rst"]
        )

    def tmall_promotion_tip_campaign_modify(
            self,
            campaign
    ):
        """
        天猫营销修改活动
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        天猫营销活动修改接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25079

        :param campaign: 天猫单品活动对象
        """
        return self._top_request(
            "tmall.promotion.tip.campaign.modify",
            {
                "campaign": campaign
            },
            result_processor=lambda x: x["modify_rst"]
        )

    def tmall_promotion_tip_campaign_create(
            self,
            campaign
    ):
        """
        天猫营销创建活动接口
        天猫营销创建活动接口。开放给KA商家进行系统对接，创建优惠促销活动。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25080

        :param campaign: 天猫单品活动对象
        """
        return self._top_request(
            "tmall.promotion.tip.campaign.create",
            {
                "campaign": campaign
            },
            result_processor=lambda x: x["campaign_id"]
        )

    def tmall_promotion_tip_item_modifys(
            self,
            item_proms
    ):
        """
        天猫特价宝批量修改商品优惠
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        天猫特价宝批量修改商品优惠。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25081

        :param item_proms: 商品优惠参数
        """
        return self._top_request(
            "tmall.promotion.tip.item.modifys",
            {
                "item_proms": item_proms
            },
            result_processor=lambda x: x["modifys_rst"]
        )

    def tmall_promotion_tip_item_add(
            self,
            item_prom
    ):
        """
        天猫特价宝添加活动商品
        天猫特价宝添加活动商品优惠。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25082

        :param item_prom: 商品优惠参数
        """
        return self._top_request(
            "tmall.promotion.tip.item.add",
            {
                "item_prom": item_prom
            },
            result_processor=lambda x: x["add_rst"]
        )

    def tmall_promotion_item_promotion_get(
            self,
            page,
            campaign_id,
            pagesize='0',
            brand_id='0'
    ):
        """
        天猫特价宝查询某个活动下面的单品优惠信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        天猫特价宝，根据活动ID，查询某个活动下面的单品优惠信息，需要进行分页查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25093

        :param page: 查询页码
        :param campaign_id: 活动id
        :param pagesize: 每页大小，[0,100]
        :param brand_id: 品牌ID
        """
        return self._top_request(
            "tmall.promotion.item.promotion.get",
            {
                "page": page,
                "campaign_id": campaign_id,
                "pagesize": pagesize,
                "brand_id": brand_id
            },
            result_processor=lambda x: x["tjb_item_prom_rst"]
        )

    def tmall_promotion_tjb_campaign_get(
            self,
            query_start,
            query_end,
            campaign_id='0',
            page_num='1'
    ):
        """
        天猫特价宝活动获取接口
        美的提的需求，获取美的品牌的特价宝优惠
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25094

        :param query_start: 优惠时段：开始时间
        :param query_end: 优惠时段：结束时间
        :param campaign_id: 活动ID
        :param page_num: 查询页码
        """
        return self._top_request(
            "tmall.promotion.tjb.campaign.get",
            {
                "query_start": query_start,
                "query_end": query_end,
                "campaign_id": campaign_id,
                "page_num": page_num
            },
            result_processor=lambda x: x["tjb_campaign_rst"]
        )

    def taobao_promotion_benefit_activity_delete(
            self,
            relation_id
    ):
        """
        删除关联的活动权益
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25171

        :param relation_id: ISV活动关联权益后获得的关联ID
        """
        return self._top_request(
            "taobao.promotion.benefit.activity.delete",
            {
                "relation_id": relation_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotion_benefit_activity_send(
            self,
            send_request,
            receiver_id='',
            nick='',
            plat_nick='',
            mix_receiver_id=''
    ):
        """
        活动权益发放接口
        活动权益发放接口，用于卖家针对活动进行权益发放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25193

        :param send_request: 单个权益发放请求
        :param receiver_id: 非混淆的接收者id
        :param nick: 混淆的接收者nick
        :param plat_nick: 非混淆的接收者nick
        :param mix_receiver_id: 混淆的接收者id
        """
        return self._top_request(
            "taobao.promotion.benefit.activity.send",
            {
                "send_request": send_request,
                "receiver_id": receiver_id,
                "nick": nick,
                "plat_nick": plat_nick,
                "mix_receiver_id": mix_receiver_id
            }
        )

    def taobao_mobile_promotion_benefit_activity_send(
            self,
            single_benefit_request
    ):
        """
        手淘专用单用户发放接口
        卖家活动中需要通过该API来发放对应的权益。手淘专用单用户发放接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25194

        :param single_benefit_request: 单用户权益发放请求
        """
        return self._top_request(
            "taobao.mobile.promotion.benefit.activity.send",
            {
                "single_benefit_request": single_benefit_request
            },
            result_processor=lambda x: x["send_result"]
        )

    def taobao_promotion_benefit_selector(
            self,
            query
    ):
        """
        权益选择器接口
        权益选择器，查询用户已有权益，提供用户进行已拥有权益的选择操作，权益发放的前置操作
        1、目前top的接口只开了1，4，13，14 四种权益, 支付宝红包--1；流量钱包--4；优酷会员--13；彩票-- 14<br/>
        2、目前只有'支付宝红包'有'benefit_type': 'ALIPAY_COUPON',其它三个没有benefit_type   <br/>
        3、接口文档中写的 优酷会员卡--2 写错了，正确的是13（已接口返回为准）<br/>
        4、step=2用config_id查，即1，4，13，14  <br/>
        5、step=3权益id指具体采购的权益id，可以认为是采购的主键（权益id 可以通过step=2 获得 ）  <br/>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25195

        :param query: 权益选择器请求
        """
        return self._top_request(
            "taobao.promotion.benefit.selector",
            {
                "query": query
            }
        )

    def taobao_promotion_benefit_activity_update(
            self,
            update_request
    ):
        """
        修改关联的活动权益
        修改卖家活动中关联的对应的权益。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25203

        :param update_request: 修改关联的权益的活动请求
        """
        return self._top_request(
            "taobao.promotion.benefit.activity.update",
            {
                "update_request": update_request
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotion_benefit_activity_relation(
            self,
            relation_request
    ):
        """
        关联活动权益
        卖家活动中需要通过该API来关联的对应的权益。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25204

        :param relation_request: 活动关联权益请求参数
        """
        return self._top_request(
            "taobao.promotion.benefit.activity.relation",
            {
                "relation_request": relation_request
            }
        )

    def taobao_promotion_benefit_activity_time_update(
            self,
            relation_id,
            start_time,
            end_time
    ):
        """
        更新关联活动有效时间
        更新关联权益的活动有效时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25205

        :param relation_id: ISV活动关联权益后获得的关联ID
        :param start_time: 活动的开始时间
        :param end_time: 活动的i结束时间
        """
        return self._top_request(
            "taobao.promotion.benefit.activity.time.update",
            {
                "relation_id": relation_id,
                "start_time": start_time,
                "end_time": end_time
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotion_benefit_activity_detail_get(
            self,
            query_request
    ):
        """
        活动关联的权益详情获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25206

        :param query_request: 查询活动关联权益详情的请求
        """
        return self._top_request(
            "taobao.promotion.benefit.activity.detail.get",
            {
                "query_request": query_request
            }
        )

    def taobao_promotion_coupon_seller_search(
            self,
            seller_nick='',
            current_page='1',
            page_size='20',
            spread_ids=''
    ):
        """
        查询绑定卖家优惠券相关信息
        查询绑定卖家相关优惠券信息  如isv  百川 等外部业务方
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25239

        :param seller_nick: 卖家昵称
        :param current_page: 当前第几页  从第一页开始
        :param page_size: 每页数据 最大20左右
        :param spread_ids: 券id集合
        """
        return self._top_request(
            "taobao.promotion.coupon.seller.search",
            {
                "seller_nick": seller_nick,
                "current_page": current_page,
                "page_size": page_size,
                "spread_ids": spread_ids
            }
        )

    def taobao_promotion_coupon_apply(
            self,
            seller_id,
            spread_id
    ):
        """
        优惠券领取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25253

        :param seller_id: 卖家id
        :param spread_id: 传播id
        """
        return self._top_request(
            "taobao.promotion.coupon.apply",
            {
                "seller_id": seller_id,
                "spread_id": spread_id
            }
        )

    def taobao_mobile_promotion_benefit_activity_send_share(
            self,
            benefit_type,
            biz_id,
            detail_id,
            feed_id,
            relation_id,
            send_count,
            trace_id,
            unique_id,
            share_key='',
            share_users=''
    ):
        """
        手淘专用单用户发放接口
        卖家活动中需要通过该API来发放对应的权益。手淘专用、验证分享链路。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25732

        :param benefit_type: 权益类型    其中ALIPAY_COUPON 对应的type值是1
        :param biz_id: 权益关联的活动ID
        :param detail_id: 活动详情id
        :param feed_id: 广播ID
        :param relation_id: 关联活动id
        :param send_count: 权益发放数量
        :param trace_id: 调试线索
        :param unique_id: 事务id
        :param share_key: 和bizId一起使用，标记分享链路的key。
        :param share_users: 分享链路上的用户及用户是否发奖，u1_true,u2_true
        """
        return self._top_request(
            "taobao.mobile.promotion.benefit.activity.send.share",
            {
                "benefit_type": benefit_type,
                "biz_id": biz_id,
                "detail_id": detail_id,
                "feed_id": feed_id,
                "relation_id": relation_id,
                "send_count": send_count,
                "trace_id": trace_id,
                "unique_id": unique_id,
                "share_key": share_key,
                "share_users": share_users
            },
            result_processor=lambda x: x["send_result"]
        )

    def taobao_promotionmisc_common_item_detail_list_get(
            self,
            activity_id,
            page_no,
            page_size
    ):
        """
        查询通用单品优惠详情列表
        查询通用单品优惠详情列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25847

        :param activity_id: 优惠活动ID
        :param page_no: 分页页码，页码从1开始
        :param page_size: 分页大小，不能超过50
        """
        return self._top_request(
            "taobao.promotionmisc.common.item.detail.list.get",
            {
                "activity_id": activity_id,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_promotionmisc_common_item_detail_get(
            self,
            activity_id,
            detail_id
    ):
        """
        查询通用单品优惠详情
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询通用单品优惠详情。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25848

        :param activity_id: 优惠活动ID
        :param detail_id: 优惠详情ID
        """
        return self._top_request(
            "taobao.promotionmisc.common.item.detail.get",
            {
                "activity_id": activity_id,
                "detail_id": detail_id
            }
        )

    def taobao_promotionmisc_common_item_activity_add(
            self,
            name,
            description,
            start_time,
            end_time,
            is_user_tag='false',
            user_tag=''
    ):
        """
        创建通用单品优惠活动
        创建通用单品优惠活动。
        1、该接口只创建活动的基本信息，如需要增加、删除参与该活动的商品及优惠，请调用taobao.promotionmisc.common.item.detail.add和taobao.promotionmisc.common.item.detail.delete接口
        2、同一卖家下的活动数量限制为30个，超过限制需先调用taobao.promotionmisc.common.item.activity.delete接口删除无用的活动后才可再创建新的活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25849

        :param name: 活动名称，不能超过32字符
        :param description: 活动描述，不能超过100字符
        :param start_time: 活动开始时间
        :param end_time: 活动结束时间
        :param is_user_tag: 是否指定人群标签
        :param user_tag: 用户标签。当is_user_tag为true时，该值才有意义。
        """
        return self._top_request(
            "taobao.promotionmisc.common.item.activity.add",
            {
                "name": name,
                "description": description,
                "start_time": start_time,
                "end_time": end_time,
                "is_user_tag": is_user_tag,
                "user_tag": user_tag
            }
        )

    def taobao_promotionmisc_common_item_detail_delete(
            self,
            activity_id,
            detail_id
    ):
        """
        删除通用单品优惠详情
        删除通用单品优惠详情。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25850

        :param activity_id: 优惠活动ID
        :param detail_id: 优惠详情ID
        """
        return self._top_request(
            "taobao.promotionmisc.common.item.detail.delete",
            {
                "activity_id": activity_id,
                "detail_id": detail_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotionmisc_common_item_detail_update(
            self,
            activity_id,
            detail_id,
            item_id,
            promotion_type,
            promotion_value
    ):
        """
        修改通用单品优惠详情
        修改通用单品优惠详情。
        1、该接口只修改活动下参与的商品的优惠信息，如需要增加、删除活动，请调用taobao.promotionmisc.common.item.activity.add和taobao.promotionmisc.common.item.activity.delete接口；
        2、使用该接口时需要把未做修改的字段值也传入；
        3、此接口受卖家最低折扣限制，如果优惠力度大于卖家设置的最低折扣则不能修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25851

        :param activity_id: 优惠活动ID
        :param detail_id: 优惠详情ID
        :param item_id: 商品ID
        :param promotion_type: 优惠类型，只有两种可选值：0-减钱；1-打折
        :param promotion_value: 优惠力度，其值的解释方式由promotion_type定义：当为减钱时解释成减钱数量，如：900表示减9元；当为打折时解释成打折折扣，如：900表示打9折
        """
        return self._top_request(
            "taobao.promotionmisc.common.item.detail.update",
            {
                "activity_id": activity_id,
                "detail_id": detail_id,
                "item_id": item_id,
                "promotion_type": promotion_type,
                "promotion_value": promotion_value
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotionmisc_common_item_detail_add(
            self,
            activity_id,
            item_id,
            promotion_type,
            promotion_value
    ):
        """
        创建通用单品优惠详情
        创建通用单品优惠详情。
        1、使用此接口在指定的优惠活动下创建参与的商品的优惠信息，如还未创建活动，需要先使用接口taobao.promotionmisc.common.item.activity.add创建优惠活动；
        2、同一卖家同一活动下的优惠详情数量限制为150个，超过限制需先调用taobao.promotionmisc.common.item.detail.delete接口删除无用的详情后才可再创建新的优惠详情；
        3、此接口受卖家最低折扣限制，如果优惠力度大于卖家设置的最低折扣则不能创建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25852

        :param activity_id: 优惠活动ID
        :param item_id: 商品ID
        :param promotion_type: 优惠类型，只有两种可选值：0-减钱；1-打折
        :param promotion_value: 优惠力度，其值的解释方式由promotion_type定义：当为减钱时解释成减钱数量，如：900表示减9元；当为打折时解释成打折折扣，如：900表示打9折
        """
        return self._top_request(
            "taobao.promotionmisc.common.item.detail.add",
            {
                "activity_id": activity_id,
                "item_id": item_id,
                "promotion_type": promotion_type,
                "promotion_value": promotion_value
            }
        )

    def taobao_promotionmisc_common_item_activity_list_get(
            self,
            page_no,
            page_size
    ):
        """
        查询通用单品优惠活动列表
        查询通用单品优惠活动列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25857

        :param page_no: 分页页码，页码从1开始
        :param page_size: 分页大小，不能超过50
        """
        return self._top_request(
            "taobao.promotionmisc.common.item.activity.list.get",
            {
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_promotionmisc_common_item_activity_get(
            self,
            activity_id
    ):
        """
        查询通用单品优惠活动
        查询通用单品优惠活动。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25858

        :param activity_id: 优惠活动ID
        """
        return self._top_request(
            "taobao.promotionmisc.common.item.activity.get",
            {
                "activity_id": activity_id
            }
        )

    def taobao_promotionmisc_common_item_activity_delete(
            self,
            activity_id
    ):
        """
        删除通用单品优惠活动
        删除通用单品优惠活动。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25860

        :param activity_id: 优惠活动ID
        """
        return self._top_request(
            "taobao.promotionmisc.common.item.activity.delete",
            {
                "activity_id": activity_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_promotionmisc_common_item_activity_update(
            self,
            activity_id,
            name,
            description,
            start_time,
            end_time,
            is_user_tag='false',
            user_tag=''
    ):
        """
        修改通用单品优惠活动
        修改通用单品优惠活动。
        1、该接口只修改活动基本信息，如需要增加、删除参与该活动的商品及优惠，请调用taobao.promotionmisc.common.item.detail.add和taobao.promotionmisc.common.item.detail.delete接口
        2、使用该接口时需要把未做修改的字段值也传入
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25861

        :param activity_id: 优惠活动ID
        :param name: 活动名称，不能超过32字符
        :param description: 活动描述，不能超过100字符
        :param start_time: 活动开始时间
        :param end_time: 活动结束时间
        :param is_user_tag: 是否指定人群标签
        :param user_tag: 用户标签。当is_user_tag为true时，该值才有意义。
        """
        return self._top_request(
            "taobao.promotionmisc.common.item.activity.update",
            {
                "activity_id": activity_id,
                "name": name,
                "description": description,
                "start_time": start_time,
                "end_time": end_time,
                "is_user_tag": is_user_tag,
                "user_tag": user_tag
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_mobile_promotion_coupon_seller_search(
            self,
            trace_id='',
            spread_ids='',
            page_size='',
            current_page=''
    ):
        """
        查询绑定卖家优惠券相关信息(手淘专用)
        查询绑定卖家相关优惠券信息 如isv 百川 等外部业务方
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25902

        :param trace_id: 请求id 排查线索 需保证单次调用唯一
        :param spread_ids: 券id集合
        :param page_size: 每页数据 最大20左右
        :param current_page: 当前第几页 从第一页开始
        """
        return self._top_request(
            "taobao.mobile.promotion.coupon.seller.search",
            {
                "trace_id": trace_id,
                "spread_ids": spread_ids,
                "page_size": page_size,
                "current_page": current_page
            },
            result_processor=lambda x: x["coupon_search_result"]
        )

    def taobao_mobile_promotion_coupon_apply(
            self,
            trace_id,
            spread_id,
            feed_id,
            biz_id
    ):
        """
        优惠券领取(手淘专用)
        优惠券领取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25903

        :param trace_id: 请求唯一id，问题排查
        :param spread_id: 传播id
        :param feed_id: 广播id
        :param biz_id: 三方活动id
        """
        return self._top_request(
            "taobao.mobile.promotion.coupon.apply",
            {
                "trace_id": trace_id,
                "spread_id": spread_id,
                "feed_id": feed_id,
                "biz_id": biz_id
            },
            result_processor=lambda x: x["coupon_apply_result"]
        )

    def alibaba_interact_lotterydraw_dodraw(
            self,
            lottery_draw_query
    ):
        """
        无线端抽奖接口
        商家抽奖平台无线端抽奖接口开放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28513

        :param lottery_draw_query: 抽奖请求对象
        """
        return self._top_request(
            "alibaba.interact.lotterydraw.dodraw",
            {
                "lottery_draw_query": lottery_draw_query
            }
        )

    def alibaba_marketing_lottery_activity_query(
            self,
            lottery_activity_query
    ):
        """
        抽奖平台奖池查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28525

        :param lottery_activity_query: 查询抽奖活动请求对象
        """
        return self._top_request(
            "alibaba.marketing.lottery.activity.query",
            {
                "lottery_activity_query": lottery_activity_query
            }
        )

    def alibaba_marketing_lottery_activity_bind(
            self,
            lottery_activity_rel
    ):
        """
        抽奖平台奖池绑定接口
        抽奖平台奖池关联接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28526

        :param lottery_activity_rel: 关联抽奖活动请求对象
        """
        return self._top_request(
            "alibaba.marketing.lottery.activity.bind",
            {
                "lottery_activity_rel": lottery_activity_rel
            }
        )

    def alibaba_marketing_lottery_draw_dodraw(
            self,
            lottery_draw_query
    ):
        """
        抽奖平台抽奖接口
        抽奖平台PC端抽奖接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28527

        :param lottery_draw_query: 抽奖请求对象
        """
        return self._top_request(
            "alibaba.marketing.lottery.draw.dodraw",
            {
                "lottery_draw_query": lottery_draw_query
            }
        )

    def alibaba_marketing_lottery_activity_create(
            self,
            lottery_activity_create
    ):
        """
        抽奖平台奖池创建接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28528

        :param lottery_activity_create: 抽奖活动创建请求对象
        """
        return self._top_request(
            "alibaba.marketing.lottery.activity.create",
            {
                "lottery_activity_create": lottery_activity_create
            }
        )

    def alibaba_marketing_lottery_activity_unbind(
            self,
            lottery_activity_rel
    ):
        """
        抽奖平台奖池解绑接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28529

        :param lottery_activity_rel: 解绑抽奖活动请求对象
        """
        return self._top_request(
            "alibaba.marketing.lottery.activity.unbind",
            {
                "lottery_activity_rel": lottery_activity_rel
            }
        )

    def alibaba_marketing_lottery_activity_delete(
            self,
            lottery_activity_delete
    ):
        """
        抽奖平台活动删除接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28530

        :param lottery_activity_delete: 抽奖活动删除对象
        """
        return self._top_request(
            "alibaba.marketing.lottery.activity.delete",
            {
                "lottery_activity_delete": lottery_activity_delete
            }
        )

    def alibaba_marketing_lottery_award_query(
            self,
            lottery_award_inst_query
    ):
        """
        抽奖平台查询可用奖品接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28534

        :param lottery_award_inst_query: 查询奖品请求对象
        """
        return self._top_request(
            "alibaba.marketing.lottery.award.query",
            {
                "lottery_award_inst_query": lottery_award_inst_query
            }
        )

    def alibaba_marketing_lottery_award_append(
            self,
            lottery_award_append
    ):
        """
        抽奖平台奖品添加接口
        抽奖平台奖品添加接口，目前仅用于奖池众筹项目
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28990

        :param lottery_award_append: 奖品添加请求对象
        """
        return self._top_request(
            "alibaba.marketing.lottery.award.append",
            {
                "lottery_award_append": lottery_award_append
            }
        )

    def alibaba_marketing_lottery_schema_create(
            self,
            lottery_schema_create
    ):
        """
        抽奖平台抽奖方案创建接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29025

        :param lottery_schema_create: 创建抽奖方案请求对象
        """
        return self._top_request(
            "alibaba.marketing.lottery.schema.create",
            {
                "lottery_schema_create": lottery_schema_create
            }
        )

    def alibaba_marketing_lottery_rule_save(
            self,
            lottery_rule_create
    ):
        """
        抽奖平台抽奖规则保存接口
        抽奖平台抽奖规则保存接口，对于同一主体，保存新规则会失效老的规则
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29026

        :param lottery_rule_create: 抽奖规则保存请求对象
        """
        return self._top_request(
            "alibaba.marketing.lottery.rule.save",
            {
                "lottery_rule_create": lottery_rule_create
            }
        )

    def alibaba_wdk_marketing_coupon_sendma(
            self,
            param0
    ):
        """
        发放匿名码
        根据优惠券活动id打印单个匿名码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36399

        :param param0: 发放匿名码入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.coupon.sendma",
            {
                "param0": param0
            }
        )

    def tmall_promotion_coupon_use(
            self,
            extra='',
            biz_type='',
            buyer_id='',
            buyer_nick='',
            seller_id='',
            coupon_id=''
    ):
        """
        券核销接口
        核销用户的一张优惠券，返回核销结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38483

        :param extra: 扩展字段
        :param biz_type: 业务类型
        :param buyer_id: buyer_id、buyer_nick至少填一个， 都填写以id为准
        :param buyer_nick: buyer_id、buyer_nick至少填一个， 都填写以id为准
        :param seller_id: 商家id
        :param coupon_id: 优惠券id
        """
        return self._top_request(
            "tmall.promotion.coupon.use",
            {
                "extra": extra,
                "biz_type": biz_type,
                "buyer_id": buyer_id,
                "buyer_nick": buyer_nick,
                "seller_id": seller_id,
                "coupon_id": coupon_id
            }
        )

    def tmall_promotion_coupon_query(
            self,
            biz_type,
            buyer_id='',
            buyer_nick=''
    ):
        """
        查询可用优惠券列表
        查询用户的可用优惠券列表，仅包含优惠券基本信息和用户nick
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38496

        :param biz_type: 业务类型
        :param buyer_id: buyer_id、buyer_nick至少填一个， 都填写以id为准
        :param buyer_nick: buyer_id、buyer_nick至少填一个， 都填写以id为准
        """
        return self._top_request(
            "tmall.promotion.coupon.query",
            {
                "biz_type": biz_type,
                "buyer_id": buyer_id,
                "buyer_nick": buyer_nick
            }
        )

    def tmall_promotion_coupon_user(
            self,
            biz_type='',
            pay_code='',
            extra=''
    ):
        """
        用户信息查询接口
        开发给外部合作商（例如：苏宁），通过会员付款码获得会员nick
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38606

        :param biz_type: 例如：suning
        :param pay_code: 会员付款码
        :param extra: 扩展字段
        """
        return self._top_request(
            "tmall.promotion.coupon.user",
            {
                "biz_type": biz_type,
                "pay_code": pay_code,
                "extra": extra
            }
        )

    def taobao_ump_promotion_global_discount_get(
            self
    ):
        """
        获取卖家最低折扣
        提供卖家最低折扣查询功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38626

        """
        return self._top_request(
            "taobao.ump.promotion.global.discount.get"
        )

    def tmall_seiya_unline_launch(
            self,
            params
    ):
        """
        seiya线下货品投放接口
        seiya线下第三方合作终端货品投放接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40652

        :param params: 投放请求参数
        """
        return self._top_request(
            "tmall.seiya.unline.launch",
            {
                "params": params
            }
        )

    def tmall_seiya_launch_monitor(
            self,
            task_id,
            asset_code,
            biz_id,
            model_ids,
            time,
            extend=''
    ):
        """
        天猫品牌营销线下广告监播上报接口
        天猫品牌营销线下投放广告监播上报接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41906

        :param task_id: 投放任务id，每个业务方分配一个
        :param asset_code: 终端编号
        :param biz_id: 业务id
        :param model_ids: 投放物料id集合多个逗号分隔
        :param time: 终端拉取投放物料时间戳,毫秒
        :param extend: 扩展信息
        """
        return self._top_request(
            "tmall.seiya.launch.monitor",
            {
                "task_id": task_id,
                "asset_code": asset_code,
                "biz_id": biz_id,
                "model_ids": model_ids,
                "time": time,
                "extend": extend
            }
        )

    def tmall_seiya_unline_failover_launch(
            self,
            show_id,
            terminal_id,
            longitude,
            latitude,
            labels=''
    ):
        """
        seiya线下投放容灾接口
        seiya线下第三方合作终端货品投放接口(带容灾能力)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42598

        :param show_id: 投放展示id
        :param terminal_id: 下线终端id
        :param longitude: 经度
        :param latitude: 纬度
        :param labels: 标签
        """
        return self._top_request(
            "tmall.seiya.unline.failover.launch",
            {
                "show_id": show_id,
                "terminal_id": terminal_id,
                "longitude": longitude,
                "latitude": latitude,
                "labels": labels
            },
            result_processor=lambda x: x["result_list"]
        )

    def tmall_seiya_underline_upload(
            self,
            asset_code,
            exposur_count,
            pick_count,
            date
    ):
        """
        seiya线下三方合作商上报数据接口
        seiya线下三方合作商上报数据接口，比如曝光数、取件数等等，只写接口，无读取数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42984

        :param asset_code: 机柜编码
        :param exposur_count: 曝光次数
        :param pick_count: 取件次数
        :param date: 日期（YYYYMMDD）
        """
        return self._top_request(
            "tmall.seiya.underline.upload",
            {
                "asset_code": asset_code,
                "exposur_count": exposur_count,
                "pick_count": pick_count,
                "date": date
            }
        )

    def tmall_seiya_click_report(
            self,
            task_id,
            asset_code,
            screen_count,
            model_id,
            model_type,
            click_time
    ):
        """
        天猫来店业务三方广告公司点击上报接口
        天猫来店业务三方广告公司线下点位用户互动点击上报接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43340

        :param task_id: 广告所属投放任务id(广告体taskId属性)
        :param asset_code: 机柜id
        :param screen_count: 第几屏点击
        :param model_id: 广告id（itemid）
        :param model_type: 广告类型
        :param click_time: 终端发生点击时间戳(单位毫秒)
        """
        return self._top_request(
            "tmall.seiya.click.report",
            {
                "task_id": task_id,
                "asset_code": asset_code,
                "screen_count": screen_count,
                "model_id": model_id,
                "model_type": model_type,
                "click_time": click_time
            }
        )


class TbShuJu(DingTalkBaseAPI):
    """
    数据API
    """

    def yunos_datatech_opendata_get(
            self,
            context=None,
            rdam_request=None
    ):
        """
        YunOS服务平台数据获取通用接口
        可以通过此接口拿到yunos服务平台对外提供的聚合数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27508

        :param context: 上下文参数
        :param rdam_request: 系统自动生成
        """
        return self._top_request(
            "yunos.datatech.opendata.get",
            {
                "context": context,
                "rdam_request": rdam_request
            }
        )

    def alibaba_dt_tmllcar_leadsinfo(
            self,
            shop_code,
            app_name,
            name,
            password
    ):
        """
        天猫汽车线索产品潜客数据
        1.	线索分发是天猫汽车行业流量端最中要的产品，经过前两年的业务和数据端的积累已经对整体业务流程和方案有了清晰的思路；目前数据段已经产沉淀2000W汽车潜客数据，通过运营尝试得到了较好的效果，今年将通过与商家端合作（大搜车-卖车管家）完成潜客分发-商家报价-潜客触达-线索分发-线下核销等一整个汽车人群运营闭环；这个接口反馈大搜车线下门店周围潜客规模及热门车型数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38780

        :param shop_code: shopcode
        :param app_name: app_name
        :param name: name
        :param password: pssword
        """
        return self._top_request(
            "alibaba.dt.tmllcar.leadsinfo",
            {
                "shop_code": shop_code,
                "app_name": app_name,
                "name": name,
                "password": password
            }
        )

    def alibaba_dt_tmllcar_pricevalidate(
            self,
            app_name,
            name,
            password,
            price,
            city_name,
            model_name
    ):
        """
        线索报价价格校验
        根据选定的车型和城市，校验汽车价格是否通过
        入参：车型ID，城市名称，价格
        输出：N 校验失败，校验成功不返回值
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40216

        :param app_name: tt
        :param name: tt
        :param password: tt
        :param price: tt
        :param city_name: tt
        :param model_name: tt
        """
        return self._top_request(
            "alibaba.dt.tmllcar.pricevalidate",
            {
                "app_name": app_name,
                "name": name,
                "password": password,
                "price": price,
                "city_name": city_name,
                "model_name": model_name
            },
            result_processor=lambda x: x["results"]
        )


class TbJiuDian(DingTalkBaseAPI):
    """
    酒店API
    """

    def taobao_xhotel_rooms_ids_get(
            self,
            start_date='',
            end_date='',
            page_no='1'
    ):
        """
        已废弃，勿用
        请使用商家后台导出即可
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23281

        :param start_date: 创建宝贝起始时间
        :param end_date: 创建宝贝截止时间
        :param page_no: 页数
        """
        return self._top_request(
            "taobao.xhotel.rooms.ids.get",
            {
                "start_date": start_date,
                "end_date": end_date,
                "page_no": page_no
            }
        )

    def taobao_xhotel_order_official_qualification_get(
            self,
            notify_url,
            return_url,
            guest_name,
            out_member_account,
            id_number,
            check_out,
            check_in,
            out_u_u_i_d,
            total_fee,
            hotel_code,
            out_oid,
            extend_attrs='',
            mobile_no='',
            vendor='',
            id_type='',
            encrypt_type='',
            alipay_account='',
            daily_price_info='',
            room_num=''
    ):
        """
        官网信用住用户资质校验
        官网信用住在下单前对用户进行资质校验，资质校验通过才能进行信用支付
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26041

        :param notify_url: 卖家接收阿里旅行订单状态变更的服务地址（需要实现阿里旅行提供的服务通知规范）
        :param return_url: 阿里旅行支付（下单）结束后跳转卖家的页面地址（必须）
        :param guest_name: 入住人姓名（必选）
        :param out_member_account: 外部会员账号（必选）
        :param id_number: 身份证号，必选
        :param check_out: 客人离店日期, 最多支持9间夜
        :param check_in: 客人入住日期
        :param out_u_u_i_d: 外部请求序列表号\流水号，单次请求的唯一标识(必须)
        :param total_fee: 总的收费金额，单位为分(必须)
        :param hotel_code: 酒店外部编码
        :param out_oid: 外部订单号（必选），阿里旅行会根据此值进行幂等性校验
        :param extend_attrs: 扩展字段，json串，用户后续的营销、统计、定制等需求，目前已有key列表：      is_new_user：是否是卖家新用户，1-是，0或者key为null，表示不是      is_first_stay：是否是卖家首住，1-是，0或者key为null，表示不是     （已有列表必须传递）
        :param mobile_no: 用户手机号(可选)
        :param vendor: 商家在淘宝给分配的渠道名（建议填充较好）
        :param id_type: 证件类型, 默认0:身份证; 1: 护照; 2:警官证; 3:士兵证; 4: 回乡证。目前只支持身份证
        :param encrypt_type: 加密方式, 默认0: 不加密, 信息会通过淘宝开放平台传输, 阿里旅行可以获取到具体信息;      * 目前只支持不加密
        :param alipay_account: 用户支付宝唯一识别码(可选)
        :param daily_price_info: 每日房价,json格式 ，如果是多间房，则是每日多间房总房价(可选)      * eg:{'day':'2015-08-12','price':48800},      {'day':'2015-08-13','price':48800}
        :param room_num: 房间数
        """
        return self._top_request(
            "taobao.xhotel.order.official.qualification.get",
            {
                "notify_url": notify_url,
                "return_url": return_url,
                "guest_name": guest_name,
                "out_member_account": out_member_account,
                "id_number": id_number,
                "check_out": check_out,
                "check_in": check_in,
                "out_u_u_i_d": out_u_u_i_d,
                "total_fee": total_fee,
                "hotel_code": hotel_code,
                "out_oid": out_oid,
                "extend_attrs": extend_attrs,
                "mobile_no": mobile_no,
                "vendor": vendor,
                "id_type": id_type,
                "encrypt_type": encrypt_type,
                "alipay_account": alipay_account,
                "daily_price_info": daily_price_info,
                "room_num": room_num
            }
        )

    def taobao_xhotel_order_offline_settle_cancel(
            self,
            tid='',
            reason='',
            out_id='',
            notify_url='',
            out_uuid=''
    ):
        """
        线下信用住取消结账专用接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26105

        :param tid: 阿里旅行订单号，淘宝订单号或外部订单号二选一必填
        :param reason: 取消结账的原因
        :param out_id: 外部订单号，和tid二选一必填（建议都写入）
        :param notify_url: 暂时无意义，无需传入
        :param out_uuid: 请求流水号
        """
        return self._top_request(
            "taobao.xhotel.order.offline.settle.cancel",
            {
                "tid": tid,
                "reason": reason,
                "out_id": out_id,
                "notify_url": notify_url,
                "out_uuid": out_uuid
            }
        )

    def taobao_xhotel_order_hotelsign_query(
            self,
            out_uuid,
            hotel_code='',
            vendor='taobao',
            type='1',
            page_no='1'
    ):
        """
        获取直连酒店（客栈）签约上线进度信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27152

        :param out_uuid: 请求流水
        :param hotel_code: 商家酒店编码
        :param vendor: 商家vendor
        :param type: 1
        :param page_no: 页码
        """
        return self._top_request(
            "taobao.xhotel.order.hotelsign.query",
            {
                "out_uuid": out_uuid,
                "hotel_code": hotel_code,
                "vendor": vendor,
                "type": type,
                "page_no": page_no
            }
        )

    def taobao_xhotel_data_service_seller_serviceindex(
            self,
            vendor='',
            start_row='',
            page_size='',
            report_end_date='',
            report_start_date=''
    ):
        """
        卖家服务指数查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38661

        :param vendor: 渠道商名称
        :param start_row: 分页参数
        :param page_size: 分页参数
        :param report_end_date: 查询截止日期
        :param report_start_date: 查询开始日期
        """
        return self._top_request(
            "taobao.xhotel.data.service.seller.serviceindex",
            {
                "vendor": vendor,
                "start_row": start_row,
                "page_size": page_size,
                "report_end_date": report_end_date,
                "report_start_date": report_start_date
            }
        )

    def taobao_xhotel_data_service_hotel_serviceindex(
            self,
            hid='',
            vendor='',
            start_row='',
            page_size='',
            report_end_date='',
            report_start_date='',
            supplier=''
    ):
        """
        酒店服务指数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38848

        :param hid: 酒店id
        :param vendor: 渠道商名称
        :param start_row: 1
        :param page_size: 10
        :param report_end_date: 查询时间段结束
        :param report_start_date: 查询时间段开始
        :param supplier: 供应商名称
        """
        return self._top_request(
            "taobao.xhotel.data.service.hotel.serviceindex",
            {
                "hid": hid,
                "vendor": vendor,
                "start_row": start_row,
                "page_size": page_size,
                "report_end_date": report_end_date,
                "report_start_date": report_start_date,
                "supplier": supplier
            }
        )

    def taobao_xhotel_data_service_order_detail(
            self,
            start_date='',
            is_call_no_order='',
            hid='',
            is_spec_time_order='',
            vendor='',
            page_size='',
            end_date='',
            is_no_room_compen='',
            start_row='',
            is_seller_deny='',
            is_seller_refund='',
            supplier=''
    ):
        """
        服务订单详情
        服务订单详情top接口构建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38872

        :param start_date: 查询开始日期
        :param is_call_no_order: 是否查无订单 1:是 0:否
        :param hid: 酒店id
        :param is_spec_time_order: 是否特殊时段订单 1:是 0:否
        :param vendor: 渠道商名称
        :param page_size: 分页大小
        :param end_date: 查询结束时间
        :param is_no_room_compen: 是否到店无房 1:是
        :param start_row: 分页参数
        :param is_seller_deny: 是否拒单 1:是 0:否
        :param is_seller_refund: 是否卖家原因退款 1:是 0:否
        :param supplier: 供应商名称
        """
        return self._top_request(
            "taobao.xhotel.data.service.order.detail",
            {
                "start_date": start_date,
                "is_call_no_order": is_call_no_order,
                "hid": hid,
                "is_spec_time_order": is_spec_time_order,
                "vendor": vendor,
                "page_size": page_size,
                "end_date": end_date,
                "is_no_room_compen": is_no_room_compen,
                "start_row": start_row,
                "is_seller_deny": is_seller_deny,
                "is_seller_refund": is_seller_refund,
                "supplier": supplier
            }
        )


class TbJuHuaSuan(DingTalkBaseAPI):
    """
    聚划算API
    """

    def taobao_ju_items_search(
            self,
            param_top_item_query=None
    ):
        """
        聚划算商品搜索接口
        搜索聚划算商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28762

        :param param_top_item_query: query
        """
        return self._top_request(
            "taobao.ju.items.search",
            {
                "param_top_item_query": param_top_item_query
            }
        )


class TbDianPuHuiYuanGuanLi(DingTalkBaseAPI):
    """
    店铺会员管理API
    """

    def taobao_crm_grade_get(
            self
    ):
        """
        卖家查询等级规则
        卖家查询等级规则，包括店铺客户、普通会员、高级会员、VIP会员、至尊VIP会员四个等级的信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10824

        """
        return self._top_request(
            "taobao.crm.grade.get",
            result_processor=lambda x: x["grade_promotions"]
        )

    def taobao_crm_shopvip_cancel(
            self
    ):
        """
        卖家取消店铺vip的优惠
        此接口用于取消VIP优惠
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10825

        """
        return self._top_request(
            "taobao.crm.shopvip.cancel",
            result_processor=lambda x: x["is_success"]
        )

    def taobao_crm_members_increment_get(
            self,
            current_page,
            grade='-1',
            start_modify='',
            end_modify='',
            page_size=''
    ):
        """
        增量获取卖家会员
        增量获取会员列表，接口返回符合查询条件的所有会员。任何状态更改都会返回,最大允许100
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10826

        :param current_page: 显示第几页的会员，如果输入的页码大于总共的页码数，例如总共10页，但是current_page的值为11，则返回空白页，最小页数为1
        :param grade: 会员等级
        :param start_modify: 卖家修改会员信息的时间起点.
        :param end_modify: 卖家修改会员信息的时间终点.如果不填写此字段,默认为当前时间.
        :param page_size: 每页显示的会员数，page_size的值不能超过100，最小值要大于1
        """
        return self._top_request(
            "taobao.crm.members.increment.get",
            {
                "current_page": current_page,
                "grade": grade,
                "start_modify": start_modify,
                "end_modify": end_modify,
                "page_size": page_size
            }
        )

    def taobao_crm_members_group_batchadd(
            self,
            group_ids,
            buyer_nicks
    ):
        """
        给一批会员添加一个分组
        为一批会员添加分组，接口返回添加是否成功,如至少有一个会员的分组添加成功，接口就返回成功，否则返回失败，如果当前会员已经拥有当前分组，则直接跳过
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10829

        :param group_ids: 分组id
        :param buyer_nicks: 买家昵称列表
        """
        return self._top_request(
            "taobao.crm.members.group.batchadd",
            {
                "group_ids": group_ids,
                "buyer_nicks": buyer_nicks
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_crm_grade_set(
            self,
            grade,
            discount,
            hierarchy,
            amount='',
            count=''
    ):
        """
        卖家设置等级规则
        设置等级信息，可以设置层级等级，也可以单独设置一个等级。出于安全原因，折扣现最低只能设置到700即7折。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10831

        :param grade: 会员等级，用逗号分隔。买家会员级别0：店铺客户 1：普通会员 2 ：高级会员 3：VIP会员 4：至尊VIP
        :param discount: 会员级别折扣率。会员等级越高，折扣必须越低。<br/>950即9.5折，888折即8.88折。出于安全原因，折扣现最低只能设置到700即7折。
        :param hierarchy: 是否设置达到某一会员等级的交易量和交易额，必填。4个级别都需要设置，如入参为true,true,true,false时，表示设置达到高级会员、VIP会员的交易量或者交易额，不设置达到至尊会员的交易量和交易额
        :param amount: 只对设置的层级等级有效，必须要在amount和count参数中选择一个<br><br/>amount参数的填写规范：升级到下一个级别的需要的交易额，单位为分,必须全部填写.例如10000,20000,30000，其中10000表示非会员升级到普通的所需的交易额，20000表示普通升级到高级所需的交易额，层级等级中最高等级的下一个等级默认为0。会员等级越高，所需交易额必须越高。
        :param count: 只对设置的层级等级有效，必须要在amount和count参数中选择一个<br><br/>count参数的填写规范：<br/>升级到下一个级别的需要的交易量,必须全部填写. 以逗号分隔,例如100,200,300，其中100表示非会员升级到普通会员交易量。层级等级中最高等级的下一个等级的交易量默认为0。会员等级越高，交易量必须越高。
        """
        return self._top_request(
            "taobao.crm.grade.set",
            {
                "grade": grade,
                "discount": discount,
                "hierarchy": hierarchy,
                "amount": amount,
                "count": count
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_crm_members_groups_batchdelete(
            self,
            buyer_nicks,
            group_ids
    ):
        """
        批量删除分组
        批量删除多个会员的公共分组，接口返回删除是否成功，该接口只删除多个会员的公共分组，不是公共分组的，不进行删除。如果入参只输入一个会员，则表示删除该会员的某些分组。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10832

        :param buyer_nicks: 买家昵称列表
        :param group_ids: 会员需要删除的分组
        """
        return self._top_request(
            "taobao.crm.members.groups.batchdelete",
            {
                "buyer_nicks": buyer_nicks,
                "group_ids": group_ids
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_crm_groups_get(
            self,
            current_page,
            page_size=''
    ):
        """
        查询卖家的分组
        查询卖家的分组，返回查询到的分组列表，分页返回分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10833

        :param current_page: 显示第几页的分组，如果输入的页码大于总共的页码数，例如总共10页，但是current_page的值为11，则返回空白页，最小页码为1
        :param page_size: 每页显示的记录数，其最大值不能超过100条，最小值为1，默认20条
        """
        return self._top_request(
            "taobao.crm.groups.get",
            {
                "current_page": current_page,
                "page_size": page_size
            }
        )

    def taobao_crm_group_update(
            self,
            group_id,
            new_group_name
    ):
        """
        修改一个已经存在的分组
        修改一个已经存在的分组，接口返回分组的修改是否成功
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10834

        :param group_id: 分组的id
        :param new_group_name: 新的分组名，分组名称不能包含|或者：
        """
        return self._top_request(
            "taobao.crm.group.update",
            {
                "group_id": group_id,
                "new_group_name": new_group_name
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_crm_group_add(
            self,
            group_name
    ):
        """
        卖家创建一个分组
        卖家创建一个新的分组，接口返回一个创建成功的分组的id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10835

        :param group_name: 分组名称，每个卖家最多可以拥有100个分组
        """
        return self._top_request(
            "taobao.crm.group.add",
            {
                "group_name": group_name
            }
        )

    def taobao_crm_members_search(
            self,
            current_page,
            buyer_nick='',
            grade='-1',
            min_trade_amount='',
            max_trade_amount='',
            min_trade_count='',
            max_trade_count='',
            min_last_trade_time='',
            max_last_trade_time='',
            relation_source='',
            min_item_num='',
            province='',
            group_id='',
            page_size='',
            max_item_num=''
    ):
        """
        获取卖家会员（高级查询）
        会员列表的高级查询，接口返回符合条件的会员列表.<br><br/>注：建议获取09年以后的数据，09年之前的数据不是很完整
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10836

        :param current_page: 显示第几页的会员，如果输入的页码大于总共的页码数，例如总共10页，但是current_page的值为11，则返回空白页，最小页数为1.最大1000页
        :param buyer_nick: 买家昵称
        :param grade: 会员等级
        :param min_trade_amount: 最小交易额，单位为元
        :param max_trade_amount: 最大交易额，单位为元
        :param min_trade_count: 最小交易量
        :param max_trade_count: 最大交易量
        :param min_last_trade_time: 最早上次交易时间（订单创建时间）
        :param max_last_trade_time: 最迟上次交易时间
        :param relation_source: 关系来源，1交易成功，2未成交，3卖家手动吸纳
        :param min_item_num: 最小交易宝贝件数
        :param province: 北京=1,天津=2,河北省=3,山西省=4,内蒙古自治区=5,辽宁省=6,吉林省=7,黑龙江省=8,上海=9,江苏省=10,浙江省=11,安徽省=12,福建省=13,江西省=14,山东省=15,河南省=16,湖北省=17,湖南省=18, 广东省=19,广西壮族自治区=20,海南省=21,重庆=22,四川省=23,贵州省=24,云南省=25,西藏自治区26,陕西省=27,甘肃省=28,青海省=29,宁夏回族自治区=30,新疆维吾尔自治区=31,台湾省=32,香港特别行政区=33,澳门特别行政区=34,海外=35.注:请注意:从2014.4.23之后,省市将采用地区标准码,请通过物流API taobao.areas.get接口获取,参考:http://api.taobao.com/apidoc/api.htm?spm=0.0.0.0.nOOF9g&path=cid:7-apiId:59.API对于老的省市代码兼容会逐步下线.
        :param group_id: 分组id
        :param page_size: 每页显示的会员数量，page_size的最大值不能超过100，最小值不能小于1
        :param max_item_num: 最大交易宝贝件数
        """
        return self._top_request(
            "taobao.crm.members.search",
            {
                "current_page": current_page,
                "buyer_nick": buyer_nick,
                "grade": grade,
                "min_trade_amount": min_trade_amount,
                "max_trade_amount": max_trade_amount,
                "min_trade_count": min_trade_count,
                "max_trade_count": max_trade_count,
                "min_last_trade_time": min_last_trade_time,
                "max_last_trade_time": max_last_trade_time,
                "relation_source": relation_source,
                "min_item_num": min_item_num,
                "province": province,
                "group_id": group_id,
                "page_size": page_size,
                "max_item_num": max_item_num
            }
        )

    def taobao_crm_memberinfo_update(
            self,
            buyer_nick,
            status,
            grade='',
            province='',
            city='',
            trade_count='',
            trade_amount='',
            close_trade_count='',
            close_trade_amount='',
            group_ids='',
            item_num=''
    ):
        """
        编辑会员资料
        编辑会员的基本资料，接口返回会员信息修改是否成功
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10837

        :param buyer_nick: 买家昵称
        :param status: 用于描述会员的状态，normal表示正常，blacklist表示黑名单(不享受会员折扣).
        :param grade: 会员等级，1：普通客户，2：高级会员，3：高级会员 ，4：至尊vip只有正常会员才给予升级，对于status blacklist的会员升级无效
        :param province: 北京=1,天津=2,河北省=3,山西省=4,内蒙古自治区=5,辽宁省=6,吉林省=7,黑龙江省=8,上海=9,江苏省=10,浙江省=11,安徽省=12,福建省=13,江西省=14,山东省=15,河南省=16,湖北省=17,湖南省=18, 广东省=19,广西壮族自治区=20,海南省=21,重庆=22,四川省=23,贵州省=24,云南省=25,西藏自治区=26,陕西省=27,甘肃省=28,青海省=29,宁夏回族自治区=30,新疆维吾尔自治区=31,台湾省=32,香港特别行政区=33,澳门特别行政区=34,海外=35，约定36为清除Province设置.请注意:从2014.4.15之后,省市将采用地区标准码,请通过物流API taobao.areas.get接口获取,参考:http://api.taobao.com/apidoc/api.htm?spm=0.0.0.0.nOOF9g&path=cid:7-apiId:59.API对于老的省市代码兼容会逐步下线.
        :param city: 城市.请注意:从2014.4.15之后,省市将采用地区标准码,请通过物流API taobao.areas.get接口获取,参考:http://api.taobao.com/apidoc/api.htm?spm=0.0.0.0.nOOF9g&path=cid:7-apiId:59.API对于老的省市代码兼容会逐步下线
        :param trade_count: 交易笔数
        :param trade_amount: 交易金额，单位：分
        :param close_trade_count: 交易关闭次数
        :param close_trade_amount: 交易关闭金额，单位：分
        :param group_ids: 分组的id集合字符串
        :param item_num: 宝贝件数
        """
        return self._top_request(
            "taobao.crm.memberinfo.update",
            {
                "buyer_nick": buyer_nick,
                "status": status,
                "grade": grade,
                "province": province,
                "city": city,
                "trade_count": trade_count,
                "trade_amount": trade_amount,
                "close_trade_count": close_trade_count,
                "close_trade_amount": close_trade_amount,
                "group_ids": group_ids,
                "item_num": item_num
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_crm_members_get(
            self,
            current_page,
            buyer_nick='',
            grade='-1',
            min_trade_amount='',
            max_trade_amount='',
            min_trade_count='',
            max_trade_count='',
            min_last_trade_time='',
            max_last_trade_time='',
            page_size=''
    ):
        """
        获取卖家的会员（基本查询）
        查询卖家的会员，进行基本的查询，返回符合条件的会员列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10838

        :param current_page: 显示第几页的会员，如果输入的页码大于总共的页码数，例如总共10页，但是current_page的值为11，则返回空白页，最小页数为1，最大页数为1000
        :param buyer_nick: 买家的昵称
        :param grade: 会员等级,如果不传入值则默认为全部等级。
        :param min_trade_amount: 最小交易额,单位为元
        :param max_trade_amount: 最大交易额，单位为元
        :param min_trade_count: 最小交易量
        :param max_trade_count: 最大交易量
        :param min_last_trade_time: 最早上次交易时间
        :param max_last_trade_time: 最迟上次交易时间
        :param page_size: 表示每页显示的会员数量,page_size的最大值不能超过100条,最小值不能低于1，
        """
        return self._top_request(
            "taobao.crm.members.get",
            {
                "current_page": current_page,
                "buyer_nick": buyer_nick,
                "grade": grade,
                "min_trade_amount": min_trade_amount,
                "max_trade_amount": max_trade_amount,
                "min_trade_count": min_trade_count,
                "max_trade_count": max_trade_count,
                "min_last_trade_time": min_last_trade_time,
                "max_last_trade_time": max_last_trade_time,
                "page_size": page_size
            }
        )

    def taobao_crm_group_delete(
            self,
            group_id
    ):
        """
        删除分组
        将该分组下的所有会员移除出该组，同时删除该分组。注：删除分组为异步任务，必须先调用taobao.crm.grouptask.check 确保涉及属性上没有任务。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10841

        :param group_id: 要删除的分组id
        """
        return self._top_request(
            "taobao.crm.group.delete",
            {
                "group_id": group_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_crm_group_append(
            self,
            from_group_id,
            to_group_id
    ):
        """
        将一个分组添加到另外一个分组
        将某分组下的所有会员添加到另一个分组,注：1.该操作为异步任务，建议先调用taobao.crm.grouptask.check 确保涉及分组上没有任务；2.若分组下某会员分组数超最大限额，则该会员不会被添加到新分组，同时不影响其余会员添加分组，接口调用依然返回成功。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10842

        :param from_group_id: 添加的来源分组
        :param to_group_id: 添加的目标分组
        """
        return self._top_request(
            "taobao.crm.group.append",
            {
                "from_group_id": from_group_id,
                "to_group_id": to_group_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_crm_group_move(
            self,
            from_group_id,
            to_group_id
    ):
        """
        分组移动
        将一个分组下的所有会员移动到另一个分组，会员从原分组中删除<br/>注：移动属性为异步任务建议先调用taobao.crm.grouptask.check 确保涉及属性上没有任务。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10843

        :param from_group_id: 需要移动的分组
        :param to_group_id: 目的分组
        """
        return self._top_request(
            "taobao.crm.group.move",
            {
                "from_group_id": from_group_id,
                "to_group_id": to_group_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_crm_grouptask_check(
            self,
            group_id
    ):
        """
        查询分组任务是否完成
        检查一个分组上是否有异步任务,异步任务包括1.将一个分组下的所有用户添加到另外一个分组2.将一个分组下的所有用户移动到另外一个分组3.删除某个分组<br/>若分组上有任务则该属性不能被操作。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10844

        :param group_id: 分组id
        """
        return self._top_request(
            "taobao.crm.grouptask.check",
            {
                "group_id": group_id
            },
            result_processor=lambda x: x["is_finished"]
        )

    def taobao_crm_grademkt_member_add(
            self,
            parameter,
            feather,
            buyer_nick
    ):
        """
        会员等级营销-会员吸纳
        商家通过该接口吸纳线上店铺会员。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21528

        :param parameter: 会员属性-json format生成方法见http://open.taobao.com/doc/detail.htm?id=101281
        :param feather: 系统属性，json格式
        :param buyer_nick: 会员nick
        """
        return self._top_request(
            "taobao.crm.grademkt.member.add",
            {
                "parameter": parameter,
                "feather": feather,
                "buyer_nick": buyer_nick
            },
            result_processor=lambda x: x["model"]
        )

    def taobao_crm_grademkt_member_detail_query(
            self,
            feather,
            parameter
    ):
        """
        会员等级营销-等级营销活动查询
        商家通过该接口查询等级营销活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21531

        :param feather: 扩展字段
        :param parameter: 创建营销详情，生成方法见http://open.taobao.com/doc/detail.htm?id=101281
        """
        return self._top_request(
            "taobao.crm.grademkt.member.detail.query",
            {
                "feather": feather,
                "parameter": parameter
            },
            result_processor=lambda x: x["model"]
        )

    def taobao_crm_grademkt_member_detail_delete(
            self,
            feather,
            parameter
    ):
        """
        会员等级营销-删除商品等级营销明细
        删除商品等级营销明细
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21533

        :param feather: 扩展字段
        :param parameter: 创建营销详情，生成方法见http://open.taobao.com/doc/detail.htm?id=101281
        """
        return self._top_request(
            "taobao.crm.grademkt.member.detail.delete",
            {
                "feather": feather,
                "parameter": parameter
            },
            result_processor=lambda x: x["module"]
        )

    def taobao_crm_grademkt_member_detail_create(
            self,
            feather,
            parameter
    ):
        """
        会员等级营销-创建商品等级营销明细
        创建商品等级营销明细
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21534

        :param feather: 扩展字段
        :param parameter: 创建营销详情，生成方法见http://open.taobao.com/doc/detail.htm?id=101281
        """
        return self._top_request(
            "taobao.crm.grademkt.member.detail.create",
            {
                "feather": feather,
                "parameter": parameter
            },
            result_processor=lambda x: x["module"]
        )

    def taobao_crm_grademkt_member_query(
            self,
            parameter,
            feather,
            buyer_nick
    ):
        """
        会员等级营销-会员关系查询
        商家通过该接口查询线上店铺会员。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21536

        :param parameter: 会员属性-json format生成方法见http://open.taobao.com/doc/detail.htm?id=101281
        :param feather: 系统属性，json格式
        :param buyer_nick: 会员nick
        """
        return self._top_request(
            "taobao.crm.grademkt.member.query",
            {
                "parameter": parameter,
                "feather": feather,
                "buyer_nick": buyer_nick
            },
            result_processor=lambda x: x["module"]
        )

    def taobao_crm_member_group_get(
            self,
            buyer_nick
    ):
        """
        获取买家身上的标签
        获取买家身上的标签，不返回标签的总人数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22293

        :param buyer_nick: 会员Nick
        """
        return self._top_request(
            "taobao.crm.member.group.get",
            {
                "buyer_nick": buyer_nick
            },
            result_processor=lambda x: x["groups"]
        )

    def taobao_crm_service_channel_shortlink_create(
            self,
            short_link_name,
            link_type,
            short_link_data=''
    ):
        """
        ECRM创建淘短链服务
        可生成店铺宝贝、店铺首页、活动链接、订单链接等4种可呼起手机淘宝APP至对应页面的淘短链。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25034

        :param short_link_name: 淘短链名称（最多只能16个中文字符，类型为订单链接时传入订单ID）。
        :param link_type: 淘短链类型：LT_ITEM（商品淘短链）,LT_SHOP（店铺首页淘短链）,LT_ACTIVITY（活动页淘短链）,LT_TRADE（订单详情页淘短链）。
        :param short_link_data: 类型为LT_ITEM时必须传入商品ID，类型为LT_SHOP时必须传入空值，类型为LT_ACTIVITY时传入活动页URL（URL必须是taobao.com,tmall.com,jaeapp.com这三个域名下的URL），类型为LT_TRADE时传入订单ID。
        """
        return self._top_request(
            "taobao.crm.service.channel.shortlink.create",
            {
                "short_link_name": short_link_name,
                "link_type": link_type,
                "short_link_data": short_link_data
            },
            result_processor=lambda x: x["short_link"]
        )

    def taobao_crm_card_update(
            self,
            card_name,
            card_type,
            card_url,
            attribute=''
    ):
        """
        添加外部卡信息
        会员卡开放后，业务方通过调用此接口添加外部卡信息，需要对每个卖家都调用一次，去更新此卖家相应外部卡的地址、名称、图片等信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25283

        :param card_name: 卡名称，如校园卡、天猫美妆卡
        :param card_type: 卡类型
        :param card_url: 卖家此卡的URL
        :param attribute: 属性，卡的其它信息
        """
        return self._top_request(
            "taobao.crm.card.update",
            {
                "card_name": card_name,
                "card_type": card_type,
                "card_url": card_url,
                "attribute": attribute
            }
        )

    def taobao_crm_exchange_crowdinstance_add(
            self,
            reason,
            crowd_instance_id,
            buyer_nick
    ):
        """
        向活动人群实例中增加买家
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25567

        :param reason: 操作原因
        :param crowd_instance_id: 人群实例ID
        :param buyer_nick: 买家昵称
        """
        return self._top_request(
            "taobao.crm.exchange.crowdinstance.add",
            {
                "reason": reason,
                "crowd_instance_id": crowd_instance_id,
                "buyer_nick": buyer_nick
            },
            result_processor=lambda x: x["sub_success"]
        )

    def taobao_crm_exchange_crowdinstance_delete(
            self,
            reason,
            crowd_instance_id,
            buyer_nick
    ):
        """
        删除人群实例中的指定买家
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25583

        :param reason: 操作原因
        :param crowd_instance_id: 人群实例ID
        :param buyer_nick: 买家昵称
        """
        return self._top_request(
            "taobao.crm.exchange.crowdinstance.delete",
            {
                "reason": reason,
                "crowd_instance_id": crowd_instance_id,
                "buyer_nick": buyer_nick
            },
            result_processor=lambda x: x["sub_success"]
        )

    def taobao_crm_exchange_activity_create(
            self,
            exchange_activity_create_dto
    ):
        """
        创建积分兑换活动
        创建针对积分兑换类型的活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25584

        :param exchange_activity_create_dto: 创建积分兑换活动
        """
        return self._top_request(
            "taobao.crm.exchange.activity.create",
            {
                "exchange_activity_create_dto": exchange_activity_create_dto
            }
        )


class TbTaoDianDianWaiMai(DingTalkBaseAPI):
    """
    淘点点外卖
    """

    def taobao_waimai_delivery_location_update(
            self,
            deliverer_name,
            lng,
            deliverer_phone,
            lat
    ):
        """
        点点送配送员位置POI回传
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24874

        :param deliverer_name: 配送员姓名
        :param lng: 地图坐标：经度
        :param deliverer_phone: 配送员手机号码
        :param lat: 地图坐标：维度
        """
        return self._top_request(
            "taobao.waimai.delivery.location.update",
            {
                "deliverer_name": deliverer_name,
                "lng": lng,
                "deliverer_phone": deliverer_phone,
                "lat": lat
            },
            result_processor=lambda x: x["delivery_location_result"]
        )

    def taobao_waimai_delivery_confirm(
            self,
            delivery_order_no,
            lng,
            lat
    ):
        """
        点点送配送员妥投
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24876

        :param delivery_order_no: 物流订单号
        :param lng: 地图坐标：经度
        :param lat: 地图坐标：维度
        """
        return self._top_request(
            "taobao.waimai.delivery.confirm",
            {
                "delivery_order_no": delivery_order_no,
                "lng": lng,
                "lat": lat
            },
            result_processor=lambda x: x["delivery_order_result"]
        )

    def taobao_waimai_delivery_pickup(
            self,
            delivery_order_no,
            lng,
            lat
    ):
        """
        点点送配送员取件
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        点点送配送员取件接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24877

        :param delivery_order_no: 物流订单号
        :param lng: 地图坐标：经度
        :param lat: 地图坐标：维度
        """
        return self._top_request(
            "taobao.waimai.delivery.pickup",
            {
                "delivery_order_no": delivery_order_no,
                "lng": lng,
                "lat": lat
            },
            result_processor=lambda x: x["delivery_order_result"]
        )

    def taobao_waimai_order_accept(
            self,
            delivery_order_no,
            deliverer_id='',
            deliverer_name='',
            deliverer_phone='',
            card_no='',
            lng='',
            lat=''
    ):
        """
        淘点点订单确认接单接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        淘点点订单通知后，配送商确认接单接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25277

        :param delivery_order_no: 物流单号
        :param deliverer_id: 配送员id
        :param deliverer_name: 配送员姓名
        :param deliverer_phone: 配送员手机号
        :param card_no: 配送员身份证号
        :param lng: 配送员位置：经度
        :param lat: 配送员位置：维度
        """
        return self._top_request(
            "taobao.waimai.order.accept",
            {
                "delivery_order_no": delivery_order_no,
                "deliverer_id": deliverer_id,
                "deliverer_name": deliverer_name,
                "deliverer_phone": deliverer_phone,
                "card_no": card_no,
                "lng": lng,
                "lat": lat
            },
            result_processor=lambda x: x["accept_order_result"]
        )

    def taobao_waimai_order_ack(
            self,
            delivery_order_no
    ):
        """
        淘点点订单消息通知回执
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        配送商收到点点送订单通知消息后，调用该回执接口，通知点点送表示已收到消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25321

        :param delivery_order_no: 物流单号
        """
        return self._top_request(
            "taobao.waimai.order.ack",
            {
                "delivery_order_no": delivery_order_no
            },
            result_processor=lambda x: x["ack_order_result"]
        )

    def taobao_waimai_delivery_update(
            self,
            delivery_order_no,
            deliverer_name,
            deliverer_phone,
            lng,
            lat,
            deliverer_id='',
            card_no=''
    ):
        """
        更新配送员信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        配送商系统向点点送更新配送员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25407

        :param delivery_order_no: 物流单号
        :param deliverer_name: 配送员姓名
        :param deliverer_phone: 配送员手机号
        :param lng: 配送员位置：经度
        :param lat: 配送员位置：维度
        :param deliverer_id: 配送员id
        :param card_no: 配送员身份证号
        """
        return self._top_request(
            "taobao.waimai.delivery.update",
            {
                "delivery_order_no": delivery_order_no,
                "deliverer_name": deliverer_name,
                "deliverer_phone": deliverer_phone,
                "lng": lng,
                "lat": lat,
                "deliverer_id": deliverer_id,
                "card_no": card_no
            },
            result_processor=lambda x: x["delivery_update_result"]
        )

    def taobao_waimai_order_autoaccept(
            self,
            order_id
    ):
        """
        点点卖家自动接单并选择配送商送
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        淘点点卖家自动接单并选择配送商送，卖家通过该接口只能操作自己店铺的订单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25432

        :param order_id: 订单号
        """
        return self._top_request(
            "taobao.waimai.order.autoaccept",
            {
                "order_id": order_id
            },
            result_processor=lambda x: x["autoaccept_order_result"]
        )

    def taobao_waimai_delivery_failedorder(
            self,
            failed_reason='',
            delivery_order_no='0'
    ):
        """
        点点送运单失败
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        点点送外卖运单失败接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27532

        :param failed_reason: 运单失败原因
        :param delivery_order_no: 运单Id
        """
        return self._top_request(
            "taobao.waimai.delivery.failedorder",
            {
                "failed_reason": failed_reason,
                "delivery_order_no": delivery_order_no
            },
            result_processor=lambda x: x["delivery_order_result"]
        )


class TbDuoMeiTiPingTai(DingTalkBaseAPI):
    """
    多媒体平台API
    """

    def taobao_picture_category_get(
            self,
            type='',
            picture_category_id='',
            picture_category_name='',
            parent_id='-1',
            modified_time=''
    ):
        """
        获取图片分类信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=137

        :param type: 1
        :param picture_category_id: 图片分类ID
        :param picture_category_name: 图片分类名，不支持模糊查询
        :param parent_id: 取二级分类时设置为对应父分类id<br/>取一级分类时父分类id设为0<br/>取全部分类的时候不设或设为-1
        :param modified_time: 图片分类的修改时间点，格式:yyyy-MM-dd HH:mm:ss。查询此修改时间点之后到目前的图片分类。
        """
        return self._top_request(
            "taobao.picture.category.get",
            {
                "type": type,
                "picture_category_id": picture_category_id,
                "picture_category_name": picture_category_name,
                "parent_id": parent_id,
                "modified_time": modified_time
            },
            result_processor=lambda x: x["picture_categories"]
        )

    def taobao_picture_get(
            self,
            picture_id='',
            picture_category_id='',
            deleted='',
            title='',
            order_by='time:desc',
            start_date='',
            end_date='',
            page_no='1',
            page_size='40',
            modified_time='',
            client_type='client:all',
            urls='',
            is_https='false'
    ):
        """
        获取图片信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=138

        :param picture_id: 图片ID
        :param picture_category_id: 图片分类ID
        :param deleted: 是否删除,unfroze代表没有删除
        :param title: 图片标题,最大长度50字符,中英文都算一字符
        :param order_by: 图片查询结果排序,time:desc按上传时间从晚到早(默认), time:asc按上传时间从早到晚,sizes:desc按图片从大到小，sizes:asc按图片从小到大,默认time:desc
        :param start_date: 查询上传开始时间点,格式:yyyy-MM-dd HH:mm:ss
        :param end_date: 查询上传结束时间点,格式:yyyy-MM-dd HH:mm:ss
        :param page_no: 页码.传入值为1代表第一页,传入值为2代表第二页,依此类推,默认值为1
        :param page_size: 每页条数.每页返回最多返回100条,默认值40
        :param modified_time: 图片被修改的时间点，格式:yyyy-MM-dd HH:mm:ss。查询此修改时间点之后到目前的图片。
        :param client_type: 图片使用，如果是pc宝贝detail使用，设置为client:computer，查询出来的图片是符合pc的宝贝detail显示的如果是手机宝贝detail使用，设置为client:phone，查询出来的图片是符合手机的宝贝detail显示的,默认值是全部
        :param urls: 图片url查询接口
        :param is_https: 是否获取https的链接
        """
        return self._top_request(
            "taobao.picture.get",
            {
                "picture_id": picture_id,
                "picture_category_id": picture_category_id,
                "deleted": deleted,
                "title": title,
                "order_by": order_by,
                "start_date": start_date,
                "end_date": end_date,
                "page_no": page_no,
                "page_size": page_size,
                "modified_time": modified_time,
                "client_type": client_type,
                "urls": urls,
                "is_https": is_https
            },
            result_processor=lambda x: x["pictures"]
        )

    def taobao_picture_delete(
            self,
            picture_ids
    ):
        """
        删除图片空间图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=139

        :param picture_ids: 图片ID字符串,可以一个也可以一组,用英文逗号间隔,如450,120,155.限制数量是100
        """
        return self._top_request(
            "taobao.picture.delete",
            {
                "picture_ids": picture_ids
            },
            result_processor=lambda x: x["success"]
        )

    def taobao_picture_upload(
            self,
            picture_category_id,
            img,
            image_input_title,
            title='',
            client_type='client:computer',
            is_https='false'
    ):
        """
        上传单张图片
        图片空间上传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=140

        :param picture_category_id: 图片分类ID，设置具体某个分类ID或设置0上传到默认分类，只能传入一个分类
        :param img: 图片二进制文件流,不能为空,允许png、jpg、gif图片格式,3M以内。
        :param image_input_title: 包括后缀名的图片标题,不能为空，如Bule.jpg,有些卖家希望图片上传后取图片文件的默认名
        :param title: 图片标题,如果为空,传的图片标题就取去掉后缀名的image_input_title,超过50字符长度会截取50字符,重名会在标题末尾加'(1)';标题末尾已经有'(数字)'了，则数字加1
        :param client_type: 图片上传的来源，有电脑版本宝贝发布，手机版本宝贝发布client:computer电脑版本宝贝使用，client:phone手机版本宝贝使用。注意：当client:phone时，图片限制为宽度在480-620之间，长度不能超过960，否则会报错。
        :param is_https: 是否获取https连接
        """
        return self._top_request(
            "taobao.picture.upload",
            {
                "picture_category_id": picture_category_id,
                "img": img,
                "image_input_title": image_input_title,
                "title": title,
                "client_type": client_type,
                "is_https": is_https
            },
            result_processor=lambda x: x["picture"]
        )

    def taobao_media_category_update(
            self,
            media_category_id,
            media_category_name
    ):
        """
        更新媒体文件分类
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=143

        :param media_category_id: 文件分类ID,不能为空
        :param media_category_name: 文件分类名，最大长度20字符，中英文都算一字符,不能为空
        """
        return self._top_request(
            "taobao.media.category.update",
            {
                "media_category_id": media_category_id,
                "media_category_name": media_category_name
            },
            result_processor=lambda x: x["success"]
        )

    def taobao_picture_category_add(
            self,
            picture_category_name,
            parent_id='0'
    ):
        """
        新增图片分类信息
        同一卖家最多添加500个图片分类，图片分类名称长度最大为20个字符
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=227

        :param picture_category_name: 图片分类名称，最大长度20字符，中文字符算2个字符，不能为空
        :param parent_id: 图片分类的父分类,一级分类的parent_id为0,二级分类的则为其父分类的picture_category_id
        """
        return self._top_request(
            "taobao.picture.category.add",
            {
                "picture_category_name": picture_category_name,
                "parent_id": parent_id
            },
            result_processor=lambda x: x["picture_category"]
        )

    def taobao_picture_category_update(
            self,
            category_id,
            category_name='',
            parent_id=''
    ):
        """
        更新图片分类
        更新图片分类的名字，或者更新图片分类的父分类（即分类移动）。只能移动2级分类到非2级分类，默认分类和1级分类不可移动。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10909

        :param category_id: 要更新的图片分类的id
        :param category_name: 图片分类的新名字，最大长度20字符，不能为空
        :param parent_id: 图片分类的新父分类id
        """
        return self._top_request(
            "taobao.picture.category.update",
            {
                "category_id": category_id,
                "category_name": category_name,
                "parent_id": parent_id
            },
            result_processor=lambda x: x["done"]
        )

    def taobao_picture_replace(
            self,
            picture_id,
            image_data
    ):
        """
        替换图片
        替换一张图片，只替换图片数据，图片名称，图片分类等保持不变。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10910

        :param picture_id: 要替换的图片的id，必须大于0
        :param image_data: 图片二进制文件流,不能为空,允许png、jpg、gif图片格式
        """
        return self._top_request(
            "taobao.picture.replace",
            {
                "picture_id": picture_id,
                "image_data": image_data
            },
            result_processor=lambda x: x["done"]
        )

    def taobao_picture_update(
            self,
            picture_id,
            new_name
    ):
        """
        修改图片名字
        修改指定图片的图片名
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10912

        :param picture_id: 要更改名字的图片的id
        :param new_name: 新的图片名，最大长度50字符，不能为空
        """
        return self._top_request(
            "taobao.picture.update",
            {
                "picture_id": picture_id,
                "new_name": new_name
            },
            result_processor=lambda x: x["done"]
        )

    def taobao_picture_userinfo_get(
            self
    ):
        """
        查询图片空间用户的信息
        查询用户的图片空间使用信息，包括：订购量，已使用容量，免费容量，总的可使用容量，订购有效期，剩余容量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10914

        """
        return self._top_request(
            "taobao.picture.userinfo.get",
            result_processor=lambda x: x["user_info"]
        )

    def taobao_picture_isreferenced_get(
            self,
            picture_id
    ):
        """
        图片是否被引用
        查询图片是否被引用，被引用返回true，未被引用返回false
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10921

        :param picture_id: 图片id
        """
        return self._top_request(
            "taobao.picture.isreferenced.get",
            {
                "picture_id": picture_id
            },
            result_processor=lambda x: x["is_referenced"]
        )

    def taobao_media_file_add(
            self,
            dir_id,
            name,
            file_data,
            biz_code,
            ext=''
    ):
        """
        多媒体平台文件添加
        用户通过top上传文件到多媒体平台
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11028

        :param dir_id: 文件属于的那个目录的目录编号
        :param name: 上传文件的名称
        :param file_data: 文件
        :param biz_code: 接入多媒体平台的业务code
                         每个应用有一个特有的业务code
        :param ext: 额外信息
        """
        return self._top_request(
            "taobao.media.file.add",
            {
                "dir_id": dir_id,
                "name": name,
                "file_data": file_data,
                "biz_code": biz_code,
                "ext": ext
            },
            result_processor=lambda x: x["file"]
        )

    def taobao_picture_pictures_get(
            self,
            start_date='',
            picture_category_id='',
            order_by='time:desc',
            title='',
            page_size='40',
            end_date='',
            current_page='1',
            start_modified_date='',
            deleted='',
            picture_id='',
            client_type='client:all',
            urls='',
            is_https='false'
    ):
        """
        图片获取
        图片空间对外的图片获取接口，该接口只针对分页获取，获取某一页的图片，该接口不支持总数的查询asd
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25591

        :param start_date: 查询上传结束时间点,格式:yyyy-MM-dd HH:mm:ss
        :param picture_category_id: 图片分类
        :param order_by: 图片查询结果排序,time:desc按上传时间从晚到早(默认), time:asc按上传时间从早到晚,sizes:desc按图片从大到小，sizes:asc按图片从小到大,默认time:desc
        :param title: 图片标题,最大长度50字符,中英文都算一字符
        :param page_size: 每页条数.每页返回最多返回100条,默认值40
        :param end_date: 结束时间
        :param current_page: 页码.传入值为1代表第一页,传入值为2代表第二页,依此类推,默认值为1
        :param start_modified_date: 图片被修改的时间点，格式:yyyy-MM-dd HH:mm:ss。查询此修改时间点之后到目前的图片。
        :param deleted: 是否删除,deleted代表没有删除
        :param picture_id: 图片ID
        :param client_type: 图片使用，如果是pc宝贝detail使用，设置为client:computer，查询出来的图片是符合pc的宝贝detail显示的如果是手机宝贝detail使用，设置为client:phone，查询出来的图片是符合手机的宝贝detail显示的,默认值是全部
        :param urls: 图片url查询接口
        :param is_https: 是否获取https的链接
        """
        return self._top_request(
            "taobao.picture.pictures.get",
            {
                "start_date": start_date,
                "picture_category_id": picture_category_id,
                "order_by": order_by,
                "title": title,
                "page_size": page_size,
                "end_date": end_date,
                "current_page": current_page,
                "start_modified_date": start_modified_date,
                "deleted": deleted,
                "picture_id": picture_id,
                "client_type": client_type,
                "urls": urls,
                "is_https": is_https
            },
            result_processor=lambda x: x["pictures"]
        )

    def taobao_picture_pictures_count(
            self,
            start_date='',
            picture_category_id='',
            title='',
            end_date='',
            start_modified_date='',
            deleted='',
            picture_id='',
            client_type='client:all'
    ):
        """
        图片总数查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25592

        :param start_date: 查询上传开始时间点,格式:yyyy-MM-dd HH:mm:ss
        :param picture_category_id: 图片分类
        :param title: 文件名
        :param end_date: 查询上传结束时间点,格式:yyyy-MM-dd HH:mm:ss
        :param start_modified_date: 图片被修改的时间点，格式:yyyy-MM-dd HH:mm:ss。查询此修改时间点之后到目前的图片。
        :param deleted: 是否删除,undeleted代表没有删除,deleted表示删除
        :param picture_id: 图片ID
        :param client_type: 图片使用，如果是pc宝贝detail使用，设置为client:computer，查询出来的图片是符合pc的宝贝detail显示的如果是手机宝贝detail使用，设置为client:phone，查询出来的图片是符合手机的宝贝detail显示的,默认值是全部
        """
        return self._top_request(
            "taobao.picture.pictures.count",
            {
                "start_date": start_date,
                "picture_category_id": picture_category_id,
                "title": title,
                "end_date": end_date,
                "start_modified_date": start_modified_date,
                "deleted": deleted,
                "picture_id": picture_id,
                "client_type": client_type
            },
            result_processor=lambda x: x["totals"]
        )

    def taobao_interactive_list_getbyuser(
            self,
            current_page='1',
            page_size='10'
    ):
        """
        用户获取视频互动列表
        根据用户来获取用户编辑的互动列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27943

        :param current_page: 当前页
        :param page_size: 每页多少
        """
        return self._top_request(
            "taobao.interactive.list.getbyuser",
            {
                "current_page": current_page,
                "page_size": page_size
            }
        )

    def taobao_media_video_list(
            self,
            search_condition
    ):
        """
        获取商家视频列表
        用于获取授权商家的视频列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27990

        :param search_condition: 搜索条件
        """
        return self._top_request(
            "taobao.media.video.list",
            {
                "search_condition": search_condition
            }
        )


class TbZiZhangHaoGuanLi(DingTalkBaseAPI):
    """
    子账号管理API
    """

    def taobao_sellercenter_subusers_get(
            self,
            nick
    ):
        """
        查询指定账户的子账号列表
        根据主账号nick查询该账号下所有的子账号列表，只能查询属于自己的账号信息 (主账号以及所属子账号)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10762

        :param nick: 表示卖家昵称
        """
        return self._top_request(
            "taobao.sellercenter.subusers.get",
            {
                "nick": nick
            },
            result_processor=lambda x: x["subusers"]
        )

    def taobao_sellercenter_user_permissions_get(
            self,
            nick
    ):
        """
        获取指定用户的权限集合
        获取指定用户的权限集合，并不组装成树。如果是主账号，返回所有的权限列表；如果是子账号，返回所有已授权的权限。只能查询属于自己的账号信息 (如果是主账号，则是主账号以及所属子账号，如果是子账号则是对应主账号以及所属子账号)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10763

        :param nick: 用户标识，次入参必须为子账号比如zhangsan:cool。如果只输入主账号zhangsan，将报错。
        """
        return self._top_request(
            "taobao.sellercenter.user.permissions.get",
            {
                "nick": nick
            },
            result_processor=lambda x: x["permissions"]
        )

    def taobao_sellercenter_subuser_permissions_roles_get(
            self,
            nick
    ):
        """
        查询指定的子账号的权限和角色信息
        查询指定的子账号的被直接赋予的权限信息和角色信息。<br/>返回对象中包括直接赋予子账号的权限点信息、被赋予的角色以及角色的对应权限点信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10814

        :param nick: 子账号昵称(子账号标识)
        """
        return self._top_request(
            "taobao.sellercenter.subuser.permissions.roles.get",
            {
                "nick": nick
            },
            result_processor=lambda x: x["subuser_permission"]
        )

    def taobao_sellercenter_rolemembers_get(
            self,
            role_id
    ):
        """
        获取指定卖家和指定角色的下属员工列表
        获取指定卖家的角色下属员工列表，只能获取属于登陆者自己的信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10815

        :param role_id: 角色id
        """
        return self._top_request(
            "taobao.sellercenter.rolemembers.get",
            {
                "role_id": role_id
            },
            result_processor=lambda x: x["subusers"]
        )

    def taobao_sellercenter_roles_get(
            self,
            nick
    ):
        """
        获取指定卖家的角色列表
        获取指定卖家的角色列表，只能获取属于登陆者自己的信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10816

        :param nick: 卖家昵称(只允许查询自己的信息：当前登陆者)
        """
        return self._top_request(
            "taobao.sellercenter.roles.get",
            {
                "nick": nick
            },
            result_processor=lambda x: x["roles"]
        )

    def taobao_sellercenter_role_info_get(
            self,
            role_id
    ):
        """
        获取指定角色信息
        获取指定角色的信息。只能查询属于自己的角色信息 (主账号或者某个主账号的子账号登陆，只能查询属于该主账号的角色信息)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10817

        :param role_id: 角色id
        """
        return self._top_request(
            "taobao.sellercenter.role.info.get",
            {
                "role_id": role_id
            },
            result_processor=lambda x: x["role"]
        )

    def taobao_sellercenter_role_add(
            self,
            name,
            nick,
            description='',
            permission_codes=''
    ):
        """
        子账号角色的新增（指定卖家）
        给指定的卖家创建新的子账号角色<br/><br/>如果需要授权的权限点有下级权限点或上级权限点，把该权限点的父权限点和该权限点的所有子权限都一并做赋权操作，并递归处理<br/>例如：权限点列表如下<br/><br/>code=sell 宝贝管理<br/><br/>---------|code=sm 店铺管理<br/><br/>---------|---------|code=sm-design 如店铺装修<br/><br/>---------|---------|---------|code=sm-tbd-visit内店装修入口<br/><br/>---------|---------|---------|code=sm-tbd-publish内店装修发布<br/><br/>---------|---------|code=phone 手机淘宝店铺<br/><br/>调用改接口给code=sm-design店铺装修赋权时，同时会将下列权限点都赋予默认角色<br/><br/>code=sell 宝贝管理<br/><br/>---------|code=sm 店铺管理<br/><br/>---------|---------|code=sm-design 如店铺装修<br/><br/>---------|---------|---------|code=sm-tbd-visit内店装修入口<br/><br/>---------|---------|---------|code=sm-tbd-publish内店装修发布<br/>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10820

        :param name: 角色名
        :param nick: 表示卖家昵称
        :param description: 角色描述
        :param permission_codes: 需要授权的权限点permission_code列表,以','分割.其code值可以通过调用taobao.sellercenter.user.permissions.get返回，其中permission.is_authorize=1的权限点可以通过本接口授权给对应角色。
        """
        return self._top_request(
            "taobao.sellercenter.role.add",
            {
                "name": name,
                "nick": nick,
                "description": description,
                "permission_codes": permission_codes
            },
            result_processor=lambda x: x["role"]
        )

    def taobao_subusers_get(
            self,
            user_nick
    ):
        """
        获取指定账户的子账号简易信息列表
        获取主账号下的子账号简易账号信息集合。（只能通过主账号登陆并且查询该属于主账号的子账号信息）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21686

        :param user_nick: 主账号用户名
        """
        return self._top_request(
            "taobao.subusers.get",
            {
                "user_nick": user_nick
            },
            result_processor=lambda x: x["subaccounts"]
        )

    def taobao_subuser_fullinfo_get(
            self,
            sub_id='',
            fields='',
            sub_nick=''
    ):
        """
        获取指定账户子账号的详细信息
        获取指定账户子账号的详细信息，其中包括子账号的账号信息以及员工、部门、职务信息（只能通过主账号登陆并查询属于该主账号下的某个子账号详细信息）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21687

        :param sub_id: 子账号ID（传参中sub_id和sub_nick至少需要其中一个，若sub_id与sub_nick同时传入并且合法，那么sub_nick优先，以sub_nick查询子账号）
        :param fields: 传入所需要的参数信息（若不需要获取子账号或主账号的企业邮箱地址，则无需传入该参数；若需要获取子账号或主账号的企业邮箱地址，则需要传入fields；可选参数值为subuser_email和user_email，传入其他参数值均无效；两个参数都需要则以逗号隔开传入即可，例如：subuser_email,user_email）
        :param sub_nick: 子账号用户名（传参中sub_id和sub_nick至少需要其中一个，若sub_id与sub_nick同时传入并且合法，那么sub_nick优先，以sub_nick查询子账号）
        """
        return self._top_request(
            "taobao.subuser.fullinfo.get",
            {
                "sub_id": sub_id,
                "fields": fields,
                "sub_nick": sub_nick
            },
            result_processor=lambda x: x["sub_fullinfo"]
        )

    def taobao_subuser_departments_get(
            self,
            user_nick
    ):
        """
        获取指定账户的所有部门列表
        获取指定账户的所有部门列表，其实包括有每个部门的ID、父部门ID、部门名称（通过主账号登陆只能查询属于该主账号下的所有部门信息）。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21689

        :param user_nick: 主账号用户名
        """
        return self._top_request(
            "taobao.subuser.departments.get",
            {
                "user_nick": user_nick
            },
            result_processor=lambda x: x["departments"]
        )

    def taobao_subuser_dutys_get(
            self,
            user_nick
    ):
        """
        获取指定账户的所有职务信息列表
        通过主账号Nick获取该账户下的所有职务信息，职务信息中包括职务ID、职务名称以及职务等级（通过主账号登陆只能获取属于该主账号下的职务信息）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21696

        :param user_nick: 主账号用户名
        """
        return self._top_request(
            "taobao.subuser.dutys.get",
            {
                "user_nick": user_nick
            },
            result_processor=lambda x: x["dutys"]
        )

    def taobao_subuser_employee_add(
            self,
            sub_id,
            department_id,
            employee_name,
            sex,
            duty_id='',
            entry_date='',
            employee_num='',
            employee_nickname='',
            work_location='',
            office_phone='',
            personal_mobile='',
            personal_email='',
            id_card_num='',
            leader_id=''
    ):
        """
        新增子账号的员工信息
        给指定子账号新增一个员工信息（通过主账号登陆只能新建属于该主账号的员工信息）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21697

        :param sub_id: 子账号ID
        :param department_id: 当前员工所属部门ID
        :param employee_name: 员工姓名
        :param sex: 员工性别 1：男; 2:女
        :param duty_id: 当前员工担任职务ID
        :param entry_date: 员工入职时间
        :param employee_num: 员工工号(可以用大小写英文字母和数字)
        :param employee_nickname: 员工花名
        :param work_location: 工作地点
        :param office_phone: 办公电话
        :param personal_mobile: 员工手机号码
        :param personal_email: 员工私人邮箱
        :param id_card_num: 员工身份证号码
        :param leader_id: 直接上级的员工ID
        """
        return self._top_request(
            "taobao.subuser.employee.add",
            {
                "sub_id": sub_id,
                "department_id": department_id,
                "employee_name": employee_name,
                "sex": sex,
                "duty_id": duty_id,
                "entry_date": entry_date,
                "employee_num": employee_num,
                "employee_nickname": employee_nickname,
                "work_location": work_location,
                "office_phone": office_phone,
                "personal_mobile": personal_mobile,
                "personal_email": personal_email,
                "id_card_num": id_card_num,
                "leader_id": leader_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_subuser_info_update(
            self,
            sub_id,
            is_disable_subaccount='',
            is_dispatch=''
    ):
        """
        修改指定账户子账号的基本信息
        修改指定账户子账号的基本信息（通过主账号登陆只能修改属于该主账号的子账号基本信息）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21698

        :param sub_id: 子账号ID
        :param is_disable_subaccount: 是否停用子账号 true:表示停用该子账号false:表示开启该子账号
        :param is_dispatch: 子账号是否参与分流 true:参与分流 false:不参与分流
        """
        return self._top_request(
            "taobao.subuser.info.update",
            {
                "sub_id": sub_id,
                "is_disable_subaccount": is_disable_subaccount,
                "is_dispatch": is_dispatch
            },
            result_processor=lambda x: x["is_success"]
        )


class TbFuWuPingTai(DingTalkBaseAPI):
    """
    服务平台API
    """

    def taobao_vas_subscribe_get(
            self,
            article_code,
            nick
    ):
        """
        订购关系查询
        用于ISV根据登录进来的淘宝会员名查询该为该会员开通哪些收费项目，ISV只能查询自己名下的应用及收费项目的订购情况
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10586

        :param article_code: 商品编码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得该应用的商品代码
        :param nick: 淘宝会员名
        """
        return self._top_request(
            "taobao.vas.subscribe.get",
            {
                "article_code": article_code,
                "nick": nick
            },
            result_processor=lambda x: x["article_user_subscribes"]
        )

    def taobao_vas_order_search(
            self,
            article_code,
            item_code='',
            nick='',
            start_created='',
            end_created='',
            biz_type='0',
            biz_order_id='0',
            order_id='0',
            page_size='',
            page_no=''
    ):
        """
        订单记录导出
        用于ISV查询自己名下的应用及收费项目的订单记录（已付款订单）。<br/>建议用于查询前一日的历史记录，不适合用作实时数据查询。<br/>现在只能查询90天以内的数据<br/>该接口限制每分钟所有appkey调用总和只能有800次。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10587

        :param article_code: 应用收费代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得该应用的收费代码
        :param item_code: 收费项目代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得收费项目代码
        :param nick: 淘宝会员名
        :param start_created: 订单创建时间（订购时间）起始值（当start_created和end_created都不填写时，默认返回最近90天的数据）
        :param end_created: 订单创建时间（订购时间）结束值
        :param biz_type: 订单类型，1=新订 2=续订 3=升级 4=后台赠送 5=后台自动续订 6=订单审核后生成订购关系（暂时用不到） 空=全部
        :param biz_order_id: 订单号
        :param order_id: 子订单号
        :param page_size: 一页包含的记录数
        :param page_no: 页码
        """
        return self._top_request(
            "taobao.vas.order.search",
            {
                "article_code": article_code,
                "item_code": item_code,
                "nick": nick,
                "start_created": start_created,
                "end_created": end_created,
                "biz_type": biz_type,
                "biz_order_id": biz_order_id,
                "order_id": order_id,
                "page_size": page_size,
                "page_no": page_no
            }
        )

    def taobao_vas_subsc_search(
            self,
            article_code,
            page_size='',
            page_no='',
            item_code='',
            start_deadline='',
            end_deadline='',
            status='',
            autosub='',
            expire_notice='',
            nick=''
    ):
        """
        订购记录导出
        用于ISV查询自己名下的应用及收费项目的订购记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10588

        :param article_code: 应用收费代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得该应用的收费代码
        :param page_size: 一页包含的记录数
        :param page_no: 页码
        :param item_code: 收费项目代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得收费项目代码
        :param start_deadline: 到期时间起始值（当start_deadline和end_deadline都不填写时，默认返回最近90天的数据）
        :param end_deadline: 到期时间结束值
        :param status: 订购记录状态，1=有效 2=过期 空=全部
        :param autosub: 是否自动续费，true=自动续费 false=非自动续费 空=全部
        :param expire_notice: 是否到期提醒，true=到期提醒 false=非到期提醒 空=全部
        :param nick: 淘宝会员名
        """
        return self._top_request(
            "taobao.vas.subsc.search",
            {
                "article_code": article_code,
                "page_size": page_size,
                "page_no": page_no,
                "item_code": item_code,
                "start_deadline": start_deadline,
                "end_deadline": end_deadline,
                "status": status,
                "autosub": autosub,
                "expire_notice": expire_notice,
                "nick": nick
            }
        )

    def taobao_fuwu_sale_link_gen(
            self,
            param_str,
            nick=''
    ):
        """
        服务平台营销链接生成接口
        服务商通过使用该接口来产生营销链接，通过把这种链接发送给商家来做自定义人群的服务营销<br><br/>注：session是param_str这个参数串创建者生成的session，这个创建者与入参中的nick是不一致的。例如：A开发者创建了一个param_str的字符串，要为B商家生成一个营销链接，session必须是A开发者创建的session。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21642

        :param param_str: 从服务商后台，营销链接功能中生成的参数串直接复制使用。不要修改，否则抛错。
        :param nick: 用户需要营销的目标人群中的用户nick
        """
        return self._top_request(
            "taobao.fuwu.sale.link.gen",
            {
                "param_str": param_str,
                "nick": nick
            },
            result_processor=lambda x: x["url"]
        )

    def taobao_fuwu_scores_get(
            self,
            current_page,
            date,
            page_size='40'
    ):
        """
        服务平台评价查询接口
        根据日期、查询appkey对应服务评价，每次调用只能查询某一天服务评价信息，可设置分页查询，页大小最大为100，非实时接口，延迟时间为30分钟
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22111

        :param current_page: 当前页
        :param date: 评价日期，查询某一天的评价
        :param page_size: 每页获取条数。默认值40，最小值1，最大值100。
        """
        return self._top_request(
            "taobao.fuwu.scores.get",
            {
                "current_page": current_page,
                "date": date,
                "page_size": page_size
            },
            result_processor=lambda x: x["score_result"]
        )

    def taobao_weike_subscinfo_get(
            self,
            seller_name='',
            start_time='',
            end_time='',
            page_num=''
    ):
        """
        需求订单查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23058

        :param seller_name: 商家旺旺名称
        :param start_time: 时间范围开始时间
        :param end_time: 时间范围结束时间
        :param page_num: 页码
        """
        return self._top_request(
            "taobao.weike.subscinfo.get",
            {
                "seller_name": seller_name,
                "start_time": start_time,
                "end_time": end_time,
                "page_num": page_num
            }
        )

    def taobao_weike_performance_put(
            self,
            id='',
            per_info_wrapper=None
    ):
        """
        提交客服绩效接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23059

        :param id: 订单id
        :param per_info_wrapper: 绩效数据封装类
        """
        return self._top_request(
            "taobao.weike.performance.put",
            {
                "id": id,
                "per_info_wrapper": per_info_wrapper
            }
        )

    def taobao_fuwu_sku_get(
            self,
            article_code,
            nick
    ):
        """
        获取内购服务及SKU详情
        通过服务code和用户nick，获取该服务对应的收费项目的sku信息，包括价格、可购买周期、用户能否购买等信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25685

        :param article_code: 服务code
        :param nick: 用户的淘宝nick
        """
        return self._top_request(
            "taobao.fuwu.sku.get",
            {
                "article_code": article_code,
                "nick": nick
            }
        )

    def taobao_fuwu_sp_confirm_apply(
            self,
            param_income_confirm_d_t_o
    ):
        """
        内购服务确认单申请接口
        isv能通过该接口发起确认申请单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25686

        :param param_income_confirm_d_t_o: 确认单申请
        """
        return self._top_request(
            "taobao.fuwu.sp.confirm.apply",
            {
                "param_income_confirm_d_t_o": param_income_confirm_d_t_o
            },
            result_processor=lambda x: x["apply_result"]
        )

    def taobao_fuwu_purchase_order_confirm(
            self,
            param_order_confirm_query_d_t_o
    ):
        """
        服务市场内购服务下单接口
        通过传入服务市场商品的itemcode等信息，返回给服务商内购服务的下单链接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25687

        :param param_order_confirm_query_d_t_o: 内购服务下单接口参数
        """
        return self._top_request(
            "taobao.fuwu.purchase.order.confirm",
            {
                "param_order_confirm_query_d_t_o": param_order_confirm_query_d_t_o
            },
            result_processor=lambda x: x["url"]
        )

    def taobao_fuwu_sp_billreord_add(
            self,
            param_bill_record_d_t_o
    ):
        """
        内购服务确认单明细上传接口
        isv能通过该接口上传确认单明细数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25688

        :param param_bill_record_d_t_o: 确认单的账单明细
        """
        return self._top_request(
            "taobao.fuwu.sp.billreord.add",
            {
                "param_bill_record_d_t_o": param_bill_record_d_t_o
            },
            result_processor=lambda x: x["add_result"]
        )

    def taobao_fuwu_purchase_order_pay(
            self,
            appkey,
            order_id='',
            out_order_id='',
            device_type=''
    ):
        """
        内购服务订单付款页获取接口
        通过接口获取某一订单的付款页面链接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25689

        :param appkey: APPKEY，必填
        :param order_id: 订单号，与外部订单号二选一
        :param out_order_id: 外部订单号，使用该参数完成查询订单等操作，与外部订单号二选一
        :param device_type: 设备类型，目前只支持PC，可选
        """
        return self._top_request(
            "taobao.fuwu.purchase.order.pay",
            {
                "appkey": appkey,
                "order_id": order_id,
                "out_order_id": out_order_id,
                "device_type": device_type
            },
            result_processor=lambda x: x["url"]
        )

    def tmall_service_settleadjustment_search(
            self,
            end_time,
            start_time
    ):
        """
        服务商15分钟获取数据
        天猫服务平台，按修改时间，时间间隔在15中内（包含15分钟），获取调整单数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27437

        :param end_time: 结束时间
        :param start_time: 开始时间
        """
        return self._top_request(
            "tmall.service.settleadjustment.search",
            {
                "end_time": end_time,
                "start_time": start_time
            }
        )

    def taobao_weike_eservice_schedule_get(
            self,
            start_date,
            end_date,
            order_id='',
            seller_nick='',
            sp_nick=''
    ):
        """
        客服排班信息查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27489

        :param start_date: 起始日期，起始日期和结束日期跨度不能超过31天
        :param end_date: 结束日期，起始日期和结束日期跨度不能超过31天
        :param order_id: 订单ID，orderId、sellerNick、spNick三者不能同时为Null
        :param seller_nick: 商家子账号昵称，orderId、sellerNick、spNick三者不能同时为Null
        :param sp_nick: 服务商子账号昵称，orderId、sellerNick、spNick三者不能同时为Null
        """
        return self._top_request(
            "taobao.weike.eservice.schedule.get",
            {
                "start_date": start_date,
                "end_date": end_date,
                "order_id": order_id,
                "seller_nick": seller_nick,
                "sp_nick": sp_nick
            }
        )

    def taobao_weike_eservice_subusers_get(
            self,
            order_id
    ):
        """
        客服外包订单分配的商家子账号列表
        获取客服外包订单分配的商家子账号列表，以及授权状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27490

        :param order_id: 订单ID
        """
        return self._top_request(
            "taobao.weike.eservice.subusers.get",
            {
                "order_id": order_id
            }
        )

    def taobao_weike_eservice_schedule_put(
            self,
            order_id,
            cs_schedulings
    ):
        """
        提交客服排班信息
        添加、更新、删除排班信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27505

        :param order_id: 订单ID
        :param cs_schedulings: 按天排班信息
        """
        return self._top_request(
            "taobao.weike.eservice.schedule.put",
            {
                "order_id": order_id,
                "cs_schedulings": cs_schedulings
            }
        )

    def taobao_weike_eservice_order_get(
            self,
            start_date='',
            scheduling_state='',
            seller_nick='',
            page_size='',
            end_date='',
            order_id_list='',
            page_num=''
    ):
        """
        客服外包订单查询
        用于客服外包中服务商查询订单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27610

        :param start_date: 订单服务开始日期
        :param scheduling_state: 订单是否可以排班
        :param seller_nick: 商家昵称
        :param page_size: 每页记录数（默认20，最大不超过20）
        :param end_date: 订单服务结束日期
        :param order_id_list: 订单ID列表，最大不超过20个（这个参数指定后，其它过滤条件失效）
        :param page_num: 页码（默认为1）
        """
        return self._top_request(
            "taobao.weike.eservice.order.get",
            {
                "start_date": start_date,
                "scheduling_state": scheduling_state,
                "seller_nick": seller_nick,
                "page_size": page_size,
                "end_date": end_date,
                "order_id_list": order_id_list,
                "page_num": page_num
            }
        )

    def tmall_car_lease_synchronizeplans(
            self,
            item_id,
            plans
    ):
        """
        同步租赁方案
        租赁公司同步还款计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28658

        :param item_id: 商品id
        :param plans: 租赁计划
        """
        return self._top_request(
            "tmall.car.lease.synchronizeplans",
            {
                "item_id": item_id,
                "plans": plans
            }
        )

    def tmall_car_lease_reserve(
            self,
            order_id,
            text,
            vin,
            flag,
            buyer_nick,
            buyer_id='0'
    ):
        """
        整车租车回传预约信息
        租赁公司回传预约到店信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28659

        :param order_id: 订单id
        :param text: 文案
        :param vin: 车架号
        :param flag: 1 代表 车辆到店，已预约用户到店提车   ; 2 车辆到店，未能联系到用户
        :param buyer_nick: 买家昵称
        :param buyer_id: 买家id
        """
        return self._top_request(
            "tmall.car.lease.reserve",
            {
                "order_id": order_id,
                "text": text,
                "vin": vin,
                "flag": flag,
                "buyer_nick": buyer_nick,
                "buyer_id": buyer_id
            }
        )

    def tmall_car_lease_riskcallback(
            self,
            credit_info=None
    ):
        """
        整车租赁风控模型回调
        租赁公司回调风控结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28660

        :param credit_info: 授信结果
        """
        return self._top_request(
            "tmall.car.lease.riskcallback",
            {
                "credit_info": credit_info
            }
        )

    def tmall_car_lease_consume(
            self,
            cosume_code_req_d_t_o=None
    ):
        """
        汽车租赁核销
        租赁公司回传信息，核销
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28661

        :param cosume_code_req_d_t_o: 核销请求
        """
        return self._top_request(
            "tmall.car.lease.consume",
            {
                "cosume_code_req_d_t_o": cosume_code_req_d_t_o
            }
        )

    def tmall_car_lease_tailpaymentback(
            self,
            tail_payment_d_t_o=None
    ):
        """
        尾款处置方案回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28683

        :param tail_payment_d_t_o: 尾款方案
        """
        return self._top_request(
            "tmall.car.lease.tailpaymentback",
            {
                "tail_payment_d_t_o": tail_payment_d_t_o
            }
        )

    def tmall_car_lease_itemcarinfo(
            self,
            item_id='0'
    ):
        """
        整车租赁商品四级车型信息
        整车租赁项目发布宝贝需要4级车型库，4级车型库信息需要回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29001

        :param item_id: 商品id
        """
        return self._top_request(
            "tmall.car.lease.itemcarinfo",
            {
                "item_id": item_id
            }
        )

    def tmall_car_lease_fourlevelcar(
            self,
            value_id='0',
            property_id='0'
    ):
        """
        获取四级车型库
        整车租赁和商家对接之后，商家需要获取车型信息，调用接口同步方案
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29733

        :param value_id: 属性值id
        :param property_id: 属性id
        """
        return self._top_request(
            "tmall.car.lease.fourlevelcar",
            {
                "value_id": value_id,
                "property_id": property_id
            }
        )

    def tmall_car_trydrive_updatereserveinfo(
            self,
            app_name='tmall',
            car_no='浙A12345',
            id_card='1321232131',
            mobile='12323344',
            name='张三',
            uuid='1111',
            status='1'
    ):
        """
        更新试驾预约单信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        天猫汽车嘉年华预约试驾，需要和大搜车进行对接，大搜车和支付宝对接之后更新预约
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31461

        :param app_name: 外部系统参数
        :param car_no: 车牌号
        :param id_card: 身份证
        :param mobile: 手机号
        :param name: 姓名
        :param uuid: 唯一申请号，必填，风控的时候已经传入
        :param status: 6:授权通过,7:授权失败,1:风控拒绝,2:风控通过,12:还车成功，13:退款成功
        """
        return self._top_request(
            "tmall.car.trydrive.updatereserveinfo",
            {
                "app_name": app_name,
                "car_no": car_no,
                "id_card": id_card,
                "mobile": mobile,
                "name": name,
                "uuid": uuid,
                "status": status
            }
        )

    def tmall_car_leaseorder_get(
            self,
            order_id='0'
    ):
        """
        获取租赁订单信息
        卖家通过供销平台获取代销商的订单信息，但是部分情况下网商银行订单号获取不到，需要提供接口或者工具给卖家
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34313

        :param order_id: 订单号
        """
        return self._top_request(
            "tmall.car.leaseorder.get",
            {
                "order_id": order_id
            }
        )

    def tmall_car_contract_download(
            self,
            order_id='0',
            html='false'
    ):
        """
        合同下载
        目前天猫开新车会在线上签署一份合同，协议，需要一个个在已卖出打开，另存为pdf，人工一个个下载比较麻烦，期望通过接口直接读取pdf；
        因为比较耗时，建议一个个下载，假设并发下载，很可能限流，每天的调用量有限；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34314

        :param order_id: 天猫订单号
        :param html: 是否下载html，true是html，false是pdf， html速度会快一点
        """
        return self._top_request(
            "tmall.car.contract.download",
            {
                "order_id": order_id,
                "html": html
            }
        )

    def tmall_servicecenter_tp_funds_recover_query(
            self,
            query
    ):
        """
        服务商资金权益逆向扣回的查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37065

        :param query: query入参
        """
        return self._top_request(
            "tmall.servicecenter.tp.funds.recover.query",
            {
                "query": query
            }
        )

    def tmall_servicecenter_tp_funds_send_query(
            self,
            query
    ):
        """
        服务商资金权益发放的查询接口
        服务商资金权益发放结果的查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37069

        :param query: 入参对象
        """
        return self._top_request(
            "tmall.servicecenter.tp.funds.send.query",
            {
                "query": query
            }
        )

    def tmall_msf_verify(
            self,
            shop_id='',
            biz_type='',
            code=''
    ):
        """
        喵师傅核销接口
        msf服务核销的top接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37992

        :param shop_id: 111
        :param biz_type: 111
        :param code: 111
        """
        return self._top_request(
            "tmall.msf.verify",
            {
                "shop_id": shop_id,
                "biz_type": biz_type,
                "code": code
            }
        )

    def tmall_msf_receive(
            self,
            shop_id='',
            biz_type='',
            code=''
    ):
        """
        签收接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37993

        :param shop_id: 1
        :param biz_type: 1
        :param code: 1
        """
        return self._top_request(
            "tmall.msf.receive",
            {
                "shop_id": shop_id,
                "biz_type": biz_type,
                "code": code
            }
        )

    def tmall_car_lease_freedownpayment_put(
            self,
            pre_end_time,
            pre_start_time,
            item_id,
            time_range_list,
            ref_activity_id=''
    ):
        """
        同步直租车免首付商品活动信息
        汽车行业直租车免首付需求中，用与对商品打标，活动范围设置，在消费者端商品详情页、订单等环节透出，表示该商品为直租免首付商品。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43845

        :param pre_end_time: 活动预热结束时间:格式：yyyy.MM.dd HH:mm:ss
        :param pre_start_time: 活动预热开始时间:格式：yyyy.MM.dd HH:mm:ss
        :param item_id: 商品ID
        :param time_range_list: 活动时间范围节点(json格式字符串)：<br/> 开始时间(startTime),格式：yyyy.MM.dd HH:mm:ss <br/>  结束时间(endTime),格式：yyyy.MM.dd HH:mm:ss <br/>  名额(amount)
        :param ref_activity_id: 外部活动ID
        """
        return self._top_request(
            "tmall.car.lease.freedownpayment.put",
            {
                "pre_end_time": pre_end_time,
                "pre_start_time": pre_start_time,
                "item_id": item_id,
                "time_range_list": time_range_list,
                "ref_activity_id": ref_activity_id
            }
        )

    def tmall_car_lease_item_activity_get(
            self
    ):
        """
        查询汽车租赁活动信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43876

        """
        return self._top_request(
            "tmall.car.lease.item.activity.get"
        )


class TbTuiKuan(DingTalkBaseAPI):
    """
    退款API
    """

    def taobao_refunds_apply_get(
            self,
            fields,
            status='',
            seller_nick='',
            type='',
            page_no='1',
            page_size='40'
    ):
        """
        查询买家申请的退款列表
        查询买家申请的退款列表，且查询外店的退款列表时需要指定交易类型
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=51

        :param fields: 需要返回的字段。目前支持有：refund_id, tid, title, buyer_nick, seller_nick, total_fee, status, created, refund_fee
        :param status: 退款状态，默认查询所有退款状态的数据，除了默认值外每次只能查询一种状态。<br/>WAIT_SELLER_AGREE(买家已经申请退款，等待卖家同意) <br/>WAIT_BUYER_RETURN_GOODS(卖家已经同意退款，等待买家退货) <br/>WAIT_SELLER_CONFIRM_GOODS(买家已经退货，等待卖家确认收货) <br/>SELLER_REFUSE_BUYER(卖家拒绝退款) <br/>CLOSED(退款关闭) <br/>SUCCESS(退款成功)
        :param seller_nick: 卖家昵称
        :param type: 交易类型列表，一次查询多种类型可用半角逗号分隔，默认同时查询guarantee_trade, auto_delivery的2种类型的数据。<br/>fixed(一口价) <br/>auction(拍卖) <br/>guarantee_trade(一口价、拍卖) <br/>independent_simple_trade(旺店入门版交易) <br/>independent_shop_trade(旺店标准版交易) <br/>auto_delivery(自动发货) <br/>ec(直冲) <br/>cod(货到付款) <br/>fenxiao(分销) <br/>game_equipment(游戏装备) <br/>shopex_trade(ShopEX交易) <br/>netcn_trade(万网交易) <br/>external_trade(统一外部交易)
        :param page_no: 页码。传入值为 1 代表第一页，传入值为 2 代表第二页，依此类推。默认返回的数据是从第一页开始
        :param page_size: 每页条数。取值范围:大于零的整数; 默认值:40;最大值:100
        """
        return self._top_request(
            "taobao.refunds.apply.get",
            {
                "fields": fields,
                "status": status,
                "seller_nick": seller_nick,
                "type": type,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_refund_get(
            self,
            fields,
            refund_id
    ):
        """
        获取单笔退款详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=53

        :param fields: 需要返回的字段。目前支持有：refund_id, alipay_no, tid, oid, buyer_nick, seller_nick, total_fee, status, created, refund_fee, good_status, has_good_return, payment, reason, desc, num_iid, title, price, num, good_return_time, company_name, sid, address, shipping_type, refund_remind_timeout, refund_phase, refund_version, operation_contraint, attribute, outer_id, sku
        :param refund_id: 退款单号
        """
        return self._top_request(
            "taobao.refund.get",
            {
                "fields": fields,
                "refund_id": refund_id
            },
            result_processor=lambda x: x["refund"]
        )

    def taobao_refund_messages_get(
            self,
            fields,
            refund_id,
            page_no='1',
            page_size='40',
            refund_phase=''
    ):
        """
        查询退款留言/凭证列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=124

        :param fields: 需返回的字段列表。可选值：RefundMessage结构体中的所有字段，以半角逗号(,)分隔。
        :param refund_id: 退款单号
        :param page_no: 页码
        :param page_size: 每页条数
        :param refund_phase: 退款阶段，可选值：onsale（售中），aftersale（售后），天猫退款为必传。
        """
        return self._top_request(
            "taobao.refund.messages.get",
            {
                "fields": fields,
                "refund_id": refund_id,
                "page_no": page_no,
                "page_size": page_size,
                "refund_phase": refund_phase
            }
        )

    def taobao_refund_message_add(
            self,
            refund_id,
            content,
            image
    ):
        """
        创建退款留言/凭证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=125

        :param refund_id: 退款编号。
        :param content: 留言内容。最大长度: 400个字节
        :param image: 图片（凭证）。类型: JPG,GIF,PNG;最大为: 500K
        """
        return self._top_request(
            "taobao.refund.message.add",
            {
                "refund_id": refund_id,
                "content": content,
                "image": image
            },
            result_processor=lambda x: x["refund_message"]
        )

    def taobao_refund_refuse(
            self,
            refund_id,
            refuse_message,
            refuse_proof='',
            refund_phase='',
            refund_version='',
            refuse_reason_id=''
    ):
        """
        卖家拒绝退款
        卖家拒绝单笔退款（包含退款和退款退货）交易，要求如下：<br/>1. 传入的refund_id和相应的tid, oid必须匹配<br/>2. 如果一笔订单只有一笔子订单，则tid必须与oid相同<br/>3. 只有卖家才能执行拒绝退款操作<br/>4. 以下三种情况不能退款：卖家未发货；7天无理由退换货；网游订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10480

        :param refund_id: 退款单号
        :param refuse_message: 拒绝退款时的说明信息，长度2-200
        :param refuse_proof: 拒绝退款时的退款凭证，一般是卖家拒绝退款时使用的发货凭证，最大长度130000字节，支持的图片格式：GIF, JPG, PNG。天猫退款为必填项。
        :param refund_phase: 可选值为：售中：onsale，售后：aftersale，天猫退款为必填项。
        :param refund_version: 退款版本号，天猫退款为必填项。
        :param refuse_reason_id: 拒绝原因编号，会提供用户拒绝原因列表供选择
        """
        return self._top_request(
            "taobao.refund.refuse",
            {
                "refund_id": refund_id,
                "refuse_message": refuse_message,
                "refuse_proof": refuse_proof,
                "refund_phase": refund_phase,
                "refund_version": refund_version,
                "refuse_reason_id": refuse_reason_id
            }
        )

    def taobao_rp_refunds_agree(
            self,
            refund_infos,
            code=''
    ):
        """
        同意退款
        卖家同意退款，支持批量退款，只允许子账号操作。淘宝退款一次最多能退20笔，总金额不超过6000元；天猫退款一次最多能退30笔，总金额不超过10000元。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22465

        :param refund_infos: 退款信息，格式：refund_id|amount|version|phase，其中refund_id为退款编号，amount为退款金额（以分为单位），version为退款最后更新时间（时间戳格式），phase为退款阶段（可选值为：onsale, aftersale，天猫退款必值，淘宝退款不需要传），多个退款以半角逗号分隔。
        :param code: 短信验证码，如果退款金额达到一定的数量，后端会返回调用失败，并同时往卖家的手机发送一条短信验证码。接下来用收到的短信验证码再次发起API调用即可完成退款操作。
        """
        return self._top_request(
            "taobao.rp.refunds.agree",
            {
                "refund_infos": refund_infos,
                "code": code
            }
        )

    def taobao_rp_returngoods_agree(
            self,
            refund_id,
            name='',
            address='',
            post='',
            tel='',
            mobile='',
            remark='',
            refund_phase='',
            refund_version='',
            seller_address_id='',
            post_fee_bear_role=''
    ):
        """
        卖家同意退货
        卖家同意退货，支持淘宝和天猫的订单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22466

        :param refund_id: 退款编号
        :param name: 卖家姓名，淘宝退款为必填项。
        :param address: 卖家提供的退货地址，淘宝退款为必填项。
        :param post: 卖家提供的退货地址的邮编，淘宝退款为必填项。
        :param tel: 卖家座机，淘宝退款为必填项。
        :param mobile: 卖家手机，淘宝退款为必填项。
        :param remark: 卖家退货留言，天猫退款为必填项。
        :param refund_phase: 售中：onsale，售后：aftersale，天猫退款为必填项。
        :param refund_version: 退款版本号，天猫退款为必填项。
        :param seller_address_id: 卖家收货地址编号，天猫淘宝退款都为必填项。
        :param post_fee_bear_role: 邮费承担方，买家承担值为1，卖家承担值为0
        """
        return self._top_request(
            "taobao.rp.returngoods.agree",
            {
                "refund_id": refund_id,
                "name": name,
                "address": address,
                "post": post,
                "tel": tel,
                "mobile": mobile,
                "remark": remark,
                "refund_phase": refund_phase,
                "refund_version": refund_version,
                "seller_address_id": seller_address_id,
                "post_fee_bear_role": post_fee_bear_role
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_rp_refund_review(
            self,
            refund_id,
            operator,
            refund_phase,
            refund_version,
            result,
            message
    ):
        """
        审核退款单
        审核退款单，标志是否可用于批量退款，目前仅支持天猫订单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23875

        :param refund_id: 退款单编号
        :param operator: 审核人姓名
        :param refund_phase: 退款阶段，可选值：售中：onsale，售后：aftersale
        :param refund_version: 退款最后更新时间，以时间戳的方式表示
        :param result: 审核是否可用于批量退款，可选值：true（审核通过），false（审核不通过或反审核）
        :param message: 审核留言
        """
        return self._top_request(
            "taobao.rp.refund.review",
            {
                "refund_id": refund_id,
                "operator": operator,
                "refund_phase": refund_phase,
                "refund_version": refund_version,
                "result": result,
                "message": message
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_rp_returngoods_refill(
            self,
            refund_id,
            refund_phase,
            logistics_waybill_no,
            logistics_company_code
    ):
        """
        卖家回填物流信息
        卖家收到货物回填物流信息，如果买家已经回填物流信息，则接口报错，目前仅支持天猫订单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23876

        :param refund_id: 退款单编号
        :param refund_phase: 退款阶段，可选值：售中：onsale，售后：aftersale
        :param logistics_waybill_no: 物流公司运单号
        :param logistics_company_code: 物流公司编号
        """
        return self._top_request(
            "taobao.rp.returngoods.refill",
            {
                "refund_id": refund_id,
                "refund_phase": refund_phase,
                "logistics_waybill_no": logistics_waybill_no,
                "logistics_company_code": logistics_company_code
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_rp_returngoods_refuse(
            self,
            refund_id,
            refund_phase,
            refund_version,
            refuse_proof,
            refuse_reason_id=''
    ):
        """
        卖家拒绝退货
        卖家拒绝退货，目前仅支持天猫退货。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23877

        :param refund_id: 退款编号
        :param refund_phase: 退款服务状态，售后或者售中
        :param refund_version: 退款版本号
        :param refuse_proof: 拒绝退货凭证图片，必须图片格式，大小不能超过5M
        :param refuse_reason_id: 拒绝原因编号，会提供拒绝原因列表供选择
        """
        return self._top_request(
            "taobao.rp.returngoods.refuse",
            {
                "refund_id": refund_id,
                "refund_phase": refund_phase,
                "refund_version": refund_version,
                "refuse_proof": refuse_proof,
                "refuse_reason_id": refuse_reason_id
            }
        )

    def taobao_refund_refusereason_get(
            self,
            refund_id,
            fields,
            refund_phase
    ):
        """
        获取拒绝原因列表
        获取商家拒绝原因列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26204

        :param refund_id: 退款编号
        :param fields: 返回参数
        :param refund_phase: 售中或售后
        """
        return self._top_request(
            "taobao.refund.refusereason.get",
            {
                "refund_id": refund_id,
                "fields": fields,
                "refund_phase": refund_phase
            }
        )

    def taobao_rdc_aligenius_sendgoods_cancel(
            self,
            param
    ):
        """
        取消发货
        提供商家在仅退款中发送取消发货状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29304

        :param param: 请求参数
        """
        return self._top_request(
            "taobao.rdc.aligenius.sendgoods.cancel",
            {
                "param": param
            }
        )

    def taobao_rdc_aligenius_order_returngoods_notify(
            self,
            parent_order_id='',
            refund_return_notes=None
    ):
        """
        退货单创建结果反馈
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31063

        :param parent_order_id: 主订单号
        :param refund_return_notes: 退货单创建结果列表
        """
        return self._top_request(
            "taobao.rdc.aligenius.order.returngoods.notify",
            {
                "parent_order_id": parent_order_id,
                "refund_return_notes": refund_return_notes
            }
        )

    def tmall_dispute_receive_get(
            self,
            fields,
            status='',
            page_size='20',
            use_has_next='',
            type='fixed',
            refund_id='',
            page_no='1',
            buyer_nick='',
            start_modified='',
            end_modified=''
    ):
        """
        天猫逆向纠纷查询
        展示商家所有退款信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33878

        :param fields: 需要返回的字段。目前支持有：refund_id, alipay_no, tid, buyer_nick, seller_nick, status, created, modified, order_status, refund_fee, good_status, show_return_logistic(展现买家退货的物流信息), show_exchange_logistic(展现换货的物流信息), time_out, oid, refund_version, title, num, dispute_request, reason, desc
        :param status: 退款状态，默认查询所有退款状态的数据，除了默认值外每次只能查询一种状态。WAIT_SELLER_AGREE(买家已经申请退款，等待卖家同意);WAIT_BUYER_RETURN_GOODS(卖家已经同意退款，等待买家退货);WAIT_SELLER_CONFIRM_GOODS(买家已经退货，等待卖家确认收货);CLOSED(退款关闭); SUCCESS(退款成功);SELLER_REFUSE_BUYER(卖家拒绝退款);WAIT_BUYER_CONFIRM_REDO_SEND_GOODS(等待买家确认重新邮寄的货物);WAIT_SELLER_CONFIRM_RETURN_ADDRESS(等待卖家确认退货地址);WAIT_SELLER_CONSIGN_GOOGDS(卖家确认收货,等待卖家发货);EXCHANGE_TRANSFORM_TO_REFUND(换货关闭,转退货退款);EXCHANGE_WAIT_BUYER_CONFIRM_GOODS(卖家已发货,等待买家确认收货);POST_FEE_DISPUTE_WAIT_ACTIVATE(邮费单已创建,待激活)
        :param page_size: 每页条数。取值范围:大于零的整数; 默认值:20;最大值:100
        :param use_has_next: 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，通过此种方式获取增量退款，接口调用成功率在原有的基础上有所提升。
        :param type: 交易类型列表，一次查询多种类型可用半角逗号分隔，默认同时查询guarantee_trade, auto_delivery这两种类型的数据，查看可选值
        :param refund_id: 逆向纠纷单号id
        :param page_no: 页码。取值范围:大于零的整数; 默认值:1
        :param buyer_nick: 买家昵称
        :param start_modified: 查询修改时间开始。格式: yyyy-MM-dd HH:mm:ss
        :param end_modified: 查询修改时间结束。格式: yyyy-MM-dd HH:mm:ss
        """
        return self._top_request(
            "tmall.dispute.receive.get",
            {
                "fields": fields,
                "status": status,
                "page_size": page_size,
                "use_has_next": use_has_next,
                "type": type,
                "refund_id": refund_id,
                "page_no": page_no,
                "buyer_nick": buyer_nick,
                "start_modified": start_modified,
                "end_modified": end_modified
            }
        )


class TbZhiJianPinKong(DingTalkBaseAPI):
    """
    质检品控API
    """

    def taobao_qt_report_get(
            self,
            qt_code
    ):
        """
        查询质检报告
        质检报告查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10898

        :param qt_code: 质检编号
        """
        return self._top_request(
            "taobao.qt.report.get",
            {
                "qt_code": qt_code
            },
            result_processor=lambda x: x["qt_report"]
        )

    def taobao_ts_property_get(
            self,
            service_item_code
    ):
        """
        淘宝服务属性查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10899

        :param service_item_code: 服务收费项code
        """
        return self._top_request(
            "taobao.ts.property.get",
            {
                "service_item_code": service_item_code
            },
            result_processor=lambda x: x["service_item_property"]
        )

    def taobao_ts_subscribe_get(
            self,
            servcie_item_code,
            nick
    ):
        """
        淘宝服务订购关系查询
        ts订购关系状态查询. 暂只支持1口价服务.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10900

        :param servcie_item_code: 服务收费项code
        :param nick: 订购用户昵称
        """
        return self._top_request(
            "taobao.ts.subscribe.get",
            {
                "servcie_item_code": servcie_item_code,
                "nick": nick
            },
            result_processor=lambda x: x["service_subscribe"]
        )

    def taobao_qt_report_update(
            self,
            servcie_item_code,
            sp_name,
            nick,
            qt_code,
            qt_name,
            item_url,
            item_desc,
            qt_type,
            status,
            qt_standard='',
            report_url='',
            is_passed='',
            message='',
            ext_attr='',
            gmt_submit='',
            gmt_report='',
            gmt_expiry='',
            num_iid=''
    ):
        """
        更新质检报告
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10901

        :param servcie_item_code: 收费项code
        :param sp_name: 质检服务商名称
        :param nick: 送检者昵称
        :param qt_code: 一个质检服务唯一标识质量检验单的编号
        :param qt_name: 质检名称
        :param item_url: 宝贝样品url
        :param item_desc: 样品宝贝描述
        :param qt_type: (1L, '聚划算'),<br/>(2L, '消保'),<br/>(3L, '分销'),<br/>(4L, '抽检'),<br/>(5L, '良无限线下数据'),<br/>(6L, '入驻/续签商城'),<br/>(7L, '买家质检维权'),<br/>(8L, '实地验证'),<br/>(9L, '淘宝买家订单商品鉴定'),<br/>(10L,'假一赔三');
        :param status: 0:已提交申请<br/>1:已收到样品<br/>2:已出检测结果<br/>3.已出具报告
        :param qt_standard: 质检标准<br/>status=3 时必须非空
        :param report_url: 质检报告源文件url<br/>status状态为3时必须非空
        :param is_passed: 只有status=3时赋值, <br/>0:未通过1:通过 空代表未判定
        :param message: 检测结果消息描述
        :param ext_attr: 自定义属性字段;分号分隔
        :param gmt_submit: 送检日期
        :param gmt_report: 提交报告结果时间
        :param gmt_expiry: 质检有效到期时间，一般为一年有效期<br/>status状态为3时必须非空
        :param num_iid: 外部ID，和QT_TYPE 一起表示某种平台的实体ID。
                        QT_TYPE=9的时候，num_iid为淘宝订单号
        """
        return self._top_request(
            "taobao.qt.report.update",
            {
                "servcie_item_code": servcie_item_code,
                "sp_name": sp_name,
                "nick": nick,
                "qt_code": qt_code,
                "qt_name": qt_name,
                "item_url": item_url,
                "item_desc": item_desc,
                "qt_type": qt_type,
                "status": status,
                "qt_standard": qt_standard,
                "report_url": report_url,
                "is_passed": is_passed,
                "message": message,
                "ext_attr": ext_attr,
                "gmt_submit": gmt_submit,
                "gmt_report": gmt_report,
                "gmt_expiry": gmt_expiry,
                "num_iid": num_iid
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_qt_report_add(
            self,
            servcie_item_code,
            sp_name,
            nick,
            qt_code,
            qt_name,
            item_url,
            item_desc,
            qt_type,
            status,
            gmt_submit,
            qt_standard='',
            report_url='',
            is_passed='',
            message='',
            ext_attr='',
            gmt_report='',
            gmt_expiry='',
            num_iid=''
    ):
        """
        上传质检报告
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=10902

        :param servcie_item_code: 收费项code
        :param sp_name: 质检服务商名称
        :param nick: 送检者昵称
        :param qt_code: 一个质检服务唯一标识质量检验单的编号
        :param qt_name: 质检名称
        :param item_url: 样品链接.<br/>QT_TYPE=9的时候，请填写N\A
        :param item_desc: 样品信息描述
        :param qt_type: (1L, '聚划算'),<br/>(2L, '消保'),<br/>(3L, '分销'),<br/>(4L, '抽检'),<br/>(5L, '良无限线下数据'),<br/>(6L, '入驻/续签商城'),<br/>(7L, '买家质检维权'),<br/>(8L, '实地验证'),<br/>(9L, '淘宝买家订单商品鉴定'),<br/>(10L,'假一赔三');
        :param status: 0:已提交申请<br/>1:已收到样品<br/>2:已出检测结果<br/>3.已出具报告
        :param gmt_submit: 送检日期
        :param qt_standard: 质检标准<br/>status=3 时 必须非空
        :param report_url: 质检报告源文件url<br/>status状态为3时必须非空
        :param is_passed: 只有status=3时赋值, <br/>true 质检结果合格,false质检结果不合格.<br/>留空表示成分鉴定,不做判定
        :param message: 检测结果消息描述
        :param ext_attr: 自定义属性字段;分号分隔
        :param gmt_report: 提交报告结果时间
        :param gmt_expiry: 质检有效到期时间，一般为一年有效期<br/>status状态为3时必须非空
        :param num_iid: 当前接口只有淘宝订单真假鉴定（QT_TYPE=9）的报告在该字段传入订单号，其他类型报告都不需要传输该值
        """
        return self._top_request(
            "taobao.qt.report.add",
            {
                "servcie_item_code": servcie_item_code,
                "sp_name": sp_name,
                "nick": nick,
                "qt_code": qt_code,
                "qt_name": qt_name,
                "item_url": item_url,
                "item_desc": item_desc,
                "qt_type": qt_type,
                "status": status,
                "gmt_submit": gmt_submit,
                "qt_standard": qt_standard,
                "report_url": report_url,
                "is_passed": is_passed,
                "message": message,
                "ext_attr": ext_attr,
                "gmt_report": gmt_report,
                "gmt_expiry": gmt_expiry,
                "num_iid": num_iid
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_qt_report_delete(
            self,
            qt_code
    ):
        """
        质检报告删除接口
        删除质检报告
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21226

        :param qt_code: 一个质检服务唯一标识质量检验单的编号
        """
        return self._top_request(
            "taobao.qt.report.delete",
            {
                "qt_code": qt_code
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_qt_reports_get(
            self,
            sp_name,
            qt_type,
            servcie_item_code,
            nick,
            start_time='',
            end_time=''
    ):
        """
        批量查询质检报告
        批量查询质检报告，目前只支持查询qtType=11（天猫真假鉴定）类型的报告
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22479

        :param sp_name: 质检服务商名
        :param qt_type: 质检类型，目前只支持查询qt_type=11的类型
        :param servcie_item_code: 收费项code
        :param nick: 送检者昵称
        :param start_time: 查询时间段的开始时间
        :param end_time: 查询时间段的结束时间
        """
        return self._top_request(
            "taobao.qt.reports.get",
            {
                "sp_name": sp_name,
                "qt_type": qt_type,
                "servcie_item_code": servcie_item_code,
                "nick": nick,
                "start_time": start_time,
                "end_time": end_time
            },
            result_processor=lambda x: x["reports"]
        )


class TbGuanLianTuiJian(DingTalkBaseAPI):
    """
    关联推荐API
    """

    def alibaba_orp_recommend(
            self,
            appid,
            call_source,
            userid='0',
            params=''
    ):
        """
        推荐场景开放接口
        推荐开放接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26006

        :param appid: 推荐场景ID
        :param call_source: 调用来源,格式TOP_
        :param userid: 买家数字ID（如果需要）
        :param params: 推荐使用的参数
        """
        return self._top_request(
            "alibaba.orp.recommend",
            {
                "appid": appid,
                "call_source": call_source,
                "userid": userid,
                "params": params
            },
            result_processor=lambda x: x["recommend"]
        )


class TbTianMaoFuWuShangPin(DingTalkBaseAPI):
    """
    天猫服务商品API
    """

    def tmall_servicecenter_contracts_search(
            self,
            start,
            end
    ):
        """
        获取合同类的服务工单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11121

        :param start: 开始时间:  开始时间和结束时间不能超过15分钟
        :param end: 结束时间:  开始时间和结束时间不能超过15分钟
        """
        return self._top_request(
            "tmall.servicecenter.contracts.search",
            {
                "start": start,
                "end": end
            },
            result_processor=lambda x: x["service_contract_packet"]
        )

    def tmall_servicecenter_tasks_search(
            self,
            start,
            end
    ):
        """
        查询任务类工单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11122

        :param start: 开始时间:  开始时间和结束时间不能超过15分钟
        :param end: 结束时间:  开始时间和结束时间不能超过15分钟
        """
        return self._top_request(
            "tmall.servicecenter.tasks.search",
            {
                "start": start,
                "end": end
            },
            result_processor=lambda x: x["service_task_packet"]
        )

    def tmall_servicecenter_workcard_status_update(
            self,
            workcard_id,
            type,
            status,
            updater,
            update_date,
            buyer_id='',
            effect_date='',
            expire_date='',
            comments='',
            address='',
            contact_name='',
            contact_phone='',
            service_date='',
            complete_date='',
            service_voucher_pics='',
            attribute='',
            service_center_code='',
            service_center_name='',
            service_fee='',
            is_visit='',
            before_service_memo='',
            after_service_memo='',
            phone_imei='',
            sub_status='',
            service_center_manager_phone='',
            service_center_manager_name='',
            service_center_address='',
            work_card_install_detail_list=None,
            service_fee_detail=''
    ):
        """
        服务商反馈服务的执行情况
        1 如果服务商受理了此服务，修改合同状态为：已受理=3<br/>2 如果服务商没有受理此服务，修改合同状态为：已拒绝=10<br/>3 如果服务商执行了此服务，修改合同状态为：已执行=4<br/>4 如果服务商执行服务成功，修改合同状态为：已完成=5<br/>5 如果此工单为合同类型的工单，当服务商受理了此服务后，会进行分账
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11123

        :param workcard_id: 工单id
        :param type: 工单类型： 2（合同） 或者 1(任务）
        :param status: 目前仅支持5种状态的反馈：3=授理， 10=拒绝 ，4=执行 ，5=成功，11=失败。（所有状态列表： -1： 初始化 0： 生成 1： 生效 2： 申请 3： 受理 4： 执行 5： 成功 9： 结算 10： 拒绝 11： 失败 12 ： 撤销 13： 暂停 19： 终止）
        :param updater: api调用者
        :param update_date: 更新时间
        :param buyer_id: 买家id
        :param effect_date: 服务生效时间 ：工单类型为合同工单时，必选！
        :param expire_date: 服务失效时间 ：工单类型为合同工单时，必选！
        :param comments: 备注,256个字符以内
        :param address: 任务类工单，预约或者上门地址
        :param contact_name: 任务执行，预约联系人
        :param contact_phone: 任务执行，预约联系人电话
        :param service_date: 服务预约时间
        :param complete_date: 服务完成时间
        :param service_voucher_pics: 服务凭证上传的图片URL链接，多个以;隔开
        :param attribute: 属性定义。例如无忧退货服务，K-V对定义，每对KV用“;”分割，“:”号左边是key右边是value，value如果有多个则以“,”分割。 reasons   :  原因，可能有多个 succeedCount     :    取件成功个数 failedCount    :    取件失败个数 cancelCount      :     取件取消个数 totalCount       :      总取件个数，totalCount= succeedCount + failedCount + cancelCount
        :param service_center_code: 服务商网点内部编码
        :param service_center_name: 服务商网点名字
        :param service_fee: 单元是分
        :param is_visit: 是否上门
        :param before_service_memo: 说明
        :param after_service_memo: 说明
        :param phone_imei: 手机号码
        :param sub_status: 服务子状态：30 表示“服务已申请（上门）” 31表示“服务改约（上门）” 400表示“服务结果（待件上门）” 410表示“服务结果（拖机维修）” 411表示“服务结果（换机）” 420表示“服务结果（上门不可维修）”
        :param service_center_manager_phone: 网点负责人联系电话
        :param service_center_manager_name: 网点负责人
        :param service_center_address: 网点地址
        :param work_card_install_detail_list: 一个工单可能包含多件商品，比如空调可能有两台，录入每天机器的安装情况
        :param service_fee_detail: json string。费用单位为分
        """
        return self._top_request(
            "tmall.servicecenter.workcard.status.update",
            {
                "workcard_id": workcard_id,
                "type": type,
                "status": status,
                "updater": updater,
                "update_date": update_date,
                "buyer_id": buyer_id,
                "effect_date": effect_date,
                "expire_date": expire_date,
                "comments": comments,
                "address": address,
                "contact_name": contact_name,
                "contact_phone": contact_phone,
                "service_date": service_date,
                "complete_date": complete_date,
                "service_voucher_pics": service_voucher_pics,
                "attribute": attribute,
                "service_center_code": service_center_code,
                "service_center_name": service_center_name,
                "service_fee": service_fee,
                "is_visit": is_visit,
                "before_service_memo": before_service_memo,
                "after_service_memo": after_service_memo,
                "phone_imei": phone_imei,
                "sub_status": sub_status,
                "service_center_manager_phone": service_center_manager_phone,
                "service_center_manager_name": service_center_manager_name,
                "service_center_address": service_center_address,
                "work_card_install_detail_list": work_card_install_detail_list,
                "service_fee_detail": service_fee_detail
            }
        )

    def tmall_servicecenter_task_get(
            self,
            parent_biz_order_id
    ):
        """
        服务工单拉取
        接口供服务供应商通过交易主订单查询其未拉取的任务类工单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21669

        :param parent_biz_order_id: Taobao主交易订单ID
        """
        return self._top_request(
            "tmall.servicecenter.task.get",
            {
                "parent_biz_order_id": parent_biz_order_id
            },
            result_processor=lambda x: x["service_task_packet"]
        )

    def tmall_servicecenter_workcard_push(
            self,
            biz_order_id,
            status,
            attributes='',
            desc='',
            service_reserve_time='',
            service_reserve_address=''
    ):
        """
        推送服务工单信息
        服务商家推送工单信息到天猫。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25775

        :param biz_order_id: 淘宝交易订单号
        :param status: 0=初始化, 3=授理， 10=拒绝 ，4=执行 ，5=成功，11=失败
        :param attributes: 属性列表。使用半角分号隔开,字符串前后都需要有半角分号
        :param desc: 描述
        :param service_reserve_time: 服务预约安装时间
        :param service_reserve_address: 服务预约安装地址。四级地址与街道地址用空格隔开
        """
        return self._top_request(
            "tmall.servicecenter.workcard.push",
            {
                "biz_order_id": biz_order_id,
                "status": status,
                "attributes": attributes,
                "desc": desc,
                "service_reserve_time": service_reserve_time,
                "service_reserve_address": service_reserve_address
            },
            result_processor=lambda x: x["workcard_result"]
        )

    def tmall_msf_identify_status_query(
            self,
            order_id,
            service_type
    ):
        """
        喵师傅定案核销状态查询
        喵师傅定案核销状态查询，供服务商erp系统调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26096

        :param order_id: 天猫订单号
        :param service_type: 服务类型，0 家装的送货上门并安装 1 单向安装 2 建材的送货上门 3 建材的安装
        """
        return self._top_request(
            "tmall.msf.identify.status.query",
            {
                "order_id": order_id,
                "service_type": service_type
            }
        )

    def tmall_msf_reservation(
            self,
            reserv_info=None
    ):
        """
        喵师傅服务预约API
        喵师傅预约api
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26099

        :param reserv_info: 预约内容
        """
        return self._top_request(
            "tmall.msf.reservation",
            {
                "reserv_info": reserv_info
            }
        )

    def tmall_service_code_consume(
            self,
            consume_code,
            operator_nick,
            shop_id
    ):
        """
        天猫服务平台服务核销
        天猫服务平台－服务核销
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27070

        :param consume_code: 核销码
        :param operator_nick: 核销帐号
        :param shop_id: 门店id
        """
        return self._top_request(
            "tmall.service.code.consume",
            {
                "consume_code": consume_code,
                "operator_nick": operator_nick,
                "shop_id": shop_id
            }
        )

    def tmall_servicecenter_anomalyrecourse_querybyid(
            self,
            anomaly_recourse_id='4234'
    ):
        """
        根据一键求助id查询指定服务商的一键求助单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27414

        :param anomaly_recourse_id: 一键求助的id
        """
        return self._top_request(
            "tmall.servicecenter.anomalyrecourse.querybyid",
            {
                "anomaly_recourse_id": anomaly_recourse_id
            }
        )

    def tmall_service_settleadjustment_request(
            self,
            param_settle_adjustment_request
    ):
        """
        创建结算调整单
        提供给服务商在对结算有异议时，发起结算调整单。
        通过说明工单ID，调整费用值，调整原因进行新建结算调整单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27435

        :param param_settle_adjustment_request: 父节点
        """
        return self._top_request(
            "tmall.service.settleadjustment.request",
            {
                "param_settle_adjustment_request": param_settle_adjustment_request
            }
        )

    def tmall_service_settleadjustment_get(
            self,
            id
    ):
        """
        查询结算调整单单条记录
        提供给服务商通过结算调整单id获取结算调整单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27438

        :param id: 结算调整单ID
        """
        return self._top_request(
            "tmall.service.settleadjustment.get",
            {
                "id": id
            }
        )

    def tmall_service_settleadjustment_cancel(
            self,
            id,
            comments
    ):
        """
        取消结算调整单
        提供给服务商在对取消已经发起的结算调整单。
        通过说明调整单ID进行结算调整单取消。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27440

        :param id: 结算调整单ID
        :param comments: 取消原因说明
        """
        return self._top_request(
            "tmall.service.settleadjustment.cancel",
            {
                "id": id,
                "comments": comments
            }
        )

    def tmall_servicecenter_task_feedbacknoneedservice(
            self,
            param
    ):
        """
        服务商反馈无需安装工单接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27441

        :param param: 入参对象
        """
        return self._top_request(
            "tmall.servicecenter.task.feedbacknoneedservice",
            {
                "param": param
            }
        )

    def tmall_servicecenter_task_queryrefund(
            self,
            workcard_list
    ):
        """
        查询任务类工单是否退款
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28216

        :param workcard_list: 工单id列表
        """
        return self._top_request(
            "tmall.servicecenter.task.queryrefund",
            {
                "workcard_list": workcard_list
            }
        )

    def tmall_servicecenter_picture_upload(
            self,
            img,
            picture_name,
            is_https='true'
    ):
        """
        上传图片
        给服务商ERP系统使用，用于上传图片保存在天猫，一般用于工单信息回传时候保存服务商的服务证明信息相关的图片。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29583

        :param img: 图片文件二进制流
        :param picture_name: 图片全称包括扩展名。目前支持 jpg jpeg png
        :param is_https: true返回Https地址
        """
        return self._top_request(
            "tmall.servicecenter.picture.upload",
            {
                "img": img,
                "picture_name": picture_name,
                "is_https": is_https
            }
        )

    def tmall_servicecenter_worker_create(
            self,
            worker_dto=None
    ):
        """
        服务商工人信息创建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30001

        :param worker_dto: 11
        """
        return self._top_request(
            "tmall.servicecenter.worker.create",
            {
                "worker_dto": worker_dto
            }
        )

    def tmall_servicecenter_worker_query(
            self,
            identity_id=''
    ):
        """
        工人信息查询
        查询服务商对应的工人信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30506

        :param identity_id: 身份证号
        """
        return self._top_request(
            "tmall.servicecenter.worker.query",
            {
                "identity_id": identity_id
            }
        )

    def tmall_servicecenter_service_type_queryall(
            self
    ):
        """
        服务供应链服务类型
        查询天猫服务类型列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30507

        """
        return self._top_request(
            "tmall.servicecenter.service.type.queryall"
        )

    def tmall_servicecenter_worker_querycapacitytask(
            self,
            query=None
    ):
        """
        查询需求容量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31305

        :param query: 查询对象
        """
        return self._top_request(
            "tmall.servicecenter.worker.querycapacitytask",
            {
                "query": query
            },
            result_processor=lambda x: x["result_base"]
        )

    def tmall_servicecenter_worker_querypage(
            self,
            page_index='0'
    ):
        """
        查询工人列表
        服务商查询工人列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31306

        :param page_index: 页码
        """
        return self._top_request(
            "tmall.servicecenter.worker.querypage",
            {
                "page_index": page_index
            }
        )

    def tmall_servicecenter_servicestore_updateservicestore(
            self,
            service_store
    ):
        """
        修改网点信息
        修改网点信息。对于同一个服务商，通过 service_store_code 保证网点唯一性。需要保证网点存在才能修改。
        错误码
        1, 服务商昵称无效
        2, 缺少省份
        3, 缺少城市
        4, 缺少区域
        5, 缺少详细地址
        6, 传入地址不在标准地址库中，无法解析
        7, 缺少网点编码
        8, 缺少网点名称
        9, 缺少网点电话
        10, 网点已存在
        11, 网点不存在
        12, 系统错误
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33688

        :param service_store: 网点
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.updateservicestore",
            {
                "service_store": service_store
            }
        )

    def tmall_servicecenter_servicestore_deleteservicestore(
            self,
            service_store_code
    ):
        """
        删除网点
        删除网点信息。对于同一个服务商，通过 service_store_code 删除网点。
        错误码
        1, 服务商昵称无效
        2, 缺少省份
        3, 缺少城市
        4, 缺少区域
        5, 缺少详细地址
        6, 传入地址不在标准地址库中，无法解析
        7, 缺少网点编码
        8, 缺少网点名称
        9, 缺少网点电话
        10, 网点已存在
        11, 网点不存在
        12, 系统错误
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33689

        :param service_store_code: 网点名称
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.deleteservicestore",
            {
                "service_store_code": service_store_code
            }
        )

    def tmall_servicecenter_servicestore_deleteservicestorecoverservice(
            self,
            service_store_code,
            biz_type
    ):
        """
        删除网点覆盖的服务
        天猫服务平台删除网点覆盖的服务，
        必选字段：serviceStoreCode、bizType
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33690

        :param service_store_code: 网点编码
        :param biz_type: 业务类型
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.deleteservicestorecoverservice",
            {
                "service_store_code": service_store_code,
                "biz_type": biz_type
            }
        )

    def tmall_servicecenter_servicestore_createservicestore(
            self,
            service_store
    ):
        """
        服务网点创建
        创建网点信息。对于同一个服务商，通过 service_store_code 保证网点唯一性。需要保证网点不存在才能创建。地址信息：中文和编码二选一，都填则以编码address_code为准。
        错误码
        1, 服务商昵称无效
        2, 缺少省份
        3, 缺少城市
        4, 缺少区域
        5, 缺少详细地址
        6, 传入地址不在标准地址库中，无法解析
        7, 缺少网点编码
        8, 缺少网点名称
        9, 缺少网点电话
        10, 网点已存在
        11, 网点不存在
        12, 系统错误
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33691

        :param service_store: 网点
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.createservicestore",
            {
                "service_store": service_store
            }
        )

    def tmall_servicecenter_worker_delete(
            self,
            name='',
            phone='',
            biz_type=''
    ):
        """
        删除工人
        删除工人信息。该接口为多个业务公用，部分字段可忽略。对于电器预约安装业务，同一个服务商，通过工人姓名+手机号+biz_type 保证唯一性。工人已存在才可以删除。
        错误码如下
        100000, 系统错误
        100001, 工人信息校验失败
        100002, 用户校验失败
        100003, 操作失败
        10004,工人信息为空
        10005,服务商id为空或者服务商名称为空
        10006, 工人不存在
        10007, 工人已存在
        10008, 缺少工人姓名
        10009, 缺少工人电话
        10010, 网点不存在
        11000, category_id 无效
        11001, biz_type 无效
        20001,已查询到最后一页
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33696

        :param name: 工人姓名
        :param phone: 工人手机号
        :param biz_type: 业务类型,电器预约安装业务填appliance_install
        """
        return self._top_request(
            "tmall.servicecenter.worker.delete",
            {
                "name": name,
                "phone": phone,
                "biz_type": biz_type
            }
        )

    def tmall_servicecenter_worker_update(
            self,
            worker=None
    ):
        """
        修改工人信息
        修改工人信息。该接口为多个业务公用，部分字段可忽略。对于电器预约安装业务，同一个服务商，通过工人姓名+手机号+biz_type 保证唯一性。工人已存在才可以修改。
        错误码如下
        100000, 系统错误
        100001, 工人信息校验失败
        100002, 用户校验失败
        100003, 操作失败
        10004,工人信息为空
        10005,服务商id为空或者服务商名称为空
        10006, 工人不存在
        10007, 工人已存在
        10008, 缺少工人姓名
        10009, 缺少工人电话
        10010, 网点不存在
        11000, category_id 无效
        11001, biz_type 无效
        20001,已查询到最后一页
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33699

        :param worker: 工人信息
        """
        return self._top_request(
            "tmall.servicecenter.worker.update",
            {
                "worker": worker
            }
        )

    def tmall_servicecenter_servicemonitormessage_update(
            self,
            service_monitor_message_id,
            status,
            memo=''
    ):
        """
        服务商更新预警消息状态
        服务商收到预警后，需要进行回复已读状态，并可填写备注
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33931

        :param service_monitor_message_id: 预警消息id
        :param status: 可更新状态：3、已读
        :param memo: 预警处理备注
        """
        return self._top_request(
            "tmall.servicecenter.servicemonitormessage.update",
            {
                "service_monitor_message_id": service_monitor_message_id,
                "status": status,
                "memo": memo
            }
        )

    def tmall_servicecenter_servicemonitormessage_search(
            self,
            start,
            end
    ):
        """
        根据时间段查询服务商的服务预警消息列表(15分钟内)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33932

        :param start: 开始时间long值
        :param end: 结束时间long值，与start相差15分钟
        """
        return self._top_request(
            "tmall.servicecenter.servicemonitormessage.search",
            {
                "start": start,
                "end": end
            }
        )

    def tmall_fuwu_serviceitem_list(
            self,
            seller_id='',
            itemids=''
    ):
        """
        获取服务商品扩展信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36961

        :param seller_id: 商品所属卖家账号id
        :param itemids: 商品id列表，有数量限制
        """
        return self._top_request(
            "tmall.fuwu.serviceitem.list",
            {
                "seller_id": seller_id,
                "itemids": itemids
            }
        )

    def tmall_servicecenter_msf_tasks_update(
            self,
            worker_mobile,
            service_code,
            source,
            biz_order_ids,
            seqs
    ):
        """
        喵师傅工人任务批量完成接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38133

        :param worker_mobile: 工人手机号
        :param service_code: 服务编码
        :param source: 调用来源
        :param biz_order_ids: 子订单号列表。最多100个
        :param seqs: 周期序号。必须与子订单列表对应
        """
        return self._top_request(
            "tmall.servicecenter.msf.tasks.update",
            {
                "worker_mobile": worker_mobile,
                "service_code": service_code,
                "source": source,
                "biz_order_ids": biz_order_ids,
                "seqs": seqs
            }
        )

    def tmall_servicecenter_workcard_reassign(
            self,
            reassign_store_request=None
    ):
        """
        工单改派门店
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42625

        :param reassign_store_request: 请求入参
        """
        return self._top_request(
            "tmall.servicecenter.workcard.reassign",
            {
                "reassign_store_request": reassign_store_request
            }
        )

    def tmall_servicecenter_workcard_verifycode_resend(
            self,
            workcard_id='',
            service_store_id=''
    ):
        """
        重发核销码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42626

        :param workcard_id: 工单id
        :param service_store_id: 门店/网点id
        """
        return self._top_request(
            "tmall.servicecenter.workcard.verifycode.resend",
            {
                "workcard_id": workcard_id,
                "service_store_id": service_store_id
            }
        )

    def tmall_servicecenter_servicestore_update(
            self,
            param_service_store_d_t_o=None
    ):
        """
        修改门店信息
        用于修改门店/网点信息。多个业务共用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42627

        :param param_service_store_d_t_o: 网点/门店
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.update",
            {
                "param_service_store_d_t_o": param_service_store_d_t_o
            }
        )

    def tmall_servicecenter_workcard_query(
            self,
            service_store_id='',
            identify_code='',
            id='',
            gmt_create_start='',
            gmt_create_end='',
            biz_order_id='',
            current_page='1',
            page_size='50'
    ):
        """
        工单查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42632

        :param service_store_id: 门店/网点id
        :param identify_code: 核销码
        :param id: 工单id
        :param gmt_create_start: 工单创建开始时间
        :param gmt_create_end: 工单创建结束时间，必须与工单创建开始时间一起传入，且间隔不超过15分钟
        :param biz_order_id: 淘宝交易订单号。主订单或子订单均可
        :param current_page: 当前页数
        :param page_size: 每页大小
        """
        return self._top_request(
            "tmall.servicecenter.workcard.query",
            {
                "service_store_id": service_store_id,
                "identify_code": identify_code,
                "id": id,
                "gmt_create_start": gmt_create_start,
                "gmt_create_end": gmt_create_end,
                "biz_order_id": biz_order_id,
                "current_page": current_page,
                "page_size": page_size
            }
        )

    def tmall_servicecenter_servicestore_create(
            self,
            service_store=None
    ):
        """
        创建门店
        用于创建门店/网点。多个业务共用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42633

        :param service_store: 网点/门店
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.create",
            {
                "service_store": service_store
            }
        )

    def tmall_servicecenter_servicestore_updatestatus(
            self,
            id,
            biz_type,
            status=''
    ):
        """
        网点/门店状态修改
        修改网点/门店状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42634

        :param id: 门店id
        :param biz_type: 业务类型。不同业务传不同的值
        :param status: 状态。1 营业，0歇业，-1彻底关店
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.updatestatus",
            {
                "id": id,
                "biz_type": biz_type,
                "status": status
            }
        )

    def tmall_mallitemcenter_supplier_ability_update(
            self,
            param0
    ):
        """
        门店服务能力授权接口
        门店服务能力授权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42734

        :param param0: 入参
        """
        return self._top_request(
            "tmall.mallitemcenter.supplier.ability.update",
            {
                "param0": param0
            }
        )

    def tmall_mallitemcenter_supplier_price_upload(
            self,
            provider_price_list,
            service_code=''
    ):
        """
        天猫服务商服务报价上传
        天猫服务商上传服务价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42735

        :param provider_price_list: 服务商门店价格列表
        :param service_code: 服务code
        """
        return self._top_request(
            "tmall.mallitemcenter.supplier.price.upload",
            {
                "provider_price_list": provider_price_list,
                "service_code": service_code
            }
        )

    def tmall_mallitemcenter_serviceproduct_query(
            self,
            id='',
            status='',
            service_code='',
            service_product_type=''
    ):
        """
        天猫服务商服务产品查询
        查询天猫服务的服务商发布的服务产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42736

        :param id: 服务产品id
        :param status: 产品状态
        :param service_code: 服务名称
        :param service_product_type: 产品类型
        """
        return self._top_request(
            "tmall.mallitemcenter.serviceproduct.query",
            {
                "id": id,
                "status": status,
                "service_code": service_code,
                "service_product_type": service_product_type
            }
        )

    def tmall_mallitemcenter_subscribe_query(
            self,
            query=None
    ):
        """
        天猫服务订购信息查询接口
        查询商家服务订购信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42770

        :param query: 入参query
        """
        return self._top_request(
            "tmall.mallitemcenter.subscribe.query",
            {
                "query": query
            }
        )

    def tmall_servicecenter_workcard_reserve(
            self,
            workcard_id='',
            reserve_time_start='',
            reserve_time_end='',
            worker_mobile='',
            reserve_remark='',
            worker_name=''
    ):
        """
        工单预约
        服务工单更新通用接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43637

        :param workcard_id: 工单id
        :param reserve_time_start: 服务开始时间
        :param reserve_time_end: 服务结束时间
        :param worker_mobile: 工人手机号
        :param reserve_remark: 预约备注信息
        :param worker_name: 工人姓名
        """
        return self._top_request(
            "tmall.servicecenter.workcard.reserve",
            {
                "workcard_id": workcard_id,
                "reserve_time_start": reserve_time_start,
                "reserve_time_end": reserve_time_end,
                "worker_mobile": worker_mobile,
                "reserve_remark": reserve_remark,
                "worker_name": worker_name
            }
        )


class TbTianMaoJingPinKu(DingTalkBaseAPI):
    """
    天猫精品库API
    """

    def tmall_items_extend_search(
            self,
            q='',
            cat='',
            sort='',
            brand='',
            loc='',
            prop='',
            post_fee='',
            start_price='',
            end_price='',
            support_cod='',
            many_points='',
            wwonline='',
            vip='',
            combo='',
            miaosha='',
            nspu='',
            auction_tag='',
            spuid='',
            user_id='',
            page_no='1',
            page_size='40',
            category=''
    ):
        """
        搜索天猫商品
        提供天猫商品搜索结果，需要调用精选商品，请改为调用：tmall.selected.items.search
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21643

        :param q: 表示搜索的关键字，例如搜索query=nike。当输入关键字为中文时，将对他进行URLEncode的UTF-8格式编码，如 耐克，那么q=%E8%80%90%E5%85%8B。
        :param cat: 前台类目id，支持多选过滤，cat=catid1,catid2
        :param sort: 排序类型。类型包括：s: 人气排序p: 价格从低到高;pd: 价格从高到低;d: 月销量从高到低;td: 总销量从高到低;pt: 按发布时间排序.
        :param brand: 品牌的id。支持多选过滤，brand=brand1,brand2
        :param loc: 宝贝卖家所在地，中文gbk编码
        :param prop: 以“属性id：属性值”的形式传入;
        :param post_fee: 是否包邮，-1为包邮
        :param start_price: 在宝贝页面中进行价格筛选的时候，如果填写了最低价格，就会显示该字段。
        :param end_price: 在宝贝页面中进行价格筛选的时候，如果填写了最高价格，就会显示该字段。
        :param support_cod: 是否货到付款，1为货到付款
        :param many_points: 是否多倍积分，1为多倍积分
        :param wwonline: 显示旺旺在线卖家的宝贝时，wwonline=1
        :param vip: 过滤vip宝贝时，vip=1
        :param combo: 过滤搭配减价宝贝时，combo=1
        :param miaosha: 过滤折扣宝贝时，miaosha=1
        :param nspu: 是否需要spu聚合的开关:1为关闭，不传表示遵循后端聚合逻辑。默认不作spu聚合。
        :param auction_tag: 商品标签。支持多选过滤,auction_tag=auction_tag1,auction_tag2,不支持天猫精品库8578
        :param spuid: 可以根据产品Id搜索属于这个spu的商品。
        :param user_id: 可以根据卖家id搜索属于该卖家的商品
        :param page_no: 页码。取值范围：大于零的整数；最大值：100；默认值：1，即默认返回第一页数据。
        :param page_size: 每页条数。取值范围：大于零的整数；最大值：100；默认值：40
        :param category: 后台类目id，category=categoryId
        """
        return self._top_request(
            "tmall.items.extend.search",
            {
                "q": q,
                "cat": cat,
                "sort": sort,
                "brand": brand,
                "loc": loc,
                "prop": prop,
                "post_fee": post_fee,
                "start_price": start_price,
                "end_price": end_price,
                "support_cod": support_cod,
                "many_points": many_points,
                "wwonline": wwonline,
                "vip": vip,
                "combo": combo,
                "miaosha": miaosha,
                "nspu": nspu,
                "auction_tag": auction_tag,
                "spuid": spuid,
                "user_id": user_id,
                "page_no": page_no,
                "page_size": page_size,
                "category": category
            }
        )


class TbJuShiTa(DingTalkBaseAPI):
    """
    聚石塔API
    """

    def taobao_rds_db_create(
            self,
            instance_name,
            db_name,
            account_name=''
    ):
        """
        rds创建数据库
        在rds实例里创建数据库
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11133

        :param instance_name: rds的实例名
        :param db_name: 数据库名
        :param account_name: 已存在账号名
        """
        return self._top_request(
            "taobao.rds.db.create",
            {
                "instance_name": instance_name,
                "db_name": db_name,
                "account_name": account_name
            },
            result_processor=lambda x: x["rds_db_info"]
        )

    def taobao_rds_db_get(
            self,
            instance_name,
            db_status='1'
    ):
        """
        查询rds下的数据库
        查询rds实例下的数据库
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11134

        :param instance_name: rds的实例名
        :param db_status: 数据库状态，默认值1
        """
        return self._top_request(
            "taobao.rds.db.get",
            {
                "instance_name": instance_name,
                "db_status": db_status
            },
            result_processor=lambda x: x["rds_db_infos"]
        )

    def taobao_rds_db_delete(
            self,
            instance_name,
            db_name
    ):
        """
        RDS数据库删除
        通过api删除用户RDS的数据库
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11135

        :param instance_name: rds的实例名
        :param db_name: 数据库的name，可以通过 taobao.rds.db.get 获取
        """
        return self._top_request(
            "taobao.rds.db.delete",
            {
                "instance_name": instance_name,
                "db_name": db_name
            },
            result_processor=lambda x: x["rds_db_info"]
        )

    def taobao_jushita_jdp_user_delete(
            self,
            nick='',
            user_id=''
    ):
        """
        删除数据推送用户
        删除应用的数据推送用户，用户被删除后，重新添加时会重新同步历史数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21732

        :param nick: 要删除用户的昵称
        :param user_id: 需要删除的用户编号
        """
        return self._top_request(
            "taobao.jushita.jdp.user.delete",
            {
                "nick": nick,
                "user_id": user_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_jushita_jdp_user_add(
            self,
            rds_name,
            history_days=''
    ):
        """
        添加数据推送用户
        提供给接入数据推送的应用添加数据推送服务的用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21736

        :param rds_name: RDS实例名称
        :param history_days: 推送历史数据天数，只能为90天内，包含90天。当此参数不填时，表示以页面中应用配置的历史天数为准；如果为0表示这个用户不推送历史数据；其它表示推送的历史天数。
        """
        return self._top_request(
            "taobao.jushita.jdp.user.add",
            {
                "rds_name": rds_name,
                "history_days": history_days
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_jushita_jdp_users_get(
            self,
            start_modified='',
            end_modified='',
            page_size='200',
            page_no='1',
            user_id=''
    ):
        """
        获取开通的订单同步服务的用户
        获取开通的订单同步服务的用户，含有rds的路由关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22129

        :param start_modified: 此参数一般不用传，用于查询最后更改时间在某个时间段内的用户
        :param end_modified: 此参数一般不用传，用于查询最后更改时间在某个时间段内的用户
        :param page_size: 每页记录数，默认200
        :param page_no: 当前页数
        :param user_id: 如果传了user_id表示单条查询
        """
        return self._top_request(
            "taobao.jushita.jdp.users.get",
            {
                "start_modified": start_modified,
                "end_modified": end_modified,
                "page_size": page_size,
                "page_no": page_no,
                "user_id": user_id
            }
        )

    def taobao_jds_trade_traces_get(
            self,
            tid
    ):
        """
        获取单条订单跟踪详情
        获取聚石塔数据共享的交易全链路信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22816

        :param tid: 淘宝的订单tid
        """
        return self._top_request(
            "taobao.jds.trade.traces.get",
            {
                "tid": tid
            }
        )

    def taobao_jds_trades_statistics_diff(
            self,
            date,
            pre_status,
            post_status,
            page_no='1'
    ):
        """
        订单全链路状态统计差异比较
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22883

        :param date: 查询的日期，格式如YYYYMMDD的日期对应的数字
        :param pre_status: 需要比较的状态，将会和post_status做比较
        :param post_status: 需要比较的状态
        :param page_no: 页数
        """
        return self._top_request(
            "taobao.jds.trades.statistics.diff",
            {
                "date": date,
                "pre_status": pre_status,
                "post_status": post_status,
                "page_no": page_no
            }
        )

    def taobao_jds_trades_statistics_get(
            self,
            date
    ):
        """
        获取订单数量统计结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22884

        :param date: 查询的日期，格式如YYYYMMDD的日期对应的数字
        """
        return self._top_request(
            "taobao.jds.trades.statistics.get",
            {
                "date": date
            },
            result_processor=lambda x: x["status_infos"]
        )

    def taobao_jds_hluser_update(
            self,
            open_for_buyer='',
            open_nodes=''
    ):
        """
        订单全链路用户信息修改
        订单全链路用户信息修改，比如是否开放买家端展示
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23843

        :param open_for_buyer: 回流信息是否开通买家端展示,可选值open,close
        :param open_nodes: 为空,则默认是X_TO_SYSTEM,X_WAIT_ALLOCATION,X_OUT_WAREHOUSE 可选值是X_DOWNLOADED,X_TO_SYSTEM,X_SERVICE_AUDITED,X_FINANCE_AUDITED,X_ALLOCATION_NOTIFIED,X_WAIT_ALLOCATION,X_SORT_PRINTED,X_SEND_PRINTED,X_LOGISTICS_PRINTED,X_SORTED,X_EXAMINED,X_PACKAGED,X_WEIGHED,X_OUT_WAREHOUS
        """
        return self._top_request(
            "taobao.jds.hluser.update",
            {
                "open_for_buyer": open_for_buyer,
                "open_nodes": open_nodes
            }
        )

    def taobao_jds_hluser_get(
            self
    ):
        """
        订单全链路用户信息获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23844

        """
        return self._top_request(
            "taobao.jds.hluser.get",
            result_processor=lambda x: x["hl_user"]
        )

    def taobao_jds_refund_traces_get(
            self,
            refund_id
    ):
        """
        获取单条退款跟踪详情
        获取聚石塔数据共享的交易全链路的退款信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23845

        :param refund_id: 淘宝的退款编号
        """
        return self._top_request(
            "taobao.jds.refund.traces.get",
            {
                "refund_id": refund_id
            }
        )

    def taobao_oc_tradetag_attach(
            self,
            tid,
            tag_name,
            tag_value,
            tag_type='2',
            visible='0'
    ):
        """
        订单打标或者订单标签更新
        对订单添加标签和更新标签。标签分为官方标签和自定义标签。<br/>官方标签目前有:赠品,电子发票,收货地址变更,预售。具体格式说明请看http://open.taobao.com/doc/detail.htm?id=102731<br/>自定义标签有2个通用属性:<br/>    `show_str:给消费者显示的字符串（如果可以显示的话）<br/>    `pic_urls:图片url,地址必须是图片空间的url,最多5张
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24453

        :param tid: 订单id
        :param tag_name: 标签名称
        :param tag_value: 标签值，json格式
        :param tag_type: 标签类型       1：官方标签      2：自定义标签
        :param visible: 该标签在消费者端是否显示,0:不显示,1：显示
        """
        return self._top_request(
            "taobao.oc.tradetag.attach",
            {
                "tid": tid,
                "tag_name": tag_name,
                "tag_value": tag_value,
                "tag_type": tag_type,
                "visible": visible
            }
        )

    def taobao_oc_trades_bytag_get(
            self,
            tag_type,
            tag_name,
            page_size='50',
            page='1'
    ):
        """
        标签查询订单
        根据标签查询订单编号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24455

        :param tag_type: 标签类型，1官方，2自定义
        :param tag_name: 标签名称
        :param page_size: 分页大小
        :param page: 当前页
        """
        return self._top_request(
            "taobao.oc.trades.bytag.get",
            {
                "tag_type": tag_type,
                "tag_name": tag_name,
                "page_size": page_size,
                "page": page
            }
        )

    def taobao_oc_tradetags_get(
            self,
            tid,
            history='',
            tag_types='',
            tag_names=''
    ):
        """
        根据订单查询订单标签
        根据订单查询订单标签。<br/>
        返回的tag说明:1为官方标，2为自定义标，3为主站只读标签。<br/>
        官方标签和自定义标签请看taobao.oc.tradetag.attach 接口说明<br/>
        主站只读标签请看:http://open.taobao.com/doc/detail.htm?id=102865<br/>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24456

        :param tid: 交易主订单id
        :param history: 是否查询历史标签
        :param tag_types: 不填，则默认只查询1,2。1为官方标，2为自定义标，3为主站只读标签
        :param tag_names: 不填，则不做标签名称过滤
        """
        return self._top_request(
            "taobao.oc.tradetags.get",
            {
                "tid": tid,
                "history": history,
                "tag_types": tag_types,
                "tag_names": tag_names
            },
            result_processor=lambda x: x["trade_tags"]
        )

    def taobao_oc_tradetrace_alerts_get(
            self,
            abnormal_type,
            page_no,
            page_size='100'
    ):
        """
        异常订单信息获取
        提供订单预警模块的数据查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24737

        :param abnormal_type: 异常类型代码：发货回写淘宝异常=1，商家系统漏单提醒=2，发货超时提醒=3，物流寄送超时=4，买家签收超时=5，物流中转异常=6，退货寄回异常=7，订单追回提醒=8'。
        :param page_no: 返回数据的页码
        :param page_size: 返回数据每页包含的记录数目
        """
        return self._top_request(
            "taobao.oc.tradetrace.alerts.get",
            {
                "abnormal_type": abnormal_type,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_oc_sla_summary_get(
            self
    ):
        """
        天猫商家的考核服务列表获取
        根据天猫商家的UserID，查询该商家拥有的考核服务的信息列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25167

        """
        return self._top_request(
            "taobao.oc.sla.summary.get",
            result_processor=lambda x: x["scheme_list"]
        )

    def taobao_oc_ap_contracturl_get(
            self
    ):
        """
        按用户获取支付宝代扣协议链接地址
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25561

        """
        return self._top_request(
            "taobao.oc.ap.contracturl.get"
        )

    def taobao_oc_ap_contractsigned_get(
            self
    ):
        """
        用户是否签署支付宝代扣协议
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25563

        """
        return self._top_request(
            "taobao.oc.ap.contractsigned.get"
        )

    def taobao_oc_order_ap_update(
            self,
            oc_order_id
    ):
        """
        按OC订单分账
        对OC订单执行分账操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25564

        :param oc_order_id: 调用创建OC订单接口生成的id
        """
        return self._top_request(
            "taobao.oc.order.ap.update",
            {
                "oc_order_id": oc_order_id
            }
        )

    def taobao_oc_order_create(
            self,
            param_o_c_order
    ):
        """
        创建OC订单
        创建OC订单接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25565

        :param param_o_c_order: OC订单
        """
        return self._top_request(
            "taobao.oc.order.create",
            {
                "param_o_c_order": param_o_c_order
            }
        )

    def taobao_oc_ap_rule_create(
            self,
            division_rule,
            ext_attributes
    ):
        """
        创建分账规则
        OC分账业务功能支持，用于创建分账规则
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25566

        :param division_rule: 传入比例数组后者金额数组
        :param ext_attributes: 规则描述相关扩展信息，divisonRule的值包含（'byAmount' 或者 'byPercentage'），excutionPeriod的值包含（ 'month' 或者 'day' 或者 'now'）
        """
        return self._top_request(
            "taobao.oc.ap.rule.create",
            {
                "division_rule": division_rule,
                "ext_attributes": ext_attributes
            }
        )

    def tmall_omni_pc_impressions_getbyshopid(
            self,
            shop_id,
            start_row='0',
            row_count='200'
    ):
        """
        根据商品店铺id查询商品评价
        根据商品店铺id查询商品评价信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25608

        :param shop_id: 店铺id
        :param start_row: 开始的行号
        :param row_count: 要取的行数
        """
        return self._top_request(
            "tmall.omni.pc.impressions.getbyshopid",
            {
                "shop_id": shop_id,
                "start_row": start_row,
                "row_count": row_count
            },
            result_processor=lambda x: x["item_impressions"]
        )

    def tmall_omni_pc_salesdata_getbyshopid(
            self,
            shop_id,
            biz_date,
            start_row='0',
            row_count='200'
    ):
        """
        根据商品的店铺id查询销售数据指标
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25612

        :param shop_id: 店铺id
        :param biz_date: 销售数据统计日期
        :param start_row: 开始的行号
        :param row_count: 要取的行数
        """
        return self._top_request(
            "tmall.omni.pc.salesdata.getbyshopid",
            {
                "shop_id": shop_id,
                "biz_date": biz_date,
                "start_row": start_row,
                "row_count": row_count
            },
            result_processor=lambda x: x["item_sales_datas"]
        )

    def tmall_omni_pc_mapping_getbyomniid(
            self,
            onmi_item_id,
            start_row='0',
            row_count='200'
    ):
        """
        根据全局商品ID查询商品映射关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25613

        :param onmi_item_id: 商品全局id
        :param start_row: 开始的行号
        :param row_count: 要取的行数
        """
        return self._top_request(
            "tmall.omni.pc.mapping.getbyomniid",
            {
                "onmi_item_id": onmi_item_id,
                "start_row": start_row,
                "row_count": row_count
            },
            result_processor=lambda x: x["mapped_itemid_datas"]
        )

    def tmall_omni_pc_mapping_getbyshopid(
            self,
            shop_id,
            start_row='0',
            row_count='200'
    ):
        """
        根据店铺id查询商品映射关系
        商品全渠道项目
        品牌商ISV通过店铺id查询商品全局id映射关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25616

        :param shop_id: 店铺id
        :param start_row: 开始的行号
        :param row_count: 要取的行数
        """
        return self._top_request(
            "tmall.omni.pc.mapping.getbyshopid",
            {
                "shop_id": shop_id,
                "start_row": start_row,
                "row_count": row_count
            },
            result_processor=lambda x: x["mapped_itemid_datas"]
        )

    def tmall_omni_pc_impressions_getbyomniid(
            self,
            omni_item_id,
            start_row='0',
            row_count='200'
    ):
        """
        根据全局商品id查询商品评价
        商品全渠道项目
        品牌商ISV通过全局id查询商品评价信息数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25618

        :param omni_item_id: 全局商品id
        :param start_row: 开始的行号
        :param row_count: 要取的行数
        """
        return self._top_request(
            "tmall.omni.pc.impressions.getbyomniid",
            {
                "omni_item_id": omni_item_id,
                "start_row": start_row,
                "row_count": row_count
            },
            result_processor=lambda x: x["item_impressions"]
        )

    def tmall_omni_pc_salesdata_getbyomniid(
            self,
            omni_item_id,
            biz_date,
            start_row='0',
            row_count='200'
    ):
        """
        根据全局商品id查询销售数据指标
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25619

        :param omni_item_id: 商品全局id
        :param biz_date: 销售数据统计日期
        :param start_row: 开始的行号
        :param row_count: 要取的行数
        """
        return self._top_request(
            "tmall.omni.pc.salesdata.getbyomniid",
            {
                "omni_item_id": omni_item_id,
                "biz_date": biz_date,
                "start_row": start_row,
                "row_count": row_count
            },
            result_processor=lambda x: x["item_sales_datas"]
        )

    def tmall_omni_pc_iteminfo_getbyomniid(
            self,
            omni_id,
            page_no='1',
            page_size='100'
    ):
        """
        根据全渠道ID获取商品基础信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25648

        :param omni_id: 全渠道ID
        :param page_no: 返回页的页码
        :param page_size: 返回页每页的大小
        """
        return self._top_request(
            "tmall.omni.pc.iteminfo.getbyomniid",
            {
                "omni_id": omni_id,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["item_info_data_list"]
        )

    def tmall_omni_pc_iteminfo_getbyshopid(
            self,
            shop_id,
            page_no='1',
            page_size='100'
    ):
        """
        根据店铺ID获取商品基础信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25652

        :param shop_id: 店铺ID
        :param page_no: 返回页的页码
        :param page_size: 返回页的大小
        """
        return self._top_request(
            "tmall.omni.pc.iteminfo.getbyshopid",
            {
                "shop_id": shop_id,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["item_info_data_list"]
        )

    def taobao_qimen_orderstatus_update(
            self,
            allocation_code,
            order_codes,
            store_id,
            type,
            status,
            operator,
            action_time=''
    ):
        """
        订单状态更新接口
        星盘和ISV，可以通过此接口，来更新订单状态。此接口应用于使用阿里星盘分单，且使用商家系统（非阿里掌柜）接单/拒单的模式下更新订单状态。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27028

        :param allocation_code: 星盘派单号
        :param order_codes: 淘系子订单号
        :param store_id: 目标门店的商户中心门店编码
        :param type: 业务类型，（枚举值：FAHUO、ZITI）
        :param status: 订单状态，门店发货包括X_SHOP_ALLOCATION、X_SHOP_DENYX_SHOP_HANDLED、X_SHOP_CANCEL_CONFIRM、X_SHOP_CANCEL_DENIED、X_MATCHED；门店自提包括X_COMMODITY_CONFIRMX_COMMODITY_TRANSER、X_TRANSFER _SUCCESS、X_SHOP_CANCEL_CONFIRM、X_MATCHED、X_SHOP_DENY
        :param operator: 操作人
        :param action_time: 事件发生时间
        """
        return self._top_request(
            "taobao.qimen.orderstatus.update",
            {
                "allocation_code": allocation_code,
                "order_codes": order_codes,
                "store_id": store_id,
                "type": type,
                "status": status,
                "operator": operator,
                "action_time": action_time
            }
        )

    def taobao_rds_db_createaccount(
            self,
            param0=None
    ):
        """
        rds创建数据库账户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28878

        :param param0: 入参对象
        """
        return self._top_request(
            "taobao.rds.db.createaccount",
            {
                "param0": param0
            }
        )

    def taobao_rds_db_deleteaccount(
            self,
            account_name,
            instance_name
    ):
        """
        删除rds账户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29602

        :param account_name: rds账户
        :param instance_name: rds实例
        """
        return self._top_request(
            "taobao.rds.db.deleteaccount",
            {
                "account_name": account_name,
                "instance_name": instance_name
            }
        )

    def taobao_rds_db_getaccount(
            self,
            instance_name,
            account_name=''
    ):
        """
        rds获取数据库账户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29603

        :param instance_name: 实例名称
        :param account_name: 账户名称
        """
        return self._top_request(
            "taobao.rds.db.getaccount",
            {
                "instance_name": instance_name,
                "account_name": account_name
            }
        )

    def taobao_rds_db_getdb(
            self,
            instance_name,
            account_name=''
    ):
        """
        rds获取RDS的DB
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29604

        :param instance_name: 实例名
        :param account_name: 账户名
        """
        return self._top_request(
            "taobao.rds.db.getdb",
            {
                "instance_name": instance_name,
                "account_name": account_name
            }
        )


class TbDianZiWuLiu(DingTalkBaseAPI):
    """
    电子物流API
    """

    def taobao_vmarket_eticket_beforeconsume(
            self,
            order_id,
            verify_code,
            token,
            codemerchant_id='',
            posid='',
            mobile=''
    ):
        """
        电子凭证验码前置确认
        商家验码之前的调用接口，用来同步到最新的订单状态并判断是否可以进行验码操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11043

        :param order_id: 需要验码的电子凭证订单ID
        :param verify_code: 需要验的码
        :param token: 安全验证token，需要和发码通知中的token一致
        :param codemerchant_id: 码商ID,是码商的话必须传递,如果是信任卖家不需要传
        :param posid: 操作员身份ID，如果是码商必须传,如果是信任卖家不需要传
        :param mobile: 手机号码后四位,没有特殊说明请不要传
        """
        return self._top_request(
            "taobao.vmarket.eticket.beforeconsume",
            {
                "order_id": order_id,
                "verify_code": verify_code,
                "token": token,
                "codemerchant_id": codemerchant_id,
                "posid": posid,
                "mobile": mobile
            }
        )

    def taobao_vmarket_eticket_consume(
            self,
            order_id,
            verify_code,
            consume_num,
            token,
            codemerchant_id='',
            posid='',
            mobile='',
            new_code='',
            serial_num='',
            qr_images=''
    ):
        """
        电子票券消费通知
        外部合作商家电子票券消费回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11044

        :param order_id: 进行验码的电子凭证订单的订单ID
        :param verify_code: 核销的码，只支持单个码，多个码核销需要多次调用
        :param consume_num: 核销份数
        :param token: 安全验证token,需要和发码通知中的token一致
        :param codemerchant_id: 码商ID,是码商的话必须传递,如果是信任卖家不需要传
        :param posid: 机具ID(此参数信任卖家可不传递，码商必须传递)
        :param mobile: 手机后四位(没有特殊说明请不要传该参数)
        :param new_code: 核销后需要重新生成的码，如果不需要重新生成码，不要传该参数
        :param serial_num: 自定义核销流水号，如果核销调用失败，可以用该核销流水号进行冲正操作，需要小于等于100个字符(a-zA-Z0-9_)；每次核销都是唯一的流水号
        :param qr_images: 不需要上传二维码图片或者核销后不需重新生成码码商请不要传，需要传入二维码的码商请先调用taobao.vmarket.eticket.qrcode.upload接口，将返回的img_filename文件名称作为参数（如果二维码不变的话，也可将将发码时传入二维码文件名作为参数传入），文件名与参数new_code必须相互对应。
        """
        return self._top_request(
            "taobao.vmarket.eticket.consume",
            {
                "order_id": order_id,
                "verify_code": verify_code,
                "consume_num": consume_num,
                "token": token,
                "codemerchant_id": codemerchant_id,
                "posid": posid,
                "mobile": mobile,
                "new_code": new_code,
                "serial_num": serial_num,
                "qr_images": qr_images
            }
        )

    def taobao_vmarket_eticket_resend(
            self,
            order_id,
            verify_codes,
            token,
            codemerchant_id='',
            qr_images=''
    ):
        """
        外部合作商家重发电子凭证回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11045

        :param order_id: 订单编号
        :param verify_codes: 重新发送的验证码及可验证次数的列表，多个码之间用英文逗号分割，需要包含此订单所有可用的码（如果订单总的有10个码，可用的是5个，那么这里设置的是5个可用的码）
        :param token: 安全验证token,回传淘宝发通知时发过来的token串
        :param codemerchant_id: 码商ID，如果是码商，必须传，如果是信任卖家，不需要传
        :param qr_images: 不需要上传二维码图片的码商请不要传，需要传入二维码的码商请先调用taobao.vmarket.eticket.qrcode.upload接口，将返回的img_filename文件名称作为参数（如果二维码不变的话，也可将将发码时传入二维码文件名作为参数传入），多个文件名用逗号隔开且与参数verify_codes按从左到有的顺序一一对应。
        """
        return self._top_request(
            "taobao.vmarket.eticket.resend",
            {
                "order_id": order_id,
                "verify_codes": verify_codes,
                "token": token,
                "codemerchant_id": codemerchant_id,
                "qr_images": qr_images
            },
            result_processor=lambda x: x["ret_code"]
        )

    def taobao_vmarket_eticket_send(
            self,
            order_id,
            verify_codes,
            token,
            codemerchant_id='',
            qr_images=''
    ):
        """
        商家电子凭证发码成功回调接口
        外部商家成功发码回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11046

        :param order_id: 订单编号
        :param verify_codes: 发送成功的验证码及可验证次数的列表，码和可验证次数用英文冒号分隔，多个码之间用英文逗号分隔，所有字符都为英文半角
        :param token: 安全验证token，需要和发码通知中的token一致
        :param codemerchant_id: 码商ID,是码商的话必须传递,如果是信任卖家,不需要传
        :param qr_images: 不需要上传二维码图片的码商请不要传，需要传入二维码的码商请先调用taobao.vmarket.eticket.qrcode.upload接口，将返回的img_filename文件名称作为参数，多个文件名用逗号隔开且与参数verify_codes按从左到有的顺序一一对应。
        """
        return self._top_request(
            "taobao.vmarket.eticket.send",
            {
                "order_id": order_id,
                "verify_codes": verify_codes,
                "token": token,
                "codemerchant_id": codemerchant_id,
                "qr_images": qr_images
            },
            result_processor=lambda x: x["ret_code"]
        )

    def taobao_vmarket_eticket_reverse(
            self,
            order_id,
            reverse_code,
            reverse_num,
            consume_secial_num,
            token,
            verify_codes='',
            qr_images='',
            codemerchant_id='',
            posid=''
    ):
        """
        电子凭证冲正接口
        电子凭证平台冲正接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21392

        :param order_id: 进行验码的电子凭证订单的订单ID
        :param reverse_code: 冲正的码，只支持单个码
        :param reverse_num: 冲正份数（必须是和被冲正的核销记录的份数一致）
        :param consume_secial_num: 需要冲正的核销记录对应核销流水号（对应的核销操作时候传递的自定义流水号）
        :param token: 安全验证token，需要和该订单发码通知中的token一致
        :param verify_codes: 所有冲正后需要重新生成的码和对应的次数。码和次数之间用英文冒号分隔，多个码之间用英文逗号分隔。如果冲正后不需要重新生成码，留空
        :param qr_images: 不需要上传二维码图片或者冲正后不需要变更码的请不要传，需要传入二维码的码商请先调用taobao.vmarket.eticket.qrcode.upload接口，将返回的img_filename文件名称作为参数，多个文件名用逗号隔开且与参数verify_codes按从左到有的顺序一一对应。
        :param codemerchant_id: 码商ID，是码商的话必须传递，如果是信任卖家不要传
        :param posid: 机具id，如果是码商必须传，如果是信任卖家不要传
        """
        return self._top_request(
            "taobao.vmarket.eticket.reverse",
            {
                "order_id": order_id,
                "reverse_code": reverse_code,
                "reverse_num": reverse_num,
                "consume_secial_num": consume_secial_num,
                "token": token,
                "verify_codes": verify_codes,
                "qr_images": qr_images,
                "codemerchant_id": codemerchant_id,
                "posid": posid
            }
        )

    def taobao_vmarket_eticket_codes_get(
            self,
            order_id,
            codemerchant_id=''
    ):
        """
        电子凭证码列表查询
        查询某个订单的所有码的列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21429

        :param order_id: 订单号
        :param codemerchant_id: 码商ID
        """
        return self._top_request(
            "taobao.vmarket.eticket.codes.get",
            {
                "order_id": order_id,
                "codemerchant_id": codemerchant_id
            }
        )

    def taobao_vmarket_eticket_oplogs_get(
            self,
            type,
            start_time='',
            end_time='',
            code='',
            mobile='',
            page_no='1',
            page_size='40',
            sort='',
            posid='',
            codemerchant_id=''
    ):
        """
        电子凭证操作日志查询
        电子凭证核销日志查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21430

        :param type: 0:全部 1:核销 2:冲正
        :param start_time: 开始时间
        :param end_time: 结束时间
        :param code: 核销码
        :param mobile: 手机号后四位
        :param page_no: 当前页码
        :param page_size: 每页显示的记录数，最大为40，默认为40
        :param sort: 排序方式
        :param posid: 核销身份
        :param codemerchant_id: 码商ID
        """
        return self._top_request(
            "taobao.vmarket.eticket.oplogs.get",
            {
                "type": type,
                "start_time": start_time,
                "end_time": end_time,
                "code": code,
                "mobile": mobile,
                "page_no": page_no,
                "page_size": page_size,
                "sort": sort,
                "posid": posid,
                "codemerchant_id": codemerchant_id
            }
        )

    def taobao_vmarket_eticket_tasks_get(
            self,
            type,
            seller_id='',
            page_no='1',
            page_size='40',
            codemerchant_id=''
    ):
        """
        任务列表获取接口
        外部合作卖家获取任务列表的信息：如发码同通知失败或者回调失败的订单号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21631

        :param type: 返回结果类型:<br/>1:返回通知失败的订单<br/>2.返回通知成功回调失败的订单
        :param seller_id: 卖家家ID(信任卖家不必传，码商可选)
        :param page_no: 页码。取值范围:大于零的整数; 默认值:1
        :param page_size: 每页获取条数。默认值40，最小值1，最大值100。
        :param codemerchant_id: 码商ID，如果是码商，必须传，如果是信任卖家，不需要传
        """
        return self._top_request(
            "taobao.vmarket.eticket.tasks.get",
            {
                "type": type,
                "seller_id": seller_id,
                "page_no": page_no,
                "page_size": page_size,
                "codemerchant_id": codemerchant_id
            }
        )

    def taobao_vmarket_eticket_manage_notify(
            self,
            order_id,
            notify_method,
            codemerchant_id=''
    ):
        """
        主动发起通知接口
        外部合作商家主动发起通知接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21632

        :param order_id: 订单编号
        :param notify_method: 需要调用的通知方法，目前仅支持是send（发码）或resend（重新发码）
        :param codemerchant_id: 码商ID，如果是码商，必须传，如果是信任卖家，不需要传
        """
        return self._top_request(
            "taobao.vmarket.eticket.manage.notify",
            {
                "order_id": order_id,
                "notify_method": notify_method,
                "codemerchant_id": codemerchant_id
            },
            result_processor=lambda x: x["ret_code"]
        )

    def taobao_vmarket_eticket_auth_beforeconsume(
            self,
            verify_code,
            operatorid,
            storeid=''
    ):
        """
        核销放行的查询接口
        针对O2O电子凭证核销放行业务，为满足码商能够核销淘宝码而开放的核销查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22173

        :param verify_code: 核销的码，只支持单个码，多个码核销需要多次调用
        :param operatorid: 核销方的ID，如果是普通码商必须传入机具ID,如果是私有码商家（即原有的信任商家）可默认传入私有码商ID
        :param storeid: 网点ID,网点授权核销时，必须传入；其他核销方式可不传
        """
        return self._top_request(
            "taobao.vmarket.eticket.auth.beforeconsume",
            {
                "verify_code": verify_code,
                "operatorid": operatorid,
                "storeid": storeid
            }
        )

    def taobao_vmarket_eticket_auth_consume(
            self,
            verify_code,
            consume_num,
            operatorid,
            serial_num,
            storeid=''
    ):
        """
        核销放行的核销接口
        针对O2O电子凭证核销放行业务，为满足码商能够核销淘宝码而开放的核销接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22174

        :param verify_code: 核销的码，只支持单个码，多个码核销需要多次调用
        :param consume_num: 核销份数
        :param operatorid: 核销方的ID，如果是普通码商必须传入机具ID,如果是私有码商家（即原有的信任商家）可默认传入私有码商ID
        :param serial_num: 自定义核销流水号，需要小于等于100个字符(a-zA-Z0-9_)
        :param storeid: 网点ID,网点授权核销时，必须传入；其他核销方式可不传
        """
        return self._top_request(
            "taobao.vmarket.eticket.auth.consume",
            {
                "verify_code": verify_code,
                "consume_num": consume_num,
                "operatorid": operatorid,
                "serial_num": serial_num,
                "storeid": storeid
            }
        )

    def taobao_vmarket_eticket_qrcode_upload(
            self,
            code_merchant_id,
            img_bytes
    ):
        """
        码商二维码图片上传
        电子凭证的码商可以通过这个接口，上传他们发送的二维码图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22994

        :param code_merchant_id: 码商ID
        :param img_bytes: 上传的图片byte[]  小于300K，图片尺寸400*400以内
        """
        return self._top_request(
            "taobao.vmarket.eticket.qrcode.upload",
            {
                "code_merchant_id": code_merchant_id,
                "img_bytes": img_bytes
            }
        )

    def taobao_vmarket_eticket_time_expand(
            self,
            order_id,
            expand_days
    ):
        """
        订单延时接口
        提供码商操作订单延期接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23239

        :param order_id: 订单ID
        :param expand_days: 延长天数，延长时间=当前过期时间+延长天数
        """
        return self._top_request(
            "taobao.vmarket.eticket.time.expand",
            {
                "order_id": order_id,
                "expand_days": expand_days
            },
            result_processor=lambda x: x["ret_code"]
        )

    def taobao_vmarket_eticket_store_get(
            self,
            order_id
    ):
        """
        获取电子凭证预约门店信息
        用于给外部商家查询电子凭证预约门店信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23842

        :param order_id: 订单ID
        """
        return self._top_request(
            "taobao.vmarket.eticket.store.get",
            {
                "order_id": order_id
            }
        )

    def taobao_vmarket_eticket_package_base_get(
            self,
            package_id
    ):
        """
        获取包基本信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25214

        :param package_id: 包id
        """
        return self._top_request(
            "taobao.vmarket.eticket.package.base.get",
            {
                "package_id": package_id
            }
        )

    def taobao_vmarket_eticket_card_consumecard(
            self,
            card_id,
            card_level,
            consume_value,
            buyer_nick,
            reason,
            operator_id,
            consume_serial_num,
            token,
            store_id='0',
            consume_code='0'
    ):
        """
        电子凭证储值卡核销
        线下商户核销时，ISV调用电子凭证的isv接口来对电子凭证储值卡核销对应金额
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25329

        :param card_id: 卡号
        :param card_level: 卡内等级
        :param consume_value: 核销金额，精确到分，例如1.99元=199
        :param buyer_nick: 买家昵称
        :param reason: 核销原因
        :param operator_id: 操作人id
        :param consume_serial_num: 核销流水号，外部ISV全局唯一
        :param token: 安全token
        :param store_id: 门店id
        :param consume_code: 核销code
        """
        return self._top_request(
            "taobao.vmarket.eticket.card.consumecard",
            {
                "card_id": card_id,
                "card_level": card_level,
                "consume_value": consume_value,
                "buyer_nick": buyer_nick,
                "reason": reason,
                "operator_id": operator_id,
                "consume_serial_num": consume_serial_num,
                "token": token,
                "store_id": store_id,
                "consume_code": consume_code
            },
            result_processor=lambda x: x["resultcode"]
        )

    def taobao_vmarket_eticket_package_base_list_get(
            self
    ):
        """
        根据卖家id，获取关联的所有包
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25352

        """
        return self._top_request(
            "taobao.vmarket.eticket.package.base.list.get"
        )

    def taobao_vmarket_eticket_flow_resend(
            self,
            outer_id,
            biz_type
    ):
        """
        业务重新触发发码短信
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26238

        :param outer_id: 业务单号
        :param biz_type: 业务类型值，可联系淘宝业务运营取得具体值
        """
        return self._top_request(
            "taobao.vmarket.eticket.flow.resend",
            {
                "outer_id": outer_id,
                "biz_type": biz_type
            }
        )

    def taobao_vmarket_eticket_flow_consume(
            self,
            outer_id,
            code,
            biz_type,
            operator=''
    ):
        """
        无交易类凭证核销
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26239

        :param outer_id: 业务单号
        :param code: 凭证码
        :param biz_type: 淘宝业务提供的业务类型值，请联系相关业务运营取得
        :param operator: 核销操作人
        """
        return self._top_request(
            "taobao.vmarket.eticket.flow.consume",
            {
                "outer_id": outer_id,
                "code": code,
                "biz_type": biz_type,
                "operator": operator
            }
        )

    def taobao_vmarket_eticket_failsend(
            self,
            order_id,
            error_code,
            token='',
            error_msg=''
    ):
        """
        无法发码回调
        针对一次发码通知，码商无法完成发码，则可以通过此接口告知电子凭证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26304

        :param order_id: 订单号
        :param error_code: 错误码
        :param token: 发码通知时的token
        :param error_msg: 错误信息
        """
        return self._top_request(
            "taobao.vmarket.eticket.failsend",
            {
                "order_id": order_id,
                "error_code": error_code,
                "token": token,
                "error_msg": error_msg
            },
            result_processor=lambda x: x["ret_code"]
        )

    def taobao_eticket_merchant_ma_reverse(
            self,
            code,
            outer_id,
            reverse_num,
            serial_num,
            token,
            biz_type='3001',
            pos_id=''
    ):
        """
        电子凭证冲正接口
        电子凭证平台冲正接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27155

        :param code: 码值
        :param outer_id: 业务id（订单号）
        :param reverse_num: 冲正份数，需要与核销份数一致
        :param serial_num: 需要冲正的核销序列号
        :param token: 需要跟发码通知获取到的参数一致
        :param biz_type: 业务类型
        :param pos_id: 机具编号，如果核销时有则必传
        """
        return self._top_request(
            "taobao.eticket.merchant.ma.reverse",
            {
                "code": code,
                "outer_id": outer_id,
                "reverse_num": reverse_num,
                "serial_num": serial_num,
                "token": token,
                "biz_type": biz_type,
                "pos_id": pos_id
            }
        )

    def taobao_eticket_merchant_img_upload(
            self,
            img_bytes
    ):
        """
        码商上传二维码图片
        电子凭证的码商可以通过这个接口，上传二维码图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27156

        :param img_bytes: 二维码图片
        """
        return self._top_request(
            "taobao.eticket.merchant.img.upload",
            {
                "img_bytes": img_bytes
            }
        )

    def taobao_eticket_merchant_ma_available(
            self,
            code,
            consume_num,
            outer_id,
            token,
            biz_type='3001',
            pos_id='',
            serial_num=''
    ):
        """
        电子凭证核销前校验接口
        商家验码之前的调用接口，用来判断是否可以进行核销操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27157

        :param code: 需要被核销的码
        :param consume_num: 核销份数
        :param outer_id: 业务id（订单号）
        :param token: 需要跟发码通知获取到的参数一致
        :param biz_type: 业务类型
        :param pos_id: 机具编号
        :param serial_num: 核销序列号，需要保证唯一
        """
        return self._top_request(
            "taobao.eticket.merchant.ma.available",
            {
                "code": code,
                "consume_num": consume_num,
                "outer_id": outer_id,
                "token": token,
                "biz_type": biz_type,
                "pos_id": pos_id,
                "serial_num": serial_num
            }
        )

    def taobao_eticket_merchant_ma_consume(
            self,
            code,
            consume_num,
            outer_id,
            serial_num,
            token,
            biz_type='3001',
            isv_ma_list=None,
            pos_id=''
    ):
        """
        电子凭证核销接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27158

        :param code: 需要被核销的码
        :param consume_num: 核销份数
        :param outer_id: 业务id（订单号）
        :param serial_num: 核销序列号，需要保证唯一
        :param token: 需要跟发码通知获取到的参数一致
        :param biz_type: 业务类型
        :param isv_ma_list: 核销后换码的码列表
        :param pos_id: 机具编号
        """
        return self._top_request(
            "taobao.eticket.merchant.ma.consume",
            {
                "code": code,
                "consume_num": consume_num,
                "outer_id": outer_id,
                "serial_num": serial_num,
                "token": token,
                "biz_type": biz_type,
                "isv_ma_list": isv_ma_list,
                "pos_id": pos_id
            }
        )

    def taobao_eticket_merchant_ma_resend(
            self,
            isv_ma_list,
            outer_id,
            token,
            biz_type='3001'
    ):
        """
        电子凭证重发回调接口
        码商重发电子凭证回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27159

        :param isv_ma_list: 待重发的码列表
        :param outer_id: 业务id（订单号）
        :param token: 需要跟发码通知获取到的参数一致
        :param biz_type: 业务类型
        """
        return self._top_request(
            "taobao.eticket.merchant.ma.resend",
            {
                "isv_ma_list": isv_ma_list,
                "outer_id": outer_id,
                "token": token,
                "biz_type": biz_type
            }
        )

    def taobao_eticket_merchant_ma_failsend(
            self,
            outer_id,
            sub_code,
            sub_msg,
            token,
            biz_type='3001'
    ):
        """
        码商发码失败回调接口
        针对一次发码通知，码商无法完成发码，则可以通过此接口告知电子凭证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27160

        :param outer_id: 业务id（订单号）
        :param sub_code: 错误原因码
        :param sub_msg: 错误码描述
        :param token: 需要与发码通知获取的值一致
        :param biz_type: 业务类型
        """
        return self._top_request(
            "taobao.eticket.merchant.ma.failsend",
            {
                "outer_id": outer_id,
                "sub_code": sub_code,
                "sub_msg": sub_msg,
                "token": token,
                "biz_type": biz_type
            }
        )

    def taobao_eticket_merchant_ma_send(
            self,
            isv_ma_list,
            outer_id,
            token,
            biz_type='3001'
    ):
        """
        码商发码成功回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27161

        :param isv_ma_list: 需要发送的码列表
        :param outer_id: 业务id（订单号）
        :param token: 需要跟发码通知获取到的参数一致
        :param biz_type: 业务类型
        """
        return self._top_request(
            "taobao.eticket.merchant.ma.send",
            {
                "isv_ma_list": isv_ma_list,
                "outer_id": outer_id,
                "token": token,
                "biz_type": biz_type
            }
        )

    def taobao_eticket_merchant_tbma_get(
            self,
            query_tb_ma_callback_req
    ):
        """
        码商查询淘宝码接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28157

        :param query_tb_ma_callback_req: 查询淘宝码请求
        """
        return self._top_request(
            "taobao.eticket.merchant.tbma.get",
            {
                "query_tb_ma_callback_req": query_tb_ma_callback_req
            }
        )


class TbCaiPiao(DingTalkBaseAPI):
    """
    彩票API
    """

    def taobao_caipiao_signstatus_check(
            self
    ):
        """
        检查用户是否签署支付宝代购协议
        检查用户是否签署了支付宝代扣协议。如果签署了，返回true; 如果没签署，返回false, 同时返回签署代扣协议的Url。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11114

        """
        return self._top_request(
            "taobao.caipiao.signstatus.check"
        )

    def taobao_caipiao_lotterytypes_get(
            self
    ):
        """
        获取可用的彩种列表
        获取彩票系统支持的可用于赠送的彩种列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=11115

        """
        return self._top_request(
            "taobao.caipiao.lotterytypes.get"
        )

    def taobao_caipiao_present_stat_get(
            self,
            days=''
    ):
        """
        获取卖家按天统计的彩票赠送数据
        查询卖家一段时间内按天统计的彩票赠送数据，只支持查询90天以内的数据.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21197

        :param days: 指定查询的天数，从当前日期（不包括当前日期）向前推算的天数，可为空。如果为空、0、负数或者大于90天，则设置为默认的90天。举例：当天是20120703， days=2， 则统计数据的日期为：20120702，20120701.
        """
        return self._top_request(
            "taobao.caipiao.present.stat.get",
            {
                "days": days
            }
        )

    def taobao_caipiao_lottery_sendbynick(
            self,
            buyer_nick,
            stake_count,
            lottery_type_id='',
            sweety_words=''
    ):
        """
        卖家使用nick给买家送彩票
        卖家使用nick给买家送彩票，可以指定彩种和注数。赠送成功，返回true; 以下几种情况情况， 返回false: 注数超过100注、卖家未签署支付宝代扣协议、卖家或者买家信息不存在等。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21412

        :param buyer_nick: 彩票接收方nick， 不可为空、''。
        :param stake_count: 彩票注数，不可为空、0和负数，最大值为100。
        :param lottery_type_id: 彩种ID，此彩种ID为彩票系统中的序号。
        :param sweety_words: 送彩票给接收方的赠言。 不能超过20个字符，1个中文字符、1个英文字母及1个数字等均当作一个字符，如果超过，则会截取。
        """
        return self._top_request(
            "taobao.caipiao.lottery.sendbynick",
            {
                "buyer_nick": buyer_nick,
                "stake_count": stake_count,
                "lottery_type_id": lottery_type_id,
                "sweety_words": sweety_words
            },
            result_processor=lambda x: x["send_result"]
        )

    def taobao_caipiao_shop_info_input(
            self,
            present_type,
            act_start_date,
            act_end_date,
            shop_type,
            shop_name='',
            shop_desc=''
    ):
        """
        录入参加送彩票店铺信息
        录入参加送彩票店铺信息，如果录入成功，返回true，如果录入失败，返回false，后端会根据卖家id与赠送类型（sellerid_presenttype_uk）来决定是新增数据还是修改数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21748

        :param present_type: 赠送类型：0-满就送；1-好评送；2-分享送；3-游戏送；4-收藏送，不可为空
        :param act_start_date: 活动开始时间，格式需严格遵守yyyy-MM-dd HH:mm:ss，不可为空
        :param act_end_date: 活动结束时间，格式需严格遵守yyyy-MM-dd HH:mm:ss，不可为空
        :param shop_type: 店铺类目编号，不可为空
        :param shop_name: 店铺名称
        :param shop_desc: 店铺参加的送彩票活动描述
        """
        return self._top_request(
            "taobao.caipiao.shop.info.input",
            {
                "present_type": present_type,
                "act_start_date": act_start_date,
                "act_end_date": act_end_date,
                "shop_type": shop_type,
                "shop_name": shop_name,
                "shop_desc": shop_desc
            },
            result_processor=lambda x: x["input_result"]
        )

    def taobao_caipiao_goods_info_input(
            self,
            goods_id,
            goods_price,
            present_type,
            act_start_date,
            act_end_date,
            goods_type,
            lottery_type_id,
            goods_title='',
            goods_image='',
            goods_desc=''
    ):
        """
        录入参加送彩票商品信息
        录入参加送彩票商品信息，如果录入成功，返回true，如果录入失败，返回false，后端会根据商品id与赠送类型（goodsid_presenttype_uk）来决定是新增数据还是修改数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21749

        :param goods_id: 商品在淘宝的唯一id，不可为空
        :param goods_price: 商品价格,保留两位小数，不可为空
        :param present_type: 赠送类型：0-满就送；1-好评送；2-分享送；3-游戏送；4-收藏送，不可为空
        :param act_start_date: 活动开始时间，格式需严格遵守yyyy-MM-dd HH:mm:ss，不可为空
        :param act_end_date: 活动结束时间，格式需严格遵守yyyy-MM-dd HH:mm:ss，不可为空
        :param goods_type: 商品类目编号，不可为空
        :param lottery_type_id: 彩种id,不可为空
        :param goods_title: 商品标题
        :param goods_image: 商品主图地址
        :param goods_desc: 店铺相关商品参加的送彩票活动描述
        """
        return self._top_request(
            "taobao.caipiao.goods.info.input",
            {
                "goods_id": goods_id,
                "goods_price": goods_price,
                "present_type": present_type,
                "act_start_date": act_start_date,
                "act_end_date": act_end_date,
                "goods_type": goods_type,
                "lottery_type_id": lottery_type_id,
                "goods_title": goods_title,
                "goods_image": goods_image,
                "goods_desc": goods_desc
            },
            result_processor=lambda x: x["input_result"]
        )

    def taobao_caipiao_goods_info_get(
            self
    ):
        """
        根据卖家id与appkey获取商品信息
        根据卖家id与appkey获取商品信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21828

        """
        return self._top_request(
            "taobao.caipiao.goods.info.get"
        )

    def taobao_caipiao_marketing_put(
            self,
            detail
    ):
        """
        创建或修改商家送彩票活动
        卖家通过此接口新增或修改送彩票活动的配置，比如活动时间、活动的条件等。
        店铺装修、宝贝详情页的宣导素材示例：
        https://gw.alicdn.com/tfs/TB1_nOiSXXXXXbgXXXXXXXXXXXX-750-280.png
        https://gw.alicdn.com/tfs/TB1FZX6SXXXXXXzXFXXXXXXXXXX-790-280.png
        https://gw.alicdn.com/tfs/TB1z4t8SXXXXXckXpXXXXXXXXXX-750-280.png
        https://gw.alicdn.com/tfs/TB1BhqgSXXXXXcDXXXXXXXXXXXX-750-280.png
        https://gw.alicdn.com/tfs/TB1TYt9SXXXXXXAXFXXXXXXXXXX-750-280.png
        https://gw.alicdn.com/tfs/TB1tzpNSXXXXXacXVXXXXXXXXXX-790-280.png
        https://gw.alicdn.com/tfs/TB1UXdxSXXXXXXsapXXXXXXXXXX-790-280.png
        https://gw.alicdn.com/tfs/TB1_gV.SXXXXXbZXpXXXXXXXXXX-790-280.png
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29751

        :param detail: 活动详情设置
        """
        return self._top_request(
            "taobao.caipiao.marketing.put",
            {
                "detail": detail
            }
        )


class TbZhangWu(DingTalkBaseAPI):
    """
    账务API
    """

    def taobao_bill_accounts_get(
            self,
            fields,
            aids=''
    ):
        """
        查询费用科目信息(限自研商家)
        查询费用账户信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21709

        :param fields: 需要返回的字段
        :param aids: 需要获取的科目ID
        """
        return self._top_request(
            "taobao.bill.accounts.get",
            {
                "fields": fields,
                "aids": aids
            }
        )

    def taobao_bill_book_bills_get(
            self,
            account_id,
            start_time,
            end_time,
            fields,
            journal_types='',
            page_size='40',
            page_no='1'
    ):
        """
        查询虚拟账户明细数据(自研发商家专用)
        查询虚拟账户明细数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21712

        :param account_id: 虚拟账户科目编号
        :param start_time: 记账开始时间
        :param end_time: 记账结束时间,end_time与start_time相差不能超过30天
        :param fields: 需要返回的字段:bid,account_id,journal_type,amount,book_time,description,gmt_create,gmt_modified ,如果不是以上字段将自动忽略
        :param journal_types: 明细流水类型:流水类型:101、可用金充值；102、可用金扣除；103、冻结；104、解冻；105、冻结金充值；106、冻结金扣除
        :param page_size: 每页大小,建议40~100,不能超过100
        :param page_no: 页码,传入值为1代表第一页,传入值为2代表第二页,依此类推.默认返回的数据是从第一页开始
        """
        return self._top_request(
            "taobao.bill.book.bills.get",
            {
                "account_id": account_id,
                "start_time": start_time,
                "end_time": end_time,
                "fields": fields,
                "journal_types": journal_types,
                "page_size": page_size,
                "page_no": page_no
            }
        )

    def taobao_bill_bills_get(
            self,
            fields,
            start_time,
            end_time,
            account_id='',
            trade_id='',
            order_id='',
            time_type='',
            page_no='1',
            page_size='40'
    ):
        """
        查询账单明细数据(自研发商家专用)
        查询账单明细数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21713

        :param fields: 传入需要返回的字段,参见Bill结构体
        :param start_time: 开始时间
        :param end_time: 结束时间,限制:结束时间-开始时间不能大于1天(根据order_id或者trade_id查询除外)
        :param account_id: 科目编号
        :param trade_id: 交易编号
        :param order_id: 子订单编号
        :param time_type: 查询条件中的时间类型:1-交易订单完成时间biz_time 2-支付宝扣款时间pay_time 如果不填默认为2即根据支付时间查询,查询的结果会根据该时间倒排序
        :param page_no: 页数,建议不要超过100页,越大性能越低,有可能会超时
        :param page_size: 每页大小,默认40条,可选范围 ：40~100
        """
        return self._top_request(
            "taobao.bill.bills.get",
            {
                "fields": fields,
                "start_time": start_time,
                "end_time": end_time,
                "account_id": account_id,
                "trade_id": trade_id,
                "order_id": order_id,
                "time_type": time_type,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_tae_book_bills_get(
            self,
            start_time,
            end_time,
            fields,
            journal_types='',
            page_size='',
            page_no='',
            account_id=''
    ):
        """
        tae查询虚拟账户明细数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24510

        :param start_time: 记账开始时间
        :param end_time: 记账结束时间,end_time与start_time相差不能超过30天
        :param fields: 需要返回的字段:bid,account_id,journal_type,amount,book_time,description,gmt_create,gmt_modified ,如果不是以上字段将自动忽略
        :param journal_types: 明细流水类型:流水类型:101、可用金充值；102、可用金扣除；103、冻结；104、解冻；105、冻结金充值；106、冻结金扣除
        :param page_size: 每页大小,建议40~100,不能超过100
        :param page_no: 页码,传入值为1代表第一页,传入值为2代表第二页,依此类推.默认返回的数据是从第一页开始
        :param account_id: 虚拟账户科目编号
        """
        return self._top_request(
            "taobao.tae.book.bills.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "fields": fields,
                "journal_types": journal_types,
                "page_size": page_size,
                "page_no": page_no,
                "account_id": account_id
            }
        )

    def taobao_tae_book_bill_get(
            self,
            fields,
            id,
            account_id,
            bid=''
    ):
        """
        tae查询单笔虚拟账户明细
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24511

        :param fields: 需要返回的字段:参见BookBill结构体
        :param id: 虚拟账户流水编号
        :param account_id: 虚拟账户科目编号
        :param bid: 虚拟账户流水编号
        """
        return self._top_request(
            "taobao.tae.book.bill.get",
            {
                "fields": fields,
                "id": id,
                "account_id": account_id,
                "bid": bid
            },
            result_processor=lambda x: x["bookbill"]
        )

    def taobao_tae_accounts_get(
            self,
            fields,
            aids=''
    ):
        """
        tae查询费用科目信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24512

        :param fields: 需要返回的字段
        :param aids: 需要获取的科目ID
        """
        return self._top_request(
            "taobao.tae.accounts.get",
            {
                "fields": fields,
                "aids": aids
            }
        )

    def taobao_tae_bills_get(
            self,
            query_start_date,
            query_end_date,
            fields,
            p_trade_id='',
            trade_id='',
            page_size='',
            query_date_type='',
            current_page='',
            item_id=''
    ):
        """
        tae查询账单明细
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24513

        :param query_start_date: 开始时间
        :param query_end_date: 结束时间,限制:结束时间-开始时间不能大于1天(根据order_id或者trade_id查询除外)
        :param fields: 传入需要返回的字段,参见Bill结构体
        :param p_trade_id: 交易编号
        :param trade_id: 子订单编号
        :param page_size: 每页大小,默认40条,可选范围 ：40~100
        :param query_date_type: 查询条件中的时间类型:1-交易订单完成时间biz_time 2-支付宝扣款时间pay_time 如果不填默认为2即根据支付时间查询,查询的结果会根据该时间倒排序
        :param current_page: 页数,建议不要超过100页,越大性能越低,有可能会超时
        :param item_id: 科目编号
        """
        return self._top_request(
            "taobao.tae.bills.get",
            {
                "query_start_date": query_start_date,
                "query_end_date": query_end_date,
                "fields": fields,
                "p_trade_id": p_trade_id,
                "trade_id": trade_id,
                "page_size": page_size,
                "query_date_type": query_date_type,
                "current_page": current_page,
                "item_id": item_id
            }
        )

    def taobao_tae_bill_get(
            self,
            fields,
            id,
            account_id,
            bid=''
    ):
        """
        tae查询单笔账单明细
        查询单笔账单明细
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24514

        :param fields: 传入需要返回的字段
        :param id: 账单编号
        :param account_id: 虚拟账户科目编号
        :param bid: 账单编号
        """
        return self._top_request(
            "taobao.tae.bill.get",
            {
                "fields": fields,
                "id": id,
                "account_id": account_id,
                "bid": bid
            },
            result_processor=lambda x: x["bill"]
        )


class TbPaiMai(DingTalkBaseAPI):
    """
    拍卖API
    """

    def taobao_paimai_tbcar_upload_file(
            self,
            data='',
            file_name=''
    ):
        """
        第三方检测机构上传检测报告文本
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提供第三方汽车检测机构上传检测报告文本
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28045

        :param data: 字节流
        :param file_name: 文件名称
        """
        return self._top_request(
            "taobao.paimai.tbcar.upload.file",
            {
                "data": data,
                "file_name": file_name
            },
            result_processor=lambda x: x["url"]
        )

    def taobao_paimai_tbcar_publish_report(
            self,
            inquiry_id='',
            report_tfs='',
            mechanism=''
    ):
        """
        提供第三方汽车检测机构发布检测报告文本
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提供第三方汽车检测机构上传检测报告文本
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28057

        :param inquiry_id: 预约单id
        :param report_tfs: 检测报告tfs地址
        :param mechanism: 检测商名称
        """
        return self._top_request(
            "taobao.paimai.tbcar.publish.report",
            {
                "inquiry_id": inquiry_id,
                "report_tfs": report_tfs,
                "mechanism": mechanism
            }
        )

    def taobao_paimai_itemprops_get(
            self,
            cid,
            type='1',
            is_item_prop='',
            is_input_prop='',
            is_enum_prop='',
            pid='',
            attr_keys='',
            child_path='',
            parent_pid='',
            is_sale_prop='',
            datetime='',
            is_color_prop='',
            is_key_prop='',
            fields='pid,name,must,multi,prop_values'
    ):
        """
        拍卖相关类目属性
        读取拍卖相关类目属性
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38618

        :param cid: 叶子类目ID，如果只传cid，则只返回一级属性,通过taobao.itemcats.get获得叶子类目ID
        :param type: 获取类目的类型：1代表集市、2代表天猫
        :param is_item_prop: 是否商品属性，这个属性只能放于发布商品时使用。可选值:true(是),false(否)
        :param is_input_prop: 在is_enum_prop是true的前提下，是否是卖家可以自行输入的属性（注：如果is_enum_prop返回false，该参数统一返回false）。可选值:true(是),false(否) (删除的属性不会匹配和返回这个条件)
        :param is_enum_prop: 是否枚举属性。可选值:true(是),false(否) (删除的属性不会匹配和返回这个条件)。如果返回true，属性值是下拉框选择输入，如果返回false，属性值是用户自行手工输入。
        :param pid: 属性id (取类目属性时，传pid，不用同时传PID和parent_pid)
        :param attr_keys: 属性的Key，支持多条，以“,”分隔
        :param child_path: 类目子属性路径,由该子属性上层的类目属性和类目属性值组成,格式pid:vid;pid:vid.取类目子属性需要传child_path,cid
        :param parent_pid: 父属性ID
        :param is_sale_prop: 是否销售属性。可选值:true(是),false(否)
        :param datetime: 增量时间戳。格式:yyyy-MM-dd HH:mm:ss假如传2005-01-01 00:00:00，则取所有的属性和子属性ID(如果传了pid会忽略datetime)
        :param is_color_prop: 是否颜色属性。可选值:true(是),false(否) (删除的属性不会匹配和返回这个条件)
        :param is_key_prop: 是否关键属性。可选值:true(是),false(否)
        :param fields: 需要返回的字段列表，见：ItemProp，默认返回：pid, name, must, multi, prop_values
        """
        return self._top_request(
            "taobao.paimai.itemprops.get",
            {
                "cid": cid,
                "type": type,
                "is_item_prop": is_item_prop,
                "is_input_prop": is_input_prop,
                "is_enum_prop": is_enum_prop,
                "pid": pid,
                "attr_keys": attr_keys,
                "child_path": child_path,
                "parent_pid": parent_pid,
                "is_sale_prop": is_sale_prop,
                "datetime": datetime,
                "is_color_prop": is_color_prop,
                "is_key_prop": is_key_prop,
                "fields": fields
            }
        )


class TbQianNiuJieKou(DingTalkBaseAPI):
    """
    千牛接口
    """

    def taobao_qianniu_task_message_send(
            self,
            task_id='',
            metadata_id=''
    ):
        """
        发送任务提醒消息
        如果taskid不为空，则只发给task对应的单个接收人。如果taskid为空，则发给metadata_id对应的所有接收人。消息会以任务消息的形式发给客户端。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22593

        :param task_id: 任务ID。如果taskid不为空，则只发给task对应的单个接收人。如果taskid为空，则发给metadata_id对应的所有接收人。
        :param metadata_id: 任务元id，如果taskid不为空，则只发给task对应的单个接收人。如果taskid为空，则发给metadata_id对应的所有接收人。
        """
        return self._top_request(
            "taobao.qianniu.task.message.send",
            {
                "task_id": task_id,
                "metadata_id": metadata_id
            }
        )

    def taobao_qianniu_tasks_get(
            self,
            fields,
            order_by='id',
            order_type='desc',
            remind_flag='',
            biz_nick='',
            start_date='',
            end_date='',
            modify_start_time_str='',
            modify_end_time_str='',
            priority='',
            exclude_biz_type='',
            key_word='',
            current_page='',
            page_size='20',
            biz_type='',
            sub_biz_type='',
            task_ids='',
            biz_ids='',
            receiver_uid='',
            sender_uid='',
            status='',
            sub_status='',
            metadata_ids='',
            need_meta='false',
            client_info='',
            need_deleted='false'
    ):
        """
        获取指定的任务
        获取指定的任务，可用的参数组合：<br/>task_ids + need_meta + fields：精确查找<br/>biz_type + sub_biz_type + biz_ids + need_meta + fields：按照业务ID查找<br/>biz_type + sub_biz_type + sender_uid + need_meta + fields：按照发起者查找<br/>biz_type + sub_biz_type + receiver_uid + need_meta + fields：按照执行者查找<br/>biz_type+modify_start_time+modify_end_time+fields:能支持指定修改时间的查询，用于增量查询等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22594

        :param fields: 逗号分隔的字段列表，各个字段含义： id：任务ID receiver_uid：执行者用户数字ID receiver_nick：执行者用户昵称 status：任务状态：0-未执行，1-执行中，2-执行完成，3-超时，4-取消，5-忽略 sub_status：子任务状态，由业务方自定义 finish_strategy：任务完成策略：1-一个人完成，2-所有人完成 gmt_finished：任务完成时间，格式：时间毫秒数 biz_type：业务类型 sub_biz_type：子业务类型 biz_id：业务ID biz_param：业务参数 biz_entry：业务入口 tag：任务标签 memo：任务备注
        :param order_by: 排序字段，可以为id,gmt_create,gmt_finished,metadata_id等
        :param order_type: asc为升，desc为降
        :param remind_flag: 0-不需要提醒，未设提醒时间 1-设置过提醒时间，需要提醒
        :param biz_nick: 业务相关的对象，当前主要表示买家nick
        :param start_date: 根据任务创建时间搜索的开始日期（含），不填则不限。例如只查询2014-01-01当天的任务，则将start_date和end_date都设置成2014-01-01
        :param end_date: 根据任务创建时间搜索的结束日期（含），不填则不限。例如只查询2014-01-01当天的任务，则将start_date和end_date都设置成2014-01-01
        :param modify_start_time_str: 根据任务修改时间搜索的开始时间（含），不填则不限。例如查询“2014-01-01 00:00:10”之后有修改的任务，则将modify_start_time_str设置成“2014-01-01 00:00:10”
        :param modify_end_time_str: 根据任务修改时间搜索的结束时间（含），不填则不限。例如查询“2014-01-01 00:00:10”之前有修改的任务，则将modify_end_time_str设置成“2014-01-01 00:00:10”
        :param priority: 优先级。即创建时的metadata中的优先级。0为低，1为中，2为高。
        :param exclude_biz_type: 需要排除的任务类型
        :param key_word: 关键词搜索。只对任务内容进行模糊匹配，以及bizid和biznick进行精准匹配
        :param current_page: 当前页数，从1开始
        :param page_size: 每页条数
        :param biz_type: 业务类型
        :param sub_biz_type: 子任务类型
        :param task_ids: 任务的ID列表，用逗号分隔
        :param biz_ids: 业务ID列表，逗号分隔
        :param receiver_uid: 任务执行者用户数字ID
        :param sender_uid: 任务发起者用户数字ID
        :param status: 逗号分隔的任务状态：0-未执行，1-执行中，2-执行完成，3-超时，4-取消，5-忽略
        :param sub_status: 逗号分隔的子任务状态，由业务方自定义
        :param metadata_ids: 任务元id，多个以逗号分隔
        :param need_meta: 是否需要meta信息，默认值为false
        :param client_info: 客户端的版本信息
        :param need_deleted: 是否需要删除的任务，默认为false
        """
        return self._top_request(
            "taobao.qianniu.tasks.get",
            {
                "fields": fields,
                "order_by": order_by,
                "order_type": order_type,
                "remind_flag": remind_flag,
                "biz_nick": biz_nick,
                "start_date": start_date,
                "end_date": end_date,
                "modify_start_time_str": modify_start_time_str,
                "modify_end_time_str": modify_end_time_str,
                "priority": priority,
                "exclude_biz_type": exclude_biz_type,
                "key_word": key_word,
                "current_page": current_page,
                "page_size": page_size,
                "biz_type": biz_type,
                "sub_biz_type": sub_biz_type,
                "task_ids": task_ids,
                "biz_ids": biz_ids,
                "receiver_uid": receiver_uid,
                "sender_uid": sender_uid,
                "status": status,
                "sub_status": sub_status,
                "metadata_ids": metadata_ids,
                "need_meta": need_meta,
                "client_info": client_info,
                "need_deleted": need_deleted
            },
            result_processor=lambda x: x["tasks"]
        )

    def taobao_qianniu_task_cancel(
            self,
            meta_id,
            memo=''
    ):
        """
        取消轻任务
        由任务发起者调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22595

        :param meta_id: 任务元数据ID
        :param memo: 任务备注
        """
        return self._top_request(
            "taobao.qianniu.task.cancel",
            {
                "meta_id": meta_id,
                "memo": memo
            }
        )

    def taobao_qianniu_task_finish(
            self,
            task_id,
            memo=''
    ):
        """
        完成轻任务
        由任务执行者调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22596

        :param task_id: 任务ID
        :param memo: 任务备注
        """
        return self._top_request(
            "taobao.qianniu.task.finish",
            {
                "task_id": task_id,
                "memo": memo
            }
        )

    def taobao_qianniu_task_update(
            self,
            task_id,
            sub_status='',
            tag='',
            memo='',
            status='',
            remind_time='',
            biz_param='',
            remind_flag='',
            memo_mode='0',
            priority='',
            is_deleted=''
    ):
        """
        更新轻任务
        由任务执行者调用，sub_status，tag和memo至少提供一个
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22597

        :param task_id: 任务ID
        :param sub_status: 子任务状态，由业务方自定义
        :param tag: 任务标签
        :param memo: 任务备注。当memo_mode为1时，memo将采用追加方式。
        :param status: 状态值，多个以逗号分隔
        :param remind_time: 提醒时间，时间的毫秒数
        :param biz_param: 应用自定义参数
        :param remind_flag: 0为不提醒，1为全部提醒，2为PC提醒，3为移动提醒，4为已提醒，5为已忽略。
        :param memo_mode: 表示memo字段的更新策略。如需采用追加方式的，请将此字段设置为1。
        :param priority: 默认填0，数字越大优化级越高。当前常用0和1.
        :param is_deleted: 0表示没有删除，1表示删除
        """
        return self._top_request(
            "taobao.qianniu.task.update",
            {
                "task_id": task_id,
                "sub_status": sub_status,
                "tag": tag,
                "memo": memo,
                "status": status,
                "remind_time": remind_time,
                "biz_param": biz_param,
                "remind_flag": remind_flag,
                "memo_mode": memo_mode,
                "priority": priority,
                "is_deleted": is_deleted
            }
        )

    def taobao_qianniu_taskmeta_update(
            self,
            meta
    ):
        """
        更新任务元数据
        由任务发起者调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22598

        :param meta: 要更新的任务元数据，JSON格式，例如：<br/>meta= {<br/>		'id' : 1,<br/>		'title' : 'xxx',<br/>		'content' : 'yyyy',<br/>		'biz_sys_Id' : 12232,<br/>		'biz_sys_task_type' : 1212,<br/>		'start_time' : 1380173565480,<br/>		'end_time' : 1380173565480,<br/> 'sender_uid' : 213123213,<br/>		'sender_nick' : 'tbtest1063',<br/>		'reminder_flag' : 1,<br/>		'finish_strategy' : 1<br/>	}
        """
        return self._top_request(
            "taobao.qianniu.taskmeta.update",
            {
                "meta": meta
            }
        )

    def taobao_qianniu_task_create(
            self,
            meta,
            tasks
    ):
        """
        创建轻任务
        发起一个轻任务，分配给多个执行者，并发送消息提醒，由任务发起者调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22599

        :param meta: 任务元数据，JSON格式，例如：<br/>meta = {<br/>            title : '可自定义',<br/>            content : “任务正文”,<br/>            sender_uid : user_id,<br/>            sender_nick : user_nick,<br/>            reminder_flag : 1,<br/>            finish_strategy : 0,<br/>         biz_type : 'memo',<br/>         priority : 0<br/>        };<br/>说明：reminder_flag:1表示需要发送任务提醒消息,0表示不需要消息提醒。建议写1;<br/>finish_strategy : 0表示只要一个人完成任务就可以，1表示所有人都需要完成任务。根据场景设置，建议选0;<br/>biz_type : 任务类型，请咨询千牛官方获取正确的任务类型;<br/>priority : 1表示高优先级，0表示普通;<br/>这里的举例为必填字段，一些选填字段没有列出，如有其它需求请联系千牛官方。
        :param tasks: 任务列表，JSON格式的数组，即支持多个接收人，例如：<br/>task = [{<br/>            receiver_uid : user_id,<br/>            receiver_nick : user_nick,<br/>            biz_type : 'memo',<br/>            sub_biz_type : 'memo',<br/>            biz_id : user_nick,<br/>            biz_nick : user_nick<br/>         }];<br/>上述为必填字段，其它字段请咨询千牛官方。
        """
        return self._top_request(
            "taobao.qianniu.task.create",
            {
                "meta": meta,
                "tasks": tasks
            }
        )

    def taobao_qianniu_tasks_count(
            self,
            biz_type='',
            sub_biz_type='',
            biz_ids='',
            task_ids='',
            sender_uid='',
            receiver_uid='',
            status='',
            sub_status='',
            remind_flag='',
            metadata_ids='',
            biz_nick='',
            start_date='',
            end_date='',
            priority='',
            exclude_biz_type='',
            key_word=''
    ):
        """
        任务查询条数接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22738

        :param biz_type: 业务类型
        :param sub_biz_type: 子任务类型
        :param biz_ids: 业务ID列表，逗号分隔
        :param task_ids: 任务的ID列表，用逗号分隔
        :param sender_uid: 任务发起者用户数字ID
        :param receiver_uid: 任务执行者用户数字ID
        :param status: 逗号分隔的任务状态：0-未执行，1-执行中，2-执行完成，3-超时，4-取消，5-忽略
        :param sub_status: 逗号分隔的子任务状态，由业务方自定义
        :param remind_flag: 0-不需要提醒，未设提醒时间 1-设置过提醒时间，需要提醒
        :param metadata_ids: 任务元id，多个以逗号分隔
        :param biz_nick: 与业务相关的买家nick
        :param start_date: 按时间段搜索时的开始日期，格式如2014-01-01，不填则不限
        :param end_date: 按时间段搜索的结束日期。不填则不限。格式为2014-01-01
        :param priority: 优先级
        :param exclude_biz_type: 需要排除的任务类型
        :param key_word: 关键词搜索。只对任务内容进行模糊匹配，以及bizid和biznick进行精准匹配
        """
        return self._top_request(
            "taobao.qianniu.tasks.count",
            {
                "biz_type": biz_type,
                "sub_biz_type": sub_biz_type,
                "biz_ids": biz_ids,
                "task_ids": task_ids,
                "sender_uid": sender_uid,
                "receiver_uid": receiver_uid,
                "status": status,
                "sub_status": sub_status,
                "remind_flag": remind_flag,
                "metadata_ids": metadata_ids,
                "biz_nick": biz_nick,
                "start_date": start_date,
                "end_date": end_date,
                "priority": priority,
                "exclude_biz_type": exclude_biz_type,
                "key_word": key_word
            }
        )

    def taobao_qianniu_task_increase(
            self,
            metadata_id,
            tasks
    ):
        """
        增加任务接收人接口
        根据任务元id增加任务接收人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22739

        :param metadata_id: 任务元id
        :param tasks: 任务列表，JSON格式，例如： tasks =[{ 'receiver_uid' : 123, 'receiver_nick' : 'nick'}, { 'receiver_uid' : 456, 'receiver_nick' : 'nick2'} ]
        """
        return self._top_request(
            "taobao.qianniu.task.increase",
            {
                "metadata_id": metadata_id,
                "tasks": tasks
            }
        )

    def taobao_qianniu_taskmetas_get(
            self,
            fields,
            sender_uid='',
            page_size='20',
            current_page='1',
            order_by='id',
            order_type='desc',
            status='',
            biz_type='',
            key_word='',
            client_info='',
            receiver_uid='',
            meta_ids=''
    ):
        """
        任务元查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22740

        :param fields: 逗号分隔的字段列表.如id,title,content,sender_uid,sender_nick,finish_strategy,biz_sys_Id,biz_sys_task_type,start_time,end_time,reminder_flag,priority
        :param sender_uid: 发起任务人的uid
        :param page_size: 分页数，最大100
        :param current_page: 当前页码
        :param order_by: 排序字段。gmt_create,priority等
        :param order_type: 升降序。asc为升，desc为降
        :param status: 0为未完成。2为完成。4为取消。不填为所有
        :param biz_type: 任务类型
        :param key_word: 按关键字搜索
        :param client_info: 客户端的版本信息
        :param receiver_uid: 接收人uid
        :param meta_ids: 任务元ID，多个以逗号分离
        """
        return self._top_request(
            "taobao.qianniu.taskmetas.get",
            {
                "fields": fields,
                "sender_uid": sender_uid,
                "page_size": page_size,
                "current_page": current_page,
                "order_by": order_by,
                "order_type": order_type,
                "status": status,
                "biz_type": biz_type,
                "key_word": key_word,
                "client_info": client_info,
                "receiver_uid": receiver_uid,
                "meta_ids": meta_ids
            },
            result_processor=lambda x: x["taskmetas"]
        )

    def taobao_qianniu_task_remove(
            self,
            metadata_id
    ):
        """
        轻任务删除接口
        轻任务删除接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23033

        :param metadata_id: 对于发起人删除一个任务，请使用这个字段，同时清除所有处理人。
        """
        return self._top_request(
            "taobao.qianniu.task.remove",
            {
                "metadata_id": metadata_id
            }
        )

    def taobao_qianniu_number_put(
            self,
            data
    ):
        """
        ISV上传数据接口
        ISV提供给卖家使用的业务数据，需要通过这个接口上传到千牛数据中心。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23310

        :param data: 考虑到稳定性，建议一次卖家最多为200个。
                     标准json格式的数组构成的字符串。每个元素为{user_id:****,field:'****',value:'****'}分别是用户的userid，数据的名称，以及数据的值。
        """
        return self._top_request(
            "taobao.qianniu.number.put",
            {
                "data": data
            }
        )

    def taobao_daogoubao_order_statistics_total(
            self,
            debug_id='',
            field=''
    ):
        """
        销售订单总额统计
        对接千牛端数字中心
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27244

        :param debug_id: 调试时用的传入id
        :param field: 需要的字段名
        """
        return self._top_request(
            "taobao.daogoubao.order.statistics.total",
            {
                "debug_id": debug_id,
                "field": field
            }
        )

    def taobao_incbook_employee_query(
            self,
            enterprise_id='',
            department_id='',
            employee_id='',
            phone='',
            name='',
            status='',
            page='',
            page_size='',
            open_account_id=''
    ):
        """
        查询员工信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30906

        :param enterprise_id: 企业ID
        :param department_id: 部门ID
        :param employee_id: 员工ID
        :param phone: 电话
        :param name: 名称
        :param status: 状态
        :param page: 页面，page>=1
        :param page_size: 页大小，默认10
        :param open_account_id: OA的ID
        """
        return self._top_request(
            "taobao.incbook.employee.query",
            {
                "enterprise_id": enterprise_id,
                "department_id": department_id,
                "employee_id": employee_id,
                "phone": phone,
                "name": name,
                "status": status,
                "page": page,
                "page_size": page_size,
                "open_account_id": open_account_id
            },
            result_processor=lambda x: x["page"]
        )

    def taobao_incbook_employee_edit(
            self,
            employee_id,
            position='',
            phone='',
            departments=None,
            name='',
            gender='',
            status='',
            nick='',
            avatar_url='',
            is_admin=''
    ):
        """
        编辑员工信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30907

        :param employee_id: 员工ID
        :param position: 职位
        :param phone: 电话号码
        :param departments: 部门列表
        :param name: 名称
        :param gender: 性别
        :param status: 状态
        :param nick: 昵称
        :param avatar_url: 头像
        :param is_admin: 是否为企业管理员
        """
        return self._top_request(
            "taobao.incbook.employee.edit",
            {
                "employee_id": employee_id,
                "position": position,
                "phone": phone,
                "departments": departments,
                "name": name,
                "gender": gender,
                "status": status,
                "nick": nick,
                "avatar_url": avatar_url,
                "is_admin": is_admin
            },
            result_processor=lambda x: x["result"]
        )

    def taobao_incbook_department_edit(
            self,
            department_id,
            parent_id='',
            name=''
    ):
        """
        编辑部门信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30908

        :param department_id: 部门ID
        :param parent_id: 父部门ID
        :param name: 部门名称
        """
        return self._top_request(
            "taobao.incbook.department.edit",
            {
                "department_id": department_id,
                "parent_id": parent_id,
                "name": name
            },
            result_processor=lambda x: x["result"]
        )

    def taobao_incbook_employee_add(
            self,
            phone,
            name,
            enterprise_id,
            position='',
            departments=None,
            gender='',
            status='0',
            nick='',
            avatar_url='',
            is_admin=''
    ):
        """
        新增企业员工
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30909

        :param phone: 电话号码
        :param name: 名称
        :param enterprise_id: 企业ID
        :param position: 职位
        :param departments: 部门信息
        :param gender: 性别
        :param status: 状态
        :param nick: 企业昵称
        :param avatar_url: 头像url
        :param is_admin: 是否为企业管理员
        """
        return self._top_request(
            "taobao.incbook.employee.add",
            {
                "phone": phone,
                "name": name,
                "enterprise_id": enterprise_id,
                "position": position,
                "departments": departments,
                "gender": gender,
                "status": status,
                "nick": nick,
                "avatar_url": avatar_url,
                "is_admin": is_admin
            },
            result_processor=lambda x: x["employee_id"]
        )

    def taobao_incbook_department_add(
            self,
            parent_id,
            name,
            enterprise_id
    ):
        """
        新增企业部门
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30910

        :param parent_id: 父部门ID
        :param name: 部门名称
        :param enterprise_id: 企业ID
        """
        return self._top_request(
            "taobao.incbook.department.add",
            {
                "parent_id": parent_id,
                "name": name,
                "enterprise_id": enterprise_id
            },
            result_processor=lambda x: x["department_id"]
        )

    def taobao_incbook_department_query(
            self,
            enterprise_id,
            include_agg_info='false'
    ):
        """
        获取部门信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30911

        :param enterprise_id: 企业ID
        :param include_agg_info: 是否返回统计信息
        """
        return self._top_request(
            "taobao.incbook.department.query",
            {
                "enterprise_id": enterprise_id,
                "include_agg_info": include_agg_info
            },
            result_processor=lambda x: x["departments"]
        )

    def taobao_incbook_department_remove(
            self,
            department_id
    ):
        """
        删除企业部门
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30912

        :param department_id: 部门ID
        """
        return self._top_request(
            "taobao.incbook.department.remove",
            {
                "department_id": department_id
            },
            result_processor=lambda x: x["result"]
        )

    def taobao_incbook_enterprise_query(
            self,
            enterprise_id
    ):
        """
        企业信息查询
        查询企业信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30913

        :param enterprise_id: 企业ID
        """
        return self._top_request(
            "taobao.incbook.enterprise.query",
            {
                "enterprise_id": enterprise_id
            },
            result_processor=lambda x: x["enterprise"]
        )

    def taobao_qianniu_cloudkefu_onlinestatuslog_get(
            self,
            account_ids,
            start_date,
            end_date
    ):
        """
        查询客服在线状态
        按天查询客服账号的在线状态记录。如：登录，下线，挂起等
        有别于taobao.qianniu.cloudkefu.statuslog.get接口，这个接口可以查询30天内的流水，不需要分页查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39606

        :param account_ids: 子帐号列表，最多10个
        :param start_date: 查询开始日期，只有日期有效，时间忽略
        :param end_date: 查询结束日期，只有日期有效，时间忽略
        """
        return self._top_request(
            "taobao.qianniu.cloudkefu.onlinestatuslog.get",
            {
                "account_ids": account_ids,
                "start_date": start_date,
                "end_date": end_date
            }
        )


class TbXiaoXiFuWu(DingTalkBaseAPI):
    """
    消息服务API
    """

    def taobao_tmc_groups_get(
            self,
            group_names='',
            page_no='1',
            page_size='40'
    ):
        """
        获取自定义用户分组列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21981

        :param group_names: 要查询分组的名称，多个分组用半角逗号分隔，不传代表查询所有分组信息，但不会返回组下面的用户信息。如果应用没有设置分组则返回空。组名不能以default开头，default开头是系统默认的组。
        :param page_no: 页码
        :param page_size: 每页返回多少个分组
        """
        return self._top_request(
            "taobao.tmc.groups.get",
            {
                "group_names": group_names,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_tmc_group_delete(
            self,
            group_name,
            nicks='',
            user_platform='tbUIC'
    ):
        """
        删除指定的分组或分组下的用户
        删除指定的分组或分组下的用户，授权消息使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21982

        :param group_name: 分组名称，分组删除后，用户的消息将会存储于默认分组中。警告：由于分组已经删除，用户之前未消费的消息将无法再获取。不能以default开头，default开头为系统默认组。
        :param nicks: 用户列表，不传表示删除整个分组，如果用户全部删除后，也会自动删除整个分组
        :param user_platform: 用户所属于的平台类型，tbUIC:淘宝用户; icbu: icbu用户;ae:ae用户
        """
        return self._top_request(
            "taobao.tmc.group.delete",
            {
                "group_name": group_name,
                "nicks": nicks,
                "user_platform": user_platform
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_tmc_group_add(
            self,
            group_name,
            nicks,
            user_platform='tbUIC'
    ):
        """
        为已开通用户添加用户分组
        为已开通用户添加用户分组，授权消息使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21983

        :param group_name: 分组名称，同一个应用下需要保证唯一性，最长32个字符。添加分组后，消息通道会为用户的消息分配独立分组，但之前的消息还是存储于默认分组中。不能以default开头，default开头为系统默认组。
        :param nicks: 用户昵称列表，以半角逗号分隔，支持子账号，支持增量添加用户
        :param user_platform: 用户所属于的平台类型，tbUIC:淘宝用户; icbu: icbu用户;ae:ae用户
        """
        return self._top_request(
            "taobao.tmc.group.add",
            {
                "group_name": group_name,
                "nicks": nicks,
                "user_platform": user_platform
            }
        )

    def taobao_tmc_messages_confirm(
            self,
            s_message_ids,
            group_name='',
            f_message_ids=''
    ):
        """
        确认消费消息的状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21985

        :param s_message_ids: 处理成功的消息ID列表 最大 200个ID
        :param group_name: 分组名称，不传代表默认分组
        :param f_message_ids: 处理失败的消息ID列表--已废弃，无需传此字段
        """
        return self._top_request(
            "taobao.tmc.messages.confirm",
            {
                "s_message_ids": s_message_ids,
                "group_name": group_name,
                "f_message_ids": f_message_ids
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_tmc_messages_consume(
            self,
            group_name='',
            quantity='100'
    ):
        """
        消费多条消息
        消费多条消息。消费时如果没有返回消息，建议做控制，不要一直调api，浪费应用的流量。如对程序做好优化，若没有消息则，sleep 100ms 等。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21986

        :param group_name: 用户分组名称，不传表示消费默认分组，如果应用没有设置用户分组，传入分组名称将会返回错误
        :param quantity: 每次批量消费消息的条数，最小值：10；最大值：200
        """
        return self._top_request(
            "taobao.tmc.messages.consume",
            {
                "group_name": group_name,
                "quantity": quantity
            },
            result_processor=lambda x: x["messages"]
        )

    def taobao_tmc_message_produce(
            self,
            content,
            topic,
            media_content='',
            media_content2='',
            media_content3='',
            media_content4='',
            media_content5='',
            target_group='default'
    ):
        """
        发布单条消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21987

        :param content: 消息内容的JSON表述，必须按照topic的定义来填充
        :param topic: 消息类型
        :param media_content: 回传的文件内容，目前仅支持jpg,png,bmp,gif,pdf类型的文件，文件最大1M。只有消息中有byte[]类型的数据时，才需要传此字段; 否则不需要传此字段。
        :param media_content2: 回传的文件内容，目前仅支持jpg,png,bmp,gif,pdf类型的文件，文件最大1M。只有消息中有byte[]类型的数据时，才需要传此字段; 否则不需要传此字段。具体对应到沙体中的什么值，请参考消息字段说明。
        :param media_content3: 回传的文件内容，目前仅支持jpg,png,bmp,gif,pdf类型的文件，文件最大1M。只有消息中有byte[]类型的数据时，才需要传此字段; 否则不需要传此字段。具体对应到沙体中的什么值，请参考消息字段说明。
        :param media_content4: 回传的文件内容，目前仅支持jpg,png,bmp,gif,pdf类型的文件，文件最大1M。只有消息中有byte[]类型的数据时，才需要传此字段; 否则不需要传此字段。具体对应到沙体中的什么值，请参考消息字段说明。
        :param media_content5: 回传的文件内容，目前仅支持jpg,png,bmp,gif,pdf类型的文件，文件最大1M。只有消息中有byte[]类型的数据时，才需要传此字段; 否则不需要传此字段。具体对应到沙体中的什么值，请参考消息字段说明。
        :param target_group: 目标分组，一般为default
        """
        return self._top_request(
            "taobao.tmc.message.produce",
            {
                "content": content,
                "topic": topic,
                "media_content": media_content,
                "media_content2": media_content2,
                "media_content3": media_content3,
                "media_content4": media_content4,
                "media_content5": media_content5,
                "target_group": target_group
            }
        )

    def taobao_tmc_user_cancel(
            self,
            nick,
            user_platform='tbUIC'
    ):
        """
        取消用户的消息服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21989

        :param nick: 用户昵称
        :param user_platform: 用户所属的平台类型，tbUIC:淘宝用户; icbu: icbu用户;ae:ae用户
        """
        return self._top_request(
            "taobao.tmc.user.cancel",
            {
                "nick": nick,
                "user_platform": user_platform
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_tmc_user_permit(
            self,
            topics=''
    ):
        """
        为已授权的用户开通消息服务
        为已授权的用户开通消息服务，授权消息使用。<br/><span style='color:red'>注意：topic覆盖更新,务必传入全量topic，或者不传topics，使用appkey订阅的所有topic</span>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=21990

        :param topics: 消息主题列表，用半角逗号分隔。当用户订阅的topic是应用订阅的子集时才需要设置，不设置表示继承应用所订阅的所有topic，一般情况建议不要设置。
        """
        return self._top_request(
            "taobao.tmc.user.permit",
            {
                "topics": topics
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_tmc_user_get(
            self,
            fields,
            nick,
            user_platform='tbUIC'
    ):
        """
        获取用户已开通消息
        查询指定用户开通的消息通道和组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22554

        :param fields: 需返回的字段列表，多个字段以半角逗号分隔。可选值：TmcUser结构体中的所有字段，一定要返回topic。
        :param nick: 用户昵称
        :param user_platform: 用户所属的平台类型，tbUIC:淘宝用户; icbu: icbu用户;ae:ae用户
        """
        return self._top_request(
            "taobao.tmc.user.get",
            {
                "fields": fields,
                "nick": nick,
                "user_platform": user_platform
            },
            result_processor=lambda x: x["tmc_user"]
        )

    def alipay_xiaodai_user_permit(
            self,
            user_id
    ):
        """
        阿里金融用户授权
        阿里金融为用户开通消息通道接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22587

        :param user_id: 用户数字ID
        """
        return self._top_request(
            "alipay.xiaodai.user.permit",
            {
                "user_id": user_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_tmc_messages_produce(
            self,
            messages
    ):
        """
        批量发送消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24024

        :param messages: tmc消息列表, 最多50条，元素结构与taobao.tmc.message.produce一致，用json表示的消息列表。例如：[{'content': '{\'tid\':1234554321,\'status\':\'X_LOGISTICS_PRINTED\',\'action_time\':\'2014-08-08 18:24:00\',\'seller_nick\': \'向阳aa\',\'operator\':\'小张\'}','topic': 'taobao_jds_TradeTrace'},{'content': '{\'tid\':1234554321,\'status\':\'X_LOGISTICS_PRINTED\',\'action_time\':\'2014-08-08 18:24:00\',\'seller_nick\': \'向阳aa\',\'operator\':\'小张\'}','topic': 'taobao_jds_TradeTrace'}]
        """
        return self._top_request(
            "taobao.tmc.messages.produce",
            {
                "messages": messages
            }
        )

    def taobao_tmc_queue_get(
            self,
            group_name
    ):
        """
        获取消息队列积压情况
        根据appkey和groupName获取消息队列积压情况
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26275

        :param group_name: TMC组名
        """
        return self._top_request(
            "taobao.tmc.queue.get",
            {
                "group_name": group_name
            },
            result_processor=lambda x: x["datas"]
        )

    def taobao_tmc_user_topics_get(
            self,
            nick=''
    ):
        """
        获取用户开通的topic列表
        获取用户开通的topic列表，授权消息使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26276

        :param nick: 卖家nick
        """
        return self._top_request(
            "taobao.tmc.user.topics.get",
            {
                "nick": nick
            }
        )

    def taobao_tmc_msg_sendrecord(
            self,
            group_name,
            topic_name,
            data_id
    ):
        """
        消息发送记录查询
        查询单条消息发送记录，只返回返回条数和时间。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26606

        :param group_name: 消息分组名
        :param topic_name: TOPIC名称
        :param data_id: 消息主键ID
        """
        return self._top_request(
            "taobao.tmc.msg.sendrecord",
            {
                "group_name": group_name,
                "topic_name": topic_name,
                "data_id": data_id
            }
        )

    def taobao_tmc_topic_group_delete(
            self,
            group_name,
            topics,
            group_id=''
    ):
        """
        删除消息topic分组路由
        删除根据topic名称路由消息到不同的分组关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36767

        :param group_name: 消息分组名
        :param topics: 消息topic名称，多个以逗号(,)分割
        :param group_id: 消息分组Id，一般不用填写，如果分组已经被删除，则根据问题排查工具返回的ID删除路由关系
        """
        return self._top_request(
            "taobao.tmc.topic.group.delete",
            {
                "group_name": group_name,
                "topics": topics,
                "group_id": group_id
            }
        )

    def taobao_tmc_topic_group_add(
            self,
            group_name,
            topics
    ):
        """
        topic分组路由
        根据topic名称路由消息到不同的分组。（前提：发送方未指定分组名）
        如果是需要授权的消息，分组路由先判断用户分组路由(使用taobao.tmc.group.add添加的路由)，用户分组路由不存在时，才会判断topic分组路由
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36768

        :param group_name: 消息分组名，如果不存在，会自动创建
        :param topics: 消息topic名称，多个以逗号(,)分割
        """
        return self._top_request(
            "taobao.tmc.topic.group.add",
            {
                "group_name": group_name,
                "topics": topics
            }
        )

    def taobao_istore_gifting_message_get(
            self,
            gift_message_biz_condition=None
    ):
        """
        gifting消息获取
        该api通过参数查询对应的gifting消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39873

        :param gift_message_biz_condition: 消息查询条件
        """
        return self._top_request(
            "taobao.istore.gifting.message.get",
            {
                "gift_message_biz_condition": gift_message_biz_condition
            }
        )


class TbBenDiShengHuo(DingTalkBaseAPI):
    """
    本地生活API
    """

    def taobao_place_storecategory_get(
            self
    ):
        """
        获取门店类目信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41027

        """
        return self._top_request(
            "taobao.place.storecategory.get",
            result_processor=lambda x: x["category_list"]
        )

    def taobao_place_store_modify(
            self,
            store_update=None
    ):
        """
        商家修改线下门店
        用于商家修改线下门店信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41029

        :param store_update: 门店创建入参
        """
        return self._top_request(
            "taobao.place.store.modify",
            {
                "store_update": store_update
            }
        )

    def taobao_place_store_delete(
            self,
            store_id
    ):
        """
        线下门店更新
        用于商家删除线下门店
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41030

        :param store_id: 门店id
        """
        return self._top_request(
            "taobao.place.store.delete",
            {
                "store_id": store_id
            }
        )


class TbALiYunOcs(DingTalkBaseAPI):
    """
    阿里云ocsAPI
    """

    def m_kvstore_aliyuncs_com_CreateInstance_2015_03_01(
            self,
            password,
            capacity,
            region_id,
            instance_name='',
            token='',
            zone_id='',
            network_type='',
            vpc_id='',
            vswitch_id='',
            private_ip_address=''
    ):
        """
        创建OCS实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24698

        :param password: 说明：实例密码规则：需同时且只能包含大写字母、小写字母和数字长度8~30个字符
        :param capacity: 说明：实例容量设置单位：MByte输入范围请见OCS规格参数表
        :param region_id: 华东杭州：cn-hangzhou 华北青岛：cn-qingdao
        :param instance_name: 实例昵称长度为2-128个字符，以大小写英文字母或中文开头，不支持字符@/:='<>{[]}和空格
        :param token: 用于保证幂等性
        :param zone_id: RegionId下级可用区编码
        :param network_type: OCS实例的网络类型：classic或vpc。默认为classic
        :param vpc_id: OCS实例所属vpc实例id。如果NetworkType参数为vpc，则本参数为必须。
        :param vswitch_id: OCS实例所属vpc实例的虚拟交换机ID。如果NetworkType参数为vpc，则本参数为必须。
        :param private_ip_address: OCS实例所属vpc内的私网IP地址。当NetworkType参数为vpc时有效。如果不带本参数，则系统通过VpcId和VSwitchId自动分配。如果此参数对应的私网IP地址不在VSwitchId包含的IP地址段内，则创建失败。
        """
        return self._top_request(
            "m-kvstore.aliyuncs.com.CreateInstance.2015-03-01",
            {
                "Password": password,
                "Capacity": capacity,
                "RegionId": region_id,
                "InstanceName": instance_name,
                "Token": token,
                "ZoneId": zone_id,
                "NetworkType": network_type,
                "VpcId": vpc_id,
                "VSwitchId": vswitch_id,
                "PrivateIpAddress": private_ip_address
            }
        )

    def m_kvstore_aliyuncs_com_DeleteInstance_2015_03_01(
            self,
            instance_id
    ):
        """
        删除OCS实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24700

        :param instance_id: 实例ID(全局唯一);16位字符串
        """
        return self._top_request(
            "m-kvstore.aliyuncs.com.DeleteInstance.2015-03-01",
            {
                "InstanceId": instance_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def m_kvstore_aliyuncs_com_DescribeInstances_2015_03_01(
            self,
            instance_ids='',
            instance_status='',
            region_id='',
            page_number='1',
            page_size='10',
            network_type='',
            vpc_id='',
            vswitch_id='',
            private_ip_addresses=''
    ):
        """
        查询实例列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24701

        :param instance_ids: 实例ID， 若多个实例ID使用英文半角”, ”分隔，置空时默认为所有实例ID<br/>(全局唯一);16位字符串
        :param instance_status: Available：使用中<br/>Unavailable：已禁用<br/>Creating：创建中<br/>Changing：修改中<br/>为空时返回所有状态
        :param region_id: cn-hangzhou  华东杭州<br/>cn-qingdao  华北青岛<br/>地域-城市
        :param page_number: 实例状态列表的页码，起始值为1，默认值为1
        :param page_size: 分页查询时设置的每页行数，最大值50行，默认值为10
        :param network_type: 实例所属网络类型，值：CLASSIC、VPC
        :param vpc_id: VPC类型OCS实例的专用网络（VPC）ID
        :param vswitch_id: VPC类型OCS实例的虚拟交换机ID
        :param private_ip_addresses: VPC类型OCS实例的私网IP地址，若多个IP地址的话以英文半角','分隔
        """
        return self._top_request(
            "m-kvstore.aliyuncs.com.DescribeInstances.2015-03-01",
            {
                "InstanceIds": instance_ids,
                "InstanceStatus": instance_status,
                "RegionId": region_id,
                "PageNumber": page_number,
                "PageSize": page_size,
                "NetworkType": network_type,
                "VpcId": vpc_id,
                "VSwitchId": vswitch_id,
                "PrivateIpAddresses": private_ip_addresses
            }
        )

    def m_kvstore_aliyuncs_com_ModifyInstanceAttribute_2015_03_01(
            self,
            instance_id,
            instance_name='',
            new_password=''
    ):
        """
        修改实例属性
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24707

        :param instance_id: (全局唯一);16位字符串
        :param instance_name: 实例名称<br/>长度为2-128个字符，以大小写英文字母或中文开头，不支持字符@/:='<>{[]}和空格
        :param new_password: 实例密码<br/>需同时且只能包含大写、小写字母和数字，长度为8~30个字符。
        """
        return self._top_request(
            "m-kvstore.aliyuncs.com.ModifyInstanceAttribute.2015-03-01",
            {
                "InstanceId": instance_id,
                "InstanceName": instance_name,
                "NewPassword": new_password
            },
            result_processor=lambda x: x["RequestId"]
        )

    def m_kvstore_aliyuncs_com_FlushInstance_2015_03_01(
            self,
            instance_id
    ):
        """
        清空实例缓存
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24708

        :param instance_id: 实例ID(全局唯一);16位字符串
        """
        return self._top_request(
            "m-kvstore.aliyuncs.com.FlushInstance.2015-03-01",
            {
                "InstanceId": instance_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def m_kvstore_aliyuncs_com_ModifySecurityIps_2015_03_01(
            self,
            instance_id,
            security_ips
    ):
        """
        修改实例访问白名单
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24711

        :param instance_id: 实例ID(全局唯一);16位字符串
        :param security_ips: 允许访问的IP名单
        """
        return self._top_request(
            "m-kvstore.aliyuncs.com.ModifySecurityIps.2015-03-01",
            {
                "InstanceId": instance_id,
                "SecurityIps": security_ips
            },
            result_processor=lambda x: x["RequestId"]
        )

    def m_kvstore_aliyuncs_com_DescribeSecurityIps_2015_03_01(
            self,
            instance_id
    ):
        """
        查看实例的访问白名单
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24712

        :param instance_id: 实例ID(全局唯一);16位字符串
        """
        return self._top_request(
            "m-kvstore.aliyuncs.com.DescribeSecurityIps.2015-03-01",
            {
                "InstanceId": instance_id
            }
        )

    def m_kvstore_aliyuncs_com_DescribeRegions_2015_03_01(
            self
    ):
        """
        查看Region列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24718

        """
        return self._top_request(
            "m-kvstore.aliyuncs.com.DescribeRegions.2015-03-01"
        )

    def m_kvstore_aliyuncs_com_DescribeHistoryMonitorValues_2015_03_01(
            self,
            instance_id,
            start_time,
            end_time,
            interval_for_history
    ):
        """
        查询实例的历史监控信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        对于指定实例，根据输入时间范围和时间间隔查询对应的历史监控信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24721

        :param instance_id: 实例ID
        :param start_time: 历史监控开始时间点；<br/>ISO8601 表示法，并使用UTC时间。格式为： YYYY-MM-DDThh:mm:ssZ
        :param end_time: 历史监控结束时间点；<br/>ISO8601 表示法，并使用UTC时间。格式为： YYYY-MM-DDThh:mm:ssZ
        :param interval_for_history: 取值必须是01m, 05m, 15m, 60m<br/>监控信息采样间隔，即每隔N分钟取一个监控采样点。
        """
        return self._top_request(
            "m-kvstore.aliyuncs.com.DescribeHistoryMonitorValues.2015-03-01",
            {
                "InstanceId": instance_id,
                "StartTime": start_time,
                "EndTime": end_time,
                "IntervalForHistory": interval_for_history
            }
        )

    def m_kvstore_aliyuncs_com_ModifyInstanceCapacity_2015_03_01(
            self,
            instance_id,
            capacity
    ):
        """
        修改实例规格
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24726

        :param instance_id: (全局唯一);16位字符串
        :param capacity: 实例容量设置 单位： MByte<br/>输入范围请见OCS规格参数表
        """
        return self._top_request(
            "m-kvstore.aliyuncs.com.ModifyInstanceCapacity.2015-03-01",
            {
                "InstanceId": instance_id,
                "Capacity": capacity
            },
            result_processor=lambda x: x["RequestId"]
        )


class TbYunOS(DingTalkBaseAPI):
    """
    YunOS
    """

    def yunos_cloudcard_usercard_add(
            self,
            card_model
    ):
        """
        新增用户卡片数据
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24457

        :param card_model: 卡片数据
        """
        return self._top_request(
            "yunos.cloudcard.usercard.add",
            {
                "card_model": card_model
            },
            result_processor=lambda x: x["data"]
        )

    def yunos_open_token_get(
            self
    ):
        """
        令牌生成服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        此接口可以生成token，用以结构化数据、非结构化数据鉴权使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25536

        """
        return self._top_request(
            "yunos.open.token.get"
        )

    def yunos_cloudcard_batch_opermsg_send(
            self,
            oper_batch_msg
    ):
        """
        YUNOS生活服务群发消息
        这个是一个群发消息接口，ISV通过该接口给订阅自己服务号的所有YUNOS终端用户发送服务号消息，目前该接口有调用频率限制，具体规则参考YUNOS开放平台文档。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25709

        :param oper_batch_msg: YUNOS生活服务群消息
        """
        return self._top_request(
            "yunos.cloudcard.batch.opermsg.send",
            {
                "oper_batch_msg": oper_batch_msg
            }
        )

    def yunos_idc_notice_push(
            self,
            kp='',
            cuuid='',
            appkey='',
            factory_token='',
            device_model='',
            receiver_scope='0',
            receiver_type='0',
            type='0',
            title='',
            content=''
    ):
        """
        消息推送功能接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        执行消息推送
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26080

        :param kp: 用户标识
        :param cuuid: 设备标识
        :param appkey: appkey
        :param factory_token: 厂商标识
        :param device_model: 设备型号
        :param receiver_scope: 接受范围
        :param receiver_type: 接受方
        :param type: 消息类型
        :param title: 消息标题
        :param content: 消息体
        """
        return self._top_request(
            "yunos.idc.notice.push",
            {
                "kp": kp,
                "cuuid": cuuid,
                "appkey": appkey,
                "factory_token": factory_token,
                "device_model": device_model,
                "receiver_scope": receiver_scope,
                "receiver_type": receiver_type,
                "type": type,
                "title": title,
                "content": content
            }
        )

    def yunos_idc_notice_push_sandbox(
            self,
            kp='',
            cuuid='',
            appkey='',
            factory_token='',
            device_model='',
            receiver_scope='0',
            receiver_type='0',
            type='0',
            title='',
            content=''
    ):
        """
        消息推送功能接口-沙箱环境
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        对厂商提供消息推送功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26122

        :param kp: 用户标识
        :param cuuid: 设备标识
        :param appkey: appkey
        :param factory_token: 厂商标识
        :param device_model: 设备型号
        :param receiver_scope: 接收范围
        :param receiver_type: 接收方
        :param type: 消息类型
        :param title: 消息标题
        :param content: 消息体
        """
        return self._top_request(
            "yunos.idc.notice.push.sandbox",
            {
                "kp": kp,
                "cuuid": cuuid,
                "appkey": appkey,
                "factory_token": factory_token,
                "device_model": device_model,
                "receiver_scope": receiver_scope,
                "receiver_type": receiver_type,
                "type": type,
                "title": title,
                "content": content
            }
        )

    def yunos_yoc_router_action(
            self,
            action
    ):
        """
        触发router对开发者的设备动作接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        为开发者提供调用设备动作的接口，接受来自开发者的http post请求，其中包含设备信息，只返回成功失败信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26161

        :param action: 触发调用action的参数
        """
        return self._top_request(
            "yunos.yoc.router.action",
            {
                "action": action
            }
        )

    def yunos_yoc_router_bindlistener(
            self,
            bind_listener
    ):
        """
        router的bindListener接口
        为开发者提供调用bindListener的接口，接受来自开发者的http post请求，其中包含设备信息，只返回成功失败信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26162

        :param bind_listener: 绑定listener的参数
        """
        return self._top_request(
            "yunos.yoc.router.bindlistener",
            {
                "bindListener": bind_listener
            }
        )

    def yunos_yoc_router_bindactor(
            self,
            bind_actor
    ):
        """
        供开发者调用的bindactor接口
        为开发者提供调用设备绑定actor关系的接口，接受来自开发者的http post请求，其中包含设备信息，只返回成功失败信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26163

        :param bind_actor: bindActor所需参数
        """
        return self._top_request(
            "yunos.yoc.router.bindactor",
            {
                "bindActor": bind_actor
            }
        )

    def yunos_idc_food_sync_sandbox(
            self,
            appkey,
            factory_token,
            foods,
            start_time
    ):
        """
        IDC沙箱环境食材增量更新
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26317

        :param appkey: 下发给调用方的appKey
        :param factory_token: 下发给厂商的token
        :param foods: 食材的JSON数组
        :param start_time: 调用时间
        """
        return self._top_request(
            "yunos.idc.food.sync.sandbox",
            {
                "appkey": appkey,
                "factory_token": factory_token,
                "foods": foods,
                "start_time": start_time
            }
        )

    def yunos_idc_trade_items_getcategorybytab(
            self,
            tabid
    ):
        """
        根据指定tabid获取类目信息
        美的智能冰箱项目， 美的的客户端app需要获取指定店铺/指定推荐的天猫商品id， 图片等商品详情信息，(比如天猫超市生鲜类商品， 喵生鲜商品)，作为完成淘系交易的商品选择入口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26646

        :param tabid: 指定的tabid
        """
        return self._top_request(
            "yunos.idc.trade.items.getcategorybytab",
            {
                "tabid": tabid
            }
        )

    def yunos_idc_trade_items_getitembycategory(
            self,
            categoryid='1',
            tabid='1',
            idxlenth='2',
            lastidx='1',
            pageindex='1'
    ):
        """
        根据指定类目拿到商品简要信息
        美的智能冰箱项目， 美的的客户端app需要获取指定店铺/指定推荐的天猫商品id， 图片等商品详情信息，(比如天猫超市生鲜类商品， 喵生鲜商品)，作为完成淘系交易的商品选择入口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26652

        :param categoryid: 类目id
        :param tabid: tabid
        :param idxlenth: 长度
        :param lastidx: 上次index 上次调用接口给出的index
        :param pageindex: 页码
        """
        return self._top_request(
            "yunos.idc.trade.items.getitembycategory",
            {
                "categoryid": categoryid,
                "tabid": tabid,
                "idxlenth": idxlenth,
                "lastidx": lastidx,
                "pageindex": pageindex
            }
        )

    def yunos_yoc_channel_schedule_sandbox(
            self,
            data_wave
    ):
        """
        同步调度管道 沙箱环境
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        YunOS YoC 同步调度管道 对外用户接口 沙箱环境
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27689

        :param data_wave: 实际参数
        """
        return self._top_request(
            "yunos.yoc.channel.schedule.sandbox",
            {
                "data_wave": data_wave
            }
        )

    def yunos_algorithm_api_get(
            self,
            request_param,
            inputa='',
            inputb='',
            inputc='',
            inputd='',
            inpute=''
    ):
        """
        智能算法平台
        提供云os算法服务，比如人脸识别，图片识别等。。。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27953

        :param request_param: 算法参数
        :param inputa: 上传文件
        :param inputb: 上传文件
        :param inputc: 上传文件
        :param inputd: 上传文件
        :param inpute: 上传文件
        """
        return self._top_request(
            "yunos.algorithm.api.get",
            {
                "request_param": request_param,
                "inputa": inputa,
                "inputb": inputb,
                "inputc": inputc,
                "inputd": inputd,
                "inpute": inpute
            }
        )

    def aliyun_cosmo_gateway_invoke(
            self,
            context,
            rdam_request
    ):
        """
        alios cosmo服务调用
        AliOS cosmo服务分发平台对外调用接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33101

        :param context: 请求上下文参数
        :param rdam_request: 请求对象
        """
        return self._top_request(
            "aliyun.cosmo.gateway.invoke",
            {
                "context": context,
                "rdam_request": rdam_request
            }
        )


class TbALiYun(DingTalkBaseAPI):
    """
    阿里云API
    """

    def rds_aliyuncs_com_CreateDatabase_2013_05_28(
            self,
            dbinstance_id,
            dbname,
            character_set_name,
            account_name='',
            account_privilege='',
            dbdescription=''
    ):
        """
        创建数据库
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22308

        :param dbinstance_id: 实例名
        :param dbname: 数据库名
        :param character_set_name: 字符集
        :param account_name: 数据库帐户名
        :param account_privilege: 帐号权限
        :param dbdescription: 数据库描述
        """
        return self._top_request(
            "rds.aliyuncs.com.CreateDatabase.2013-05-28",
            {
                "DBInstanceId": dbinstance_id,
                "DBName": dbname,
                "CharacterSetName": character_set_name,
                "AccountName": account_name,
                "AccountPrivilege": account_privilege,
                "DBDescription": dbdescription
            },
            result_processor=lambda x: x["request_id"]
        )

    def rds_aliyuncs_com_DescribeDatabases_2013_05_28(
            self,
            dbinstance_id,
            dbname='',
            dbstatus=''
    ):
        """
        查询数据库列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22312

        :param dbinstance_id: 实例名
        :param dbname: 数据库名
        :param dbstatus: 数据库状态
        """
        return self._top_request(
            "rds.aliyuncs.com.DescribeDatabases.2013-05-28",
            {
                "DBInstanceId": dbinstance_id,
                "DBName": dbname,
                "DBStatus": dbstatus
            },
            result_processor=lambda x: x["request_id"]
        )

    def rds_aliyuncs_com_CreateAccount_2013_05_28(
            self,
            dbinstance_id,
            account_name,
            account_password,
            dbname='',
            account_privilege='',
            account_description=''
    ):
        """
        创建帐号
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22330

        :param dbinstance_id: 实例名
        :param account_name: 数据库帐户名
        :param account_password: 帐号密码
        :param dbname: 数据库名
        :param account_privilege: 帐号权限
        :param account_description: 帐号描述
        """
        return self._top_request(
            "rds.aliyuncs.com.CreateAccount.2013-05-28",
            {
                "DBInstanceId": dbinstance_id,
                "AccountName": account_name,
                "AccountPassword": account_password,
                "DBName": dbname,
                "AccountPrivilege": account_privilege,
                "AccountDescription": account_description
            },
            result_processor=lambda x: x["request_id"]
        )

    def rds_aliyuncs_com_DescribeAccounts_2013_05_28(
            self,
            dbinstance_id,
            account_name='',
            dbname=''
    ):
        """
        查找账户列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查找指定实例、指定DB的帐户列表信息或某个指定帐号的信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22372

        :param dbinstance_id: 实例名
        :param account_name: 数据库帐号
        :param dbname: 数据库名称
        """
        return self._top_request(
            "rds.aliyuncs.com.DescribeAccounts.2013-05-28",
            {
                "DBInstanceId": dbinstance_id,
                "AccountName": account_name,
                "DBName": dbname
            }
        )

    def slb_aliyuncs_com_SetLoadBalancerName_2013_02_21(
            self,
            load_balancer_id,
            load_balancer_name
    ):
        """
        配置LoadBalancer的别名。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22375

        :param load_balancer_id: loadBalancerId
        :param load_balancer_name: loadBalancerName
        """
        return self._top_request(
            "slb.aliyuncs.com.SetLoadBalancerName.2013-02-21",
            {
                "loadBalancerId": load_balancer_id,
                "loadBalancerName": load_balancer_name
            },
            result_processor=lambda x: x["requestid"]
        )

    def slb_aliyuncs_com_DescribeBackendServers_2013_02_21(
            self,
            load_balancer_id,
            listener_port=''
    ):
        """
        后端服务器健康检查
        后端服务器健康检查，对SLB实例的后端服务器进行健康检查，返回后端服务器的健康状况。后端服务器的健康状况为normal,abnormal和Unavailable三种。其中Unavailable表示这个SLB实例没有配置健康检查，无法获取后端服务器的健康状况。如果没有传入ListenerPort，则表示对这个SLB实例下的所有Listener后端服务器进行健康检查。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22377

        :param load_balancer_id: loadBalancerId
        :param listener_port: listenerPort
        """
        return self._top_request(
            "slb.aliyuncs.com.DescribeBackendServers.2013-02-21",
            {
                "loadBalancerId": load_balancer_id,
                "listenerPort": listener_port
            }
        )

    def slb_aliyuncs_com_RemoveBackendServers_2013_02_21(
            self,
            load_balancer_id
    ):
        """
        删除后端服务器
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        删除后端服务器，从SLB实例中删除一组后端服务器，返回SLB实例中的后端服务器列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22378

        :param load_balancer_id: slb id
        """
        return self._top_request(
            "slb.aliyuncs.com.RemoveBackendServers.2013-02-21",
            {
                "loadBalancerId": load_balancer_id
            }
        )

    def slb_aliyuncs_com_AddBackendServers_2013_02_21(
            self,
            load_balancer_id
    ):
        """
        添加后端服务器
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        添加后端服务器，为SLB实例添加一组后端服务器（ECS实例），返回这个SLB实例的后端服务器列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22379

        :param load_balancer_id: slb id
        """
        return self._top_request(
            "slb.aliyuncs.com.AddBackendServers.2013-02-21",
            {
                "loadBalancerId": load_balancer_id
            }
        )

    def slb_aliyuncs_com_DescribeLoadBalancerTCPListenerAttribute_2013_02_21(
            self,
            load_balancer_id,
            listener_port
    ):
        """
        查询TCP Listener信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22380

        :param load_balancer_id: slb id
        :param listener_port: ListenerPort
        """
        return self._top_request(
            "slb.aliyuncs.com.DescribeLoadBalancerTCPListenerAttribute.2013-02-21",
            {
                "loadBalancerId": load_balancer_id,
                "listenerPort": listener_port
            }
        )

    def slb_aliyuncs_com_DescribeLoadBalancerHTTPListenerAttribute_2013_02_21(
            self,
            load_balancer_id,
            listener_port
    ):
        """
        查询HTTP Listener信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22381

        :param load_balancer_id: slb id
        :param listener_port: ListenerPort
        """
        return self._top_request(
            "slb.aliyuncs.com.DescribeLoadBalancerHTTPListenerAttribute.2013-02-21",
            {
                "loadBalancerId": load_balancer_id,
                "listenerPort": listener_port
            }
        )

    def slb_aliyuncs_com_DeleteLoadBalancerListener_2013_02_21(
            self,
            load_balancer_id,
            listener_port
    ):
        """
        删除 slb listener
        delete_vip
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22385

        :param load_balancer_id: loadBalancerId
        :param listener_port: listenerPort
        """
        return self._top_request(
            "slb.aliyuncs.com.DeleteLoadBalancerListener.2013-02-21",
            {
                "loadBalancerId": load_balancer_id,
                "listenerPort": listener_port
            },
            result_processor=lambda x: x["requestid"]
        )

    def slb_aliyuncs_com_CreateLoadBalancerTCPListener_2013_02_21(
            self,
            load_balancer_id,
            listener_port,
            backend_server_port,
            listener_status='inactive',
            scheduler='wrr',
            health_check='off',
            interval='2',
            persistence_timeout='0',
            connect_timeout='10',
            connect_port=''
    ):
        """
        创建TCP Listener
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22386

        :param load_balancer_id: slb id
        :param listener_port: ListenerPort
        :param backend_server_port: BackendServerPort
        :param listener_status: ListenerStatus
        :param scheduler: Scheduler
        :param health_check: HealthCheck
        :param interval: Interval
        :param persistence_timeout: PersistenceTimeout
        :param connect_timeout: ConnectTimeout
        :param connect_port: ConnectPort
        """
        return self._top_request(
            "slb.aliyuncs.com.CreateLoadBalancerTCPListener.2013-02-21",
            {
                "loadBalancerId": load_balancer_id,
                "listenerPort": listener_port,
                "backendServerPort": backend_server_port,
                "listenerStatus": listener_status,
                "scheduler": scheduler,
                "healthCheck": health_check,
                "interval": interval,
                "persistenceTimeout": persistence_timeout,
                "connectTimeout": connect_timeout,
                "connectPort": connect_port
            },
            result_processor=lambda x: x["requestid"]
        )

    def slb_aliyuncs_com_DescribeRegions_2013_02_21(
            self
    ):
        """
        查询可用数据中心信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22388

        """
        return self._top_request(
            "slb.aliyuncs.com.DescribeRegions.2013-02-21",
            result_processor=lambda x: x["regions"]
        )

    def slb_aliyuncs_com_DescribeLoadBalancerAttribute_2013_02_21(
            self
    ):
        """
        查询LoadBalancer信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22389

        """
        return self._top_request(
            "slb.aliyuncs.com.DescribeLoadBalancerAttribute.2013-02-21"
        )

    def slb_aliyuncs_com_DescribeLoadBalancers_2013_02_21(
            self,
            server_id=''
    ):
        """
        slb列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询用户创建的所有LoadBalancer列表。如果传入ServerId参数，则返回包含此BackendServer的所有LoadBalancer列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22390

        :param server_id: ecs id
        """
        return self._top_request(
            "slb.aliyuncs.com.DescribeLoadBalancers.2013-02-21",
            {
                "serverId": server_id
            },
            result_processor=lambda x: x["loadbalancers"]
        )

    def slb_aliyuncs_com_SetLoadBalancerStatus_2013_02_21(
            self,
            load_balancer_id,
            load_balancer_status
    ):
        """
        设置slb状态
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        配置LoadBalancer状态。当配置SLB实例：Active LoadBalancer，将SLB实例中所有Listener的配置下发到系统中，使之生效；当配置SLB实例：Inactive LoadBalancer，删除SLB实例中所有的Listener配置，使之失效。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22392

        :param load_balancer_id: slb id
        :param load_balancer_status: inactive或者active。
        """
        return self._top_request(
            "slb.aliyuncs.com.SetLoadBalancerStatus.2013-02-21",
            {
                "loadBalancerId": load_balancer_id,
                "loadBalancerStatus": load_balancer_status
            },
            result_processor=lambda x: x["requestid"]
        )

    def ecs_aliyuncs_com_JoinSecurityGroup_2013_01_10(
            self,
            instance_id,
            security_group_id
    ):
        """
        加入安全组
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22428

        :param instance_id: 实例名
        :param security_group_id: 安全组名
        """
        return self._top_request(
            "ecs.aliyuncs.com.JoinSecurityGroup.2013-01-10",
            {
                "InstanceId": instance_id,
                "SecurityGroupId": security_group_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_ResetInstance_2013_01_10(
            self,
            instance_id,
            image_id='',
            disk_type=''
    ):
        """
        重置实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        重置指定实例的系统盘或数据盘，可以用于重置操作系统为初始状态或更换操作系统、以及重置数据盘状态。<br/>？	只有状态为Stopped的实例才可以进行此操作。<br/>？	重置系统盘有两种选择：1）将实例重置为当前实例使用的Image系统配置；2）传入新的镜像ID实现更换操作系统，更换操作系统不限制前后的系统类型及系统盘大小。重置后系统盘的大小就是对应的镜像大小。<br/>？	重置数据盘将恢复数据盘初始创建时的状态。如果此数据盘是基于快照创建的，则恢复为初始快照状态；否则，清空所有数据。<br/><br/>升级:<br/>增加写boss流程.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22429

        :param instance_id: 指定实例的ID
        :param image_id: 重置系统时使用的镜像ID。仅在DiskType参数值为system时有效
        :param disk_type: 进行重置操作的磁盘类型，取值为：system | data，默认值为system
        """
        return self._top_request(
            "ecs.aliyuncs.com.ResetInstance.2013-01-10",
            {
                "InstanceId": instance_id,
                "ImageId": image_id,
                "DiskType": disk_type
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_DescribeZones_2013_01_10(
            self,
            region_id
    ):
        """
        查询Zone信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询指定Region下的Zone列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22430

        :param region_id: 指定的Region ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeZones.2013-01-10",
            {
                "RegionId": region_id
            }
        )

    def ecs_aliyuncs_com_DescribeRegions_2013_01_10(
            self
    ):
        """
        查询可用数据中心
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询可用的Region列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22431

        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeRegions.2013-01-10"
        )

    def ecs_aliyuncs_com_DeleteSecurityGroup_2013_01_10(
            self,
            security_group_id,
            region_id
    ):
        """
        删除安全组
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        用于删除一个指定的安全组。<br/>	只有组内不存在实例，或者没有被其他组的安全规则引用时才可以删除。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22432

        :param security_group_id: 安全组ID
        :param region_id: 数据中心ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DeleteSecurityGroup.2013-01-10",
            {
                "SecurityGroupId": security_group_id,
                "RegionId": region_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_DescribeSecurityGroups_2013_01_10(
            self,
            region_id,
            page_number='1',
            page_size='10'
    ):
        """
        查询安全组列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        分页查询用户定义的所有安全组基本信息。每页的数量默认为10条，数据按照安全组ID降序排列。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22433

        :param region_id: 数据中心id
        :param page_number: 当前页码，起始值为1，默认值为1
        :param page_size: 分页查询时设置的每页行数，最大值50，默认值为10
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeSecurityGroups.2013-01-10",
            {
                "RegionId": region_id,
                "PageNumber": page_number,
                "PageSize": page_size
            }
        )

    def ecs_aliyuncs_com_DescribeSecurityGroupAttribute_2013_01_10(
            self,
            security_group_id,
            region_id,
            nic_type=''
    ):
        """
        查询安全组规则
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询安全组详情，包括安全权限控制。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22434

        :param security_group_id: 安全组ID
        :param region_id: 安全组所属Region ID
        :param nic_type: 网络类型，取值：internet|intranet<br/>不指定时默认值为internet
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeSecurityGroupAttribute.2013-01-10",
            {
                "SecurityGroupId": security_group_id,
                "RegionId": region_id,
                "NicType": nic_type
            }
        )

    def ecs_aliyuncs_com_CreateSecurityGroup_2013_01_10(
            self,
            region_id,
            description,
            client_token=''
    ):
        """
        创建安全组
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        新建一个安全组，通过安全组防火墙规则配置实现对一组实例的防火墙配置。一个安全组可包含多个实例，但一个实例只能属于一个安全组。<br/>？	新建的安全组，默认只打开组内实例之间的访问权限，其他访问权限全部关闭。若用户允许其他组的机器或来自互联网的访问，则可通过授权安全组权限接口来对安全组防火墙策略进行修改。<br/>？	防火墙规则区分内网和公网。<br/>？	每个用户最多可创建100个安全组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22435

        :param region_id: 安全组所属Region ID
        :param description: 安全组描述信息，长度限制在500个字节，不支持中文
        :param client_token: 用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一，最大不值过64个ASCII字符。 具体参见附录：如何保证幂等性。
        """
        return self._top_request(
            "ecs.aliyuncs.com.CreateSecurityGroup.2013-01-10",
            {
                "RegionId": region_id,
                "Description": description,
                "ClientToken": client_token
            }
        )

    def ecs_aliyuncs_com_ReleasePublicIpAddress_2013_01_10(
            self,
            public_ip_address
    ):
        """
        释放公网IP地址
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        释放已经分配给实例的公网IP地址。<br/>？	实例的状态必须为Stopped状态，才可执行此操作。<br/>？	实例重启后此操作才能生效。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22436

        :param public_ip_address: 公网IP地址，格式如：121.1.1.0
        """
        return self._top_request(
            "ecs.aliyuncs.com.ReleasePublicIpAddress.2013-01-10",
            {
                "PublicIpAddress": public_ip_address
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_DescribeImages_2013_01_10(
            self,
            region_id,
            page_number='1',
            page_size='10',
            image_owner_alias='',
            image_id=''
    ):
        """
        查询可用镜像
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询用户可以使用的镜像列表。显示出的镜像资源列表包括用户自己私有的镜像资源和其他公共的镜像资源，此接口支持分页查询，查询结果包括可使用的镜像资源的总数和当前页的镜像资源。每页的数量默认为10条。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22437

        :param region_id: 实例所属于的Region ID
        :param page_number: 实例状态列表的页码，起始值为1，默认值为1
        :param page_size: 分页查询时设置的每页行数，最大值50行，默认为10
        :param image_owner_alias: 镜像所有者别名，多个值使用逗号分隔<br/>可选值：system, self, others<br/>不指定该参数默认返回所有镜像
        :param image_id: 镜像ID，可以输入多个，以”,”分割
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeImages.2013-01-10",
            {
                "RegionId": region_id,
                "PageNumber": page_number,
                "PageSize": page_size,
                "ImageOwnerAlias": image_owner_alias,
                "ImageId": image_id
            }
        )

    def ecs_aliyuncs_com_DescribeInstanceDisks_2013_01_10(
            self,
            instance_id
    ):
        """
        查询实例磁盘列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        列举实例的磁盘设备ID和类型。<br/>？	执行此操作时，实例的状态不能为Starting或Deleted。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22439

        :param instance_id: 指定的实例名称
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeInstanceDisks.2013-01-10",
            {
                "InstanceId": instance_id
            }
        )

    def ecs_aliyuncs_com_DescribeInstanceStatus_2013_01_10(
            self,
            region_id,
            zone_id='',
            page_number='1',
            page_size='10'
    ):
        """
        查询实例状态
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        批量获取当前用户所有实例的状态信息，也可用于获取实例列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22440

        :param region_id: 实例所属于的Region ID
        :param zone_id: 实例所属可用区ID
        :param page_number: 实例状态列表的页码，起始值为1，默认值为1
        :param page_size: 分页查询时设置的每页行数，最大值50行，默认值为10
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeInstanceStatus.2013-01-10",
            {
                "RegionId": region_id,
                "ZoneId": zone_id,
                "PageNumber": page_number,
                "PageSize": page_size
            }
        )

    def ecs_aliyuncs_com_RebootInstance_2013_01_10(
            self,
            instance_id,
            force_stop=''
    ):
        """
        重启实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        重启指定的实例。<br/>？	只有状态为Running的实例才可以进行此操作。<br/>？	接口调用成功后实例进入Starting状态。<br/>？	支持强制重启，强制重启等同于传统服务器的冷启动。<br/>？	重启后，不自动卸载ISO设备，但会自动卸载挂载的快照设备。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22441

        :param instance_id: 指定实例的ID
        :param force_stop: 重启机器时的是否强制关机策略。取值：true|false；<br/>若为false则走正常关机流程；若为true则强制关机。<br/>如果不指定，则默认值为false。
        """
        return self._top_request(
            "ecs.aliyuncs.com.RebootInstance.2013-01-10",
            {
                "InstanceId": instance_id,
                "ForceStop": force_stop
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_StopInstance_2013_01_10(
            self,
            instance_id,
            force_stop=''
    ):
        """
        停止实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        停止一个指定的实例。<br/>？	只有状态为Running的实例才可以进行此操作。<br/>？	接口调用成功后实例进入Stopped状态。<br/>？	实例支持强制停止，强制停止等同于断电处理。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22442

        :param instance_id: 指定的实例ID
        :param force_stop: 重启机器时的是否强制关机策略。取值：true|false；<br/>若为false则走正常关机流程；若为true则强制关机。<br/>如果不指定，则默认值为false。
        """
        return self._top_request(
            "ecs.aliyuncs.com.StopInstance.2013-01-10",
            {
                "InstanceId": instance_id,
                "ForceStop": force_stop
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_StartInstance_2013_01_10(
            self,
            instance_id
    ):
        """
        启动实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        启动一个指定的实例。<br/>接口调用成功后实例进入Starting状态。<br/>实例状态必须为Stopped，才可以调用该接口。<br/><br/>新增:业务欠费停机,不允许启动.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22443

        :param instance_id: 指定启动的实例ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.StartInstance.2013-01-10",
            {
                "InstanceId": instance_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_DescribeSnapshotAttribute_2013_01_10(
            self,
            snapshot_id,
            region_id
    ):
        """
        查询快照详情
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询指定快照的详细信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22444

        :param snapshot_id: 快照ID
        :param region_id: 快照所在数据中心
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeSnapshotAttribute.2013-01-10",
            {
                "SnapshotId": snapshot_id,
                "RegionId": region_id
            }
        )

    def ecs_aliyuncs_com_DescribeSnapshots_2013_01_10(
            self,
            disk_id,
            instance_id
    ):
        """
        查询磁盘设备的快照列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询针对云服务器的某个磁盘设备所有的快照列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22445

        :param disk_id: 磁盘设备ID
        :param instance_id: 实例名称
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeSnapshots.2013-01-10",
            {
                "DiskId": disk_id,
                "InstanceId": instance_id
            }
        )

    def ecs_aliyuncs_com_DescribeInstanceTypes_2013_01_10(
            self
    ):
        """
        查询实例资源规格列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询ECS所提供的实例资源规格列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22446

        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeInstanceTypes.2013-01-10"
        )

    def ecs_aliyuncs_com_AllocatePublicIpAddress_2013_01_10(
            self,
            instance_id
    ):
        """
        分配公网IP地址
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        给一个特定实例分配一个可用公网IP地址。<br/>？	实例的状态必须为Running或Stopped状态，才可以调用此接口。<br/>？	分配的IP必须在实例启动或重启后才能生效。<br/>？	分配的时候只能是IP，不能是IP段。<br/>？	目前，一个实例只能分配一个IP。当调用此接口时，如果实例已经拥有一个公网IP，将直接返回原IP地址。如果需要重新分配新地址，请先调用释放公网IP地址接口，再重新分配公网IP地址即可。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22447

        :param instance_id: 需要分配IP地址的实例ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.AllocatePublicIpAddress.2013-01-10",
            {
                "InstanceId": instance_id
            }
        )

    def ecs_aliyuncs_com_DeleteImage_2013_01_10(
            self,
            region_id,
            image_id
    ):
        """
        删除自定义镜像
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        删除指定的用户自定义镜像。镜像删除之后将不能再用于创建、重置ECS实例。<br/>	如果指定的镜像不存在，则请求将被忽略。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22448

        :param region_id: 镜像所在的Region ID
        :param image_id: 镜像ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DeleteImage.2013-01-10",
            {
                "RegionId": region_id,
                "ImageId": image_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_CreateImage_2013_01_10(
            self,
            region_id,
            snapshot_id,
            image_version='',
            description='',
            client_token=''
    ):
        """
        创建自定义镜像
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        通过快照创建自定义镜像，创建后的镜像可以用于新建ECS实例。<br/>	只有系统盘的快照可以用于创建自定义镜像。<br/>	只有达到完成状态（进度为100）的快照可以用于创建自定义镜像。<br/><br/>升级,去掉boss逻辑
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22449

        :param region_id: 镜像所在的Region ID
        :param snapshot_id: 快照ID。从指定的快照创建自定义镜像。
        :param image_version: 镜像版本号，长度限制在1~40个英文字符
        :param description: 镜像的描述信息，长度限制在1~200个英文字符
        :param client_token: 用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一，最大不值过64个ASCII字符。 具体参见附录：如何保证幂等性。
        """
        return self._top_request(
            "ecs.aliyuncs.com.CreateImage.2013-01-10",
            {
                "RegionId": region_id,
                "SnapshotId": snapshot_id,
                "ImageVersion": image_version,
                "Description": description,
                "ClientToken": client_token
            }
        )

    def ecs_aliyuncs_com_DeleteSnapshot_2013_01_10(
            self,
            disk_id,
            instance_id,
            snapshot_id
    ):
        """
        删除快照
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        删除指定实例、指定磁盘设备的快照。如果需要取消创建中的快照（即快照进度尚未达到100%），也可以调用该进口将快照删除（即取消快照创建）。<br/>？	实例仅在Stopped或Running状态下才能删除快照。<br/>？	如果指定ID的快照不存在，请求将被忽略。<br/>？	如果快照已经被用于创建自定义镜像，则这个快照不能被删除。需要先删除相应的自定义镜像，快照才能被删除的。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22450

        :param disk_id: 磁盘设备ID
        :param instance_id: 实例名称
        :param snapshot_id: 快照ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DeleteSnapshot.2013-01-10",
            {
                "DiskId": disk_id,
                "InstanceId": instance_id,
                "SnapshotId": snapshot_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_CreateSnapshot_2013_01_10(
            self,
            instance_id,
            disk_id,
            snapshot_name='',
            client_token=''
    ):
        """
        创建快照
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        对指定的磁盘存储设备创建快照。<br/>？	云服务器仅在Stopped或Running状态下才能创建快照。（但刚创建完成从未启动过的实例不能创建快照）<br/>？	新增加一块磁盘后，如果实例尚未启动过，新增的这块磁盘不能用于创建快照。<br/>？	如果快照创建没有完成（即进度没有达到100%），那么这个快照无法用于创建自定义镜像。<br/>？	现阶段一块磁盘最多只能创建2个快照。<br/><br/>升级:<br/>去掉写订单逻辑.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22451

        :param instance_id: 指定的实例ID
        :param disk_id: 指定的磁盘ID
        :param snapshot_name: 快照的显示名称，由字母、数字、'-'组成，长度取值范围为[0,300]
        :param client_token: 用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一，最大不值过64个ASCII字符。 具体参见附录：如何保证幂等性。
        """
        return self._top_request(
            "ecs.aliyuncs.com.CreateSnapshot.2013-01-10",
            {
                "InstanceId": instance_id,
                "DiskId": disk_id,
                "SnapshotName": snapshot_name,
                "ClientToken": client_token
            }
        )

    def ecs_aliyuncs_com_DeleteDisk_2013_01_10(
            self,
            instance_id,
            disk_id
    ):
        """
        删除磁盘
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        当某个磁盘设备不再使用时，可以删除磁盘。实例挂载的所有磁盘设备可以通过查询实例磁盘列表获接口获得。<br/>？	删除磁盘时实例状态只能为Running或Stopped中的一种<br/>？	若实例为Running状态，只有重启后操作方可生效。<br/>？	如果指定ID的磁盘不存在，请求将被忽略。<br/>？	磁盘被删除时，从该磁盘创建的快照会自动被删除。<br/><br/>升级:<br/>增加boss订单逻辑.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22452

        :param instance_id: 磁盘所属的实例的ID
        :param disk_id: 需要删除的磁盘设备ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DeleteDisk.2013-01-10",
            {
                "InstanceId": instance_id,
                "DiskId": disk_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_AddDisk_2013_01_10(
            self,
            instance_id,
            size,
            snapshot_id='',
            client_token=''
    ):
        """
        为实例增加磁盘设备
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        为指定实例增加一个磁盘设备。可创建一个全新磁盘，或是基于一个快照创建新磁盘。<br/>？	实例状态必须为Running或Stopped状态中的一种。<br/>？	基于快照创建磁盘时，无需设置磁盘大小，磁盘大小与快照对应的磁盘大小一致。<br/>？	当实例处于Running状态时，挂载磁盘无需重启，即时生效。<br/>？	单个实例最多允许挂载5个磁盘设备，总容量不能超过5TB。<br/><br/>升级:<br/>修改写订单逻辑.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22453

        :param instance_id: 指定实例的名称
        :param size: 需要增加的磁盘大小，以GB为单位，取值范围为5~2048
        :param snapshot_id: 如不传则增加空数据盘，若指定SnapshotId，磁盘的大小以Snapshot大小为准。Snapshot只能是数据盘的Snapshot。
        :param client_token: 用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一，最大不值过64个ASCII字符。 具体参见附录：如何保证幂等性。
        """
        return self._top_request(
            "ecs.aliyuncs.com.AddDisk.2013-01-10",
            {
                "InstanceId": instance_id,
                "Size": size,
                "SnapshotId": snapshot_id,
                "ClientToken": client_token
            }
        )

    def ecs_aliyuncs_com_DeleteInstance_2013_01_10(
            self,
            instance_id
    ):
        """
        删除实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据传入实例的名称来释放实例资源。释放后实例所使用的物理资源都被回收，相关数据全部丢失且永久不可恢复。<br/>？	实例状态必须为Starting或Stopped，才可以进行删除操作。删除后，实例的状态为Deleted，表示资源已释放，删除完成；对已处于Deleted状态的实例调用此操作，请求将被忽略。<br/>？	实例被删除时，挂载在实例上的磁盘会相应被删除。<br/>？	实例被删除后，相关数据全部丢失且永久不可恢复。<br/><br/>升级:增加ChargeType判断.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22454

        :param instance_id: 实例ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DeleteInstance.2013-01-10",
            {
                "InstanceId": instance_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_DescribeInstanceAttribute_2013_01_10(
            self,
            instance_id
    ):
        """
        查询实例信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询指定实例的详细信息。<br/><br/>升级:增加InternetChargeType.<br/>升级：增加SecurityControl
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22455

        :param instance_id: 实例ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeInstanceAttribute.2013-01-10",
            {
                "InstanceId": instance_id
            }
        )

    def ecs_aliyuncs_com_CreateInstance_2013_01_10(
            self,
            region_id,
            image_id,
            instance_type,
            security_group_id,
            internet_max_bandwidth_in='',
            internet_max_bandwidth_out='',
            host_name='',
            password='',
            zone_id='',
            client_token='',
            instance_name='',
            internet_charge_type='',
            system_disk_category='',
            data_disk_1_category='',
            data_disk_1_size='',
            data_disk_1_snapshot_id='',
            data_disk_2_category='',
            data_disk_2_size='',
            data_disk_2_snapshot_id='',
            data_disk_3_category='',
            data_disk_3_size='',
            data_disk_3_snapshot_id='',
            data_disk_4_category='',
            data_disk_4_size='',
            data_disk_4_snapshot_id=''
    ):
        """
        创建实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据传入参数创建弹性计算实例。<br/>	在创建实例时，必须要选择镜像，用来确定新生产实例的系统盘配置。镜像即一块母盘，包含操作系统以及应用软件配置，基于镜像创建实例后，实例的系统盘即为此镜像的完全克隆（系统配置及大小）。<br/>	一个实例属于且只能属于一个安全组。安全组需要预先创建，可通过创建安全组接口创建，可以在新创建实例时指定，也可通过修改实例属性的接口来完成实例所属安全组变更。在同一个安全组内的实例内网可以相互访问，但不同安全组之间默认有防火墙隔离，不可相互访问，但可通过安全组授权（通过授权安全组权限接口实现）来设置此安全组的防火墙权限。创建实例时必须要指定其所位于的安全组。同一个安全组内的实例数量不能超过1000个，若组内实例数量超出限制，创建实例时若指定该安全组，会提示失败。同一个安全组规则不能超过100条。<br/>	可设置公网入出带宽最大值。<br/>	实例创建时，系统会自己根据所指定的镜像为系统分配一个相应大小的系统盘。如果需要为实例添加更多数据磁盘，请调用为实例增加磁盘设备接口。<br/><br/>升级:增加参数,修改boss订单逻辑<br/>升级：增加NodeControlId；公网出带宽从200M改为1K
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22457

        :param region_id: 实例所属的Region ID
        :param image_id: 镜像文件ID，表示启动实例时选择的镜像资源
        :param instance_type: 实例的资源规则。取值参见附表实例资源规格对照表，也可以调用查询实例资源规格列表接口获得最新的规格表。
        :param security_group_id: 指定新创建实例所属于的安全组代码，同一个安全组内的实例之间可以互相访问。注意：同一安全组内的实例不能超过1000个
        :param internet_max_bandwidth_in: 公网入带宽最大值，单位为Mbps(Mega bit per second)，取值范围为1~200，即最大值为200Mbps<br/>默认值为200Mbps
        :param internet_max_bandwidth_out: 公网出带宽最大值，单位为Mbps(Mega bit per second)，取值范围为1~200，即最大值为200Mbps<br/>默认值为200Mbps
        :param host_name: 表示云服务器的主机名，最少2字符，“.”和“-”是不能作为hostname的首尾字符，不能连续使用。<br/>Windows平台最长为15字符，允许字母（不限制大小写）、数字和“-”组成，不支持点号（'.'），不能全是数字。<br/>其他（Linux等）平台最长为30字符，允许支持多个点号，点之间为一段，每段允许字母（不限制大小写）、数字和“-”组成。
        :param password: 实例的密码，用户传入的密码只能是数字或者英文字母，必须在6~30个字节
        :param zone_id: 实例所属可用区
        :param client_token: 用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一，最大不值过64个ASCII字符。<br/>具体参见附录：如何保证幂等性。
        :param instance_name: 实例的显示名称，由字母、数字、'-'组成，最长64个字符<br/>实例的显示名称在同一个用户账号下必须唯一，不能重名<br/>如果没有指定该参数，默认值为实例的InstanceId
        :param internet_charge_type: 带宽计费类型.
        :param system_disk_category: 系统盘类型
        :param data_disk_1_category: 数据盘1类型。
        :param data_disk_1_size: 数据盘1大小
        :param data_disk_1_snapshot_id: 数据盘1快照
        :param data_disk_2_category: 数据盘2类型
        :param data_disk_2_size: 数据盘2大小
        :param data_disk_2_snapshot_id: 数据盘2快照
        :param data_disk_3_category: 数据盘3类型
        :param data_disk_3_size: 数据盘3大小
        :param data_disk_3_snapshot_id: 数据盘3快照
        :param data_disk_4_category: 数据盘4类型
        :param data_disk_4_size: 数据盘4大小
        :param data_disk_4_snapshot_id: 数据盘4快照
        """
        return self._top_request(
            "ecs.aliyuncs.com.CreateInstance.2013-01-10",
            {
                "RegionId": region_id,
                "ImageId": image_id,
                "InstanceType": instance_type,
                "SecurityGroupId": security_group_id,
                "InternetMaxBandwidthIn": internet_max_bandwidth_in,
                "InternetMaxBandwidthOut": internet_max_bandwidth_out,
                "HostName": host_name,
                "Password": password,
                "ZoneId": zone_id,
                "ClientToken": client_token,
                "InstanceName": instance_name,
                "InternetChargeType": internet_charge_type,
                "SystemDisk.Category": system_disk_category,
                "DataDisk.1.Category": data_disk_1_category,
                "DataDisk.1.Size": data_disk_1_size,
                "DataDisk.1.SnapshotId": data_disk_1_snapshot_id,
                "DataDisk.2.Category": data_disk_2_category,
                "DataDisk.2.Size": data_disk_2_size,
                "DataDisk.2.SnapshotId": data_disk_2_snapshot_id,
                "DataDisk.3.Category": data_disk_3_category,
                "DataDisk.3.Size": data_disk_3_size,
                "DataDisk.3.SnapshotId": data_disk_3_snapshot_id,
                "DataDisk.4.Category": data_disk_4_category,
                "DataDisk.4.Size": data_disk_4_size,
                "DataDisk.4.SnapshotId": data_disk_4_snapshot_id
            }
        )

    def ecs_aliyuncs_com_GetMonitorData_2013_01_10(
            self
    ):
        """
        查看云服务器监控信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        分页查询本用户的所有云服务器相关的监控信息。 <br/>只能查询到状态非Deleted或者非刚刚创建完成尚处于Stopped状态的云服务器的<br/>监控信息。 <br/>可返回的监控内容包括：云服务器的CPU使用率、云服务器分配到的内存数、云<br/>服务器接收道德数据流量、云服务器发送的数据流量、云服务器网络流量、云服务<br/>器平均带宽。有可能返回的监控内容中会缺少部分内部，这可能是由于系统没有获<br/>得到相应的信息，比如当时实例处于Stopped状态。 <br/>可查询最近7天的监控数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22458

        """
        return self._top_request(
            "ecs.aliyuncs.com.GetMonitorData.2013-01-10"
        )

    def ecs_aliyuncs_com_RevokeSecurityGroup_2013_01_10(
            self,
            security_group_id,
            region_id,
            ip_protocol,
            port_range,
            source_group_id='',
            source_cidr_ip='',
            policy='accept',
            nic_type='internet'
    ):
        """
        撤销安全组规则
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        取消Group对外提供的访问权限。支持两种取消授权方式：一是取消本Region内其他<br/>Group采用指定协议通过指定端口访问访问该Group；二是取消IP地址范围采用指定协议通<br/>过指定端口访问该Group，只有调用授权接口授权的权限条目才可以删除（参数值跟授权时<br/>的参数相同）。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22459

        :param security_group_id: 安全组编码
        :param region_id: 安全组所属Region ID
        :param ip_protocol: P 协议，取值：tcp|udp|icmp|gre|all； <br/>All 表示同时支持四种协议
        :param port_range: IP 协议相关的端口号范围，tcp、udp协议<br/>的默认端口号，取值范围为1~65535；例<br/>如“1/200”意思是端口号范围为1~200，<br/>若输入值为：“200/1”接口调用将报错。 <br/>icmp 协议时端口号范围值为-1/-1，gre协<br/>议时端口号范围值为-1/-1，当<br/>IpProtocol为all时端口号范围值为-1/-1；取值范围
        :param source_group_id: 授权同一Region内可访问目标安全组的源<br/>安全组编码，SourceGroupId或者<br/>SourceCidrIp参数必须设置一项，如果<br/>两项都设置，则默认对SourceCidrIp授<br/>权。指定了该字段之后，NicType只能选<br/>择intranet
        :param source_cidr_ip: 授权可访问目标安全组的源IP 地址范围<br/>（采用CIDR格式来指定IP 地址范围），<br/>默认值为0.0.0.0/0（表示不受限制），其<br/>他支持的格式如10.159.6.18/12、<br/>10.159.6.186、或<br/>10.159.6.186-10.159.6.201（IP 区间）
        :param policy: 授权策略，参数值可为：accept（接受访问）、<br/>drop（访问时丢弃包）、reject（访问时拒<br/>绝包） <br/>默认值为：accept
        :param nic_type: 网络类型，取值：internet|intranet； <br/>默认值为internet
        """
        return self._top_request(
            "ecs.aliyuncs.com.RevokeSecurityGroup.2013-01-10",
            {
                "SecurityGroupId": security_group_id,
                "RegionId": region_id,
                "IpProtocol": ip_protocol,
                "PortRange": port_range,
                "SourceGroupId": source_group_id,
                "SourceCidrIp": source_cidr_ip,
                "Policy": policy,
                "NicType": nic_type
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_AuthorizeSecurityGroup_2013_01_10(
            self,
            security_group_id,
            region_id,
            ip_protocol,
            port_range,
            source_group_id='',
            source_cidr_ip='',
            policy='accept',
            nic_type='internet'
    ):
        """
        授权安全组权限
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        设定安全组对外提供的访问权限，支持两种授权方式：  1、开放同一region内其他Group对其的访问权限；2、开放指定某IP 地址范围（CIDR格式）对其的访问权限。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22460

        :param security_group_id: 安全组编码
        :param region_id: 安全组所属Region ID
        :param ip_protocol: P 协议，取值：tcp|udp|icmp|gre|all； <br/>All 表示同时支持四种协议
        :param port_range: IP 协议相关的端口号范围，tcp、udp协议<br/>的默认端口号，取值范围为1~65535；例<br/>如“1/200”意思是端口号范围为1~200，<br/>若输入值为：“200/1”接口调用将报错。 <br/>icmp 协议时端口号范围值为-1/-1，gre协<br/>议时端口号范围值为-1/-1，当<br/>IpProtocol为all时端口号范围值为-1/-1；取值范围
        :param source_group_id: 授权同一Region内可访问目标安全组的源<br/>安全组编码，SourceGroupId或者<br/>SourceCidrIp参数必须设置一项，如果<br/>两项都设置，则默认对SourceCidrIp授<br/>权。指定了该字段之后，NicType只能选<br/>择intranet
        :param source_cidr_ip: 授权可访问目标安全组的源IP 地址范围<br/>（采用CIDR格式来指定IP 地址范围），<br/>默认值为0.0.0.0/0（表示不受限制），其<br/>他支持的格式如10.159.6.18/12、<br/>10.159.6.186、或<br/>10.159.6.186-10.159.6.201（IP 区间）
        :param policy: 授权策略，参数值可为：accept（接受访问）、<br/>drop（访问时丢弃包）、reject（访问时拒<br/>绝包） <br/>默认值为：accept
        :param nic_type: 网络类型，取值：internet|intranet； <br/>默认值为internet
        """
        return self._top_request(
            "ecs.aliyuncs.com.AuthorizeSecurityGroup.2013-01-10",
            {
                "SecurityGroupId": security_group_id,
                "RegionId": region_id,
                "IpProtocol": ip_protocol,
                "PortRange": port_range,
                "SourceGroupId": source_group_id,
                "SourceCidrIp": source_cidr_ip,
                "Policy": policy,
                "NicType": nic_type
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_ModifyInstanceAttribute_2013_01_10(
            self,
            instance_id,
            password='',
            host_name='',
            security_group_id='',
            instance_name=''
    ):
        """
        修改实例属性
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        修改实例密码、主机名、安全组等属性信息。 <br/>？  此操作只修改参数中显式指定了的属性，没有指定的属性将不会发生改变。 <br/>？  重置实例的密码，状态为Deleted或Starting的实例不可以进行此操作。重置密码<br/>需要重启实例后才能生效。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22461

        :param instance_id: 指定的实例ID
        :param password: 重置为用户指定的密码，密码只能是数字或者英文<br/>字母。长度必须在6~30个英文字符
        :param host_name: 表示实例的主机名。必须以字母开始，并只可以含有字母、“-”字符。Windows系统最长为15字节，Linux系统最长为30字节
        :param security_group_id: 安全组代码。修改实例所属的安全组
        :param instance_name: 实例名称
        """
        return self._top_request(
            "ecs.aliyuncs.com.ModifyInstanceAttribute.2013-01-10",
            {
                "InstanceId": instance_id,
                "Password": password,
                "HostName": host_name,
                "SecurityGroupId": security_group_id,
                "InstanceName": instance_name
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_AddIpRange_2013_01_10(
            self
    ):
        """
        增加Ip段
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        增加Ip段。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22736

        """
        return self._top_request(
            "ecs.aliyuncs.com.AddIpRange.2013-01-10",
            result_processor=lambda x: x["result_data"]
        )

    def ecs_aliyuncs_com_ResetDisk_2013_01_10(
            self,
            instance_id,
            disk_id,
            snapshot_id
    ):
        """
        回滚快照
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        重置磁盘
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22975

        :param instance_id: 指定启动的实例ID
        :param disk_id: 指定的磁盘设备ID
        :param snapshot_id: 指定的快照ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.ResetDisk.2013-01-10",
            {
                "InstanceId": instance_id,
                "DiskId": disk_id,
                "SnapshotId": snapshot_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_AttachDisk_2014_05_26(
            self,
            instance_id,
            disk_id,
            device='',
            delete_with_instance=''
    ):
        """
        挂载磁盘
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        实例的状态必须为running或者stopped，且实例的安全控制标识不为locked，且不欠费。<br/>在该接口中设置的DeleteWithInstance属性，在实例的安全控制标记为locked时，释放实例时会忽略磁盘的DeleteWithInstance属性而被同时释放。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23345

        :param instance_id: 目标云服务器ID
        :param disk_id: 磁盘ID，磁盘和Instance必须在同一个Zone
        :param device: 空表示由系统默认分配，/dev/xvdb/开始到/dev/xvdz/
        :param delete_with_instance: 磁盘是否随实例释放：<br/>True表示Instance释放时，这块磁盘随Instance一起释放；<br/>False表示Instance释放时，这块磁盘保留不释放。<br/>默认值：无，表示保留当前值
        """
        return self._top_request(
            "ecs.aliyuncs.com.AttachDisk.2014-05-26",
            {
                "InstanceId": instance_id,
                "DiskId": disk_id,
                "Device": device,
                "DeleteWithInstance": delete_with_instance
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_DeleteInstance_2014_05_26(
            self,
            instance_id
    ):
        """
        删除实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        删除ECS实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23347

        :param instance_id: 实例ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DeleteInstance.2014-05-26",
            {
                "InstanceId": instance_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_DescribeInstanceAttribute_2014_05_26(
            self,
            instance_id
    ):
        """
        查询实例信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23348

        :param instance_id: 实例ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeInstanceAttribute.2014-05-26",
            {
                "InstanceId": instance_id
            }
        )

    def ecs_aliyuncs_com_ModifyInstanceAttribute_2014_05_26(
            self,
            instance_id,
            password='',
            host_name='',
            instance_name='',
            description=''
    ):
        """
        修改实例属性
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23349

        :param instance_id: 指定的实例ID
        :param password: 重置为用户指定的密码，密码长度8-30个字符，必须包含大小写字母和数字
        :param host_name: 表示实例的主机名。必须以字母开始，并只可以含有字母、“-”字符。Windows系统最长为15字节，Linux系统最长为30字节
        :param instance_name: 实例名称
        :param description: 实例说明
        """
        return self._top_request(
            "ecs.aliyuncs.com.ModifyInstanceAttribute.2014-05-26",
            {
                "InstanceId": instance_id,
                "Password": password,
                "HostName": host_name,
                "InstanceName": instance_name,
                "Description": description
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_RebootInstance_2014_05_26(
            self,
            instance_id,
            force_stop=''
    ):
        """
        重启实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        重启ECS实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23352

        :param instance_id: 指定实例的ID
        :param force_stop: 重启机器时的是否强制关机策略。取值：true|false；<br/>若为false则走正常关机流程；若为true则强制关机。<br/>如果不指定，则默认值为false。
        """
        return self._top_request(
            "ecs.aliyuncs.com.RebootInstance.2014-05-26",
            {
                "InstanceId": instance_id,
                "ForceStop": force_stop
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_DescribeDisks_2014_05_26(
            self,
            region_id,
            page_number='',
            page_size='10',
            zone_id='',
            snapshot_id='',
            instance_id='',
            disk_ids='',
            category='',
            status='',
            portable='',
            delete_with_instance='',
            disk_type='',
            delete_auto_snapshot=''
    ):
        """
        查询磁盘
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23353

        :param region_id: 实例所属于的Region ID
        :param page_number: 实例状态列表的页码，起始值为1，默认值为1
        :param page_size: 分页查询时设置的每页行数，最大值50行，默认为10
        :param zone_id: 可用区ID。
        :param snapshot_id: 创建数据盘使用的快照<br/>指定该参数后Size会被忽略，实际创建的磁盘大小为指定快照的大小<br/>2013年7月15日（含）前的快照不能用来创建磁盘
        :param instance_id: 目标云服务器ID
        :param disk_ids: 磁盘ID
        :param category: 磁盘种类，all|cloud|ephemaral。默认值为all
        :param status: 磁盘状态<br/>In-use|Availalble|Attaching|<br/>Detaching|Creating|Deleting|All，默认值为All
        :param portable: True代表是独立云磁盘，可以独立存在且可以自由在独立区内挂载和下载，false代表非独立云磁盘，只能和实例同生同灭。用户如果需要做attach和detach操作，必须先查询一下这个属性为true的磁盘才能操作。临时磁盘，云磁盘的系统盘和包月的云磁盘，该属性都为false。这个属性用户不能更改
        :param delete_with_instance: 磁盘是否随实例释放：<br/>True表示Instance释放时，这块磁盘随Instance一起释放；<br/>False表示Instance释放时，这块磁盘保留不释放。<br/>默认值为
        :param disk_type: all|system|data，默认值为all。
        :param delete_auto_snapshot: 删除磁盘时，是否同时删除自动快照。<br/>True表示同时删除自动快照<br/>False表示保留自动快照
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeDisks.2014-05-26",
            {
                "RegionId": region_id,
                "PageNumber": page_number,
                "PageSize": page_size,
                "ZoneId": zone_id,
                "SnapshotId": snapshot_id,
                "InstanceId": instance_id,
                "DiskIds": disk_ids,
                "Category": category,
                "Status": status,
                "Portable": portable,
                "DeleteWithInstance": delete_with_instance,
                "DiskType": disk_type,
                "DeleteAutoSnapshot": delete_auto_snapshot
            }
        )

    def ecs_aliyuncs_com_StopInstance_2014_05_26(
            self,
            instance_id,
            force_stop=''
    ):
        """
        停止ECS实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        停止实例运行
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23354

        :param instance_id: 指定的实例ID
        :param force_stop: 重启机器时的是否强制关机策略。取值：true|false；<br/>若为false则走正常关机流程；若为true则强制关机。<br/>如果不指定，则默认值为false。
        """
        return self._top_request(
            "ecs.aliyuncs.com.StopInstance.2014-05-26",
            {
                "InstanceId": instance_id,
                "ForceStop": force_stop
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_CreateDisk_2014_05_26(
            self,
            region_id,
            zone_id,
            disk_name='',
            description='',
            size='',
            snapshot_id='',
            client_token='',
            disk_category=''
    ):
        """
        创建磁盘
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23356

        :param region_id: 实例所属的Region ID
        :param zone_id: 可用区ID。
        :param disk_name: 磁盘名称，不填则为空，默认值为空，[0,128]英文或中文字符，磁盘名称会展示在控制台。不能以http://和https://开头。
        :param description: 磁盘描述，不填则为空，默认值为空
        :param size: 数据盘的磁盘大小<br/>以GB为单位，取值范围为20~2000<br/>如果指定了SnapshotId，则忽略，会使用实际快照大小。
        :param snapshot_id: 创建数据盘使用的快照<br/>指定该参数后Size会被忽略，实际创建的磁盘大小为指定快照的大小<br/>2013年7月15日（含）前的快照不能用来创建磁盘
        :param client_token: 用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一，最大不值过64个ASCII字符。
        :param disk_category: 磁盘类型：<br/>cloud：普通云盘<br/>cloud_ssd：预配置SSD云盘
        """
        return self._top_request(
            "ecs.aliyuncs.com.CreateDisk.2014-05-26",
            {
                "RegionId": region_id,
                "ZoneId": zone_id,
                "DiskName": disk_name,
                "Description": description,
                "Size": size,
                "SnapshotId": snapshot_id,
                "ClientToken": client_token,
                "DiskCategory": disk_category
            }
        )

    def ecs_aliyuncs_com_StartInstance_2014_05_26(
            self,
            instance_id
    ):
        """
        启动ecs实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        启动ECS实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23358

        :param instance_id: 指定启动的实例ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.StartInstance.2014-05-26",
            {
                "InstanceId": instance_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_CreateInstance_2014_05_26(
            self,
            region_id,
            image_id,
            instance_type,
            security_group_id,
            internet_max_bandwidth_out='',
            host_name='',
            password='',
            zone_id='',
            client_token='',
            instance_name='',
            internet_charge_type='',
            system_disk_category='',
            data_disk_1_category='',
            data_disk_1_size='',
            data_disk_1_snapshot_id='',
            data_disk_2_category='',
            data_disk_2_size='',
            data_disk_2_snapshot_id='',
            data_disk_3_category='',
            data_disk_3_size='',
            data_disk_3_snapshot_id='',
            data_disk_4_category='',
            data_disk_4_size='',
            data_disk_4_snapshot_id='',
            system_disk_disk_name='',
            system_disk_description='',
            data_disk_1_disk_name='',
            data_disk_1_description='',
            data_disk_1_device='',
            data_disk_2_disk_name='',
            data_disk_2_description='',
            data_disk_2_device='',
            data_disk_3_disk_name='',
            data_disk_3_description='',
            data_disk_3_device='',
            data_disk_4_disk_name='',
            data_disk_4_description='',
            data_disk_4_device='',
            description='',
            vswitch_id='',
            private_ip_address='',
            internet_max_bandwidth_in='',
            data_disk_1_delete_with_instance='',
            data_disk_2_delete_with_instance='',
            data_disk_3_delete_with_instance='',
            data_disk_4_delete_with_instance='',
            io_optimized=''
    ):
        """
        创建ECS实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23365

        :param region_id: 实例所属的Region ID
        :param image_id: 镜像文件ID，表示启动实例时选择的镜像资源
        :param instance_type: 实例的资源规则。取值参见附表实例资源规格对照表，也可以调用查询实例资源规格列表接口获得最新的规格表。
        :param security_group_id: 指定新创建实例所属于的安全组代码，同一个安全组内的实例之间可以互相访问。注意：同一安全组内的实例不能超过1000个
        :param internet_max_bandwidth_out: 公网出带宽最大值，单位为Mbps(Mega bit per second)，取值范围为1~200，即最大值为200Mbps<br/>默认值为200Mbps
        :param host_name: 表示云服务器的主机名，最少2字符，“.”和“-”是不能作为hostname的首尾字符，不能连续使用。<br/>Windows平台最长为15字符，允许字母（不限制大小写）、数字和“-”组成，不支持点号（'.'），不能全是数字。<br/>其他（Linux等）平台最长为30字符，允许支持多个点号，点之间为一段，每段允许字母（不限制大小写）、数字和“-”组成。
        :param password: 实例的密码，8-30个字符，必须由大小写字母和数字组成
        :param zone_id: 实例所属可用区
        :param client_token: 用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一，最大不值过64个ASCII字符。<br/>具体参见附录：如何保证幂等性。
        :param instance_name: 实例的显示名称，由字母、数字、'-'组成，最长64个字符<br/>实例的显示名称在同一个用户账号下必须唯一，不能重名<br/>如果没有指定该参数，默认值为实例的InstanceId
        :param internet_charge_type: 带宽计费类型.
        :param system_disk_category: 系统盘类型
        :param data_disk_1_category: 数据盘1类型。
        :param data_disk_1_size: 数据盘1大小
        :param data_disk_1_snapshot_id: 数据盘1快照
        :param data_disk_2_category: 数据盘2类型
        :param data_disk_2_size: 数据盘2大小
        :param data_disk_2_snapshot_id: 数据盘2快照
        :param data_disk_3_category: 数据盘3类型
        :param data_disk_3_size: 数据盘3大小
        :param data_disk_3_snapshot_id: 数据盘3快照
        :param data_disk_4_category: 数据盘4类型
        :param data_disk_4_size: 数据盘4大小
        :param data_disk_4_snapshot_id: 数据盘4快照
        :param system_disk_disk_name: 系统盘名称
        :param system_disk_description: 系统盘描述，不填则为空，默认值为空，[0,256]英文或中文字符，磁盘描述会展示在控制台。不能以http://和https://开头。
        :param data_disk_1_disk_name: 数据盘名称，不填则为空，默认值为空，[0,128]英文或中文字符，磁盘名称会展示在控制台。不能以http://和https://开头。
        :param data_disk_1_description: 数据盘名称，不填则为空，默认值为空，[0,128]英文或中文字符，磁盘名称会展示在控制台。不能以http://和https://开头。
        :param data_disk_1_device: 空表示由系统默认分配，/dev/xvdb/开始到/dev/xvdz/
        :param data_disk_2_disk_name: 数据盘名称，不填则为空，默认值为空，[0,128]英文或中文字符，磁盘名称会展示在控制台。不能以http://和https://开头。
        :param data_disk_2_description: 数据盘描述，不填则为空，默认值为空，[0,256]英文或中文字符，磁盘描述会展示在控制台。不能以http://和https://开头。
        :param data_disk_2_device: 空表示由系统默认分配，/dev/xvdb/开始到/dev/xvdz/
        :param data_disk_3_disk_name: 数据盘名称，不填则为空，默认值为空，[0,128]英文或中文字符，磁盘名称会展示在控制台。不能以http://和https://开头。
        :param data_disk_3_description: 数据盘描述，不填则为空，默认值为空，[0,256]英文或中文字符，磁盘描述会展示在控制台。不能以http://和https://开头。
        :param data_disk_3_device: 空表示由系统默认分配，/dev/xvdb/开始到/dev/xvdz/
        :param data_disk_4_disk_name: 数据盘名称，不填则为空，默认值为空，[0,128]英文或中文字符，磁盘名称会展示在控制台。不能以http://和https://开头。
        :param data_disk_4_description: 数据盘描述，不填则为空，默认值为空，[0,256]英文或中文字符，磁盘描述会展示在控制台。不能以http://和https://开头。
        :param data_disk_4_device: 空表示由系统默认分配，/dev/xvdb/开始到/dev/xvdz/
        :param description: 实例的描述，[0,256]英文或中文字符，实例描述会显示在控制台。不填则为空，默认为空。不能以http://和https://开头。
        :param vswitch_id: 如果是创建VPC类型的实例，需要指定虚拟交换机的ID
        :param private_ip_address: 实例私网IP地址，不能单独指定。
        :param internet_max_bandwidth_in: 公网入带宽最大值，单位为Mbps(Mega bit per second)，取值范围为1~200，即最大值为200Mbps
        :param data_disk_1_delete_with_instance: 磁盘是否随实例一起释放
        :param data_disk_2_delete_with_instance: 磁盘是否随实例一起释放
        :param data_disk_3_delete_with_instance: 磁盘是否随实例一起释放
        :param data_disk_4_delete_with_instance: 磁盘是否随实例一起释放
        :param io_optimized: IO优化<br/>	none：非IO优化<br/>	optimized：IO优化<br/>默认值：none
        """
        return self._top_request(
            "ecs.aliyuncs.com.CreateInstance.2014-05-26",
            {
                "RegionId": region_id,
                "ImageId": image_id,
                "InstanceType": instance_type,
                "SecurityGroupId": security_group_id,
                "InternetMaxBandwidthOut": internet_max_bandwidth_out,
                "HostName": host_name,
                "Password": password,
                "ZoneId": zone_id,
                "ClientToken": client_token,
                "InstanceName": instance_name,
                "InternetChargeType": internet_charge_type,
                "SystemDisk.Category": system_disk_category,
                "DataDisk.1.Category": data_disk_1_category,
                "DataDisk.1.Size": data_disk_1_size,
                "DataDisk.1.SnapshotId": data_disk_1_snapshot_id,
                "DataDisk.2.Category": data_disk_2_category,
                "DataDisk.2.Size": data_disk_2_size,
                "DataDisk.2.SnapshotId": data_disk_2_snapshot_id,
                "DataDisk.3.Category": data_disk_3_category,
                "DataDisk.3.Size": data_disk_3_size,
                "DataDisk.3.SnapshotId": data_disk_3_snapshot_id,
                "DataDisk.4.Category": data_disk_4_category,
                "DataDisk.4.Size": data_disk_4_size,
                "DataDisk.4.SnapshotId": data_disk_4_snapshot_id,
                "SystemDisk.DiskName": system_disk_disk_name,
                "SystemDisk.Description": system_disk_description,
                "DataDisk.1.DiskName": data_disk_1_disk_name,
                "DataDisk.1.Description": data_disk_1_description,
                "DataDisk.1.Device": data_disk_1_device,
                "DataDisk.2.DiskName": data_disk_2_disk_name,
                "DataDisk.2.Description": data_disk_2_description,
                "DataDisk.2.Device": data_disk_2_device,
                "DataDisk.3.DiskName": data_disk_3_disk_name,
                "DataDisk.3.Description": data_disk_3_description,
                "DataDisk.3.Device": data_disk_3_device,
                "DataDisk.4.DiskName": data_disk_4_disk_name,
                "DataDisk.4.Description": data_disk_4_description,
                "DataDisk.4.Device": data_disk_4_device,
                "Description": description,
                "VSwitchId": vswitch_id,
                "PrivateIpAddress": private_ip_address,
                "InternetMaxBandwidthIn": internet_max_bandwidth_in,
                "DataDisk.1.DeleteWithInstance": data_disk_1_delete_with_instance,
                "DataDisk.2.DeleteWithInstance": data_disk_2_delete_with_instance,
                "DataDisk.3.DeleteWithInstance": data_disk_3_delete_with_instance,
                "DataDisk.4.DeleteWithInstance": data_disk_4_delete_with_instance,
                "IoOptimized": io_optimized
            }
        )

    def ecs_aliyuncs_com_CreateSecurityGroup_2014_05_26(
            self,
            region_id,
            description='',
            client_token='',
            vpc_id='',
            security_group_name=''
    ):
        """
        创建安全组
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        新建一个安全组，通过安全组防火墙规则配置实现对一组实例的防火墙配置。一个安全组可包含多个实例，但一个实例只能属于一个安全组。新建的安全组，默认只打开组内实例之间的访问权限，其他访问权限全部关闭。若用户允许其他组的机器或来自互联网的访问，则可通过授权安全组权限接口来对安全组防火墙策略进行修改。防火墙规则区分内网和公网。每个用户最多可创建100个安全组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23374

        :param region_id: 安全组所属Region ID
        :param description: 安全组描述信息，长度限制在500个字节，不支持中文
        :param client_token: 用于保证请求的幂等性。由客户端生成该参数值，要保证在不同请求间唯一，最大不值过64个ASCII字符。 具体参见附录：如何保证幂等性。
        :param vpc_id: 虚拟网络类型实例组成的安全组，需要指定安全组所在的虚拟网络ID
        :param security_group_name: 安全组名称
        """
        return self._top_request(
            "ecs.aliyuncs.com.CreateSecurityGroup.2014-05-26",
            {
                "RegionId": region_id,
                "Description": description,
                "ClientToken": client_token,
                "VpcId": vpc_id,
                "SecurityGroupName": security_group_name
            }
        )

    def ecs_aliyuncs_com_AllocatePublicIpAddress_2014_05_26(
            self,
            instance_id
    ):
        """
        分配公网IP地址
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        给一个特定实例分配一个可用公网IP地址。 ？	实例的状态必须为Running或Stopped状态，才可以调用此接口。 ？	分配的IP必须在实例启动或重启后才能生效。 ？	分配的时候只能是IP，不能是IP段。 ？	目前，一个实例只能分配一个IP。当调用此接口时，如果实例已经拥有一个公网IP，将直接返回原IP地址。如果需要重新分配新地址，请先调用释放公网IP地址接口，再重新分配公网IP地址即可。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23376

        :param instance_id: 需要分配IP地址的实例ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.AllocatePublicIpAddress.2014-05-26",
            {
                "InstanceId": instance_id
            }
        )

    def ecs_aliyuncs_com_DescribeImages_2014_05_26(
            self,
            region_id,
            page_number='',
            page_size='10',
            image_owner_alias='',
            image_id='',
            snapshot_id='',
            architecture='',
            image_name='',
            status='Available'
    ):
        """
        查询可用镜像
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询用户可以使用的镜像列表。显示出的镜像资源列表包括用户自己私有的镜像资源和其他公共的镜像资源，此接口支持分页查询，查询结果包括可使用的镜像资源的总数和当前页的镜像资源。每页的数量默认为10条。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23379

        :param region_id: 实例所属于的Region ID
        :param page_number: 实例状态列表的页码，起始值为1，默认值为1
        :param page_size: 分页查询时设置的每页行数，最大值50行，默认为10
        :param image_owner_alias: 镜像所有者别名。<br/>取值：<br/>？	System| self| others| marketplace<br/>默认值:无，表示返回system+self+others<br/>不设置该参数说明不使用该参数进行过滤条件<br/>取值说明:<br/>system 阿里云官方提供镜像<br/>self 用户自定义镜像<br/>others 非自己的可用镜像<br/>？	marketplace 镜像市场提供的镜像
        :param image_id: 镜像ID，可以输入多个，以”,”分割
        :param snapshot_id: 创建镜像的快照ID
        :param architecture: 镜像系统类型：i386 | x86_64
        :param image_name: 镜像的名称
        :param status: 根据用户的镜像状态查询
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeImages.2014-05-26",
            {
                "RegionId": region_id,
                "PageNumber": page_number,
                "PageSize": page_size,
                "ImageOwnerAlias": image_owner_alias,
                "ImageId": image_id,
                "SnapshotId": snapshot_id,
                "Architecture": architecture,
                "ImageName": image_name,
                "Status": status
            }
        )

    def ecs_aliyuncs_com_DescribeSnapshots_2014_05_26(
            self,
            region_id,
            disk_id='',
            instance_id='',
            snapshot_ids='',
            page_number='1',
            page_size='10'
    ):
        """
        查询快照列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23380

        :param region_id: 无
        :param disk_id: 磁盘设备ID
        :param instance_id: 实例名称
        :param snapshot_ids: 快照标识编码
        :param page_number: 磁盘状态列表的页码，起始值为1，默认值为1
        :param page_size: 分页查询时设置的每页行数，最大值50行，默认为10
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeSnapshots.2014-05-26",
            {
                "RegionId": region_id,
                "DiskId": disk_id,
                "InstanceId": instance_id,
                "SnapshotIds": snapshot_ids,
                "PageNumber": page_number,
                "PageSize": page_size
            }
        )

    def ecs_aliyuncs_com_DescribeInstanceTypes_2014_05_26(
            self
    ):
        """
        查询实例资源规格列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23381

        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeInstanceTypes.2014-05-26"
        )

    def ecs_aliyuncs_com_DescribeZones_2014_05_26(
            self,
            region_id
    ):
        """
        查询可用区
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23382

        :param region_id: 指定的Region ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeZones.2014-05-26",
            {
                "RegionId": region_id
            }
        )

    def ecs_aliyuncs_com_DescribeRegions_2014_05_26(
            self
    ):
        """
        查询可用地域列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23383

        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeRegions.2014-05-26"
        )

    def ecs_aliyuncs_com_DescribeSecurityGroups_2014_05_26(
            self,
            region_id,
            page_number='1',
            page_size='10',
            vpc_id=''
    ):
        """
        查询安全组列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23387

        :param region_id: 数据中心id
        :param page_number: 当前页码，起始值为1，默认值为1
        :param page_size: 分页查询时设置的每页行数，最大值50，默认值为10
        :param vpc_id: 虚拟专有网络Id
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeSecurityGroups.2014-05-26",
            {
                "RegionId": region_id,
                "PageNumber": page_number,
                "PageSize": page_size,
                "VpcId": vpc_id
            }
        )

    def ecs_aliyuncs_com_DescribeSecurityGroupAttribute_2014_05_26(
            self,
            security_group_id,
            region_id
    ):
        """
        4.6.3	查询安全组规则
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询安全组规则
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23388

        :param security_group_id: 安全组ID
        :param region_id: 安全组所属Region ID
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeSecurityGroupAttribute.2014-05-26",
            {
                "SecurityGroupId": security_group_id,
                "RegionId": region_id
            }
        )

    def ecs_aliyuncs_com_AuthorizeSecurityGroup_2014_05_26(
            self,
            security_group_id,
            region_id,
            ip_protocol,
            port_range,
            source_group_id='',
            source_cidr_ip='',
            policy='accept',
            nic_type='internet',
            source_group_owner_account='',
            priority='1'
    ):
        """
        授权安全组
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        设定安全组对外提供的访问权限，支持两种授权方式： 1、开放同一region内其他Group对其的访问权限；2、开放指定某IP 地址范围（CIDR格式）对其的访问权限。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23390

        :param security_group_id: 安全组编码
        :param region_id: 安全组所属Region ID
        :param ip_protocol: P 协议，取值：tcp|udp|icmp|gre|all； <br/>All 表示同时支持四种协议
        :param port_range: IP 协议相关的端口号范围，tcp、udp协议<br/>的默认端口号，取值范围为1~65535；例<br/>如“1/200”意思是端口号范围为1~200，<br/>若输入值为：“200/1”接口调用将报错。 <br/>icmp 协议时端口号范围值为-1/-1，gre协<br/>议时端口号范围值为-1/-1，当<br/>IpProtocol为all时端口号范围值为-1/-1；取值范围
        :param source_group_id: 授权同一Region内可访问目标安全组的源<br/>安全组编码，SourceGroupId或者<br/>SourceCidrIp参数必须设置一项，如果<br/>两项都设置，则默认对SourceCidrIp授<br/>权。指定了该字段之后，NicType只能选<br/>择intranet
        :param source_cidr_ip: 授权可访问目标安全组的源IP 地址范围<br/>（采用CIDR格式来指定IP 地址范围），<br/>默认值为0.0.0.0/0（表示不受限制），其<br/>他支持的格式如10.159.6.18/12、<br/>10.159.6.186、或<br/>10.159.6.186-10.159.6.201（IP 区间）
        :param policy: 授权策略，参数值可为：accept（接受访问）、<br/>drop（访问时丢弃包）、reject（访问时拒<br/>绝包） <br/>默认值为：accept
        :param nic_type: 网络类型，取值：internet|intranet； <br/>默认值为internet
        :param source_group_owner_account: 源安全组的归属账户
        :param priority: 授权策略优先级，参数值可为：1-100 默认值为：1
        """
        return self._top_request(
            "ecs.aliyuncs.com.AuthorizeSecurityGroup.2014-05-26",
            {
                "SecurityGroupId": security_group_id,
                "RegionId": region_id,
                "IpProtocol": ip_protocol,
                "PortRange": port_range,
                "SourceGroupId": source_group_id,
                "SourceCidrIp": source_cidr_ip,
                "Policy": policy,
                "NicType": nic_type,
                "SourceGroupOwnerAccount": source_group_owner_account,
                "Priority": priority
            },
            result_processor=lambda x: x["RequestId"]
        )

    def ecs_aliyuncs_com_DescribeInstances_2014_05_26(
            self,
            region_id,
            vpc_id='',
            vswitch_id='',
            zone_id='',
            instance_network_type='',
            security_group_id='',
            page_number='1',
            page_size='10',
            instance_ids='',
            inner_ip_addresses='',
            private_ip_addresses='',
            public_ip_addresses=''
    ):
        """
        查询实例列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23508

        :param region_id: 区域Id
        :param vpc_id: 虚拟专有网络Id
        :param vswitch_id: 虚拟交换机Id
        :param zone_id: 可用区Id
        :param instance_network_type: 实例网络类型
        :param security_group_id: 安全组Id
        :param page_number: 实例状态列表的页码，起始值为1，默认值为1
        :param page_size: 分页查询时设置的每页行数，最大值50行，默认为10
        :param instance_ids: 最多不超过10个。
        :param inner_ip_addresses: 实例内网ip地址（classic），最多不超过10个，实例网络类型（InstanceNetworkType）为classic时生效，否则忽略。
        :param private_ip_addresses: 实例私网ip地址（vpc），最多不超过10个，实例网络类型（InstanceNetworkType）为vpc时生效，否则忽略。
        :param public_ip_addresses: 实例公网ip地址，最多不超过10个
        """
        return self._top_request(
            "ecs.aliyuncs.com.DescribeInstances.2014-05-26",
            {
                "RegionId": region_id,
                "VpcId": vpc_id,
                "VSwitchId": vswitch_id,
                "ZoneId": zone_id,
                "InstanceNetworkType": instance_network_type,
                "SecurityGroupId": security_group_id,
                "PageNumber": page_number,
                "PageSize": page_size,
                "InstanceIds": instance_ids,
                "InnerIpAddresses": inner_ip_addresses,
                "PrivateIpAddresses": private_ip_addresses,
                "PublicIpAddresses": public_ip_addresses
            }
        )

    def rds_aliyuncs_com_CreateDBInstance_2014_08_15(
            self,
            region_id,
            engine,
            engine_version,
            dbinstance_class,
            dbinstance_storage,
            dbinstance_net_type,
            security_iplist,
            pay_type,
            dbinstance_description='',
            zone_id='',
            instance_network_type='Classic',
            vpcid='',
            vswitch_id='',
            private_ip_address='',
            connection_mode='',
            system_dbcharset='',
            token=''
    ):
        """
        创建数据库实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23679

        :param region_id: 数据中心，长度不超过50个字符
        :param engine: 数据库类型，取值范围为MySQL|SQLServer
        :param engine_version: 数据库版本号取值如下：MySQL：5.5/5.6SQLServer：2008r2
        :param dbinstance_class: 实例规格，可选值：见实例规格附表
        :param dbinstance_storage: 自定义存储空间，取值范围：mysql为[5,1000]，sql server为[10，1000]。单位：GB
        :param dbinstance_net_type: 实例IP的网络类型：Internet代表公网，Intranet代表私网；
        :param security_iplist: 允许访问该实例下所有数据库的IP名单，以逗号隔开，不可重复，最多100个；支持格式：%，0.0.0.0/0，10.23.12.24（IP），或者10.23.12.24/24（CIDR模式，无类域间路由，/24表示了地址中前缀的长度，范围[1,32]）其中，0.0.0.0/0，表示不限制，用户输入%提示报错
        :param pay_type: Postpaid，按量付费，目前只有这一种
        :param dbinstance_description: 不能以http://,https开头 开始以中文，英文字母开头 可以包含中文，英文字符，_，-，数字字符長度2~256
        :param zone_id: 可用区通过函数DescribeRegions查看不填系统随机指定
        :param instance_network_type: VPC：创建VPC实例Classic：创建Classic实例不填，默认创建Classic实例
        :param vpcid: VPCId
        :param vswitch_id: VSwitchId
        :param private_ip_address: 用户可以指定VSwitchId下的vpcIp，如果不输入，系统通过vpcId,和VSwitchId 自动分配。如果PrivateIpAddress不在vswitch 包含的vpcip  地址段内，这报错。
        :param connection_mode: Standard lvs Safe为proxy链路 默认为proxy	Safe
        :param system_dbcharset: SystemDBCharset 可取值： Chinese_PRC_CI_AS Chinese_PRC_CS_AS SQL_Latin1_General_CP1_CI_AS SQL_Latin1_General_CP1_CS_AS Chinese_PRC_BIN
        :param token: 系统自动生成请修改
        """
        return self._top_request(
            "rds.aliyuncs.com.CreateDBInstance.2014-08-15",
            {
                "RegionId": region_id,
                "Engine": engine,
                "EngineVersion": engine_version,
                "DBInstanceClass": dbinstance_class,
                "DBInstanceStorage": dbinstance_storage,
                "DBInstanceNetType": dbinstance_net_type,
                "SecurityIPList": security_iplist,
                "PayType": pay_type,
                "DBInstanceDescription": dbinstance_description,
                "ZoneId": zone_id,
                "InstanceNetworkType": instance_network_type,
                "VPCId": vpcid,
                "VSwitchId": vswitch_id,
                "PrivateIpAddress": private_ip_address,
                "ConnectionMode": connection_mode,
                "SystemDBCharset": system_dbcharset,
                "Token": token
            }
        )

    def rds_aliyuncs_com_ModifySecurityIps_2014_08_15(
            self,
            dbinstance_id,
            security_ips='',
            dbinstance_iparray_name='',
            dbinstance_iparray_attribute=''
    ):
        """
        修改实例访问白名单
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        修改允许访问实例的IP名单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23714

        :param dbinstance_id: 实例名
        :param security_ips: 允许访问该实例下所有数据库的IP名单，以逗号隔开，不可重复，最多100个；支持格式：0.0.0.0/0，10.23.12.24（IP），或者10.23.12.24/24（CIDR模式，无类域间路由，/24表示了地址中前缀的长度，范围[1,32]）其中， 0.0.0.0/0，表示不限制
        :param dbinstance_iparray_name: groupName
        :param dbinstance_iparray_attribute: groupTag
        """
        return self._top_request(
            "rds.aliyuncs.com.ModifySecurityIps.2014-08-15",
            {
                "DBInstanceId": dbinstance_id,
                "SecurityIps": security_ips,
                "DBInstanceIPArrayName": dbinstance_iparray_name,
                "DBInstanceIPArrayAttribute": dbinstance_iparray_attribute
            },
            result_processor=lambda x: x["RequestId"]
        )

    def rds_aliyuncs_com_DescribeDBInstanceAttribute_2014_08_15(
            self,
            dbinstance_id
    ):
        """
        查看数据库实例详情
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        用户只能查看属于自己的实例列表，返回实例列表信息包括：实例状态、公网/私网、实例连接地址/端口，是否被锁，是否过期等，以供用户追加数据库、修改实例等操作。用户也可以查找指定名称、类型、状态的实例信息。如果查找请求参数错误，返回数据为空
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23724

        :param dbinstance_id: 实例名，可以一次输入多个，以英文半角“,”分隔
        """
        return self._top_request(
            "rds.aliyuncs.com.DescribeDBInstanceAttribute.2014-08-15",
            {
                "DBInstanceId": dbinstance_id
            }
        )

    def rds_aliyuncs_com_DescribeDBInstances_2014_08_15(
            self,
            region_id,
            dbinstance_status='',
            engine='',
            page_size='30',
            page_number='1',
            dbinstance_type='',
            dbinstance_id='',
            search_key='',
            instance_network_type='',
            connection_mode='',
            tag_1_key='',
            tag_2_key='',
            tag_3_key='',
            tag_4_key='',
            tag_5_key='',
            tag_1_value='',
            tag_2_value='',
            tag_3_value='',
            tag_4_value='',
            tag_5_value=''
    ):
        """
        查看数据库实例列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23725

        :param region_id: 实例的region
        :param dbinstance_status: 实例状态，取值参见附录：实例状态表。<br/>不填默认返回所有
        :param engine: 数据库类型，取值范围MySQL|SQLServer，<br/>不填，默认返回所有
        :param page_size: 每页记录数，取值：30|50|100<br/>默认值：30
        :param page_number: 页码，大于0，且不超过Integer的最大值<br/>默认值：1
        :param dbinstance_type: Primary:主实例<br/>Readonly：只读实例
        :param dbinstance_id: 逗号分隔，最多50
        :param search_key: 可基于实例ID或者实例备注模糊搜索
        :param instance_network_type: VPC：VPC实例<br/>Classic：Classic实例
        :param connection_mode: ConnectionMode
        :param tag_1_key: 标签key
        :param tag_2_key: Tag.2.key
        :param tag_3_key: Tag.3.key
        :param tag_4_key: Tag.4.key
        :param tag_5_key: Tag.5.key
        :param tag_1_value: Tag.1.value
        :param tag_2_value: Tag.2.value
        :param tag_3_value: Tag.3.value
        :param tag_4_value: Tag.4.value
        :param tag_5_value: Tag.5.value
        """
        return self._top_request(
            "rds.aliyuncs.com.DescribeDBInstances.2014-08-15",
            {
                "RegionId": region_id,
                "DBInstanceStatus": dbinstance_status,
                "Engine": engine,
                "PageSize": page_size,
                "PageNumber": page_number,
                "DBInstanceType": dbinstance_type,
                "DBInstanceId": dbinstance_id,
                "SearchKey": search_key,
                "InstanceNetworkType": instance_network_type,
                "ConnectionMode": connection_mode,
                "Tag.1.key": tag_1_key,
                "Tag.2.key": tag_2_key,
                "Tag.3.key": tag_3_key,
                "Tag.4.key": tag_4_key,
                "Tag.5.key": tag_5_key,
                "Tag.1.value": tag_1_value,
                "Tag.2.value": tag_2_value,
                "Tag.3.value": tag_3_value,
                "Tag.4.value": tag_4_value,
                "Tag.5.value": tag_5_value
            }
        )

    def odps_aliyuncs_com_DescribeOdpsService_2014_12_15(
            self
    ):
        """
        查询ODPS服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24073

        """
        return self._top_request(
            "odps.aliyuncs.com.DescribeOdpsService.2014-12-15"
        )

    def rds_aliyuncs_com_DescribeDBInstancesByPerformance_2014_08_15(
            self,
            dbinstance_id='',
            page_size='30',
            page_number='1',
            sort_key='CPUUsage',
            sort_method='ASC',
            tag_1_key='',
            tag_2_key='',
            tag_3_key='',
            tag_4_key='',
            tag_5_key='',
            tag_1_value='',
            tag_2_value='',
            tag_3_value='',
            tag_4_value='',
            tag_5_value=''
    ):
        """
        实例性能
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取实例性能值
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24377

        :param dbinstance_id: 实例名，可以一次输入多个，以英文半角“,”分隔
        :param page_size: 每页记录数，取值：30|50|100<br/>默认值：30
        :param page_number: 页码，大于0，且不超过Integer的最大值<br/>默认值：1
        :param sort_key: 排序key<br/>CPUUsage<br/>IOPSUsage<br/>DiskUsage<br/>SessionUsage
        :param sort_method: 排序方式<br/>ASC<br/>DESC
        :param tag_1_key: 标签key
        :param tag_2_key: Tag.2.key
        :param tag_3_key: Tag.3.key
        :param tag_4_key: Tag.4.key
        :param tag_5_key: Tag.5.key
        :param tag_1_value: Tag.1.value
        :param tag_2_value: Tag.2.value
        :param tag_3_value: Tag.3.value
        :param tag_4_value: Tag.4.value
        :param tag_5_value: Tag.5.value
        """
        return self._top_request(
            "rds.aliyuncs.com.DescribeDBInstancesByPerformance.2014-08-15",
            {
                "DBInstanceId": dbinstance_id,
                "PageSize": page_size,
                "PageNumber": page_number,
                "SortKey": sort_key,
                "SortMethod": sort_method,
                "Tag.1.key": tag_1_key,
                "Tag.2.key": tag_2_key,
                "Tag.3.key": tag_3_key,
                "Tag.4.key": tag_4_key,
                "Tag.5.key": tag_5_key,
                "Tag.1.value": tag_1_value,
                "Tag.2.value": tag_2_value,
                "Tag.3.value": tag_3_value,
                "Tag.4.value": tag_4_value,
                "Tag.5.value": tag_5_value
            }
        )

    def r_kvstore_aliyuncs_com_DescribeInstanceConfig_2015_01_01(
            self,
            instance_id
    ):
        """
        查询实例配置
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查看实例配置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24432

        :param instance_id: 实例ID
        """
        return self._top_request(
            "r-kvstore.aliyuncs.com.DescribeInstanceConfig.2015-01-01",
            {
                "InstanceId": instance_id
            }
        )

    def r_kvstore_aliyuncs_com_ModifyInstanceCapacity_2015_01_01(
            self,
            instance_id,
            capacity
    ):
        """
        变配实例容量
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24433

        :param instance_id: (全局唯一);16位字符串
        :param capacity: 实例容量设置 单位： MByte<br/>输入范围请见规格参数表
        """
        return self._top_request(
            "r-kvstore.aliyuncs.com.ModifyInstanceCapacity.2015-01-01",
            {
                "InstanceId": instance_id,
                "Capacity": capacity
            },
            result_processor=lambda x: x["RequestId"]
        )

    def r_kvstore_aliyuncs_com_DescribeMonitorValues_2015_01_01(
            self,
            instance_ids='',
            monitor_keys=''
    ):
        """
        获取实时监控值
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24437

        :param instance_ids: 实例ID， 若多个实例ID使用英文半角”,”分隔，置空时默认为所有实例ID。(全局唯一)16位字符串
        :param monitor_keys: 监控项名，若多个用英文半角“,”分隔，置空时返回所有监控项.<br/>支持多个监控项和多实例查询：<br/>1. 不传MonitorKey，即获取该实例的所有监控项<br/>2. 传一个MonitorKey，即获取某个监控项<br/>3. 传多个MonitorKey，即获取多个监控项
        """
        return self._top_request(
            "r-kvstore.aliyuncs.com.DescribeMonitorValues.2015-01-01",
            {
                "InstanceIds": instance_ids,
                "MonitorKeys": monitor_keys
            }
        )

    def r_kvstore_aliyuncs_com_DescribeRegions_2015_01_01(
            self
    ):
        """
        获取可用region
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24438

        """
        return self._top_request(
            "r-kvstore.aliyuncs.com.DescribeRegions.2015-01-01"
        )

    def r_kvstore_aliyuncs_com_DescribeMonitorItems_2015_01_01(
            self
    ):
        """
        查看监控列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24439

        """
        return self._top_request(
            "r-kvstore.aliyuncs.com.DescribeMonitorItems.2015-01-01"
        )

    def r_kvstore_aliyuncs_com_DescribeInstances_2015_01_01(
            self,
            instance_ids='',
            region_id='',
            page_number='1',
            page_size='10',
            instance_status=''
    ):
        """
        查询实例列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24440

        :param instance_ids: 指定实例ID时，需输入(全局唯一)16位字符串；<br/>若查询多个实例ID时，使用英文半角”,”分隔各ID；置空时默认为查询该用户名下所有实例；
        :param region_id: 可用区
        :param page_number: 实例状态列表的页码，起始值为1，默认值为1
        :param page_size: 分页查询时设置的每页行数，最大值50行，默认值为10
        :param instance_status: 实例状态<br/>Normal:正常<br/>Creating：创建中<br/>Changing：修改中<br/>Inactive: 被禁用
        """
        return self._top_request(
            "r-kvstore.aliyuncs.com.DescribeInstances.2015-01-01",
            {
                "InstanceIds": instance_ids,
                "RegionId": region_id,
                "PageNumber": page_number,
                "PageSize": page_size,
                "InstanceStatus": instance_status
            }
        )

    def r_kvstore_aliyuncs_com_DescribeHistoryMonitorValues_2015_01_01(
            self,
            instance_id,
            start_time,
            end_time,
            interval_for_history,
            monitor_keys=''
    ):
        """
        获取历史监控信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24441

        :param instance_id: 实例ID
        :param start_time: 历史监控开始时间点；<br/>ISO8601 表示法，并使用UTC时间。格式为： YYYY-MM-DDThh:mm:ssZ
        :param end_time: 历史监控结束时间点；<br/>ISO8601 表示法，并使用UTC时间。格式为： YYYY-MM-DDThh:mm:ssZ
        :param interval_for_history: 监控信息采样间隔
        :param monitor_keys: 监控项名，若多个用英文半角“,”分隔，置空时返回所有监控项.<br/>支持多个监控项和多实例查询：<br/>1. 不传MonitorKey，即获取该实例的所有监控项<br/>2. 传一个MonitorKey，即获取某个监控项<br/>3. 传多个MonitorKey，即获取多个监控项
        """
        return self._top_request(
            "r-kvstore.aliyuncs.com.DescribeHistoryMonitorValues.2015-01-01",
            {
                "InstanceId": instance_id,
                "StartTime": start_time,
                "EndTime": end_time,
                "IntervalForHistory": interval_for_history,
                "MonitorKeys": monitor_keys
            }
        )

    def r_kvstore_aliyuncs_com_DeleteInstance_2015_01_01(
            self,
            instance_id
    ):
        """
        删除实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24443

        :param instance_id: 实例ID
        """
        return self._top_request(
            "r-kvstore.aliyuncs.com.DeleteInstance.2015-01-01",
            {
                "InstanceId": instance_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def r_kvstore_aliyuncs_com_CreateInstance_2015_01_01(
            self,
            password,
            capacity,
            region_id,
            instance_name='',
            token='',
            zone_id='',
            config=''
    ):
        """
        创建实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24447

        :param password: 说明：实例密码<br/>规则：大写字母、小写字母、数字、下划线，至少包含3种或以上。<br/>长度8~32位
        :param capacity: 说明：实例容量设置<br/>单位：MByte<br/>输入范围请见redisa规格参数表
        :param region_id: 华东杭州：cn-hangzhou <br/>华北青岛：cn-qingdao
        :param instance_name: 实例昵称
        :param token: 用于保证幂等性
        :param zone_id: RegionId下级可用区编码
        :param config: 创建实例时的配置参数
        """
        return self._top_request(
            "r-kvstore.aliyuncs.com.CreateInstance.2015-01-01",
            {
                "Password": password,
                "Capacity": capacity,
                "RegionId": region_id,
                "InstanceName": instance_name,
                "Token": token,
                "ZoneId": zone_id,
                "Config": config
            }
        )

    def push_aliyuncs_com_pushMsg_2015_03_18(
            self,
            app_id,
            body,
            device_type,
            send_type,
            title,
            account='',
            anti_harass_duration='',
            anti_harass_start_time='',
            batch_number='',
            device_id='',
            push_time='',
            tag='',
            timeout=''
    ):
        """
        消息推送
        消息推送  ,支持指定用户/账号/广播等模式
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24694

        :param app_id: 应用标识
        :param body: 消息体,UTF-8编码
        :param device_type: 设备类型,取值范围为:0~3云推送支持多种设备, 各种设备类型编号如下:IOS设备:deviceType&amp;1=1; Andriod设备:deviceType&amp;2=2;如果存在此字段,则 向指定的设备类型推送消息。默认为全部(3);
        :param send_type: 推送类型,取值范围:1~4; 1:所有人,无需指定tag、 deviceType等2:一群人,必须指定tag3:指定用户,根 据用户账号列表文件发送消息4:指定设备,根据设备编 码列表文件发送消息默认值为1
        :param title: 标题
        :param account: 用户账号列表,以换行区分,仅sendType为3时有效
        :param anti_harass_duration: 防打扰时长,取值范围为1~23
        :param anti_harass_start_time: 防打扰开始时间点,取值范围为0~23
        :param batch_number: 批次编号,用于统计活动推送效果
        :param device_id: 设备编号列表,以换行区分,仅sendType为4时有效
        :param push_time: 推送时间,若空表示立即推送,推送时间不能早于当前 时间
        :param tag: 标签名称,仅支持1个标签,仅sendType为2时有效
        :param timeout: 离线消息保存时长,取值范围为1~72,若不填,则表 示不保存离线消息
        """
        return self._top_request(
            "push.aliyuncs.com.pushMsg.2015-03-18",
            {
                "AppId": app_id,
                "Body": body,
                "DeviceType": device_type,
                "SendType": send_type,
                "Title": title,
                "Account": account,
                "AntiHarassDuration": anti_harass_duration,
                "AntiHarassStartTime": anti_harass_start_time,
                "BatchNumber": batch_number,
                "DeviceId": device_id,
                "PushTime": push_time,
                "Tag": tag,
                "Timeout": timeout
            }
        )

    def push_aliyuncs_com_pushNotification_2015_03_18(
            self,
            app_id,
            device_type,
            send_type,
            summary,
            title,
            account='',
            android_extra_map='',
            android_music='',
            android_notify_type='',
            android_open_activity='',
            android_open_type='',
            android_open_url='',
            anti_harass_duration='',
            anti_harass_start_time='',
            batch_number='',
            device_id='',
            ios_extra_map='',
            ios_footer='',
            ios_music='',
            push_time='',
            tag='',
            timeout=''
    ):
        """
        推送通知
        pushNotification
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24766

        :param app_id: 应用标识
        :param device_type: 设备类型,取值范围为:0~3云推送支持多种设备,各 种设备类型编号如下:IOS设备:deviceType&amp;1=1; Andriod设备:deviceType&amp;2=2;如果存在此字段,则向 指定的设备类型推送消息。默认为全部(3);
        :param send_type: 推送类型,取值范围:1~4; 1:所有人,无需指定tag、 deviceType等2:一群人,必须指定tag3:指定用户,根据 用户账号列表文件发送消息4:指定设备,根据设备编码列 表文件发送消息默认值为1
        :param summary: 摘要
        :param title: 标题
        :param account: 用户账号列表,以换行区分,仅sendType为3时有效
        :param android_extra_map: 自定义的kv结构,开发者扩展用
        :param android_music: 通知声音
        :param android_notify_type: 通知类型 1:震动 2:响铃
        :param android_open_activity: 打开app指定位置
        :param android_open_type: 点击通知后动作
        :param android_open_url: 打开应用,网页
        :param anti_harass_duration: 防打扰时长,取值范围为1~23
        :param anti_harass_start_time: 防打扰开始时间点,取值范围为0~23
        :param batch_number: 批次编号,用于活动效果统计
        :param device_id: 设备编号列表,以换行区分,仅sendType为4时有效
        :param ios_extra_map: 自定义的kv结构,开发者扩展用
        :param ios_footer: 角标
        :param ios_music: 默认音乐
        :param push_time: 推送时间,若空表示立即推送,推送时间不能早于当前时间
        :param tag: 标签名称,仅支持1个标签,仅sendType为2时有效
        :param timeout: 离线消息保存时长,取值范围为1~72,若不填,则表示不保存离线消息
        """
        return self._top_request(
            "push.aliyuncs.com.pushNotification.2015-03-18",
            {
                "AppId": app_id,
                "DeviceType": device_type,
                "SendType": send_type,
                "Summary": summary,
                "Title": title,
                "Account": account,
                "AndroidExtraMap": android_extra_map,
                "AndroidMusic": android_music,
                "AndroidNotifyType": android_notify_type,
                "AndroidOpenActivity": android_open_activity,
                "AndroidOpenType": android_open_type,
                "AndroidOpenUrl": android_open_url,
                "AntiHarassDuration": anti_harass_duration,
                "AntiHarassStartTime": anti_harass_start_time,
                "BatchNumber": batch_number,
                "DeviceId": device_id,
                "IosExtraMap": ios_extra_map,
                "IosFooter": ios_footer,
                "IosMusic": ios_music,
                "PushTime": push_time,
                "Tag": tag,
                "Timeout": timeout
            }
        )

    def rds_aliyuncs_com_LockDBInstance_2014_08_15(
            self,
            dbinstance_id,
            lock_reason,
            resource_owner_account='',
            owner_id='',
            resource_owner_id=''
    ):
        """
        锁定实例
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24906

        :param dbinstance_id: 实例名称
        :param lock_reason: 锁定原因
        :param resource_owner_account: resourceOwnerAccount
        :param owner_id: ownerId
        :param resource_owner_id: resourceOwnerId
        """
        return self._top_request(
            "rds.aliyuncs.com.LockDBInstance.2014-08-15",
            {
                "DBInstanceId": dbinstance_id,
                "LockReason": lock_reason,
                "resourceOwnerAccount": resource_owner_account,
                "ownerId": owner_id,
                "resourceOwnerId": resource_owner_id
            },
            result_processor=lambda x: x["RequestId"]
        )

    def push_aliyuncs_com_push_20150518(
            self,
            app_id,
            body,
            device_type,
            remind,
            send_type,
            store_offline,
            title,
            account='',
            android_activity='',
            android_ext_parameters='',
            android_music='',
            android_open_type='',
            android_open_url='',
            anti_harass_duration='',
            anti_harass_start_time='',
            batch_number='',
            device_id='',
            iosbadge='',
            iosext_parameters='',
            iosmusic='',
            push_time='',
            summery='',
            timeout=''
    ):
        """
        云推送指令API
        阿里云推送新增API，允许一条推送指令同时发布到多个终端上。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24994

        :param app_id: 应用标识
        :param body: 推送内容
        :param device_type: 设备类型,取值范围为:0~3云推送支持多种设备,各 种设备类型编号如下: 0:IOS设备; 1:Andriod设备 3:全部. 默认为3.
        :param remind: 当APP不在线时候，是否通过通知提醒
        :param send_type: 推送类型,取值范围:1~4; 1:所有人,无需指定tag、 deviceType等2:一群人,必须指定tag3:指定用户,根据 用户账号列表文件发送消息4:指定设备,根据设备编码列 表文件发送消息默认值为1
        :param store_offline: 离线消息是否保存,若保存, 在推送时候，用户即使不在线，下一次上线则会收到
        :param title: 推送的标题内容.
        :param account: 用户账号列表,以换行区分,仅sendType为3时有效
        :param android_activity: Android对应的activity,仅仅当androidOpenType=2有效
        :param android_ext_parameters: 自定义的kv结构,开发者扩展用 针对android
        :param android_music: android通知声音
        :param android_open_type: 点击通知后动作,1:打开应用 2: 打开应用Activity 3:打开 url
        :param android_open_url: Android收到推送后打开对应的url,仅仅当androidOpenType=3有效
        :param anti_harass_duration: 防打扰时长,取值范围为1~23
        :param anti_harass_start_time: 防打扰开始时间点,取值范围为0~23
        :param batch_number: 批次编号,用于活动效果统计
        :param device_id: 推送接收设备，多个以逗号分隔
        :param iosbadge: iOS应用图标右上角角标
        :param iosext_parameters: 自定义的kv结构,开发者扩展用 针对iOS设备
        :param iosmusic: iOS通知声音
        :param push_time: 推送时间,若空表示立即推送,推送时间不能早于当前时间
        :param summery: 通知的摘要
        :param timeout: 离线消息保存时长,取值范围为1~72,若不填,则表示不保存离线消息
        """
        return self._top_request(
            "push.aliyuncs.com.push.20150518",
            {
                "AppId": app_id,
                "Body": body,
                "DeviceType": device_type,
                "Remind": remind,
                "SendType": send_type,
                "StoreOffline": store_offline,
                "Title": title,
                "Account": account,
                "AndroidActivity": android_activity,
                "AndroidExtParameters": android_ext_parameters,
                "AndroidMusic": android_music,
                "AndroidOpenType": android_open_type,
                "AndroidOpenUrl": android_open_url,
                "AntiHarassDuration": anti_harass_duration,
                "AntiHarassStartTime": anti_harass_start_time,
                "BatchNumber": batch_number,
                "DeviceId": device_id,
                "IOSBadge": iosbadge,
                "IOSExtParameters": iosext_parameters,
                "IOSMusic": iosmusic,
                "PushTime": push_time,
                "Summery": summery,
                "Timeout": timeout
            }
        )


class TbHuoChePiao(DingTalkBaseAPI):
    """
    火车票API
    """

    def taobao_train_agent_order_get(
            self,
            main_order_id,
            agent_id
    ):
        """
        代理商获取订单信息回调API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22526

        :param main_order_id: 淘宝的主订单号
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.train.agent.order.get",
            {
                "main_order_id": main_order_id,
                "agent_id": agent_id
            }
        )

    def taobao_train_agent_returnticket_confirm(
            self,
            main_biz_order_id,
            agree_return,
            buyer_id,
            sub_biz_order_id,
            refund_fee,
            agent_id,
            refuse_return_reason=''
    ):
        """
        退票通知
        火车票代理商接口——退票通知回调
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22528

        :param main_biz_order_id: 淘宝主订单id
        :param agree_return: 是否同意退票
        :param buyer_id: 用户id
        :param sub_biz_order_id: 淘宝子订单id
        :param refund_fee: 退票金额，单位分
        :param agent_id: 代理商id
        :param refuse_return_reason: 买家已取票
        """
        return self._top_request(
            "taobao.train.agent.returnticket.confirm",
            {
                "main_biz_order_id": main_biz_order_id,
                "agree_return": agree_return,
                "buyer_id": buyer_id,
                "sub_biz_order_id": sub_biz_order_id,
                "refund_fee": refund_fee,
                "agent_id": agent_id,
                "refuse_return_reason": refuse_return_reason
            }
        )

    def taobao_train_agent_bookticket_confirm(
            self,
            main_order_id,
            status,
            agent_id,
            tickets,
            ticket_num,
            dep_date,
            ticket_12306_id,
            fail_msg,
            sub_order_id='',
            can_change='true',
            alipay_trade_no='',
            order_type='',
            alipay_account='',
            arrive_date='',
            from_station_name='',
            to_station_name='',
            boarding_gates=''
    ):
        """
        火车票代理商接口——确认出票是否成功
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22529

        :param main_order_id: 主订单id
        :param status: 是否成功
        :param agent_id: 代理商id
        :param tickets: 火车票子订单id;单价;坐席;座次号;车次;乘车人姓名;证件类型;证件号码;保单号;保单价格 (座次号格式:坐席_车厢号_座位号，eg1:硬卧_09_03号下铺 eg2:硬座_02_03c ,注意:票价、保险价格必须到分)
        :param ticket_num: 订单中包含的票数量
        :param dep_date: 出发时间
        :param ticket_12306_id: 12306成功出票id
        :param fail_msg: 记录失败原因，传数字，1:票已售完,2:票价变动,3:乘车人已购相同车票,4:出票超时,5:乘车人证件未通过铁路局核验,6:发车时间变动,7:车次信息变更,8:12306故障,9:学生票信息有误,10:身份冒用,11:被限制高消费,12:坐票已售完,13:行程冲突,14:预售期变更,15:用户12306账号登录失败,16:12306账号存在未支付订单,17:用户常旅客已满,18:乘客信息有误,19:非法席别,20:车次停运,21:session登陆失败,22:账户已在其他地方登陆,23:帐号手机未核验,24:取消订单次数达到上限,25:帐号持有人身份未核验,26:邮寄地址无法保证及时送达,27:无法满足用户定制需求,28:您主动要求取消,0:未知原因
        :param sub_order_id: 错误的子订单号123434,123432
        :param can_change: 是否支持在线退改签
        :param alipay_trade_no: 支付宝交易流水号
        :param order_type: 订单类型 0 代购 1直购 3抢票
        :param alipay_account: 支付宝账号
        :param arrive_date: 到达时间
        :param from_station_name: 出发站
        :param to_station_name: 到达站
        :param boarding_gates: 检票口
        """
        return self._top_request(
            "taobao.train.agent.bookticket.confirm",
            {
                "main_order_id": main_order_id,
                "status": status,
                "agent_id": agent_id,
                "tickets": tickets,
                "ticket_num": ticket_num,
                "dep_date": dep_date,
                "ticket_12306_id": ticket_12306_id,
                "fail_msg": fail_msg,
                "sub_order_id": sub_order_id,
                "can_change": can_change,
                "alipay_trade_no": alipay_trade_no,
                "order_type": order_type,
                "alipay_account": alipay_account,
                "arrive_date": arrive_date,
                "from_station_name": from_station_name,
                "to_station_name": to_station_name,
                "boarding_gates": boarding_gates
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_train_agent_bookorders_get(
            self,
            agent_id
    ):
        """
        代理商获取待出票订单列表
        代理商获取待出票订单列表，只返回订单号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24270

        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.train.agent.bookorders.get",
            {
                "agent_id": agent_id
            }
        )

    def taobao_train_agent_returnorders_get(
            self,
            agent_id,
            offline=''
    ):
        """
        获取待退票的订单
        代理商用来获取待退票的订单列表及数量，防止代理商掉单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24325

        :param agent_id: 卖家ID
        :param offline: 0 线上退票 1线下退票
        """
        return self._top_request(
            "taobao.train.agent.returnorders.get",
            {
                "agent_id": agent_id,
                "offline": offline
            }
        )

    def taobao_train_agent_change_refuse(
            self,
            param
    ):
        """
        代理商拒绝改签
        代理商拒绝火车票改签服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24497

        :param param: 代理商拒绝改签参数
        """
        return self._top_request(
            "taobao.train.agent.change.refuse",
            {
                "param": param
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_train_agent_change_get(
            self,
            agent_id,
            apply_id
    ):
        """
        获取改签单详情
        卖家获取待处理的改签单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24498

        :param agent_id: 代理商id
        :param apply_id: 申请单id
        """
        return self._top_request(
            "taobao.train.agent.change.get",
            {
                "agent_id": agent_id,
                "apply_id": apply_id
            }
        )

    def taobao_train_agent_change_agree(
            self,
            param
    ):
        """
        代理商同意改签
        代理商同意改签接口服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24499

        :param param: 代理商同意改签参数
        """
        return self._top_request(
            "taobao.train.agent.change.agree",
            {
                "param": param
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_train_agent_changeorders_get(
            self,
            agent_id
    ):
        """
        获取待改签订单
        代理商用来获取待改签的订单列表及数量，防止代理商掉单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24500

        :param agent_id: 卖家id
        """
        return self._top_request(
            "taobao.train.agent.changeorders.get",
            {
                "agent_id": agent_id
            }
        )

    def taobao_train_agent_handleticket_confirm(
            self,
            extend_params='',
            main_order_id='0',
            seller_id='0'
    ):
        """
        代理商出票中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24891

        :param extend_params: 扩展参数
        :param main_order_id: 主站id
        :param seller_id: 代理商id
        """
        return self._top_request(
            "taobao.train.agent.handleticket.confirm",
            {
                "extend_params": extend_params,
                "main_order_id": main_order_id,
                "seller_id": seller_id
            }
        )

    def taobao_train_agentseatprice_set(
            self,
            agent_seat_price_rq=None
    ):
        """
        代理人卧铺信息回传接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        该API提供给代理商调用，代理商把卧铺的中铺，上铺的价格传过来
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24929

        :param agent_seat_price_rq: 请求入参
        """
        return self._top_request(
            "taobao.train.agentseatprice.set",
            {
                "agent_seat_price_rq": agent_seat_price_rq
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_train_agent_autorefund_refundfee(
            self,
            agree_refund,
            apply_id,
            main_biz_order_id,
            refund_fee,
            refund_type,
            seller_id,
            trade_no,
            ttp_id,
            user_id,
            refuse_reason='',
            sub_order_id='0'
    ):
        """
        代理商自动退款
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        代理商自动退款调用实现退款
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25833

        :param agree_refund: 是否同意退款
        :param apply_id: 退款号
        :param main_biz_order_id: 主订单id
        :param refund_fee: 退款金额
        :param refund_type: 退款类型1.改签 2.退票
        :param seller_id: 代理商Id
        :param trade_no: 支付宝交易号
        :param ttp_id: ttpId
        :param user_id: 买家Id
        :param refuse_reason: 拒绝退款原因：1.已经退款 2.无退款  3.金额不符 4.退款处理中
        :param sub_order_id: 子订单号（票号）
        """
        return self._top_request(
            "taobao.train.agent.autorefund.refundfee",
            {
                "agree_refund": agree_refund,
                "apply_id": apply_id,
                "main_biz_order_id": main_biz_order_id,
                "refund_fee": refund_fee,
                "refund_type": refund_type,
                "seller_id": seller_id,
                "trade_no": trade_no,
                "ttp_id": ttp_id,
                "user_id": user_id,
                "refuse_reason": refuse_reason,
                "sub_order_id": sub_order_id
            },
            result_processor=lambda x: x["resul"]
        )

    def taobao_train_agent_mobile_sendsms(
            self,
            agent_id='',
            mobile_number='',
            msg_type=''
    ):
        """
        阿里小号发送注册验证短信给12306
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25890

        :param agent_id: 代理商id
        :param mobile_number: 使用注册的小号的号码
        :param msg_type: 消息类型(验证短信的内容是固定的,不需要代理商再传递过来)1:新用户注册12306,发送999验证码
        """
        return self._top_request(
            "taobao.train.agent.mobile.sendsms",
            {
                "agent_id": agent_id,
                "mobile_number": mobile_number,
                "msg_type": msg_type
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_train_agent_session_get(
            self,
            main_biz_order_id,
            agent_id
    ):
        """
        代理商获取session
        代理通过订单获取登陆的session
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25891

        :param main_biz_order_id: 订单号
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.train.agent.session.get",
            {
                "main_biz_order_id": main_biz_order_id,
                "agent_id": agent_id
            },
            result_processor=lambda x: x["session_info"]
        )

    def taobao_train_agent_express_set(
            self,
            main_order_id,
            express_id,
            addr,
            mobile,
            agent_id,
            express_name='SF'
    ):
        """
        线下票回填物流信息
        线下票回填物流信息服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26207

        :param main_order_id: 订单号
        :param express_id: 物流单号
        :param addr: 发货地址
        :param mobile: 手机号
        :param agent_id: 代理商id
        :param express_name: 物流公司:SF,EMS
        """
        return self._top_request(
            "taobao.train.agent.express.set",
            {
                "main_order_id": main_order_id,
                "express_id": express_id,
                "addr": addr,
                "mobile": mobile,
                "agent_id": agent_id,
                "express_name": express_name
            }
        )

    def taobao_train_agent_bookticket_confirm_vtwo(
            self,
            main_order_id,
            status,
            agent_id,
            tickets,
            ticket_num,
            dep_date,
            ticket_12306_id,
            fail_msg,
            sub_order_id='',
            can_change='true',
            alipay_trade_no='',
            order_type='',
            alipay_account='',
            arrive_date='',
            from_station_name='',
            to_station_name='',
            boarding_gates='',
            expect_delivery_time='',
            extend_params=''
    ):
        """
        火车票代理商接口——确认出票是否成功v2--增加鉴权校验
        火车票代理商接口——确认出票是否成功
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29796

        :param main_order_id: 主订单id
        :param status: 是否成功
        :param agent_id: 代理商id
        :param tickets: 火车票id;单价;坐席;座次号;车次;乘车人姓名;证件类型;证件号码;保单号;保单价格特别注意:票价、保险价格必须到分,例如10元,输入为1000.
        :param ticket_num: 订单中包含的票数量
        :param dep_date: 出发时间
        :param ticket_12306_id: 12306成功出票id
        :param fail_msg: 记录失败原因，传数字，1、票已售完，出票失败全额退款，2、票价变动，出票失败全额退款，3、乘车人已购买相同车票，出票失败全额退款， 4、出票超时，出票失败全额退款，5、乘车人证件未通过铁路局审核，需到售票窗口办理， 6、发车时间变动，出票失败全额退款，7、车次信息错误，出票失败全额退款，8、12306故障,出票失败全额退款， 0、出票失败全额退款
        :param sub_order_id: 错误的子订单号123434,123432
        :param can_change: 是否支持在线退改签
        :param alipay_trade_no: 支付宝交易流水号
        :param order_type: 订单类型0 代购 1直购 3抢票
        :param alipay_account: 支付宝账号
        :param arrive_date: 到达时间
        :param from_station_name: 出发站
        :param to_station_name: 到达站
        :param boarding_gates: 检票口
        :param expect_delivery_time: 送票上门预计派送时间
        :param extend_params: 扩展字段
        """
        return self._top_request(
            "taobao.train.agent.bookticket.confirm.vtwo",
            {
                "main_order_id": main_order_id,
                "status": status,
                "agent_id": agent_id,
                "tickets": tickets,
                "ticket_num": ticket_num,
                "dep_date": dep_date,
                "ticket_12306_id": ticket_12306_id,
                "fail_msg": fail_msg,
                "sub_order_id": sub_order_id,
                "can_change": can_change,
                "alipay_trade_no": alipay_trade_no,
                "order_type": order_type,
                "alipay_account": alipay_account,
                "arrive_date": arrive_date,
                "from_station_name": from_station_name,
                "to_station_name": to_station_name,
                "boarding_gates": boarding_gates,
                "expect_delivery_time": expect_delivery_time,
                "extend_params": extend_params
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_train_agent_change_agree_vtwo(
            self,
            param
    ):
        """
        代理商同意改签v2--增加鉴权校验
        代理商同意改签接口服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29797

        :param param: 代理商同意改签参数
        """
        return self._top_request(
            "taobao.train.agent.change.agree.vtwo",
            {
                "param": param
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_train_agent_express_set_vtwo(
            self,
            main_order_id,
            addr,
            mobile,
            agent_id,
            express_id='',
            express_name='SF'
    ):
        """
        线下票回填物流信息v2--增加鉴权校验
        线下票回填物流信息服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29804

        :param main_order_id: 订单号
        :param addr: 发货地址
        :param mobile: 手机号
        :param agent_id: 代理商id
        :param express_id: 物流单号
        :param express_name: 物流公司:SF,EMS
        """
        return self._top_request(
            "taobao.train.agent.express.set.vtwo",
            {
                "main_order_id": main_order_id,
                "addr": addr,
                "mobile": mobile,
                "agent_id": agent_id,
                "express_id": express_id,
                "express_name": express_name
            }
        )

    def taobao_train_agent_autorefund_refundfee_vtwo(
            self,
            agree_refund,
            apply_id,
            main_biz_order_id,
            refund_fee,
            refund_type,
            seller_id,
            trade_no,
            ttp_id,
            user_id,
            refuse_reason='',
            sub_order_id='0'
    ):
        """
        代理商自动退款v2--增加鉴权校验
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        代理商自动退款调用实现退款
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29811

        :param agree_refund: 是否同意退款
        :param apply_id: 退款号
        :param main_biz_order_id: 主订单id
        :param refund_fee: 退款金额
        :param refund_type: 退款类型1.改签 2.退票
        :param seller_id: 代理商Id
        :param trade_no: 支付宝交易号
        :param ttp_id: ttpId
        :param user_id: 买家Id
        :param refuse_reason: 拒绝退款原因：1.已经退款 2.无退款  3.金额不符 4.退款处理中
        :param sub_order_id: 子订单号（票号）
        """
        return self._top_request(
            "taobao.train.agent.autorefund.refundfee.vtwo",
            {
                "agree_refund": agree_refund,
                "apply_id": apply_id,
                "main_biz_order_id": main_biz_order_id,
                "refund_fee": refund_fee,
                "refund_type": refund_type,
                "seller_id": seller_id,
                "trade_no": trade_no,
                "ttp_id": ttp_id,
                "user_id": user_id,
                "refuse_reason": refuse_reason,
                "sub_order_id": sub_order_id
            },
            result_processor=lambda x: x["resul"]
        )

    def taobao_train_agent_bookorders_get_vtwo(
            self,
            agent_id
    ):
        """
        代理商获取待出票订单列表v2--增加鉴权校验
        代理商获取待出票订单列表，只返回订单号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29812

        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.train.agent.bookorders.get.vtwo",
            {
                "agent_id": agent_id
            }
        )

    def taobao_train_agent_changeorders_get_vtwo(
            self,
            agent_id
    ):
        """
        获取待改签订单v2--增加鉴权校验
        代理商用来获取待改签的订单列表及数量，防止代理商掉单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29813

        :param agent_id: 卖家id
        """
        return self._top_request(
            "taobao.train.agent.changeorders.get.vtwo",
            {
                "agent_id": agent_id
            }
        )

    def taobao_train_agent_change_get_vtwo(
            self,
            agent_id,
            apply_id
    ):
        """
        获取改签单详情v2--增加鉴权校验
        卖家获取待处理的改签单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29814

        :param agent_id: 代理商id
        :param apply_id: 申请单id
        """
        return self._top_request(
            "taobao.train.agent.change.get.vtwo",
            {
                "agent_id": agent_id,
                "apply_id": apply_id
            }
        )

    def taobao_train_agent_returnorders_get_vtwo(
            self,
            agent_id,
            offline=''
    ):
        """
        获取待退票的订单v2--增加鉴权校验
        代理商用来获取待退票的订单列表及数量，防止代理商掉单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29815

        :param agent_id: 卖家ID
        :param offline: 0 线上退票 1线下退票
        """
        return self._top_request(
            "taobao.train.agent.returnorders.get.vtwo",
            {
                "agent_id": agent_id,
                "offline": offline
            }
        )

    def taobao_train_agent_change_refuse_vtwo(
            self,
            param
    ):
        """
        代理商拒绝改签v2--增加鉴权校验
        代理商拒绝火车票改签服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29816

        :param param: 代理商拒绝改签参数
        """
        return self._top_request(
            "taobao.train.agent.change.refuse.vtwo",
            {
                "param": param
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_train_agent_unhandleticket_confirm_vtwo(
            self,
            buyer_id,
            main_order_id,
            op_type
    ):
        """
        代理商解锁抢票单--增加鉴权校验
        代理商抢票时可自由控制锁抢票订单和解锁抢票订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29817

        :param buyer_id: 用户id
        :param main_order_id: 主站订单id
        :param op_type: 1表示抢票单解锁操作
        """
        return self._top_request(
            "taobao.train.agent.unhandleticket.confirm.vtwo",
            {
                "buyer_id": buyer_id,
                "main_order_id": main_order_id,
                "op_type": op_type
            }
        )

    def taobao_train_agent_session_get_vtwo(
            self,
            main_biz_order_id,
            agent_id
    ):
        """
        代理商获取sessionv2--增加鉴权校验
        代理通过订单获取登陆的session
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29818

        :param main_biz_order_id: 订单号
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.train.agent.session.get.vtwo",
            {
                "main_biz_order_id": main_biz_order_id,
                "agent_id": agent_id
            },
            result_processor=lambda x: x["session_info"]
        )

    def taobao_train_agent_handleticket_confirm_vtwo(
            self,
            extend_params='',
            main_order_id='0',
            seller_id='0'
    ):
        """
        代理商出票中v2--增加鉴权校验
        代理商出票中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29819

        :param extend_params: 扩展参数
        :param main_order_id: 主站id
        :param seller_id: 代理商id
        """
        return self._top_request(
            "taobao.train.agent.handleticket.confirm.vtwo",
            {
                "extend_params": extend_params,
                "main_order_id": main_order_id,
                "seller_id": seller_id
            }
        )

    def taobao_train_agent_order_get_vtwo(
            self,
            main_order_id,
            agent_id
    ):
        """
        代理商获取订单信息回调APIv2--增加鉴权校验
        代理商获取订单信息回调API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29849

        :param main_order_id: 淘宝的主订单号
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.train.agent.order.get.vtwo",
            {
                "main_order_id": main_order_id,
                "agent_id": agent_id
            }
        )

    def taobao_train_agent_returnticket_confirm_vtwo(
            self,
            buyer_id,
            agree_return,
            refund_fee,
            main_biz_order_id,
            agent_id,
            sub_biz_order_id,
            refuse_return_reason=''
    ):
        """
        退票通知
        火车票代理商接口——退票通知回调
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30110

        :param buyer_id: 用户id
        :param agree_return: 是否同意退票
        :param refund_fee: 退票金额，单位分
        :param main_biz_order_id: 淘宝主订单id
        :param agent_id: 代理商id
        :param sub_biz_order_id: 淘宝子订单id
        :param refuse_return_reason: 拒绝退票原因
        """
        return self._top_request(
            "taobao.train.agent.returnticket.confirm.vtwo",
            {
                "buyer_id": buyer_id,
                "agree_return": agree_return,
                "refund_fee": refund_fee,
                "main_biz_order_id": main_biz_order_id,
                "agent_id": agent_id,
                "sub_biz_order_id": sub_biz_order_id,
                "refuse_return_reason": refuse_return_reason
            }
        )

    def taobao_train_agent_tostation_confirm(
            self,
            main_order_id,
            agent_id
    ):
        """
        线下票确认送票至车站服务
        送票至车站的订单，代理商确认配送到站
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38148

        :param main_order_id: 淘宝的主订单号
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.train.agent.tostation.confirm",
            {
                "main_order_id": main_order_id,
                "agent_id": agent_id
            }
        )

    def taobao_train_agent_tostation_receive(
            self,
            main_order_id,
            agent_id
    ):
        """
        线下票送票至车站代理商确认用户已取票服务
        送票至车站的订单，代理商确认用户已取票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38150

        :param main_order_id: 淘宝的主订单号
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.train.agent.tostation.receive",
            {
                "main_order_id": main_order_id,
                "agent_id": agent_id
            }
        )

    def taobao_train_agent_holdseat_confirm(
            self,
            hold_seat_param
    ):
        """
        火车票代理商接口——确认占座是否成功
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40789

        :param hold_seat_param: 占座入参
        """
        return self._top_request(
            "taobao.train.agent.holdseat.confirm",
            {
                "hold_seat_param": hold_seat_param
            }
        )


class TbTAE(DingTalkBaseAPI):
    """
    TAE API
    """

    def taobao_tae_item_detail_get(
            self,
            fields,
            buyer_ip='',
            open_iid=''
    ):
        """
        商品详情数据接口
        获取渲染详情的相关数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23559

        :param fields: 区块信息，field 支持 itemInfo,priceInfo,skuInfo,stockInfo,rateInfo,descInfo,sellerInfo,mobileDescInfo,deliveryInfo,storeInfo,itemBuyInfo,couponInfo
        :param buyer_ip: 用户所在位置ip
        :param open_iid: 商品open_iid
        """
        return self._top_request(
            "taobao.tae.item.detail.get",
            {
                "fields": fields,
                "buyer_ip": buyer_ip,
                "open_iid": open_iid
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_tae_items_list(
            self,
            fields,
            num_iids='',
            open_iids=''
    ):
        """
        商品列表服务
        根据传入的字段及商品ID获取商品列表信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23731

        :param fields: 返回值中需要的字段. 可选值 title,nick,pic_url,location,cid,price,post_fee,promoted_service,ju,shop_name字段间用 (,) 逗号分隔
        :param num_iids: 商品ID，英文逗号(,)分隔，最多50个。优先级低于open_iid，open_iids存在的话，则忽略本参数
        :param open_iids: 商品混淆ID，英文逗号(,)分隔，最多50个。优先级高于open_iid，本参数存在的话，则忽略num_iids
        """
        return self._top_request(
            "taobao.tae.items.list",
            {
                "fields": fields,
                "num_iids": num_iids,
                "open_iids": open_iids
            },
            result_processor=lambda x: x["items"]
        )

    def taobao_tae_delivery_item_add(
            self,
            param_shop_guide_item
    ):
        """
        导购商品类信息分发
        新增分发导购类商品记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24004

        :param param_shop_guide_item: 导购商品类
        """
        return self._top_request(
            "taobao.tae.delivery.item.add",
            {
                "param_shop_guide_item": param_shop_guide_item
            },
            result_processor=lambda x: x["id"]
        )

    def taobao_tae_delivery_item_update(
            self,
            param_shop_guide_item
    ):
        """
        导购商品类信息更新
        更新导购商品类信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24005

        :param param_shop_guide_item: 导购商品类
        """
        return self._top_request(
            "taobao.tae.delivery.item.update",
            {
                "param_shop_guide_item": param_shop_guide_item
            }
        )

    def taobao_tae_delivery_item_delete(
            self,
            out_id
    ):
        """
        导购商品类信息无效
        逻辑删除导购商品类信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24054

        :param out_id: 外部ISV信息主键
        """
        return self._top_request(
            "taobao.tae.delivery.item.delete",
            {
                "out_id": out_id
            }
        )

    def taobao_tae_exist_shop_coupon_get(
            self,
            seller_nick
    ):
        """
        判断是否存在店铺优惠券
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24230

        :param seller_nick: 卖家昵称
        """
        return self._top_request(
            "taobao.tae.exist.shop.coupon.get",
            {
                "seller_nick": seller_nick
            },
            result_processor=lambda x: x["is_exist"]
        )

    def taobao_tae_delivery_get(
            self,
            out_ids
    ):
        """
        批量获取分发记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24238

        :param out_ids: 外部记录主键
        """
        return self._top_request(
            "taobao.tae.delivery.get",
            {
                "out_ids": out_ids
            },
            result_processor=lambda x: x["deliveries"]
        )


class TbTanx(DingTalkBaseAPI):
    """
    Tanx API
    """

    def taobao_tanx_creative_get(
            self,
            member_id,
            token,
            sign_time,
            creative_id
    ):
        """
        获取单个审核创意状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22556

        :param member_id: DSP的memberId
        :param token: dsp用户身份认证的TOKEN
        :param sign_time: 当前时间戳，1970-01-01后的秒数
        :param creative_id: 创意ID
        """
        return self._top_request(
            "taobao.tanx.creative.get",
            {
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "creative_id": creative_id
            }
        )

    def taobao_tanx_creatives_get(
            self,
            member_id,
            token,
            sign_time,
            status,
            page,
            type='0'
    ):
        """
        批量获取DSP用户的创意审核结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22557

        :param member_id: DSP的memberId
        :param token: dsp用户身份认证的TOKEN
        :param sign_time: 当前时间戳，1970-01-01后的秒数
        :param status: 创意的状态（全部ALL,通过PASS,拒绝REFUSE,未审核WAITING）
        :param page: 分页的页码(第一页为1)
        :param type: 所选创意的类型。1-->普通类型, 2-->视频贴片, 0 -->优先查询普通类型,无结果则查询视频贴片类型
        """
        return self._top_request(
            "taobao.tanx.creatives.get",
            {
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "status": status,
                "page": page,
                "type": type
            }
        )

    def taobao_tanx_creative_add(
            self,
            member_id,
            token,
            sign_time,
            creative_id,
            adboard_type,
            adboard_data,
            destination_url,
            adboard_size,
            sensitive_type='',
            creative_package_format=''
    ):
        """
        创意预审新增接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22815

        :param member_id: DSP的memberId
        :param token: dsp用户身份认证的TOKEN
        :param sign_time: 当前时间戳，1970-01-01后的秒数
        :param creative_id: 创意id
        :param adboard_type: 广告类目 如果有多个，以逗号分隔
        :param adboard_data: 创意代码
        :param destination_url: 目标地址
        :param adboard_size: 创意尺寸,中间以小写字母x分隔
        :param sensitive_type: 敏感词类目，多个的话以逗号分隔
        :param creative_package_format: 创意封装类型：1 Htmlsnippet(pc网页),2 vast-nonlinear（视频暂停）,3vast-linear（视频贴片） 4 vast-companion(视频伴随),5 Html5(无线banner或app)
        """
        return self._top_request(
            "taobao.tanx.creative.add",
            {
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "creative_id": creative_id,
                "adboard_type": adboard_type,
                "adboard_data": adboard_data,
                "destination_url": destination_url,
                "adboard_size": adboard_size,
                "sensitive_type": sensitive_type,
                "creative_package_format": creative_package_format
            }
        )

    def taobao_tanx_deal_get(
            self,
            dsp_id,
            deal_id,
            sign_time,
            token
    ):
        """
        对外部dsp提供交易id查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24235

        :param dsp_id: dsp用户id
        :param deal_id: 交易id
        :param sign_time: 1970年到现在的时间，毫秒
        :param token: 验证token
        """
        return self._top_request(
            "taobao.tanx.deal.get",
            {
                "dsp_id": dsp_id,
                "deal_id": deal_id,
                "sign_time": sign_time,
                "token": token
            }
        )

    def taobao_tanx_deals_get(
            self,
            dsp_id,
            token,
            page_size,
            deal_type,
            page,
            sign_time
    ):
        """
        批量获取交易列表
        批量获取交易信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24236

        :param dsp_id: dsp用户id
        :param token: dsp用户验证token
        :param page_size: 页大小
        :param deal_type: 交易类型
        :param page: 页码
        :param sign_time: 1970年到现在的时间，毫秒
        """
        return self._top_request(
            "taobao.tanx.deals.get",
            {
                "dsp_id": dsp_id,
                "token": token,
                "page_size": page_size,
                "deal_type": deal_type,
                "page": page,
                "sign_time": sign_time
            }
        )

    def taobao_tanx_qualification_picture_upload(
            self,
            member_id,
            token,
            sign_time,
            file_byte
    ):
        """
        资质图片上传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24262

        :param member_id: dsp用户id
        :param token: dsp用户检验token
        :param sign_time: 1970年到现在的时间，毫秒
        :param file_byte: File文件getByte后的二进制数组
        """
        return self._top_request(
            "taobao.tanx.qualification.picture.upload",
            {
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "file_byte": file_byte
            }
        )

    def taobao_tanx_qualification_advertiser_add(
            self,
            advertisers=None,
            member_id='',
            token='',
            sign_time=''
    ):
        """
        新增广告主接口
        外部dsp调用接口时会根据广告主名称和类型在tanx系统中新增一个广告主
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24263

        :param advertisers: 广告主对象
        :param member_id: dsp用户memberId
        :param token: dsp用户验证token
        :param sign_time: 从1970年到当前时间的秒
        """
        return self._top_request(
            "taobao.tanx.qualification.advertiser.add",
            {
                "advertisers": advertisers,
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time
            }
        )

    def taobao_tanx_qualification_add(
            self,
            member_id,
            token,
            sign_time,
            qualifications=None
    ):
        """
        提交资质接口
        dsp客户提交客户资质和行业资质
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24264

        :param member_id: dsp用户memberId
        :param token: dsp验证的token
        :param sign_time: 签名时间，1970年到现在的秒
        :param qualifications: dsp客户新增资质dto
        """
        return self._top_request(
            "taobao.tanx.qualification.add",
            {
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "qualifications": qualifications
            }
        )

    def taobao_tanx_qualification_find(
            self,
            member_id,
            token,
            sign_time,
            page,
            page_size,
            query=None
    ):
        """
        资质查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24265

        :param member_id: dsp客户在tanx的memberId
        :param token: dsp客户在tanx签名的token
        :param sign_time: 当前时间,从1970年算的毫秒
        :param page: 分页的第几页，从1开始
        :param page_size: 分页大小，限制200
        :param query: 广告主资质查询dto
        """
        return self._top_request(
            "taobao.tanx.qualification.find",
            {
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "page": page,
                "page_size": page_size,
                "query": query
            }
        )

    def taobao_tanx_qualification_modify(
            self,
            qualifications=None,
            member_id='',
            token='',
            sign_time=''
    ):
        """
        修改资质接口
        对dsp上传过的资质进行修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24266

        :param qualifications: dsp客户新增资质dto
        :param member_id: dsp用户id
        :param token: dsp用户验证token
        :param sign_time: 1970年到现在的秒
        """
        return self._top_request(
            "taobao.tanx.qualification.modify",
            {
                "qualifications": qualifications,
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_tanx_qualification_solid_find(
            self,
            advertiser_id,
            member_id,
            token,
            sign_time,
            page,
            page_size,
            element_ids=''
    ):
        """
        客户固态共享资质
        接口会返回该广告主下的所有审核通过并且可被共享的资质，这些资质在过期之前可以不需要再次上传。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24267

        :param advertiser_id: 广告主id
        :param member_id: dsp用户id
        :param token: dsp客户验证token
        :param sign_time: 1970年到现在的秒
        :param page: 查询起始页
        :param page_size: 分页大小
        :param element_ids: 资质元素id列表
        """
        return self._top_request(
            "taobao.tanx.qualification.solid.find",
            {
                "advertiser_id": advertiser_id,
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "page": page,
                "page_size": page_size,
                "element_ids": element_ids
            }
        )

    def taobao_tanx_biddingrefuses_get(
            self,
            creative_ids,
            member_id,
            token,
            sign_time,
            start_time='',
            end_time=''
    ):
        """
        tanx竞价失败反馈api
        竞价失败反馈根据创意id查询API提供
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24797

        :param creative_ids: dsp的创意id
        :param member_id: dsp在tanx的memberid
        :param token: dsp对应的tanx的token
        :param sign_time: 1970年到现在的毫秒
        :param start_time: 起始时间
        :param end_time: 截止时间
        """
        return self._top_request(
            "taobao.tanx.biddingrefuses.get",
            {
                "creative_ids": creative_ids,
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "start_time": start_time,
                "end_time": end_time
            }
        )

    def taobao_tanx_audit_depositcreative_add(
            self,
            member_id,
            token,
            sign_time,
            creative
    ):
        """
        dsp托管创意新增接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25061

        :param member_id: DSP的memberId
        :param token: dsp用户身份认证的TOKEN
        :param sign_time: 当前时间戳，1970-01-01后的秒数
        :param creative: 托管创意信息
        """
        return self._top_request(
            "taobao.tanx.audit.depositcreative.add",
            {
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "creative": creative
            }
        )

    def taobao_tanx_audit_creative_add(
            self,
            member_id,
            token,
            sign_time,
            creative
    ):
        """
        创意预审新增接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25062

        :param member_id: DSP的memberId
        :param token: dsp用户身份认证的TOKEN
        :param sign_time: 当前时间戳，1970-01-01后的秒数
        :param creative: 预审核创意对象
        """
        return self._top_request(
            "taobao.tanx.audit.creative.add",
            {
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "creative": creative
            }
        )

    def taobao_tanx_nativetemplates_get(
            self,
            member_id,
            token,
            sign_time,
            template_ids
    ):
        """
        批量获取本地模板信息
        根据传入的本地模板ID批量返回本地模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25442

        :param member_id: dsp在tanx的memberid
        :param token: dsp对应的tanx的token
        :param sign_time: 1970年到现在的毫秒
        :param template_ids: 本地模板ID列表
        """
        return self._top_request(
            "taobao.tanx.nativetemplates.get",
            {
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time,
                "template_ids": template_ids
            }
        )

    def taobao_tanx_audit_creative_modify(
            self,
            member_id,
            token,
            sign_time
    ):
        """
        创意修改接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26019

        :param member_id: DSP用户ID
        :param token: dsp用户身份认证的TOKEN
        :param sign_time: 当前时间戳，1970-01-01后的秒数
        """
        return self._top_request(
            "taobao.tanx.audit.creative.modify",
            {
                "member_id": member_id,
                "token": token,
                "sign_time": sign_time
            }
        )


class TbShouTaoKaiFang(DingTalkBaseAPI):
    """
    手淘开放API
    """

    def taobao_weitao_feed_isrelation(
            self,
            fans_nick,
            seller_nick
    ):
        """
        是否关注
        判断用户是否关注对应的公共账号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22615

        :param fans_nick: 要查询的粉丝的淘宝昵称
        :param seller_nick: 要查询的公共账号的淘宝昵称
        """
        return self._top_request(
            "taobao.weitao.feed.isrelation",
            {
                "fans_nick": fans_nick,
                "seller_nick": seller_nick
            }
        )

    def taobao_wireless_bunting_item_shorturl_create(
            self,
            item_id=''
    ):
        """
        通过商品id取得短链
        通过商品id生成短链，用户点击短链后直接跳转手淘客户端，未安装则跳转下载页
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23325

        :param item_id: 商品ID
        """
        return self._top_request(
            "taobao.wireless.bunting.item.shorturl.create",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["shorturl"]
        )

    def taobao_wireless_bunting_shop_shorturl_create(
            self,
            shop_id=''
    ):
        """
        通过店铺id取得短链
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23398

        :param shop_id: 商店id
        """
        return self._top_request(
            "taobao.wireless.bunting.shop.shorturl.create",
            {
                "shop_id": shop_id
            },
            result_processor=lambda x: x["shorturl"]
        )

    def taobao_oauth_code_create(
            self,
            test=''
    ):
        """
        淘宝OauthCode颁发
        手淘无线开放的oauthCode颁发接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23555

        :param test: mock param
        """
        return self._top_request(
            "taobao.oauth.code.create",
            {
                "test": test
            },
            result_processor=lambda x: x["test"]
        )

    def alibaba_interact_sensor_social(
            self,
            id=''
    ):
        """
        社交组件
        赞，评论 ，关注 新增接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24224

        :param id: 系统自动生成
        """
        return self._top_request(
            "alibaba.interact.sensor.social",
            {
                "id": id
            }
        )

    def alibaba_interact_sensor_trade(
            self,
            id=''
    ):
        """
        交易组件
        交易流程
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24225

        :param id: 系统自动生成
        """
        return self._top_request(
            "alibaba.interact.sensor.trade",
            {
                "id": id
            }
        )

    def alibaba_interact_lotteryactivity_register(
            self,
            param_top_update_activity_lottery_info_param
    ):
        """
        回传抽奖相关参数
        提供接口供三方应用将数据回传到平台
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26113

        :param param_top_update_activity_lottery_info_param: 入参
        """
        return self._top_request(
            "alibaba.interact.lotteryactivity.register",
            {
                "param_top_update_activity_lottery_info_param": param_top_update_activity_lottery_info_param
            }
        )

    def alibaba_interact_allsparkisv_draw(
            self,
            test='',
            ddd=''
    ):
        """
        allspark提供抽奖tida接口对应鉴权接口
        该接口没有实际对外使用。只是内部鉴权使用，不会有三方应用调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26114

        :param test: ddd
        :param ddd: dd
        """
        return self._top_request(
            "alibaba.interact.allsparkisv.draw",
            {
                "test": test,
                "ddd": ddd
            },
            result_processor=lambda x: x["ddd"]
        )

    def alibaba_kds_isv_activitylist(
            self
    ):
        """
        互动城活动列表对应鉴权接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        该接口不会对外开放，只是用来内部鉴权所用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26117

        """
        return self._top_request(
            "alibaba.kds.isv.activitylist",
            result_processor=lambda x: x["unnamed"]
        )

    def alibaba_interact_aopdata_register(
            self,
            param_top_isv_decorate_param
    ):
        """
        资源位数据推送接口
        提供给isv，查询以及推送浮层资源位的三方活动数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26148

        :param param_top_isv_decorate_param: 入参
        """
        return self._top_request(
            "alibaba.interact.aopdata.register",
            {
                "param_top_isv_decorate_param": param_top_isv_decorate_param
            }
        )

    def alibaba_interact_sensor_trade_buy(
            self,
            id=''
    ):
        """
        手淘下单能力开放
        交易流程鉴权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27349

        :param id: 系统自动生成
        """
        return self._top_request(
            "alibaba.interact.sensor.trade.buy",
            {
                "id": id
            }
        )

    def alibaba_interact_media_artwork(
            self,
            id=''
    ):
        """
        原图相关鉴权接口
        拍摄并上传原图相关鉴权接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27370

        :param id: 系统自动生成
        """
        return self._top_request(
            "alibaba.interact.media.artwork",
            {
                "id": id
            }
        )

    def alibaba_interact_media_audio(
            self,
            id=''
    ):
        """
        音频相关鉴权接口
        新音频包的鉴权接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27373

        :param id: 系统自动生成
        """
        return self._top_request(
            "alibaba.interact.media.audio",
            {
                "id": id
            }
        )

    def alibaba_interact_sensor_ar(
            self,
            id=''
    ):
        """
        AR互动能力开放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        ar能力的鉴权接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27556

        :param id: 系统自动生成
        """
        return self._top_request(
            "alibaba.interact.sensor.ar",
            {
                "id": id
            }
        )

    def alibaba_interact_fairyland_mediasave(
            self
    ):
        """
        保存视频
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        保存视频。js代码通过这个接口保存视频信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31290

        """
        return self._top_request(
            "alibaba.interact.fairyland.mediasave",
            result_processor=lambda x: x["unnamed"]
        )

    def alibaba_interact_fairyland_mediatoken(
            self,
            unnamed=''
    ):
        """
        视频上传获取token接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        用户上传视频前需要通过本接口申请token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31291

        :param unnamed: unnamed
        """
        return self._top_request(
            "alibaba.interact.fairyland.mediatoken",
            {
                "unnamed": unnamed
            },
            result_processor=lambda x: x["unnamed"]
        )

    def alibaba_interact_fairyland_mediamylist(
            self
    ):
        """
        获取上传视频列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        传入视频id，获取视频上传的列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31292

        """
        return self._top_request(
            "alibaba.interact.fairyland.mediamylist",
            result_processor=lambda x: x["unnamed"]
        )


class TbJAE(DingTalkBaseAPI):
    """
    JAE
    """

    def taobao_aplatform_weakget(
            self,
            param_rich_client_info=None,
            param_dto=None
    ):
        """
        活动平台弱登录接口
        无线活动平台的开放接口，提供商品信息等的读操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30901

        :param param_rich_client_info: 客户端自带参数
        :param param_dto: 业务自定义参数
        """
        return self._top_request(
            "taobao.aplatform.weakget",
            {
                "param_rich_client_info": param_rich_client_info,
                "param_dto": param_dto
            }
        )


class TbBaoDian(DingTalkBaseAPI):
    """
    宝点API
    """

    def taobao_baodian_deposit_get(
            self
    ):
        """
        宝点用户帐户查询（已迁移）
        查询用户宝点帐户信息及当前宝点价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22800

        """
        return self._top_request(
            "taobao.baodian.deposit.get",
            result_processor=lambda x: x["user_coin_deposit"]
        )

    def taobao_baodian_common_consume(
            self,
            consume_token,
            consume_type,
            other_msg='',
            imei='',
            client_ip='',
            phone_num=''
    ):
        """
        标准消费接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        标准的消费接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23316

        :param consume_token: 外部合作伙伴发起消费申请时得到的消费token
        :param consume_type: 消费类型
        :param other_msg: 其它信息，例如设备号
        :param imei: IMEI
        :param client_ip: clientIP
        :param phone_num: 电话串
        """
        return self._top_request(
            "taobao.baodian.common.consume",
            {
                "consume_token": consume_token,
                "consume_type": consume_type,
                "other_msg": other_msg,
                "imei": imei,
                "client_ip": client_ip,
                "phone_num": phone_num
            },
            result_processor=lambda x: x["coin_consume_order"]
        )

    def taobao_deg_applogic_msg_device_bind(
            self,
            utd_id,
            cloud_device_id
    ):
        """
        App设备utdid和云设备id的绑定
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23663

        :param utd_id: usertrack的utdid，必需
        :param cloud_device_id: 云推送的设备id，必需
        """
        return self._top_request(
            "taobao.deg.applogic.msg.device.bind",
            {
                "utd_id": utd_id,
                "cloud_device_id": cloud_device_id
            },
            result_processor=lambda x: x["bind_result"]
        )

    def taobao_baodian_server_date_get(
            self
    ):
        """
        服务器时间获取
        获取服务器时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23790

        """
        return self._top_request(
            "taobao.baodian.server.date.get",
            result_processor=lambda x: x["server_date"]
        )

    def taobao_deg_gateway_data_report(
            self,
            user_id='',
            sdk_type='',
            channel='',
            biz_type='',
            json_msg=''
    ):
        """
        SDK数据上报接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23791

        :param user_id: 用户ID
        :param sdk_type: sdk类型分极简或普通
        :param channel: 渠道类型
        :param biz_type: 业务类型由后台定义
        :param json_msg: 业务内容
        """
        return self._top_request(
            "taobao.deg.gateway.data.report",
            {
                "user_id": user_id,
                "sdk_type": sdk_type,
                "channel": channel,
                "biz_type": biz_type,
                "json_msg": json_msg
            }
        )

    def taobao_deg_applogic_user_feedback_add(
            self,
            app_version='',
            contact='',
            content='',
            net_state='',
            phone_model='',
            phone_os='',
            status='',
            user_id=''
    ):
        """
        用户反馈添加
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        添加用户反馈
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23817

        :param app_version: APP版本
        :param contact: 联系方式
        :param content: 反馈内容
        :param net_state: 网络状态
        :param phone_model: 手机型号
        :param phone_os: 手机操作系统
        :param status: 状态
        :param user_id: t65ID
        """
        return self._top_request(
            "taobao.deg.applogic.user.feedback.add",
            {
                "app_version": app_version,
                "contact": contact,
                "content": content,
                "net_state": net_state,
                "phone_model": phone_model,
                "phone_os": phone_os,
                "status": status,
                "user_id": user_id
            },
            result_processor=lambda x: x["module"]
        )

    def taobao_deg_applogic_user_encrypt(
            self,
            uuid='',
            device_id=''
    ):
        """
        用户信息加密
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23822

        :param uuid: t65ID
        :param device_id: 设备ID
        """
        return self._top_request(
            "taobao.deg.applogic.user.encrypt",
            {
                "uuid": uuid,
                "device_id": device_id
            },
            result_processor=lambda x: x["token"]
        )

    def taobao_deg_applogic_user_info_get(
            self
    ):
        """
        App获取用户信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23826

        """
        return self._top_request(
            "taobao.deg.applogic.user.info.get",
            result_processor=lambda x: x["user"]
        )

    def taobao_baodian_server_sdk_config_get(
            self,
            appkey='',
            channel='',
            sdk_ver='',
            type=''
    ):
        """
        获取宝点SDK的配置项（已迁移）
        获取SDK各种配置项（已迁移）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23833

        :param appkey: appKey
        :param channel: 渠道
        :param sdk_ver: sdk版本号
        :param type: 与后端约定
        """
        return self._top_request(
            "taobao.baodian.server.sdk.config.get",
            {
                "appkey": appkey,
                "channel": channel,
                "sdk_ver": sdk_ver,
                "type": type
            }
        )

    def taobao_baodian_loan_cancel(
            self
    ):
        """
        主动取消赊销服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        登陆用户发送短信验证码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24953

        """
        return self._top_request(
            "taobao.baodian.loan.cancel"
        )

    def taobao_baodian_topservice_openloanservice(
            self
    ):
        """
        开通赊销服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25369

        """
        return self._top_request(
            "taobao.baodian.topservice.openloanservice"
        )

    def taobao_baodian_topservice_sendloadauthcode(
            self
    ):
        """
        发送短信验证码
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25370

        """
        return self._top_request(
            "taobao.baodian.topservice.sendloadauthcode"
        )

    def taobao_baodian_topservice_checkauthcode(
            self,
            auth_code=''
    ):
        """
        校验短信验证码
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25371

        :param auth_code: 短信验证码
        """
        return self._top_request(
            "taobao.baodian.topservice.checkauthcode",
            {
                "auth_code": auth_code
            }
        )

    def taobao_baodian_chage_consume_promotion_get(
            self,
            consume_token=''
    ):
        """
        充值消费的抽奖结果查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        充值抽奖结果查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25372

        :param consume_token: token串
        """
        return self._top_request(
            "taobao.baodian.chage.consume.promotion.get",
            {
                "consume_token": consume_token
            },
            result_processor=lambda x: x["coin_consume_order"]
        )

    def taobao_deg_user_gamegift_query(
            self,
            status='',
            cp_item_ids=''
    ):
        """
        用户数娱游戏礼包查询
        查询用户数娱礼包列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25488

        :param status: 状态，1为待发放，2为已发放，3为过期
        :param cp_item_ids: cp item id列表
        """
        return self._top_request(
            "taobao.deg.user.gamegift.query",
            {
                "status": status,
                "cp_item_ids": cp_item_ids
            },
            result_processor=lambda x: x["records"]
        )

    def taobao_deg_gamegift_record_mark(
            self,
            record_id,
            ext_order_id='no_ext_order_id'
    ):
        """
        数娱游戏礼包标记为已发放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        对用户账户下的待发放游戏礼包，标记为已发放状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25490

        :param record_id: 记录id
        :param ext_order_id: 外部订单id
        """
        return self._top_request(
            "taobao.deg.gamegift.record.mark",
            {
                "record_id": record_id,
                "ext_order_id": ext_order_id
            },
            result_processor=lambda x: x["marked"]
        )

    def taobao_baodian_deposit_new_get(
            self,
            device_model='',
            uuid=''
    ):
        """
        查询用户宝点余额
        获取用户的宝点余额和用户相关的宝点信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25845

        :param device_model: 设备型号
        :param uuid: uuid
        """
        return self._top_request(
            "taobao.baodian.deposit.new.get",
            {
                "device_model": device_model,
                "uuid": uuid
            }
        )

    def taobao_baodian_deposit_get_with_sdkversion(
            self,
            device_model,
            uuid,
            sdk_version
    ):
        """
        查询用户宝点信息（带sdk版本，已迁移）
        获取用户宝点信息（带sdk版本，已迁移）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25968

        :param device_model: 设备型号
        :param uuid: uuid
        :param sdk_version: sdk版本
        """
        return self._top_request(
            "taobao.baodian.deposit.get.with.sdkversion",
            {
                "device_model": device_model,
                "uuid": uuid,
                "sdk_version": sdk_version
            }
        )


class TbJAEZuJian(DingTalkBaseAPI):
    """
    JAE组件API
    """

    def taobao_jae_client_camera_takephoto(
            self
    ):
        """
        拍照上传
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        JAE 无线API开放 拍照上传组件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22819

        """
        return self._top_request(
            "taobao.jae.client.camera.takephoto",
            result_processor=lambda x: x["urls"]
        )

    def taobao_jae_client_relation_showfollowbutton(
            self
    ):
        """
        微淘关注
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        JAE 开放API 微淘关注
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22826

        """
        return self._top_request(
            "taobao.jae.client.relation.showfollowbutton"
        )

    def taobao_jae_client_sharing_showsharingmenu(
            self,
            title,
            text,
            url='',
            image=''
    ):
        """
        分享组件
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        JAE API 分享组件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22827

        :param title: 标题
        :param text: 分享内容
        :param url: 分享的连接地址
        :param image: 图片地址
        """
        return self._top_request(
            "taobao.jae.client.sharing.showsharingmenu",
            {
                "title": title,
                "text": text,
                "url": url,
                "image": image
            }
        )

    def taobao_jae_client_context_getnetworkstatus(
            self
    ):
        """
        网络类型
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        JAE 开放API 获取网络类型
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22833

        """
        return self._top_request(
            "taobao.jae.client.context.getnetworkstatus"
        )


class TbTianMaoHuiYuanJiFen(DingTalkBaseAPI):
    """
    天猫会员积分
    """

    def tmall_marketing_liuliangbao_spreadlink_create(
            self,
            url
    ):
        """
        创建流量宝活动链接
        通过源活动链接和商家ID，创建流量宝活动链接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25758

        :param url: 活动链接，必须为淘系链接
        """
        return self._top_request(
            "tmall.marketing.liuliangbao.spreadlink.create",
            {
                "url": url
            },
            result_processor=lambda x: x["llbresult"]
        )


class TbQiChePiao(DingTalkBaseAPI):
    """
    汽车票API
    """

    def taobao_bus_agent_bookticket_confirm(
            self,
            param_agent_confirm_book_r_q
    ):
        """
        汽车票代理商接口—确认出票是否成功
        代理商通过该接口通知汽车票系统订单出票结果。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25473

        :param param_agent_confirm_book_r_q: 请求对象
        """
        return self._top_request(
            "taobao.bus.agent.bookticket.confirm",
            {
                "param_agent_confirm_book_r_q": param_agent_confirm_book_r_q
            }
        )

    def taobao_bus_agent_city_change(
            self,
            param_city_change_r_q=None
    ):
        """
        城市变更
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        代理商通知城市变更，比如可售变为不可售等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25727

        :param param_city_change_r_q: 城市变更请求对象
        """
        return self._top_request(
            "taobao.bus.agent.city.change",
            {
                "param_city_change_r_q": param_city_change_r_q
            }
        )

    def taobao_bus_refundticketprice_set(
            self,
            offline_refund_ticket_rq=None
    ):
        """
        汽车票退款申请接口
        汽车票代理商利用该接口申请退票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25841

        :param offline_refund_ticket_rq: 退票申请入参
        """
        return self._top_request(
            "taobao.bus.refundticketprice.set",
            {
                "offline_refund_ticket_rq": offline_refund_ticket_rq
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_bus_lastplace_get(
            self,
            param_last_place_search_r_q=None
    ):
        """
        获取目的地数据
        传入城市 获取对应的目的地
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27555

        :param param_last_place_search_r_q: 目的地查询参数
        """
        return self._top_request(
            "taobao.bus.lastplace.get",
            {
                "param_last_place_search_r_q": param_last_place_search_r_q
            }
        )

    def taobao_bus_busnumber_get(
            self,
            param_bus_number_search_r_q=None
    ):
        """
        汽车票车次查询
        提供汽车票车次查询服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27558

        :param param_bus_number_search_r_q: 车次查询入参
        """
        return self._top_request(
            "taobao.bus.busnumber.get",
            {
                "param_bus_number_search_r_q": param_bus_number_search_r_q
            }
        )

    def taobao_bus_seatprice_get(
            self,
            param_bus_seat_price_r_q
    ):
        """
        汽车票余票接口
        提供给商家，查询汽车票班次余票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27559

        :param param_bus_seat_price_r_q: 余票请求参数
        """
        return self._top_request(
            "taobao.bus.seatprice.get",
            {
                "param_bus_seat_price_r_q": param_bus_seat_price_r_q
            }
        )

    def taobao_bus_order_set(
            self,
            param_b2_b_create_order_r_q=None
    ):
        """
        汽车票下单接口
        提供给汽车票商家进行下单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27569

        :param param_b2_b_create_order_r_q: 下单参数
        """
        return self._top_request(
            "taobao.bus.order.set",
            {
                "param_b2_b_create_order_r_q": param_b2_b_create_order_r_q
            }
        )

    def taobao_bus_city_get(
            self
    ):
        """
        城市接口
        汽车票出发城市获取接口，获取所有出发城市
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27584

        """
        return self._top_request(
            "taobao.bus.city.get"
        )

    def taobao_bus_ticket_set(
            self,
            ticket_params=None
    ):
        """
        出票接口
        提供给汽车票商家出票使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27586

        :param ticket_params: 系统自动生成
        """
        return self._top_request(
            "taobao.bus.ticket.set",
            {
                "ticket_params": ticket_params
            }
        )

    def taobao_bus_cancleorder_set(
            self,
            ali_order_id=''
    ):
        """
        取消订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27587

        :param ali_order_id: 阿里订单号
        """
        return self._top_request(
            "taobao.bus.cancleorder.set",
            {
                "ali_order_id": ali_order_id
            }
        )

    def taobao_bus_order_get(
            self,
            param_b2_b_order_query_r_q
    ):
        """
        汽车票订单查询
        商家汽车票订单查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27636

        :param param_b2_b_order_query_r_q: 订单查询对象
        """
        return self._top_request(
            "taobao.bus.order.get",
            {
                "param_b2_b_order_query_r_q": param_b2_b_order_query_r_q
            }
        )

    def taobao_bus_busnumber_set(
            self,
            push_param=None
    ):
        """
        商家汽车票车次更新通知接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        商家汽车票车次更新后，调用该接口通知平台。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27925

        :param push_param: 车次更新通知参数
        """
        return self._top_request(
            "taobao.bus.busnumber.set",
            {
                "push_param": push_param
            }
        )

    def taobao_bus_tvmcreateorder_set(
            self,
            param_t_v_m_create_order_r_q
    ):
        """
        线下自助机创建订单
        提供给汽车票线下自助机的创建订单使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28759

        :param param_t_v_m_create_order_r_q: 创建订单对象
        """
        return self._top_request(
            "taobao.bus.tvmcreateorder.set",
            {
                "param_t_v_m_create_order_r_q": param_t_v_m_create_order_r_q
            }
        )

    def taobao_bus_disableqrcode_set(
            self,
            alitrip_order_id
    ):
        """
        自助机失效二维码
        使创建的二维码失效
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28931

        :param alitrip_order_id: 飞猪订单号
        """
        return self._top_request(
            "taobao.bus.disableqrcode.set",
            {
                "alitrip_order_id": alitrip_order_id
            }
        )

    def taobao_bus_tvmpayorder_set(
            self,
            alipay_auth_code,
            alitrip_order_id
    ):
        """
        自助机条形码被动支付
        汽车票线下自助机条形码支付
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28932

        :param alipay_auth_code: 条形码认证码
        :param alitrip_order_id: 飞猪订单号
        """
        return self._top_request(
            "taobao.bus.tvmpayorder.set",
            {
                "alipay_auth_code": alipay_auth_code,
                "alitrip_order_id": alitrip_order_id
            }
        )

    def taobao_bus_tvmqueryorder_get(
            self,
            alitrip_order_id
    ):
        """
        线下自助机查询订单信息
        查询订单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28935

        :param alitrip_order_id: 阿里订单标编号
        """
        return self._top_request(
            "taobao.bus.tvmqueryorder.get",
            {
                "alitrip_order_id": alitrip_order_id
            }
        )

    def taobao_bus_tvmbookorder_set(
            self,
            alitrip_order_id,
            book_time,
            success,
            pay_mode,
            fetch_phone='',
            passengers=None,
            support_eticket='false',
            ticket_gate=''
    ):
        """
        线下自助机通知出票接口
        出票，当成功的时候告知出票；当失败的时候告知出票失败，飞猪退款给用户。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28936

        :param alitrip_order_id: 飞猪订单号
        :param book_time: 出票时间 2017-03-03 11:22:33
        :param success: true代表出票成功；false代表出票失败
        :param pay_mode: 取值范围  ALIPAY （飞猪渠道）; WECHAT（微信）; BANKCARD（银行卡）;CASH（现金）; OWN_ALIPAY（自身支付宝渠道，非飞猪渠道）
        :param fetch_phone: 取票人手机号
        :param passengers: 乘客票面信息
        :param support_eticket: 是否支持电子票
        :param ticket_gate: 检票口
        """
        return self._top_request(
            "taobao.bus.tvmbookorder.set",
            {
                "alitrip_order_id": alitrip_order_id,
                "book_time": book_time,
                "success": success,
                "pay_mode": pay_mode,
                "fetch_phone": fetch_phone,
                "passengers": passengers,
                "support_eticket": support_eticket,
                "ticket_gate": ticket_gate
            }
        )

    def taobao_bus_tvmcancelorder_set(
            self,
            alitrip_order_id
    ):
        """
        线下自助机未付款取消订单
        自助机汽车票未付款取消订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28961

        :param alitrip_order_id: 飞猪订单号
        """
        return self._top_request(
            "taobao.bus.tvmcancelorder.set",
            {
                "alitrip_order_id": alitrip_order_id
            }
        )

    def taobao_bus_tvmcreateqrcode_set(
            self,
            alitrip_order_id,
            timeout_express
    ):
        """
        自助机生成支付宝支付二维码
        用于汽车票线下自助机调用获取支付宝的二维码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28962

        :param alitrip_order_id: 飞猪订单号
        :param timeout_express: 超时时间（分钟）
        """
        return self._top_request(
            "taobao.bus.tvmcreateqrcode.set",
            {
                "alitrip_order_id": alitrip_order_id,
                "timeout_express": timeout_express
            }
        )

    def taobao_bus_tvmrefundorder_set(
            self,
            alitrip_order_id,
            refund_amount,
            refund_batch_no,
            refund_account_in_details=None,
            refund_reason=''
    ):
        """
        线下自助机逆向退款接口
        汽车票线下自助机 逆向退票接口；用于已出票完成后，再发起退款（注意这是售后退款，如出票异常但是告诉我们出票成功，后续给客户退款，需要调用这个接口，一般开放给财务。出票过程中的失败，请直接调用出票接口并且传递false标志，我们会自动退款。）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29030

        :param alitrip_order_id: 飞猪订单号
        :param refund_amount: 退款金额（单位分）
        :param refund_batch_no: 批次号必须唯一，同一批次号只能退款一次 （多账号分润的该值 填写refundAccountInDetails中批次号的任意一个即可
        :param refund_account_in_details: 分账退款明细
        :param refund_reason: 退款原因
        """
        return self._top_request(
            "taobao.bus.tvmrefundorder.set",
            {
                "alitrip_order_id": alitrip_order_id,
                "refund_amount": refund_amount,
                "refund_batch_no": refund_batch_no,
                "refund_account_in_details": refund_account_in_details,
                "refund_reason": refund_reason
            }
        )

    def taobao_bus_historyorder_get(
            self,
            from_date,
            page_size,
            to_date,
            page_index,
            type=''
    ):
        """
        历史订单查询（对账）
        历史订单查询，对账接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29275

        :param from_date: 开始时间 2017-04-23 13:33:43
        :param page_size: 分页大小 不超过1w
        :param to_date: 结束时间 2017-04-23 13:33:43
        :param page_index: 第几页 从1开始
        :param type: offline_ticket 线下自助机； online_ticket：线上售票； 空 代表查全部
        """
        return self._top_request(
            "taobao.bus.historyorder.get",
            {
                "from_date": from_date,
                "page_size": page_size,
                "to_date": to_date,
                "page_index": page_index,
                "type": type
            }
        )

    def taobao_bus_refundfee_get(
            self,
            ali_trip_order_id,
            sub_order_ids=''
    ):
        """
        查询退票费用明细
        查询退票的费用信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33363

        :param ali_trip_order_id: 飞猪订单号
        :param sub_order_ids: 飞猪子订单号
        """
        return self._top_request(
            "taobao.bus.refundfee.get",
            {
                "ali_trip_order_id": ali_trip_order_id,
                "sub_order_ids": sub_order_ids
            }
        )

    def taobao_bus_refund_set(
            self,
            param0=None
    ):
        """
        B2B退票申请接口
        B2B业务支持退票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33364

        :param param0: 入参
        """
        return self._top_request(
            "taobao.bus.refund.set",
            {
                "param0": param0
            }
        )

    def taobao_bus_numbers_update(
            self,
            param_top_bus_number_update_r_q
    ):
        """
        汽车票车次更新服务
        用于汽车票车次信息的新增、更新和逻辑删除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33999

        :param param_top_bus_number_update_r_q: 请求参数
        """
        return self._top_request(
            "taobao.bus.numbers.update",
            {
                "param_top_bus_number_update_r_q": param_top_bus_number_update_r_q
            }
        )

    def taobao_bus_hotroute_get(
            self,
            num='0'
    ):
        """
        热门路线获取
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询汽车票目前售卖的热门路线
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35504

        :param num: 返回数量 限制10000
        """
        return self._top_request(
            "taobao.bus.hotroute.get",
            {
                "num": num
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_bus_agent_refundticket_confirm(
            self,
            param_agent_confirm_refund_r_q=None
    ):
        """
        商家top回调退款明细
        商家通过top回调告知平台退款明细
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37857

        :param param_agent_confirm_refund_r_q: 退款入参
        """
        return self._top_request(
            "taobao.bus.agent.refundticket.confirm",
            {
                "param_agent_confirm_refund_r_q": param_agent_confirm_refund_r_q
            }
        )

    def taobao_bus_agent_returnticket_confirm(
            self,
            param_agent_confirm_return_r_q=None
    ):
        """
        商家回调退票
        商家通过TOP接口调用来回传退票状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37858

        :param param_agent_confirm_return_r_q: 退票入参
        """
        return self._top_request(
            "taobao.bus.agent.returnticket.confirm",
            {
                "param_agent_confirm_return_r_q": param_agent_confirm_return_r_q
            }
        )

    def taobao_bus_agent_refund_confirm(
            self,
            param_agent_confirm_return_and_refund_r_q=None
    ):
        """
        汽车票退票和退款二合一接口
        1.商家退票成功后，回调飞猪平台汽车票退票接口，平台进行退票和退款操作。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42022

        :param param_agent_confirm_return_and_refund_r_q: 入参
        """
        return self._top_request(
            "taobao.bus.agent.refund.confirm",
            {
                "param_agent_confirm_return_and_refund_r_q": param_agent_confirm_return_and_refund_r_q
            }
        )

    def taobao_bus_numbers_stockprice_update(
            self,
            param_top_bus_price_and_stock_update_r_q=None
    ):
        """
        汽车票更新价格库存
        用于汽车票代理商更新价格库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43569

        :param param_top_bus_price_and_stock_update_r_q: 请求参数
        """
        return self._top_request(
            "taobao.bus.numbers.stockprice.update",
            {
                "param_top_bus_price_and_stock_update_r_q": param_top_bus_price_and_stock_update_r_q
            }
        )


class TbMaShangTao(DingTalkBaseAPI):
    """
    码上淘API
    """

    def taobao_ma_packcode_create(
            self
    ):
        """
        生成包裹码二维码图片链接
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23399

        """
        return self._top_request(
            "taobao.ma.packcode.create",
            result_processor=lambda x: x["qrcodeurl"]
        )

    def taobao_ma_qrcode_common_create(
            self,
            type,
            content,
            name,
            style,
            size,
            channel_name='',
            need_eps='false',
            logo=''
    ):
        """
        创建码平台常用二维码
        创建码平台对外提供的常用二维码接口，不适于码平台业务类型的码创建，如不支持包裹码、媒体码等，业务类型的码需要单独提供API。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23660

        :param type: 要制作的二维码业务类型：page:无线页面类型item:宝贝ID类型url:普通的URL连接类型shop:店铺ID类型
        :param content: 二维码的内容之一，由type决定：type=page时，content传入无线页面的URL连接内容；type=item时，content传入宝贝数字ID；type=url时，content传入普通的URL连接内容；type=shop时，content传入店铺ID；
        :param name: 二维码名字，即创建的二维码，在码平台上显示记录的名字。
        :param style: 二维码的样式名，支持普通码的颜色或官方模板的模板名；普通码的颜色可选输入：“000000”(黑色)、“EF4F2B”(橙色);官方模板的可选输入（实际尺寸比样例大）：“ww_color.png“ 尺寸290x320，样例：http://gtms03.alicdn.com/tps/i3/T1YLPRFRXXXXbsbYwb-100-102.png；“tb_scan.png“ 尺寸290x320，样例：http://gtms01.alicdn.com/tps/i1/T14vsEFThdXXbsbYwb-100-102.png；“ww_hide_color.png“  尺寸200x263，样例：http://gtms04.alicdn.com/tps/i4/TB1URvlFVXXXXbRXFXXwxcf6pXX-76-100.png；“tmall_hide_color.png“ 尺寸200x263，样例：http://gtms01.alicdn.com/tps/i1/TB1S5PiFVXXXXacXVXXwxcf6pXX-76-100.png。
        :param size: 二维码尺寸，只支持普通二维码，不支持官方模板，单位为像素，最小为60×60，最大为300×300，建议175×175。官方模板大小尺寸见style说明。
        :param channel_name: 二维码需要布点的位置，方便用户在码平台上可以区分看到不同布点的扫码数据情况；列表值，用半角','号分割，单个渠道名不能超过16字符。
        :param need_eps: 是否需要矢量图，如果需要矢量图，设置为true；只支持普通二维码，官方模板不支持矢量图
        :param logo: 二维码的logo地址，只允许淘宝官方图片空间的图片地址，其他非图片空间图片不支持。官方淘logo图片地址：http://img01.taobaocdn.com/imgextra/T1Od8YFT8eXXXXXXXX。
        """
        return self._top_request(
            "taobao.ma.qrcode.common.create",
            {
                "type": type,
                "content": content,
                "name": name,
                "style": style,
                "size": size,
                "channel_name": channel_name,
                "need_eps": need_eps,
                "logo": logo
            }
        )

    def taobao_wireless_xcode_create(
            self,
            content,
            biz_code='top',
            style=None
    ):
        """
        创建二维码/短连接
        创建码平台的普通二维码或者长连接转短连接服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25425

        :param content: 原始内容/原始地址
        :param biz_code: 码平台开放的业务code
        :param style: 普通二维码样式参数
        """
        return self._top_request(
            "taobao.wireless.xcode.create",
            {
                "content": content,
                "biz_code": biz_code,
                "style": style
            },
            result_processor=lambda x: x["xcode"]
        )


class TbYouXiJiLiPingTai(DingTalkBaseAPI):
    """
    游戏激励平台API
    """

    def taobao_de_activity_info_get(
            self,
            event_key=''
    ):
        """
        获取活动信息
        根据appKey和活动id获取活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23052

        :param event_key: 事件唯一标识
        """
        return self._top_request(
            "taobao.de.activity.info.get",
            {
                "event_key": event_key
            },
            result_processor=lambda x: x["activities"]
        )

    def taobao_de_activity_luckydraw(
            self,
            event_key,
            sequence_id,
            machine_id,
            account_id='',
            confirm_key='',
            behavior_key='',
            channel='',
            market='',
            device_model='',
            distrib_channel='',
            uuid=''
    ):
        """
        抽奖
        用于激励平台对外提供抽奖功能，包括但不限于集分宝、红包、宝点、淘金币、淘彩票等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23053

        :param event_key: 运营和cp约定的事件唯一标示
        :param sequence_id: 时间戳
        :param machine_id: 机器设备号
        :param account_id: 用户的串ID
        :param confirm_key: 确认签名key
        :param behavior_key: 行为Key
        :param channel: 渠道
        :param market: 使用市场
        :param device_model: 盒型号
        :param distrib_channel: 魔盒分发渠道
        :param uuid: 魔盒UUID
        """
        return self._top_request(
            "taobao.de.activity.luckydraw",
            {
                "event_key": event_key,
                "sequence_id": sequence_id,
                "machine_id": machine_id,
                "account_id": account_id,
                "confirm_key": confirm_key,
                "behavior_key": behavior_key,
                "channel": channel,
                "market": market,
                "device_model": device_model,
                "distrib_channel": distrib_channel,
                "uuid": uuid
            }
        )

    def taobao_de_activity_machineid_get(
            self
    ):
        """
        获取设备号
        获取机器设备id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23054

        """
        return self._top_request(
            "taobao.de.activity.machineid.get",
            result_processor=lambda x: x["machine_id"]
        )

    def taobao_de_activity_delivery_addr_confirm(
            self,
            serial_number,
            address_sign
    ):
        """
        用户收件地址确认
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25396

        :param serial_number: 加密流水号
        :param address_sign: 地址Sign
        """
        return self._top_request(
            "taobao.de.activity.delivery.addr.confirm",
            {
                "serial_number": serial_number,
                "address_sign": address_sign
            },
            result_processor=lambda x: x["update_delivery_address_vo"]
        )


class TbTaoBaoChouJiangPingTai(DingTalkBaseAPI):
    """
    淘宝抽奖平台API
    """

    def taobao_de_activity_securitytoken_apply(
            self,
            event_key
    ):
        """
        安全token获取
        新增接口，这个接口是用于在手机端进行抽奖时候的验证使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23213

        :param event_key: 运营和cp约定的事件唯一标示
        """
        return self._top_request(
            "taobao.de.activity.securitytoken.apply",
            {
                "event_key": event_key
            }
        )


class TbTianMaoGuoJi(DingTalkBaseAPI):
    """
    天猫国际API
    """

    def tmall_hk_clearance_get(
            self,
            order_id,
            need_image='false'
    ):
        """
        天猫国际-清关材料查询
        提供订单收货人身份信息查询功能。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26165

        :param order_id: 天猫国际订单号
        :param need_image: 是否需要身份证图片，不需要可以缩短接口响应时间
        """
        return self._top_request(
            "tmall.hk.clearance.get",
            {
                "order_id": order_id,
                "need_image": need_image
            }
        )

    def tmall_traceplatform_ccic_tracecode_check(
            self,
            short_tracecode,
            hide_code
    ):
        """
        ccic校验溯源码
        天猫国际溯源业务，需要将溯源码校验的功能输出到ccic官方主页中以增强溯源码的可信度，故需要提供api给ccic使用以校验溯源码的正确性。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39109

        :param short_tracecode: 15为溯源短码，必选
        :param hide_code: 6位暗码，必选
        """
        return self._top_request(
            "tmall.traceplatform.ccic.tracecode.check",
            {
                "short_tracecode": short_tracecode,
                "hide_code": hide_code
            }
        )

    def tmall_traceplatform_awdc_info_upload(
            self,
            trace_info=None
    ):
        """
        AWDC提交溯源信息
        天猫溯源-AWDC-上传溯源信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40201

        :param trace_info: 入参traceInfo
        """
        return self._top_request(
            "tmall.traceplatform.awdc.info.upload",
            {
                "trace_info": trace_info
            }
        )

    def tmall_traceplatform_cts_info_upload(
            self,
            trace_info=None
    ):
        """
        CTS提交溯源信息
        cts上传溯源信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40204

        :param trace_info: 入参traceInfo
        """
        return self._top_request(
            "tmall.traceplatform.cts.info.upload",
            {
                "trace_info": trace_info
            }
        )

    def tmall_traceplatform_cts_order_stop(
            self,
            trace_info=None
    ):
        """
        CTS截断订单
        截断CTS订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40205

        :param trace_info: 入参traceInfo
        """
        return self._top_request(
            "tmall.traceplatform.cts.order.stop",
            {
                "trace_info": trace_info
            }
        )


class TbSiFaPaiMai(DingTalkBaseAPI):
    """
    司法拍卖
    """

    def taobao_auction_gov_get_latestbid(
            self,
            court_name,
            contain_child,
            max_count
    ):
        """
        获取司法拍卖最新出价数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27535

        :param court_name: 法院名称
        :param contain_child: 死否包含下属法院
        :param max_count: 获取最新出价条数
        """
        return self._top_request(
            "taobao.auction.gov.get.latestbid",
            {
                "court_name": court_name,
                "contain_child": contain_child,
                "max_count": max_count
            }
        )

    def taobao_auction_gov_data_realtime_get(
            self,
            court_name,
            is_include_sub
    ):
        """
        获取实时(今日)统计数据
        提供查询当日法院及下属法院的拍卖统计数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40549

        :param court_name: 法院名称
        :param is_include_sub: 统计数据是否包含下级法院
        """
        return self._top_request(
            "taobao.auction.gov.data.realtime.get",
            {
                "court_name": court_name,
                "is_include_sub": is_include_sub
            },
            result_processor=lambda x: x["real_time_data"]
        )

    def taobao_auction_gov_data_monthly_get(
            self,
            court_name,
            is_include_sub,
            start_month,
            end_month
    ):
        """
        按月统计法院拍卖数据
        包含：
        标的件数统计：发布标的件数、结束标的件数、开拍标的件数
        竞价实况：预计成交金额、出价次数、报名人数
        在线标的：在线标的件数、意向用户数、网拍围观人次
        最长12个月，月的起始时间不能早于2017年3月
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40550

        :param court_name: 法院名称
        :param is_include_sub: 统计数据是够包含下属法院
        :param start_month: 开始月份
        :param end_month: 截止月份(统计数据包含这个月)
        """
        return self._top_request(
            "taobao.auction.gov.data.monthly.get",
            {
                "court_name": court_name,
                "is_include_sub": is_include_sub,
                "start_month": start_month,
                "end_month": end_month
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_auction_gov_data_annually_get(
            self,
            court_name,
            is_include_sub,
            start_year,
            end_year
    ):
        """
        按年统计法院拍卖数据
        按月统计法院拍卖数据 包含：
        标的件数统计：发布标的件数、结束标的件数、开拍标的件数
        竞价实况：预计成交金额、出价次数、报名人数
        在线标的：在线标的件数、意向用户数、网拍围观人次
        最长6年，年起始时间2017年
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40551

        :param court_name: 法院名称
        :param is_include_sub: 统计数据是够包含下属法院
        :param start_year: 开始年份
        :param end_year: 结束年份
        """
        return self._top_request(
            "taobao.auction.gov.data.annually.get",
            {
                "court_name": court_name,
                "is_include_sub": is_include_sub,
                "start_year": start_year,
                "end_year": end_year
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_auction_gov_data_topn_get(
            self,
            circle_type,
            circle,
            busi_type,
            zone_type,
            court_name
    ):
        """
        根据不同维度，获取排行榜列表
        根据不同时间维度(周,月,年)，获取(成交额或发拍件数)排行榜列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40552

        :param circle_type: 周期类型  （2：周，3：月，4：年）
        :param circle: 周期区间 周期（周填0、月份 yyyyMM、年份 yyyy)
        :param busi_type: 业务类型 （1：成交额，2：发拍件数）
        :param zone_type: 区域类型（1：全国，2：全省）
        :param court_name: 法院名称
        """
        return self._top_request(
            "taobao.auction.gov.data.topn.get",
            {
                "circle_type": circle_type,
                "circle": circle,
                "busi_type": busi_type,
                "zone_type": zone_type,
                "court_name": court_name
            },
            result_processor=lambda x: x["ranks"]
        )


class TbXiaMi(DingTalkBaseAPI):
    """
    虾米API
    """

    def alibaba_xiami_api_radio_info(
            self
    ):
        """
        获取虾米电台信息
        获取虾米音乐电台配置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23214

        """
        return self._top_request(
            "alibaba.xiami.api.radio.info",
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_radio_songs_get(
            self,
            type,
            oid,
            limit=''
    ):
        """
        获取电台歌曲
        获取电台songs
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23216

        :param type: 电台类型
        :param oid: 电台id
        :param limit: 歌曲个数, 不传为20
        """
        return self._top_request(
            "alibaba.xiami.api.radio.songs.get",
            {
                "type": type,
                "oid": oid,
                "limit": limit
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_contract_gift_send(
            self,
            buyer_nick,
            type,
            shop_id,
            order_id,
            relation_id,
            comefrom
    ):
        """
        赠送礼包接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23250

        :param buyer_nick: 买家昵称
        :param type: 礼包类型
        :param shop_id: 店铺ID
        :param order_id: 关联订单ID，必须保证唯一，可以传时间戳或者isv赠送详情表的主键ID
        :param relation_id: 关联信息ID，用来关联该礼包是isv的哪次赠送，建议传isv赠送详情表的主键ID
        :param comefrom: 来源，可以传isv的应用名称，用来区分不同的isv
        """
        return self._top_request(
            "alibaba.xiami.api.contract.gift.send",
            {
                "buyer_nick": buyer_nick,
                "type": type,
                "shop_id": shop_id,
                "order_id": order_id,
                "relation_id": relation_id,
                "comefrom": comefrom
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_contract_issign(
            self
    ):
        """
        查询是否签约
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23252

        """
        return self._top_request(
            "alibaba.xiami.api.contract.issign",
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_contract_sign(
            self
    ):
        """
        提供签约链接
        提供签约链接。in：商家id；out：签约url
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23253

        """
        return self._top_request(
            "alibaba.xiami.api.contract.sign",
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_collect_recommend_get(
            self,
            page='1',
            limit='100',
            type='promotion',
            description='空'
    ):
        """
        虾米音乐精选集推荐接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23269

        :param page: 当前页数
        :param limit: 每页数目
        :param type: 1：promotion 默认推荐<br/>2：play_count| count  视听数<br/>3：favorites | fav 喜欢数<br/>4：recommends 推荐数<br/>5：comments 评论数
        :param description: 显示完整的精选集介绍
        """
        return self._top_request(
            "alibaba.xiami.api.collect.recommend.get",
            {
                "page": page,
                "limit": limit,
                "type": type,
                "description": description
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_radio_myself_get(
            self,
            limit='20'
    ):
        """
        我的电台
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23270

        :param limit: 歌曲数量
        """
        return self._top_request(
            "alibaba.xiami.api.radio.myself.get",
            {
                "limit": limit
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_radio_guess_get(
            self,
            limit='20'
    ):
        """
        虾米猜电台
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23271

        :param limit: 歌曲数量
        """
        return self._top_request(
            "alibaba.xiami.api.radio.guess.get",
            {
                "limit": limit
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_radio_promotions_get(
            self,
            limit='20',
            page='1'
    ):
        """
        推荐电台
        获取推荐电台
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23272

        :param limit: 歌曲数量
        :param page: 页码
        """
        return self._top_request(
            "alibaba.xiami.api.radio.promotions.get",
            {
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_rank_newAlbum_get(
            self,
            type,
            limit='20',
            page='1'
    ):
        """
        推荐专辑排行
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23273

        :param type: 类型, 包括all(所有), oumei(欧美), rihan(日韩), ri(日), han(韩), huayu(华语).
        :param limit: 歌曲数量
        :param page: 页码
        """
        return self._top_request(
            "alibaba.xiami.api.rank.newAlbum.get",
            {
                "type": type,
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_rank_songs_get(
            self,
            type
    ):
        """
        排行榜歌曲获取
        获取歌曲排行榜
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23274

        :param type: 榜单类型:<br/>虾米榜 music_all,music_oumei,music_ri,music_han,music_huayu;<br/>虾米新歌榜 newmusic_all,newmusc_oumei,newmusic_ri,newmusic_han,newmusic_huayu;<br/>全球媒体榜 hito,jingge,uk,billboard,oricon,mnet;<br/>原创榜 music_original;<br/>demo榜 music_demo;<br/>陌陌榜 momo;
        """
        return self._top_request(
            "alibaba.xiami.api.rank.songs.get",
            {
                "type": type
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_recommend_dailySongs_get(
            self,
            limit='20',
            ids=''
    ):
        """
        今日歌单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23275

        :param limit: 歌曲数量
        :param ids: 推荐根据
        """
        return self._top_request(
            "alibaba.xiami.api.recommend.dailySongs.get",
            {
                "limit": limit,
                "ids": ids
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_member_account_get(
            self
    ):
        """
        获取用户账号资料
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23276

        """
        return self._top_request(
            "alibaba.xiami.api.member.account.get",
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_library_songs_get(
            self,
            page='1',
            limit='10',
            type='true'
    ):
        """
        分页获取收藏歌曲
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23277

        :param page: 页码
        :param limit: 每页数量
        :param type: 是否获取全部, true表示获取全部信息, false表示过滤不可播放的
        """
        return self._top_request(
            "alibaba.xiami.api.library.songs.get",
            {
                "page": page,
                "limit": limit,
                "type": type
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_song_detail_get(
            self
    ):
        """
        虾米音乐歌曲详情接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23278

        """
        return self._top_request(
            "alibaba.xiami.api.song.detail.get",
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_album_detail_get(
            self,
            id,
            full_des='false'
    ):
        """
        虾米音乐专辑详情接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23279

        :param id: 专辑ID
        :param full_des: 是否获取完整描述
        """
        return self._top_request(
            "alibaba.xiami.api.album.detail.get",
            {
                "id": id,
                "full_des": full_des
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_collect_detail_get(
            self,
            id,
            full_des='false',
            tag=''
    ):
        """
        虾米音乐精选集详情接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23280

        :param id: 精选集ID
        :param full_des: 是否获取完整描述
        :param tag: 是否需要tag, show为需要, 其他为不需要
        """
        return self._top_request(
            "alibaba.xiami.api.collect.detail.get",
            {
                "id": id,
                "full_des": full_des,
                "tag": tag
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_artist_detail_get(
            self,
            id,
            description=''
    ):
        """
        艺人详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23394

        :param id: 艺人id
        :param description: 是否显示description, show为显示, 其他为不显示
        """
        return self._top_request(
            "alibaba.xiami.api.artist.detail.get",
            {
                "id": id,
                "description": description
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_artist_hotSongs_get(
            self,
            id
    ):
        """
        热门歌曲
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23440

        :param id: 艺人id
        """
        return self._top_request(
            "alibaba.xiami.api.artist.hotSongs.get",
            {
                "id": id
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_artist_albums_get(
            self,
            id,
            limit='10',
            page='1'
    ):
        """
        艺人专辑
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23441

        :param id: 艺人id
        :param limit: 歌曲数量
        :param page: 页码
        """
        return self._top_request(
            "alibaba.xiami.api.artist.albums.get",
            {
                "id": id,
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_artist_promotions_get(
            self,
            limit='10',
            page='1'
    ):
        """
        推荐艺人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23442

        :param limit: 歌曲数量
        :param page: 页码
        """
        return self._top_request(
            "alibaba.xiami.api.artist.promotions.get",
            {
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_rank_index_get(
            self
    ):
        """
        榜单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23443

        """
        return self._top_request(
            "alibaba.xiami.api.rank.index.get",
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_rank_newAlbums_get(
            self,
            limit='10',
            page='1'
    ):
        """
        最新专辑
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23444

        :param limit: 每页数量
        :param page: 页码
        """
        return self._top_request(
            "alibaba.xiami.api.rank.newAlbums.get",
            {
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_song_songsByTag_get(
            self,
            tag,
            limit='20',
            page='1'
    ):
        """
        根据标签获取歌曲
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23445

        :param tag: 标签
        :param limit: 每页数量
        :param page: 页码
        """
        return self._top_request(
            "alibaba.xiami.api.song.songsByTag.get",
            {
                "tag": tag,
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_artist_wordbook_get(
            self,
            type,
            page='',
            limit=''
    ):
        """
        艺人大全
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23504

        :param type: 艺人类型,有musician, english_M, english_F, english_B, chinese_M, chinese_F, chinese_B, korea_M, korea_F, korea_B, japanese_M, japanese_F, japanese_B等
        :param page: 页码
        :param limit: 每页个数
        """
        return self._top_request(
            "alibaba.xiami.api.artist.wordbook.get",
            {
                "type": type,
                "page": page,
                "limit": limit
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_artist_similar_get(
            self,
            id,
            limit
    ):
        """
        相似艺人接口
        获取相似艺人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23647

        :param id: 艺人id
        :param limit: 数量, 最大不超过50
        """
        return self._top_request(
            "alibaba.xiami.api.artist.similar.get",
            {
                "id": id,
                "limit": limit
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_library_collects_get(
            self,
            type,
            limit='10',
            page=''
    ):
        """
        用户收藏的精选集
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23649

        :param type: 1 自己的, 2收藏的
        :param limit: 精选集数量
        :param page: 页码
        """
        return self._top_request(
            "alibaba.xiami.api.library.collects.get",
            {
                "type": type,
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_library_song_add(
            self,
            id
    ):
        """
        收藏歌曲
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23652

        :param id: 歌曲id
        """
        return self._top_request(
            "alibaba.xiami.api.library.song.add",
            {
                "id": id
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_library_song_remove(
            self,
            id
    ):
        """
        移除收藏歌曲
        取消收藏歌曲
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23653

        :param id: 歌曲id
        """
        return self._top_request(
            "alibaba.xiami.api.library.song.remove",
            {
                "id": id
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_library_albums_get(
            self,
            limit='20',
            page='1'
    ):
        """
        获取用户收藏的专辑
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23658

        :param limit: 专辑数量
        :param page: 页码
        """
        return self._top_request(
            "alibaba.xiami.api.library.albums.get",
            {
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_song_similar_get(
            self,
            id,
            limit='50'
    ):
        """
        相似歌曲接口
        相似歌曲
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23898

        :param id: 歌曲id
        :param limit: 歌曲数量
        """
        return self._top_request(
            "alibaba.xiami.api.song.similar.get",
            {
                "id": id,
                "limit": limit
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_tag_tags(
            self
    ):
        """
        获取对象的tag
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23899

        """
        return self._top_request(
            "alibaba.xiami.api.tag.tags",
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_tag_genre_album_get(
            self,
            type,
            id,
            page='1',
            limit='20'
    ):
        """
        虾米音乐－风格，流派专辑列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24584

        :param type: 1:风格，2:流派
        :param id: 风格，流派id
        :param page: 页数
        :param limit: 每页数量
        """
        return self._top_request(
            "alibaba.xiami.api.tag.genre.album.get",
            {
                "type": type,
                "id": id,
                "page": page,
                "limit": limit
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_tag_genre_artist_get(
            self,
            id,
            type,
            page='1',
            limit='20'
    ):
        """
        虾米音乐－风格艺人列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24585

        :param id: 风格 或 流派id
        :param type: 1:风格，2:流派
        :param page: 页数
        :param limit: 每页数量
        """
        return self._top_request(
            "alibaba.xiami.api.tag.genre.artist.get",
            {
                "id": id,
                "type": type,
                "page": page,
                "limit": limit
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_tag_genre_song_get(
            self,
            type,
            id,
            page='1',
            limit='20'
    ):
        """
        虾米-风格，流派歌曲
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24586

        :param type: 1:风格，2：流派
        :param id: 风格或流派id
        :param page: 页数
        :param limit: 每页数量
        """
        return self._top_request(
            "alibaba.xiami.api.tag.genre.song.get",
            {
                "type": type,
                "id": id,
                "page": page,
                "limit": limit
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_comment_collect_get(
            self,
            id,
            limit='10',
            page='1'
    ):
        """
        虾米-获取精选集评论
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24604

        :param id: 精选集id
        :param limit: 每页数量
        :param page: 页数
        """
        return self._top_request(
            "alibaba.xiami.api.comment.collect.get",
            {
                "id": id,
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_comment_album_get(
            self,
            id,
            limit='10',
            page='1'
    ):
        """
        虾米-获取专辑评论
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24605

        :param id: 专辑id
        :param limit: 每页数量
        :param page: 页数
        """
        return self._top_request(
            "alibaba.xiami.api.comment.album.get",
            {
                "id": id,
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_comment_song_get(
            self,
            id,
            limit='10',
            page='1'
    ):
        """
        虾米-获取歌曲评论
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24606

        :param id: 歌曲id
        :param limit: 每页数量
        :param page: 页数
        """
        return self._top_request(
            "alibaba.xiami.api.comment.song.get",
            {
                "id": id,
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_rank_weekhotalbums_get(
            self,
            type,
            page='1',
            limit='20'
    ):
        """
        虾米-周热门专辑
        周热门专辑
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24607

        :param type: 类型, 分为all, huayu, oumei, ri, han
        :param page: 页数
        :param limit: 每页数量
        """
        return self._top_request(
            "alibaba.xiami.api.rank.weekhotalbums.get",
            {
                "type": type,
                "page": page,
                "limit": limit
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_comment_artist_get(
            self,
            id,
            limit='10',
            page='1'
    ):
        """
        虾米-获取艺人评论
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24608

        :param id: 精选集id
        :param limit: 每页数量
        :param page: 页数
        """
        return self._top_request(
            "alibaba.xiami.api.comment.artist.get",
            {
                "id": id,
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_rank_promotion_albums_get(
            self,
            type,
            limit,
            page
    ):
        """
        虾米-新碟首发
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24609

        :param type: 类型, 分为huayu, oumei, ri, han
        :param limit: 15
        :param page: 1
        """
        return self._top_request(
            "alibaba.xiami.api.rank.promotion.albums.get",
            {
                "type": type,
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["datas"]
        )

    def alibaba_xiami_api_tag_genrelist_get(
            self
    ):
        """
        虾米- 曲风流派列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24624

        """
        return self._top_request(
            "alibaba.xiami.api.tag.genrelist.get",
            result_processor=lambda x: x["data"]
        )

    def alibaba_xiami_api_rank_music_detail_get(
            self,
            type,
            time='0'
    ):
        """
        天天-排行榜详情
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        排行榜详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25245

        :param type: 榜单类型，从music list result接口输出的type中获取
        :param time: 当期默认为0，往期从music list type接口的time字段获取作为参数
        """
        return self._top_request(
            "alibaba.xiami.api.rank.music.detail.get",
            {
                "type": type,
                "time": time
            },
            result_processor=lambda x: x["datas"]
        )

    def alibaba_xiami_api_rank_music_list_get(
            self,
            src
    ):
        """
        排行榜列表页
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        虾米排行榜列表页面
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25246

        :param src: 榜单请求来源
        """
        return self._top_request(
            "alibaba.xiami.api.rank.music.list.get",
            {
                "src": src
            },
            result_processor=lambda x: x["datas"]
        )

    def alibaba_xiami_api_dongting_headset_isbind_get(
            self,
            utdid
    ):
        """
        天天动听耳机绑定查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25315

        :param utdid: 设备id
        """
        return self._top_request(
            "alibaba.xiami.api.dongting.headset.isbind.get",
            {
                "utdid": utdid
            },
            result_processor=lambda x: x["is_bind"]
        )

    def alibaba_xiami_api_radio_detail_get(
            self,
            id,
            type='17',
            limit='50',
            context="''"
    ):
        """
        虾米－电台详情接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        虾米电台歌曲详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25390

        :param id: 电台id
        :param type: 普通电台0，艺人电台5，风格电台：13
        :param limit: 返回歌曲数量
        :param context: 为外部提供的场景相关信息，可能包含多个字段，如GPS坐标，WIFI的SSID等
        """
        return self._top_request(
            "alibaba.xiami.api.radio.detail.get",
            {
                "id": id,
                "type": type,
                "limit": limit,
                "context": context
            },
            result_processor=lambda x: x["datas"]
        )

    def alibaba_xiami_api_search_hotwords_get(
            self,
            limit='20'
    ):
        """
        搜索热词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26396

        :param limit: 数量
        """
        return self._top_request(
            "alibaba.xiami.api.search.hotwords.get",
            {
                "limit": limit
            },
            result_processor=lambda x: x["search_hot_words_result"]
        )

    def alibaba_xiami_api_banner_get(
            self
    ):
        """
        获取首焦banner图
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26496

        """
        return self._top_request(
            "alibaba.xiami.api.banner.get",
            result_processor=lambda x: x["mobile_sdk_image_result"]
        )

    def alibaba_xiami_api_music_scene_get(
            self
    ):
        """
        场景音乐列表接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26649

        """
        return self._top_request(
            "alibaba.xiami.api.music.scene.get",
            result_processor=lambda x: x["music_scene_list"]
        )

    def alibaba_xiami_api_radio_musicdetail_get(
            self,
            id,
            type='',
            limit='50',
            context=''
    ):
        """
        乐馆电台详情
        获取乐馆电台歌曲详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26650

        :param id: 乐馆电台id
        :param type: 乐馆电台类型
        :param limit: 获取乐馆电台歌曲数目，默认为50
        :param context: 为外部提供的场景相关信息，可能包含多个字段，如GPS坐标，WIFI的SSID等
        """
        return self._top_request(
            "alibaba.xiami.api.radio.musicdetail.get",
            {
                "id": id,
                "type": type,
                "limit": limit,
                "context": context
            },
            result_processor=lambda x: x["radio_music_detail_result"]
        )

    def alibaba_xiami_api_mobile_configure_get(
            self
    ):
        """
        获取手机配置
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取配置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27047

        """
        return self._top_request(
            "alibaba.xiami.api.mobile.configure.get",
            result_processor=lambda x: x["mobile_configure_result"]
        )

    def alibaba_xiami_api_mv_detail_get(
            self,
            mv_id=''
    ):
        """
        获取Mv详情
        获取MV详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27048

        :param mv_id: mv_id
        """
        return self._top_request(
            "alibaba.xiami.api.mv.detail.get",
            {
                "mv_id": mv_id
            },
            result_processor=lambda x: x["mv_detail_result"]
        )

    def alibaba_xiami_api_mv_musiclist_get(
            self,
            type='all',
            order='recommend',
            limit='20',
            page='1'
    ):
        """
        乐馆mv列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27049

        :param type: 语种, 有all, chinese, musician, english, japanese, korea
        :param order: 分组, 有recommend、hot、new
        :param limit: 每页记录
        :param page: 当前页
        """
        return self._top_request(
            "alibaba.xiami.api.mv.musiclist.get",
            {
                "type": type,
                "order": order,
                "limit": limit,
                "page": page
            },
            result_processor=lambda x: x["mv_music_list_result"]
        )

    def alibaba_xiami_api_artist_musiclist_get(
            self,
            type='all',
            order='all'
    ):
        """
        热门艺人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27057

        :param type: 语种, 有all, chinese, musician, english, japanese, korea
        :param order: 所有、男、女、组合分别为(all、male、female、combination)
        """
        return self._top_request(
            "alibaba.xiami.api.artist.musiclist.get",
            {
                "type": type,
                "order": order
            },
            result_processor=lambda x: x["artist_music_list_result"]
        )

    def alibaba_xiami_api_search_letter_get(
            self,
            key=''
    ):
        """
        搜索接口（首字母）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27058

        :param key: 搜索关键字
        """
        return self._top_request(
            "alibaba.xiami.api.search.letter.get",
            {
                "key": key
            },
            result_processor=lambda x: x["search_letter_result"]
        )

    def alibaba_xiami_api_mobile_splashimage_get(
            self,
            type='',
            isnew='',
            av=''
    ):
        """
        获取启动图片
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27060

        :param type: 类型
        :param isnew: 是否新应用
        :param av: app版本
        """
        return self._top_request(
            "alibaba.xiami.api.mobile.splashimage.get",
            {
                "type": type,
                "isnew": isnew,
                "av": av
            }
        )

    def alibaba_xiami_api_mobile_figureimage_get(
            self,
            limit='',
            type='',
            av='',
            device_type='',
            device_id=''
    ):
        """
        获取手机banner图
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27061

        :param limit: 分页限制
        :param type: 类型
        :param av: 客户端版本
        :param device_type: 设备类型
        :param device_id: 设备ID
        """
        return self._top_request(
            "alibaba.xiami.api.mobile.figureimage.get",
            {
                "limit": limit,
                "type": type,
                "av": av,
                "device_type": device_type,
                "device_id": device_id
            },
            result_processor=lambda x: x["mobile_figure_image_list"]
        )

    def alibaba_xiami_api_playlog_add(
            self,
            id='',
            type='',
            time='',
            vip_role='',
            device_id=''
    ):
        """
        播放日志添加
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27062

        :param id: 歌曲id
        :param type: 类型
        :param time: 请求时间
        :param vip_role: vip身份（1为付费，2为免费，0表示不是vip）
        :param device_id: 设备ID
        """
        return self._top_request(
            "alibaba.xiami.api.playlog.add",
            {
                "id": id,
                "type": type,
                "time": time,
                "vip_role": vip_role,
                "device_id": device_id
            },
            result_processor=lambda x: x["playlog_add_result"]
        )

    def alibaba_alimusic_operator_unicom_gettelandstatus(
            self,
            request_str='',
            unikey=''
    ):
        """
        虾米联通流量包获取手机开通状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27329

        :param request_str: 入参
        :param unikey: 入参
        """
        return self._top_request(
            "alibaba.alimusic.operator.unicom.gettelandstatus",
            {
                "request_str": request_str,
                "unikey": unikey
            },
            result_processor=lambda x: x["model"]
        )

    def alibaba_music_search_songs_get(
            self,
            limit='20',
            page='1',
            key=''
    ):
        """
        虾米歌曲搜索5.0接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        虾米歌曲搜索接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27710

        :param limit: 数量
        :param page: 页数
        :param key: 搜索关键字
        """
        return self._top_request(
            "alibaba.music.search.songs.get",
            {
                "limit": limit,
                "page": page,
                "key": key
            },
            result_processor=lambda x: x["search_songs_result"]
        )

    def alibaba_music_search_artist_get(
            self,
            limit='20',
            page='1',
            key=''
    ):
        """
        虾米艺人搜索
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        虾米艺人搜索接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27711

        :param limit: 数量
        :param page: 页数
        :param key: 搜索关键字
        """
        return self._top_request(
            "alibaba.music.search.artist.get",
            {
                "limit": limit,
                "page": page,
                "key": key
            },
            result_processor=lambda x: x["search_artists_result"]
        )

    def alibaba_xiami_api_rank_detail_get(
            self,
            billboard_id='',
            biz_code=''
    ):
        """
        排行榜详情
        虾米排行榜详情数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37565

        :param billboard_id: 榜单ID
        :param biz_code: 调用来源
        """
        return self._top_request(
            "alibaba.xiami.api.rank.detail.get",
            {
                "billboard_id": billboard_id,
                "biz_code": biz_code
            }
        )


class TbTianMaoHuDongJieKou(DingTalkBaseAPI):
    """
    天猫互动接口
    """

    def alibaba_interact_sensor_gravity(
            self
    ):
        """
        重力感应
        native获取重力感应
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23748

        """
        return self._top_request(
            "alibaba.interact.sensor.gravity"
        )

    def alibaba_interact_sensor_gyro(
            self
    ):
        """
        陀螺仪
        客户端陀螺仪
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23749

        """
        return self._top_request(
            "alibaba.interact.sensor.gyro"
        )

    def alibaba_interact_sensor_gps(
            self
    ):
        """
        天猫互动游戏开放平台需要授权的传感器类接口(获取地理位置)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23750

        """
        return self._top_request(
            "alibaba.interact.sensor.gps",
            result_processor=lambda x: x["succ"]
        )

    def alibaba_interact_sensor_contacts(
            self
    ):
        """
        获取通讯录
        手机获取通讯录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23751

        """
        return self._top_request(
            "alibaba.interact.sensor.contacts"
        )

    def alibaba_interact_sensor_shake(
            self
    ):
        """
        摇一摇
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23752

        """
        return self._top_request(
            "alibaba.interact.sensor.shake"
        )

    def alibaba_interact_sensor_blow(
            self
    ):
        """
        吹气
        客户端吹气
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23753

        """
        return self._top_request(
            "alibaba.interact.sensor.blow"
        )

    def alibaba_interact_sensor_networkstatus(
            self
    ):
        """
        网络状态
        客户端网络状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23754

        """
        return self._top_request(
            "alibaba.interact.sensor.networkstatus"
        )

    def alibaba_interact_sensor_authorize(
            self
    ):
        """
        客户端授权页
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23755

        """
        return self._top_request(
            "alibaba.interact.sensor.authorize"
        )

    def alibaba_interact_sensor_login(
            self
    ):
        """
        获取登陆页面
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23756

        """
        return self._top_request(
            "alibaba.interact.sensor.login"
        )

    def alibaba_interact_sensor_share(
            self
    ):
        """
        分享
        客户端分享
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23757

        """
        return self._top_request(
            "alibaba.interact.sensor.share"
        )

    def alibaba_interact_sensor_titlebarhide(
            self
    ):
        """
        隐藏titleBar
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23758

        """
        return self._top_request(
            "alibaba.interact.sensor.titlebarhide"
        )

    def alibaba_interact_sensor_takephoto(
            self
    ):
        """
        takePhoto
        客户端takePhoto
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23761

        """
        return self._top_request(
            "alibaba.interact.sensor.takephoto"
        )

    def alibaba_interact_isvadmin_bind(
            self,
            interact_description,
            instance_name,
            start_time,
            end_time,
            lottery_code
    ):
        """
        创建及绑定互动实例
        创建互动实例，并绑定奖池
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23766

        :param interact_description: 描述信息
        :param instance_name: 互动实例名称
        :param start_time: 互动开始时间
        :param end_time: 互动结束时间
        :param lottery_code: 奖池ID
        """
        return self._top_request(
            "alibaba.interact.isvadmin.bind",
            {
                "interact_description": interact_description,
                "instance_name": instance_name,
                "start_time": start_time,
                "end_time": end_time,
                "lottery_code": lottery_code
            }
        )

    def alibaba_interact_isvadmin_getpondbyinteract(
            self,
            interact_id
    ):
        """
        根据互动实例ID查询奖池信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23767

        :param interact_id: 互动实例ID
        """
        return self._top_request(
            "alibaba.interact.isvadmin.getpondbyinteract",
            {
                "interact_id": interact_id
            }
        )

    def alibaba_interact_isvlottery_idraw(
            self,
            interact_id,
            ua,
            award_ids=''
    ):
        """
        互动到店抽奖
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23768

        :param interact_id: 互动实例ID
        :param ua: 埋点参数
        :param award_ids: 抽奖ID列表 用逗号隔开
        """
        return self._top_request(
            "alibaba.interact.isvlottery.idraw",
            {
                "interact_id": interact_id,
                "ua": ua,
                "award_ids": award_ids
            }
        )

    def alibaba_interact_isvdata_savescore(
            self,
            interact_id,
            score
    ):
        """
        互动游戏分数保存
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23769

        :param interact_id: 互动实例ID
        :param score: 用户分数
        """
        return self._top_request(
            "alibaba.interact.isvdata.savescore",
            {
                "interact_id": interact_id,
                "score": score
            }
        )

    def alibaba_interact_isvdata_queryscore(
            self,
            interact_id
    ):
        """
        天猫互动游戏分数查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23770

        :param interact_id: 互动实例ID ISV通过绑定互动奖池并且生成互动实例接口 获取该ID
        """
        return self._top_request(
            "alibaba.interact.isvdata.queryscore",
            {
                "interact_id": interact_id
            }
        )

    def alibaba_interact_isvadmin_allponds(
            self
    ):
        """
        获取天猫互动奖池列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23771

        """
        return self._top_request(
            "alibaba.interact.isvadmin.allponds"
        )

    def alibaba_interact_sensor_calendar(
            self
    ):
        """
        天猫互动游戏开放平台需要授权的传感器类接口(日历提醒)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23776

        """
        return self._top_request(
            "alibaba.interact.sensor.calendar",
            result_processor=lambda x: x["succ"]
        )

    def alibaba_interact_sensor_toast(
            self
    ):
        """
        toast
        toast提示
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23777

        """
        return self._top_request(
            "alibaba.interact.sensor.toast"
        )

    def alibaba_interact_sensor_openwindow(
            self
    ):
        """
        客户端打开新页面
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23778

        """
        return self._top_request(
            "alibaba.interact.sensor.openwindow"
        )

    def alibaba_interact_sensor_vibrate(
            self
    ):
        """
        客户端震动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23779

        """
        return self._top_request(
            "alibaba.interact.sensor.vibrate"
        )

    def alibaba_interact_sensor_audio(
            self
    ):
        """
        声音
        客户端声音
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23784

        """
        return self._top_request(
            "alibaba.interact.sensor.audio"
        )

    def alibaba_interact_activity_register(
            self,
            entry_url,
            biz_id,
            name,
            has_valid_time,
            description='',
            end_time='',
            picture='',
            start_time=''
    ):
        """
        ISV互动应用活动注册服务
        为支持卖家由ISV互动应用可以在手淘店铺首页透出，提供ISV互动应用创建的活动注册到手淘的服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23792

        :param entry_url: 页面内容链接，仅允许ascii字符
        :param biz_id: 活动ID
        :param name: 活动名称
        :param has_valid_time: 是否有有效时间，若为真开始时间和结束时间必填，默认为真
        :param description: 活动描述文字
        :param end_time: 活动结束时间
        :param picture: 活动封面图片（非必填）
        :param start_time: 活动开始时间
        """
        return self._top_request(
            "alibaba.interact.activity.register",
            {
                "entry_url": entry_url,
                "biz_id": biz_id,
                "name": name,
                "has_valid_time": has_valid_time,
                "description": description,
                "end_time": end_time,
                "picture": picture,
                "start_time": start_time
            },
            result_processor=lambda x: x["register_sucess_info"]
        )

    def alibaba_interact_activity_unregister(
            self,
            biz_id
    ):
        """
        ISV互动应用活动关闭服务
        卖家在ISV互动应用中设置的活动主动关闭的服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23793

        :param biz_id: 互动活动ID
        """
        return self._top_request(
            "alibaba.interact.activity.unregister",
            {
                "biz_id": biz_id
            },
            result_processor=lambda x: x["unregister_result"]
        )

    def alibaba_interact_sensor_popwindow(
            self
    ):
        """
        popwindow
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23795

        """
        return self._top_request(
            "alibaba.interact.sensor.popwindow"
        )

    def alibaba_interact_sensor_gcanvas(
            self
    ):
        """
        gcanvas
        gcanvas 功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23862

        """
        return self._top_request(
            "alibaba.interact.sensor.gcanvas"
        )

    def alibaba_interact_sensor_gmedia(
            self
    ):
        """
        gmedia
        媒体功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23863

        """
        return self._top_request(
            "alibaba.interact.sensor.gmedia"
        )

    def alibaba_interact_sensor_gutil(
            self
    ):
        """
        canvas工具包
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23864

        """
        return self._top_request(
            "alibaba.interact.sensor.gutil"
        )

    def alibaba_interact_sensor_glue(
            self
    ):
        """
        视频播放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23865

        """
        return self._top_request(
            "alibaba.interact.sensor.glue"
        )

    def alibaba_interact_isvadmin_getinteractbysellernick(
            self
    ):
        """
        根据sellerNick获取互动实例列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23897

        """
        return self._top_request(
            "alibaba.interact.isvadmin.getinteractbysellernick"
        )

    def alibaba_interact_isv_gateway(
            self
    ):
        """
        isv调用gateway
        isv能够调用jae本身的server
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24001

        """
        return self._top_request(
            "alibaba.interact.isv.gateway",
            result_processor=lambda x: x["ret"]
        )

    def alibaba_interact_sensor_ma(
            self
    ):
        """
        码相关API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24414

        """
        return self._top_request(
            "alibaba.interact.sensor.ma"
        )

    def alibaba_interact_sensor_taocalendar(
            self
    ):
        """
        alibaba.interact.sensor.taocalendar
        手淘日历，ISV在手机淘宝中通过JSAPI打开客户端淘日历
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24577

        """
        return self._top_request(
            "alibaba.interact.sensor.taocalendar"
        )

    def alibaba_interact_coin_buyer_add(
            self
    ):
        """
        平台向买家发放淘金币
        手淘开放专用接口，没有数据返回，仅用于手淘容器中jssdk接口鉴权。ISV调用该接口向买家发放平台淘金币，需要优惠平台运营审核ISV资质。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24590

        """
        return self._top_request(
            "alibaba.interact.coin.buyer.add"
        )

    def alibaba_interact_sensor_wangwang(
            self
    ):
        """
        手淘拉起旺旺接口
        手淘开放专用接口，没有数据返回，仅用于手淘容器中jssdk接口鉴权。手淘开放旺旺拉起功能给ISV。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24679

        """
        return self._top_request(
            "alibaba.interact.sensor.wangwang"
        )

    def alibaba_interact_sensor_makeup(
            self
    ):
        """
        美妆虚拟试装
        手机淘宝美妆类目虚拟试妆权限，客户端能力（JS－API）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24749

        """
        return self._top_request(
            "alibaba.interact.sensor.makeup"
        )

    def taobao_weitao_feed_synchronize(
            self,
            biz_id,
            cover_path,
            detail_url,
            end_time,
            start_time,
            summary,
            title
    ):
        """
        推广淘小铺isv 活动到微淘feed
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24783

        :param biz_id: 活动id
        :param cover_path: feed封面图片url
        :param detail_url: feed点击跳转的活动地址
        :param end_time: feed展示结束时间
        :param start_time: feed展示开始时间
        :param summary: feed描述
        :param title: feed标题
        """
        return self._top_request(
            "taobao.weitao.feed.synchronize",
            {
                "biz_id": biz_id,
                "cover_path": cover_path,
                "detail_url": detail_url,
                "end_time": end_time,
                "start_time": start_time,
                "summary": summary,
                "title": title
            }
        )

    def taobao_smartisan_activitycode_create(
            self,
            nick,
            biz_id,
            appkey,
            expire_days=''
    ):
        """
        淘小铺生成活动口令
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24787

        :param nick: 用户nick
        :param biz_id: code对应的活动id
        :param appkey: 活动所对应的appkey
        :param expire_days: code过期时长
        """
        return self._top_request(
            "taobao.smartisan.activitycode.create",
            {
                "nick": nick,
                "biz_id": biz_id,
                "appkey": appkey,
                "expire_days": expire_days
            }
        )

    def alibaba_interact_onecode_issue(
            self
    ):
        """
        onecode代码通用鉴权
        手淘开放鉴权接口，仅用于tida接口鉴权，无输入输出。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24974

        """
        return self._top_request(
            "alibaba.interact.onecode.issue"
        )

    def alibaba_interact_ump_meal_query(
            self
    ):
        """
        淘宝卖家搭配套餐查询
        查询卖家在优惠平台设置的搭配套餐列表，每个套餐包括名称、套餐价格、手淘套餐购买链接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24976

        """
        return self._top_request(
            "alibaba.interact.ump.meal.query",
            result_processor=lambda x: x["meals"]
        )

    def alibaba_interact_sensor_favorites(
            self
    ):
        """
        手淘开放收藏夹鉴权接口
        手淘开放鉴权专用接口，无数据输出输入，仅用于鉴权。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25003

        """
        return self._top_request(
            "alibaba.interact.sensor.favorites",
            result_processor=lambda x: x["r"]
        )

    def alibaba_interact_current_mixusernick(
            self
    ):
        """
        手淘混淆nick开放接口鉴权专用
        手淘混淆nick开放接口鉴权专用，无数据输入输出。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25183

        """
        return self._top_request(
            "alibaba.interact.current.mixusernick"
        )

    def alibaba_interact_shop_favor(
            self
    ):
        """
        店铺收藏
        店铺收藏mtop接口开放鉴权接口，无入参出参，无安全风险，mtop接口开发 酒仙。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25241

        """
        return self._top_request(
            "alibaba.interact.shop.favor"
        )

    def alibaba_interact_activity_apply(
            self,
            benefit_type,
            banner_url,
            activity_biz_id,
            biz_type,
            benefit_attribute,
            benefit_denomination='',
            benefit_amount=''
    ):
        """
        ISV报名官方活动(中心化流量)
        支持商家将使用isv创建的活动所对应的权益信息同步到手淘，供过滤是否在中心化流量入口透出
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25264

        :param benefit_type: 活动发放的权益类型，1:支付宝红包2:流量包3:淘金币4:集分宝5:优惠卷
        :param banner_url: 报名参加的中心化流量活动的banner 地址
        :param activity_biz_id: 报名参加中心化流量活动的活动id
        :param biz_type: 该活动参与的中心化流量活动。1:代表每日赢宝箱2:微淘广场
        :param benefit_attribute: 权益属性(如红包，则为relationid)
        :param benefit_denomination: 权益对应的面额
        :param benefit_amount: 权益总额
        """
        return self._top_request(
            "alibaba.interact.activity.apply",
            {
                "benefit_type": benefit_type,
                "banner_url": banner_url,
                "activity_biz_id": activity_biz_id,
                "biz_type": biz_type,
                "benefit_attribute": benefit_attribute,
                "benefit_denomination": benefit_denomination,
                "benefit_amount": benefit_amount
            }
        )

    def alibaba_interact_activity_pushtoalicom(
            self,
            banner_url='',
            biz_id=''
    ):
        """
        小铺isv推广流量活动到流量聚乐部
        涉及到流量包的小铺isv，将活动推送到流量聚乐部
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25297

        :param banner_url: 推送到流量聚乐部的banner图
        :param biz_id: 推送到流量聚乐部的活动bizid
        """
        return self._top_request(
            "alibaba.interact.activity.pushtoalicom",
            {
                "banner_url": banner_url,
                "biz_id": biz_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_weitao_feed_cancel(
            self,
            feed_id,
            biz_id,
            delete=''
    ):
        """
        取消广播在timeline、广场中展示
        取消广播在timeline和广场中的展示。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25695

        :param feed_id: 广播id
        :param biz_id: 三方活动ID
        :param delete: 是否彻底删除（店铺动态不可见，等同卖家广播后台删除），默认false
        """
        return self._top_request(
            "taobao.weitao.feed.cancel",
            {
                "feed_id": feed_id,
                "biz_id": biz_id,
                "delete": delete
            },
            result_processor=lambda x: x["feed_id"]
        )

    def taobao_weitao_feed_synchronize_new(
            self,
            feed_type,
            detail_url,
            end_time,
            start_time,
            summary,
            title,
            sbiz_id,
            item_ids=''
    ):
        """
        推广淘小铺isv 活动到微淘feed
        推广微淘互动应用活动到微淘
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25696

        :param feed_type: 广播类型：粉丝猜价格461、投票有礼462、粉丝抢红包463、盖楼有礼464、加购有礼465
        :param detail_url: feed点击跳转的活动地址
        :param end_time: feed展示结束时间
        :param start_time: feed展示开始时间
        :param summary: feed描述
        :param title: feed标题
        :param sbiz_id: 活动ID
        :param item_ids: 宝贝列表，用于card展示，0~2个宝贝ID
        """
        return self._top_request(
            "taobao.weitao.feed.synchronize.new",
            {
                "feed_type": feed_type,
                "detail_url": detail_url,
                "end_time": end_time,
                "start_time": start_time,
                "summary": summary,
                "title": title,
                "sbiz_id": sbiz_id,
                "item_ids": item_ids
            }
        )

    def alibaba_interact_wireless_draw(
            self
    ):
        """
        双11到店互动无线端抽奖接口鉴权
        双11到店互动无线端mtop接口开放鉴权接口，无入参出参，无安全风险，mtop接口开发 坯子
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25728

        """
        return self._top_request(
            "alibaba.interact.wireless.draw"
        )

    def alibaba_interact_activity_addcomment(
            self,
            content,
            feed_id,
            biz_id
    ):
        """
        微淘评论接口
        发表评论，并返回楼层
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25768

        :param content: 该字段为评论内容
        :param feed_id: 评论feedid
        :param biz_id: 发评论的业务id
        """
        return self._top_request(
            "alibaba.interact.activity.addcomment",
            {
                "content": content,
                "feed_id": feed_id,
                "biz_id": biz_id
            }
        )

    def alibaba_interact_isvlottery_isvdraw(
            self
    ):
        """
        天猫奖池鉴权接口
        鉴权接口，为tida.isvdraw接口鉴权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25810

        """
        return self._top_request(
            "alibaba.interact.isvlottery.isvdraw",
            result_processor=lambda x: x["stub"]
        )

    def alibaba_interact_login_alipayauth(
            self
    ):
        """
        双11到店互动花呗红包获取token鉴权接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25820

        """
        return self._top_request(
            "alibaba.interact.login.alipayauth"
        )

    def taobao_mixnick_wetoplay(
            self,
            trace_id='',
            we_mixnick=''
    ):
        """
        微淘混淆nick转互动混淆nick
        微淘应用的混淆nick转为互动类型混淆nick
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25939

        :param trace_id: 排查问题id
        :param we_mixnick: 微淘混淆nick
        """
        return self._top_request(
            "taobao.mixnick.wetoplay",
            {
                "trace_id": trace_id,
                "we_mixnick": we_mixnick
            },
            result_processor=lambda x: x["play_mixnick_data"]
        )

    def alibaba_interact_coupon_apply(
            self
    ):
        """
        优惠券领取鉴权接口
        鉴权接口，为coupon.apply接口鉴权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26102

        """
        return self._top_request(
            "alibaba.interact.coupon.apply",
            result_processor=lambda x: x["stub"]
        )

    def alibaba_interact_common_model_push(
            self,
            content,
            model_name,
            features='',
            enum_note='',
            model_schema='',
            model_version='',
            scope='TAKEOUT',
            user_biz_id='',
            content_id=''
    ):
        """
        数据落地接口
        外部合作方数据落地接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26268

        :param content: json格式
        :param model_name: 模型名称，比如：ELEME_FOOD_CAT,ELEME_FOOD,ELEME_RESTAURANT,ELEME_RESTAURANT_CAT,ELEME_GLOBAL_CONFIG
        :param features: 扩展参数
        :param enum_note: 模型中枚举值的备注
        :param model_schema: 模型描述文件
        :param model_version: 整数，数据模型字段增减时递增
        :param scope: 数据模型所属业务域
        :param user_biz_id: 用户相关数据需要指定用户合作方标志
        :param content_id: 数据唯一标志，如有
        """
        return self._top_request(
            "alibaba.interact.common.model.push",
            {
                "content": content,
                "model_name": model_name,
                "features": features,
                "enum_note": enum_note,
                "model_schema": model_schema,
                "model_version": model_version,
                "scope": scope,
                "user_biz_id": user_biz_id,
                "content_id": content_id
            },
            result_processor=lambda x: x["sync_results"]
        )

    def taobao_mixnick_playtowe(
            self,
            mix_mix
    ):
        """
        互动mixNick转微淘
        微淘应用的混淆nick转为互动类型混淆nick
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26589

        :param mix_mix: 用户的混淆nick
        """
        return self._top_request(
            "taobao.mixnick.playtowe",
            {
                "mix_mix": mix_mix
            },
            result_processor=lambda x: x["we_mixnick"]
        )

    def tmall_interact_isvlottery_draw(
            self,
            asac,
            ua,
            umid,
            shop_id,
            interact_id=''
    ):
        """
        isv抽奖接口
        提供isvPC端抽奖服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27640

        :param asac: 安全码
        :param ua: 安全ua
        :param umid: umid
        :param shop_id: 店铺id
        :param interact_id: 互动实例id
        """
        return self._top_request(
            "tmall.interact.isvlottery.draw",
            {
                "asac": asac,
                "ua": ua,
                "umid": umid,
                "shop_id": shop_id,
                "interact_id": interact_id
            }
        )

    def alibaba_interact_isvlottery_mdraw(
            self
    ):
        """
        无线抽奖权限包接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27653

        """
        return self._top_request(
            "alibaba.interact.isvlottery.mdraw",
            result_processor=lambda x: x["ret"]
        )

    def alibaba_interact_user_islogin(
            self,
            buyer_nick
    ):
        """
        校验用户是否已经登录
        API的功能是校验用户是否登录，ISV调用接口的时候，通过此接口映射到mtop.interact.user.islogin接口上，因此接口只是做一个给ISV注册调用api的入口，没有发生真实的RPC
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27716

        :param buyer_nick: 用户nick
        """
        return self._top_request(
            "alibaba.interact.user.islogin",
            {
                "buyer_nick": buyer_nick
            }
        )

    def alibaba_interact_open_isattention(
            self,
            param0='1'
    ):
        """
        判断用户是否收藏某个店铺
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28706

        :param param0: 1
        """
        return self._top_request(
            "alibaba.interact.open.isattention",
            {
                "param0": param0
            }
        )

    def alibaba_interact_benefit_idraw(
            self
    ):
        """
        权益平台奖池接口开放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        权益平台通用开放抽奖接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28710

        """
        return self._top_request(
            "alibaba.interact.benefit.idraw",
            result_processor=lambda x: x["b"]
        )

    def alibaba_interact_open_yt_draw(
            self,
            mall_id,
            ua,
            asac,
            umid
    ):
        """
        线下设备抽奖
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        为线下大屏用户提供抽奖功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31970

        :param mall_id: 商家id
        :param ua: 安全uas
        :param asac: 安全码
        :param umid: umid
        """
        return self._top_request(
            "alibaba.interact.open.yt.draw",
            {
                "mall_id": mall_id,
                "ua": ua,
                "asac": asac,
                "umid": umid
            },
            result_processor=lambda x: x["data"]
        )


class TbDMP(DingTalkBaseAPI):
    """
    DMP API
    """

    def taobao_dmp_crowd_add(
            self,
            valid_date='',
            crowd_name='',
            selects=None,
            lookalike_multiple=''
    ):
        """
        创建人群
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23342

        :param valid_date: 过期时间
        :param crowd_name: 人群名称
        :param selects: 选项
        :param lookalike_multiple: 放大倍数
        """
        return self._top_request(
            "taobao.dmp.crowd.add",
            {
                "valid_date": valid_date,
                "crowd_name": crowd_name,
                "selects": selects,
                "lookalike_multiple": lookalike_multiple
            }
        )

    def taobao_dmp_tags_get(
            self
    ):
        """
        获取APP的标签信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23401

        """
        return self._top_request(
            "taobao.dmp.tags.get",
            result_processor=lambda x: x["result_list"]
        )

    def taobao_dmp_analysis_count_get(
            self,
            lookalike_multiple='',
            selects=None
    ):
        """
        查询覆盖人数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23405

        :param lookalike_multiple: 放到倍数
        :param selects: 选项
        """
        return self._top_request(
            "taobao.dmp.analysis.count.get",
            {
                "lookalike_multiple": lookalike_multiple,
                "selects": selects
            }
        )

    def taobao_dmp_crowds_get(
            self
    ):
        """
        查询人群服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23625

        """
        return self._top_request(
            "taobao.dmp.crowds.get",
            result_processor=lambda x: x["results"]
        )

    def taobao_dmp_crowd_name_get(
            self,
            crowd_name=''
    ):
        """
        根据人群名称获取人群
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24183

        :param crowd_name: 人群名称
        """
        return self._top_request(
            "taobao.dmp.crowd.name.get",
            {
                "crowd_name": crowd_name
            },
            result_processor=lambda x: x["crowd"]
        )

    def taobao_dmp_topapp_isorder(
            self,
            top_query
    ):
        """
        用户是否订购的app
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24186

        :param top_query: query对象
        """
        return self._top_request(
            "taobao.dmp.topapp.isorder",
            {
                "top_query": top_query
            },
            result_processor=lambda x: x["isorder"]
        )

    def taobao_dmp_tag_get(
            self,
            tag_id
    ):
        """
        获取标签详细信息
        通过指定标签ID获取标签下的详细信息包括选项分组、选项取值等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29327

        :param tag_id: 标签ID
        """
        return self._top_request(
            "taobao.dmp.tag.get",
            {
                "tag_id": tag_id
            }
        )

    def taobao_dmp_crowd_remove(
            self,
            crowd_id
    ):
        """
        删除人群
        删除指定人群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29337

        :param crowd_id: 人群ID,必须为自己的人群
        """
        return self._top_request(
            "taobao.dmp.crowd.remove",
            {
                "crowd_id": crowd_id
            }
        )

    def taobao_dmp_crowd_create(
            self,
            crowd_name,
            select_tag_option_set_d_t_o,
            valid_date='',
            lookalike_multiple='1'
    ):
        """
        创建人群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29395

        :param crowd_name: 人群名称，最多40个字符，只支持汉字、字母、数字、下划线
        :param select_tag_option_set_d_t_o: 标签组合条件
        :param valid_date: 过期时间,最长1年
        :param lookalike_multiple: 放大倍数，最多30倍
        """
        return self._top_request(
            "taobao.dmp.crowd.create",
            {
                "crowd_name": crowd_name,
                "select_tag_option_set_d_t_o": select_tag_option_set_d_t_o,
                "valid_date": valid_date,
                "lookalike_multiple": lookalike_multiple
            }
        )

    def taobao_dmp_crowds_find(
            self,
            crowd_query_d_t_o=None
    ):
        """
        查询人群列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29396

        :param crowd_query_d_t_o: 人群查询条件
        """
        return self._top_request(
            "taobao.dmp.crowds.find",
            {
                "crowd_query_d_t_o": crowd_query_d_t_o
            }
        )

    def taobao_dmp_analysis_coverage(
            self,
            select_tag_option_set_d_t_o
    ):
        """
        获取标签组合覆盖人数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29408

        :param select_tag_option_set_d_t_o: 标签组合规则
        """
        return self._top_request(
            "taobao.dmp.analysis.coverage",
            {
                "select_tag_option_set_d_t_o": select_tag_option_set_d_t_o
            }
        )

    def taobao_dmp_tag_find(
            self,
            tag_name=''
    ):
        """
        获取用户有权限标签列表(不包含选项信息)
        获取用户有权限的标签列表，不包含标签选项分组、标签选项信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29589

        :param tag_name: 标签名称模糊查询
        """
        return self._top_request(
            "taobao.dmp.tag.find",
            {
                "tag_name": tag_name
            }
        )

    def taobao_dmp_tag_option_find(
            self,
            tag_id,
            option_name='',
            tag_option_group_id='',
            parent_option_id='',
            int_current_page='1',
            int_page_size='10'
    ):
        """
        标签选项查询
        标签选项信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31837

        :param tag_id: 标签id
        :param option_name: 选项名称
        :param tag_option_group_id: 标签选项分组id
        :param parent_option_id: 父选项id
        :param int_current_page: 当前页数
        :param int_page_size: 分页大小
        """
        return self._top_request(
            "taobao.dmp.tag.option.find",
            {
                "tag_id": tag_id,
                "option_name": option_name,
                "tag_option_group_id": tag_option_group_id,
                "parent_option_id": parent_option_id,
                "int_current_page": int_current_page,
                "int_page_size": int_page_size
            }
        )

    def taobao_dmp_user_zuanshi_valid_check(
            self
    ):
        """
        校验是否是达摩盘客户并且有智钻全店推广权限
        根据淘宝数字id来校验是否是达摩盘客户并且有智钻全店推广权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36442

        """
        return self._top_request(
            "taobao.dmp.user.zuanshi.valid.check"
        )


class TbShengHuoFuWu(DingTalkBaseAPI):
    """
    生活服务API
    """

    def taobao_place_private_poi_list(
            self,
            private_store_query_d_o
    ):
        """
        私有化门店列表查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25174

        :param private_store_query_d_o: 门店查询条件
        """
        return self._top_request(
            "taobao.place.private.poi.list",
            {
                "private_store_query_d_o": private_store_query_d_o
            }
        )


class TbShouJiTaoBao(DingTalkBaseAPI):
    """
    手机淘宝API
    """

    def taobao_mtop_upload_token_get(
            self,
            param_upload_token_request=None
    ):
        """
        获取文件上传授权
        获取mtop文件上传授权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23431

        :param param_upload_token_request: 系统自动生成
        """
        return self._top_request(
            "taobao.mtop.upload.token.get",
            {
                "param_upload_token_request": param_upload_token_request
            }
        )


class TbWuLian(DingTalkBaseAPI):
    """
    物联API
    """

    def aliyun_alink_opendata_url_query(
            self,
            access_key,
            biz_day,
            biz_hour='-1',
            data_type='0'
    ):
        """
        开放数据授权访问URL查询
        厂商数据授权访问URL查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25501

        :param access_key: 授权key，厂家在物联平台申请的云端授权key
        :param biz_day: 数据日期，格式：yyyyMMdd
        :param biz_hour: 数据时点，范围[0,23]
        :param data_type: 数据类型，1：设备数据，2：用户操作数据
        """
        return self._top_request(
            "aliyun.alink.opendata.url.query",
            {
                "access_key": access_key,
                "biz_day": biz_day,
                "biz_hour": biz_hour,
                "data_type": data_type
            }
        )

    def alibaba_alink_device_bind(
            self,
            uuid=''
    ):
        """
        绑定设备
        阿里智能解绑设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28313

        :param uuid: 设备id
        """
        return self._top_request(
            "alibaba.alink.device.bind",
            {
                "uuid": uuid
            }
        )

    def alibaba_alink_device_detail_get(
            self,
            uuid=''
    ):
        """
        获取设备详情
        阿里智能获取设备详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28327

        :param uuid: 设备id
        """
        return self._top_request(
            "alibaba.alink.device.detail.get",
            {
                "uuid": uuid
            }
        )

    def alibaba_alink_message_config_set(
            self,
            uuid,
            push_disabled
    ):
        """
        消息提醒开关
        阿里智能消息开关
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28330

        :param uuid: 设备id
        :param push_disabled: 0：开启，1：关闭
        """
        return self._top_request(
            "alibaba.alink.message.config.set",
            {
                "uuid": uuid,
                "push_disabled": push_disabled
            }
        )

    def alibaba_alink_message_config_list(
            self
    ):
        """
        查询消息开关配置列表
        阿里智能获取消息开关配置列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28331

        """
        return self._top_request(
            "alibaba.alink.message.config.list"
        )

    def alibaba_alink_message_history_count(
            self,
            limit,
            offset,
            uuid='',
            type='',
            status='',
            level=''
    ):
        """
        查询消息总数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28332

        :param limit: 查询多少条数据
        :param offset: 偏移量
        :param uuid: 设备id
        :param type: 消息类型 1:通知, 2:报警, 3:运营，5:语音控制机器人响应，6:语音控
        :param status: 消息状态，0：未读；1：已读
        :param level: 消息级别 1：普通；2：重要消息
        """
        return self._top_request(
            "alibaba.alink.message.history.count",
            {
                "limit": limit,
                "offset": offset,
                "uuid": uuid,
                "type": type,
                "status": status,
                "level": level
            }
        )

    def alibaba_alink_message_history_list(
            self,
            limit,
            offset,
            uuid='',
            type='',
            status='',
            level=''
    ):
        """
        查询消息列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28333

        :param limit: 查询多少条数据
        :param offset: 偏移量
        :param uuid: 设备id
        :param type: 消息类型 1:通知, 2:报警, 3:运营，5:语音控制机器人响应，6:语音控
        :param status: 消息状态，0：未读；1：已读
        :param level: 消息级别 1：普通；2：重要消息
        """
        return self._top_request(
            "alibaba.alink.message.history.list",
            {
                "limit": limit,
                "offset": offset,
                "uuid": uuid,
                "type": type,
                "status": status,
                "level": level
            }
        )

    def alibaba_alink_device_info_update(
            self,
            uuid='',
            nick_name=''
    ):
        """
        更新设备昵称等信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28334

        :param uuid: 设备id
        :param nick_name: 设备昵称
        """
        return self._top_request(
            "alibaba.alink.device.info.update",
            {
                "uuid": uuid,
                "nick_name": nick_name
            }
        )

    def alibaba_alink_device_unbind(
            self,
            uuid=''
    ):
        """
        解绑设备
        阿里智能解绑设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28335

        :param uuid: 设备id
        """
        return self._top_request(
            "alibaba.alink.device.unbind",
            {
                "uuid": uuid
            }
        )

    def aliyun_alink_data_stat_report(
            self,
            param_bean
    ):
        """
        外部离线统计数据上报
        外部合作厂商上报设备的明细数据，或者离线统计数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28767

        :param param_bean: 入参对象
        """
        return self._top_request(
            "aliyun.alink.data.stat.report",
            {
                "param_bean": param_bean
            }
        )

    def alibaba_alink_device_unify_status_set(
            self,
            uuid='',
            instructions=''
    ):
        """
        设置设备标准属性状态
        操作用户绑定的设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30013

        :param uuid: uuid
        :param instructions: 设备的设置参数数据
        """
        return self._top_request(
            "alibaba.alink.device.unify.status.set",
            {
                "uuid": uuid,
                "instructions": instructions
            }
        )

    def alibaba_alink_device_unify_status_get(
            self,
            uuid=''
    ):
        """
        查询设备标准属性最新状态
        查询设备最新标准属性状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30014

        :param uuid: 设备id
        """
        return self._top_request(
            "alibaba.alink.device.unify.status.get",
            {
                "uuid": uuid
            }
        )


class TbHangLv(DingTalkBaseAPI):
    """
    航旅API
    """

    def alitrip_btrip_flightorder_get(
            self,
            corp_id,
            begin_date,
            end_date,
            corp_sign=''
    ):
        """
        商旅机票订单数据开放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27992

        :param corp_id: 企业ID
        :param begin_date: 开始时间
        :param end_date: 结束时间
        :param corp_sign: 企业签名
        """
        return self._top_request(
            "alitrip.btrip.flightorder.get",
            {
                "corp_id": corp_id,
                "begin_date": begin_date,
                "end_date": end_date,
                "corp_sign": corp_sign
            }
        )


class TbJiuDianDaoGou(DingTalkBaseAPI):
    """
    酒店导购API
    """

    def taobao_xhotel_city_get(
            self,
            start,
            count
    ):
        """
        酒店城市数据获取接口
        引流API，对外提供酒店城市数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23008

        :param start: 分页读取的开始下标,从0开始
        :param count: 分页读取的城市个数，最小值为1，最大值为200
        """
        return self._top_request(
            "taobao.xhotel.city.get",
            {
                "start": start,
                "count": count
            }
        )

    def taobao_xhotel_list_search(
            self,
            city_name='',
            city_code='',
            check_in='',
            check_out='',
            current_page='',
            page_size='',
            keywords='',
            low_price='',
            high_price='',
            dangcis='',
            order='',
            dir='',
            radius_lng='',
            radius_lat='',
            radius='',
            pid=''
    ):
        """
        酒店列表搜索接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提供酒店小搜的酒店列表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23019

        :param city_name: 城市名称，需通过taobao.xhotel.city.get接口获取
        :param city_code: 城市编码，需通过taobao.xhotel.city.get接口获取
        :param check_in: 入住时间，默认值为当前时间加3天
        :param check_out: 离店日期，默认值为当前时间加4天
        :param current_page: 分页参数：当前页数，从1开始计数。<br/>默认值：1
        :param page_size: 分页参数：每页酒店数量。最小值1，最大值为20。默认值：20
        :param keywords: 搜索关键字
        :param low_price: 指定价格范围搜索时的最低价，单位：元。
        :param high_price: 指定价格范围搜索时的最高价，单位：元。
        :param dangcis: 酒店星级/档次。<br/>五星/豪华:5<br/>四星/高档:4<br/>三星/舒适:3<br/>二星及以下：2<br/>经济连锁：1<br/>客栈公寓:0<br/>支持设置多个档次，多个档次用','隔开，如5,4,3
        :param order: 排序方式。<br/>默认排序：DEFAULT <br/>按销量排序：SALESCOUNT <br/>按价格排序：PRICE<br/>按照距离排序：DISTANCE。<br/>注意：如果按距离排序，则按离搜索中心点从近到远的顺序返回酒店列表，不需要再设置dir参数。
        :param dir: 排序方向。<br/>从高往低: DESC<br/>从低往高: ASC。<br/>默认值为DESC<br/>注意：如果按距离排序，设置此参数无效。如果按距离排序，则按离搜索中心点从近到远的顺序返回酒店列表，不需要再设置dir参数。
        :param radius_lng: 地图搜索时中心点的经度。注意：如果设置此参数，则参数radius_lat也必须设置。
        :param radius_lat: 地图搜时中心点的经度。注意：如果设置此参数，则参数radius_lng也必须设置。
        :param radius: 地图搜的半径，单位:米。默认值为5000米，允许的最大值为50000米。
        :param pid: pid
        """
        return self._top_request(
            "taobao.xhotel.list.search",
            {
                "city_name": city_name,
                "city_code": city_code,
                "check_in": check_in,
                "check_out": check_out,
                "current_page": current_page,
                "page_size": page_size,
                "keywords": keywords,
                "low_price": low_price,
                "high_price": high_price,
                "dangcis": dangcis,
                "order": order,
                "dir": dir,
                "radius_lng": radius_lng,
                "radius_lat": radius_lat,
                "radius": radius,
                "pid": pid
            }
        )

    def taobao_xhotel_price_info_get(
            self,
            shid_city_code,
            start_date='',
            end_date='',
            pid=''
    ):
        """
        酒店价格查询
        查询酒店下所有房型价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23474

        :param shid_city_code: 标准酒店id和城市编码拼接字符串，最多50个
        :param start_date: 开始时间，默认值为当前时间加3天,开始时间最多是当前时间加28天
        :param end_date: 结束日期，默认值为当前时间加4天,结束日期最多是当前时间加28天
        :param pid: pid
        """
        return self._top_request(
            "taobao.xhotel.price.info.get",
            {
                "shid_city_code": shid_city_code,
                "start_date": start_date,
                "end_date": end_date,
                "pid": pid
            }
        )

    def taobao_xhotel_info_list_get(
            self,
            city_code,
            current_page='',
            page_size='',
            pid='',
            shid=''
    ):
        """
        酒店详细信息查询
        获取酒店详情信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23475

        :param city_code: 城市code
        :param current_page: 分页参数：当前页数，从1开始计数。<br/>默认值：1
        :param page_size: 分页参数：每页酒店数量。最小值1，最大值为50。默认值：20
        :param pid: pid
        :param shid: 标准酒店id，如果需要查询单条酒店的信息，需要传入此参数
        """
        return self._top_request(
            "taobao.xhotel.info.list.get",
            {
                "city_code": city_code,
                "current_page": current_page,
                "page_size": page_size,
                "pid": pid,
                "shid": shid
            }
        )

    def alitrip_hotel_search_list_get(
            self,
            param_top_hotel_search_list_param=None
    ):
        """
        酒店搜索List接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35249

        :param param_top_hotel_search_list_param: 入参
        """
        return self._top_request(
            "alitrip.hotel.search.list.get",
            {
                "param_top_hotel_search_list_param": param_top_hotel_search_list_param
            }
        )

    def alitrip_hotel_detail_info_get(
            self,
            param_hotel_top_details_param=None
    ):
        """
        详情页动态信息接口
        酒店详情页动态信息TOP方法
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35264

        :param param_hotel_top_details_param: 详情页动态信息参数类
        """
        return self._top_request(
            "alitrip.hotel.detail.info.get",
            {
                "param_hotel_top_details_param": param_hotel_top_details_param
            }
        )

    def alitrip_hotel_search_citysuggest_get(
            self,
            key_words,
            user_id='-1'
    ):
        """
        城市Suggest接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35590

        :param key_words: 用户输入的词
        :param user_id: 用户id
        """
        return self._top_request(
            "alitrip.hotel.search.citysuggest.get",
            {
                "key_words": key_words,
                "user_id": user_id
            }
        )

    def alitrip_hotel_hotelimageshow_get(
            self,
            param_hotel_image_show_param=None
    ):
        """
        酒店图文秀接口
        获取酒店图文秀接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35591

        :param param_hotel_image_show_param: 图文秀参数
        """
        return self._top_request(
            "alitrip.hotel.hotelimageshow.get",
            {
                "param_hotel_image_show_param": param_hotel_image_show_param
            }
        )

    def alitrip_hotel_detail_staticinfo_get(
            self,
            param_hotel_top_static_details_param=None
    ):
        """
        详情页静态信息
        酒店静态信息TOP接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35592

        :param param_hotel_top_static_details_param: 酒店详情页静态信息参数
        """
        return self._top_request(
            "alitrip.hotel.detail.staticinfo.get",
            {
                "param_hotel_top_static_details_param": param_hotel_top_static_details_param
            }
        )

    def alitrip_hotel_detail_package_get(
            self,
            check_in,
            check_out,
            rate_id,
            shid
    ):
        """
        酒店详情页查看套餐详情的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35624

        :param check_in: 入住日期
        :param check_out: 离店日期
        :param rate_id: rateId
        :param shid: 标准酒店id
        """
        return self._top_request(
            "alitrip.hotel.detail.package.get",
            {
                "check_in": check_in,
                "check_out": check_out,
                "rate_id": rate_id,
                "shid": shid
            }
        )

    def alitrip_hotel_rate_getmixratelist_get(
            self,
            param_get_mix_rate_list_param=None
    ):
        """
        酒店评论接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35634

        :param param_get_mix_rate_list_param: 评论参数
        """
        return self._top_request(
            "alitrip.hotel.rate.getmixratelist.get",
            {
                "param_get_mix_rate_list_param": param_get_mix_rate_list_param
            }
        )


class TbBaoXian(DingTalkBaseAPI):
    """
    保险API
    """

    def alipay_baoxian_claim_uploadattachment(
            self,
            out_biz_no,
            attachment_key,
            attachment_byte,
            upload_user,
            biz_source='',
            sp_no='',
            base64_bytes='',
            policy_biz_no=''
    ):
        """
        资料上传接口
        给合作伙伴上传申请理赔材料
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29609

        :param out_biz_no: 外部业务号，唯一
        :param attachment_key: 文件名,必须带后缀名。例如：test.png,test.doc,test.pdf
        :param attachment_byte: 文件字节数组
        :param upload_user: 上传者用户标识
        :param biz_source: 业务来源
        :param sp_no: 标准产品ID
        :param base64_bytes: 是否base格式的字节数组
        :param policy_biz_no: 保单外部业务单号
        """
        return self._top_request(
            "alipay.baoxian.claim.uploadattachment",
            {
                "out_biz_no": out_biz_no,
                "attachment_key": attachment_key,
                "attachment_byte": attachment_byte,
                "upload_user": upload_user,
                "biz_source": biz_source,
                "sp_no": sp_no,
                "base64_bytes": base64_bytes,
                "policy_biz_no": policy_biz_no
            },
            result_processor=lambda x: x["upload_result"]
        )

    def alipay_baoxian_claim_update(
            self,
            biz_data='',
            progress_list='',
            claim_attachments=None,
            policy_biz_no='',
            out_biz_no='',
            biz_source='',
            claim_fee='',
            claim_no='',
            claim_out_biz_no='',
            sp_no=''
    ):
        """
        更新赔案
        更新保险理赔单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29610

        :param biz_data: 业务数据
        :param progress_list: 进度列表
        :param claim_attachments: 附件列表
        :param policy_biz_no: 保单业务单号
        :param out_biz_no: 外部业务单号
        :param biz_source: 业务来源
        :param claim_fee: 理赔金额(单位为分)
        :param claim_no: 理赔单号
        :param claim_out_biz_no: 理赔外部业务单号
        :param sp_no: 标准产品ID
        """
        return self._top_request(
            "alipay.baoxian.claim.update",
            {
                "biz_data": biz_data,
                "progress_list": progress_list,
                "claim_attachments": claim_attachments,
                "policy_biz_no": policy_biz_no,
                "out_biz_no": out_biz_no,
                "biz_source": biz_source,
                "claim_fee": claim_fee,
                "claim_no": claim_no,
                "claim_out_biz_no": claim_out_biz_no,
                "sp_no": sp_no
            }
        )

    def alipay_baoxian_claim_returngoodsstatus_update(
            self,
            claim_no,
            goods_status
    ):
        """
        更新理赔单退货货物状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37741

        :param claim_no: 理赔单号
        :param goods_status: 退货货物状态
        """
        return self._top_request(
            "alipay.baoxian.claim.returngoodsstatus.update",
            {
                "claim_no": claim_no,
                "goods_status": goods_status
            }
        )

    def alipay_baoxian_claim_survey_conclusion_submit(
            self,
            facilitator_survey_conclusions=None
    ):
        """
        保险退货服务商勘察结论提交接口
        保险退货服务商提交勘察结论
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42999

        :param facilitator_survey_conclusions: 勘察结论
        """
        return self._top_request(
            "alipay.baoxian.claim.survey.conclusion.submit",
            {
                "facilitator_survey_conclusions": facilitator_survey_conclusions
            }
        )


class TbYiYaoGuan(DingTalkBaseAPI):
    """
    医药馆API
    """

    def tmall_yao_piats_check(
            self,
            biz_order_id,
            piats_codes
    ):
        """
        校验药监码
        商家调用此接口校验药监码是否可用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23645

        :param biz_order_id: 子订单号
        :param piats_codes: 药监码(多个用逗号分隔)
        """
        return self._top_request(
            "tmall.yao.piats.check",
            {
                "biz_order_id": biz_order_id,
                "piats_codes": piats_codes
            },
            result_processor=lambda x: x["check_yao_piats_list"]
        )


class TbTianMaoMeiZhuang(DingTalkBaseAPI):
    """
    天猫美妆API
    """

    def tmall_mei_crm_member_sync(
            self,
            mobile='',
            point='0',
            level='0',
            extend='',
            version='',
            mix_nick='',
            nick=''
    ):
        """
        同步推送会员信息
        品牌方通过该api主动推送会员信息。使用场景包括
        1.用户在线上注册后，线下补充信息后，同步到线上。
        2.其他情况的主动推送变更。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24492

        :param mobile: 会员手机号码
        :param point: 会员积分
        :param level: 会员等级
        :param extend: 会员拓展信息
        :param version: 该次同步的版本信息（建议使用时间戳）
        :param mix_nick: 混淆昵称
        :param nick: 昵称
        """
        return self._top_request(
            "tmall.mei.crm.member.sync",
            {
                "mobile": mobile,
                "point": point,
                "level": level,
                "extend": extend,
                "version": version,
                "mix_nick": mix_nick,
                "nick": nick
            },
            result_processor=lambda x: x["mei_extra_info"]
        )

    def tmall_mei_crm_callback_point_change(
            self,
            record_id,
            result,
            mix_mobile='',
            error_code='',
            ext_info='',
            point=''
    ):
        """
        品牌积分变更回调API
        线下品牌积分变更消息回调API，告诉积分扣减或者累加是否成功。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24736

        :param record_id: 变更记录ID
        :param result: 0:成功。1：失败
        :param mix_mobile: 混淆会员手机号码
        :param error_code: 处理失败的错误码.
        :param ext_info: 拓展信息
        :param point: 积分信息
        """
        return self._top_request(
            "tmall.mei.crm.callback.point.change",
            {
                "record_id": record_id,
                "result": result,
                "mix_mobile": mix_mobile,
                "error_code": error_code,
                "ext_info": ext_info,
                "point": point
            },
            result_processor=lambda x: x["result_success"]
        )

    def tmall_crm_member_front_unbind(
            self,
            user_nick
    ):
        """
        品牌会员解绑
        品牌会员解绑功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25013

        :param user_nick: 会员昵称
        """
        return self._top_request(
            "tmall.crm.member.front.unbind",
            {
                "user_nick": user_nick
            },
            result_processor=lambda x: x["result_success"]
        )

    def tmall_crm_member_point_change(
            self,
            user_nick,
            point='0',
            type='minus',
            biz_code='',
            biz_detail=''
    ):
        """
        会员积分变更
        品牌CRM项目中，会员积分变更接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25033

        :param user_nick: 用户昵称
        :param point: 更改积分数值
        :param type: minus:扣减;add:累加
        :param biz_code: 业务代码
        :param biz_detail: 业务描述
        """
        return self._top_request(
            "tmall.crm.member.point.change",
            {
                "user_nick": user_nick,
                "point": point,
                "type": type,
                "biz_code": biz_code,
                "biz_detail": biz_detail
            },
            result_processor=lambda x: x["result_success"]
        )

    def tmall_mei_crm_member_getbypaycode(
            self,
            pay_code
    ):
        """
        支付码获取会员信息
        通过支付码获取会员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30027

        :param pay_code: 会员码
        """
        return self._top_request(
            "tmall.mei.crm.member.getbypaycode",
            {
                "pay_code": pay_code
            }
        )


class TbDianZiMianDan(DingTalkBaseAPI):
    """
    电子面单API
    """

    def taobao_wlb_waybill_i_get(
            self,
            waybill_apply_new_request
    ):
        """
        获取物流服务商电子面单号v1.0
        商家根据订单信息，实时、批量获取指定物流服务商的电子面单号。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23869

        :param waybill_apply_new_request: 面单申请
        """
        return self._top_request(
            "taobao.wlb.waybill.i.get",
            {
                "waybill_apply_new_request": waybill_apply_new_request
            },
            result_processor=lambda x: x["waybill_apply_new_cols"]
        )

    def taobao_wlb_waybill_i_search(
            self,
            waybill_apply_request
    ):
        """
        查询面单服务订购及面单使用情况v1.0
        获取发货地&CP开通状态&账户的使用情况
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23870

        :param waybill_apply_request: 查询网点信息
        """
        return self._top_request(
            "taobao.wlb.waybill.i.search",
            {
                "waybill_apply_request": waybill_apply_request
            },
            result_processor=lambda x: x["subscribtions"]
        )

    def taobao_wlb_waybill_i_fullupdate(
            self,
            waybill_apply_full_update_request
    ):
        """
        面单信息更新接口v1.0
        商家更新电子面单号对应的订单信息。<br/><br/>a.涉及到订单信息（如拆/合单、取消订单等）、修改发货地的逻辑时候，需要使用CANCEL+GET组合操作。一般的面单信息更新使用该接口；<br/><br/>b.该接口是全量修改接口，对于不做更新的字段也要把原有的字段值传进去，否则做为修改为空处理。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23871

        :param waybill_apply_full_update_request: 更新面单信息请求
        """
        return self._top_request(
            "taobao.wlb.waybill.i.fullupdate",
            {
                "waybill_apply_full_update_request": waybill_apply_full_update_request
            },
            result_processor=lambda x: x["waybill_apply_update_info"]
        )

    def taobao_wlb_waybill_i_print(
            self,
            waybill_apply_print_check_request
    ):
        """
        打印确认接口v1.0
        打印面单前的校验接口，判断面单号信息与订单信息是否匹配。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23872

        :param waybill_apply_print_check_request: 打印请求
        """
        return self._top_request(
            "taobao.wlb.waybill.i.print",
            {
                "waybill_apply_print_check_request": waybill_apply_print_check_request
            },
            result_processor=lambda x: x["waybill_apply_print_check_infos"]
        )

    def taobao_wlb_waybill_i_querydetail(
            self,
            waybill_detail_query_request
    ):
        """
        查面单号状态v1.0
        查看面单号的当前状态，如签收、发货、失效等。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23873

        :param waybill_detail_query_request: 面单查询请求
        """
        return self._top_request(
            "taobao.wlb.waybill.i.querydetail",
            {
                "waybill_detail_query_request": waybill_detail_query_request
            }
        )

    def taobao_wlb_waybill_i_cancel(
            self,
            waybill_apply_cancel_request
    ):
        """
        商家取消获取的电子面单号v1.0
        面单号有误需要取消的时候，调用该接口取消获取的电子面单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23874

        :param waybill_apply_cancel_request: 取消接口入参
        """
        return self._top_request(
            "taobao.wlb.waybill.i.cancel",
            {
                "waybill_apply_cancel_request": waybill_apply_cancel_request
            },
            result_processor=lambda x: x["cancel_result"]
        )

    def taobao_wlb_waybill_i_product(
            self,
            waybill_product_type_request
    ):
        """
        商家查询物流商产品类型接口
        商家可以查询物流商的产品类型和服务能力。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23893

        :param waybill_product_type_request: 查询物流商电子面单产品类型入参
        """
        return self._top_request(
            "taobao.wlb.waybill.i.product",
            {
                "waybill_product_type_request": waybill_product_type_request
            },
            result_processor=lambda x: x["product_types"]
        )

    def cainiao_cloudprint_stdtemplates_get(
            self
    ):
        """
        获取所有的菜鸟标准电子面单模板
        获取菜鸟标准电子面单模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26756

        """
        return self._top_request(
            "cainiao.cloudprint.stdtemplates.get"
        )

    def cainiao_cloudprint_mystdtemplates_get(
            self
    ):
        """
        获取用户使用的菜鸟电子面单模板信息
        获取用户使用的菜鸟电子面单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26758

        """
        return self._top_request(
            "cainiao.cloudprint.mystdtemplates.get"
        )

    def cainiao_waybill_ii_product(
            self,
            cp_code
    ):
        """
        商家查询物流商产品类型接口
        商家可以查询物流商的产品类型和服务能力。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26765

        :param cp_code: 快递公司code
        """
        return self._top_request(
            "cainiao.waybill.ii.product",
            {
                "cp_code": cp_code
            },
            result_processor=lambda x: x["product_types"]
        )

    def cainiao_waybill_ii_cancel(
            self,
            cp_code,
            waybill_code
    ):
        """
        商家取消获取的电子面单号
        面单号有误需要取消的时候，调用该接口取消获取的电子面单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26766

        :param cp_code: 快递公司code
        :param waybill_code: 电子面单号
        """
        return self._top_request(
            "cainiao.waybill.ii.cancel",
            {
                "cp_code": cp_code,
                "waybill_code": waybill_code
            },
            result_processor=lambda x: x["cancel_result"]
        )

    def cainiao_cloudprint_customares_get(
            self,
            template_id
    ):
        """
        获取商家的自定义区模板信息
        供isv使用，获取商家的自定义区的模板信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26800

        :param template_id: 用户使用的标准模板id
        """
        return self._top_request(
            "cainiao.cloudprint.customares.get",
            {
                "template_id": template_id
            }
        )

    def cainiao_waybill_ii_get(
            self,
            param_waybill_cloud_print_apply_new_request
    ):
        """
        电子面单云打印接口
        菜鸟电子面单的云打印申请电子面单号的方法
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26869

        :param param_waybill_cloud_print_apply_new_request: 入参信息
        """
        return self._top_request(
            "cainiao.waybill.ii.get",
            {
                "param_waybill_cloud_print_apply_new_request": param_waybill_cloud_print_apply_new_request
            },
            result_processor=lambda x: x["modules"]
        )

    def cainiao_waybill_ii_update(
            self,
            param_waybill_cloud_print_update_request
    ):
        """
        电子面单云打印更新接口
        商家更新电子面单号对应的面单信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26870

        :param param_waybill_cloud_print_update_request: 更新请求信息
        """
        return self._top_request(
            "cainiao.waybill.ii.update",
            {
                "param_waybill_cloud_print_update_request": param_waybill_cloud_print_update_request
            }
        )

    def cainiao_cloudprint_clientinfo_put(
            self,
            json_data
    ):
        """
        云打印客户端监控信息收集
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27111

        :param json_data: 客户端上传json数据
        """
        return self._top_request(
            "cainiao.cloudprint.clientinfo.put",
            {
                "json_data": json_data
            }
        )

    def cainiao_waybill_ii_query_by_tradecode(
            self,
            param_list=None
    ):
        """
        通过订单号查询电子面单通接口
        通过订单号查看面单的信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27114

        :param param_list: 订单号列表
        """
        return self._top_request(
            "cainiao.waybill.ii.query.by.tradecode",
            {
                "param_list": param_list
            },
            result_processor=lambda x: x["modules"]
        )

    def cainiao_waybill_ii_query_by_waybillcode(
            self,
            param_list=None
    ):
        """
        通过面单号查询面单信息
        通过面单号查看面单号的当前状态，如签收、发货、失效等。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27115

        :param param_list: 系统自动生成
        """
        return self._top_request(
            "cainiao.waybill.ii.query.by.waybillcode",
            {
                "param_list": param_list
            },
            result_processor=lambda x: x["modules"]
        )

    def cainiao_cloudprint_isvtemplates_get(
            self
    ):
        """
        获取商家使用的标准模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27116

        """
        return self._top_request(
            "cainiao.cloudprint.isvtemplates.get"
        )

    def cainiao_waybill_ii_search(
            self,
            cp_code=''
    ):
        """
        查询面单服务订购及面单使用情况
        获取发货地&CP开通状态&账户的使用情况
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27125

        :param cp_code: 物流公司code
        """
        return self._top_request(
            "cainiao.waybill.ii.search",
            {
                "cp_code": cp_code
            },
            result_processor=lambda x: x["waybill_apply_subscription_cols"]
        )

    def cainiao_cloudprint_isv_resources_get(
            self,
            isv_resource_type
    ):
        """
        isv资源查询
        isv资源查询，包括isv模板、打印项、预设的自定义区等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27409

        :param isv_resource_type: isv资源类型，分为：TEMPLATE（表示模板），PRINT_ITEM（打印项），CUSTOM_AREA（预设自定义区）
        """
        return self._top_request(
            "cainiao.cloudprint.isv.resources.get",
            {
                "isv_resource_type": isv_resource_type
            }
        )

    def cainiao_openstorage_isv_resource_create(
            self,
            param_create_isv_resource_request=None
    ):
        """
        isv资源创建接口（云打印开源存储）
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27411

        :param param_create_isv_resource_request: isv创建资源的参数
        """
        return self._top_request(
            "cainiao.openstorage.isv.resource.create",
            {
                "param_create_isv_resource_request": param_create_isv_resource_request
            }
        )

    def cainiao_openstorage_resource_update(
            self,
            param_update_resource_request
    ):
        """
        isv和商家资源更新（云打印开源存储）
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        isv和商家的资源获取接口（云打印开源存储）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27424

        :param param_update_resource_request: 入参
        """
        return self._top_request(
            "cainiao.openstorage.resource.update",
            {
                "param_update_resource_request": param_update_resource_request
            }
        )

    def cainiao_openstorage_isv_resources_get(
            self,
            isv_resource_type
    ):
        """
        isv资源列表获取（云打印开源存储）
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        isv资源列表查询（云打印开源存储）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27425

        :param isv_resource_type: isv资源类型，分为：TEMPLATE（模板）和PRINT_ITEM（打印项）
        """
        return self._top_request(
            "cainiao.openstorage.isv.resources.get",
            {
                "isv_resource_type": isv_resource_type
            }
        )

    def cainiao_openstorage_seller_resource_create(
            self,
            param_create_seller_resource_request=None
    ):
        """
        商家资源创建（云打印开源存储）
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        商家资源创建接口(云打印开源存储)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27426

        :param param_create_seller_resource_request: 商家创建资源参数
        """
        return self._top_request(
            "cainiao.openstorage.seller.resource.create",
            {
                "param_create_seller_resource_request": param_create_seller_resource_request
            }
        )

    def cainiao_openstorage_resource_publish(
            self,
            param_publish_resource_request=None
    ):
        """
        isv和商家资源发布（云打印开源存储）
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        isv和商家资源发布接口(云打印开源存储)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27427

        :param param_publish_resource_request: 资源发布参数
        """
        return self._top_request(
            "cainiao.openstorage.resource.publish",
            {
                "param_publish_resource_request": param_publish_resource_request
            }
        )

    def cainiao_cloudprint_templates_migrate(
            self,
            tempalte_id='',
            custom_area_name='',
            custom_area_content=''
    ):
        """
        云打印模板迁移接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27500

        :param tempalte_id: 标准电子面单模板的id
        :param custom_area_name: 自定义区名称
        :param custom_area_content: 自定义区内容
        """
        return self._top_request(
            "cainiao.cloudprint.templates.migrate",
            {
                "tempalte_id": tempalte_id,
                "custom_area_name": custom_area_name,
                "custom_area_content": custom_area_content
            }
        )

    def cainiao_cloudprint_customarea_update(
            self,
            custom_area_id,
            custom_area_name,
            custom_area_content
    ):
        """
        自定义区内容更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27523

        :param custom_area_id: 自定义区id（不可修改）
        :param custom_area_name: 自定义区名称（可修改）
        :param custom_area_content: 自定义区内容（可修改）
        """
        return self._top_request(
            "cainiao.cloudprint.customarea.update",
            {
                "custom_area_id": custom_area_id,
                "custom_area_name": custom_area_name,
                "custom_area_content": custom_area_content
            }
        )

    def cainiao_openstorage_seller_resourcedetail_get(
            self,
            seller_resource_id=''
    ):
        """
        商家资源详情查询（云打印开源存储）
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        商家资源详情获取（云打印开源存储）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27538

        :param seller_resource_id: 商家资源id
        """
        return self._top_request(
            "cainiao.openstorage.seller.resourcedetail.get",
            {
                "seller_resource_id": seller_resource_id
            }
        )

    def cainiao_openstorage_isv_resourcedetail_get(
            self,
            isv_resource_id=''
    ):
        """
        isv资源详情获取（云打印开源存储）
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        isv资源详情查询（云打印开源存储）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27539

        :param isv_resource_id: isv资源id
        """
        return self._top_request(
            "cainiao.openstorage.isv.resourcedetail.get",
            {
                "isv_resource_id": isv_resource_id
            }
        )

    def cainiao_vms_service_collectvehicleroute(
            self,
            vechile_number,
            longitude,
            latitude,
            col_date,
            cp_code,
            device_id=''
    ):
        """
        cp车辆轨迹写入接口
        提供给cp写入车辆轨迹
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27612

        :param vechile_number: 车牌号
        :param longitude: 经度
        :param latitude: 纬度
        :param col_date: 数据 采集时间
        :param cp_code: cp编码
        :param device_id: 车辆唯一标识号
        """
        return self._top_request(
            "cainiao.vms.service.collectvehicleroute",
            {
                "vechile_number": vechile_number,
                "longitude": longitude,
                "latitude": latitude,
                "col_date": col_date,
                "cp_code": cp_code,
                "device_id": device_id
            }
        )

    def cainiao_cloudprint_single_customarea_get(
            self,
            seller_id=''
    ):
        """
        获取商家单一自定义区
        商家所有快递公司模板只有一个自定义区
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28068

        :param seller_id: 这是商家用户id
        """
        return self._top_request(
            "cainiao.cloudprint.single.customarea.get",
            {
                "seller_id": seller_id
            }
        )

    def cainiao_smartdelivery_strategy_i_query(
            self,
            send_address=None
    ):
        """
        查询智能发货引擎发货策略设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28225

        :param send_address: 发货地址
        """
        return self._top_request(
            "cainiao.smartdelivery.strategy.i.query",
            {
                "send_address": send_address
            },
            result_processor=lambda x: x["delivery_strategy_info_list"]
        )

    def cainiao_smartdelivery_priceoffer_i_update(
            self,
            cp_price_info
    ):
        """
        设置或更新智能发货引擎价格信息模板
        智能发货引擎更新价格信息模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28226

        :param cp_price_info: 物流公司价格信息
        """
        return self._top_request(
            "cainiao.smartdelivery.priceoffer.i.update",
            {
                "cp_price_info": cp_price_info
            },
            result_processor=lambda x: x["successful"]
        )

    def cainiao_smartdelivery_cocps_i_query(
            self,
            send_address=None
    ):
        """
        获取电子面单订购关系中智能发货引擎支持的合作物流公司
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28227

        :param send_address: 发货地址
        """
        return self._top_request(
            "cainiao.smartdelivery.cocps.i.query",
            {
                "send_address": send_address
            },
            result_processor=lambda x: x["smart_delivery_collaborate_cps_info_list"]
        )

    def cainiao_smartdelivery_strategy_i_update(
            self,
            delivery_strategy_info
    ):
        """
        设置或更新智能发货引擎发货策略
        更新智能发货引擎发货策略设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28230

        :param delivery_strategy_info: 发货策略信息
        """
        return self._top_request(
            "cainiao.smartdelivery.strategy.i.update",
            {
                "delivery_strategy_info": delivery_strategy_info
            },
            result_processor=lambda x: x["successful"]
        )

    def cainiao_smartdelivery_priceoffer_i_query(
            self,
            query_cp_price_info_request
    ):
        """
        查询智能发货引擎商家价格信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28231

        :param query_cp_price_info_request: 请求参数
        """
        return self._top_request(
            "cainiao.smartdelivery.priceoffer.i.query",
            {
                "query_cp_price_info_request": query_cp_price_info_request
            },
            result_processor=lambda x: x["cp_price_info_list"]
        )

    def cainiao_smartdelivery_cp_i_modify(
            self,
            modify_smart_delivery_cp_request
    ):
        """
        智能发货引擎修改cp信息接口
        商家修改智能发货引擎推荐的cp
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28298

        :param modify_smart_delivery_cp_request: 修改智选CP请求
        """
        return self._top_request(
            "cainiao.smartdelivery.cp.i.modify",
            {
                "modify_smart_delivery_cp_request": modify_smart_delivery_cp_request
            },
            result_processor=lambda x: x["modify_smart_delivery_cp_response"]
        )

    def cainiao_smartdelivery_i_get(
            self,
            smart_delivery_batch_request
    ):
        """
        智能发货引擎获取接口（获取智选cp和电子面单信息）
        获取智选cp和电子面单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28302

        :param smart_delivery_batch_request: <a href='http://open.taobao.com/docs/doc.htm?treeId=319&articleId=106295&docType=1'>智能发货引擎</a>批量请求参数
        """
        return self._top_request(
            "cainiao.smartdelivery.i.get",
            {
                "smart_delivery_batch_request": smart_delivery_batch_request
            },
            result_processor=lambda x: x["smart_delivery_response_wrapper_list"]
        )

    def cainiao_smartdelivery_issubscribe_i_query(
            self
    ):
        """
        查询商家时候是否订购订购智能发货引擎服务
        查询商家时候订购智能发货引擎服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29043

        """
        return self._top_request(
            "cainiao.smartdelivery.issubscribe.i.query",
            result_processor=lambda x: x["successful"]
        )

    def cainiao_smartdelivery_strategy_warehouse_i_update(
            self,
            delivery_strategy_set_request
    ):
        """
        智能发货引擎策略仓设置
        智能发货引擎发货策略设置仓维度
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29294

        :param delivery_strategy_set_request: 智能发货设置请求参数
        """
        return self._top_request(
            "cainiao.smartdelivery.strategy.warehouse.i.update",
            {
                "delivery_strategy_set_request": delivery_strategy_set_request
            },
            result_processor=lambda x: x["warehouse_info"]
        )

    def cainiao_smartdelivery_strategy_warehouse_i_query(
            self,
            param_query_delivery_strategy_request=None
    ):
        """
        智能发货引擎仓维度策略查询接口
        智能发货引擎仓维度策略查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29295

        :param param_query_delivery_strategy_request: 查询请求参数
        """
        return self._top_request(
            "cainiao.smartdelivery.strategy.warehouse.i.query",
            {
                "param_query_delivery_strategy_request": param_query_delivery_strategy_request
            },
            result_processor=lambda x: x["delivery_strategy_info_list"]
        )

    def cainiao_smartdelivery_strategy_warehouse_i_delete(
            self,
            warehouse_id=''
    ):
        """
        删除智能发货引擎仓策略
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29306

        :param warehouse_id: 仓id
        """
        return self._top_request(
            "cainiao.smartdelivery.strategy.warehouse.i.delete",
            {
                "warehouse_id": warehouse_id
            },
            result_processor=lambda x: x["is_delete_success"]
        )

    def cainiao_smartdelivery_seller_status_i_query(
            self
    ):
        """
        查询智能发货引擎商家状态信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31231

        """
        return self._top_request(
            "cainiao.smartdelivery.seller.status.i.query",
            result_processor=lambda x: x["seller_status"]
        )

    def cainiao_cloudprint_cmdprint_render(
            self,
            params
    ):
        """
        生成打印机渲染命令（通过打印机命令打印）
        isv 进行无线打印，需要将渲染数据传给打印机，通过生成打印机命令的方式能够最大限度的减少移动设备和打印机之间通信数据量。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34750

        :param params: 参数对象
        """
        return self._top_request(
            "cainiao.cloudprint.cmdprint.render",
            {
                "params": params
            }
        )


class TbDianYingPiao(DingTalkBaseAPI):
    """
    电影票API
    """

    def taobao_film_tfbackyard_cardschedule_update(
            self,
            json_data
    ):
        """
        CGV影城卡排期数据传输
        cgv影城卡排期价格数据传输API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28092

        :param json_data: CGV影城卡价格数据
        """
        return self._top_request(
            "taobao.film.tfbackyard.cardschedule.update",
            {
                "json_data": json_data
            }
        )

    def taobao_film_lottery_draw(
            self,
            account_no,
            account_type,
            lottery_mix_id,
            platform,
            biz_data=''
    ):
        """
        淘票票抽奖发放权益API
        对外第三方合作渠道通过抽奖形式发码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32736

        :param account_no: 账号ID
        :param account_type: 账号类型（TAOBAO\ALIPAY\PHONE\TAOBAO_NAME）
        :param lottery_mix_id: 活动ID
        :param platform: 平台类型
        :param biz_data: 扩展参数
        """
        return self._top_request(
            "taobao.film.lottery.draw",
            {
                "account_no": account_no,
                "account_type": account_type,
                "lottery_mix_id": lottery_mix_id,
                "platform": platform,
                "biz_data": biz_data
            }
        )

    def taobao_film_lottery_rule_query(
            self,
            account_type,
            channel,
            account_no
    ):
        """
        淘票票抽奖活动查询API(渠道)
        淘票票抽奖活动查询API，渠道维度查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33209

        :param account_type: 账号类型（TAOBAO\ALIPAY\PHONE）
        :param channel: 渠道来源
        :param account_no: 账号ID
        """
        return self._top_request(
            "taobao.film.lottery.rule.query",
            {
                "account_type": account_type,
                "channel": channel,
                "account_no": account_no
            }
        )

    def taobao_film_data_third_party_refund_order(
            self,
            user_id,
            platform,
            ext_user_id,
            ext_order_id,
            tb_order_id,
            refund_amount,
            refund_service_fee,
            params=''
    ):
        """
        退票接口
        淘票票第三方退票接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36938

        :param user_id: 淘宝账号ID，此ID是一串数字。可自行百度查看如何获取或者咨询淘票票技术人员提供
        :param platform: 淘票票分配的渠道码
        :param ext_user_id: 退票身份ID，用于标识一个购票用户的身份，该参数需要跟锁座接口的ext_order_id参数一致，否则下单会失败。外部渠道需保证该参数的唯一性及准确性，下单出票接口会利用该参数做冥等性判断，如果由于外部渠道自身传入的参数有问题而导致的下单出票接口返回的结果有误，需要外部渠道自己承担损失
        :param ext_order_id: 退款时候需要传入第三方的订单号。外部渠道需保证该参数的唯一性和准确性
        :param tb_order_id: 下单时返回的淘宝订单号参数
        :param refund_amount: 退款金额，以分为单位，为指定的退款订单的金额
        :param refund_service_fee: 退款服务费，目前都为0
        :param params: 目前可以暂时不填参数
        """
        return self._top_request(
            "taobao.film.data.third.party.refund.order",
            {
                "user_id": user_id,
                "platform": platform,
                "ext_user_id": ext_user_id,
                "ext_order_id": ext_order_id,
                "tb_order_id": tb_order_id,
                "refund_amount": refund_amount,
                "refund_service_fee": refund_service_fee,
                "params": params
            }
        )

    def taobao_film_lottery_sendcode(
            self,
            param_f_code_merchant_send_code_request=None
    ):
        """
        淘票票外部直发券
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37323

        :param param_f_code_merchant_send_code_request: 外部商户发码请求
        """
        return self._top_request(
            "taobao.film.lottery.sendcode",
            {
                "param_f_code_merchant_send_code_request": param_f_code_merchant_send_code_request
            }
        )

    def taobao_film_koubei_cinema_getactivity(
            self,
            user_id='',
            account_type='',
            city_code='',
            platform='',
            cinema_ids='',
            params=''
    ):
        """
        口碑-影院营销数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39237

        :param user_id: 用户账号
        :param account_type: 账号类型
        :param city_code: 城市编码
        :param platform: 平台
        :param cinema_ids: 影院ID集合
        :param params: 附加参数
        """
        return self._top_request(
            "taobao.film.koubei.cinema.getactivity",
            {
                "user_id": user_id,
                "account_type": account_type,
                "city_code": city_code,
                "platform": platform,
                "cinema_ids": cinema_ids,
                "params": params
            }
        )


class TbALiTongXin(DingTalkBaseAPI):
    """
    阿里通信API
    """

    def alibaba_aliqin_flow_wallet_sign(
            self,
            user_nick
    ):
        """
        流量平台用户签约情况查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24030

        :param user_nick: 用户昵称
        """
        return self._top_request(
            "alibaba.aliqin.flow.wallet.sign",
            {
                "user_nick": user_nick
            },
            result_processor=lambda x: x["value"]
        )

    def alibaba_aliqin_flow_publish(
            self,
            user_id,
            flow,
            reason,
            serial,
            always='false'
    ):
        """
        流量发放(用户id)
        阿里通信流量下发功能，允许用户补发
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24350

        :param user_id: 用户id
        :param flow: 流量
        :param reason: 原因
        :param serial: 唯一流水号（字母+数字）
        :param always: 设置true为始终发送成功
        """
        return self._top_request(
            "alibaba.aliqin.flow.publish",
            {
                "user_id": user_id,
                "flow": flow,
                "reason": reason,
                "serial": serial,
                "always": always
            },
            result_processor=lambda x: x["value"]
        )

    def alibaba_aliqin_flow_wallet_send_flow(
            self,
            serial,
            flow,
            reason,
            buyer_nick='',
            real_nick='',
            always='false'
    ):
        """
        流量发放
        阿里通信流量下发功能，允许用户补发
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24559

        :param serial: 唯一流水号，字母+数字组合
        :param flow: 流量
        :param reason: 购物送
        :param buyer_nick: 混淆用户名
        :param real_nick: 真实用户名称，如果填写这个字段，buyer_nick失效
        :param always: 设置true为始终发送成功
        """
        return self._top_request(
            "alibaba.aliqin.flow.wallet.send.flow",
            {
                "serial": serial,
                "flow": flow,
                "reason": reason,
                "buyer_nick": buyer_nick,
                "real_nick": real_nick,
                "always": always
            },
            result_processor=lambda x: x["value"]
        )

    def alibaba_aliqin_flow_wallet_grade(
            self,
            phone_num
    ):
        """
        获取流量档位
        获取直充流量档位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24930

        :param phone_num: 手机号码
        """
        return self._top_request(
            "alibaba.aliqin.flow.wallet.grade",
            {
                "phone_num": phone_num
            },
            result_processor=lambda x: x["grade"]
        )

    def alibaba_aliqin_flow_wallet_charge(
            self,
            phone_num,
            reason,
            grade_id,
            out_recharge_id,
            channel_id
    ):
        """
        流量直充
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24932

        :param phone_num: 充值号码
        :param reason: 原因
        :param grade_id: 档位id
        :param out_recharge_id: 唯一流水号
        :param channel_id: 渠道id
        """
        return self._top_request(
            "alibaba.aliqin.flow.wallet.charge",
            {
                "phone_num": phone_num,
                "reason": reason,
                "grade_id": grade_id,
                "out_recharge_id": out_recharge_id,
                "channel_id": channel_id
            },
            result_processor=lambda x: x["charge"]
        )

    def alibaba_aliqin_flow_wallet_query_charge(
            self,
            out_recharge_id,
            channel_id
    ):
        """
        查询流量充值状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24933

        :param out_recharge_id: 唯一流水号
        :param channel_id: 渠道id
        """
        return self._top_request(
            "alibaba.aliqin.flow.wallet.query.charge",
            {
                "out_recharge_id": out_recharge_id,
                "channel_id": channel_id
            },
            result_processor=lambda x: x["charge"]
        )

    def alibaba_aliqin_ta_sms_num_send(
            self,
            sms_type,
            sms_free_sign_name,
            rec_num,
            sms_template_code,
            extend='',
            sms_param='',
            extend_code='',
            extend_name=''
    ):
        """
        短信发送
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25521

        :param sms_type: 类型，normal：短信
        :param sms_free_sign_name: 短信签名
        :param rec_num: 接收号码
        :param sms_template_code: 短信模板CODE
        :param extend: 公共回传参数
        :param sms_param: 短信模板变量，AckNum是变量参数
        :param extend_code: 商家自定义扩展码
        :param extend_name: 商家自定义扩展名,例如店铺nick
        """
        return self._top_request(
            "alibaba.aliqin.ta.sms.num.send",
            {
                "sms_type": sms_type,
                "sms_free_sign_name": sms_free_sign_name,
                "rec_num": rec_num,
                "sms_template_code": sms_template_code,
                "extend": extend,
                "sms_param": sms_param,
                "extend_code": extend_code,
                "extend_name": extend_name
            }
        )

    def alibaba_aliqin_thf_send(
            self,
            thf_request_i_s_v_d_o
    ):
        """
        淘话费发放接口
        提供外部商户发放淘话费
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25673

        :param thf_request_i_s_v_d_o: 淘话费发放参数
        """
        return self._top_request(
            "alibaba.aliqin.thf.send",
            {
                "thf_request_i_s_v_d_o": thf_request_i_s_v_d_o
            }
        )

    def alibaba_aliqin_thf_hasassignthf(
            self
    ):
        """
        判断是否签约淘话费
        进行淘话费的发放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25674

        """
        return self._top_request(
            "alibaba.aliqin.thf.hasassignthf",
            result_processor=lambda x: x["common_result"]
        )

    def alibaba_aliqin_thf_sendbymixnick(
            self,
            buyer_nick,
            biz_order_id,
            active_id,
            active_name,
            thf_fee,
            exprie_date='',
            grant_date='',
            ext_paras=''
    ):
        """
        淘话费混淆nick发放接口
        利用混淆nick发放淘话费
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25813

        :param buyer_nick: 买家nick
        :param biz_order_id: 订单ID，如无ID提供自定义数字，不能重复
        :param active_id: 活动id，唯一标示一个活动的数字，一个activeName对应一个activeId，取1-9999内的数字即可
        :param active_name: 活动名称
        :param thf_fee: 淘话费
        :param exprie_date: 过期时间
        :param grant_date: 发放时间
        :param ext_paras: 额外参数
        """
        return self._top_request(
            "alibaba.aliqin.thf.sendbymixnick",
            {
                "buyer_nick": buyer_nick,
                "biz_order_id": biz_order_id,
                "active_id": active_id,
                "active_name": active_name,
                "thf_fee": thf_fee,
                "exprie_date": exprie_date,
                "grant_date": grant_date,
                "ext_paras": ext_paras
            }
        )

    def alibaba_wtt_order_contract_subscribe(
            self,
            distribution_order_model=None
    ):
        """
        分销商合约生产
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25844

        :param distribution_order_model: 分销商合约生产
        """
        return self._top_request(
            "alibaba.wtt.order.contract.subscribe",
            {
                "distribution_order_model": distribution_order_model
            },
            result_processor=lambda x: x["issuccess"]
        )

    def alibaba_aliqin_ta_sms_num_query(
            self,
            rec_num,
            query_date,
            current_page,
            page_size,
            biz_id=''
    ):
        """
        短信查询
        查询短信发送揭露
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26038

        :param rec_num: 短信接收号码
        :param query_date: 短信发送日期，支持近30天记录查询，格式yyyyMMdd
        :param current_page: 分页参数,页码
        :param page_size: 分页参数，每页数量。最大值50
        :param biz_id: 短信发送流水
        """
        return self._top_request(
            "alibaba.aliqin.ta.sms.num.query",
            {
                "rec_num": rec_num,
                "query_date": query_date,
                "current_page": current_page,
                "page_size": page_size,
                "biz_id": biz_id
            }
        )

    def alibaba_tianji_supplier_order_result(
            self,
            supplier_order_result_model=None
    ):
        """
        供应商处理订单接口（订购成功/失败、发货）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26042

        :param supplier_order_result_model: 供应商处理订单结果反馈参数
        """
        return self._top_request(
            "alibaba.tianji.supplier.order.result",
            {
                "supplier_order_result_model": supplier_order_result_model
            },
            result_processor=lambda x: x["model"]
        )

    def alibaba_tianji_supplier_order_query(
            self,
            param_supplier_top_query_model=None
    ):
        """
        查询供应商订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26048

        :param param_supplier_top_query_model: 订单查询入参
        """
        return self._top_request(
            "alibaba.tianji.supplier.order.query",
            {
                "param_supplier_top_query_model": param_supplier_top_query_model
            }
        )

    def alibaba_aliqin_flow_wallet_charge_rule(
            self,
            phone_num='',
            reason='',
            grade_id='',
            out_recharge_id='',
            channel_id=''
    ):
        """
        流量钱包直充（根据号码归属地省份路由）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26069

        :param phone_num: 号码
        :param reason: 原因
        :param grade_id: 档位id
        :param out_recharge_id: 唯一流水号
        :param channel_id: 渠道id（运营分配）
        """
        return self._top_request(
            "alibaba.aliqin.flow.wallet.charge.rule",
            {
                "phone_num": phone_num,
                "reason": reason,
                "grade_id": grade_id,
                "out_recharge_id": out_recharge_id,
                "channel_id": channel_id
            },
            result_processor=lambda x: x["charge"]
        )

    def alibaba_tianji_distributor_order_submit(
            self,
            order_no,
            item_serial_no='',
            product_serial_no=''
    ):
        """
        分销商提交受理订单
        分销商提交受理订单，如合约订购、充值受理等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26115

        :param order_no: 淘宝交易订单号
        :param item_serial_no: 商品编码，如手机串号
        :param product_serial_no: 供应商产品编码，如SIM卡号
        """
        return self._top_request(
            "alibaba.tianji.distributor.order.submit",
            {
                "order_no": order_no,
                "item_serial_no": item_serial_no,
                "product_serial_no": product_serial_no
            }
        )

    def alibaba_chongzhi_queryecards(
            self,
            mobile='0',
            client_source='taobao'
    ):
        """
        查询指定商家的可用的话费宝贝接口
        查询指定商家的可用的话费宝贝
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26185

        :param mobile: 号码
        :param client_source: 来源
        """
        return self._top_request(
            "alibaba.chongzhi.queryecards",
            {
                "mobile": mobile,
                "client_source": client_source
            }
        )

    def alibaba_wtt_user_regioninfo_byip_get(
            self,
            ip
    ):
        """
        根据ip获取省市信息
        通过ip获取省市信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26186

        :param ip: ip地址
        """
        return self._top_request(
            "alibaba.wtt.user.regioninfo.byip.get",
            {
                "ip": ip
            },
            result_processor=lambda x: x["model"]
        )

    def alibaba_tianji_supplier_order_delivery(
            self,
            param_distribution_order_logistics_model=None
    ):
        """
        天机供应商发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26474

        :param param_distribution_order_logistics_model: 物流信息
        """
        return self._top_request(
            "alibaba.tianji.supplier.order.delivery",
            {
                "param_distribution_order_logistics_model": param_distribution_order_logistics_model
            },
            result_processor=lambda x: x["model"]
        )

    def alibaba_aliqin_ta_number_singlecallbyvoice(
            self,
            called_num,
            called_show_num,
            voice_code,
            params=''
    ):
        """
        根据号码tts单呼
        根据号码语音单呼
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26678

        :param called_num: 单呼号码
        :param called_show_num: 显示号码
        :param voice_code: 语音文件code
        :param params: 上下文参数 示例:{'extend':'回传参数'} extend为扩展信息作为回传参数的key
        """
        return self._top_request(
            "alibaba.aliqin.ta.number.singlecallbyvoice",
            {
                "called_num": called_num,
                "called_show_num": called_show_num,
                "voice_code": voice_code,
                "params": params
            }
        )

    def alibaba_aliqin_ta_number_singlecallbytts(
            self,
            called_num,
            called_show_num,
            tts_code,
            params=''
    ):
        """
        根据号码tts单呼
        将语音验证码和语音通知发布至聚石塔渠道
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26685

        :param called_num: 被叫号码
        :param called_show_num: 显示号码
        :param tts_code: tts文本模板code
        :param params: 上下文参数,tts模板含有变量的, 此参数需填写。示例:{'date':'2015年 ' ,'name':'测试','extend':'回传参数'} date、name 为模板里的变量名作为key,extend为扩展信息作为回传参数的key
        """
        return self._top_request(
            "alibaba.aliqin.ta.number.singlecallbytts",
            {
                "called_num": called_num,
                "called_show_num": called_show_num,
                "tts_code": tts_code,
                "params": params
            }
        )

    def alibaba_chongzhi_queryflow(
            self,
            mobile='0',
            client_source='taobao'
    ):
        """
        查询指定商家的可用的流量宝贝接口
        查询指定商家的可用的流量宝贝
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26721

        :param mobile: 号码
        :param client_source: 来源
        """
        return self._top_request(
            "alibaba.chongzhi.queryflow",
            {
                "mobile": mobile,
                "client_source": client_source
            }
        )

    def alibaba_aliqin_fc_voice_record_geturl(
            self,
            call_id
    ):
        """
        录音文件下载
        完成录音文件的下载地址获取操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27026

        :param call_id: 一次通话的唯一标识id
        """
        return self._top_request(
            "alibaba.aliqin.fc.voice.record.geturl",
            {
                "call_id": call_id
            }
        )

    def alibaba_alitj_order_realnamecard_info_submit(
            self,
            order_no,
            iccid
    ):
        """
        阿里实人认证卡片信息回传
        阿里实人认证卡片信息回传。ISP相关商家在线对接阿里通信的实人认证功能，在线提交订单对应运营商的合约订购相关信息，以便完成在线使用实人认证功能。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27356

        :param order_no: 淘宝订单号
        :param iccid: sim卡iccid（一般为18位到20位）
        """
        return self._top_request(
            "alibaba.alitj.order.realnamecard.info.submit",
            {
                "order_no": order_no,
                "iccid": iccid
            }
        )

    def alibaba_wt_order_exchange_partner_create(
            self,
            out_exchange_model
    ):
        """
        商户兑换接口（已作废，请使用alibaba.alicom.order.exchange.create）
        商户积分兑换接口（已作废，请使用alibaba.alicom.order.exchange.create）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27560

        :param out_exchange_model: model入参
        """
        return self._top_request(
            "alibaba.wt.order.exchange.partner.create",
            {
                "out_exchange_model": out_exchange_model
            }
        )

    def alibaba_wt_order_exchange_partner_createbymixnick(
            self,
            out_exchange_model=None
    ):
        """
        外部商家兑换混淆nick接口（已作废，请使用alibaba.alicom.exchange.createbymixnick）
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        外部商家兑换混淆nick接口，已作废，请使用alibaba.alicom.exchange.createbymixnick
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27668

        :param out_exchange_model: model入参
        """
        return self._top_request(
            "alibaba.wt.order.exchange.partner.createbymixnick",
            {
                "out_exchange_model": out_exchange_model
            }
        )

    def alibaba_aliqin_flow_wallet_consume(
            self,
            flow,
            serial_no,
            reason='',
            remark=''
    ):
        """
        流量扣减
        流量钱包流量扣减接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27673

        :param flow: 扣减流量值
        :param serial_no: 扣减流水号
        :param reason: 扣减原因
        :param remark: 备注
        """
        return self._top_request(
            "alibaba.aliqin.flow.wallet.consume",
            {
                "flow": flow,
                "serial_no": serial_no,
                "reason": reason,
                "remark": remark
            },
            result_processor=lambda x: x["value"]
        )

    def taobao_wt_trade_order_resultcallback(
            self,
            param0=None
    ):
        """
        商家回调接口
        阿里通信定制服务，商家发货后进行调用该接口，用于自动发货并确认收货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28065

        :param param0: 系统自动生成
        """
        return self._top_request(
            "taobao.wt.trade.order.resultcallback",
            {
                "param0": param0
            }
        )

    def alibaba_base_order_supplier_notify(
            self,
            param_flow_suppllier_notify_model=None
    ):
        """
        阿里通信运营商信息回传
        接收阿里通信流量运营商信息回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28207

        :param param_flow_suppllier_notify_model: 入参对象
        """
        return self._top_request(
            "alibaba.base.order.supplier.notify",
            {
                "param_flow_suppllier_notify_model": param_flow_suppllier_notify_model
            }
        )

    def alibaba_aliqin_large_flow_grade(
            self,
            flow_type='1',
            channel_type='1',
            isp='1',
            biz_type='2'
    ):
        """
        流量大包档位查询接口
        查询流量钱包支持的档位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28954

        :param flow_type: 流量类型1-全国流量
        :param channel_type: 通道类型，1-全国通道
        :param isp: 运营商类型，1-三网通
        :param biz_type: 业务类型，2-流量大包
        """
        return self._top_request(
            "alibaba.aliqin.large.flow.grade",
            {
                "flow_type": flow_type,
                "channel_type": channel_type,
                "isp": isp,
                "biz_type": biz_type
            }
        )

    def alibaba_aliqin_large_flow_send(
            self,
            serial,
            grade_id,
            buyer_nick='',
            real_nick='',
            reason='',
            always='true'
    ):
        """
        流量大包发放接口
        提供给ISV发放流量大包的接口，ISV调用该接口给用户发送流量包
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28956

        :param serial: 唯一流水号
        :param grade_id: 档位Id，从列表接口中获取
        :param buyer_nick: 混淆用户名，淘宝用户Nick
        :param real_nick: 真实用户名称，如果填写这个字段，buyer_nick失效
        :param reason: 发送原因
        :param always: always参数值，默认是true，购物送的场景传递1
        """
        return self._top_request(
            "alibaba.aliqin.large.flow.send",
            {
                "serial": serial,
                "grade_id": grade_id,
                "buyer_nick": buyer_nick,
                "real_nick": real_nick,
                "reason": reason,
                "always": always
            }
        )

    def alibaba_aliqin_ta_voice_num_doublecall(
            self,
            caller_num,
            caller_show_num,
            called_num,
            called_show_num,
            session_time_out='',
            extend=''
    ):
        """
        聚石塔语音双呼接口
        根据传入的主叫号码与被叫号码，由系统依次向主叫号码与被叫号码发起呼叫，双方都应答后，开始一对一通话并开始计费。使用前需要在阿里大于管理中心添加呼叫双方的显示号码。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28968

        :param caller_num: 主叫号码，支持国内手机号与固话号码,格式如下057188773344,13911112222,4001112222,95500
        :param caller_show_num: 主叫号码侧的号码显示，传入的显示号码必须是阿里大于“管理中心-号码管理”中申请通过的号码。显示号码格式如下057188773344，4001112222，95500
        :param called_num: 被叫号码，支持国内手机号与固话号码,格式如下057188773344,13911112222,4001112222,95500
        :param called_show_num: 被叫号码侧的号码显示，传入的显示号码可以是阿里大于“管理中心-号码管理”中申请通过的号码。显示号码格式如下057188773344，4001112222，95500。显示号码也可以为主叫号码。
        :param session_time_out: 通话超时时长，如接通后到达120秒时，通话会因为超时自动挂断。若无需设置超时时长，可不传。
        :param extend: 公共回传参数，在“消息返回”中会透传回该参数；举例：用户可以传入自己下级的会员ID，在消息返回时，该会员ID会包含在内，用户可以根据该会员ID识别是哪位会员使用了你的应用
        """
        return self._top_request(
            "alibaba.aliqin.ta.voice.num.doublecall",
            {
                "caller_num": caller_num,
                "caller_show_num": caller_show_num,
                "called_num": called_num,
                "called_show_num": called_show_num,
                "session_time_out": session_time_out,
                "extend": extend
            }
        )

    def alibaba_alicom_offline_commission_query(
            self,
            shop_id,
            start_time,
            end_time
    ):
        """
        线下拉新佣金查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        线下渠道用户查询指定店铺指定时间段拉新的佣金
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28986

        :param shop_id: 店铺id
        :param start_time: 开始时间
        :param end_time: 截止时间
        """
        return self._top_request(
            "alibaba.alicom.offline.commission.query",
            {
                "shop_id": shop_id,
                "start_time": start_time,
                "end_time": end_time
            }
        )

    def alibaba_wt_order_exchange_partner_checktbuser(
            self,
            out_exchange_model=None
    ):
        """
        积分兑换校验淘宝账号是否存在
        积分兑换之前校验淘宝账号是否存在
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29279

        :param out_exchange_model: model入参
        """
        return self._top_request(
            "alibaba.wt.order.exchange.partner.checktbuser",
            {
                "out_exchange_model": out_exchange_model
            }
        )

    def alibaba_alicom_order_exchange_create(
            self,
            exchange_model=None
    ):
        """
        代理商积分兑换接口
        代理商调用该接口来进行积分兑换
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29683

        :param exchange_model: 入参
        """
        return self._top_request(
            "alibaba.alicom.order.exchange.create",
            {
                "exchange_model": exchange_model
            }
        )

    def alibaba_aliqin_flow_alipay_publish(
            self,
            alipay_id,
            serial,
            flow,
            reason
    ):
        """
        流量钱包流量发放-面向支付宝用户
        用户淘宝流量钱包商家给支付宝用户发放流量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30199

        :param alipay_id: 用户的支付宝ID
        :param serial: 外部流水号，用来做幂等校验
        :param flow: 发放的流量数，单位MB
        :param reason: 发放原因
        """
        return self._top_request(
            "alibaba.aliqin.flow.alipay.publish",
            {
                "alipay_id": alipay_id,
                "serial": serial,
                "flow": flow,
                "reason": reason
            }
        )

    def alibaba_aliqin_flow_alipay_isbindingtbaccount(
            self,
            alipay_id
    ):
        """
        判断支付宝用户是否绑定淘宝账号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30292

        :param alipay_id: 支付宝ID
        """
        return self._top_request(
            "alibaba.aliqin.flow.alipay.isbindingtbaccount",
            {
                "alipay_id": alipay_id
            }
        )

    def alibaba_aliqin_fc_voice_num_cancelcall(
            self,
            call_id
    ):
        """
        取消呼叫
        当通话通过阿里大于呼出后可以通过调用这个接口取消本次通话
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30773

        :param call_id: 呼叫唯一id
        """
        return self._top_request(
            "alibaba.aliqin.fc.voice.num.cancelcall",
            {
                "call_id": call_id
            }
        )

    def alibaba_alicom_order_checkorderinfo(
            self,
            trade_status,
            shop_name,
            user_nick,
            biz_order_id,
            item_id
    ):
        """
        金融购机订单信息校验
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31279

        :param trade_status: 订单状态1: 等待买家付款   2:等待卖家发货   4:已退款  6: 交易成功
        :param shop_name: 商家的店铺名
        :param user_nick: 买家昵称
        :param biz_order_id: 淘宝交易订单id
        :param item_id: 宝贝id
        """
        return self._top_request(
            "alibaba.alicom.order.checkorderinfo",
            {
                "trade_status": trade_status,
                "shop_name": shop_name,
                "user_nick": user_nick,
                "biz_order_id": biz_order_id,
                "item_id": item_id
            }
        )

    def alibaba_aliqin_fc_iot_clear_auth(
            self,
            bill_source,
            bill_real,
            iccid
    ):
        """
        擦除物联卡实名认证信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        针对物联卡业务中的共享设备，抹掉实名认证信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32576

        :param bill_source: 物联卡固定写ICCID
        :param bill_real: 同填ICCID值
        :param iccid: 物联卡对应的ICCID
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.clear.auth",
            {
                "bill_source": bill_source,
                "bill_real": bill_real,
                "iccid": iccid
            }
        )

    def alibaba_aliqin_secret_baicells_outgw(
            self,
            imsi,
            title,
            content,
            push_type
    ):
        """
        退网接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        佰才邦退网接口调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33217

        :param imsi: imsi号
        :param title: 标题
        :param content: 内容
        :param push_type: 1：针对推送 2：广播推送
        """
        return self._top_request(
            "alibaba.aliqin.secret.baicells.outgw",
            {
                "imsi": imsi,
                "title": title,
                "content": content,
                "push_type": push_type
            }
        )

    def alibaba_aliqin_secret_baicells_ingw(
            self,
            imsi,
            title,
            content,
            push_type
    ):
        """
        入网接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        佰才邦入网退网接口调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33218

        :param imsi: imsi号
        :param title: 标题
        :param content: 内容
        :param push_type: 1：针对推送 2：广播推送
        """
        return self._top_request(
            "alibaba.aliqin.secret.baicells.ingw",
            {
                "imsi": imsi,
                "title": title,
                "content": content,
                "push_type": push_type
            }
        )

    def alibaba_aliqin_axb_vendor_push_call_release(
            self,
            end_call_request=None
    ):
        """
        供应商推送通话结束事件
        通话结束挂断的时候，供应商推送通话结束事件给阿里侧
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33494

        :param end_call_request: end_call_request
        """
        return self._top_request(
            "alibaba.aliqin.axb.vendor.push.call.release",
            {
                "end_call_request": end_call_request
            }
        )

    def alibaba_aliqin_axb_vendor_call_control(
            self,
            start_call_request=None
    ):
        """
        转呼控制接口
        转呼控制接口，用于查询小号绑定关系，控制呼叫转接目标
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33507

        :param start_call_request: 转接控制接口request对象
        """
        return self._top_request(
            "alibaba.aliqin.axb.vendor.call.control",
            {
                "start_call_request": start_call_request
            }
        )

    def alibaba_aliqin_flow_cobrandcard_sysn(
            self,
            tb_user_nick,
            phone,
            card_type,
            action
    ):
        """
        联名卡信息同步
        提供给浙江移动同步联名卡信息接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33771

        :param tb_user_nick: 淘宝nick
        :param phone: 手机号码
        :param card_type: 联名卡类型cardType:1-大喵卡,2-小喵卡
        :param action: 1-激活，0-失效
        """
        return self._top_request(
            "alibaba.aliqin.flow.cobrandcard.sysn",
            {
                "tb_user_nick": tb_user_nick,
                "phone": phone,
                "card_type": card_type,
                "action": action
            }
        )

    def alibaba_aliqin_axb_vendor_sms_intercept(
            self,
            sms_intercept_request=None
    ):
        """
        AXB短信托收推送接口
        用于给供应商推送需要托收的短信
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33882

        :param sms_intercept_request: 短信托收结构体
        """
        return self._top_request(
            "alibaba.aliqin.axb.vendor.sms.intercept",
            {
                "sms_intercept_request": sms_intercept_request
            }
        )

    def alibaba_telecom_zhima_ordernotify_callback(
            self,
            param0=None
    ):
        """
        阿里通信芝麻订单通知
        商家通知阿里通信，芝麻订单状态，阿里通信侧进行代扣支付、发货并确认收货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33913

        :param param0: 入参对象
        """
        return self._top_request(
            "alibaba.telecom.zhima.ordernotify.callback",
            {
                "param0": param0
            }
        )

    def alibaba_aliqin_fc_voice_getdetail(
            self,
            call_id,
            prod_id,
            query_date
    ):
        """
        获取呼叫详情
        通过呼叫id获取呼叫相关的数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33933

        :param call_id: 呼叫唯一ID
        :param prod_id: 语音通知为:11000000300006, 语音验证码为:11010000138001, IVR为:11000000300005, 点击拨号为:11000000300004, SIP为:11000000300009
        :param query_date: Unix时间戳，会查询这个时间点对应那一天的记录（单位毫秒）
        """
        return self._top_request(
            "alibaba.aliqin.fc.voice.getdetail",
            {
                "call_id": call_id,
                "prod_id": prod_id,
                "query_date": query_date
            }
        )

    def alibaba_aliqin_axb_vendor_heart_beat(
            self,
            vendor_key,
            status=''
    ):
        """
        供应商心跳上报接口
        供应商上报自己的心跳信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34531

        :param vendor_key: 供应商合作KEY
        :param status: 可选的预留字段
        """
        return self._top_request(
            "alibaba.aliqin.axb.vendor.heart.beat",
            {
                "vendor_key": vendor_key,
                "status": status
            }
        )

    def alibaba_aliqin_offline_customer_add(
            self,
            distribute_id,
            customer_name,
            phone,
            token,
            agent_id='0',
            pob_name='',
            province='',
            city='',
            other_key='',
            ext='',
            activity_code='mamalaxin'
    ):
        """
        系外拉新代理商增加客户经理接口
        阿里通信这边维护了代理商和其对应的客户经理的关系，用于业务处理，开放该接口用于代理商将他们系统下的客户经理信息同步给我们
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36988

        :param distribute_id: 代理商id
        :param customer_name: 客户经理名称
        :param phone: 手机号码
        :param token: token，页面获取到的参数
        :param agent_id: 网点id，如果存在填写，不存在的话，填0即可；注意：如果填写了这个字段，后面的pob_name等会失效；如果为0，下面的网点名称、省份、城市必填
        :param pob_name: 网点名称
        :param province: 网点所在省份
        :param city: 网点所在城市
        :param other_key: 客户经理编码，如果没有可以不填
        :param ext: json类型，Map<String,String>
        :param activity_code: 活动编码
        """
        return self._top_request(
            "alibaba.aliqin.offline.customer.add",
            {
                "distribute_id": distribute_id,
                "customer_name": customer_name,
                "phone": phone,
                "token": token,
                "agent_id": agent_id,
                "pob_name": pob_name,
                "province": province,
                "city": city,
                "other_key": other_key,
                "ext": ext,
                "activity_code": activity_code
            }
        )

    def alibaba_aliqin_axb_vendor_exception_no_sync(
            self,
            secret_no='',
            exception_msg='',
            status='',
            vendor_key=''
    ):
        """
        中心化供应商异常号码状态同步接口
        用于中心化供应商同步异常号码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38346

        :param secret_no: 异常的中间号码
        :param exception_msg: 异常的原因
        :param status: 0-异常状态 1-可恢复正常使用
        :param vendor_key: 供应商KEY
        """
        return self._top_request(
            "alibaba.aliqin.axb.vendor.exception.no.sync",
            {
                "secret_no": secret_no,
                "exception_msg": exception_msg,
                "status": status,
                "vendor_key": vendor_key
            }
        )

    def alibaba_wtt_offline_record_queryagentinfo(
            self,
            order_id,
            phone
    ):
        """
        线下推广充送等业务订单来源
        线下推广充送等业务订单来源的查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43864

        :param order_id: 淘宝订单号
        :param phone: 业务号码
        """
        return self._top_request(
            "alibaba.wtt.offline.record.queryagentinfo",
            {
                "order_id": order_id,
                "phone": phone
            }
        )

    def alibaba_alicom_order_preauthorize_create(
            self,
            pre_authorize_model=None
    ):
        """
        业务办理结果
        授授权:签约结果通知
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44226

        :param pre_authorize_model: 入参
        """
        return self._top_request(
            "alibaba.alicom.order.preauthorize.create",
            {
                "pre_authorize_model": pre_authorize_model
            }
        )

    def alibaba_alicom_order_preauthorize_fulfillment(
            self,
            pre_authorize_model=None
    ):
        """
        履约结果
        预授权-履约结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44240

        :param pre_authorize_model: 入参
        """
        return self._top_request(
            "alibaba.alicom.order.preauthorize.fulfillment",
            {
                "pre_authorize_model": pre_authorize_model
            }
        )

    def alibaba_alicom_order_preauthorize_query_fulfillment(
            self,
            pre_authorize_model=None
    ):
        """
        履约结果查询
        预授权-履约结果查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44241

        :param pre_authorize_model: 入参
        """
        return self._top_request(
            "alibaba.alicom.order.preauthorize.query.fulfillment",
            {
                "pre_authorize_model": pre_authorize_model
            }
        )

    def alibaba_wtt_offline_creditcard_addrecord(
            self,
            credt_card_detail
    ):
        """
        信用卡拉新数据接入
        阿里通信线下渠道信用卡拉新数据录入-开放给合作银行
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44647

        :param credt_card_detail: 请求参数
        """
        return self._top_request(
            "alibaba.wtt.offline.creditcard.addrecord",
            {
                "credt_card_detail": credt_card_detail
            }
        )

    def alibaba_alicom_order_preauthorize_query_fund(
            self,
            pre_authorize_model=None
    ):
        """
        资金流水查询
        预授权-资金流水查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44682

        :param pre_authorize_model: 入参
        """
        return self._top_request(
            "alibaba.alicom.order.preauthorize.query.fund",
            {
                "pre_authorize_model": pre_authorize_model
            }
        )


class TbTVYouXi(DingTalkBaseAPI):
    """
    TV游戏API
    """

    def taobao_deg_game_store_vi_license_activate(
            self,
            device=''
    ):
        """
        激活许可证
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25474

        :param device: 设备编码
        """
        return self._top_request(
            "taobao.deg.game.store.vi.license.activate",
            {
                "device": device
            },
            result_processor=lambda x: x["state"]
        )

    def taobao_deg_game_store_vi_billing_purchase_pay(
            self,
            order_id,
            payment='',
            payment_params='',
            device=''
    ):
        """
        内购订单付款
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25475

        :param order_id: 内购交易流水号
        :param payment: 支付方式
        :param payment_params: 支付参数
        :param device: 设备
        """
        return self._top_request(
            "taobao.deg.game.store.vi.billing.purchase.pay",
            {
                "order_id": order_id,
                "payment": payment,
                "payment_params": payment_params,
                "device": device
            }
        )

    def taobao_deg_game_store_vi_billing_purchase(
            self,
            device='',
            app_order_id='',
            attachment='',
            price='',
            product_id='',
            product_version='',
            quantity=''
    ):
        """
        购买内购商店商品
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25477

        :param device: 设备
        :param app_order_id: 应用交易流水号
        :param attachment: 附加信息
        :param price: 商品价格
        :param product_id: 商品ID
        :param product_version: 商品版本
        :param quantity: 购买数量
        """
        return self._top_request(
            "taobao.deg.game.store.vi.billing.purchase",
            {
                "device": device,
                "app_order_id": app_order_id,
                "attachment": attachment,
                "price": price,
                "product_id": product_id,
                "product_version": product_version,
                "quantity": quantity
            },
            result_processor=lambda x: x["purchase_order"]
        )

    def taobao_deg_game_store_vi_product_list(
            self,
            device=''
    ):
        """
        读取内购商品列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25478

        :param device: 设备
        """
        return self._top_request(
            "taobao.deg.game.store.vi.product.list",
            {
                "device": device
            },
            result_processor=lambda x: x["products"]
        )


class TbOpenim(DingTalkBaseAPI):
    """
    openimAPI
    """

    def taobao_openim_users_get(
            self,
            userids
    ):
        """
        批量获取用户信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24157

        :param userids: 用户id序列
        """
        return self._top_request(
            "taobao.openim.users.get",
            {
                "userids": userids
            },
            result_processor=lambda x: x["userinfos"]
        )

    def taobao_openim_users_delete(
            self,
            userids
    ):
        """
        删除用户
        批量删除用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24160

        :param userids: 需要删除的用户列表，多个用户用半角逗号分隔，最多一次可以删除100个用户
        """
        return self._top_request(
            "taobao.openim.users.delete",
            {
                "userids": userids
            }
        )

    def taobao_openim_users_update(
            self,
            userinfos
    ):
        """
        批量更新用户信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24161

        :param userinfos: 用户信息列表
        """
        return self._top_request(
            "taobao.openim.users.update",
            {
                "userinfos": userinfos
            }
        )

    def taobao_openim_ioscert_production_set(
            self,
            password,
            cert
    ):
        """
        设置ios证书
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24162

        :param password: 证书密码
        :param cert: 证书文件内容,base64编码
        """
        return self._top_request(
            "taobao.openim.ioscert.production.set",
            {
                "password": password,
                "cert": cert
            },
            result_processor=lambda x: x["code"]
        )

    def taobao_openim_ioscert_sandbox_set(
            self,
            cert,
            password=''
    ):
        """
        设置开发环境证书
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24163

        :param cert: 证书内容,base64编码
        :param password: 系统自动生成
        """
        return self._top_request(
            "taobao.openim.ioscert.sandbox.set",
            {
                "cert": cert,
                "password": password
            },
            result_processor=lambda x: x["code"]
        )

    def taobao_openim_users_add(
            self,
            userinfos
    ):
        """
        添加用户
        导入用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24164

        :param userinfos: 用户信息列表
        """
        return self._top_request(
            "taobao.openim.users.add",
            {
                "userinfos": userinfos
            }
        )

    def taobao_openim_custmsg_push(
            self,
            custmsg
    ):
        """
        推送自定义openim消息
        isv通过该接口给openim用户推送自定义消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25185

        :param custmsg: 自定义消息内容
        """
        return self._top_request(
            "taobao.openim.custmsg.push",
            {
                "custmsg": custmsg
            },
            result_processor=lambda x: x["msgid"]
        )

    def taobao_openim_relations_get(
            self,
            beg_date,
            end_date,
            user
    ):
        """
        获取openim账号的聊天关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25186

        :param beg_date: 查询起始日期。格式yyyyMMdd。不得早于一个月
        :param end_date: 查询结束日期。格式yyyyMMdd。不得早于一个月
        :param user: 用户信息
        """
        return self._top_request(
            "taobao.openim.relations.get",
            {
                "beg_date": beg_date,
                "end_date": end_date,
                "user": user
            },
            result_processor=lambda x: x["users"]
        )

    def taobao_openim_chatlogs_get(
            self,
            user1,
            user2,
            begin,
            end,
            count,
            next_key=''
    ):
        """
        openim聊天记录查询接口
        查询openim账号聊天记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25192

        :param user1: 用户1信息
        :param user2: 用户2信息
        :param begin: 查询开始时间（UTC时间）
        :param end: 查询结束时间（UTC时间）
        :param count: 查询条数
        :param next_key: 迭代key
        """
        return self._top_request(
            "taobao.openim.chatlogs.get",
            {
                "user1": user1,
                "user2": user2,
                "begin": begin,
                "end": end,
                "count": count,
                "next_key": next_key
            }
        )

    def taobao_openim_tribe_create(
            self,
            user,
            tribe_name,
            notice,
            tribe_type,
            members=None
    ):
        """
        创建群
        创建一个openim的群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25570

        :param user: 用户信息
        :param tribe_name: 群名称
        :param notice: 群公告
        :param tribe_type: 群类型有两种tribe_type = 0  普通群  普通群有管理员角色，对成员加入有权限控制tribe_type = 1  讨论组  讨论组没有管理员，不能解散
        :param members: 创建群时候拉入群的成员tribe_type = 1（即为讨论组类型)时  该参数为必选tribe_type = 0 (即为普通群类型)时，改参数无效，可不填
        """
        return self._top_request(
            "taobao.openim.tribe.create",
            {
                "user": user,
                "tribe_name": tribe_name,
                "notice": notice,
                "tribe_type": tribe_type,
                "members": members
            },
            result_processor=lambda x: x["tribe_info"]
        )

    def taobao_openim_tribe_gettribeinfo(
            self,
            user,
            tribe_id
    ):
        """
        获取群信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25571

        :param user: 用户信息
        :param tribe_id: 群ID
        """
        return self._top_request(
            "taobao.openim.tribe.gettribeinfo",
            {
                "user": user,
                "tribe_id": tribe_id
            },
            result_processor=lambda x: x["tribe_info"]
        )

    def taobao_openim_tribe_quit(
            self,
            user,
            tribe_id
    ):
        """
        OPENIM群成员退出
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25572

        :param user: 用户信息
        :param tribe_id: 群id
        """
        return self._top_request(
            "taobao.openim.tribe.quit",
            {
                "user": user,
                "tribe_id": tribe_id
            },
            result_processor=lambda x: x["tribe_code"]
        )

    def taobao_openim_tribe_join(
            self,
            user,
            tribe_id
    ):
        """
        OPENIM群主动加入
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25573

        :param user: 用户信息
        :param tribe_id: 群id
        """
        return self._top_request(
            "taobao.openim.tribe.join",
            {
                "user": user,
                "tribe_id": tribe_id
            },
            result_processor=lambda x: x["tribe_code"]
        )

    def taobao_openim_tribe_expel(
            self,
            user,
            tribe_id,
            member
    ):
        """
        OPENIM群踢出成员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25574

        :param user: 用户信息
        :param tribe_id: 群id
        :param member: 用户信息
        """
        return self._top_request(
            "taobao.openim.tribe.expel",
            {
                "user": user,
                "tribe_id": tribe_id,
                "member": member
            },
            result_processor=lambda x: x["tribe_code"]
        )

    def taobao_openim_tribe_setmanager(
            self,
            user,
            tid,
            member
    ):
        """
        OPENIM群设置管理员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25575

        :param user: 用户信息
        :param tid: 群id
        :param member: 用户信息
        """
        return self._top_request(
            "taobao.openim.tribe.setmanager",
            {
                "user": user,
                "tid": tid,
                "member": member
            },
            result_processor=lambda x: x["tribe_code"]
        )

    def taobao_openim_tribe_dismiss(
            self,
            user,
            tribe_id
    ):
        """
        OPENIM群解散
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25576

        :param user: 用户信息
        :param tribe_id: 群id
        """
        return self._top_request(
            "taobao.openim.tribe.dismiss",
            {
                "user": user,
                "tribe_id": tribe_id
            },
            result_processor=lambda x: x["tribe_code"]
        )

    def taobao_openim_tribe_invite(
            self,
            tribe_id,
            members,
            user
    ):
        """
        OPENIM群邀请加入
        OPENIM群邀请加入接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25577

        :param tribe_id: 群id
        :param members: 用户信息
        :param user: 用户信息
        """
        return self._top_request(
            "taobao.openim.tribe.invite",
            {
                "tribe_id": tribe_id,
                "members": members,
                "user": user
            },
            result_processor=lambda x: x["tribe_code"]
        )

    def taobao_openim_tribe_getmembers(
            self,
            user,
            tribe_id
    ):
        """
        OPENIM群成员获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25578

        :param user: 用户信息
        :param tribe_id: 群id
        """
        return self._top_request(
            "taobao.openim.tribe.getmembers",
            {
                "user": user,
                "tribe_id": tribe_id
            },
            result_processor=lambda x: x["tribe_user_list"]
        )

    def taobao_openim_tribe_unsetmanager(
            self,
            user,
            tid,
            member
    ):
        """
        OPENIM群取消管理员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25579

        :param user: 用户信息
        :param tid: 群id
        :param member: 用户信息
        """
        return self._top_request(
            "taobao.openim.tribe.unsetmanager",
            {
                "user": user,
                "tid": tid,
                "member": member
            },
            result_processor=lambda x: x["tribe_code"]
        )

    def taobao_openim_tribe_getalltribes(
            self,
            user,
            tribe_types
    ):
        """
        获取用户群列表
        OPENIM群服务获取用户群列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25580

        :param user: 用户信息
        :param tribe_types: 群类型
        """
        return self._top_request(
            "taobao.openim.tribe.getalltribes",
            {
                "user": user,
                "tribe_types": tribe_types
            },
            result_processor=lambda x: x["tribe_info_list"]
        )

    def taobao_openim_tribe_modifytribeinfo(
            self,
            user,
            tribe_name,
            notice,
            tribe_id
    ):
        """
        OPENIM群信息修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25581

        :param user: 用户信息
        :param tribe_name: 群名称
        :param notice: 群公告
        :param tribe_id: 群id
        """
        return self._top_request(
            "taobao.openim.tribe.modifytribeinfo",
            {
                "user": user,
                "tribe_name": tribe_name,
                "notice": notice,
                "tribe_id": tribe_id
            },
            result_processor=lambda x: x["tribe_code"]
        )

    def taobao_openim_immsg_push(
            self,
            immsg=None
    ):
        """
        openim标准消息发送
        服务端对openim用户发送标准消息，包括文字、语音、图片等。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25731

        :param immsg: openim消息结构体
        """
        return self._top_request(
            "taobao.openim.immsg.push",
            {
                "immsg": immsg
            },
            result_processor=lambda x: x["msgid"]
        )

    def taobao_openim_app_chatlogs_get(
            self,
            beg,
            end,
            count,
            next=''
    ):
        """
        openim应用聊天记录查询
        查询openim应用的聊天记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25766

        :param beg: 查询结束时间。UTC时间。精度到秒
        :param end: 查询结束时间。UTC时间。精度到秒
        :param count: 查询最大条数
        :param next: 迭代key
        """
        return self._top_request(
            "taobao.openim.app.chatlogs.get",
            {
                "beg": beg,
                "end": end,
                "count": count,
                "next": next
            }
        )

    def taobao_openim_track_getsummary(
            self,
            uid
    ):
        """
        获取用户足迹信息
        获取用户最近访问页面的信息(操作系统，设备型号，ip，国家，省份，城市，运营商，浏览器，渠道等)
        总访问页面次数和总停留时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25830

        :param uid: 用户id
        """
        return self._top_request(
            "taobao.openim.track.getsummary",
            {
                "uid": uid
            },
            result_processor=lambda x: x["tracksummary"]
        )

    def taobao_openim_track_getdetails(
            self,
            uid,
            starttime,
            endtime
    ):
        """
        获取openim用户足迹详细信息
        获取openim用户足迹详细信息 ，如进入页面的时间戳，url，referer信息等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25831

        :param uid: 用户ID
        :param starttime: 查询开始时间(UTC时间，以毫秒为单位)
        :param endtime: 查询结束时间(UTC时间，以毫秒为单位)
        """
        return self._top_request(
            "taobao.openim.track.getdetails",
            {
                "uid": uid,
                "starttime": starttime,
                "endtime": endtime
            },
            result_processor=lambda x: x["tracks"]
        )

    def taobao_openim_snfilterword_setfilter(
            self,
            creator,
            filterword,
            desc=''
    ):
        """
        关键词过滤
        设置openim关键词过滤
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25987

        :param creator: 上传者身份信息，区分不同上传者;只是记录，没有身份校验功能
        :param filterword: 需要过滤的关键词
        :param desc: 过滤原因描述
        """
        return self._top_request(
            "taobao.openim.snfilterword.setfilter",
            {
                "creator": creator,
                "filterword": filterword,
                "desc": desc
            }
        )

    def taobao_openim_tribelogs_get(
            self,
            tribe_id,
            begin,
            end,
            count,
            next=''
    ):
        """
        openim 群聊天记录导出接口
        获取openim账号的群聊天记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26081

        :param tribe_id: 群号
        :param begin: 查询起始时间，UTC秒数。必须在一个月内。
        :param end: 查询结束时间，UTC秒数。必须大于起始时间并小于当前时间
        :param count: 查询条数
        :param next: 迭代key
        """
        return self._top_request(
            "taobao.openim.tribelogs.get",
            {
                "tribe_id": tribe_id,
                "begin": begin,
                "end": end,
                "count": count,
                "next": next
            }
        )

    def taobao_openim_tribe_setmembernick(
            self,
            user,
            tribe_id,
            member,
            nick
    ):
        """
        设置群成员昵称
        设置群成员昵称，存在如下两种场景
        1 群主或管理员设置群成员昵称，该操作有权限控制。只针对普通群的群主和管理员开发此功能；讨论组群主不支持此设置操作
        2 群成员设置自己的昵称，该功能对群所有成员开放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26095

        :param user: 发起设置昵称的操作者，如果是设置其他成员的昵称，只有普通组的群主和管理员有权限
        :param tribe_id: 群id
        :param member: 被设置昵称的群成员
        :param nick: 设置的昵称
        """
        return self._top_request(
            "taobao.openim.tribe.setmembernick",
            {
                "user": user,
                "tribe_id": tribe_id,
                "member": member,
                "nick": nick
            },
            result_processor=lambda x: x["tribe_code"]
        )

    def taobao_openim_tribelogs_import(
            self,
            tribe_id,
            messages
    ):
        """
        openim群聊天记录导入
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26111

        :param tribe_id: 群号。必须为已存在的群，且群主属于本app
        :param messages: 消息列表
        """
        return self._top_request(
            "taobao.openim.tribelogs.import",
            {
                "tribe_id": tribe_id,
                "messages": messages
            }
        )

    def taobao_openim_chatlogs_import(
            self,
            messages
    ):
        """
        openim单聊消息导入
        提供openim账号的聊天消息导入功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26112

        :param messages: 消息序列
        """
        return self._top_request(
            "taobao.openim.chatlogs.import",
            {
                "messages": messages
            }
        )

    def taobao_openim_userservice_get(
            self,
            date,
            page_no='1',
            page_size='200'
    ):
        """
        openim用户服务情况详情
        车猫等isv方希望获取每日用户发送的消息数，接待的客服，登录页，用户来源，渠道等等的数据信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26299

        :param date: 某一天
        :param page_no: 当前页
        :param page_size: 页面记录数
        """
        return self._top_request(
            "taobao.openim.userservice.get",
            {
                "date": date,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_openim_tribe_sendmsg(
            self,
            user,
            tribe_id,
            msg
    ):
        """
        发送群消息
        发送群消息，目前支持发送4种类型的群消息，普通文本，图片，语音，自定义消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26525

        :param user: 群消息发送者，只有该群的成员才可以发送群消息
        :param tribe_id: 群id
        :param msg: 发送群消息
        """
        return self._top_request(
            "taobao.openim.tribe.sendmsg",
            {
                "user": user,
                "tribe_id": tribe_id,
                "msg": msg
            }
        )


class TbAnQuanPingCe(DingTalkBaseAPI):
    """
    安全评测API
    """

    def alibaba_security_fmac_service(
            self,
            asac,
            code,
            ip='',
            phone='',
            imei='',
            email='',
            umid='',
            ext='',
            user_id='',
            user_nick='',
            device_id='',
            ua='',
            wua=''
    ):
        """
        集团安全部营销反作弊服务
        判定此次请求是否是作弊行为
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25449

        :param asac: 安全码
        :param code: 事件code
        :param ip: 用户ip
        :param phone: 用户手机号
        :param imei: imei
        :param email: 用户邮箱
        :param umid: 用户umid
        :param ext: 无
        :param user_id: 淘宝id
        :param user_nick: 淘宝nick
        :param device_id: 设备id
        :param ua: ua
        :param wua: wua
        """
        return self._top_request(
            "alibaba.security.fmac.service",
            {
                "asac": asac,
                "code": code,
                "ip": ip,
                "phone": phone,
                "imei": imei,
                "email": email,
                "umid": umid,
                "ext": ext,
                "user_id": user_id,
                "user_nick": user_nick,
                "device_id": device_id,
                "ua": ua,
                "wua": wua
            },
            result_processor=lambda x: x["return_val"]
        )


class TbDSP(DingTalkBaseAPI):
    """
    DSP-API
    """

    def alibaba_opendsp_adgroups_add(
            self,
            adgroup_list
    ):
        """
        推广单元—新增推广单元
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        新增推广单元接口（支持单个和批量新增）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24273

        :param adgroup_list: adgroup对象
        """
        return self._top_request(
            "alibaba.opendsp.adgroups.add",
            {
                "adgroup_list": adgroup_list
            },
            result_processor=lambda x: x["adgroup_list"]
        )

    def alibaba_opendsp_adgroups_update(
            self,
            adgroup_list
    ):
        """
        推广单元—更新推广单元
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据输入条件更新推广单元（支持单个和批量）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24274

        :param adgroup_list: adgroup对象
        """
        return self._top_request(
            "alibaba.opendsp.adgroups.update",
            {
                "adgroup_list": adgroup_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_adgroups_list(
            self,
            query=None
    ):
        """
        推广单元—查询推广单元
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据用户输入条件查询推广单元列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24276

        :param query: adgroup对象
        """
        return self._top_request(
            "alibaba.opendsp.adgroups.list",
            {
                "query": query
            },
            result_processor=lambda x: x["adgroup_list"]
        )

    def alibaba_opendsp_adgroup_creatives_bind(
            self,
            dsp_cust_id,
            adgroup_id,
            creative_id_list
    ):
        """
        推广单元—绑定创意
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据推广单元ID和创意ID列表绑定创意（支持单个和批量）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24277

        :param dsp_cust_id: 推广主id
        :param adgroup_id: 推广单元ID
        :param creative_id_list: 创意ID列表
        """
        return self._top_request(
            "alibaba.opendsp.adgroup.creatives.bind",
            {
                "dsp_cust_id": dsp_cust_id,
                "adgroup_id": adgroup_id,
                "creative_id_list": creative_id_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_templates_get(
            self,
            template_id_list
    ):
        """
        创意模板—查询创意模板
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        创意模板查询（根据模板ID列表查询模板）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24278

        :param template_id_list: 模板的ID列表
        """
        return self._top_request(
            "alibaba.opendsp.templates.get",
            {
                "template_id_list": template_id_list
            },
            result_processor=lambda x: x["template_list"]
        )

    def alibaba_opendsp_customers_add(
            self,
            customer_list
    ):
        """
        推广用户—新增用户
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        用户新增（支持单个批量新增）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24279

        :param customer_list: 用户列表
        """
        return self._top_request(
            "alibaba.opendsp.customers.add",
            {
                "customer_list": customer_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_customers_update(
            self,
            customer_list
    ):
        """
        推广用户—更新推广用户
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广用户更新（支持单个批量的更新）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24280

        :param customer_list: 用户列表
        """
        return self._top_request(
            "alibaba.opendsp.customers.update",
            {
                "customer_list": customer_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_customers_list(
            self,
            dsp_cust_id='',
            status=''
    ):
        """
        推广用户—查询推广用户
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广用户查询接口（支持多种条件查询）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24281

        :param dsp_cust_id: 推广主ID
        :param status: 用户上下线状态（1.上线, 0.下线）
        """
        return self._top_request(
            "alibaba.opendsp.customers.list",
            {
                "dsp_cust_id": dsp_cust_id,
                "status": status
            },
            result_processor=lambda x: x["customer_list"]
        )

    def alibaba_opendsp_creatives_add(
            self,
            creative_list
    ):
        """
        推广创意—新增创意
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        创意新增（支持单个批量增加创意）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24282

        :param creative_list: 创意对象
        """
        return self._top_request(
            "alibaba.opendsp.creatives.add",
            {
                "creative_list": creative_list
            },
            result_processor=lambda x: x["creative_list"]
        )

    def alibaba_opendsp_creatives_update(
            self,
            creative_list
    ):
        """
        推广创意—更新创意
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据输入条件更新创意（支持单个批量更新）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24283

        :param creative_list: 创意对象
        """
        return self._top_request(
            "alibaba.opendsp.creatives.update",
            {
                "creative_list": creative_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_creatives_get(
            self,
            dsp_cust_id,
            creative_id_list
    ):
        """
        推广创意—根据创意主键id查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据创意id查询创意（单个和批量）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24284

        :param dsp_cust_id: 推广主id
        :param creative_id_list: 创意id列表
        """
        return self._top_request(
            "alibaba.opendsp.creatives.get",
            {
                "dsp_cust_id": dsp_cust_id,
                "creative_id_list": creative_id_list
            },
            result_processor=lambda x: x["creative_list"]
        )

    def alibaba_opendsp_creatives_list(
            self
    ):
        """
        推广创意—查询创意列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据查询条件查询推广创意列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24285

        """
        return self._top_request(
            "alibaba.opendsp.creatives.list",
            result_processor=lambda x: x["creative_list"]
        )

    def alibaba_opendsp_creatives_delete(
            self,
            dsp_cust_id,
            creative_id_list
    ):
        """
        推广创意—删除创意
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        创意删除（支持单个批量删除创意）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24286

        :param dsp_cust_id: 推广主ID
        :param creative_id_list: 创意ID列表，最大200个
        """
        return self._top_request(
            "alibaba.opendsp.creatives.delete",
            {
                "dsp_cust_id": dsp_cust_id,
                "creative_id_list": creative_id_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_adgroup_targetings_get(
            self,
            dsp_cust_id,
            adgroup_id_list
    ):
        """
        推广单元—获取定向服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据推广单元ID批量获取定向列表（支持单个和批量）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24287

        :param dsp_cust_id: 推广主id
        :param adgroup_id_list: 推广单元id列表
        """
        return self._top_request(
            "alibaba.opendsp.adgroup.targetings.get",
            {
                "dsp_cust_id": dsp_cust_id,
                "adgroup_id_list": adgroup_id_list
            },
            result_processor=lambda x: x["targeting_list"]
        )

    def alibaba_opendsp_adgroup_targetings_set(
            self,
            dsp_cust_id,
            adgroup_id,
            targeting_list
    ):
        """
        推广单元—设置定向
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广单元设置定向（支持单个批量）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24288

        :param dsp_cust_id: 推广主id
        :param adgroup_id: 推广单元id
        :param targeting_list: 推广单元定向列表
        """
        return self._top_request(
            "alibaba.opendsp.adgroup.targetings.set",
            {
                "dsp_cust_id": dsp_cust_id,
                "adgroup_id": adgroup_id,
                "targeting_list": targeting_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_campaigns_delete(
            self,
            dsp_cust_id,
            campaign_id_list
    ):
        """
        推广计划—删除服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        opendsp推广计划删除（支持批量和单个）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24289

        :param dsp_cust_id: 推广珠ID
        :param campaign_id_list: 推广计划id列表
        """
        return self._top_request(
            "alibaba.opendsp.campaigns.delete",
            {
                "dsp_cust_id": dsp_cust_id,
                "campaign_id_list": campaign_id_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_campaigns_targetings_set(
            self,
            dsp_cust_id,
            campaign_id,
            targeting_list
    ):
        """
        推广计划—设置定向
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广计划设置定向
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24290

        :param dsp_cust_id: 推广主id
        :param campaign_id: 推广计划id
        :param targeting_list: 推广计划定向对象
        """
        return self._top_request(
            "alibaba.opendsp.campaigns.targetings.set",
            {
                "dsp_cust_id": dsp_cust_id,
                "campaign_id": campaign_id,
                "targeting_list": targeting_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_adgroups_get(
            self,
            dsp_cust_id,
            adgroup_id_list
    ):
        """
        推广单元—根据推广单元ID获取推广单元列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据推广单元id获取推广单元列表（支持单个和批量获取）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24291

        :param dsp_cust_id: 推广主ID
        :param adgroup_id_list: 推广单元ID列表
        """
        return self._top_request(
            "alibaba.opendsp.adgroups.get",
            {
                "dsp_cust_id": dsp_cust_id,
                "adgroup_id_list": adgroup_id_list
            },
            result_processor=lambda x: x["adgroup_list"]
        )

    def alibaba_opendsp_campaigns_targetings_get(
            self,
            dsp_cust_id,
            campaign_id_list
    ):
        """
        推广计划—获取定向列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据推广计划ID获取定向列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24293

        :param dsp_cust_id: 推广主id
        :param campaign_id_list: 推广计划id列表
        """
        return self._top_request(
            "alibaba.opendsp.campaigns.targetings.get",
            {
                "dsp_cust_id": dsp_cust_id,
                "campaign_id_list": campaign_id_list
            },
            result_processor=lambda x: x["targeting_list"]
        )

    def alibaba_opendsp_dicts_get(
            self,
            key_id
    ):
        """
        字典服务—查询字典列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据KEY查询对应字典
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24294

        :param key_id: key_id (FILTER_CATEGORY表示创意的类目cat_id，AREA表示地域码，CONTENT_CATEGORY表示网页类目id，DEVICE_TYPE表示设备类型的值)
        """
        return self._top_request(
            "alibaba.opendsp.dicts.get",
            {
                "key_id": key_id
            },
            result_processor=lambda x: x["dict_list"]
        )

    def alibaba_opendsp_adgroups_delete(
            self,
            dsp_cust_id,
            adgroup_id_list
    ):
        """
        推广单元—删除推广单元
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据推广单元ID删除推广单元（支持单个批量）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24295

        :param dsp_cust_id: 推广主id
        :param adgroup_id_list: 要删除的推广单元id列表
        """
        return self._top_request(
            "alibaba.opendsp.adgroups.delete",
            {
                "dsp_cust_id": dsp_cust_id,
                "adgroup_id_list": adgroup_id_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_adgroup_creatives_unbind(
            self,
            dsp_cust_id,
            adgroup_id,
            creative_id_list
    ):
        """
        推广单元—解绑创意
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据推广单元ID和创意ID列表解绑创意（支持单个和批量）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24296

        :param dsp_cust_id: 推广主ID
        :param adgroup_id: 推广单元ID
        :param creative_id_list: 需要解绑的创意ID列表
        """
        return self._top_request(
            "alibaba.opendsp.adgroup.creatives.unbind",
            {
                "dsp_cust_id": dsp_cust_id,
                "adgroup_id": adgroup_id,
                "creative_id_list": creative_id_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_campaigns_list(
            self,
            query=None
    ):
        """
        推广计划—根据输入条件查询计划
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据输入条件查询推广计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24297

        :param query: 推广计划对象
        """
        return self._top_request(
            "alibaba.opendsp.campaigns.list",
            {
                "query": query
            },
            result_processor=lambda x: x["campaign_list"]
        )

    def alibaba_opendsp_campaigns_add(
            self,
            campaign_list
    ):
        """
        推广计划—新增推广计划
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广计划新增（支持单个和批量）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24298

        :param campaign_list: 推广计划对象
        """
        return self._top_request(
            "alibaba.opendsp.campaigns.add",
            {
                "campaign_list": campaign_list
            },
            result_processor=lambda x: x["campaign_list"]
        )

    def alibaba_opendsp_campaigns_update(
            self,
            campaign_list
    ):
        """
        推广计划—更新推广计划
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广计划更新（支持批量和单个）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24299

        :param campaign_list: 推广计划对象
        """
        return self._top_request(
            "alibaba.opendsp.campaigns.update",
            {
                "campaign_list": campaign_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_campaigns_get(
            self,
            dsp_cust_id,
            campaign_id_list
    ):
        """
        推广计划—根据计划ID查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广计划根据主键计划ID查询（支持单个和批量）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24300

        :param dsp_cust_id: 推广主id
        :param campaign_id_list: 推广计划id列表
        """
        return self._top_request(
            "alibaba.opendsp.campaigns.get",
            {
                "dsp_cust_id": dsp_cust_id,
                "campaign_id_list": campaign_id_list
            },
            result_processor=lambda x: x["campaign_list"]
        )

    def alibaba_opendsp_adgroup_creatives_get(
            self,
            dsp_cust_id,
            adgroup_id
    ):
        """
        推广单元—根据推广单元id获取绑定的创意
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据推广单元id获取推广单元绑定的创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24393

        :param dsp_cust_id: 推广主id
        :param adgroup_id: 推广单元id
        """
        return self._top_request(
            "alibaba.opendsp.adgroup.creatives.get",
            {
                "dsp_cust_id": dsp_cust_id,
                "adgroup_id": adgroup_id
            },
            result_processor=lambda x: x["creative_list"]
        )

    def alibaba_opendsp_creative_file_upload(
            self,
            file_type,
            file_name,
            file_bytes,
            byte_size='',
            size=''
    ):
        """
        推广创意—创意文件上传
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        为外部dsp提供创意文件上传，如图片视频等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24394

        :param file_type: 文件类型avi,flv,jpg,png等
        :param file_name: 文件名称
        :param file_bytes: 文件的byte数组
        :param byte_size: 文件大小
        :param size: 文件尺寸
        """
        return self._top_request(
            "alibaba.opendsp.creative.file.upload",
            {
                "file_type": file_type,
                "file_name": file_name,
                "file_bytes": file_bytes,
                "byte_size": byte_size,
                "size": size
            }
        )

    def alibaba_opendsp_report_campaigns_get(
            self,
            report_name,
            query_param
    ):
        """
        报表—推广计划维度报表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广计划维度报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24415

        :param report_name: 报表名称，参数campaign_report_day表示前一天的日报表，campaign_report_realtime表示当天的实时报表
        :param query_param: 查询参数
        """
        return self._top_request(
            "alibaba.opendsp.report.campaigns.get",
            {
                "report_name": report_name,
                "query_param": query_param
            },
            result_processor=lambda x: x["campaign_report_list"]
        )

    def alibaba_opendsp_report_creatives_get(
            self,
            report_name,
            query_param
    ):
        """
        报表—创意维度报表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        创意维度报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24416

        :param report_name: 报表名称
        :param query_param: 查询参数
        """
        return self._top_request(
            "alibaba.opendsp.report.creatives.get",
            {
                "report_name": report_name,
                "query_param": query_param
            },
            result_processor=lambda x: x["creative_report_list"]
        )

    def alibaba_opendsp_report_customers_get(
            self,
            report_name,
            query
    ):
        """
        报表-推广主维度报表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广主维度报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24419

        :param report_name: customer_report_day、customer_report_realtime分别表离线报表和实时报表
        :param query: 查询参数
        """
        return self._top_request(
            "alibaba.opendsp.report.customers.get",
            {
                "report_name": report_name,
                "query": query
            },
            result_processor=lambda x: x["customer_report_list"]
        )

    def alibaba_opendsp_report_adgroups_get(
            self,
            report_name,
            query_param
    ):
        """
        报表—推广单元维度报表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广单元日报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24425

        :param report_name: 报表名称:adgroup_report_day表示推广单位维度离线报表，adgroup_creative_report_day表示推广单元创意维度离线报表,adgroup_report_realtime表示推广单位维度实时报表
        :param query_param: 查询参数
        """
        return self._top_request(
            "alibaba.opendsp.report.adgroups.get",
            {
                "report_name": report_name,
                "query_param": query_param
            },
            result_processor=lambda x: x["adgroup_report_list"]
        )

    def alibaba_opendsp_report_crowds_get(
            self,
            report_name,
            query
    ):
        """
        报表—人群维度报表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        人群维度报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24458

        :param report_name: 报表名称
        :param query: 查询参数
        """
        return self._top_request(
            "alibaba.opendsp.report.crowds.get",
            {
                "report_name": report_name,
                "query": query
            },
            result_processor=lambda x: x["crowd_repotr_list"]
        )

    def alibaba_opendsp_report_customer_get(
            self,
            report_name,
            query_param
    ):
        """
        报表—推广主维度相关报表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        推广主维度相关报表包括离线报表和实时报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24922

        :param report_name: customer_report_day、customer_report_realtime分别表离线报表和实时报表
        :param query_param: 查询参数
        """
        return self._top_request(
            "alibaba.opendsp.report.customer.get",
            {
                "report_name": report_name,
                "query_param": query_param
            },
            result_processor=lambda x: x["customer_report_list"]
        )

    def alibaba_opendsp_bidcontrol_list(
            self,
            query=None
    ):
        """
        报价控制——报价控制查询接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        报价控制查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25065

        :param query: 报价控制对象
        """
        return self._top_request(
            "alibaba.opendsp.bidcontrol.list",
            {
                "query": query
            },
            result_processor=lambda x: x["bid_control_list"]
        )

    def alibaba_opendsp_bidcontrol_add(
            self,
            bid_control_list
    ):
        """
        报价控制——报价控制新增接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        报价控制新增接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25066

        :param bid_control_list: 报价控制对象
        """
        return self._top_request(
            "alibaba.opendsp.bidcontrol.add",
            {
                "bid_control_list": bid_control_list
            },
            result_processor=lambda x: x["bid_control_list"]
        )

    def alibaba_opendsp_bidcontrol_update(
            self,
            bid_control_list
    ):
        """
        报价控制——报价控制更新接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        报价控制更新接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25067

        :param bid_control_list: 报价控制对象
        """
        return self._top_request(
            "alibaba.opendsp.bidcontrol.update",
            {
                "bid_control_list": bid_control_list
            },
            result_processor=lambda x: x["ok"]
        )

    def alibaba_opendsp_report_dspdefinereport_get(
            self,
            report_name,
            rpt_query_obj
    ):
        """
        自定义报表—查询接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        自定义报表查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25285

        :param report_name: 报表名称
        :param rpt_query_obj: 自定义报表查询对象
        """
        return self._top_request(
            "alibaba.opendsp.report.dspdefinereport.get",
            {
                "report_name": report_name,
                "rpt_query_obj": rpt_query_obj
            },
            result_processor=lambda x: x["report_result_list"]
        )


class TbALiCheLianWang(DingTalkBaseAPI):
    """
    阿里车联网API
    """

    def alibaba_autonavi_api_trafficboard_image_get(
            self,
            deviceid,
            panelid,
            adcodes,
            batch='0',
            size='960x600',
            whscale='true'
    ):
        """
        交通看板-栅格情报获取
        获取指定情报板ID的二进制数据（图片）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24740

        :param deviceid: 设备id,  按照userid 的配置，决定是否需要
        :param panelid: 图片 id
        :param adcodes: 城市编码
        :param batch: 批次,终端批次，按照userid 的配置，决定是否需要
        :param size: 图像尺寸（可选）,默认尺寸为原始大小(960x600) 参数为:width  x   height   (例如:960x600),参数不正确时返回原始大小
        :param whscale: 是否为宽高等比例（可选）,参数值 true（默认）,表示宽高等比例缩放 false:  按请求尺寸缩放
        """
        return self._top_request(
            "alibaba.autonavi.api.trafficboard.image.get",
            {
                "deviceid": deviceid,
                "panelid": panelid,
                "adcodes": adcodes,
                "batch": batch,
                "size": size,
                "whscale": whscale
            },
            result_processor=lambda x: x["resp_result"]
        )

    def alibaba_autonavi_api_location_get(
            self,
            longitude='',
            latitude=''
    ):
        """
        根据经纬坐标或ip查询所属省市信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据经纬坐标或ip查询所属省市信息，直接调用，则以客户端IP返回所述地区，如传递经纬坐标，则以经纬度坐标返回所属地区
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24857

        :param longitude: 经度
        :param latitude: 纬度
        """
        return self._top_request(
            "alibaba.autonavi.api.location.get",
            {
                "longitude": longitude,
                "latitude": latitude
            }
        )

    def alibaba_autonavi_api_mapdata_get(
            self,
            imei,
            needtaiwan,
            resolution,
            syscode,
            apkv,
            pid,
            protversion,
            processtime,
            sid,
            os,
            model,
            mapvlist='',
            mapversion='',
            language='0',
            userid='autonavi',
            enginev='v00.1',
            local_city_versions='',
            for_local_only='false'
    ):
        """
        获取导航地图数据更新信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        地图数据清单查询，更新包下载地址获取，包含全量更新及增量更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25064

        :param imei: 设备号,设备终端唯一标示
        :param needtaiwan: 是否需要台湾数据，0=不需要， 1=需要，默认 0
        :param resolution: 终端设备分辨率
        :param syscode: 渠道编号
        :param apkv: apk 软件版本号
        :param pid: 平台类别，1=android; 2=ios; 3=others
        :param protversion: 大协议版本号,用于控制协议版本升级，当前取值=1
        :param processtime: 起方发起请求的时间/应答方处理 请 求 的 时 间YYYYMMDDHHMMSS
        :param sid: 临时会话ID
        :param os: 系统版本
        :param model: 终端机型
        :param mapvlist: 本地排重后的地图版本号
        :param mapversion: 本地基础资源版本号
        :param language: 默认为 0 0&mdash;简体中文 1&mdash;英文 2&mdash;繁体中文
        :param userid: 用户 id
        :param enginev: 引擎版本号
        :param local_city_versions: 本地城市版本列表、为gzip格式压缩后的数据。每个元素存储城市adcode以及城市当前的资源版本。格式为'adcode,res_version'。例如：['100000,30.12.13.1.2', '200000,29.13.1.2']
        :param for_local_only: 是否只返回本地已下载成熟数据。若为否、则返回全国城市的数据
        """
        return self._top_request(
            "alibaba.autonavi.api.mapdata.get",
            {
                "imei": imei,
                "needtaiwan": needtaiwan,
                "resolution": resolution,
                "syscode": syscode,
                "apkv": apkv,
                "pid": pid,
                "protversion": protversion,
                "processtime": processtime,
                "sid": sid,
                "os": os,
                "model": model,
                "mapvlist": mapvlist,
                "mapversion": mapversion,
                "language": language,
                "userid": userid,
                "enginev": enginev,
                "local_city_versions": local_city_versions,
                "for_local_only": for_local_only
            },
            result_processor=lambda x: x["resp_data"]
        )

    def alibaba_autonavi_api_weather_info_hf_get(
            self,
            adcode='',
            longitude='""',
            latitude='""',
            from_='Unknown',
            language='zh_CN',
            startdate='',
            enddate='',
            index='false'
    ):
        """
        HF天气信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取HF天气信息内容
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25182

        :param adcode: 城市代码
        :param longitude: 经度
        :param latitude: 纬度
        :param from_: 终端类型, 如: iPhone_5.1
        :param language: 语言, 可指定为zh_CN、en
        :param startdate: 始时间,缺省为当天日期
        :param enddate: 结束时间， 缺省为3 天后日 期
        :param index: 是否显示生活指数， 如: true/false,缺省为false
        """
        return self._top_request(
            "alibaba.autonavi.api.weather.info.hf.get",
            {
                "adcode": adcode,
                "longitude": longitude,
                "latitude": latitude,
                "from": from_,
                "language": language,
                "startdate": startdate,
                "enddate": enddate,
                "index": index
            }
        )


class TbZuanZhan(DingTalkBaseAPI):
    """
    钻展API
    """

    def taobao_zuanshi_advertiser_adzone_rtrpts_get(
            self,
            log_date,
            campaign_id,
            adgroup_id,
            adzone_id,
            campaign_model
    ):
        """
        钻展广告主资源位分时数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27807

        :param log_date: 查询日期
        :param campaign_id: 计划id
        :param adgroup_id: 推广单元id
        :param adzone_id: 位置id
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.adzone.rtrpts.get",
            {
                "log_date": log_date,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "adzone_id": adzone_id,
                "campaign_model": campaign_model
            },
            result_processor=lambda x: x["adzone_realtime_rpt_list"]
        )

    def taobao_zuanshi_advertiser_account_rtrpts_get(
            self,
            log_date,
            campaign_model=''
    ):
        """
        钻展广告主账户整体分时数据查询
        查询钻展账户级别分时报表数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27808

        :param log_date: 查询日期
        :param campaign_model: 计划类型。1：返回全店推广汇总数据，4：返回单品推广汇总数据。不传值，返回所有推广账号级别汇总数据。不传返回全店和单品加和数据。
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.account.rtrpts.get",
            {
                "log_date": log_date,
                "campaign_model": campaign_model
            },
            result_processor=lambda x: x["advertiser_realtime_rpt_list"]
        )

    def taobao_zuanshi_advertiser_target_rtrpts_get(
            self,
            log_date,
            campaign_id,
            adgroup_id,
            target_id,
            campaign_model
    ):
        """
        钻展广告主定向分时数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27811

        :param log_date: 查询日期
        :param campaign_id: 计划id
        :param adgroup_id: 推广组id
        :param target_id: 定向标签id
        :param campaign_model: 计划类型。1：全店推广，4：单品推广。
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.target.rtrpts.get",
            {
                "log_date": log_date,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "target_id": target_id,
                "campaign_model": campaign_model
            },
            result_processor=lambda x: x["target_realtime_rpt_list"]
        )

    def taobao_zuanshi_advertiser_campaign_rtrpts_get(
            self,
            log_date,
            campaign_id,
            campaign_model
    ):
        """
        钻展广告主推广计划分时数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27812

        :param log_date: 查询日期
        :param campaign_id: 计划id
        :param campaign_model: 计划类型。1：全店推广，4：单品推广。
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.campaign.rtrpts.get",
            {
                "log_date": log_date,
                "campaign_id": campaign_id,
                "campaign_model": campaign_model
            },
            result_processor=lambda x: x["campaign_realtime_rpt_list"]
        )

    def taobao_zuanshi_advertiser_adgroup_rtrpts_get(
            self,
            log_date,
            campaign_id,
            adgroup_id,
            campaign_model
    ):
        """
        钻展广告主推广单元分时数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27813

        :param log_date: 查询日期
        :param campaign_id: 计划id
        :param adgroup_id: 推广单元id
        :param campaign_model: 计划类型。1：全店推广，4：单品推广。
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.adgroup.rtrpts.get",
            {
                "log_date": log_date,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "campaign_model": campaign_model
            },
            result_processor=lambda x: x["adgroup_realtime_rpt_list"]
        )

    def taobao_zuanshi_advertiser_creative_rtrpts_get(
            self,
            log_date,
            campaign_id,
            adgroup_id,
            creative_id,
            campaign_model
    ):
        """
        钻展广告主创意分时数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27814

        :param log_date: 查询日期
        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param creative_id: 创意id
        :param campaign_model: 计划类型。1：全店推广，4：单品推广。
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.creative.rtrpts.get",
            {
                "log_date": log_date,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "creative_id": creative_id,
                "campaign_model": campaign_model
            },
            result_processor=lambda x: x["creative_realtime_rpt_list"]
        )

    def taobao_zuanshi_banner_campaign_modify(
            self,
            id,
            workday='',
            weekend='',
            end_time='',
            type='',
            start_time='',
            name='',
            area_id_list='',
            speed_type='',
            day_budget=''
    ):
        """
        修改计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28852

        :param id: 计划ID
        :param workday: 周一到周五，true：投放，false：不投放，数组顺序0~23点
        :param weekend: 周六和周日
        :param end_time: 投放结束时间
        :param type: 计划类型，CPM：2，CPC：8
        :param start_time: 投放开始时间
        :param name: 计划名称，只支持汉字、字母、数字、下划线，32个字符
        :param area_id_list: 投放地区
        :param speed_type: 投放速度，1：尽快投放，2：均匀投放
        :param day_budget: 日预算，单位分
        """
        return self._top_request(
            "taobao.zuanshi.banner.campaign.modify",
            {
                "id": id,
                "workday": workday,
                "weekend": weekend,
                "end_time": end_time,
                "type": type,
                "start_time": start_time,
                "name": name,
                "area_id_list": area_id_list,
                "speed_type": speed_type,
                "day_budget": day_budget
            }
        )

    def taobao_zuanshi_banner_campaign_create(
            self,
            workday,
            weekend,
            type,
            name,
            area_id_list,
            speed_type,
            day_budget,
            start_time,
            end_time
    ):
        """
        新增计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28853

        :param workday: 周一到周五，数组24个元素，true：投放，false：不投放
        :param weekend: 周六和周日，数组24个元素，true：投放，false：不投放
        :param type: 2：cpm，8：cpc
        :param name: 计划名称，只支持汉字、字母、数字、下划线，32个字符
        :param area_id_list: 投放地区
        :param speed_type: 1：尽快，2：均匀
        :param day_budget: 日预算，单位分
        :param start_time: 投放开始时间
        :param end_time: 投放结束时间
        """
        return self._top_request(
            "taobao.zuanshi.banner.campaign.create",
            {
                "workday": workday,
                "weekend": weekend,
                "type": type,
                "name": name,
                "area_id_list": area_id_list,
                "speed_type": speed_type,
                "day_budget": day_budget,
                "start_time": start_time,
                "end_time": end_time
            }
        )

    def taobao_zuanshi_banner_adgroup_get(
            self,
            id
    ):
        """
        获取单元详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28854

        :param id: 单元ID
        """
        return self._top_request(
            "taobao.zuanshi.banner.adgroup.get",
            {
                "id": id
            }
        )

    def taobao_zuanshi_banner_campaign_find(
            self,
            page_size='15',
            status_list='',
            name='',
            campaign_id_list='',
            page_num='1',
            type='',
            marketingdemand=''
    ):
        """
        获取计划列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28855

        :param page_size: 分页大小
        :param status_list: 计划状态，0:暂停,1:投放中,9:投放结束
        :param name: 计划名称
        :param campaign_id_list: 计划ID列表
        :param page_num: 当前页码
        :param type: 2:cpm,8:cpc
        :param marketingdemand: 计划类型：-1：自定义，1：日常托管，2：日常推荐，3：拉新托管，4：拉新推荐
        """
        return self._top_request(
            "taobao.zuanshi.banner.campaign.find",
            {
                "page_size": page_size,
                "status_list": status_list,
                "name": name,
                "campaign_id_list": campaign_id_list,
                "page_num": page_num,
                "type": type,
                "marketingdemand": marketingdemand
            }
        )

    def taobao_zuanshi_banner_adgroup_delete(
            self,
            adgroup_id_list,
            campaign_id
    ):
        """
        删除单元
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28868

        :param adgroup_id_list: 单元ID
        :param campaign_id: 单元计划ID
        """
        return self._top_request(
            "taobao.zuanshi.banner.adgroup.delete",
            {
                "adgroup_id_list": adgroup_id_list,
                "campaign_id": campaign_id
            }
        )

    def taobao_zuanshi_banner_adgroup_create(
            self,
            campaign_id,
            name,
            crowds,
            adzone_bid_list,
            intelligent_bid='1'
    ):
        """
        新增单元
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28880

        :param campaign_id: 计划ID
        :param name: 单元名称
        :param crowds: 绑定定向
        :param adzone_bid_list: 资源位列表
        :param intelligent_bid: 智能出价，0：不使用,1：优化进店，2：优化成交，cpc不能选择2优化成交
        """
        return self._top_request(
            "taobao.zuanshi.banner.adgroup.create",
            {
                "campaign_id": campaign_id,
                "name": name,
                "crowds": crowds,
                "adzone_bid_list": adzone_bid_list,
                "intelligent_bid": intelligent_bid
            }
        )

    def taobao_zuanshi_banner_creative_unbind(
            self,
            creative_id_list,
            adgroup_id,
            campaign_id
    ):
        """
        解绑创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28881

        :param creative_id_list: 创意列表ID
        :param adgroup_id: 单元ID
        :param campaign_id: 计划ID
        """
        return self._top_request(
            "taobao.zuanshi.banner.creative.unbind",
            {
                "creative_id_list": creative_id_list,
                "adgroup_id": adgroup_id,
                "campaign_id": campaign_id
            }
        )

    def taobao_zuanshi_banner_campaign_get(
            self,
            id
    ):
        """
        获取计划详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28882

        :param id: 计划ID
        """
        return self._top_request(
            "taobao.zuanshi.banner.campaign.get",
            {
                "id": id
            }
        )

    def taobao_zuanshi_banner_creative_find(
            self,
            size_list='',
            campaign_id='',
            adgroup_id='',
            page_size='15',
            name='',
            creative_level='',
            page_num='1',
            audit_status_list='',
            format_list='',
            online_status='1',
            id_list=''
    ):
        """
        获取创意列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28883

        :param size_list: 尺寸列表，200x300
        :param campaign_id: 计划ID
        :param adgroup_id: 单元ID
        :param page_size: 分页大小
        :param name: 创意名称
        :param creative_level: 创意等级,1：一级，2：二级，3：三级，4：四级，10：十级，99：未分级
        :param page_num: 当前页码
        :param audit_status_list: 待审核：-4,-1,0，审核通过：1，审核拒绝：-2,-5,-9
        :param format_list: 图片：2，flash：3，视频：4，文字链：5，Flash不遮盖：9，模板：10，
        :param online_status: 在线状态：1：正常，-1：回收站
        :param id_list: 创意ID列表
        """
        return self._top_request(
            "taobao.zuanshi.banner.creative.find",
            {
                "size_list": size_list,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "page_size": page_size,
                "name": name,
                "creative_level": creative_level,
                "page_num": page_num,
                "audit_status_list": audit_status_list,
                "format_list": format_list,
                "online_status": online_status,
                "id_list": id_list
            }
        )

    def taobao_zuanshi_banner_creative_find_bind(
            self,
            campaign_id,
            adgroup_id,
            page_size='15',
            name='',
            creative_level='',
            page_num='1',
            audit_status_list='',
            size_list='',
            format_list=''
    ):
        """
        获取已绑定的创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28884

        :param campaign_id: 计划ID
        :param adgroup_id: 单元ID
        :param page_size: 分页大小
        :param name: 创意名称
        :param creative_level: 创意等级,1：一级，2：二级，3：三级，4：四级，10：十级，99：未分级
        :param page_num: 当前页码
        :param audit_status_list: 待审核：-4,-1,0，审核通过：1，审核拒绝：-2,-5,-9
        :param size_list: 创意尺寸
        :param format_list: 图片：2，flash：3，视频：4，文字链：5，Flash不遮盖：9，模板：10，
        """
        return self._top_request(
            "taobao.zuanshi.banner.creative.find.bind",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "page_size": page_size,
                "name": name,
                "creative_level": creative_level,
                "page_num": page_num,
                "audit_status_list": audit_status_list,
                "size_list": size_list,
                "format_list": format_list
            }
        )

    def taobao_zuanshi_banner_campaign_delete(
            self,
            campaign_id_list
    ):
        """
        删除计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28885

        :param campaign_id_list: 计划ID
        """
        return self._top_request(
            "taobao.zuanshi.banner.campaign.delete",
            {
                "campaign_id_list": campaign_id_list
            }
        )

    def taobao_zuanshi_banner_adgroup_adzone_bind(
            self,
            campaign_id,
            adgroup_id,
            adzone_bid_dto_list
    ):
        """
        钻石展位全店推广单元绑定广告位接口
        智钻Banner推广单元绑定广告位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28886

        :param campaign_id: 推广计划id
        :param adgroup_id: 推广单元id
        :param adzone_bid_dto_list: 广告位列表
        """
        return self._top_request(
            "taobao.zuanshi.banner.adgroup.adzone.bind",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "adzone_bid_dto_list": adzone_bid_dto_list
            }
        )

    def taobao_zuanshi_banner_adgroup_adzone_unbind(
            self,
            campaign_id,
            adzone_id_list,
            adgroup_id
    ):
        """
        钻石展位全店推广单元解绑广告位接口
        智钻Banner推广单元解绑广告位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28887

        :param campaign_id: 推广计划id
        :param adzone_id_list: 解绑广告位id
        :param adgroup_id: 推广单元id
        """
        return self._top_request(
            "taobao.zuanshi.banner.adgroup.adzone.unbind",
            {
                "campaign_id": campaign_id,
                "adzone_id_list": adzone_id_list,
                "adgroup_id": adgroup_id
            }
        )

    def taobao_zuanshi_banner_adgroup_modify(
            self,
            id,
            campaign_id,
            name='',
            adboard_filter='',
            intelligent_bid=''
    ):
        """
        修改单元
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28888

        :param id: 单元ID
        :param campaign_id: 计划ID
        :param name: 单元名称
        :param adboard_filter: 创意优选，1：开启，0关闭，其他值默认开启，cpc不能修改这个字段
        :param intelligent_bid: 智能出价，0：不使用,1：优化进店，2：优化成交，cpc不能选择2优化成交
        """
        return self._top_request(
            "taobao.zuanshi.banner.adgroup.modify",
            {
                "id": id,
                "campaign_id": campaign_id,
                "name": name,
                "adboard_filter": adboard_filter,
                "intelligent_bid": intelligent_bid
            }
        )

    def taobao_zuanshi_banner_adgroup_find(
            self,
            campaign_id,
            status='',
            name='',
            page_size='15',
            adgroup_id_list='',
            page_num='1'
    ):
        """
        获取单元列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28889

        :param campaign_id: 计划ID
        :param status: 状态，1：正常投放，0：暂停投放，9：结束投放
        :param name: 单元名称
        :param page_size: 分页大小
        :param adgroup_id_list: 单元id列表
        :param page_num: 当前页码
        """
        return self._top_request(
            "taobao.zuanshi.banner.adgroup.find",
            {
                "campaign_id": campaign_id,
                "status": status,
                "name": name,
                "page_size": page_size,
                "adgroup_id_list": adgroup_id_list,
                "page_num": page_num
            }
        )

    def taobao_zuanshi_banner_adzone_findpage(
            self,
            adzone_id_list='',
            adzone_size_list='',
            page_size='20',
            allow_ad_format_list='',
            media_type_list='',
            adzone_type='',
            adzone_name='',
            page_num='1',
            settle_type_list='',
            pv_param_list=None,
            is_inside=''
    ):
        """
        获取钻石展位全店广告位分页数据
        智钻Banner广告位列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28890

        :param adzone_id_list: 广告位id列表
        :param adzone_size_list: 广告位尺寸列表
        :param page_size: 分页每页条数，最大限制50条
        :param allow_ad_format_list: 允许的创意类型
        :param media_type_list: 媒体类型列表
        :param adzone_type: 广告位类型，1表示广告位，2表示广告位包
        :param adzone_name: 广告位名称
        :param page_num: 页码
        :param settle_type_list: 结算类型，1表示CPM 2表示CPC
        :param pv_param_list: 日均访问量筛选条件，可以多段组合
        :param is_inside: 0站外 1站内
        """
        return self._top_request(
            "taobao.zuanshi.banner.adzone.findpage",
            {
                "adzone_id_list": adzone_id_list,
                "adzone_size_list": adzone_size_list,
                "page_size": page_size,
                "allow_ad_format_list": allow_ad_format_list,
                "media_type_list": media_type_list,
                "adzone_type": adzone_type,
                "adzone_name": adzone_name,
                "page_num": page_num,
                "settle_type_list": settle_type_list,
                "pv_param_list": pv_param_list,
                "is_inside": is_inside
            }
        )

    def taobao_zuanshi_banner_creative_create(
            self,
            name,
            image,
            cat_id,
            click_url,
            is_trans_to_wifi='false'
    ):
        """
        新增创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28891

        :param name: 创意名称
        :param image: 图片内容.图片最大为2M,只支持jpg,png,jpeg
        :param cat_id: 类目ID，1,女装 2,彩妆，护肤 3,女鞋 4,男装 5,男鞋 6,箱包 7,食品，茶叶，烟酒 8,内衣 9,保健 10,饰品，服饰 11,运动 12,居家 13,童装，母婴 14,电器 15,数码 16,游戏 17,团购 18,其他
        :param click_url: 点击链接
        :param is_trans_to_wifi: 是否需要pc转无线链接，true：是，false：否
        """
        return self._top_request(
            "taobao.zuanshi.banner.creative.create",
            {
                "name": name,
                "image": image,
                "cat_id": cat_id,
                "click_url": click_url,
                "is_trans_to_wifi": is_trans_to_wifi
            }
        )

    def taobao_zuanshi_banner_adgroup_status(
            self,
            adgroup_id_list,
            status,
            campaign_id
    ):
        """
        修改单元状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28892

        :param adgroup_id_list: 单元ID列表
        :param status: 状态，投放：1，暂停：0，结束：9
        :param campaign_id: 单元计划ID
        """
        return self._top_request(
            "taobao.zuanshi.banner.adgroup.status",
            {
                "adgroup_id_list": adgroup_id_list,
                "status": status,
                "campaign_id": campaign_id
            }
        )

    def taobao_zuanshi_banner_crowd_find(
            self,
            campaign_id,
            adgroup_id,
            target_id='',
            target_types='',
            page_num='1',
            page_size='15'
    ):
        """
        获取全店计划定向人群列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28893

        :param campaign_id: 计划ID
        :param adgroup_id: 单元ID
        :param target_id: 定向人群ID
        :param target_types: 指定多个定向类型
        :param page_num: 当前查询的记录页数
        :param page_size: 分页大小
        """
        return self._top_request(
            "taobao.zuanshi.banner.crowd.find",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "target_id": target_id,
                "target_types": target_types,
                "page_num": page_num,
                "page_size": page_size
            }
        )

    def taobao_zuanshi_banner_interest_find(
            self,
            nickname='',
            item_ids='',
            keyword=''
    ):
        """
        获取兴趣点定向兴趣点列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28894

        :param nickname: 按店铺名称查询兴趣点
        :param item_ids: 按宝贝ID列表查询兴趣点
        :param keyword: 按关键字查询兴趣点
        """
        return self._top_request(
            "taobao.zuanshi.banner.interest.find",
            {
                "nickname": nickname,
                "item_ids": item_ids,
                "keyword": keyword
            }
        )

    def taobao_zuanshi_shop_item_find(
            self,
            page_size,
            page_num,
            item_name=''
    ):
        """
        获取店铺宝贝列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28895

        :param page_size: 分页大小,最大20
        :param page_num: 当前页数
        :param item_name: 宝贝名称关键字
        """
        return self._top_request(
            "taobao.zuanshi.shop.item.find",
            {
                "page_size": page_size,
                "page_num": page_num,
                "item_name": item_name
            }
        )

    def taobao_zuanshi_account_get(
            self
    ):
        """
        获取账户信息接口
        获取账户信息接口。
        (1). BP显示余额 (字段 ：banlance ) = 现金余额(字段：cash_balance) + 赠款余额(字段：grant_balance)；
        (2). 计算日预算判断，是真正可用的金额 = 余额(字段：banlance) + 红包(字段：red_packet)+ 授信额度(字段：credit_balance)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28896

        """
        return self._top_request(
            "taobao.zuanshi.account.get"
        )

    def taobao_zuanshi_banner_catelabel_find(
            self
    ):
        """
        获取群体定向标签列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28897

        """
        return self._top_request(
            "taobao.zuanshi.banner.catelabel.find"
        )

    def taobao_zuanshi_banner_dmp_crowd_cancel(
            self,
            crowd_id
    ):
        """
        钻石展位全店取消DMP渠道应用接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        钻石展位全店取消DMP渠道应用接口；注意：全店和单品是两个渠道，分开两个接口调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28898

        :param crowd_id: DMP人群ID
        """
        return self._top_request(
            "taobao.zuanshi.banner.dmp.crowd.cancel",
            {
                "crowd_id": crowd_id
            }
        )

    def taobao_zuanshi_banner_cpm_targeting_find(
            self
    ):
        """
        获取全店cpm计划可用定向列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28899

        """
        return self._top_request(
            "taobao.zuanshi.banner.cpm.targeting.find"
        )

    def taobao_zuanshi_banner_cpc_targeting_find(
            self
    ):
        """
        获取全店cpc计划可用定向列表
        钻石展位全店cpc计划可用定向列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28900

        """
        return self._top_request(
            "taobao.zuanshi.banner.cpc.targeting.find"
        )

    def taobao_zuanshi_banner_creative_condition(
            self
    ):
        """
        获取创意查询条件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28901

        """
        return self._top_request(
            "taobao.zuanshi.banner.creative.condition"
        )

    def taobao_zuanshi_banner_area_code_find(
            self
    ):
        """
        获取地域列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28902

        """
        return self._top_request(
            "taobao.zuanshi.banner.area.code.find"
        )

    def taobao_zuanshi_banner_campaign_status(
            self,
            campaign_id_list,
            status
    ):
        """
        修改计划状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28904

        :param campaign_id_list: 计划ID列表
        :param status: 计划状态，0:暂停,1:投放,9:投放结束
        """
        return self._top_request(
            "taobao.zuanshi.banner.campaign.status",
            {
                "campaign_id_list": campaign_id_list,
                "status": status
            }
        )

    def taobao_zuanshi_banner_adgroup_adzone_findpage(
            self,
            campaign_id,
            adgroup_id,
            adzone_id_list='',
            page_size='20',
            page_num='1',
            adzone_size='',
            adzone_name=''
    ):
        """
        获取钻石展位全店推广单元的广告位绑定列表
        获取推广单元的广告位绑定列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28905

        :param campaign_id: 计划id
        :param adgroup_id: 推广单元id
        :param adzone_id_list: 广告位id列表
        :param page_size: 分页每页大小
        :param page_num: 页码
        :param adzone_size: 广告位尺寸
        :param adzone_name: 广告位名称
        """
        return self._top_request(
            "taobao.zuanshi.banner.adgroup.adzone.findpage",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "adzone_id_list": adzone_id_list,
                "page_size": page_size,
                "page_num": page_num,
                "adzone_size": adzone_size,
                "adzone_name": adzone_name
            }
        )

    def taobao_zuanshi_banner_adzone_condition(
            self
    ):
        """
        获取全店广告位查询条件
        智钻Banner广告位查询条件获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28906

        """
        return self._top_request(
            "taobao.zuanshi.banner.adzone.condition"
        )

    def taobao_zuanshi_banner_creative_bind(
            self,
            creative_id_list,
            adgroup_id,
            campaign_id
    ):
        """
        绑定创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28907

        :param creative_id_list: 创意ID列表
        :param adgroup_id: 单元ID
        :param campaign_id: 计划ID
        """
        return self._top_request(
            "taobao.zuanshi.banner.creative.bind",
            {
                "creative_id_list": creative_id_list,
                "adgroup_id": adgroup_id,
                "campaign_id": campaign_id
            }
        )

    def taobao_zuanshi_banner_crowd_add(
            self,
            campaign_id,
            adgroup_id,
            crowds
    ):
        """
        增加全店计划下定向
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28908

        :param campaign_id: 计划ID
        :param adgroup_id: 单元ID
        :param crowds: 定向对象列表
        """
        return self._top_request(
            "taobao.zuanshi.banner.crowd.add",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "crowds": crowds
            }
        )

    def taobao_zuanshi_banner_crowd_update(
            self,
            campaign_id,
            adgroup_id,
            crowds
    ):
        """
        修改全店计划下定向
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28909

        :param campaign_id: 计划ID
        :param adgroup_id: 单元ID
        :param crowds: 按类型更新,需先根据crowdType查询出定向再修改；如果像访客定向添加了自主店铺和种子店铺，修改时只传了一个则另一个被删除
        """
        return self._top_request(
            "taobao.zuanshi.banner.crowd.update",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "crowds": crowds
            }
        )

    def taobao_zuanshi_banner_dmp_find(
            self
    ):
        """
        获取DMP定向可用人群列表
        钻石展位全店达摩盘定向人群查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28910

        """
        return self._top_request(
            "taobao.zuanshi.banner.dmp.find"
        )

    def taobao_zuanshi_banner_account_budget_get(
            self
    ):
        """
        获取全店计划日预算总额
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28911

        """
        return self._top_request(
            "taobao.zuanshi.banner.account.budget.get"
        )

    def taobao_zuanshi_banner_creative_modify(
            self,
            id,
            name='',
            is_trans_to_wifi='',
            image='',
            cat_id='',
            click_url=''
    ):
        """
        修改创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28912

        :param id: 创意ID
        :param name: 创意名称
        :param is_trans_to_wifi: 是否需要pc转无线链接，true：是，false：否
        :param image: 图片内容.图片最大为2M,只支持jpg,png,jpeg
        :param cat_id: 类目ID，1,女装 2,彩妆，护肤 3,女鞋 4,男装 5,男鞋 6,箱包 7,食品，茶叶，烟酒 8,内衣 9,保健 10,饰品，服饰 11,运动 12,居家 13,童装，母婴 14,电器 15,数码 16,游戏 17,团购 18,其他
        :param click_url: 点击链接
        """
        return self._top_request(
            "taobao.zuanshi.banner.creative.modify",
            {
                "id": id,
                "name": name,
                "is_trans_to_wifi": is_trans_to_wifi,
                "image": image,
                "cat_id": cat_id,
                "click_url": click_url
            }
        )

    def taobao_zuanshi_banner_crowd_delete(
            self,
            campaign_id,
            adgroup_id,
            crowds
    ):
        """
        删除全店计划定向
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28913

        :param campaign_id: 计划ID
        :param adgroup_id: 单元ID
        :param crowds: 定向信息
        """
        return self._top_request(
            "taobao.zuanshi.banner.crowd.delete",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "crowds": crowds
            }
        )

    def taobao_zuanshi_banner_dmp_crowd_apply(
            self,
            crowd_id
    ):
        """
        应用全店计划DMP人群到渠道接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28914

        :param crowd_id: DMP人群ID
        """
        return self._top_request(
            "taobao.zuanshi.banner.dmp.crowd.apply",
            {
                "crowd_id": crowd_id
            }
        )

    def taobao_zuanshi_advertiser_target_adzone_rtrpts_get(
            self,
            log_date,
            campaign_id,
            adgroup_id,
            target_id,
            adzone_id
    ):
        """
        钻展广告主定向-资源位分时数据查询
        钻展广告主定向-资源位分时数据查询。注意：只有全店推广有定向和资源位叉乘数据，单品推广没有。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29049

        :param log_date: 日期
        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param target_id: 定向id
        :param adzone_id: 资源位id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.target.adzone.rtrpts.get",
            {
                "log_date": log_date,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "target_id": target_id,
                "adzone_id": adzone_id
            },
            result_processor=lambda x: x["target_adzone_realtime_rpt_list"]
        )

    def taobao_zuanshi_advertiser_account_rpts_day_get(
            self,
            start_time,
            end_time,
            effect,
            effect_type,
            campaign_model=''
    ):
        """
        钻展广告主账户数据分日列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29052

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param campaign_model: 计划类型。1：全店推广；4单品推广。不传则返回全店、单品加和数据
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.account.rpts.day.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "effect": effect,
                "effect_type": effect_type,
                "campaign_model": campaign_model
            },
            result_processor=lambda x: x["account_offline_rpt_days_list"]
        )

    def taobao_zuanshi_advertiser_campaign_rpts_day_get(
            self,
            start_time,
            end_time,
            campaign_id,
            effect,
            campaign_model,
            effect_type
    ):
        """
        钻展推广计划数据分日列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29053

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param campaign_id: 计划id
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.campaign.rpts.day.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "campaign_id": campaign_id,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type
            },
            result_processor=lambda x: x["campaign_offline_rpt_days_list"]
        )

    def taobao_zuanshi_advertiser_rpts_download_hour_get(
            self,
            log_date,
            hierarchy,
            campaign_model
    ):
        """
        钻展广告主分时数据异步下载接口
        钻展广告主分时数据异步下载接口，一次只能下载一天数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29058

        :param log_date: 日期
        :param hierarchy: 下载那种广告实体的数据取值范围 campaign,adgroup,creative,target,adzone,targetAdzone。一次一个，不能多个。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.rpts.download.hour.get",
            {
                "log_date": log_date,
                "hierarchy": hierarchy,
                "campaign_model": campaign_model
            }
        )

    def taobao_zuanshi_advertiser_rpts_download_day_get(
            self,
            start_time,
            end_time,
            hierarchy,
            campaign_model,
            effect_type
    ):
        """
        钻展广告主分日数据异步下载接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29059

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param hierarchy: 下载那种广告实体的数据取值范围 campaign,adgroup,creative,target,adzone,targetAdzone。一次一个，不能多个。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.rpts.download.day.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "hierarchy": hierarchy,
                "campaign_model": campaign_model,
                "effect_type": effect_type
            }
        )

    def taobao_zuanshi_advertiser_target_adzone_rpts_total_get(
            self,
            effect_type,
            effect,
            end_time,
            start_time,
            page_size,
            offset,
            target_id='',
            adgroup_id='',
            campaign_id='',
            adzone_id=''
    ):
        """
        钻展定向-资源位多日数据汇总查询
        钻展定向-资源位多日数据汇总查询。注意：只有全店推广有定向资源位叉乘数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29062

        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param end_time: 结束日期
        :param start_time: 开始日期
        :param page_size: 每页条数，必传；每页最多200
        :param offset: 分页偏移量
        :param target_id: 定向id
        :param adgroup_id: 单元id
        :param campaign_id: 计划id
        :param adzone_id: 资源位id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.target.adzone.rpts.total.get",
            {
                "effect_type": effect_type,
                "effect": effect,
                "end_time": end_time,
                "start_time": start_time,
                "page_size": page_size,
                "offset": offset,
                "target_id": target_id,
                "adgroup_id": adgroup_id,
                "campaign_id": campaign_id,
                "adzone_id": adzone_id
            },
            result_processor=lambda x: x["target_adzone_offline_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_adzone_rpts_total_get(
            self,
            start_time,
            end_time,
            effect,
            campaign_model,
            effect_type,
            page_size,
            offset,
            campaign_id='',
            adgroup_id='',
            adzone_id=''
    ):
        """
        钻展资源位多日汇总数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29063

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param page_size: 每页条数，必传；每页最多200
        :param offset: 分页偏移量
        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param adzone_id: 资源位id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.adzone.rpts.total.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type,
                "page_size": page_size,
                "offset": offset,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "adzone_id": adzone_id
            },
            result_processor=lambda x: x["adzone_offline_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_adgroup_rpts_day_get(
            self,
            start_time,
            end_time,
            campaign_id,
            adgroup_id,
            effect,
            campaign_model,
            effect_type
    ):
        """
        钻展推广单元数据分日列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29064

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.adgroup.rpts.day.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type
            },
            result_processor=lambda x: x["adgroup_offline_rpt_days_list"]
        )

    def taobao_zuanshi_advertiser_target_rpts_day_get(
            self,
            start_time,
            end_time,
            campaign_id,
            adgroup_id,
            target_id,
            effect,
            campaign_model,
            effect_type
    ):
        """
        钻展定向数据分日列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29065

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param target_id: 定向id
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.target.rpts.day.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "target_id": target_id,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type
            },
            result_processor=lambda x: x["target_offline_rpt_days_list"]
        )

    def taobao_zuanshi_advertiser_target_rpts_total_get(
            self,
            start_time,
            end_time,
            effect,
            campaign_model,
            effect_type,
            page_size,
            offset,
            campaign_id='',
            adgroup_id='',
            target_id=''
    ):
        """
        广告主定向多日汇总数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29066

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param page_size: 每页条数，必传；每页最多200
        :param offset: 分页偏移量
        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param target_id: 定向id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.target.rpts.total.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type,
                "page_size": page_size,
                "offset": offset,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "target_id": target_id
            },
            result_processor=lambda x: x["target_offline_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_creative_rpts_day_get(
            self,
            start_time,
            end_time,
            campaign_id,
            adgroup_id,
            creative_id,
            effect,
            campaign_model,
            effect_type
    ):
        """
        钻展创意数据分日列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29067

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param creative_id: 创意id
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.creative.rpts.day.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "creative_id": creative_id,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type
            },
            result_processor=lambda x: x["creative_offline_rpt_days_list"]
        )

    def taobao_zuanshi_advertiser_adzone_rpts_day_get(
            self,
            start_time,
            end_time,
            campaign_id,
            adgroup_id,
            adzone_id,
            effect,
            campaign_model,
            effect_type
    ):
        """
        钻展资源位数据分日列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29068

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param adzone_id: 资源位id
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.adzone.rpts.day.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "adzone_id": adzone_id,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type
            },
            result_processor=lambda x: x["adzone_offline_rpt_days_list"]
        )

    def taobao_zuanshi_advertiser_creative_rpts_total_get(
            self,
            start_time,
            end_time,
            effect,
            campaign_model,
            effect_type,
            page_size,
            offset,
            campaign_id='',
            adgroup_id='',
            creative_id=''
    ):
        """
        钻展创意多日报表数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29069

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param page_size: 每页条数，必传；每页最多200
        :param offset: 分页偏移量
        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param creative_id: 创意id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.creative.rpts.total.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type,
                "page_size": page_size,
                "offset": offset,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "creative_id": creative_id
            },
            result_processor=lambda x: x["creative_offline_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_adgroup_rpts_total_get(
            self,
            start_time,
            end_time,
            effect,
            campaign_model,
            effect_type,
            page_size,
            offset,
            campaign_id='',
            adgroup_id=''
    ):
        """
        钻展广告主推广单元多日汇总数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29070

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param page_size: 每页条数，必传；每页最多200
        :param offset: 分页偏移量
        :param campaign_id: 计划id
        :param adgroup_id: 推广单元id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.adgroup.rpts.total.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type,
                "page_size": page_size,
                "offset": offset,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id
            },
            result_processor=lambda x: x["adgroup_offline_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_campaign_rpts_total_get(
            self,
            start_time,
            end_time,
            effect,
            campaign_model,
            effect_type,
            page_size,
            offset,
            campaign_id=''
    ):
        """
        钻展计划多日数据汇总查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29071

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param page_size: 每页条数，必传；每页最多200
        :param offset: 分页偏移量
        :param campaign_id: 计划id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.campaign.rpts.total.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type,
                "page_size": page_size,
                "offset": offset,
                "campaign_id": campaign_id
            },
            result_processor=lambda x: x["campaign_offline_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_account_rpts_total_get(
            self,
            start_time,
            end_time,
            effect,
            effect_type,
            campaign_model=''
    ):
        """
        钻展广告主账户多日数据汇总查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29072

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param campaign_model: 计划类型。1：全店推广；4单品推广。不传返回账户整体数据
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.account.rpts.total.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "effect": effect,
                "effect_type": effect_type,
                "campaign_model": campaign_model
            },
            result_processor=lambda x: x["account_offline_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_target_adzone_rpts_day_get(
            self,
            effect_type,
            effect,
            target_id,
            adgroup_id,
            campaign_id,
            end_time,
            start_time,
            adzone_id
    ):
        """
        钻展定向资源位叉乘数据分日列表查询
        钻展定向资源位叉乘数据分日列表查询。注意：只有全店推广有定向资源位叉乘数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29073

        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param target_id: 定向id
        :param adgroup_id: 推广单元id
        :param campaign_id: 计划id
        :param end_time: 结束日期
        :param start_time: 开始日期
        :param adzone_id: 资源位id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.target.adzone.rpts.day.get",
            {
                "effect_type": effect_type,
                "effect": effect,
                "target_id": target_id,
                "adgroup_id": adgroup_id,
                "campaign_id": campaign_id,
                "end_time": end_time,
                "start_time": start_time,
                "adzone_id": adzone_id
            },
            result_processor=lambda x: x["target_adzone_offline_rpt_days_list"]
        )

    def taobao_zuanshi_advertiser_adzone_rtrpts_total_get(
            self,
            log_date,
            campaign_model,
            offset,
            page_size,
            adzone_id='',
            adgroup_id='',
            campaign_id=''
    ):
        """
        钻展广告主资源位分时当日汇总数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29159

        :param log_date: 日期
        :param campaign_model: 计划类型。1：全店推广，4：单品推广。
        :param offset: 偏移量
        :param page_size: 每页记录数
        :param adzone_id: 资源位id
        :param adgroup_id: 推广单元id
        :param campaign_id: 计划id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.adzone.rtrpts.total.get",
            {
                "log_date": log_date,
                "campaign_model": campaign_model,
                "offset": offset,
                "page_size": page_size,
                "adzone_id": adzone_id,
                "adgroup_id": adgroup_id,
                "campaign_id": campaign_id
            },
            result_processor=lambda x: x["adzone_realtime_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_creative_rtrpts_total_get(
            self,
            log_date,
            campaign_model,
            offset,
            page_size,
            creative_id='',
            adgroup_id='',
            campaign_id=''
    ):
        """
        钻展广告主创意分时当日汇总数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29162

        :param log_date: 日期
        :param campaign_model: 计划类型。1：全店推广，4：单品推广。
        :param offset: 偏移量
        :param page_size: 每页记录数
        :param creative_id: 创意id
        :param adgroup_id: 推广单元id
        :param campaign_id: 计划id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.creative.rtrpts.total.get",
            {
                "log_date": log_date,
                "campaign_model": campaign_model,
                "offset": offset,
                "page_size": page_size,
                "creative_id": creative_id,
                "adgroup_id": adgroup_id,
                "campaign_id": campaign_id
            },
            result_processor=lambda x: x["creative_realtime_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_target_adzone_rtrpts_total_get(
            self,
            log_date,
            offset,
            page_size,
            target_id='',
            adgroup_id='',
            campaign_id='',
            adzone_id=''
    ):
        """
        钻展广告主定向-资源位分时当日汇总数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29163

        :param log_date: 日期
        :param offset: 分页偏移量
        :param page_size: 分页记录数
        :param target_id: 定向id
        :param adgroup_id: 推广单元id
        :param campaign_id: 计划id
        :param adzone_id: 资源位id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.target.adzone.rtrpts.total.get",
            {
                "log_date": log_date,
                "offset": offset,
                "page_size": page_size,
                "target_id": target_id,
                "adgroup_id": adgroup_id,
                "campaign_id": campaign_id,
                "adzone_id": adzone_id
            },
            result_processor=lambda x: x["target_adzone_realtime_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_campaign_rtrpts_total_get(
            self,
            log_date,
            campaign_model,
            offset,
            page_size,
            campaign_id=''
    ):
        """
        钻展广告主计划分时当日汇总数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29164

        :param log_date: 日期
        :param campaign_model: 计划类型。1：全店推广，4：单品推广。
        :param offset: 偏移量
        :param page_size: 每页记录数
        :param campaign_id: 计划id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.campaign.rtrpts.total.get",
            {
                "log_date": log_date,
                "campaign_model": campaign_model,
                "offset": offset,
                "page_size": page_size,
                "campaign_id": campaign_id
            },
            result_processor=lambda x: x["campaign_realtime_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_target_rtrpts_total_get(
            self,
            log_date,
            campaign_model,
            offset,
            page_size,
            target_id='',
            campaign_id='',
            adgroup_id=''
    ):
        """
        钻展广告主定向分时当日汇总数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29165

        :param log_date: 日期
        :param campaign_model: 计划类型。1：全店推广，4：单品推广。
        :param offset: 分页偏移量
        :param page_size: 每页记录数
        :param target_id: 定向id
        :param campaign_id: 计划id
        :param adgroup_id: 推广单元id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.target.rtrpts.total.get",
            {
                "log_date": log_date,
                "campaign_model": campaign_model,
                "offset": offset,
                "page_size": page_size,
                "target_id": target_id,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id
            },
            result_processor=lambda x: x["target_realtime_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_adgroup_rtrpts_total_get(
            self,
            log_date,
            campaign_model,
            offset,
            page_size,
            adgroup_id='',
            campaign_id=''
    ):
        """
        钻展广告主推广单元分时当日汇总数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29166

        :param log_date: 日期
        :param campaign_model: 计划类型。1：全店推广，4：单品推广。
        :param offset: 偏移量
        :param page_size: 每页记录数
        :param adgroup_id: 单元id
        :param campaign_id: 计划id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.adgroup.rtrpts.total.get",
            {
                "log_date": log_date,
                "campaign_model": campaign_model,
                "offset": offset,
                "page_size": page_size,
                "adgroup_id": adgroup_id,
                "campaign_id": campaign_id
            },
            result_processor=lambda x: x["adgroup_realtime_rpt_total_list"]
        )

    def taobao_zuanshi_advertiser_rpts_download_day_total_get(
            self,
            start_time,
            end_time,
            hierarchy,
            campaign_model,
            effect_type
    ):
        """
        钻展广告主分时当日汇总数据异步下载接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29215

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param hierarchy: 下载那种广告实体的数据取值范围 campaign,adgroup,creative,target,adzone,targetAdzone。一次一个，不能多个。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.rpts.download.day.total.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "hierarchy": hierarchy,
                "campaign_model": campaign_model,
                "effect_type": effect_type
            }
        )

    def taobao_zuanshi_category_rpts_total_get(
            self,
            start_time,
            end_time,
            shop_main_cat_id,
            effect,
            effect_type,
            campaign_model=''
    ):
        """
        类目报表数据多日汇总接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29588

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param shop_main_cat_id: 类目id
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        """
        return self._top_request(
            "taobao.zuanshi.category.rpts.total.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "shop_main_cat_id": shop_main_cat_id,
                "effect": effect,
                "effect_type": effect_type,
                "campaign_model": campaign_model
            },
            result_processor=lambda x: x["category_offline_rpt_total_list"]
        )

    def taobao_zuanshi_banner_cat_find(
            self,
            campaign_type,
            interest_name=''
    ):
        """
        高级兴趣点-类目查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29981

        :param campaign_type: 计划类型，banner_cpm:2，banner_cpc:8
        :param interest_name: 类目名称
        """
        return self._top_request(
            "taobao.zuanshi.banner.cat.find",
            {
                "campaign_type": campaign_type,
                "interest_name": interest_name
            }
        )

    def taobao_zuanshi_banner_industryshop_find(
            self,
            campaign_type,
            industry_shop_name=''
    ):
        """
        智钻获取行业店铺定向标签选项列表
        智钻对外开放行业店铺定向，该API用于查询此定向的标签选项列表，便于客户选择使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31995

        :param campaign_type: BANNER_CPM
        :param industry_shop_name: 查询出“摄影”的标签信息
        """
        return self._top_request(
            "taobao.zuanshi.banner.industryshop.find",
            {
                "campaign_type": campaign_type,
                "industry_shop_name": industry_shop_name
            }
        )

    def taobao_zuanshi_banner_relationshop_package_condition_find(
            self
    ):
        """
        智钻获取店铺型定向店铺包条件
        智钻对外开放店铺型定向，该API用于查询此定向的店铺包对应的条件，便于客户选择使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32008

        """
        return self._top_request(
            "taobao.zuanshi.banner.relationshop.package.condition.find"
        )

    def taobao_zuanshi_banner_relationshop_package_find(
            self,
            campaign_type
    ):
        """
        智钻获取店铺型定向店铺包列表
        智钻店铺型定向，获取客户可用的店铺包列表，提供客户定向选择的集合
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32015

        :param campaign_type: BANNER_CPM
        """
        return self._top_request(
            "taobao.zuanshi.banner.relationshop.package.find",
            {
                "campaign_type": campaign_type
            }
        )

    def taobao_zuanshi_banner_relationshop_mine_find(
            self,
            campaign_type
    ):
        """
        获取店铺型定向-本店行为细分标签列表
        智钻店铺型定向，获取本店行为细分的标签细节，已提供给客户使用行为细化的能力
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32016

        :param campaign_type: BANNER_CPM
        """
        return self._top_request(
            "taobao.zuanshi.banner.relationshop.mine.find",
            {
                "campaign_type": campaign_type
            }
        )

    def taobao_zuanshi_banner_seniorinterest_find(
            self,
            campaign_type,
            interest_name=''
    ):
        """
        类目型定向高级兴趣点集合查询
        类目型定向查询高级兴趣点集合，支持兴趣点类目筛选
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32024

        :param campaign_type: CPM计划
        :param interest_name: 兴趣点名
        """
        return self._top_request(
            "taobao.zuanshi.banner.seniorinterest.find",
            {
                "campaign_type": campaign_type,
                "interest_name": interest_name
            }
        )

    def taobao_zuanshi_banner_intelligence_shop_scale_find(
            self,
            campaign_type
    ):
        """
        智钻智能定向（店铺优质人群），获取可用人群规模列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32025

        :param campaign_type: BANNER_CPM
        """
        return self._top_request(
            "taobao.zuanshi.banner.intelligence.shop.scale.find",
            {
                "campaign_type": campaign_type
            }
        )

    def taobao_zuanshi_advertiser_creative_target_rpts_total_get(
            self,
            start_time,
            end_time,
            effect,
            campaign_model,
            effect_type,
            page_size,
            offset,
            campaign_id='',
            adgroup_id='',
            creative_id=''
    ):
        """
        钻展创意定向粒度多日报表数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41454

        :param start_time: 开始日期
        :param end_time: 结束日期
        :param effect: 效果周期，取值范围：3,7,15。分别表示效果转化周期-3天/7天/15天。
        :param campaign_model: 计划类型。1：全店推广；4单品推广
        :param effect_type: 效果类型。“impression”：展现效果；“click”：点击效果
        :param page_size: 每页条数，必传；每页最多200
        :param offset: 分页偏移量
        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param creative_id: 计划id
        """
        return self._top_request(
            "taobao.zuanshi.advertiser.creative.target.rpts.total.get",
            {
                "start_time": start_time,
                "end_time": end_time,
                "effect": effect,
                "campaign_model": campaign_model,
                "effect_type": effect_type,
                "page_size": page_size,
                "offset": offset,
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "creative_id": creative_id
            },
            result_processor=lambda x: x["creative_offline_rpt_total_list"]
        )

    def taobao_zuanshi_banner_upgrade_target_predict_uv(
            self,
            target_labels
    ):
        """
        预估定向标签uv
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42836

        :param target_labels: 预估定向标签信息
        """
        return self._top_request(
            "taobao.zuanshi.banner.upgrade.target.predict.uv",
            {
                "target_labels": target_labels
            }
        )

    def taobao_zuanshi_banner_upgrade_target_suggest_find(
            self,
            target_type,
            campaign_type
    ):
        """
        钻石展位定向推荐查询
        根据定向类型，查询推荐定向
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42837

        :param target_type: 定向类型
        :param campaign_type: 计划类型(cpm/cpc)
        """
        return self._top_request(
            "taobao.zuanshi.banner.upgrade.target.suggest.find",
            {
                "target_type": target_type,
                "campaign_type": campaign_type
            }
        )

    def taobao_zuanshi_banner_upgrade_target_predict_pv(
            self,
            target_labels
    ):
        """
        pv预估
        预估定向标签pv
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42838

        :param target_labels: 预估定向标签信息
        """
        return self._top_request(
            "taobao.zuanshi.banner.upgrade.target.predict.pv",
            {
                "target_labels": target_labels
            }
        )

    def taobao_zuanshi_banner_upgrade_target_find(
            self,
            campaign_type
    ):
        """
        查询有权限的定向列表
        查询客户有权限的新定向列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42839

        :param campaign_type: 计划类型(cpm/cpc)
        """
        return self._top_request(
            "taobao.zuanshi.banner.upgrade.target.find",
            {
                "campaign_type": campaign_type
            }
        )

    def taobao_zuanshi_banner_upgrade_target_label_find(
            self,
            target_type,
            campaign_type,
            option_name='',
            option_page_size='50',
            option_offset='0'
    ):
        """
        根据定向类型查询定向标签
        根据定向类型查询客户可用标签
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42857

        :param target_type: 定向类型
        :param campaign_type: 计划类型(cpm/cpc)
        :param option_name: 选项名称，用于搜索
        :param option_page_size: 选项分页每页数量
        :param option_offset: 当前页要显示数据的起始位置
        """
        return self._top_request(
            "taobao.zuanshi.banner.upgrade.target.label.find",
            {
                "target_type": target_type,
                "campaign_type": campaign_type,
                "option_name": option_name,
                "option_page_size": option_page_size,
                "option_offset": option_offset
            }
        )

    def taobao_zuanshi_banner_upgrade_crowd_page(
            self,
            campaign_id,
            adgroup_id,
            campaign_name='',
            status='',
            page_size='50',
            crowd_id='',
            target_types='',
            crowd_name='',
            offset='0',
            target_type='',
            adgroup_name=''
    ):
        """
        分页查询全店计划下的新定向
        [新]分页查询全店计划下的新定向
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42858

        :param campaign_id: 计划id
        :param adgroup_id: 单元id
        :param campaign_name: 计划名称
        :param status: 人群状态
        :param page_size: 分页大小
        :param crowd_id: 定向id
        :param target_types: 定向类型
        :param crowd_name: 人群名称
        :param offset: 分页偏移量
        :param target_type: 定向类型
        :param adgroup_name: 单元名称
        """
        return self._top_request(
            "taobao.zuanshi.banner.upgrade.crowd.page",
            {
                "campaign_id": campaign_id,
                "adgroup_id": adgroup_id,
                "campaign_name": campaign_name,
                "status": status,
                "page_size": page_size,
                "crowd_id": crowd_id,
                "target_types": target_types,
                "crowd_name": crowd_name,
                "offset": offset,
                "target_type": target_type,
                "adgroup_name": adgroup_name
            }
        )

    def taobao_zuanshi_banner_upgrade_crowd_delete(
            self,
            crowds=None
    ):
        """
        删除全店计划下的新定向
        [新]删除全店计划下的新定向
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42859

        :param crowds: 人群
        """
        return self._top_request(
            "taobao.zuanshi.banner.upgrade.crowd.delete",
            {
                "crowds": crowds
            }
        )

    def taobao_zuanshi_banner_upgrade_crowd_update(
            self,
            crowds=None
    ):
        """
        更新全店计划下的新定向
        [新]更新全店计划下的新定向
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42860

        :param crowds: 人群
        """
        return self._top_request(
            "taobao.zuanshi.banner.upgrade.crowd.update",
            {
                "crowds": crowds
            }
        )

    def taobao_zuanshi_banner_upgrade_crowd_add(
            self,
            crowds=None
    ):
        """
        增加全店计划下的新定向
        [新]增加全店计划下的新定向
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42861

        :param crowds: 新增定向人群
        """
        return self._top_request(
            "taobao.zuanshi.banner.upgrade.crowd.add",
            {
                "crowds": crowds
            }
        )

    def taobao_zuanshi_banner_upgrade_adgroup_create(
            self,
            campaign_id,
            title,
            crowds,
            adzone_bid_d_t_os,
            intelligent_bid='1'
    ):
        """
        新定向体系下新增单元
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43117

        :param campaign_id: 计划id
        :param title: 单元标题
        :param crowds: 人群结构
        :param adzone_bid_d_t_os: 资源位列表
        :param intelligent_bid: 智能出价，0：不使用,1：优化进店，2：优化成交，cpc不能选择2优化成交
        """
        return self._top_request(
            "taobao.zuanshi.banner.upgrade.adgroup.create",
            {
                "campaign_id": campaign_id,
                "title": title,
                "crowds": crowds,
                "adzone_bid_d_t_os": adzone_bid_d_t_os,
                "intelligent_bid": intelligent_bid
            }
        )


class TbXuNiYuanXian(DingTalkBaseAPI):
    """
    虚拟院线API
    """

    def taobao_taotv_tvtrade_ticket_status(
            self,
            order_no,
            ticket,
            status,
            time
    ):
        """
        全球播票据状态变更接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28215

        :param order_no: 阿里数娱点播订单号
        :param ticket: 全球播票据
        :param status: 票据状态
        :param time: 票据变更发生时间
        """
        return self._top_request(
            "taobao.taotv.tvtrade.ticket.status",
            {
                "order_no": order_no,
                "ticket": ticket,
                "status": status,
                "time": time
            }
        )

    def youku_tv_desktop_toyou_recommend(
            self,
            bcp,
            uuid,
            max_size,
            token='',
            device_model='',
            version_code='0',
            mac='',
            from_='',
            charge_type='',
            sw='',
            device_media='',
            ip=''
    ):
        """
        TV桌面为你推荐接口
        提供为你推荐数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32552

        :param bcp: 播控方，1:华数 7:CIBN
        :param uuid: 终端设备uuid
        :param max_size: 获取的最大节目数
        :param token: 用户登陆token
        :param device_model: 终端设备型号
        :param version_code: 桌面版本号
        :param mac: 终端设备mac
        :param from_: 影视来源，0-淘tv 7-优酷免费 9-优酷付费 多项用“,”隔开
        :param charge_type: 支持收费方式，0-免费 1-限免 2-单点 3-包月 4-红包 5-单包,多项用“,”隔开
        :param sw: 分辨率，sw720 sw1080
        :param device_media: 支持媒体类型,dts,drm,dolby,h265
        :param ip: 请求IP
        """
        return self._top_request(
            "youku.tv.desktop.toyou.recommend",
            {
                "bcp": bcp,
                "uuid": uuid,
                "max_size": max_size,
                "token": token,
                "device_model": device_model,
                "version_code": version_code,
                "mac": mac,
                "from": from_,
                "charge_type": charge_type,
                "sw": sw,
                "device_media": device_media,
                "ip": ip
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_taotv_carousel_channel_all(
            self,
            system_info
    ):
        """
        获取所有频道列表
        获取所有频道列表，按照序号升序
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35817

        :param system_info: 系统信息
        """
        return self._top_request(
            "taobao.taotv.carousel.channel.all",
            {
                "system_info": system_info
            }
        )

    def taobao_taotv_carousel_category_list(
            self,
            system_info=''
    ):
        """
        获取轮播分类列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35818

        :param system_info: 设备信息
        """
        return self._top_request(
            "taobao.taotv.carousel.category.list",
            {
                "system_info": system_info
            }
        )

    def taobao_taotv_carousel_playlist_get(
            self,
            channel_id='',
            system_info=''
    ):
        """
        根据频道ID获取频道下节目单以及当前播放
        根据频道ID获取频道下节目单以及当前播放，包括所有视频源的视频
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35819

        :param channel_id: 频道ID
        :param system_info: 设备信息
        """
        return self._top_request(
            "taobao.taotv.carousel.playlist.get",
            {
                "channel_id": channel_id,
                "system_info": system_info
            }
        )

    def taobao_taotv_video_playlist_get(
            self,
            play_list_id='',
            system_info=''
    ):
        """
        根据频道ID获取频道下节目单以及当前播放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35820

        :param play_list_id: 播单id
        :param system_info: 系统信息
        """
        return self._top_request(
            "taobao.taotv.video.playlist.get",
            {
                "play_list_id": play_list_id,
                "system_info": system_info
            }
        )

    def taobao_taotv_video_playlist_rec_get(
            self,
            from_='',
            video_id='',
            system_info=''
    ):
        """
        根据视频源+视频ID获得相关推荐
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35821

        :param from_: 视频来源
        :param video_id: 视频ID
        :param system_info: 系统信息
        """
        return self._top_request(
            "taobao.taotv.video.playlist.rec.get",
            {
                "from": from_,
                "video_id": video_id,
                "system_info": system_info
            }
        )

    def taobao_taotv_video_playlist_nav_get(
            self,
            play_list_id='',
            play_list_nav='',
            system_info=''
    ):
        """
        根据频道ID获取频道下节目单以及当前播放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据聚焦播单ID拿到下面播单视频，根据左侧播单ID列表批量拿到播单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35822

        :param play_list_id: 播单id
        :param play_list_nav: 播单列表
        :param system_info: 系统信息
        """
        return self._top_request(
            "taobao.taotv.video.playlist.nav.get",
            {
                "play_list_id": play_list_id,
                "play_list_nav": play_list_nav,
                "system_info": system_info
            }
        )

    def taobao_taotv_video_playlist_all(
            self,
            system_info=''
    ):
        """
        获取播单列表
        根据牌照和视频源等获取播单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36780

        :param system_info: 系统信息
        """
        return self._top_request(
            "taobao.taotv.video.playlist.all",
            {
                "system_info": system_info
            }
        )

    def taobao_taotv_video_playlist_ottnav_get(
            self,
            play_list_id='',
            play_list_nav='',
            system_info=''
    ):
        """
        ott播单
        根据聚焦播单ID拿到下面播单视频，根据左侧播单ID列表批量拿到播单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38149

        :param play_list_id: 播单id
        :param play_list_nav: 播单列表
        :param system_info: 系统信息
        """
        return self._top_request(
            "taobao.taotv.video.playlist.ottnav.get",
            {
                "play_list_id": play_list_id,
                "play_list_nav": play_list_nav,
                "system_info": system_info
            }
        )

    def taobao_taotv_video_playlist_page(
            self,
            system_info,
            page_no
    ):
        """
        分页获取所有播单
        获取所有播单信息（分页）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42440

        :param system_info: 客户端信息
        :param page_no: 当前页（从1开始）
        """
        return self._top_request(
            "taobao.taotv.video.playlist.page",
            {
                "system_info": system_info,
                "page_no": page_no
            }
        )


class TbZhiShiKu(DingTalkBaseAPI):
    """
    知识库API
    """

    def alibaba_kclub_kc_getcategorytree(
            self,
            tenant_id,
            auth
    ):
        """
        知识云-查询租户下类目树
        知识云-查询租户下类目树。通过租户id、类型(外部类目、帮助中心类目、内部类目)。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38771

        :param tenant_id: 租户id
        :param auth: 鉴权参数
        """
        return self._top_request(
            "alibaba.kclub.kc.getcategorytree",
            {
                "tenant_id": tenant_id,
                "auth": auth
            }
        )

    def alibaba_kclub_kc_qa_get(
            self,
            question_id,
            auth,
            filter=None
    ):
        """
        知识云-查询单个知识详情
        知识云-查询单个知识详情。通过租户id、问题id查询问题详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38842

        :param question_id: 问题id
        :param auth: 鉴权
        :param filter: 过滤条件
        """
        return self._top_request(
            "alibaba.kclub.kc.qa.get",
            {
                "question_id": question_id,
                "auth": auth,
                "filter": filter
            }
        )

    def alibaba_kclub_kc_queryknowledge(
            self,
            auth,
            kc_qa_query=None
    ):
        """
        知识云-通用知识查询服务
        知识云-通用知识查询服务。通过租户id、类目id、知识类型、知识状态等条件查询类目。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38843

        :param auth: 鉴权
        :param kc_qa_query: 查询条件
        """
        return self._top_request(
            "alibaba.kclub.kc.queryknowledge",
            {
                "auth": auth,
                "kc_qa_query": kc_qa_query
            }
        )

    def alibaba_kclub_kc_qa_search(
            self,
            query,
            auth
    ):
        """
        知识云-知识检索
        知识云-知识搜索服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38844

        :param query: 查询参数
        :param auth: 鉴权
        """
        return self._top_request(
            "alibaba.kclub.kc.qa.search",
            {
                "query": query,
                "auth": auth
            }
        )

    def alibaba_kclub_kc_qa_search_page(
            self,
            query,
            auth
    ):
        """
        知识云-知识检索(分页)
        知识云-知识搜索服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40537

        :param query: 查询参数
        :param auth: 鉴权
        """
        return self._top_request(
            "alibaba.kclub.kc.qa.search.page",
            {
                "query": query,
                "auth": auth
            }
        )


class TbFanQiZhaFengKong(DingTalkBaseAPI):
    """
    反欺诈风控API
    """

    def taobao_collinafacade_nocaptcha_sig_authenticate(
            self,
            sig_authenticate_context
    ):
        """
        人机识别
        人机识别颁发签名串后,本接口负责向ISV提供签名串校验服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24871

        :param sig_authenticate_context: 签名串校验接口入参
        """
        return self._top_request(
            "taobao.collinafacade.nocaptcha.sig.authenticate",
            {
                "sig_authenticate_context": sig_authenticate_context
            }
        )

    def taobao_antifraud_riskassessment_get(
            self,
            collinadata_context
    ):
        """
        反欺诈风险识别
        反欺诈服务是阿里大数据风控服务能力的对外输出，通过用户信誉、行为分析精准识别可信用户和风险用户并实时防御，解决交易、支付、活动等关键业务环节存在的欺诈威胁，保护企业品牌和数据，降低企业经济损失
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25505

        :param collinadata_context: 风控查询参数
        """
        return self._top_request(
            "taobao.antifraud.riskassessment.get",
            {
                "collinadata_context": collinadata_context
            },
            result_processor=lambda x: x["risk_result"]
        )

    def taobao_antifraud_riskuser_get(
            self,
            param_account_query=None
    ):
        """
        反欺诈用户风险查询
        根据用户基础信息，核实平台上的用户是否存在欺诈风险
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25947

        :param param_account_query: 风险用户查询条件
        """
        return self._top_request(
            "taobao.antifraud.riskuser.get",
            {
                "param_account_query": param_account_query
            }
        )

    def taobao_antifraud_riskuser_feedback(
            self,
            param_account_feedback
    ):
        """
        反欺诈用户风险查询反馈
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        反欺诈用户风险信息查询的反馈接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25948

        :param param_account_feedback: 风险用户查询反馈入参
        """
        return self._top_request(
            "taobao.antifraud.riskuser.feedback",
            {
                "param_account_feedback": param_account_feedback
            }
        )


class TbGuoJiZhanWaiMaoZhiTongChe(DingTalkBaseAPI):
    """
    国际站外贸直通车API
    """

    def alibaba_scbp_ad_keyword_get(
            self,
            query_dto=None
    ):
        """
        外贸直通车查询关键词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24978

        :param query_dto: KeywordQuery
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.get",
            {
                "query_dto": query_dto
            }
        )

    def alibaba_scbp_effect_account_list(
            self,
            p4p_account_report_query
    ):
        """
        账户-报表
        账户-报表,支持最近7天，最近30天，以及180天内时间区间。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24979

        :param p4p_account_report_query: AccountQuery
        """
        return self._top_request(
            "alibaba.scbp.effect.account.list",
            {
                "p4p_account_report_query": p4p_account_report_query
            }
        )

    def alibaba_scbp_effect_product_report(
            self,
            p4p_product_report_query=None
    ):
        """
        所有产品报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24980

        :param p4p_product_report_query: ProductQuery
        """
        return self._top_request(
            "alibaba.scbp.effect.product.report",
            {
                "p4p_product_report_query": p4p_product_report_query
            }
        )

    def alibaba_scbp_tag_list(
            self
    ):
        """
        查询所有分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24981

        """
        return self._top_request(
            "alibaba.scbp.tag.list",
            result_processor=lambda x: x["tag_list"]
        )

    def alibaba_scbp_effect_keyword_list(
            self,
            p4p_keyword_report_query=None
    ):
        """
        关键词报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24982

        :param p4p_keyword_report_query: IKeywordQuery
        """
        return self._top_request(
            "alibaba.scbp.effect.keyword.list",
            {
                "p4p_keyword_report_query": p4p_keyword_report_query
            }
        )

    def alibaba_scbp_reckeyword_search(
            self,
            query_dto=None
    ):
        """
        推荐词-词推词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24984

        :param query_dto: RecKeywordQuery
        """
        return self._top_request(
            "alibaba.scbp.reckeyword.search",
            {
                "query_dto": query_dto
            }
        )

    def alibaba_scbp_tag_add(
            self,
            tag_name
    ):
        """
        创建关键词分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24985

        :param tag_name: 分组名称，最多允许创建100个
        """
        return self._top_request(
            "alibaba.scbp.tag.add",
            {
                "tag_name": tag_name
            },
            result_processor=lambda x: x["tag_name"]
        )

    def alibaba_scbp_ad_keyword_add(
            self,
            ad_keyword,
            price_str,
            tag_name=''
    ):
        """
        外贸直通车加词
        外贸直通车加词服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24986

        :param ad_keyword: 加入的词
        :param price_str: 词的出价
        :param tag_name: 分组名
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.add",
            {
                "ad_keyword": ad_keyword,
                "price_str": price_str,
                "tag_name": tag_name
            }
        )

    def alibaba_scbp_ad_keyword_status_update(
            self,
            ad_keyword,
            status
    ):
        """
        关键词启动暂停推广
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24987

        :param ad_keyword: 只能取ascci字符
        :param status: 只能去in_promotion或者stopped
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.status.update",
            {
                "ad_keyword": ad_keyword,
                "status": status
            }
        )

    def alibaba_scbp_ad_keyword_price_update(
            self,
            ad_keyword,
            price_str
    ):
        """
        关键词改价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24988

        :param ad_keyword: 只能取ascci字符
        :param price_str: 关键词价格单位元，一位小数
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.price.update",
            {
                "ad_keyword": ad_keyword,
                "price_str": price_str
            }
        )

    def alibaba_scbp_ad_keyword_rank_get(
            self,
            keyword
    ):
        """
        获取外贸直通车关键词预估排名
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24990

        :param keyword: 查询预估排名的关键词
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.rank.get",
            {
                "keyword": keyword
            },
            result_processor=lambda x: x["rank_location"]
        )

    def alibaba_scbp_ad_keyword_delete(
            self,
            ad_keyword
    ):
        """
        外贸直通车删除关键词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24991

        :param ad_keyword: 要删除的关键词
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.delete",
            {
                "ad_keyword": ad_keyword
            }
        )

    def alibaba_scbp_ad_keyword_rank_price_get(
            self,
            keyword
    ):
        """
        外贸直通车关键词前五名排价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24992

        :param keyword: 关键词
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.rank.price.get",
            {
                "keyword": keyword
            },
            result_processor=lambda x: x["rank_price_list"]
        )

    def alibaba_scbp_effect_account_date_get(
            self
    ):
        """
        获取最近报表生成时间
        获取最近报表生成时间,格式为yyyy-MM-dd
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24997

        """
        return self._top_request(
            "alibaba.scbp.effect.account.date.get",
            result_processor=lambda x: x["report_date"]
        )

    def alibaba_scbp_effect_product_single_get(
            self,
            p4p_product_report_query=None
    ):
        """
        单个产品的报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24998

        :param p4p_product_report_query: ProductQuery
        """
        return self._top_request(
            "alibaba.scbp.effect.product.single.get",
            {
                "p4p_product_report_query": p4p_product_report_query
            }
        )

    def alibaba_scbp_effect_keyword_single_get(
            self,
            p4p_keyword_report_query=None
    ):
        """
        单个关键词效果报表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24999

        :param p4p_keyword_report_query: IKeywordQuery
        """
        return self._top_request(
            "alibaba.scbp.effect.keyword.single.get",
            {
                "p4p_keyword_report_query": p4p_keyword_report_query
            }
        )

    def alibaba_scbp_reckeyword_sys_get(
            self,
            query_dto=None
    ):
        """
        系统推荐
        查询系统推荐词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25004

        :param query_dto: RecKeywordQuery
        """
        return self._top_request(
            "alibaba.scbp.reckeyword.sys.get",
            {
                "query_dto": query_dto
            }
        )

    def alibaba_scbp_tag_delete(
            self,
            tag_name
    ):
        """
        删除关键词分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25196

        :param tag_name: 关键词分组名
        """
        return self._top_request(
            "alibaba.scbp.tag.delete",
            {
                "tag_name": tag_name
            }
        )

    def alibaba_scbp_tag_rename(
            self,
            tag_name,
            new_tag_name
    ):
        """
        重命名关键词分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25197

        :param tag_name: 需要重命名的关键词分组名
        :param new_tag_name: 新分组名
        """
        return self._top_request(
            "alibaba.scbp.tag.rename",
            {
                "tag_name": tag_name,
                "new_tag_name": new_tag_name
            }
        )

    def alibaba_scbp_account_daycost_get(
            self
    ):
        """
        查询今日消耗
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25199

        """
        return self._top_request(
            "alibaba.scbp.account.daycost.get",
            result_processor=lambda x: x["day_cost"]
        )

    def alibaba_scbp_account_budget_get(
            self
    ):
        """
        查询日消耗预算
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25200

        """
        return self._top_request(
            "alibaba.scbp.account.budget.get",
            result_processor=lambda x: x["budget"]
        )

    def alibaba_scbp_keyword_matched_products_get(
            self,
            ad_keyword
    ):
        """
        查询和词匹配的推广产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25201

        :param ad_keyword: 已购买的关键词
        """
        return self._top_request(
            "alibaba.scbp.keyword.matched.products.get",
            {
                "ad_keyword": ad_keyword
            },
            result_processor=lambda x: x["mached_product_list"]
        )

    def alibaba_scbp_product_list(
            self,
            group_id,
            per_page_size='10',
            to_page='1'
    ):
        """
        查询P4P产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25202

        :param group_id: 产品分组标识
        :param per_page_size: 产品分页查询，每页个数，最大值20
        :param to_page: 第几页
        """
        return self._top_request(
            "alibaba.scbp.product.list",
            {
                "group_id": group_id,
                "per_page_size": per_page_size,
                "to_page": to_page
            }
        )

    def alibaba_scbp_product_group_get(
            self,
            group_id=''
    ):
        """
        查询指定产品分组的下一层子分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25207

        :param group_id: 产品分组标识，null表示查询第一层分组
        """
        return self._top_request(
            "alibaba.scbp.product.group.get",
            {
                "group_id": group_id
            },
            result_processor=lambda x: x["roduct_group_list"]
        )

    def alibaba_scbp_account_isarrears_get(
            self
    ):
        """
        查询关键词推广账户是否欠款
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25440

        """
        return self._top_request(
            "alibaba.scbp.account.isarrears.get"
        )

    def alibaba_scbp_product_preferential_update(
            self,
            keyword_id,
            product_id,
            status
    ):
        """
        设置P4P产品优先推广状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26257

        :param keyword_id: 关键词ID
        :param product_id: 产品ID
        :param status: Y:设置优推,N:取消优推
        """
        return self._top_request(
            "alibaba.scbp.product.preferential.update",
            {
                "keyword_id": keyword_id,
                "product_id": product_id,
                "status": status
            }
        )

    def alibaba_scbp_ad_keyword_tag_update(
            self,
            keyword_id_list,
            tag_id_list=''
    ):
        """
        修改关键词所属分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26258

        :param keyword_id_list: 关键词ID列表
        :param tag_id_list: 关键词分组ID,不传表示取消关键词的分组
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.tag.update",
            {
                "keyword_id_list": keyword_id_list,
                "tag_id_list": tag_id_list
            }
        )

    def alibaba_scbp_product_status_update(
            self,
            product_id_list,
            status
    ):
        """
        修改P4P产品推广状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26259

        :param product_id_list: 产品ID列表
        :param status: enabled:开启,disabled:暂停
        """
        return self._top_request(
            "alibaba.scbp.product.status.update",
            {
                "product_id_list": product_id_list,
                "status": status
            }
        )

    def alibaba_scbp_account_status_get(
            self
    ):
        """
        查询账户级别关键词推广状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26262

        """
        return self._top_request(
            "alibaba.scbp.account.status.get"
        )

    def alibaba_scbp_account_status_update(
            self,
            status
    ):
        """
        修改账户级别关键词推广状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26263

        :param status: on:开启,off:暂停
        """
        return self._top_request(
            "alibaba.scbp.account.status.update",
            {
                "status": status
            }
        )

    def alibaba_scbp_ad_keyword_batchdelete(
            self,
            keyword_id_list=''
    ):
        """
        外贸直通车批量删除关键词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30979

        :param keyword_id_list: 关键词Id列表
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.batchdelete",
            {
                "keyword_id_list": keyword_id_list
            }
        )

    def alibaba_scbp_ad_keyword_status_batchupdate(
            self,
            keyword_update_dto_list=None
    ):
        """
        批量启动暂停推广词状态
        批量启动暂停关键词推广状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30996

        :param keyword_update_dto_list: 系统自动生成
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.status.batchupdate",
            {
                "keyword_update_dto_list": keyword_update_dto_list
            },
            result_processor=lambda x: x["keyword_error_result_list"]
        )

    def alibaba_scbp_ad_keyword_price_batchupdate(
            self,
            keyword_update_dto_list=None
    ):
        """
        关键词批量改价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30997

        :param keyword_update_dto_list: 系统自动生成
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.price.batchupdate",
            {
                "keyword_update_dto_list": keyword_update_dto_list
            },
            result_processor=lambda x: x["keyword_error_result_list"]
        )

    def alibaba_scbp_ad_account_balance_get(
            self
    ):
        """
        查询账户余额
        查询推广账户余额
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31021

        """
        return self._top_request(
            "alibaba.scbp.ad.account.balance.get",
            result_processor=lambda x: x["balance"]
        )

    def alibaba_scbp_ad_account_level_get(
            self
    ):
        """
        查询推广账户等级
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31030

        """
        return self._top_request(
            "alibaba.scbp.ad.account.level.get",
            result_processor=lambda x: x["cust_level_dto"]
        )

    def alibaba_scbp_target_ad_plan_add(
            self,
            top_p4p_basic_quick_campaign=None
    ):
        """
        定向推广-新建计划
        定向推广-新建单条计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41280

        :param top_p4p_basic_quick_campaign: 定向推广基础信息
        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.add",
            {
                "top_p4p_basic_quick_campaign": top_p4p_basic_quick_campaign
            },
            result_processor=lambda x: x["campaign_id"]
        )

    def alibaba_scbp_target_ad_plan_operation(
            self,
            top_p4p_modify_quick_campaign_d_t_o
    ):
        """
        定向推广-计划开启/暂停/删除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41300

        :param top_p4p_modify_quick_campaign_d_t_o: TopP4pModifyQuickCampaignDTO
        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.operation",
            {
                "top_p4p_modify_quick_campaign_d_t_o": top_p4p_modify_quick_campaign_d_t_o
            }
        )

    def alibaba_scbp_target_ad_campaign_tag_effect(
            self,
            top_p4p_quick_effect_query=None
    ):
        """
        定向推广-获取推广计划定向效果数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41332

        :param top_p4p_quick_effect_query: 效果数据
        """
        return self._top_request(
            "alibaba.scbp.target.ad.campaign.tag.effect",
            {
                "top_p4p_quick_effect_query": top_p4p_quick_effect_query
            }
        )

    def alibaba_scbp_target_ad_campaign_product_effect(
            self,
            top_p4p_quick_effect_query
    ):
        """
        定向推广-获取计划中产品推广效果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41333

        :param top_p4p_quick_effect_query: TopP4pQuickEffectQuery
        """
        return self._top_request(
            "alibaba.scbp.target.ad.campaign.product.effect",
            {
                "top_p4p_quick_effect_query": top_p4p_quick_effect_query
            }
        )

    def alibaba_scbp_target_ad_campaign_effect(
            self,
            interval,
            end_date='',
            begin_date='',
            campaign_id=''
    ):
        """
        定向推广-获取计划维度推广效果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41334

        :param interval: 统计区间 只能为1 7 30
        :param end_date: 结束时间 当inteval=7或30的时候 不需要填写，当inteval=1时需要填写（开始结束时间区间不允许大于180天）
        :param begin_date: 开始时间 当inteval=7或30的时候 不需要填写，当inteval=1时需要填写（开始结束时间区间不允许大于180天）
        :param campaign_id: 当填写时，展示指定id的数据，不填写，则展示全部计划总数据
        """
        return self._top_request(
            "alibaba.scbp.target.ad.campaign.effect",
            {
                "interval": interval,
                "end_date": end_date,
                "begin_date": begin_date,
                "campaign_id": campaign_id
            },
            result_processor=lambda x: x["effect_list"]
        )

    def alibaba_scbp_target_ad_plan_tag_get(
            self,
            campaign_id
    ):
        """
        定向推广-获取计划的定向溢价数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41335

        :param campaign_id: 推广计划Id
        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.tag.get",
            {
                "campaign_id": campaign_id
            }
        )

    def alibaba_scbp_target_ad_plan_product_list_get(
            self,
            top_p4p_quick_product_query
    ):
        """
        定向推广-获取推广计划产品列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41336

        :param top_p4p_quick_product_query: TopP4pQuickProductQuery
        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.product.list.get",
            {
                "top_p4p_quick_product_query": top_p4p_quick_product_query
            }
        )

    def alibaba_scbp_target_ad_plan_crowd_id_get(
            self
    ):
        """
        定向推广-人群标签ID获取(店铺老客、优选人群)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41337

        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.crowd.id.get",
            result_processor=lambda x: x["result_list"]
        )

    def alibaba_scbp_target_ad_plan_country_id_get(
            self
    ):
        """
        定向推广-国家标签ID获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41338

        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.country.id.get",
            result_processor=lambda x: x["region_list"]
        )

    def alibaba_scbp_target_ad_plan_update(
            self,
            top_p4p_basic_quick_campaign
    ):
        """
        定向推广-更新推广计划的基础信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41339

        :param top_p4p_basic_quick_campaign: TopP4pBasicQuickCampaign
        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.update",
            {
                "top_p4p_basic_quick_campaign": top_p4p_basic_quick_campaign
            }
        )

    def alibaba_scbp_target_ad_plan_list(
            self,
            top_p4p_quick_campaign_query
    ):
        """
        定向推广-查询定向推广计划列表并返回计划基础信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41340

        :param top_p4p_quick_campaign_query: TopP4pQuickCampaignQuery
        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.list",
            {
                "top_p4p_quick_campaign_query": top_p4p_quick_campaign_query
            }
        )

    def alibaba_scbp_target_ad_plan_forbidden_word_modify(
            self,
            top_p4p_quick_forbidden_word
    ):
        """
        定向推广-新增或删除屏蔽词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41341

        :param top_p4p_quick_forbidden_word: TopP4pQuickForbiddenWord
        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.forbidden.word.modify",
            {
                "top_p4p_quick_forbidden_word": top_p4p_quick_forbidden_word
            }
        )

    def alibaba_scbp_target_ad_plan_update_products(
            self,
            param_top_p4p_modify_quick_campaign_product_d_t_o
    ):
        """
        定向推广 按照id操作推广计划的产品，包括新增，删除和更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41362

        :param param_top_p4p_modify_quick_campaign_product_d_t_o: 系统生成
        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.update.products",
            {
                "param_top_p4p_modify_quick_campaign_product_d_t_o": param_top_p4p_modify_quick_campaign_product_d_t_o
            },
            result_processor=lambda x: x["product_id_list"]
        )

    def alibaba_scbp_target_ad_plan_update_tags(
            self,
            param_top_p4p_modify_quick_campaign_tag_d_t_o=None
    ):
        """
        定向推广 按照id操作推广计划的定向溢价标签，包括新增，删除和更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41363

        :param param_top_p4p_modify_quick_campaign_tag_d_t_o: 系统生成
        """
        return self._top_request(
            "alibaba.scbp.target.ad.plan.update.tags",
            {
                "param_top_p4p_modify_quick_campaign_tag_d_t_o": param_top_p4p_modify_quick_campaign_tag_d_t_o
            }
        )

    def alibaba_scbp_ad_keyword_rank_price_batchget(
            self,
            keyword_request,
            context=None
    ):
        """
        外贸直通车关键词前五名批量排价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42298

        :param keyword_request: keyword_request
        :param context: 上下文
        """
        return self._top_request(
            "alibaba.scbp.ad.keyword.rank.price.batchget",
            {
                "keyword_request": keyword_request,
                "context": context
            },
            result_processor=lambda x: x["result_list"]
        )


class TbTianMaoFuWuShuJu(DingTalkBaseAPI):
    """
    天猫服务数据API
    """

    def tmall_servicecenter_anomalyrecourse_remark_update(
            self,
            id='',
            remark=''
    ):
        """
        天猫服务平台一键求助单服务商备注更新接口
        一键求助服务商可以回传备注
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27169

        :param id: 需要更新的一键求助单id
        :param remark: 需要更新的服务商备注
        """
        return self._top_request(
            "tmall.servicecenter.anomalyrecourse.remark.update",
            {
                "id": id,
                "remark": remark
            },
            result_processor=lambda x: x["is_success"]
        )

    def tmall_servicecenter_anomalyrecourse_search(
            self,
            start='',
            end=''
    ):
        """
        天猫服务平台服务商一键求助单查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27176

        :param start: 开始时间
        :param end: 结束时间
        """
        return self._top_request(
            "tmall.servicecenter.anomalyrecourse.search",
            {
                "start": start,
                "end": end
            }
        )

    def tmall_servicecenter_servicestore_createservicestorecoverservice(
            self,
            biz_type,
            category_ids_and_brand_ids,
            service_codes,
            service_store_code
    ):
        """
        新增网点覆盖的服务
        新增网点覆盖的服务，唯一性校验：服务商淘宝账号+网点编码+biz_type
        前提是网点要存在，
        如果需要新增的网点覆盖的服务已存在，会新增失败。
        网点覆盖的服务包含了业务类型(比如电器预约安装)、天猫服务的servicecode列表、授权的类目和品牌
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33686

        :param biz_type: 业务类型
        :param category_ids_and_brand_ids: json格式，在某个业务类型(biz_type)下类目和品牌的授权关系,比如空调授权了格力和美的，热水器授权了美的和林内，洗衣机和冰箱都授权了美的和松下
        :param service_codes: serviceCodes列表,|分隔
        :param service_store_code: 网点编码
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.createservicestorecoverservice",
            {
                "biz_type": biz_type,
                "category_ids_and_brand_ids": category_ids_and_brand_ids,
                "service_codes": service_codes,
                "service_store_code": service_store_code
            }
        )

    def tmall_servicecenter_servicestore_createservicestorecapacity(
            self,
            biz_type,
            category_ids_and_area_codes_and_capacity,
            service_codes,
            service_store_code
    ):
        """
        新增网点容量
        新增网点容量，唯一性校验：服务商淘宝账号+网点编码+biz_type
        前提是网点要存在，
        如果需要新增的网点容量已存在，会新增失败。
        网点容量包含了业务类型(比如电器预约安装)、天猫服务的servicecode列表、类目区域和容量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33687

        :param biz_type: 业务类型
        :param category_ids_and_area_codes_and_capacity: json格式，在某个业务类型(biz_type)下,类目所覆盖区域对应的容量。一个网点承接了空调和热水器的安装, 空调覆盖的区域是杭州市上城区和下城区，容量是10； 热水器覆盖的区域是杭州市下城区和江干区，容量是18；洗衣机和冰箱覆盖区域一样都是杭州市上城区和西湖区，合并计算容量30
        :param service_codes: serviceCodes列表,|分隔
        :param service_store_code: 网点编码
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.createservicestorecapacity",
            {
                "biz_type": biz_type,
                "category_ids_and_area_codes_and_capacity": category_ids_and_area_codes_and_capacity,
                "service_codes": service_codes,
                "service_store_code": service_store_code
            }
        )

    def tmall_workcard_identify(
            self,
            verify_request_d_t_o=None
    ):
        """
        工单核销
        工单核销，当工单完成以后，通过调用此接口核销
        可以按照多维度核销工单，
        电器预约安装按照工单维度核销，必选字段workcard_id,buyer_id,identify_code，可选字段attrs，通过扩展字段attrs回传机器码，格式{sn:'机器码'}
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33695

        :param verify_request_d_t_o: 核销dto
        """
        return self._top_request(
            "tmall.workcard.identify",
            {
                "verify_request_d_t_o": verify_request_d_t_o
            }
        )

    def tmall_servicecenter_servicestore_updateservicestorecoverservice(
            self,
            biz_type,
            category_ids_and_brand_ids,
            service_codes,
            service_store_code
    ):
        """
        更新网点覆盖的服务
        更新网点覆盖的服务，唯一性校验：服务商淘宝账号+网点编码+biz_type
        前提是网点要存在，
        如果需要新增的网点覆盖的服务不存在，会更新失败。
        网点覆盖的服务包含了业务类型(比如电器预约安装)、天猫服务的servicecode列表、授权的类目和品牌
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33697

        :param biz_type: 业务类型
        :param category_ids_and_brand_ids: json格式，在某个业务类型(biz_type)下类目和品牌的授权关系,比如空调授权了格力和美的，热水器授权了美的和林内，洗衣机和冰箱都授权了美的和松下
        :param service_codes: serviceCodes列表,|分隔
        :param service_store_code: 网点编码
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.updateservicestorecoverservice",
            {
                "biz_type": biz_type,
                "category_ids_and_brand_ids": category_ids_and_brand_ids,
                "service_codes": service_codes,
                "service_store_code": service_store_code
            }
        )

    def tmall_servicecenter_servicestore_updateservicestorecapacity(
            self,
            biz_type,
            category_ids_and_area_codes_and_capacity,
            service_codes,
            service_store_code
    ):
        """
        更新网点容量
        更新网点容量，唯一性校验：服务商淘宝账号+网点编码+biz_type
        前提是网点要存在，
        如果需要更新的网点容量不存在，会更新失败。
        网点容量包含了业务类型(比如电器预约安装)、天猫服务的servicecode列表、类目区域和容量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33698

        :param biz_type: 业务类型
        :param category_ids_and_area_codes_and_capacity: json格式，在某个业务类型(biz_type)下,类目所覆盖区域对应的容量。一个网点承接了空调和热水器的安装, 空调覆盖的区域是杭州市上城区和下城区，容量是10； 热水器覆盖的区域是杭州市下城区和江干区，容量是18；洗衣机和冰箱覆盖区域一样都是杭州市上城区和西湖区，合并计算容量30
        :param service_codes: serviceCodes列表,|分隔
        :param service_store_code: 网点编码
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.updateservicestorecapacity",
            {
                "biz_type": biz_type,
                "category_ids_and_area_codes_and_capacity": category_ids_and_area_codes_and_capacity,
                "service_codes": service_codes,
                "service_store_code": service_store_code
            }
        )

    def tmall_servicecenter_servicestore_deleteservicestorecapacity(
            self,
            service_store_code,
            biz_type
    ):
        """
        删除网点容量
        删除网点覆盖的服务，无法恢复，如果只是暂时屏蔽网点的某个能力，可以将此能力对应的网点容量的capacity字段更新为0
        必选字段：serviceStoreCode、bizType
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33700

        :param service_store_code: 网点编码
        :param biz_type: 业务类型
        """
        return self._top_request(
            "tmall.servicecenter.servicestore.deleteservicestorecapacity",
            {
                "service_store_code": service_store_code,
                "biz_type": biz_type
            }
        )

    def alibaba_service_billing_query(
            self,
            gmt_create_start='',
            gmt_create_end=''
    ):
        """
        服务平台结算出账信息
        服务平台结算单明细查询服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42709

        :param gmt_create_start: 账单查询开始时间。格式示例 2019-03-26 17:15:28
        :param gmt_create_end: 账单查询结束时间，时间区间限制未15分钟。 格式示例 2019-03-26 17:15:28
        """
        return self._top_request(
            "alibaba.service.billing.query",
            {
                "gmt_create_start": gmt_create_start,
                "gmt_create_end": gmt_create_end
            },
            result_processor=lambda x: x["settlement_detail_query_result"]
        )

    def alibaba_service_settlement_query(
            self,
            gmt_create_start='',
            gmt_create_end='',
            current_page='',
            page_size=''
    ):
        """
        服务平台结算单明细查询服务
        给服务商提供结算单明细查询功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43721

        :param gmt_create_start: 账单查询开始时间。格式示例 2019-03-26 17:15:28
        :param gmt_create_end: 账单查询结束时间，时间区间限制未15分钟。 格式示例 2019-03-26 17:15:28
        :param current_page: 当前页面，开始值为1
        :param page_size: 页面展示条数大小
        """
        return self._top_request(
            "alibaba.service.settlement.query",
            {
                "gmt_create_start": gmt_create_start,
                "gmt_create_end": gmt_create_end,
                "current_page": current_page,
                "page_size": page_size
            },
            result_processor=lambda x: x["settlement_detail_query_result"]
        )

    def tmall_servicecenter_reservecond_create(
            self,
            roc_list=None
    ):
        """
        创建主动预约开通条件
        1、设置主动预约开通条件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43949

        :param roc_list: 主动预约开通条件
        """
        return self._top_request(
            "tmall.servicecenter.reservecond.create",
            {
                "roc_list": roc_list
            }
        )

    def tmall_servicecenter_reservecond_delete(
            self,
            reserve_open_condition_del_dto=None
    ):
        """
        删除主动预约开通条件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44128

        :param reserve_open_condition_del_dto: 主动预约条件删除
        """
        return self._top_request(
            "tmall.servicecenter.reservecond.delete",
            {
                "reserve_open_condition_del_dto": reserve_open_condition_del_dto
            }
        )

    def tmall_servicecenter_reservecond_update(
            self,
            roc_list=None
    ):
        """
        主动预约条件更新
        1、设置主动预约开通条件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44177

        :param roc_list: 主动预约开通条件
        """
        return self._top_request(
            "tmall.servicecenter.reservecond.update",
            {
                "roc_list": roc_list
            }
        )


class TbZhiNengSheBei(DingTalkBaseAPI):
    """
    智能设备
    """

    def alibaba_retail_device_lock_open(
            self,
            session_key,
            hint_text
    ):
        """
        开锁状态上报
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31875

        :param session_key: 会话id
        :param hint_text: 锁状态
        """
        return self._top_request(
            "alibaba.retail.device.lock.open",
            {
                "session_key": session_key,
                "hint_text": hint_text
            }
        )

    def alibaba_retail_device_trade_settle(
            self,
            session_key,
            items,
            device_sn='',
            device_type=''
    ):
        """
        设备确认开始结算接口
        设备交易已经确认可以开始结算接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31876

        :param session_key: 会话id
        :param items: 系统自动生成
        :param device_sn: 设备sn
        :param device_type: 设备sn
        """
        return self._top_request(
            "alibaba.retail.device.trade.settle",
            {
                "session_key": session_key,
                "items": items,
                "device_sn": device_sn,
                "device_type": device_type
            }
        )

    def taobao_ailab_aicloud_top_device_authcode_get(
            self,
            schema,
            user_id,
            utd_id,
            ext
    ):
        """
        获取设备授权码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33059

        :param schema: 账户体系隔离，即硬件接入平台中取得的schema key。
        :param user_id: 用户ID，此处传入第三方账户体系的用户id，由开发者或厂商自行定义，每一schema key下唯一即可
        :param utd_id: (废弃) 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.authcode.get",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext
            }
        )

    def taobao_ailab_aicloud_top_device_authresult_get(
            self,
            schema,
            user_id,
            utd_id,
            ext,
            auth_codes
    ):
        """
        获取设备授权码验证结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33060

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        :param auth_codes: authCodes信息
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.authresult.get",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext,
                "auth_codes": auth_codes
            }
        )

    def taobao_ailab_aicloud_top_auth_get(
            self,
            user_id,
            utd_id,
            schema,
            app_type
    ):
        """
        登陆
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33061

        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param schema: 账户体系隔离
        :param app_type: app类型
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.auth.get",
            {
                "user_id": user_id,
                "utd_id": utd_id,
                "schema": schema,
                "app_type": app_type
            }
        )

    def taobao_ailab_aicloud_top_device_unbind(
            self,
            schema,
            user_id,
            utd_id,
            ext
    ):
        """
        解绑设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33062

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.unbind",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext
            }
        )

    def taobao_ailab_aicloud_top_auth_logout(
            self,
            user_id,
            utd_id,
            schema
    ):
        """
        登出
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33123

        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param schema: 账户体系隔离，建议传入设备uuid
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.auth.logout",
            {
                "user_id": user_id,
                "utd_id": utd_id,
                "schema": schema
            }
        )

    def taobao_ailab_aicloud_top_message_send(
            self,
            ext='',
            utd_id='',
            user_id='',
            schema='',
            audio_path=''
    ):
        """
        发送留言
        供准入的外部用户实现发送留言功能，APP端发送，设备端读取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33436

        :param ext: 扩展信息，用于存放APP类型等
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param schema: 账户体系隔离
        :param audio_path: 用户上传到OSS上的文件路径，不包含域名
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.message.send",
            {
                "ext": ext,
                "utd_id": utd_id,
                "user_id": user_id,
                "schema": schema,
                "audio_path": audio_path
            }
        )

    def taobao_ailab_aicloud_top_message_list(
            self,
            schema='',
            user_id='',
            utd_id='',
            ext='',
            before_time='',
            limit=''
    ):
        """
        获取留言列表
        根据指定参数获取留言列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33442

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        :param before_time: 截止时间，yyyy-MM-dd HH:mm:ss.SSS
        :param limit: 一次性展示多少条信息
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.message.list",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext,
                "before_time": before_time,
                "limit": limit
            }
        )

    def taobao_ailab_aicloud_top_message_get_unread_count(
            self,
            schema,
            user_id,
            utd_id,
            ext=''
    ):
        """
        获取未读的消息数量
        开放获取未读留言数量的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33443

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.message.get.unread.count",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext
            }
        )

    def taobao_ailab_aicloud_top_device_control_custom(
            self,
            param0,
            param1,
            param2
    ):
        """
        设备控制自定义扩展接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33644

        :param param0: 用户信息
        :param param1: 设备id
        :param param2: 参数key-value列表
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.control.custom",
            {
                "param0": param0,
                "param1": param1,
                "param2": param2
            }
        )

    def taobao_ailab_aicloud_top_device_control_lamp(
            self,
            param0,
            param1,
            param2,
            param3
    ):
        """
        台灯控制
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33650

        :param param0: 用户信息
        :param param1: 设备id
        :param param2: 是否打开
        :param param3: 目标名称
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.control.lamp",
            {
                "param0": param0,
                "param1": param1,
                "param2": param2,
                "param3": param3
            }
        )

    def taobao_ailab_aicloud_top_device_settings_reset(
            self,
            schema='',
            user_id='',
            utd_id='',
            ext='',
            param1=''
    ):
        """
        重置设备个性化设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33651

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        :param param1: 设备id
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.settings.reset",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext,
                "param1": param1
            }
        )

    def taobao_ailab_aicloud_top_device_control_pauseandresume(
            self,
            param0,
            param1='',
            param2=''
    ):
        """
        设备播放暂停
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33652

        :param param0: 用户信息
        :param param1: 设备id
        :param param2: 是暂停还是继续
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.control.pauseandresume",
            {
                "param0": param0,
                "param1": param1,
                "param2": param2
            }
        )

    def taobao_ailab_aicloud_top_device_control_volume(
            self,
            param0=None,
            param1='',
            param2=''
    ):
        """
        设备音量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33653

        :param param0: 用户信息
        :param param1: 设备id
        :param param2: 音量0-100
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.control.volume",
            {
                "param0": param0,
                "param1": param1,
                "param2": param2
            }
        )

    def taobao_ailab_aicloud_top_device_control_playurl(
            self,
            param0,
            param1,
            param2
    ):
        """
        点播url
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33654

        :param param0: 用户信息
        :param param1: 设备id
        :param param2: url
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.control.playurl",
            {
                "param0": param0,
                "param1": param1,
                "param2": param2
            }
        )

    def taobao_ailab_aicloud_top_device_control_childlock(
            self,
            param0,
            param1,
            param2
    ):
        """
        设备儿童锁
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33655

        :param param0: 用户信息
        :param param1: 设备id
        :param param2: 是否打开
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.control.childlock",
            {
                "param0": param0,
                "param1": param1,
                "param2": param2
            }
        )

    def taobao_ailab_aicloud_top_device_control_hibernation(
            self,
            param0=None,
            param1='',
            param2=''
    ):
        """
        定时休眠
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33656

        :param param0: 用户信息
        :param param1: 设备id
        :param param2: N秒后休眠
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.control.hibernation",
            {
                "param0": param0,
                "param1": param1,
                "param2": param2
            }
        )

    def taobao_ailab_aicloud_top_like_list(
            self,
            user_id,
            schema,
            ext='',
            utd_id='',
            param1='',
            param2='',
            param3=''
    ):
        """
        列出收藏列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33766

        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param schema: 账户体系隔离
        :param ext: 扩展信息，用于存放APP类型等
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param param1: 收藏类型，目前支持四种：story,children_song,music,program，分别表示故事、儿童、音乐和节目
        :param param2: 页码 从0起
        :param param3: 每页条目个数
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.like.list",
            {
                "user_id": user_id,
                "schema": schema,
                "ext": ext,
                "utd_id": utd_id,
                "param1": param1,
                "param2": param2,
                "param3": param3
            }
        )

    def taobao_ailab_aicloud_top_like_add(
            self,
            user_id,
            schema,
            type,
            source,
            item_id,
            content,
            ext='',
            utd_id=''
    ):
        """
        增加收藏
        将制定内容加入收藏
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33767

        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param schema: 账户体系隔离
        :param type: 收藏类型，目前支持四种：story,children_song,music,program，分别表示故事、儿童、音乐和节目
        :param source: 来源
        :param item_id: 收藏的资源的ID
        :param content: 内容，必须要是一个json格式：{'song':'走过1999','singer':'张学友','album':'走过1999'}
        :param ext: 扩展信息，用于存放APP类型等
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.like.add",
            {
                "user_id": user_id,
                "schema": schema,
                "type": type,
                "source": source,
                "item_id": item_id,
                "content": content,
                "ext": ext,
                "utd_id": utd_id
            }
        )

    def taobao_ailab_aicloud_top_feedlist_get(
            self,
            param0=None,
            param1='',
            param2='',
            param3=''
    ):
        """
        获取对话流列表
        获取指定应用的对话流信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33768

        :param param0: 用户信息
        :param param1: 设备id
        :param param2: 最后一条对话的key
        :param param3: 单页的条目数，注意，是String类型！
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.feedlist.get",
            {
                "param0": param0,
                "param1": param1,
                "param2": param2,
                "param3": param3
            }
        )

    def taobao_ailab_aicloud_top_like_delete(
            self,
            user_id,
            schema,
            type,
            source,
            item_id,
            ext='',
            utd_id=''
    ):
        """
        取消收藏
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33769

        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param schema: 账户体系隔离
        :param type: 收藏类型，目前支持四种：story,children_song,music,program，分别表示故事、儿童、音乐和节目
        :param source: 来源
        :param item_id: 资源的记录ID
        :param ext: 扩展信息，用于存放APP类型等
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.like.delete",
            {
                "user_id": user_id,
                "schema": schema,
                "type": type,
                "source": source,
                "item_id": item_id,
                "ext": ext,
                "utd_id": utd_id
            }
        )

    def taobao_ailab_aicloud_top_device_getstatus(
            self,
            param0=None,
            param1=''
    ):
        """
        获取设备状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33876

        :param param0: 用户信息
        :param param1: 设备id
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.getstatus",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def taobao_ailab_aicloud_top_feedlist_delete(
            self,
            schema,
            user_id,
            sentence_id,
            ext='',
            utd_id=''
    ):
        """
        删除单条对话流信息
        删除指定的某一条对话流信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33877

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param sentence_id: 消息的唯一标识
        :param ext: 扩展信息，用于存放APP类型等
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.feedlist.delete",
            {
                "schema": schema,
                "user_id": user_id,
                "sentence_id": sentence_id,
                "ext": ext,
                "utd_id": utd_id
            }
        )

    def taobao_ailab_aicloud_top_freelisten_childrenalbum(
            self,
            schema='',
            user_id='',
            utd_id='',
            ext='',
            param1='',
            param2='',
            param3=''
    ):
        """
        儿童音频列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34182

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        :param param1: 音频类型，目前只支持以下几种类型：英语儿歌 英语故事 双语故事 国学启蒙 古典名著 成语故事 寓言故事 神话故事 诗词朗读 诗词婉唱 谚语故事 胎教音乐 经典儿歌 摇篮曲 睡前故事 绘本故事 儿童故事 儿童百科 经典故事 公主故事 名人故事 胎教故事
        :param param2: 页数
        :param param3: 每页条目数
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.freelisten.childrenalbum",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext,
                "param1": param1,
                "param2": param2,
                "param3": param3
            }
        )

    def taobao_ailab_aicloud_top_message_addtext(
            self,
            param0=None,
            param1='',
            param2='',
            param3=''
    ):
        """
        精灵代说
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34208

        :param param0: 用户信息
        :param param1: 设备id
        :param param2: 代说文本
        :param param3: 扩展信息，可以为空
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.message.addtext",
            {
                "param0": param0,
                "param1": param1,
                "param2": param2,
                "param3": param3
            }
        )

    def taobao_ailab_aicloud_top_device_control_playbyid(
            self,
            param1,
            param2,
            param3,
            param4,
            param0=None
    ):
        """
        通过id播放歌曲
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34710

        :param param1: 设备id
        :param param2: 音频id
        :param param3: 音频来源
        :param param4: 音频类型，如果没有音频类型默认填children_song
        :param param0: 用户信息
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.control.playbyid",
            {
                "param1": param1,
                "param2": param2,
                "param3": param3,
                "param4": param4,
                "param0": param0
            }
        )

    def alibaba_retail_device_trade_close(
            self,
            device_type,
            device_id,
            isv_order_no,
            item_list,
            order_update_option=None
    ):
        """
        设备交易关闭
        智能设备，支付超时主动关闭接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36058

        :param device_type: 设备类型
        :param device_id: 设备ID
        :param isv_order_no: 外部订单号
        :param item_list: 订单商品列表
        :param order_update_option: 选项
        """
        return self._top_request(
            "alibaba.retail.device.trade.close",
            {
                "device_type": device_type,
                "device_id": device_id,
                "isv_order_no": isv_order_no,
                "item_list": item_list,
                "order_update_option": order_update_option
            }
        )

    def taobao_ailab_aicloud_smarthome_top_genielink_reportdevice(
            self,
            vendor_id='',
            device_id='',
            status='',
            extensions=''
    ):
        """
        零配方案上报设备
        零配方案中设备联网成功之后上报设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37280

        :param vendor_id: 供应商id
        :param device_id: 设备id
        :param status: 设备状态，online上线，offline下线
        :param extensions: 保留字段json字符串
        """
        return self._top_request(
            "taobao.ailab.aicloud.smarthome.top.genielink.reportdevice",
            {
                "vendor_id": vendor_id,
                "device_id": device_id,
                "status": status,
                "extensions": extensions
            }
        )

    def alibaba_retail_device_payUrl_get(
            self,
            device_id,
            item_id,
            biz_name,
            isv_order_id
    ):
        """
        贩卖机支付二维链接获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37888

        :param device_id: 设备
        :param item_id: 商品ID
        :param biz_name: 业务BizName
        :param isv_order_id: 外币订单ID
        """
        return self._top_request(
            "alibaba.retail.device.payUrl.get",
            {
                "device_id": device_id,
                "item_id": item_id,
                "biz_name": biz_name,
                "isv_order_id": isv_order_id
            }
        )

    def tmall_device_content_save(
            self,
            device_code,
            report_url,
            report_card_img
    ):
        """
        智能硬件内容收藏
        保存品牌的智能硬件采集的数据报告
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39397

        :param device_code: 设备DeviceCode
        :param report_url: 报表的URL地址
        :param report_card_img: 报表的卡片图片URL，图片尺寸 350 * 150
        """
        return self._top_request(
            "tmall.device.content.save",
            {
                "device_code": device_code,
                "report_url": report_url,
                "report_card_img": report_card_img
            },
            result_processor=lambda x: x["report_id"]
        )

    def tmall_device_brand_memberurl_get(
            self,
            device_code,
            callback_url='',
            longterm='',
            banner_img='',
            follow_retail_account='false'
    ):
        """
        获取智能硬件旗舰店入会码
        获取旗舰店在智能硬件上的入会码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39398

        :param device_code: 设备DeviceCode
        :param callback_url: 入会后的回调地址
        :param longterm: 是否使用长期链接
        :param banner_img: 页面banner的图片，如果没有传入，会使用系统默认图
        :param follow_retail_account: 是否同时关注天猫理想站
        """
        return self._top_request(
            "tmall.device.brand.memberurl.get",
            {
                "device_code": device_code,
                "callback_url": callback_url,
                "longterm": longterm,
                "banner_img": banner_img,
                "follow_retail_account": follow_retail_account
            }
        )

    def tmall_device_store_memberurl_get(
            self,
            device_code,
            store_id,
            report_id='',
            longterm=''
    ):
        """
        获取智能硬件门店入会码
        获取智能硬件上的门店入会码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39401

        :param device_code: 设备DeviceCode
        :param store_id: 商户中心门店ID
        :param report_id: 收藏的报告的ID，如果填写这个字段，入会成功后会跳转到这个报告地址。报告由tmall.device.content.save先回传系统
        :param longterm: 是否使用长期链接
        """
        return self._top_request(
            "tmall.device.store.memberurl.get",
            {
                "device_code": device_code,
                "store_id": store_id,
                "report_id": report_id,
                "longterm": longterm
            }
        )

    def tmall_device_guide_memberurl_get(
            self,
            device_code,
            store_id,
            ba_iphone_num,
            longterm=''
    ):
        """
        获取智能硬件导购入会码
        获在智能硬件上的导购入会码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39402

        :param device_code: 设备DeviceCode
        :param store_id: 商户中心门店ID
        :param ba_iphone_num: 导购手机号码
        :param longterm: 是否使用长期链接
        """
        return self._top_request(
            "tmall.device.guide.memberurl.get",
            {
                "device_code": device_code,
                "store_id": store_id,
                "ba_iphone_num": ba_iphone_num,
                "longterm": longterm
            }
        )

    def tmall_device_member_identity_get(
            self,
            extra_info='',
            mix_nick='',
            nick=''
    ):
        """
        智能硬件会员判断
        用来识别该用户是否是商家会员·
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39496

        :param extra_info: 扩展参数为JSON字符串，用于埋点统计，source为来源字段固定值 paiyangji代表来源派样机类型设备，deviceId 为设备id，itemId 相关商品id
        :param mix_nick: 混淆昵称，
        :param nick: 明文nick，可不填，直接填混淆昵称
        """
        return self._top_request(
            "tmall.device.member.identity.get",
            {
                "extra_info": extra_info,
                "mix_nick": mix_nick,
                "nick": nick
            }
        )

    def tmall_device_trade_precreate(
            self,
            item_list,
            device_code,
            out_trade_id,
            type='1',
            callback_url='',
            ba_phone='',
            ba_store_id=''
    ):
        """
        智能硬件上预创建天猫订单
        智能硬件上预创建天猫订单。
        1，use_open_price不再需要传入，使用unit_price传入单价。
        2，订单默认5分钟自动关闭，没有付款的订单在手机淘宝不可见。
        3，同一个码只运行一个用户扫码，多个用户扫一个码会报错 订单不存在。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39503

        :param item_list: 商品列表
        :param device_code: 设备业务编码
        :param out_trade_id: 外部订单ID，用户下保证唯一。最大长度22
        :param type: 交易类型。1，售卖。2，派样
        :param callback_url: 回调地址，当订单创建，付款成功后，会收到回调。必须是https地址，HTTP响应必须包含success，否则系统会重发
        :param ba_phone: 导购员手机号码
        :param ba_store_id: 导购员所属门店
        """
        return self._top_request(
            "tmall.device.trade.precreate",
            {
                "item_list": item_list,
                "device_code": device_code,
                "out_trade_id": out_trade_id,
                "type": type,
                "callback_url": callback_url,
                "ba_phone": ba_phone,
                "ba_store_id": ba_store_id
            }
        )

    def tmall_device_carturl_get(
            self,
            item_ids,
            device_code,
            longterm=''
    ):
        """
        添加商品到购物车
        获取二维码，支持添加商品到购物车
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39744

        :param item_ids: 商品信息，格式为 商品ID_SKU ID_数量，多条记录以逗号(,)分割
        :param device_code: 设备业务编码
        :param longterm: 是否申请长期链接
        """
        return self._top_request(
            "tmall.device.carturl.get",
            {
                "item_ids": item_ids,
                "device_code": device_code,
                "longterm": longterm
            }
        )

    def tmall_device_item_openprice_update(
            self,
            item_id,
            price
    ):
        """
        设置商品的自定义价格
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        设置商品的自定义价格，仅智能硬件可用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39950

        :param item_id: 商品ID
        :param price: 商品价格，单位分
        """
        return self._top_request(
            "tmall.device.item.openprice.update",
            {
                "item_id": item_id,
                "price": price
            }
        )

    def alibaba_ailabs_aligenie_iot_device_control_result(
            self,
            request_token,
            device_id,
            type='',
            control='',
            ack_code=''
    ):
        """
        设备控制结果
        智能IOT解决外部厂商在云云模式在用户通过天猫精灵下发设备指令过程中，厂商指令完成，回调结果通知
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40261

        :param request_token: 请求token
        :param device_id: 设备ID
        :param type: 操作类型 1：控制操作 0:查询
        :param control: 控制成功
        :param ack_code: 厂商执行返回ackCode
        """
        return self._top_request(
            "alibaba.ailabs.aligenie.iot.device.control.result",
            {
                "request_token": request_token,
                "device_id": device_id,
                "type": type,
                "control": control,
                "ack_code": ack_code
            }
        )

    def tmall_device_item_promotion_get(
            self,
            item_id
    ):
        """
        智能硬件上商品优惠获取
        商品优惠详情查询，可查询商品设置的详细优惠。包括限时折扣，满就送等官方优惠以及第三方优惠。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40278

        :param item_id: 商品id
        """
        return self._top_request(
            "tmall.device.item.promotion.get",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["promotions"]
        )

    def tmall_device_shortchainurl_get(
            self,
            url,
            device_code,
            store_id,
            action,
            longterm=''
    ):
        """
        获取二维码短链接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40497

        :param url: 需要生成短链接的url
        :param device_code: 设备DeviceCode
        :param store_id: 商户中心门店ID
        :param action: 动作类型，支持自定义
        :param longterm: 是否需要长期二维码，默认否
        """
        return self._top_request(
            "tmall.device.shortchainurl.get",
            {
                "url": url,
                "device_code": device_code,
                "store_id": store_id,
                "action": action,
                "longterm": longterm
            }
        )

    def tmall_device_store_followurl_get(
            self,
            device_code,
            callback_url='',
            follow_retail_account='false',
            longterm='',
            banner_img=''
    ):
        """
        获取店铺关注链接
        获取智能硬件上的关注店铺的URL
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40562

        :param device_code: 设备DeviceCode
        :param callback_url: 关注完成后的回调地址,需要是EWS地址
        :param follow_retail_account: 是否同时关注天猫理想站
        :param longterm: 是否使用长期链接
        :param banner_img: 页面banner的图片，如果没有传入，会使用系统默认图
        """
        return self._top_request(
            "tmall.device.store.followurl.get",
            {
                "device_code": device_code,
                "callback_url": callback_url,
                "follow_retail_account": follow_retail_account,
                "longterm": longterm,
                "banner_img": banner_img
            }
        )

    def taobao_ailab_aicloud_top_like_filter(
            self,
            schema,
            user_id,
            type,
            utd_id='',
            ext='',
            media_items=None
    ):
        """
        过滤列表歌曲存在于收藏列表的
        过滤出传入列表歌曲存在于收藏列表的
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40658

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param type: 音频收藏类型, 四种类型：music,children_song,program,story
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        :param media_items: 传入的歌曲列表
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.like.filter",
            {
                "schema": schema,
                "user_id": user_id,
                "type": type,
                "utd_id": utd_id,
                "ext": ext,
                "media_items": media_items
            }
        )

    def alibaba_ailabs_aligenie_albums_search(
            self,
            param4,
            param5,
            schema='',
            user_id='',
            utd_id='',
            ext='',
            param1='',
            param2='',
            param3=''
    ):
        """
        查询专辑
        搜索类目下的专辑信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40664

        :param param4: 当前页（从1开始, 目前由于底层引擎限制，实际最多能查5000个，超过5000返回为空，请确保页码*分页大小不超过5000）
        :param param5: 每页数量（不超过50）
        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        :param param1: 一级类目，如：儿童、新闻、商业财经有声书等
        :param param2: 二级类目，如儿童下有：儿歌、童谣、国学等
        :param param3: 搜索的单个专辑名称
        """
        return self._top_request(
            "alibaba.ailabs.aligenie.albums.search",
            {
                "param4": param4,
                "param5": param5,
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext,
                "param1": param1,
                "param2": param2,
                "param3": param3
            }
        )

    def alibaba_ailabs_aligenie_tracks_search(
            self,
            param4,
            param5,
            schema='',
            user_id='',
            utd_id='',
            ext='',
            param1='',
            param2='',
            param3=''
    ):
        """
        查询音频
        搜索类目下的音频信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40673

        :param param4: 当前页（从1开始, 目前由于底层引擎限制，实际最多能查5000个，超过5000返回为空，请确保页码*分页大小不超过5000）
        :param param5: 每页数量（不超过50）
        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        :param param1: 一级类目，如：儿童、新闻、商业财经有声书等
        :param param2: 二级类目，如儿童下有：儿歌、童谣、国学等
        :param param3: 搜索的单个音频名称
        """
        return self._top_request(
            "alibaba.ailabs.aligenie.tracks.search",
            {
                "param4": param4,
                "param5": param5,
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext,
                "param1": param1,
                "param2": param2,
                "param3": param3
            }
        )

    def alibaba_ailabs_aligenie_albums_get(
            self,
            param1,
            param2,
            param3,
            schema='',
            user_id='',
            utd_id='',
            ext=''
    ):
        """
        专辑详情
        给予厂商查询专辑下的音频详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40674

        :param param1: 专辑 id
        :param param2: 当前页（从1开始, 目前由于底层引擎限制，实际最多能查5000个，超过5000返回为空，请确保页码*分页大小不超过5000）
        :param param3: 每页数量（不超过50）
        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        """
        return self._top_request(
            "alibaba.ailabs.aligenie.albums.get",
            {
                "param1": param1,
                "param2": param2,
                "param3": param3,
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext
            }
        )

    def taobao_ailab_aicloud_top_device_openid_authresult_get(
            self,
            open_id,
            schema,
            auth_codes,
            utd_id='',
            user_id='',
            ext=''
    ):
        """
        获取openId设备授权码验证结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41249

        :param open_id: 淘宝openid
        :param schema: 账户体系隔离
        :param auth_codes: authcode list
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param ext: 扩展信息，用于存放APP类型等
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.openid.authresult.get",
            {
                "open_id": open_id,
                "schema": schema,
                "auth_codes": auth_codes,
                "utd_id": utd_id,
                "user_id": user_id,
                "ext": ext
            }
        )

    def taobao_ailab_aicloud_top_device_openid_authcode_get(
            self,
            open_id,
            schema,
            utd_id='',
            ext=''
    ):
        """
        获取openid设备通用授权码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41250

        :param open_id: 淘宝openid
        :param schema: 账户体系隔离，即硬件接入平台中取得的schema key。
        :param utd_id: (废弃) 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.openid.authcode.get",
            {
                "open_id": open_id,
                "schema": schema,
                "utd_id": utd_id,
                "ext": ext
            }
        )

    def taobao_ailab_aicloud_top_device_openid_unbind(
            self,
            open_id='',
            uuid='',
            schema='',
            user_id='',
            ext='',
            utd_id=''
    ):
        """
        openTaoBaoId解绑设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41319

        :param open_id: 淘宝openId
        :param uuid: 设备uuid
        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param ext: 扩展信息，用于存放APP类型等
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.openid.unbind",
            {
                "open_id": open_id,
                "uuid": uuid,
                "schema": schema,
                "user_id": user_id,
                "ext": ext,
                "utd_id": utd_id
            }
        )

    def taobao_ailab_aicloud_top_device_deviceid_convert(
            self,
            device_open_id,
            skill_id
    ):
        """
        开放设备id转换内部设备id
        将开放设备id转换为内部设备id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42979

        :param device_open_id: 设备openId
        :param skill_id: 技能id
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.deviceid.convert",
            {
                "device_open_id": device_open_id,
                "skill_id": skill_id
            }
        )

    def taobao_ailab_aicloud_top_device_extinfo_get(
            self,
            origin_user_id,
            schema_key,
            user_type,
            device_id
    ):
        """
        获取设备扩展信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42980

        :param origin_user_id: 三方id、淘宝openId
        :param schema_key: 账号秘钥
        :param user_type: 类型：openTaoBao, extUser
        :param device_id: 设备id
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.extinfo.get",
            {
                "origin_user_id": origin_user_id,
                "schema_key": schema_key,
                "user_type": user_type,
                "device_id": device_id
            }
        )

    def taobao_ailab_aicloud_top_device_statusinfo_get(
            self,
            origin_user_id='',
            schema_key='',
            user_type='',
            device_id=''
    ):
        """
        获取设备状态信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43671

        :param origin_user_id: 三方用户id或淘宝openId
        :param schema_key: 账号秘钥
        :param user_type: 三方传extUser，淘宝传openTaoBaoUser
        :param device_id: 设备id
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.statusinfo.get",
            {
                "origin_user_id": origin_user_id,
                "schema_key": schema_key,
                "user_type": user_type,
                "device_id": device_id
            }
        )

    def taobao_ailab_aicloud_top_device_detailinfo_get(
            self,
            origin_user_id='',
            schema_key='',
            user_type='',
            device_id=''
    ):
        """
        获取设备详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43724

        :param origin_user_id: 三方用户id或淘宝openId
        :param schema_key: 账号秘钥
        :param user_type: 三方传extUser，淘宝传openTaoBaoUser
        :param device_id: 设备id
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.device.detailinfo.get",
            {
                "origin_user_id": origin_user_id,
                "schema_key": schema_key,
                "user_type": user_type,
                "device_id": device_id
            }
        )


class TbBaiChuan(DingTalkBaseAPI):
    """
    百川
    """

    def taobao_baichuan_openaccount_loginbytoken(
            self,
            name=''
    ):
        """
        百川TOKEN 登录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25123

        :param name: name
        """
        return self._top_request(
            "taobao.baichuan.openaccount.loginbytoken",
            {
                "name": name
            },
            result_processor=lambda x: x["name"]
        )

    def taobao_baichuan_openaccount_login(
            self,
            name=''
    ):
        """
        百川用户名密码登录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25124

        :param name: name
        """
        return self._top_request(
            "taobao.baichuan.openaccount.login",
            {
                "name": name
            },
            result_processor=lambda x: x["name"]
        )

    def taobao_baichuan_openaccount_resetcode_check(
            self,
            name=''
    ):
        """
        百川验证找回密码验证码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25126

        :param name: name
        """
        return self._top_request(
            "taobao.baichuan.openaccount.resetcode.check",
            {
                "name": name
            },
            result_processor=lambda x: x["name"]
        )

    def taobao_baichuan_openaccount_logindoublecheck(
            self,
            name=''
    ):
        """
        百川登录二次验证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25127

        :param name: name
        """
        return self._top_request(
            "taobao.baichuan.openaccount.logindoublecheck",
            {
                "name": name
            },
            result_processor=lambda x: x["name"]
        )

    def taobao_baichuan_openaccount_newlogindoublecheck(
            self,
            name=''
    ):
        """
        百川新登录二次验证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25128

        :param name: name
        """
        return self._top_request(
            "taobao.baichuan.openaccount.newlogindoublecheck",
            {
                "name": name
            },
            result_processor=lambda x: x["name"]
        )

    def taobao_baichuan_openaccount_register(
            self,
            name=''
    ):
        """
        百川账号注册
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25129

        :param name: name
        """
        return self._top_request(
            "taobao.baichuan.openaccount.register",
            {
                "name": name
            },
            result_processor=lambda x: x["name"]
        )

    def taobao_baichuan_openaccount_registercode_send(
            self,
            name=''
    ):
        """
        百川发送注册验证码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25130

        :param name: name
        """
        return self._top_request(
            "taobao.baichuan.openaccount.registercode.send",
            {
                "name": name
            },
            result_processor=lambda x: x["name"]
        )

    def taobao_baichuan_openaccount_registercode_check(
            self,
            name=''
    ):
        """
        百川检查注册验证码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25131

        :param name: name
        """
        return self._top_request(
            "taobao.baichuan.openaccount.registercode.check",
            {
                "name": name
            },
            result_processor=lambda x: x["name"]
        )

    def taobao_baichuan_openaccount_resetcode_send(
            self,
            name=''
    ):
        """
        百川发送找回密码验证码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25132

        :param name: name
        """
        return self._top_request(
            "taobao.baichuan.openaccount.resetcode.send",
            {
                "name": name
            },
            result_processor=lambda x: x["name"]
        )

    def taobao_baichuan_openaccount_password_reset(
            self,
            name=''
    ):
        """
        百川找回密码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25133

        :param name: name
        """
        return self._top_request(
            "taobao.baichuan.openaccount.password.reset",
            {
                "name": name
            },
            result_processor=lambda x: x["name"]
        )

    def alibaba_baichuan_appcontent_upload(
            self,
            params='',
            appid='',
            bizid='',
            operate=''
    ):
        """
        百川业务内容数据上传
        输入内容是外部公司的业务数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26655

        :param params: 入参
        :param appid: app标识
        :param bizid: 业务场景标识
        :param operate: 具体操作
        """
        return self._top_request(
            "alibaba.baichuan.appcontent.upload",
            {
                "params": params,
                "appid": appid,
                "bizid": bizid,
                "operate": operate
            }
        )

    def alibaba_baichuan_appevent_batchupload(
            self,
            appid='',
            bizid='',
            params=None
    ):
        """
        批量行为数据采集
        提供给外部app进行用户行为信息的采集
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26656

        :param appid: app标识
        :param bizid: 场景标识
        :param params: 具体实例集合
        """
        return self._top_request(
            "alibaba.baichuan.appevent.batchupload",
            {
                "appid": appid,
                "bizid": bizid,
                "params": params
            }
        )

    def alibaba_baichuan_appevent_upload(
            self,
            appid,
            bizid,
            params
    ):
        """
        用户行为信息采集
        提供给外部调用方上传用户行为信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26657

        :param appid: 标识app
        :param bizid: 标识场景
        :param params: 标识具体行为
        """
        return self._top_request(
            "alibaba.baichuan.appevent.upload",
            {
                "appid": appid,
                "bizid": bizid,
                "params": params
            }
        )

    def alibaba_baichuan_app_recommend(
            self,
            appid,
            bizid,
            params
    ):
        """
        百川推荐输出接口
        提供给外部公司的推荐输出接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26658

        :param appid: app标识
        :param bizid: 场景标识
        :param params: 业务参数
        """
        return self._top_request(
            "alibaba.baichuan.app.recommend",
            {
                "appid": appid,
                "bizid": bizid,
                "params": params
            }
        )

    def taobao_baichuan_item_subscribe_relation_query(
            self,
            item_id
    ):
        """
        查询单个订阅关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26970

        :param item_id: 商品Id
        """
        return self._top_request(
            "taobao.baichuan.item.subscribe.relation.query",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_baichuan_item_unsubscribe(
            self,
            item_id
    ):
        """
        单个删除订阅关系
        删除单个商品订阅关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26971

        :param item_id: 商品id
        """
        return self._top_request(
            "taobao.baichuan.item.unsubscribe",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_baichuan_item_subscribe_relations_query(
            self,
            condition=None
    ):
        """
        按条件查询订阅关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26972

        :param condition: 查询条件
        """
        return self._top_request(
            "taobao.baichuan.item.subscribe.relations.query",
            {
                "condition": condition
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_baichuan_items_subscribe(
            self,
            item_ids
    ):
        """
        百川批量商品订阅
        百川批量添加订阅的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26974

        :param item_ids: 订阅的商品id列表
        """
        return self._top_request(
            "taobao.baichuan.items.subscribe",
            {
                "item_ids": item_ids
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_baichuan_item_subscribe(
            self,
            item_id
    ):
        """
        单个商品订阅
        百川单个商品订阅
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26975

        :param item_id: 商品id
        """
        return self._top_request(
            "taobao.baichuan.item.subscribe",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_baichuan_items_unsubscribe(
            self,
            item_ids
    ):
        """
        批量删除商品订阅
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26976

        :param item_ids: 删除的商品id
        """
        return self._top_request(
            "taobao.baichuan.items.unsubscribe",
            {
                "item_ids": item_ids
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_baichuan_items_unsubscribe_by_condition(
            self,
            condition=None
    ):
        """
        根据条件删除订阅关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26977

        :param condition: 删除条件
        """
        return self._top_request(
            "taobao.baichuan.items.unsubscribe.by.condition",
            {
                "condition": condition
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_baichuan_item_subscribe_daily_left_query(
            self
    ):
        """
        查询当天可添加的余量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26978

        """
        return self._top_request(
            "taobao.baichuan.item.subscribe.daily.left.query",
            result_processor=lambda x: x["result_list"]
        )

    def alibaba_baichuan_ctg_content_get(
            self,
            delivery_id='',
            page_size='0',
            current_page='0',
            res_id='',
            date=''
    ):
        """
        百川内容平台内容获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27956

        :param delivery_id: 投放位置
        :param page_size: 分页大小
        :param current_page: 当前页
        :param res_id: 资源位
        :param date: 日期
        """
        return self._top_request(
            "alibaba.baichuan.ctg.content.get",
            {
                "delivery_id": delivery_id,
                "page_size": page_size,
                "current_page": current_page,
                "res_id": res_id,
                "date": date
            }
        )

    def alibaba_baichuan_ctg_video_upload(
            self,
            app,
            type,
            tb_uid,
            video_id,
            owner_name='',
            publish_time='',
            upload_time='',
            video_title='',
            video_info='',
            video_category='',
            video_tag='',
            source=''
    ):
        """
        提供优酷的短视频入淘API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28689

        :param app: app
        :param type: type
        :param tb_uid: 优酷道长绑定的淘宝账号ID
        :param video_id: 视频VID，若为多个视频，则支持分组上传多个VID
        :param owner_name: 作者名称
        :param publish_time: 发布时间
        :param upload_time: 上传时间
        :param video_title: 视频标题
        :param video_info: 视频描述
        :param video_category: 视频的分类ID，目前是优酷的分类ID
        :param video_tag: 视频标签
        :param source: 视频的平台来源，如，优酷
        """
        return self._top_request(
            "alibaba.baichuan.ctg.video.upload",
            {
                "app": app,
                "type": type,
                "tb_uid": tb_uid,
                "video_id": video_id,
                "owner_name": owner_name,
                "publish_time": publish_time,
                "upload_time": upload_time,
                "video_title": video_title,
                "video_info": video_info,
                "video_category": video_category,
                "video_tag": video_tag,
                "source": source
            }
        )

    def alibaba_baichuan_ctg_user_relation(
            self,
            app='',
            uid='',
            tb_uid=''
    ):
        """
        用户
        提供给优酷查询道长和淘宝账户的绑定关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28747

        :param app: 调用的业务方
        :param uid: 业务方的用户ID
        :param tb_uid: 淘宝的用户ID
        """
        return self._top_request(
            "alibaba.baichuan.ctg.user.relation",
            {
                "app": app,
                "uid": uid,
                "tb_uid": tb_uid
            }
        )

    def alibaba_baichuan_taopassword_query(
            self,
            password_content=''
    ):
        """
        查询解析淘口令
        查询，解析淘口令
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30639

        :param password_content: 淘口令
        """
        return self._top_request(
            "alibaba.baichuan.taopassword.query",
            {
                "password_content": password_content
            }
        )

    def alibaba_baichuan_content_recommend(
            self,
            appid='',
            bizid='',
            params=''
    ):
        """
        内容推荐
        支付宝首页内容推荐
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31034

        :param appid: app标识
        :param bizid: 场景标识
        :param params: 业务参数
        """
        return self._top_request(
            "alibaba.baichuan.content.recommend",
            {
                "appid": appid,
                "bizid": bizid,
                "params": params
            }
        )

    def alibaba_baichuan_aso_query(
            self,
            app_id,
            app_os,
            device_info_list
    ):
        """
        查询app在设备上的安装信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31055

        :param app_id: 1-tmail,2-taobao
        :param app_os: 1-android,2-ios
        :param device_info_list: 设备信息，ios为idfa ，android 为imei + imsi
        """
        return self._top_request(
            "alibaba.baichuan.aso.query",
            {
                "app_id": app_id,
                "app_os": app_os,
                "device_info_list": device_info_list
            }
        )

    def alibaba_baichuan_aso_activate(
            self,
            source,
            app_id,
            app_os,
            device_info
    ):
        """
        设备安装活动激活
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31057

        :param source: 来源
        :param app_id: 1-tmail,2-taobao
        :param app_os: 1-android,2-ios
        :param device_info: 设备信息，ios为idfa ，android 为imei + imsi
        """
        return self._top_request(
            "alibaba.baichuan.aso.activate",
            {
                "source": source,
                "app_id": app_id,
                "app_os": app_os,
                "device_info": device_info
            }
        )

    def alibaba_baichuan_taopassword_check(
            self,
            param_dto,
            client_info
    ):
        """
        淘口令检查
        检查当前文本是否为淘口令
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31545

        :param param_dto: 参数DTO
        :param client_info: 系统自动生成
        """
        return self._top_request(
            "alibaba.baichuan.taopassword.check",
            {
                "param_dto": param_dto,
                "client_info": client_info
            }
        )

    def alibaba_baichuan_taopassword_config(
            self
    ):
        """
        淘口令配置数据
        百川淘口令规则配置接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31578

        """
        return self._top_request(
            "alibaba.baichuan.taopassword.config"
        )

    def taobao_gt_deliveryresource_list(
            self,
            channel_key,
            delivery_type,
            device_id_type,
            device_ids
    ):
        """
        实时获取可投放设备资源信息
        百川第三方渠道获取可投放设备资源信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31940

        :param channel_key: 渠道Key
        :param delivery_type: 投放类型(text/feed)
        :param device_id_type: 设备Id类型(imei/imsi/idfa)
        :param device_ids: 设备Id列表(md5加密)
        """
        return self._top_request(
            "taobao.gt.deliveryresource.list",
            {
                "channel_key": channel_key,
                "delivery_type": delivery_type,
                "device_id_type": device_id_type,
                "device_ids": device_ids
            }
        )


class TbWenBenSuanFa(DingTalkBaseAPI):
    """
    文本算法API
    """

    def taobao_nlp_feedback(
            self,
            content,
            type='0',
            api_name='',
            description=''
    ):
        """
        文本算法用户反馈接口
        反馈算法中的判断不正确或有问题的文本
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25154

        :param content: 文本内容
        :param type: 反馈类型 1-物流信息判断错误
        :param api_name: api接口名称
        :param description: 反馈的具体原因
        """
        return self._top_request(
            "taobao.nlp.feedback",
            {
                "content": content,
                "type": type,
                "api_name": api_name,
                "description": description
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_nlp_semantic_texts_analyze(
            self,
            texts,
            types='logistics_speed,logistics_service,logistics_package'
    ):
        """
        分析文本的语义信息
        传入文本内容,分析文本的语义信息后返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25155

        :param texts: 文本内容
        :param types: 需要获取的语义分析结果类型，以半角逗号(,)分隔,可以指定获取不同类型值的结果,以(=)号分割。如logistics_speed=0,logistics_speed=1;logistics_speed-物流速度分析;logistics_service-物流服务态度分析;logistics_package-物流包裹破损分析;
        """
        return self._top_request(
            "taobao.nlp.semantic.texts.analyze",
            {
                "texts": texts,
                "types": types
            },
            result_processor=lambda x: x["semantic_list"]
        )

    def taobao_nlp_similarity(
            self,
            texts
    ):
        """
        文本语言相似度
        文本语言相似度计算，提供余弦距离、编辑距离和simHash三种相似度计算。返回文本相似度区间为0-1之间，0为完全不相似，1为完全相似。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26128

        :param texts: 多文本内容
        """
        return self._top_request(
            "taobao.nlp.similarity",
            {
                "texts": texts
            },
            result_processor=lambda x: x["simresult"]
        )

    def taobao_nlp_word(
            self,
            w_type,
            text
    ):
        """
        文本语言词法分析
        提供文本语言处理中的词法分析功能,开放中文分词和词权重计算功能。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26129

        :param w_type: 功能类型选择：1)wType=1时提供分词功能，type=0时为基本粒度，type=1时为混合粒度，type=3时为基本粒度和混合粒度共同输出；
        :param text: 文本内容
        """
        return self._top_request(
            "taobao.nlp.word",
            {
                "w_type": w_type,
                "text": text
            },
            result_processor=lambda x: x["wordresult"]
        )

    def taobao_nlp_preprocess(
            self,
            text,
            func_type,
            keyword=''
    ):
        """
        文本语言预处理
        实现文本语言处理中的预处理功能，如实现文字繁简转换、文字转拼音、文字拆分、谐音同音字替换和形似字替换。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26130

        :param text: 文本内容
        :param func_type: 1)繁简字转换：func_type=1，对应type =1 繁转简 type=2 简转繁；2)拆分字转换：func_type =2，对应type=1 文字拆分 type=2 拆分字合并；3)文字转拼音：func_type =3，对应type=1 文字转拼音 type=2 拼音+声调；4)谐音同音字替换：func_type =4，对应type=1 谐音字替换 type=2 同音字替换；5)形似字替换：func_type =5，对应type=1 形似字替换;
        :param keyword: 谐音字转换、形似字转换需提供关键词进行替换，关键词之间以#分隔。keyword示例：兼职#招聘#微信、天猫#日结#微信#招聘#加微
        """
        return self._top_request(
            "taobao.nlp.preprocess",
            {
                "text": text,
                "func_type": func_type,
                "keyword": keyword
            },
            result_processor=lambda x: x["processresult"]
        )


class TbBaiChuanTuiSong(DingTalkBaseAPI):
    """
    百川推送
    """

    def taobao_cloudpush_message_ios(
            self,
            body,
            target,
            target_value
    ):
        """
        百川云推送发送消息给ios
        百川云推送发送消息给iOS设备.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25037

        :param body: 发送的消息内容.
        :param target: 推送目标: device:推送给设备; account:推送给指定帐号,all: 推送给全部
        :param target_value: 根据Target来设定，如Target=device, 则对应的值为 设备id1,设备id2. 多个值使用逗号分隔
        """
        return self._top_request(
            "taobao.cloudpush.message.ios",
            {
                "body": body,
                "target": target,
                "target_value": target_value
            }
        )

    def taobao_cloudpush_message_android(
            self,
            body,
            target,
            target_value
    ):
        """
        百川云推送发送消息给android
        百川用户使用云推送发送消息给android
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25038

        :param body: 发送的消息内容.
        :param target: 推送目标: device:推送给设备; account:推送给指定帐号,all: 推送给全部
        :param target_value: 根据Target来设定，如Target=device, 则对应的值为 设备id1,设备id2. 多个值使用逗号分隔
        """
        return self._top_request(
            "taobao.cloudpush.message.android",
            {
                "body": body,
                "target": target,
                "target_value": target_value
            }
        )

    def taobao_cloudpush_notice_android(
            self,
            summary,
            target,
            target_value,
            title
    ):
        """
        百川云推送发送通知给android
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25039

        :param summary: 通知摘要
        :param target: 推送目标: device:推送给设备; account:推送给指定帐号,all: 推送给全部
        :param target_value: 根据Target来设定，如Target=device, 则对应的值为 设备id1,设备id2. 多个值使用逗号分隔
        :param title: 通知的标题.
        """
        return self._top_request(
            "taobao.cloudpush.notice.android",
            {
                "summary": summary,
                "target": target,
                "target_value": target_value,
                "title": title
            }
        )

    def taobao_cloudpush_push(
            self,
            target,
            target_value,
            body,
            device_type,
            remind,
            store_offline,
            title,
            android_activity='',
            android_ext_parameters='',
            android_music='',
            android_open_type='',
            android_open_url='',
            anti_harass_duration='',
            anti_harass_start_time='',
            batch_number='',
            ios_badge='',
            ios_ext_parameters='',
            ios_music='',
            summery='',
            timeout='',
            type=''
    ):
        """
        百川用户使用云推送高级推送接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25040

        :param target: 推送目标: device:推送给设备; account:推送给指定帐号,tag:推送给自定义标签; all: 推送给全部
        :param target_value: 根据Target来设定，如Target=device, 则对应的值为 设备id1,设备id2. 多个值使用逗号分隔.(帐号与设备有一次最多100个的限制)
        :param body: 推送内容
        :param device_type: 设备类型,取值范围为:0~3云推送支持多种设备,各种设备类型编号如下:    iOS设备:deviceType=0; Andriod设备:deviceType=1;如果存在此字段,则向指定的设备类型推送消息。 默认为全部(3);
        :param remind: 当APP不在线时候，是否通过通知提醒.  针对不同设备，处理逻辑不同。 该参数只针对iOS设备生效， (remind=true  & 发送消息的话(type=0)). 当你的目标设备不在线(既长连接通道不通, 我们会将这条消息的标题，通过苹果的apns通道再送达一次。发apns是发送生产环境的apns，需要在云推送配置的app的iOS生产证书和密码需要正确，否则也发送不了。 (remind=false & 并且是发送消息的话(type=0))，那么设备不在线，则不会再走苹果apns发送了。
        :param store_offline: 离线消息是否保存,若保存, 在推送时候，用户即使不在线，下一次上线则会收到
        :param title: 推送的标题内容.
        :param android_activity: Android对应的activity,仅仅当androidOpenType=2有效
        :param android_ext_parameters: 自定义的kv结构,开发者扩展用 针对android
        :param android_music: android通知声音
        :param android_open_type: 点击通知后动作,1:打开应用 2: 打开应用Activity 3:打开 url
        :param android_open_url: Android收到推送后打开对应的url,仅仅当androidOpenType=3有效
        :param anti_harass_duration: 防打扰时长,取值范围为1~23
        :param anti_harass_start_time: 防打扰开始时间点,取值范围为0~23
        :param batch_number: 批次编号,用于活动效果统计
        :param ios_badge: iOS应用图标右上角角标
        :param ios_ext_parameters: 自定义的kv结构,开发者扩展用 针对iOS设备
        :param ios_music: iOS通知声音
        :param summery: 通知的摘要
        :param timeout: 离线消息保存时长,取值范围为1~72,若不填,则表示不保存离线消息
        :param type: 0:表示消息(默认为0),1:表示通知
        """
        return self._top_request(
            "taobao.cloudpush.push",
            {
                "target": target,
                "target_value": target_value,
                "body": body,
                "device_type": device_type,
                "remind": remind,
                "store_offline": store_offline,
                "title": title,
                "android_activity": android_activity,
                "android_ext_parameters": android_ext_parameters,
                "android_music": android_music,
                "android_open_type": android_open_type,
                "android_open_url": android_open_url,
                "anti_harass_duration": anti_harass_duration,
                "anti_harass_start_time": anti_harass_start_time,
                "batch_number": batch_number,
                "ios_badge": ios_badge,
                "ios_ext_parameters": ios_ext_parameters,
                "ios_music": ios_music,
                "summery": summery,
                "timeout": timeout,
                "type": type
            }
        )

    def taobao_cloudpush_notice_ios(
            self,
            summary,
            target,
            target_value,
            env,
            ext=''
    ):
        """
        推送通知给ios设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25041

        :param summary: 通知摘要
        :param target: 推送目标: device:推送给设备; account:推送给指定帐号,all: 推送给全部
        :param target_value: 根据Target来设定，如Target=device, 则对应的值为 设备id1,设备id2. 多个值使用逗号分隔
        :param env: iOS的通知是通过APNS中心来发送的，需要填写对应的环境信息.  DEV:表示开发环境, PRODUCT: 表示生产环境.
        :param ext: 提供给IOS通知的扩展属性，如角标或者声音等,注意：参数值为json
        """
        return self._top_request(
            "taobao.cloudpush.notice.ios",
            {
                "summary": summary,
                "target": target,
                "target_value": target_value,
                "env": env,
                "ext": ext
            }
        )

    def taobao_baichuan_message_sendMessage(
            self,
            message_desc,
            target_device_token,
            message,
            channel='1',
            extra_map='',
            save_timeout=''
    ):
        """
        消息发送接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25976

        :param message_desc: 消息描述
        :param target_device_token: 设备码
        :param message: 消息体
        :param channel: 通道类型 UMENG(1, '友盟'), JPUSH(2, '极光'), XG(3, '信鸽'), GETUI(4, '个推'); 默认友盟
        :param extra_map: 扩展k/v
        :param save_timeout: 网关保存时间 默认1小时
        """
        return self._top_request(
            "taobao.baichuan.message.sendMessage",
            {
                "message_desc": message_desc,
                "target_device_token": target_device_token,
                "message": message,
                "channel": channel,
                "extra_map": extra_map,
                "save_timeout": save_timeout
            }
        )

    def taobao_baichuan_message_sendNotification(
            self,
            message_desc,
            target_device_token,
            content_text,
            title,
            extra_map='',
            mobile_number='',
            save_timeout='',
            sms_context='',
            sms_delay_time='',
            sms_signature_id='',
            sms_template_id='',
            large_icon='',
            open_type='1',
            open_url='',
            summary='',
            channel='1'
    ):
        """
        push 发送接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        1.百川push&sms 发送功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25979

        :param message_desc: 消息描述
        :param target_device_token: 设备devicetoken
        :param content_text: 内容
        :param title: 标题
        :param extra_map: 扩展k/v
        :param mobile_number: 手机号码
        :param save_timeout: 网关保存时间
        :param sms_context: 短信传递的变量
        :param sms_delay_time: push超时后发sms（单位秒）
        :param sms_signature_id: sms_signature_id
        :param sms_template_id: sms 模板Id
        :param large_icon: 大图标
        :param open_type: 打开页面类型  1 表示打开应用 2 打开native页面 3 打开网页URL 4 打开应用自定义的schema
        :param open_url: 打开页面的URL
        :param summary: 摘要
        :param channel: 通道类型 UMENG(1, '友盟'), JPUSH(2, '极光'),  XG(3, '信鸽'), GETUI(4, '个推');
        """
        return self._top_request(
            "taobao.baichuan.message.sendNotification",
            {
                "message_desc": message_desc,
                "target_device_token": target_device_token,
                "content_text": content_text,
                "title": title,
                "extra_map": extra_map,
                "mobile_number": mobile_number,
                "save_timeout": save_timeout,
                "sms_context": sms_context,
                "sms_delay_time": sms_delay_time,
                "sms_signature_id": sms_signature_id,
                "sms_template_id": sms_template_id,
                "large_icon": large_icon,
                "open_type": open_type,
                "open_url": open_url,
                "summary": summary,
                "channel": channel
            }
        )


class TbGuoJiZhanShangPin(DingTalkBaseAPI):
    """
    国际站商品API
    """

    def alibaba_icbu_photobank_list(
            self,
            current_page='',
            group_id='',
            location_type='',
            page_size='',
            extra_context=''
    ):
        """
        国际站图片银行查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24459

        :param current_page: 当前翻页数
        :param group_id: 图片组id
        :param location_type: 存放位置 必要条件, 包括ALL_GROUP(所有目录), SUB_GROUP(指定图片组下),UNGROUP(未分组), TEMP(disable)四个值
        :param page_size: 每页显示数
        :param extra_context: 额外的上下文信息. 例如:icvId
        """
        return self._top_request(
            "alibaba.icbu.photobank.list",
            {
                "current_page": current_page,
                "group_id": group_id,
                "location_type": location_type,
                "page_size": page_size,
                "extra_context": extra_context
            },
            result_processor=lambda x: x["pagination_query_list"]
        )

    def alibaba_icbu_product_group_get(
            self,
            group_id,
            extra_context=''
    ):
        """
        分组信息获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25299

        :param group_id: 分组ID，传-1获得所有一级分组
        :param extra_context: 补充信息
        """
        return self._top_request(
            "alibaba.icbu.product.group.get",
            {
                "group_id": group_id,
                "extra_context": extra_context
            },
            result_processor=lambda x: x["product_group"]
        )

    def alibaba_icbu_product_group_add(
            self,
            group_name,
            parent_id,
            extra_context=''
    ):
        """
        增加商品分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25300

        :param group_name: 分组名称
        :param parent_id: 上级分组ID，如果建立顶级分组设为-1
        :param extra_context: 补充信息，如isv id
        """
        return self._top_request(
            "alibaba.icbu.product.group.add",
            {
                "group_name": group_name,
                "parent_id": parent_id,
                "extra_context": extra_context
            },
            result_processor=lambda x: x["product_group"]
        )

    def alibaba_icbu_product_add(
            self,
            category_id,
            keywords,
            language,
            main_image,
            product_type,
            subject,
            attributes=None,
            bulk_discount_prices=None,
            description='',
            extra_context='',
            group_id='',
            product_sku=None,
            sourcing_trade=None,
            wholesale_trade=None,
            market='main',
            is_smart_edit='',
            custom_info=None
    ):
        """
        发布产品
        发布商品,支持sourcing/一口价商品，支持英文和多种语言原发商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25347

        :param category_id: 类目ID
        :param keywords: 关键词，不要包含特殊符号（如,;），最多三个
        :param language: 语种，参见FAQ 语种枚举值
        :param main_image: 商品主图
        :param product_type: 商品类型，在线批发商品(wholesale)或者询盘商品(sourcing)，值为wholesale时，必须填写wholesale_trade
        :param subject: 商品名称，最多128个字符
        :param attributes: 商品属性和属性值
        :param bulk_discount_prices: 根据数量设置的折扣价
        :param description: 商品详情描述，可包含图片中心的图片URL
        :param extra_context: 补充信息
        :param group_id: 分组ID
        :param product_sku: 商品SKU定义
        :param sourcing_trade: 询盘商品交易信息
        :param wholesale_trade: 在线批发商品交易信息
        :param market: 发布的市场，支持main/onesite，默认main发到主市场，填onesite发布为商机通产品
        :param is_smart_edit: 是否智能编辑，如果不传，默认为false
        :param custom_info: 定制信息
        """
        return self._top_request(
            "alibaba.icbu.product.add",
            {
                "category_id": category_id,
                "keywords": keywords,
                "language": language,
                "main_image": main_image,
                "product_type": product_type,
                "subject": subject,
                "attributes": attributes,
                "bulk_discount_prices": bulk_discount_prices,
                "description": description,
                "extra_context": extra_context,
                "group_id": group_id,
                "product_sku": product_sku,
                "sourcing_trade": sourcing_trade,
                "wholesale_trade": wholesale_trade,
                "market": market,
                "is_smart_edit": is_smart_edit,
                "custom_info": custom_info
            },
            result_processor=lambda x: x["product_id"]
        )

    def alibaba_icbu_category_attribute_get(
            self,
            cat_id
    ):
        """
        类目属性获取
        根据类目ID获取系统定义的属性
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25348

        :param cat_id: 发布类目id
        """
        return self._top_request(
            "alibaba.icbu.category.attribute.get",
            {
                "cat_id": cat_id
            },
            result_processor=lambda x: x["attributes"]
        )

    def alibaba_icbu_category_get(
            self,
            cat_id
    ):
        """
        商品发布类目获取
        获取商品发布类目
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25349

        :param cat_id: 发布类目id,必须大于等于0， 如果为0，则查询所有一级类目
        """
        return self._top_request(
            "alibaba.icbu.category.get",
            {
                "cat_id": cat_id
            },
            result_processor=lambda x: x["category"]
        )

    def alibaba_icbu_product_update(
            self,
            category_id,
            keywords,
            language,
            main_image,
            product_type,
            subject,
            product_id,
            attributes=None,
            bulk_discount_prices=None,
            description='',
            extra_context='',
            group_id='',
            product_sku=None,
            sourcing_trade=None,
            wholesale_trade=None,
            market='main',
            is_smart_edit='',
            custom_info=None
    ):
        """
        修改商品
        修改国际站商品，支持询盘商品和在线批发商品，支持英文商品和多语言商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25357

        :param category_id: 类目ID
        :param keywords: 关键词，不要包含特殊符号（如,;），最多三个
        :param language: 语种，参见FAQ 语种枚举值
        :param main_image: 商品主图
        :param product_type: 商品类型，在线批发商品(wholesale)或者询盘商品(sourcing)
        :param subject: 商品名称，最多128个字符
        :param product_id: 混淆商品ID
        :param attributes: 商品属性和属性值
        :param bulk_discount_prices: 根据数量设置的折扣价
        :param description: 商品详情描述，可包含图片中心的图片URL
        :param extra_context: 补充信息
        :param group_id: 分组ID
        :param product_sku: 商品SKU定义
        :param sourcing_trade: 询盘商品交易信息
        :param wholesale_trade: 在线批发商品交易信息
        :param market: 发布的市场，支持main/onesite，默认main发到主市场，填onesite发布为商机通产品
        :param is_smart_edit: 智能编辑，不填写使用原来的。注意必须和详情的格式一致
        :param custom_info: 定制信息
        """
        return self._top_request(
            "alibaba.icbu.product.update",
            {
                "category_id": category_id,
                "keywords": keywords,
                "language": language,
                "main_image": main_image,
                "product_type": product_type,
                "subject": subject,
                "product_id": product_id,
                "attributes": attributes,
                "bulk_discount_prices": bulk_discount_prices,
                "description": description,
                "extra_context": extra_context,
                "group_id": group_id,
                "product_sku": product_sku,
                "sourcing_trade": sourcing_trade,
                "wholesale_trade": wholesale_trade,
                "market": market,
                "is_smart_edit": is_smart_edit,
                "custom_info": custom_info
            },
            result_processor=lambda x: x["product_id"]
        )

    def alibaba_wholesale_shippingline_template_list(
            self,
            page_num='1',
            count='10'
    ):
        """
        获取运费模板
        查询运费模板信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25394

        :param page_num: 第几页从1开始
        :param count: 每页返回的数据个数
        """
        return self._top_request(
            "alibaba.wholesale.shippingline.template.list",
            {
                "page_num": page_num,
                "count": count
            },
            result_processor=lambda x: x["list_template_response"]
        )

    def alibaba_icbu_product_list(
            self,
            language,
            category_id='',
            subject='',
            current_page='1',
            page_size='10',
            group_id3='',
            group_id2='',
            group_id1=''
    ):
        """
        商品查询
        根据类目ID和商品名称查询商品概要信息。结果以修改时间倒序返回，支持分页，每页最多30个。每次调用都是独立的请求，不记录调用的上下文。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25438

        :param language: 商品语种，目前只支持ENGLISH
        :param category_id: 类目ID
        :param subject: 商品名称，支持模糊匹配
        :param current_page: 当前页
        :param page_size: 每页大小，最大30
        :param group_id3: 商品三级分组id，可选填。若填写-1 则表示取回的商品没有三级分组，不填入代表取回的商品不关心它的三级分组，填写对应的group id将返回这个分组下的商品
        :param group_id2: 商品二级分组id，可选填。若填写-1 则表示取回的商品没有二级分组，不填入代表取回的商品不关系它的二级分组，填写对应的group id将返回这个分组下的商品
        :param group_id1: 商品一级分组id，可选填。若填写0 则表示取回的商品没有一级分组，不填入代表取回的商品不关心它的一级分组，填写对应的group id将返回这个分组下的商品
        """
        return self._top_request(
            "alibaba.icbu.product.list",
            {
                "language": language,
                "category_id": category_id,
                "subject": subject,
                "current_page": current_page,
                "page_size": page_size,
                "group_id3": group_id3,
                "group_id2": group_id2,
                "group_id1": group_id1
            }
        )

    def alibaba_icbu_product_get(
            self,
            language,
            product_id
    ):
        """
        获得单个商品详情
        获取商品详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25439

        :param language: 商品语种，目前只支持ENGLISH
        :param product_id: 混淆后的商品ID
        """
        return self._top_request(
            "alibaba.icbu.product.get",
            {
                "language": language,
                "product_id": product_id
            },
            result_processor=lambda x: x["product"]
        )

    def alibaba_icbu_product_id_decrypt(
            self,
            language,
            product_id
    ):
        """
        商品ID解密
        对混淆的产品ID解密
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26068

        :param language: 语种
        :param product_id: 混淆后的商品ID
        """
        return self._top_request(
            "alibaba.icbu.product.id.decrypt",
            {
                "language": language,
                "product_id": product_id
            },
            result_processor=lambda x: x["id"]
        )

    def alibaba_icbu_product_update_field(
            self,
            language,
            product_type,
            product_id,
            attributes=None,
            bulk_discount_prices=None,
            category_id='',
            description='',
            extra_context='',
            group_id='',
            keywords='',
            main_image=None,
            product_sku=None,
            sourcing_trade=None,
            subject='',
            wholesale_trade=None,
            market='main',
            custom_info=None,
            is_smart_edit=''
    ):
        """
        商品按字段更新
        按字段修改国际站商品，支持询盘商品和在线批发商品，支持英文商品和多语言商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27010

        :param language: 语种，当前只有english
        :param product_type: 商品类型，在线批发商品(wholesale)或者询盘商品(sourcing)
        :param product_id: 混淆商品ID
        :param attributes: 商品属性和属性值
        :param bulk_discount_prices: 根据数量设置的折扣价
        :param category_id: 类目ID
        :param description: 商品详情描述，可包含图片中心的图片URL
        :param extra_context: 补充信息
        :param group_id: 分组ID
        :param keywords: 关键词，不要包含特殊符号（如,;），最多三个
        :param main_image: 商品主图
        :param product_sku: 商品SKU定义
        :param sourcing_trade: 询盘商品交易信息
        :param subject: 商品名称，最多128个字符
        :param wholesale_trade: 在线批发商品交易信息
        :param market: 发布的市场，支持main/onesite，默认main发到主市场，填onesite发布为商机通产品
        :param custom_info: 定制信息
        :param is_smart_edit: 商品详情种类，true表示智能编辑，不填默认取商品原来的详情种类
        """
        return self._top_request(
            "alibaba.icbu.product.update.field",
            {
                "language": language,
                "product_type": product_type,
                "product_id": product_id,
                "attributes": attributes,
                "bulk_discount_prices": bulk_discount_prices,
                "category_id": category_id,
                "description": description,
                "extra_context": extra_context,
                "group_id": group_id,
                "keywords": keywords,
                "main_image": main_image,
                "product_sku": product_sku,
                "sourcing_trade": sourcing_trade,
                "subject": subject,
                "wholesale_trade": wholesale_trade,
                "market": market,
                "custom_info": custom_info,
                "is_smart_edit": is_smart_edit
            },
            result_processor=lambda x: x["product_id"]
        )

    def alibaba_icbu_photobank_group_list(
            self,
            extra_context='',
            id=''
    ):
        """
        图片银行分组信息获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30575

        :param extra_context: 补充信息
        :param id: 查询图片分组信息，如果传入id，则获取当前分组和所有子分组信息，否则获取所有一级分组信息
        """
        return self._top_request(
            "alibaba.icbu.photobank.group.list",
            {
                "extra_context": extra_context,
                "id": id
            },
            result_processor=lambda x: x["groups"]
        )

    def alibaba_icbu_photobank_group_operate(
            self,
            photo_group_operation_request=None
    ):
        """
        图片银行分组操作接口
        修改用户图片银行的分组信息，包括 新增分组，删除分组，分组重命名
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41767

        :param photo_group_operation_request: 图片分组操作请求对象
        """
        return self._top_request(
            "alibaba.icbu.photobank.group.operate",
            {
                "photo_group_operation_request": photo_group_operation_request
            },
            result_processor=lambda x: x["photo_group_result"]
        )


class TbTaoBaoYouXi(DingTalkBaseAPI):
    """
    淘宝游戏API
    """

    def taobao_apple_olduser_charge_notify(
            self,
            result_code='',
            result_msg='',
            main_data=None
    ):
        """
        老用户激活并兑换通知接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32402

        :param result_code: 结果code
        :param result_msg: 结果信息说明
        :param main_data: 业务参数
        """
        return self._top_request(
            "taobao.apple.olduser.charge.notify",
            {
                "result_code": result_code,
                "result_msg": result_msg,
                "main_data": main_data
            }
        )

    def taobao_apple_newuser_sign_notify(
            self,
            result_code,
            result_msg='',
            main_data=None
    ):
        """
        新用户签约通知接口
        用户付款成功后，资和信主动通知签约结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32403

        :param result_code: 结果code
        :param result_msg: 结果信息说明
        :param main_data: 业务参数
        """
        return self._top_request(
            "taobao.apple.newuser.sign.notify",
            {
                "result_code": result_code,
                "result_msg": result_msg,
                "main_data": main_data
            }
        )

    def taobao_apple_newuser_activate_notify(
            self,
            result_code='',
            result_msg='',
            main_data=None
    ):
        """
        新用户激活通知接口
        资和信主动通知激活结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32404

        :param result_code: 结果对应值，00位成功，其他为失败
        :param result_msg: 处理结果中文描述
        :param main_data: 主业务参数
        """
        return self._top_request(
            "taobao.apple.newuser.activate.notify",
            {
                "result_code": result_code,
                "result_msg": result_msg,
                "main_data": main_data
            }
        )

    def taobao_apple_newuser_sign_notify_newversion(
            self,
            result_code,
            result_msg='',
            main_data=None
    ):
        """
        新用户签约结果通知接口v2
        资和信主动通知签约结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41455

        :param result_code: 结果code
        :param result_msg: 结果信息说明
        :param main_data: 业务参数
        """
        return self._top_request(
            "taobao.apple.newuser.sign.notify.newversion",
            {
                "result_code": result_code,
                "result_msg": result_msg,
                "main_data": main_data
            }
        )


class TbJuAnQuan(DingTalkBaseAPI):
    """
    聚安全API
    """

    def alibaba_security_jaq_spamregisterprevention_result_fetch(
            self,
            phone_number,
            ip,
            context,
            source,
            email='',
            user_id='',
            register_url='',
            agent='',
            cookie='',
            session_id='',
            mac_address='',
            referer='',
            nick_name='',
            company_name='',
            address='',
            id_number='',
            bank_card_number='',
            js_token='',
            sdk_token=''
    ):
        """
        获取垃圾注册防控结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25454

        :param phone_number: 账号绑定的手机号码
        :param ip: 账号绑定的IP地址
        :param context: 场景描述，String必须在下面可以使用的场景中选择。可以使用的场景为：Login：登录事件；Register：注册事件；Trade:交易事件；Payment:支付事件;Refund：退款事件	；Loan：借款事件；Transfer：转账事件；Withdraw	：提现事件；Modify：修改事件；Click：点击事件；Activate：激活事件；	Other：其他事件。
        :param source: 登录来源。可以输入的参数如下：1：PC网页；2：移动网页；3：APP；4：其他
        :param email: 账号绑定的email地址
        :param user_id: 账号的全局唯一标识
        :param register_url: 当前注册的页面URL，Source为1，2时，该参数必选
        :param agent: agent，发送HTTP请求的代理
        :param cookie: Cookie
        :param session_id: Session id
        :param mac_address: 硬件信息
        :param referer: 上一跳信息
        :param nick_name: 账号绑定的呢称
        :param company_name: 账号绑定的公司名字
        :param address: 账号绑定的注册的地址
        :param id_number: 账号绑定的身份证号
        :param bank_card_number: 账号绑定的银行卡号
        :param js_token: 接入JS后从服务端获取的token
        :param sdk_token: 接入SDK后从服务端获取的token
        """
        return self._top_request(
            "alibaba.security.jaq.spamregisterprevention.result.fetch",
            {
                "phone_number": phone_number,
                "ip": ip,
                "context": context,
                "source": source,
                "email": email,
                "user_id": user_id,
                "register_url": register_url,
                "agent": agent,
                "cookie": cookie,
                "session_id": session_id,
                "mac_address": mac_address,
                "referer": referer,
                "nick_name": nick_name,
                "company_name": company_name,
                "address": address,
                "id_number": id_number,
                "bank_card_number": bank_card_number,
                "js_token": js_token,
                "sdk_token": sdk_token
            },
            result_processor=lambda x: x["jaq_account_risk_result"]
        )

    def alibaba_security_jaq_spamregisterprevention_feedback(
            self,
            item_id,
            jaq_decision,
            customer_decision,
            feed_back,
            deny_reason=''
    ):
        """
        保护结果反馈
        用户通过这个接口对垃圾注册防控结果进行反馈
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25472

        :param item_id: 查询接口返回的id
        :param jaq_decision: 聚安全返回的决定信息。当feedBack为0时可以不添
        :param customer_decision: 用户自己的决定信息。当feedBack为0时可以不添。
        :param feed_back: 用户不认同聚安全返回结果的原因类型。0：同意判定；1：和三方结果不符；2：用户投诉；3:经过人工review判断;9:	其他。
        :param deny_reason: 用户不认同聚安全返回结果的原因描述
        """
        return self._top_request(
            "alibaba.security.jaq.spamregisterprevention.feedback",
            {
                "item_id": item_id,
                "jaq_decision": jaq_decision,
                "customer_decision": customer_decision,
                "feed_back": feed_back,
                "deny_reason": deny_reason
            },
            result_processor=lambda x: x["feed_back_result"]
        )

    def alibaba_security_jaq_app_risk_scan(
            self,
            app_info=None,
            scan_types='',
            ext_param=''
    ):
        """
        应用风险扫描提交接口
        提交应用进行风险扫描(含漏洞扫描、恶意代码检测、仿冒监测),扫描完成后可通过对应的查询接口查询扫描结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25661

        :param app_info: 应用信息
        :param scan_types: 扫描类型：vuln-漏洞扫描 malware-恶意代码检测 fake-仿冒监测 plugin-插件扫描 注: dataType为2时 不支持 仿冒监测
        :param ext_param: 额外的信息，根据具体业务定
        """
        return self._top_request(
            "alibaba.security.jaq.app.risk.scan",
            {
                "app_info": app_info,
                "scan_types": scan_types,
                "ext_param": ext_param
            }
        )

    def alibaba_security_jaq_app_risksummary_get(
            self,
            item_id=''
    ):
        """
        应用风险概要信息查询接口
        用户通过alibaba.security.jaq.app.risk.scan接口提交应用进行风险扫描后，用此接口获取风险概要信息，本接口不返回风险详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25663

        :param item_id: 任务唯一标识
        """
        return self._top_request(
            "alibaba.security.jaq.app.risksummary.get",
            {
                "item_id": item_id
            }
        )

    def alibaba_security_jaq_app_shield(
            self,
            app_info=None,
            channel=None
    ):
        """
        应用加固接口
        提交应用进行应用加固,加固后需通过alibaba.security.jaq.app.shieldresult.get接口查询加固结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25664

        :param app_info: 待加固的应用信息
        :param channel: 渠道列表,多渠道加固时填写
        """
        return self._top_request(
            "alibaba.security.jaq.app.shield",
            {
                "app_info": app_info,
                "channel": channel
            }
        )

    def alibaba_security_jaq_app_shieldresult_get(
            self,
            item_id
    ):
        """
        用户查询加固结果
        用户通过alibaba.security.jaq.app.shield接口提交应用加固后,通过该接口查询加固结果,下载加固包
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25665

        :param item_id: 任务唯一标识
        """
        return self._top_request(
            "alibaba.security.jaq.app.shieldresult.get",
            {
                "item_id": item_id
            }
        )

    def alibaba_security_jaq_app_riskdetail_get(
            self,
            item_id='',
            locale=None
    ):
        """
        应用风险详细信息查询接口
        用户通过alibaba.security.jaq.app.risk.scan接口提交应用进行风险扫描后，用此接口获取风险详细信息,包含漏洞列表、恶意代码列表、仿冒应用列表等信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25666

        :param item_id: 任务唯一标识
        :param locale: 本地化语言信息
        """
        return self._top_request(
            "alibaba.security.jaq.app.riskdetail.get",
            {
                "item_id": item_id,
                "locale": locale
            }
        )

    def alibaba_security_jaq_wsgriskdata_report(
            self,
            wua,
            ext_param=''
    ):
        """
        无线保镖SDK风控数据上报
        无线保镖sdk根据用户的需要，上报数据到聚安全云端
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25717

        :param wua: wua串
        :param ext_param: mtopappkey是mtop的appkey
        """
        return self._top_request(
            "alibaba.security.jaq.wsgriskdata.report",
            {
                "wua": wua,
                "ext_param": ext_param
            },
            result_processor=lambda x: x["jaq_wsg_risk_report_result"]
        )

    def alibaba_security_jaq_app_risk_scanbatch(
            self,
            app_info,
            scan_types
    ):
        """
        应用风险扫描批量提交接口
        批量提交应用进行风险扫描(含漏洞扫描、恶意代码检测),扫描完成后可通过对应的查询接口查询扫描结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26126

        :param app_info: APP信息
        :param scan_types: 扫描类型
        """
        return self._top_request(
            "alibaba.security.jaq.app.risk.scanbatch",
            {
                "app_info": app_info,
                "scan_types": scan_types
            }
        )

    def alibaba_security_jaq_app_riskdetailbatch_get(
            self,
            item_id,
            locale=None
    ):
        """
        应用风险详细信息批量查询接口
        用户通过alibaba.security.jaq.app.risk.scanbatch接口提交应用进行风险批量扫描后，用此接口批量获取风险详细信息,包含漏洞列表、恶意代码列表、仿冒应用列表等信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26127

        :param item_id: 任务唯一标识
        :param locale: 本地化语言信息,用于指定返回结果内容所使用的语言(默认为zh_CN,目前仅支持zh_CN)
        """
        return self._top_request(
            "alibaba.security.jaq.app.riskdetailbatch.get",
            {
                "item_id": item_id,
                "locale": locale
            }
        )

    def alibaba_security_jaq_loginprevention_result_fetch(
            self,
            ip,
            source,
            protocol_version,
            phone_number='',
            email='',
            user_id='',
            id_type='',
            current_url='',
            agent='',
            cookie='',
            session_id='',
            mac_address='',
            referer='',
            user_name='',
            company_name='',
            address='',
            id_number='',
            bank_card_number='',
            js_token='',
            sdk_token='',
            extend_data='',
            account_exist='',
            login_type='',
            password_correct='',
            password_hash='',
            register_date='',
            register_ip=''
    ):
        """
        获取登录保护结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26144

        :param ip: 登录时候的IP地址
        :param source: 登录来源。1：PC网页；2：移动网页；3：APP;4:其它
        :param protocol_version: 协议版本号。现在的值是1.0
        :param phone_number: 关联账号的手机号。手机号码的格式为国家码-手机号的格式，如中国手机号86-13088889999或美国手机号001-9096185426，如果不加国家码都视为中国手机号码【phone_number ,email, (user_id,id_type)三种必选其一】
        :param email: 关联账号的email。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param user_id: 账号的全局唯一标识，为了提高准确率，建议带上该字段。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param id_type: 账号的全局唯一标识，为了提高准确率，建议带上该字段。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param current_url: 当前操作的页面URL。Source为1，2时，该参数必选
        :param agent: 发送HTTP请求的代理
        :param cookie: Cookie
        :param session_id: Session id
        :param mac_address: 硬件信息
        :param referer: 上一跳信息
        :param user_name: 账号绑定的呢称
        :param company_name: 账号绑定的公司名字
        :param address: 账号绑定的注册的地址
        :param id_number: 账号绑定的身份证号
        :param bank_card_number: 账号绑定的银行卡号
        :param js_token: 接入JS后获取的token
        :param sdk_token: 接入无线保镖安全组件后从服务端获取的token
        :param extend_data: 扩展字段。json格式的字符串，根据具体情况而定 。
        :param account_exist: 账号在系统里面是否存在。0：不存在；1：存在
        :param login_type: 登录场景。1：账密登陆；2：扫码登录；3：短信验证码登录；0：其它
        :param password_correct: 密码是否正确。0：不正确；1：正确
        :param password_hash: 将密码加盐hash后传递，用于弱密码检测
        :param register_date: 注册的时间（秒）
        :param register_ip: 注册时候的ip
        """
        return self._top_request(
            "alibaba.security.jaq.loginprevention.result.fetch",
            {
                "ip": ip,
                "source": source,
                "protocol_version": protocol_version,
                "phone_number": phone_number,
                "email": email,
                "user_id": user_id,
                "id_type": id_type,
                "current_url": current_url,
                "agent": agent,
                "cookie": cookie,
                "session_id": session_id,
                "mac_address": mac_address,
                "referer": referer,
                "user_name": user_name,
                "company_name": company_name,
                "address": address,
                "id_number": id_number,
                "bank_card_number": bank_card_number,
                "js_token": js_token,
                "sdk_token": sdk_token,
                "extend_data": extend_data,
                "account_exist": account_exist,
                "login_type": login_type,
                "password_correct": password_correct,
                "password_hash": password_hash,
                "register_date": register_date,
                "register_ip": register_ip
            },
            result_processor=lambda x: x["jaq_account_risk_result"]
        )

    def alibaba_security_jaq_campaignprevention_result_fetch(
            self,
            ip,
            source,
            protocol_version,
            activity_description,
            activity_id,
            prize,
            prize_type,
            phone_number='',
            email='',
            user_id='',
            id_type='',
            current_url='',
            agent='',
            cookie='',
            session_id='',
            mac_address='',
            referer='',
            user_name='',
            company_name='',
            address='',
            id_number='',
            bank_card_number='',
            js_token='',
            sdk_token='',
            extend_data='',
            register_date='',
            register_ip=''
    ):
        """
        获取活动保护结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26145

        :param ip: 登录时候的IP地址
        :param source: 登录来源。1：PC网页；2：移动网页；3：APP;4:其它
        :param protocol_version: 协议版本号。现在的值是1.0
        :param activity_description: 活动描述，场景为活动时提供，活动基本规则描述，以评估活动流程的风险
        :param activity_id: 活动编号
        :param prize: 活动奖品面值，场景为活动时提供，活动抽中的价值
        :param prize_type: 活动奖品类型。1：事物；2：红包；3：优惠券；4：购物券；5：积分；6：代币；0：其它
        :param phone_number: 电话号码。手机号码的格式为国家码-手机号的格式，如中国手机号86-13088889999或美国手机号001-9096185426，如果不加国家码都视为中国手机号码【phone_number ,email, (user_id,id_type)三种必选其一】
        :param email: 邮箱地址。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param user_id: 账号的全局唯一标识。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param id_type: 有user_id时候必填。1：阿里HID；2：用户自有ID；3：openId; 4:其它。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param current_url: 当前操作的页面URL。Source为1，2时，该参数必选
        :param agent: 发送HTTP请求的代理
        :param cookie: Cookie
        :param session_id: Session id
        :param mac_address: 硬件信息
        :param referer: 上一跳信息
        :param user_name: 账号绑定的呢称
        :param company_name: 账号绑定的公司名字
        :param address: 账号绑定的注册的地址
        :param id_number: 账号绑定的身份证号
        :param bank_card_number: 账号绑定的银行卡号
        :param js_token: 接入JS后获取的token
        :param sdk_token: 接入无线保镖安全组件后从服务端获取的token
        :param extend_data: 扩展字段。json格式的字符串，根据具体情况而定 。
        :param register_date: 注册的时间（秒）
        :param register_ip: 注册时候的ip
        """
        return self._top_request(
            "alibaba.security.jaq.campaignprevention.result.fetch",
            {
                "ip": ip,
                "source": source,
                "protocol_version": protocol_version,
                "activity_description": activity_description,
                "activity_id": activity_id,
                "prize": prize,
                "prize_type": prize_type,
                "phone_number": phone_number,
                "email": email,
                "user_id": user_id,
                "id_type": id_type,
                "current_url": current_url,
                "agent": agent,
                "cookie": cookie,
                "session_id": session_id,
                "mac_address": mac_address,
                "referer": referer,
                "user_name": user_name,
                "company_name": company_name,
                "address": address,
                "id_number": id_number,
                "bank_card_number": bank_card_number,
                "js_token": js_token,
                "sdk_token": sdk_token,
                "extend_data": extend_data,
                "register_date": register_date,
                "register_ip": register_ip
            },
            result_processor=lambda x: x["jaq_account_risk_result"]
        )

    def alibaba_security_jaq_modifyinfoprevention_result_fetch(
            self,
            ip,
            source,
            protocol_version,
            modify_info_list,
            phone_number='',
            email='',
            user_id='',
            id_type='',
            current_url='',
            agent='',
            cookie='',
            session_id='',
            mac_address='',
            referer='',
            user_name='',
            company_name='',
            address='',
            id_number='',
            bank_card_number='',
            js_token='',
            sdk_token='',
            extend_data='',
            account_exist='',
            register_date='',
            register_ip=''
    ):
        """
        获取修改信息保护结果
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26147

        :param ip: 登录时候的IP地址
        :param source: 登录来源。1：PC网页；2：移动网页；3：APP;4:其它
        :param protocol_version: 协议版本号。现在的值是1.0
        :param modify_info_list: 系统自动生成
        :param phone_number: 电话号码。手机号码的格式为国家码-手机号的格式，如中国手机号86-13088889999或美国手机号001-9096185426，如果不加国家码都视为中国手机号码【phone_number ,email, (user_id,id_type)三种必选其一】
        :param email: 邮箱地址。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param user_id: 账号的全局唯一标识。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param id_type: 有user_id时候必填。1：阿里HID；2：用户自有ID；3：openId; 4:其它。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param current_url: 当前操作的页面URL。Source为1，2时，该参数必选
        :param agent: 发送HTTP请求的代理
        :param cookie: Cookie
        :param session_id: Session id
        :param mac_address: 硬件信息
        :param referer: 上一跳信息
        :param user_name: 账号绑定的呢称
        :param company_name: 账号绑定的公司名字
        :param address: 账号绑定的注册的地址
        :param id_number: 账号绑定的身份证号
        :param bank_card_number: 账号绑定的银行卡号
        :param js_token: 接入JS后获取的token
        :param sdk_token: 接入无线保镖安全组件后从服务端获取的token
        :param extend_data: 扩展字段。json格式的字符串，根据具体情况而定
        :param account_exist: 账号在系统里面是否存在。0：不存在；1：存在
        :param register_date: 注册的时间（秒）
        :param register_ip: 注册时候的ip
        """
        return self._top_request(
            "alibaba.security.jaq.modifyinfoprevention.result.fetch",
            {
                "ip": ip,
                "source": source,
                "protocol_version": protocol_version,
                "modify_info_list": modify_info_list,
                "phone_number": phone_number,
                "email": email,
                "user_id": user_id,
                "id_type": id_type,
                "current_url": current_url,
                "agent": agent,
                "cookie": cookie,
                "session_id": session_id,
                "mac_address": mac_address,
                "referer": referer,
                "user_name": user_name,
                "company_name": company_name,
                "address": address,
                "id_number": id_number,
                "bank_card_number": bank_card_number,
                "js_token": js_token,
                "sdk_token": sdk_token,
                "extend_data": extend_data,
                "account_exist": account_exist,
                "register_date": register_date,
                "register_ip": register_ip
            },
            result_processor=lambda x: x["jaq_account_risk_result"]
        )

    def alibaba_security_jaq_app_shieldpro(
            self,
            app_info=None,
            channel=None,
            enhance=None
    ):
        """
        高级应用加固接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提交应用进行应用自定义加固,加固后需通过alibaba.security.jaq.app.shieldresult.get接口查询加固结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26181

        :param app_info: 待加固的应用信息
        :param channel: 渠道列表,多渠道加固时填写
        :param enhance: 自定义加固信息，配置自定义加固时填写
        """
        return self._top_request(
            "alibaba.security.jaq.app.shieldpro",
            {
                "app_info": app_info,
                "channel": channel,
                "enhance": enhance
            }
        )

    def alibaba_security_jaq_spamregisterprevention_result_fetch_new(
            self,
            ip,
            source,
            protocol_version,
            phone_number='',
            email='',
            user_id='',
            id_type='',
            register_url='',
            agent='',
            cookie='',
            session_id='',
            mac_address='',
            referer='',
            nick_name='',
            company_name='',
            address='',
            id_number='',
            bank_card_number='',
            js_token='',
            sdk_token='',
            extend_data=''
    ):
        """
        获取虚假注册保护结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26200

        :param ip: 登录时候的IP地址
        :param source: 登录来源。1：PC网页；2：移动网页；3：APP;4:其它
        :param protocol_version: 协议版本号。现在的值是1.0
        :param phone_number: 关联账号的手机号。手机号码的格式为国家码-手机号的格式，如中国手机号86-13088889999或美国手机号001-9096185426，如果不加国家码都视为中国手机号码【phone_number ,email, (user_id,id_type)三种必选其一】
        :param email: 关联账号的email。 【phone_number ,email, (user_id,id_type)三种必选其一】
        :param user_id: 账号的全局唯一标识，为了提高准确率，建议带上该字段。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param id_type: 有user_id时候必填。1：阿里HID；2：用户自有ID；3：openId; 4:其它。【phone_number ,email, (user_id,id_type)三种必选其一】
        :param register_url: 当前操作的页面URL。Source为1，2时，该参数必选
        :param agent: 发送HTTP请求的代理
        :param cookie: Cookie
        :param session_id: Session id
        :param mac_address: 硬件信息
        :param referer: 上一跳信息
        :param nick_name: 账号绑定的呢称
        :param company_name: 账号绑定的公司名字
        :param address: 账号绑定的注册的地址
        :param id_number: 账号绑定的身份证号
        :param bank_card_number: 账号绑定的银行卡号
        :param js_token: 接入JS后获取的token
        :param sdk_token: 接入无线保镖安全组件后从服务端获取的token
        :param extend_data: 扩展字段。json格式的字符串，根据具体情况而定
        """
        return self._top_request(
            "alibaba.security.jaq.spamregisterprevention.result.fetch.new",
            {
                "ip": ip,
                "source": source,
                "protocol_version": protocol_version,
                "phone_number": phone_number,
                "email": email,
                "user_id": user_id,
                "id_type": id_type,
                "register_url": register_url,
                "agent": agent,
                "cookie": cookie,
                "session_id": session_id,
                "mac_address": mac_address,
                "referer": referer,
                "nick_name": nick_name,
                "company_name": company_name,
                "address": address,
                "id_number": id_number,
                "bank_card_number": bank_card_number,
                "js_token": js_token,
                "sdk_token": sdk_token,
                "extend_data": extend_data
            },
            result_processor=lambda x: x["jaq_account_risk_result"]
        )

    def alibaba_security_jaq_green_keyword_filter(
            self,
            content
    ):
        """
        聚安全文本过滤
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文本关键词过滤接口, 用于检测文本中是否有违规的文本
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26549

        :param content: 待检测文本
        """
        return self._top_request(
            "alibaba.security.jaq.green.keyword.filter",
            {
                "content": content
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_ocr_image_async_detect_results_fetch(
            self,
            task_ids
    ):
        """
        聚安全获取异步图文识别结果接口
        获取异步图像字符识别结果接口根据图像检测接口返回taskid来获取对应图像的检测结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26550

        :param task_ids: 值为图像检测接口异步调用时返回的图片task_id
        """
        return self._top_request(
            "alibaba.security.jaq.ocr.image.async.detect.results.fetch",
            {
                "task_ids": task_ids
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_porn_image_sync_detect(
            self,
            image_url
    ):
        """
        聚安全智能鉴黄同步检测接口
        同步黄图图像检测接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26551

        :param image_url: 待检测图片链接
        """
        return self._top_request(
            "alibaba.security.jaq.porn.image.sync.detect",
            {
                "image_url": image_url
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_ocr_image_sync_detect(
            self,
            image_url
    ):
        """
        聚安全图文识别同步检测接口
        图像字符识别同步检测接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26553

        :param image_url: 待检测图像链接
        """
        return self._top_request(
            "alibaba.security.jaq.ocr.image.sync.detect",
            {
                "image_url": image_url
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_porn_image_async_detect_results_fetch(
            self,
            task_ids
    ):
        """
        聚安全获取异步智能鉴黄结果接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取异步黄图图像检测结果接口根据图像检测接口返回taskid来获取对应图像的检测结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26555

        :param task_ids: 值为图像检测接口异步调用时返回的图片task_id
        """
        return self._top_request(
            "alibaba.security.jaq.porn.image.async.detect.results.fetch",
            {
                "task_ids": task_ids
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_porn_image_async_detect(
            self,
            image_urls
    ):
        """
        聚安全智能鉴黄异步检测接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        异步黄图图像检测接口，不会实时返回图像检测结果，需要在1分钟后调用获取异步图像检测结果接口来获取最终检测结果，适合于图片量较大的用户来使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26557

        :param image_urls: 需要检测的图像URL，目前只支持http协议的图像URL。支持多张图像上传，最大支持50张图像。图片只支持静态图片格式如：PNG,JPG,JPEG,BMP，不支持GIF图片。
        """
        return self._top_request(
            "alibaba.security.jaq.porn.image.async.detect",
            {
                "image_urls": image_urls
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_resource_fetch(
            self,
            device_type,
            dpi,
            lang
    ):
        """
        获取资源文件
        在前向化验证流程中提供资源文件服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26579

        :param device_type: 设备类型可能值有：android ios wp
        :param dpi: 分辨率
        :param lang: 语言类型 zh_CN en_US
        """
        return self._top_request(
            "alibaba.security.jaq.resource.fetch",
            {
                "device_type": device_type,
                "dpi": dpi,
                "lang": lang
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_url_scan(
            self,
            param_url_scan_param_list
    ):
        """
        恶意网址检测接口
        url扫描接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26582

        :param param_url_scan_param_list: 扫描参数
        """
        return self._top_request(
            "alibaba.security.jaq.url.scan",
            {
                "param_url_scan_param_list": param_url_scan_param_list
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_captcha_send(
            self,
            captcha_type,
            protocol_version,
            utoken,
            info_token,
            extend_data='',
            rsign='',
            rtken_index=''
    ):
        """
        聚安全安全验证发起接口
        聚安全安全验证发起
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26590

        :param captcha_type: 验证码发送渠道类型 1-短信 3-邮件
        :param protocol_version: 协议版本号
        :param utoken: UMID token
        :param info_token: 风险识别接口返回的信息口令
        :param extend_data: 扩展字段，格式为JSON字符串，用于传递“滚小球”等验证方式所需的额外入参，例如屏幕尺寸等，请参考示例
        :param rsign: 软token签名
        :param rtken_index: 软token索引
        """
        return self._top_request(
            "alibaba.security.jaq.captcha.send",
            {
                "captcha_type": captcha_type,
                "protocol_version": protocol_version,
                "utoken": utoken,
                "info_token": info_token,
                "extend_data": extend_data,
                "rsign": rsign,
                "rtken_index": rtken_index
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_captcha_verify(
            self,
            captcha_type,
            protocol_version,
            session_id,
            utoken,
            info_token,
            extend_data='',
            rsign='',
            rtken_index=''
    ):
        """
        聚安全安全验证检查接口
        聚安全安全验证检查
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26591

        :param captcha_type: 验证码发送渠道类型 1-短信 2-语音 3-邮件
        :param protocol_version: 协议版本号
        :param session_id: 验证码会话ID
        :param utoken: UMID token
        :param info_token: 风险识别接口返回的信息口令
        :param extend_data: 扩展字段，格式为JSON字符串，用于传递“短信验证”等验证方式所需的额外入参，例如用户输入的验证码等，格式及JSON字段key定义请参考示例
        :param rsign: 软token签名
        :param rtken_index: 软token索引
        """
        return self._top_request(
            "alibaba.security.jaq.captcha.verify",
            {
                "captcha_type": captcha_type,
                "protocol_version": protocol_version,
                "session_id": session_id,
                "utoken": utoken,
                "info_token": info_token,
                "extend_data": extend_data,
                "rsign": rsign,
                "rtken_index": rtken_index
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_getverifytoken(
            self,
            source,
            biz,
            account_id='',
            ticket_id='',
            extra_data=''
    ):
        """
        聚安全实人认证获取认证会话token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26728

        :param source: 客户端来源
        :param biz: 业务点
        :param account_id: 账号，强烈建议填写，区别用户的唯一标识
        :param ticket_id: 选填，作为一次验证的唯一标识，每次验证需更换。如果不是验证类型可不填
        :param extra_data: 额外信息
        """
        return self._top_request(
            "alibaba.security.jaq.rp.getverifytoken",
            {
                "source": source,
                "biz": biz,
                "account_id": account_id,
                "ticket_id": ticket_id,
                "extra_data": extra_data
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_captcha_verify_result_fetch(
            self,
            session_id
    ):
        """
        聚安全安全验证检查结果获取接口
        获取二次验证的结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26741

        :param session_id: 二次验证获取验证检查结果所需的seesionId
        """
        return self._top_request(
            "alibaba.security.jaq.captcha.verify.result.fetch",
            {
                "session_id": session_id
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_fetchmaterial(
            self,
            security_key
    ):
        """
        聚安全实人认证获取结果接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26875

        :param security_key: 消息服务推送的key
        """
        return self._top_request(
            "alibaba.security.jaq.rp.fetchmaterial",
            {
                "security_key": security_key
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_upload(
            self,
            verify_token,
            elements
    ):
        """
        聚安全实人认证上传认证信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26876

        :param verify_token: 认证会话token
        :param elements: 此次需要上传的认证信息的列表
        """
        return self._top_request(
            "alibaba.security.jaq.rp.upload",
            {
                "verify_token": verify_token,
                "elements": elements
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_query(
            self,
            verify_token
    ):
        """
        聚安全实人认证查询认证结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26877

        :param verify_token: token
        """
        return self._top_request(
            "alibaba.security.jaq.rp.query",
            {
                "verify_token": verify_token
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_submit(
            self,
            verify_token
    ):
        """
        聚安全实人认证提交认证接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26878

        :param verify_token: 认证token
        """
        return self._top_request(
            "alibaba.security.jaq.rp.submit",
            {
                "verify_token": verify_token
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_ocr(
            self,
            verify_token,
            image_urls
    ):
        """
        聚安全实人认证证件OCR识别功能接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26879

        :param verify_token: token
        :param image_urls: 要识别的信息
        """
        return self._top_request(
            "alibaba.security.jaq.rp.ocr",
            {
                "verify_token": verify_token,
                "image_urls": image_urls
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_start(
            self,
            verify_token,
            client_info,
            extra_data=''
    ):
        """
        聚安全实人认证开始
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26880

        :param verify_token: token
        :param client_info: 客户端信息，如果是服务端接入，里面的参数可为空
        :param extra_data: 扩展信息
        """
        return self._top_request(
            "alibaba.security.jaq.rp.start",
            {
                "verify_token": verify_token,
                "client_info": client_info,
                "extra_data": extra_data
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_status(
            self,
            source,
            biz,
            account_id='',
            ticket_id=''
    ):
        """
        聚安全实人认证查询状态接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26881

        :param source: 客户端来源
        :param biz: 业务来源
        :param account_id: 账号id
        :param ticket_id: 凭据id
        """
        return self._top_request(
            "alibaba.security.jaq.rp.status",
            {
                "source": source,
                "biz": biz,
                "account_id": account_id,
                "ticket_id": ticket_id
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_logservice(
            self,
            content
    ):
        """
        聚安全-实人认证日志打点接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        聚安全实人认证日志打点接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27039

        :param content: xxx
        """
        return self._top_request(
            "alibaba.security.jaq.rp.logservice",
            {
                "content": content
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_afs_check(
            self,
            platform,
            token,
            session_id,
            sig,
            afs_key=''
    ):
        """
        反欺诈二次验证接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27312

        :param platform: 上报平台枚举值 1标识Android端 2标识iOS端 3标识PC端及其他
        :param token: token，来自客户端上报
        :param session_id: 会话ID，来自客户端上报
        :param sig: 签名串，来自客户端上报
        :param afs_key: 用户接入的时候获取的风控key
        """
        return self._top_request(
            "alibaba.security.jaq.afs.check",
            {
                "platform": platform,
                "token": token,
                "session_id": session_id,
                "sig": sig,
                "afs_key": afs_key
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_rphit(
            self,
            content=''
    ):
        """
        聚安全-实人认证日志打点接口
        聚安全实人认证日志打点接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27464

        :param content: xxx
        """
        return self._top_request(
            "alibaba.security.jaq.rp.rphit",
            {
                "content": content
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_app_shieldplus(
            self,
            app_info,
            channel=None,
            dex_enhace=None,
            so_enhance=None,
            obfuscate=None
    ):
        """
        聚安全应用加固接口
        加固高级接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27581

        :param app_info: 应用信息
        :param channel: 渠道列表,多渠道加固时填写
        :param dex_enhace: dex加固选项
        :param so_enhance: so加固选项
        :param obfuscate: 全量混淆配置选项
        """
        return self._top_request(
            "alibaba.security.jaq.app.shieldplus",
            {
                "app_info": app_info,
                "channel": channel,
                "dex_enhace": dex_enhace,
                "so_enhance": so_enhance,
                "obfuscate": obfuscate
            }
        )

    def alibaba_security_jaq_captcha_verify_result_fetch_intl(
            self,
            session_id
    ):
        """
        聚安全安全验证检查结果获取接口（国际版）
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        为国际版用户获取二次验证的结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27794

        :param session_id: 二次验证获取验证检查结果所需的seesionId
        """
        return self._top_request(
            "alibaba.security.jaq.captcha.verify.result.fetch.intl",
            {
                "session_id": session_id
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_realid_alipassport_getrpdepict(
            self,
            biz_code,
            channel_code,
            code_value
    ):
        """
        阿里通行证-查询实人属性
        codeValue查询实人属性
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28378

        :param biz_code: 业务名
        :param channel_code: 业务渠道名
        :param code_value: 条形码值
        """
        return self._top_request(
            "alibaba.security.jaq.realid.alipassport.getrpdepict",
            {
                "biz_code": biz_code,
                "channel_code": channel_code,
                "code_value": code_value
            }
        )

    def alibaba_security_jaq_app_official_verify(
            self,
            official_app_verify_request=None
    ):
        """
        聚安全验证官方应用接口
        接入用户来查询应用是否为官方应用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28413

        :param official_app_verify_request: 验证参数
        """
        return self._top_request(
            "alibaba.security.jaq.app.official.verify",
            {
                "official_app_verify_request": official_app_verify_request
            }
        )

    def alibaba_security_jaq_app_official_apply(
            self,
            official_app_apply_request=None
    ):
        """
        聚安全官方应用申请
        官方应用申请接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28414

        :param official_app_apply_request: 官方应用申请入参
        """
        return self._top_request(
            "alibaba.security.jaq.app.official.apply",
            {
                "official_app_apply_request": official_app_apply_request
            }
        )

    def alibaba_security_jaq_rp_remote_prepare(
            self,
            dev_name,
            prepare_param=None
    ):
        """
        终端-准备认证
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        用于向认证终端发起认证换取token，stsToken
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29857

        :param dev_name: 需要发起认证的设备名称
        :param prepare_param: 扩展参数
        """
        return self._top_request(
            "alibaba.security.jaq.rp.remote.prepare",
            {
                "dev_name": dev_name,
                "prepare_param": prepare_param
            }
        )

    def alibaba_security_jaq_rp_remote_startverify(
            self,
            verify_token,
            start_param=None
    ):
        """
        终端-开始认证
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        向认证终端发起认证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29858

        :param verify_token: token
        :param start_param: 扩展参数
        """
        return self._top_request(
            "alibaba.security.jaq.rp.remote.startverify",
            {
                "verify_token": verify_token,
                "start_param": start_param
            }
        )

    def alibaba_security_jaq_rp_cloud_status(
            self,
            source,
            biz,
            account_id='',
            ticket_id=''
    ):
        """
        实人认证云查询状态
        聚安全实人认证查询状态接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31244

        :param source: 客户端来源
        :param biz: 业务来源
        :param account_id: 账号id
        :param ticket_id: 凭据id
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.status",
            {
                "source": source,
                "biz": biz,
                "account_id": account_id,
                "ticket_id": ticket_id
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_cloud_rphit(
            self,
            content=''
    ):
        """
        实人认证云服务日志打点
        聚安全实人认证日志打点接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31245

        :param content: xxx
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.rphit",
            {
                "content": content
            }
        )

    def alibaba_security_jaq_rp_cloud_submit(
            self,
            verify_token
    ):
        """
        实人认证云服务提交接口
        聚安全实人认证提交认证接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31246

        :param verify_token: 认证token
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.submit",
            {
                "verify_token": verify_token
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_cloud_getverifytoken(
            self,
            source,
            biz,
            account_id='',
            ticket_id='',
            extra_data=''
    ):
        """
        实人认证云获取Token
        聚安全实人认证获取认证会话token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31247

        :param source: 客户端来源
        :param biz: 业务点
        :param account_id: 账号，强烈建议填写，区别用户的唯一标识
        :param ticket_id: 选填，作为一次验证的唯一标识，每次验证需更换。如果不是验证类型可不填
        :param extra_data: 额外信息
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.getverifytoken",
            {
                "source": source,
                "biz": biz,
                "account_id": account_id,
                "ticket_id": ticket_id,
                "extra_data": extra_data
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_cloud_start(
            self,
            verify_token,
            client_info,
            extra_data=''
    ):
        """
        实人认证云开始认证
        聚安全实人认证开始
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31248

        :param verify_token: token
        :param client_info: 客户端信息，如果是服务端接入，里面的参数可为空
        :param extra_data: 扩展信息
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.start",
            {
                "verify_token": verify_token,
                "client_info": client_info,
                "extra_data": extra_data
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_cloud_query(
            self,
            verify_token
    ):
        """
        实人认证云查询接口
        聚安全实人认证查询认证结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31249

        :param verify_token: token
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.query",
            {
                "verify_token": verify_token
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_cloud_ocr(
            self,
            verify_token,
            image_urls
    ):
        """
        实人认证云OCR
        聚安全实人认证证件OCR识别功能接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31250

        :param verify_token: token
        :param image_urls: 要识别的信息
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.ocr",
            {
                "verify_token": verify_token,
                "image_urls": image_urls
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_cloud_upload(
            self,
            verify_token,
            elements
    ):
        """
        实人认证云上传接口
        聚安全实人认证上传认证信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31251

        :param verify_token: 认证token
        :param elements: []
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.upload",
            {
                "verify_token": verify_token,
                "elements": elements
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_event(
            self,
            verify_token,
            event_code,
            event_data='null'
    ):
        """
        事件上报接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        事件上报
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32954

        :param verify_token: 认证token
        :param event_code: 事件编码
        :param event_data: 事件描述
        """
        return self._top_request(
            "alibaba.security.jaq.rp.event",
            {
                "verify_token": verify_token,
                "event_code": event_code,
                "event_data": event_data
            },
            result_processor=lambda x: x["verify_limited_flag"]
        )

    def alibaba_security_jaq_rp_cloud_event(
            self,
            verify_token,
            event_code,
            event_data=''
    ):
        """
        事件上报
        事件上报接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32966

        :param verify_token: 认证token
        :param event_code: 事件编码
        :param event_data: 事件信息
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.event",
            {
                "verify_token": verify_token,
                "event_code": event_code,
                "event_data": event_data
            },
            result_processor=lambda x: x["verify_limited_flag"]
        )

    def alibaba_security_jaq_rp_cloud_realname_check(
            self,
            verify_token,
            image_urls,
            name='',
            identity_code=''
    ):
        """
        验证姓名和证件号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33927

        :param verify_token: token
        :param image_urls: 要识别的信息
        :param name: 姓名
        :param identity_code: 证件号
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.realname.check",
            {
                "verify_token": verify_token,
                "image_urls": image_urls,
                "name": name,
                "identity_code": identity_code
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_cloud_ocr_check(
            self,
            verify_token,
            image_urls
    ):
        """
        ocr同时实名校验
        聚安全实人认证证件OCR识别功能接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33928

        :param verify_token: token
        :param image_urls: 要识别的信息
        """
        return self._top_request(
            "alibaba.security.jaq.rp.cloud.ocr.check",
            {
                "verify_token": verify_token,
                "image_urls": image_urls
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_ocr_check(
            self,
            verify_token,
            image_urls
    ):
        """
        ocr同时实名校验
        聚安全实人认证证件OCR识别功能接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33929

        :param verify_token: token
        :param image_urls: 要识别的信息
        """
        return self._top_request(
            "alibaba.security.jaq.rp.ocr.check",
            {
                "verify_token": verify_token,
                "image_urls": image_urls
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_realname_check(
            self,
            verify_token,
            image_urls,
            name='',
            identity_code=''
    ):
        """
        实名校验接口
        验证姓名和证件号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33935

        :param verify_token: token
        :param image_urls: 要识别的信息
        :param name: 姓名
        :param identity_code: 证件号
        """
        return self._top_request(
            "alibaba.security.jaq.rp.realname.check",
            {
                "verify_token": verify_token,
                "image_urls": image_urls,
                "name": name,
                "identity_code": identity_code
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_security_jaq_rp_getcreditinfo(
            self,
            card_number,
            name,
            source,
            biz,
            card_type='identityCard'
    ):
        """
        风险模型数据接口
        获取用户的风险模型数据，返回用户是否命中业务方关注的风险标签等信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38768

        :param card_number: 身份证号
        :param name: 姓名
        :param source: 业务来源
        :param biz: 业务点
        :param card_type: 证件类型
        """
        return self._top_request(
            "alibaba.security.jaq.rp.getcreditinfo",
            {
                "card_number": card_number,
                "name": name,
                "source": source,
                "biz": biz,
                "card_type": card_type
            }
        )


class TbMiaoJie(DingTalkBaseAPI):
    """
    喵街API
    """

    def alibaba_mj_oc_writesaleslip(
            self,
            pos_sale_order
    ):
        """
        开票占库
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29540

        :param pos_sale_order: 开票占库入参
        """
        return self._top_request(
            "alibaba.mj.oc.writesaleslip",
            {
                "pos_sale_order": pos_sale_order
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_mj_oc_getproductbyscancode(
            self,
            code,
            code_type,
            shop_code,
            store_code
    ):
        """
        POS商品查询接口
        此API用于在银泰商场中，POS端扫码获取商品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29541

        :param code: 码, 对应的信息可能是款号，也有可能是具体的某一个商品
        :param code_type: 条码/二维码/rfid(电子标签),货号、条码、零售+唯一码;ARTNO、BARCODE、UNIQUECODE
        :param shop_code: 专柜编码
        :param store_code: 门店编码
        """
        return self._top_request(
            "alibaba.mj.oc.getproductbyscancode",
            {
                "code": code,
                "code_type": code_type,
                "shop_code": shop_code,
                "store_code": store_code
            },
            result_processor=lambda x: x["product_list"]
        )

    def alibaba_mj_oc_precreateorder(
            self,
            pos_order
    ):
        """
        POS预下单
        此API用于在银泰商场中，消费者在收银台收银时， POS系统调用此接口进行预下单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29542

        :param pos_order: 预下单订单数据
        """
        return self._top_request(
            "alibaba.mj.oc.precreateorder",
            {
                "pos_order": pos_order
            },
            result_processor=lambda x: x["trade_no"]
        )

    def alibaba_mj_oc_cancelorder(
            self,
            mall_no,
            trade_no
    ):
        """
        POS取消订单API
        此API用于在银泰商场中，消费者欲取消订单，收银员在POS机上操作，调用此接口取消订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29543

        :param mall_no: 门店号
        :param trade_no: OC交易流水号
        """
        return self._top_request(
            "alibaba.mj.oc.cancelorder",
            {
                "mall_no": mall_no,
                "trade_no": trade_no
            }
        )

    def alibaba_mj_oc_pay(
            self,
            pos_order
    ):
        """
        POS收银成功后订单同步
        此API用于在银泰商场中，消费者在收银台收银/退款时， POS系统在收银或退款成功后，调用此接口进行订单同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29544

        :param pos_order: 订单数据
        """
        return self._top_request(
            "alibaba.mj.oc.pay",
            {
                "pos_order": pos_order
            }
        )

    def alibaba_mj_oc_confpickupgoods(
            self,
            conf_pickup_goods_request=None
    ):
        """
        提货核销
        此API用于在银泰商场中，消费者在提货中心提货时， 商户后台调用此接口进行提货核销操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29566

        :param conf_pickup_goods_request: 提货核销请求参数
        """
        return self._top_request(
            "alibaba.mj.oc.confpickupgoods",
            {
                "conf_pickup_goods_request": conf_pickup_goods_request
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_mj_oc_insertnonstandardsku(
            self,
            data_json
    ):
        """
        非一品一码商品单条录入
        此API用于在银泰商场中，非一品一码商品单条录入
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29806

        :param data_json: 录入商品
        """
        return self._top_request(
            "alibaba.mj.oc.insertnonstandardsku",
            {
                "data_json": data_json
            },
            result_processor=lambda x: x["result_data"]
        )

    def alibaba_mj_oc_updatenonstandardsku(
            self,
            data_json
    ):
        """
        非一品一码商品更新
        用于银泰商场中，非一品一码的商品信息更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29807

        :param data_json: 更新商品
        """
        return self._top_request(
            "alibaba.mj.oc.updatenonstandardsku",
            {
                "data_json": data_json
            },
            result_processor=lambda x: x["result_data"]
        )

    def alibaba_mj_oc_calldispatcher(
            self,
            call_dispatcher_d_t_o=None
    ):
        """
        呼叫运力
        定时达呼叫运力接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30615

        :param call_dispatcher_d_t_o: 入参
        """
        return self._top_request(
            "alibaba.mj.oc.calldispatcher",
            {
                "call_dispatcher_d_t_o": call_dispatcher_d_t_o
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_mj_presale_settlement_addlist(
            self,
            pre_sale_refund_json='[{}]'
    ):
        """
        预售结算数据回传
        用于预售活动结算数据的回传。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31983

        :param pre_sale_refund_json: 订单json格式数据
        """
        return self._top_request(
            "alibaba.mj.presale.settlement.addlist",
            {
                "pre_sale_refund_json": pre_sale_refund_json
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_mj_oc_outbound(
            self,
            goods_outbound
    ):
        """
        零售商品发货
        用于接收发货的数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32103

        :param goods_outbound: 发货信息
        """
        return self._top_request(
            "alibaba.mj.oc.outbound",
            {
                "goods_outbound": goods_outbound
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_mj_presale_settlement_statistics(
            self,
            action_no,
            store_no
    ):
        """
        预购结算数据统计
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32122

        :param action_no: 活动期号
        :param store_no: 外部门店编码
        """
        return self._top_request(
            "alibaba.mj.presale.settlement.statistics",
            {
                "action_no": action_no,
                "store_no": store_no
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_mos_pos_alarm(
            self,
            param0
    ):
        """
        pos故障报警
        故障报警
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34063

        :param param0: 参数
        """
        return self._top_request(
            "alibaba.mos.pos.alarm",
            {
                "param0": param0
            }
        )

    def alibaba_mos_store_getstorelist(
            self,
            screen_no
    ):
        """
        根据屏编号获取专柜集
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35532

        :param screen_no: 屏编号
        """
        return self._top_request(
            "alibaba.mos.store.getstorelist",
            {
                "screen_no": screen_no
            }
        )

    def alibaba_mos_store_getitems(
            self,
            store_id,
            start,
            limit_count,
            screen_no
    ):
        """
        获取屏和专柜的商品列表接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35533

        :param store_id: 专柜id
        :param start: 分页查询开始index
        :param limit_count: 分页查询每页记录数
        :param screen_no: 屏编号
        """
        return self._top_request(
            "alibaba.mos.store.getitems",
            {
                "store_id": store_id,
                "start": start,
                "limit_count": limit_count,
                "screen_no": screen_no
            }
        )

    def alibaba_mos_item_getdetail(
            self,
            item_id
    ):
        """
        按商品id获取商品详情
        根据商品id获取商品详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35534

        :param item_id: 商品id
        """
        return self._top_request(
            "alibaba.mos.item.getdetail",
            {
                "item_id": item_id
            }
        )

    def alibaba_mos_store_getdefautitems(
            self,
            screen_no,
            start,
            limit_count
    ):
        """
        获取默认状态下商品列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35535

        :param screen_no: 屏编号
        :param start: 分页查询开始index
        :param limit_count: 分页查询每页记录数
        """
        return self._top_request(
            "alibaba.mos.store.getdefautitems",
            {
                "screen_no": screen_no,
                "start": start,
                "limit_count": limit_count
            }
        )

    def alibaba_mos_store_getcloudshelfversion(
            self,
            screen_no
    ):
        """
        获取云货架版本信息
        根据屏编号获取云货架版本信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35536

        :param screen_no: 屏编号
        """
        return self._top_request(
            "alibaba.mos.store.getcloudshelfversion",
            {
                "screen_no": screen_no
            }
        )

    def alibaba_mos_store_getitemsrecommended(
            self,
            item_id,
            screen_no
    ):
        """
        根据商品id获取推荐商品列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35537

        :param item_id: 商品id
        :param screen_no: 屏编号
        """
        return self._top_request(
            "alibaba.mos.store.getitemsrecommended",
            {
                "item_id": item_id,
                "screen_no": screen_no
            }
        )

    def alibaba_mos_store_checkcartsku(
            self,
            sku_list
    ):
        """
        云货架校验购物车sku信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        校验购物车sku库存、上下架信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35538

        :param sku_list: 购物车sku列表
        """
        return self._top_request(
            "alibaba.mos.store.checkcartsku",
            {
                "sku_list": sku_list
            }
        )

    def alibaba_mos_store_recordscreenpointinfo(
            self,
            screen_point_info
    ):
        """
        云屏埋点数据记录接口
        记录云屏埋点数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35756

        :param screen_point_info: 云屏埋点信息
        """
        return self._top_request(
            "alibaba.mos.store.recordscreenpointinfo",
            {
                "screen_point_info": screen_point_info
            }
        )

    def alibaba_mj_mos_fund_createbill(
            self,
            bill_dto=None
    ):
        """
        创建一个付款单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37345

        :param bill_dto: 创建付款单入参
        """
        return self._top_request(
            "alibaba.mj.mos.fund.createbill",
            {
                "bill_dto": bill_dto
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_mj_mos_fund_modifybillbankaccount(
            self,
            modify_dto=None
    ):
        """
        修改付款单的银行账户信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37346

        :param modify_dto: 修改入参
        """
        return self._top_request(
            "alibaba.mj.mos.fund.modifybillbankaccount",
            {
                "modify_dto": modify_dto
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_mj_mos_fund_cancelbill(
            self,
            cancel_bill_d_t_o=None
    ):
        """
        取消付款单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37347

        :param cancel_bill_d_t_o: 取消入参
        """
        return self._top_request(
            "alibaba.mj.mos.fund.cancelbill",
            {
                "cancel_bill_d_t_o": cancel_bill_d_t_o
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_mos_onsite_trade_query(
            self,
            store_id_type,
            store_id,
            trade_no='',
            out_trade_no=''
    ):
        """
        新商场当面付交易查询
        本接口提供新商场当面付订单的查询的功能，商户可以通过本接口主动查询订单状态，完成下一步的业务逻辑。
        商户系统应在两种场景下调用此接口: 商户POS系统应该在调用[条码支付请求接口]并成功返回后，调用此接口查询订单的处理状态。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37377

        :param store_id_type: 商户ID类型，取值为miaojie或out
        :param store_id: 门店号或喵街商户ID
        :param trade_no: 喵街交易流水号。与商户支付流水号两者至少要填写一个。如果均有，优先级为喵街交易流水号  > 商户支付流水号。
        :param out_trade_no: 原支付请求的商户支付流水号。与喵街交易流水号两者至少要填写一个。如果均有，优先级为喵街交易流水号 >  商户支付流水号。
        """
        return self._top_request(
            "alibaba.mos.onsite.trade.query",
            {
                "store_id_type": store_id_type,
                "store_id": store_id,
                "trade_no": trade_no,
                "out_trade_no": out_trade_no
            },
            result_processor=lambda x: x["onsite_trade_query_response"]
        )

    def alibaba_mos_onsite_trade_pay(
            self,
            onsite_trade_pay_request
    ):
        """
        新商场当面付商户扫码付
        收银员使用扫码设备读取用户“付款码”后，将二维码或条码信息通过本接口上送至喵街发起支付。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37378

        :param onsite_trade_pay_request: 创建订单请求参数
        """
        return self._top_request(
            "alibaba.mos.onsite.trade.pay",
            {
                "onsite_trade_pay_request": onsite_trade_pay_request
            },
            result_processor=lambda x: x["onsite_trade_pay_response"]
        )

    def alibaba_mos_onsite_trade_close(
            self,
            trade_no='',
            out_trade_no='',
            out_operator_id='',
            store_id_type='',
            store_id=''
    ):
        """
        关闭 未支付的新商场当面付交易
        在收银过程中，如果未完成支付， 收银员点击POS上的“关闭订单”按钮时，商户POS调用此接口关闭交易。
        如果消费者尚未支付或支付失败，喵街会将此订单关闭；如果已完成支付，则关闭失败，并提示已支付
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37379

        :param trade_no: 喵街交易流水号。与商户支付流水号二者至少要填写一个，如果二者均有，默认使用喵街交易流水号
        :param out_trade_no: 商户支付流水号。与喵街交易流水号二者至少要填写一个，如果二者均有，默认使用喵街交易流水号
        :param out_operator_id: 操作员号
        :param store_id_type: 商户ID类型，取值miaojie或out
        :param store_id: 门店号
        """
        return self._top_request(
            "alibaba.mos.onsite.trade.close",
            {
                "trade_no": trade_no,
                "out_trade_no": out_trade_no,
                "out_operator_id": out_operator_id,
                "store_id_type": store_id_type,
                "store_id": store_id
            },
            result_processor=lambda x: x["onsite_trade_cancel_response"]
        )

    def alibaba_mos_onsite_trade_isnewpayorder(
            self,
            out_trade_no
    ):
        """
        是否为新支付订单
        退款时，老支付宝手淘退款接口需要查一下该订单是否为新支付订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37386

        :param out_trade_no: 外部订单号
        """
        return self._top_request(
            "alibaba.mos.onsite.trade.isnewpayorder",
            {
                "out_trade_no": out_trade_no
            }
        )

    def alibaba_mos_onsite_trade_queryrefund(
            self,
            out_request_no,
            order_no=''
    ):
        """
        退款查询
        商户可使用该接口查询退款请求是否执行成功。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37387

        :param out_request_no: 退款外部流水号
        :param order_no: 订单号。可能为外部订单号，也可能为喵街订单号
        """
        return self._top_request(
            "alibaba.mos.onsite.trade.queryrefund",
            {
                "out_request_no": out_request_no,
                "order_no": order_no
            }
        )

    def alibaba_mos_onsite_trade_refund(
            self,
            onsite_refund_request
    ):
        """
        退款
        当交易发生之后一段时间内，由于消费者或者商户的原因需退款，商户可通过退款接口将支付款退还给消费者，喵街将在收到退款请求并验证成功后，按退款规则将支付款按原路退到消费者账号上。
        1. 交易超过可退款时间（签约时设置的可退款时间）的订单无法进行退款。
        2. 只支持全额退款。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37389

        :param onsite_refund_request: 交易退款请求
        """
        return self._top_request(
            "alibaba.mos.onsite.trade.refund",
            {
                "onsite_refund_request": onsite_refund_request
            }
        )

    def alibaba_mos_onsite_trade_oldrefund(
            self,
            onsite_refund_request
    ):
        """
        线下新退款接口（专为老退款接口调用）
        线下新退款接口（专为老退款接口调用）。新接口支付支付宝、手淘、天猫，老接口退款时，需要调用该接口退新单，并适配老接口响应参数返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37464

        :param onsite_refund_request: 交易退款请求
        """
        return self._top_request(
            "alibaba.mos.onsite.trade.oldrefund",
            {
                "onsite_refund_request": onsite_refund_request
            }
        )

    def alibaba_mosflow_work_startprocess(
            self,
            variables='',
            parameter_entity=None
    ):
        """
        发起流程
        业务发起流程审批
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37566

        :param variables: 参数二:额外业务参数,Map的JSON串
        :param parameter_entity: 流程必传参数
        """
        return self._top_request(
            "alibaba.mosflow.work.startprocess",
            {
                "variables": variables,
                "parameter_entity": parameter_entity
            }
        )

    def alibaba_mj_oc_syncpayinfo(
            self,
            pos_pay
    ):
        """
        支付参考号回传
        支付参考号同步到oc
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37805

        :param pos_pay: 支付参考号信息
        """
        return self._top_request(
            "alibaba.mj.oc.syncpayinfo",
            {
                "pos_pay": pos_pay
            }
        )

    def alibaba_mosflow_work_queryvariables(
            self,
            process_instance_id
    ):
        """
        获取指定流程上下文参数
        业务查询指定流程上下文内容
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37913

        :param process_instance_id: 流程实例ID
        """
        return self._top_request(
            "alibaba.mosflow.work.queryvariables",
            {
                "process_instance_id": process_instance_id
            }
        )

    def alibaba_mosflow_work_deleteprocess(
            self,
            process_instance_ids
    ):
        """
        删除指定流程
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        业务删除流程
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38019

        :param process_instance_ids: 流程实例ID
        """
        return self._top_request(
            "alibaba.mosflow.work.deleteprocess",
            {
                "process_instance_ids": process_instance_ids
            }
        )

    def alibaba_mos_oc_trade_syncbanksale(
            self,
            pos_bank_sale_info_dto
    ):
        """
        云闪付、银行卡销售数据回传接口
        云闪付、银行卡销售数据回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38578

        :param pos_bank_sale_info_dto: pos云闪付、银行卡销售数据
        """
        return self._top_request(
            "alibaba.mos.oc.trade.syncbanksale",
            {
                "pos_bank_sale_info_dto": pos_bank_sale_info_dto
            }
        )

    def alibaba_mos_rp_cfmintercepted(
            self,
            param0
    ):
        """
        商品物流拦截确认、取消拦截确认接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39978

        :param param0: 拦截确认、取消拦截DTO
        """
        return self._top_request(
            "alibaba.mos.rp.cfmintercepted",
            {
                "param0": param0
            }
        )

    def alibaba_mos_ark_trade_close(
            self,
            onsite_trade_cancel_request=None
    ):
        """
        小环境支付取消关闭
        在收银过程中，如果未完成支付， 收银员点击POS上的“关闭订单”按钮时，商户POS调用此接口关闭交易。
        如果消费者尚未支付或支付失败，喵街会将此订单关闭；如果已完成支付，则关闭失败，并提示已支付
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40360

        :param onsite_trade_cancel_request: 系统自动生成
        """
        return self._top_request(
            "alibaba.mos.ark.trade.close",
            {
                "onsite_trade_cancel_request": onsite_trade_cancel_request
            }
        )

    def alibaba_mos_ark_trade_pay(
            self,
            onsite_trade_pay_request
    ):
        """
        离线小环境支付接口
        收银员使用扫码设备读取用户“付款码”后，将二维码或条码信息通过本接口上送至喵街发起支付。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40361

        :param onsite_trade_pay_request: 创建订单请求参数
        """
        return self._top_request(
            "alibaba.mos.ark.trade.pay",
            {
                "onsite_trade_pay_request": onsite_trade_pay_request
            },
            result_processor=lambda x: x["onsite_trade_pay_response"]
        )

    def alibaba_mos_ark_trade_query(
            self,
            store_id_type,
            store_id,
            trade_no='',
            out_trade_no=''
    ):
        """
        小环境支付查询
        本接口提供新商场当面付订单的查询的功能，商户可以通过本接口主动查询订单状态，完成下一步的业务逻辑。
        商户系统应在两种场景下调用此接口: 商户POS系统应该在调用[条码支付请求接口]并成功返回后，调用此接口查询订单的处理状态。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40391

        :param store_id_type: 商户ID类型，取值为miaojie或out
        :param store_id: 门店号或喵街商户ID
        :param trade_no: 喵街交易流水号。与商户支付流水号两者至少要填写一个。如果均有，优先级为喵街交易流水号  > 商户支付流水号。
        :param out_trade_no: 原支付请求的商户支付流水号。与喵街交易流水号两者至少要填写一个。如果均有，优先级为喵街交易流水号 >  商户支付流水号。
        """
        return self._top_request(
            "alibaba.mos.ark.trade.query",
            {
                "store_id_type": store_id_type,
                "store_id": store_id,
                "trade_no": trade_no,
                "out_trade_no": out_trade_no
            },
            result_processor=lambda x: x["onsite_trade_query_response"]
        )

    def alibaba_mos_ark_health_offline_level_get(
            self,
            mall_id=''
    ):
        """
        获取mall的离线等级
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40474

        :param mall_id: 商场id
        """
        return self._top_request(
            "alibaba.mos.ark.health.offline.level.get",
            {
                "mall_id": mall_id
            }
        )

    def alibaba_mj_oc_offline_maxticketno_get(
            self,
            pos_no='',
            store_no='',
            datetime=''
    ):
        """
        pos机获取线下最大小票号
        给pos机提供线下最大小票号查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41601

        :param pos_no: 收银机号
        :param store_no: 外部门店号
        :param datetime: 日期
        """
        return self._top_request(
            "alibaba.mj.oc.offline.maxticketno.get",
            {
                "pos_no": pos_no,
                "store_no": store_no,
                "datetime": datetime
            }
        )

    def alibaba_mos_orderqs_misbigpos_order_query(
            self,
            store_no='',
            query_base_data='false',
            receipt_no='',
            query_coupon_extern='false'
    ):
        """
        大pos新选单退
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41910

        :param store_no: 外部门店号
        :param query_base_data: 基本信息获取参数
        :param receipt_no: 小票号
        :param query_coupon_extern: 券扩展数据获取
        """
        return self._top_request(
            "alibaba.mos.orderqs.misbigpos.order.query",
            {
                "store_no": store_no,
                "query_base_data": query_base_data,
                "receipt_no": receipt_no,
                "query_coupon_extern": query_coupon_extern
            }
        )

    def alibaba_mj_oc_online_ticketno_get(
            self,
            out_store_no=''
    ):
        """
        线上小票号获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41912

        :param out_store_no: 外部门店号
        """
        return self._top_request(
            "alibaba.mj.oc.online.ticketno.get",
            {
                "out_store_no": out_store_no
            }
        )

    def alibaba_mj_oc_bigpos_banksale_adjustment_apply(
            self,
            store_no='',
            amount='0',
            card_no='',
            oper_time='',
            operator='',
            pos_no=''
    ):
        """
        大pos银行卡调账申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42759

        :param store_no: 门店号
        :param amount: 调账金额
        :param card_no: 卡号
        :param oper_time: 交易时间
        :param operator: 收银员号
        :param pos_no: 调账收银机号
        """
        return self._top_request(
            "alibaba.mj.oc.bigpos.banksale.adjustment.apply",
            {
                "store_no": store_no,
                "amount": amount,
                "card_no": card_no,
                "oper_time": oper_time,
                "operator": operator,
                "pos_no": pos_no
            }
        )

    def alibaba_mj_oc_bigpos_banksale_query(
            self,
            start_time='',
            card_no='',
            out_store_no='',
            end_time=''
    ):
        """
        大pos银行卡查账接口
        大pos银行卡查账接口，给收银员查询银行卡销售记录，便于调账
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42791

        :param start_time: 开始时间
        :param card_no: 卡号
        :param out_store_no: 外部门店号
        :param end_time: 结束时间
        """
        return self._top_request(
            "alibaba.mj.oc.bigpos.banksale.query",
            {
                "start_time": start_time,
                "card_no": card_no,
                "out_store_no": out_store_no,
                "end_time": end_time
            }
        )

    def alibaba_mos_finance_bankinfo_querybank(
            self,
            supplier_id='',
            store_no='',
            company_id=''
    ):
        """
        供应商银行账号查询
        查询供应商对应的银行账号信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43618

        :param supplier_id: 供应商id
        :param store_no: 门店号
        :param company_id: 签约主体id
        """
        return self._top_request(
            "alibaba.mos.finance.bankinfo.querybank",
            {
                "supplier_id": supplier_id,
                "store_no": store_no,
                "company_id": company_id
            }
        )


class TbCaiNiaoPeiSong(DingTalkBaseAPI):
    """
    菜鸟配送API
    """

    def cainiao_cntms_mailno_get(
            self,
            content=None
    ):
        """
        获取菜鸟配送面单号
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        打印面单时，通过此接口获取面单号及打打印信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25658

        :param content: 获取菜鸟配送电子面单请求参数
        """
        return self._top_request(
            "cainiao.cntms.mailno.get",
            {
                "content": content
            }
        )

    def cainiao_cntms_logistics_order_consign(
            self,
            content=None
    ):
        """
        菜鸟配商家仓库发货
        商家包装打印面单结束后，通知菜鸟包裹要发货（不要下线）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25659

        :param content: 配送发货信息
        """
        return self._top_request(
            "cainiao.cntms.logistics.order.consign",
            {
                "content": content
            },
            result_processor=lambda x: x["logistics_order_code"]
        )


class TbCaiNiaoCangPei(DingTalkBaseAPI):
    """
    菜鸟仓配API
    """

    def taobao_wlb_wms_stock_in_order_notify(
            self,
            store_code,
            order_code,
            order_type,
            order_create_time,
            order_item_list,
            inbound_type_desc='',
            order_flag='',
            supplier_code='',
            supplier_name='',
            tms_service_code='',
            tms_service_name='',
            tms_order_code='',
            prev_order_code='',
            return_reason='',
            expect_start_time='',
            expect_end_time='',
            receiver_info=None,
            sender_info=None,
            extend_fields='',
            remark=''
    ):
        """
        入库通知单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24483

        :param store_code: 仓库编码
        :param order_code: 入库单据编码
        :param order_type: 单据类型 601普通入库单、501销退入库单、302 调拨入库单、904其他入库单、306 B2B入库
        :param order_create_time: 单据创建时间
        :param order_item_list: 系统自动生成
        :param inbound_type_desc: 可选择性文本透传至WMS，比如加工归还、委外归还、借出归还、内部归还等
        :param order_flag: 订单标记以逗号分隔：  9:上门退货入库 13: 退货时是否收取发票，默认不收取（即没13为多选项，如1,2,8,9）
        :param supplier_code: 供应商编码，往来单位编码
        :param supplier_name: 供应商名称 ，往来单位名称
        :param tms_service_code: 配送公司编码，拒收（非妥投）的销退订单，由ERP填充原单配送公司编码
        :param tms_service_name: 快递公司名称
        :param tms_order_code: 运单号&托运单号 1)	入库单支持多运单号录入 2)	销退场景下如果是拒收（非妥投运单）由ERP填充原运单号
        :param prev_order_code: 来源单据号，如销售退货时填充原销售订单号
        :param return_reason: 销退时请提供退货的原因
        :param expect_start_time: 预期送达开始时间
        :param expect_end_time: 预期送达结束时间
        :param receiver_info: 系统自动生成
        :param sender_info: 系统自动生成
        :param extend_fields: 扩展属性, key-value结构，格式要求： 以英文分号“;”分隔每组key-value，以英文冒号“:”分隔key与value。如果value中带有分号，需要转成下划线“_”，如果带有冒号，需要转成中划线“-”
        :param remark: 备注，销退入库订单需要留言备注填充到此字段
        """
        return self._top_request(
            "taobao.wlb.wms.stock.in.order.notify",
            {
                "store_code": store_code,
                "order_code": order_code,
                "order_type": order_type,
                "order_create_time": order_create_time,
                "order_item_list": order_item_list,
                "inbound_type_desc": inbound_type_desc,
                "order_flag": order_flag,
                "supplier_code": supplier_code,
                "supplier_name": supplier_name,
                "tms_service_code": tms_service_code,
                "tms_service_name": tms_service_name,
                "tms_order_code": tms_order_code,
                "prev_order_code": prev_order_code,
                "return_reason": return_reason,
                "expect_start_time": expect_start_time,
                "expect_end_time": expect_end_time,
                "receiver_info": receiver_info,
                "sender_info": sender_info,
                "extend_fields": extend_fields,
                "remark": remark
            }
        )

    def taobao_wlb_wms_stock_out_order_notify(
            self,
            store_code,
            order_code,
            order_type,
            order_create_time,
            outbound_type_desc='',
            send_time='',
            receiver_info=None,
            sender_info=None,
            transport_mode='',
            carriers_name='',
            pick_name='',
            pick_call='',
            pick_id='',
            car_no='',
            order_item_list=None,
            remark='',
            prev_order_code='',
            extend_fields=''
    ):
        """
        出库单通知
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24553

        :param store_code: 仓储编码
        :param order_code: ERP单据ID
        :param order_type: 单据类型 301 调拨出库单、901普通出库单、903 其他出库单 305 B2B出库
        :param order_create_time: 订单创建时间
        :param outbound_type_desc: ERP可选择性文本透传至WMS
        :param send_time: 要求出库日期
        :param receiver_info: 收件人信息
        :param sender_info: 发货方信息
        :param transport_mode: 出库方式
        :param carriers_name: 承运商名称
        :param pick_name: 取件人姓名
        :param pick_call: 取件人电话
        :param pick_id: 取件人身份证ID
        :param car_no: 车牌号
        :param order_item_list: 订单商品信息列表
        :param remark: 备注
        :param prev_order_code: 前物流订单号，如退货入库单可能会用到
        :param extend_fields: 拓展属性
        """
        return self._top_request(
            "taobao.wlb.wms.stock.out.order.notify",
            {
                "store_code": store_code,
                "order_code": order_code,
                "order_type": order_type,
                "order_create_time": order_create_time,
                "outbound_type_desc": outbound_type_desc,
                "send_time": send_time,
                "receiver_info": receiver_info,
                "sender_info": sender_info,
                "transport_mode": transport_mode,
                "carriers_name": carriers_name,
                "pick_name": pick_name,
                "pick_call": pick_call,
                "pick_id": pick_id,
                "car_no": car_no,
                "order_item_list": order_item_list,
                "remark": remark,
                "prev_order_code": prev_order_code,
                "extend_fields": extend_fields
            }
        )

    def taobao_wlb_wms_consign_order_notify(
            self,
            order_code,
            order_type,
            order_flag='',
            order_source='',
            store_code='',
            tms_service_code='',
            tms_service_name='',
            prev_order_code='',
            order_shop_create_time='',
            order_pay_time='',
            order_create_time='',
            order_examination_time='',
            order_amount='',
            discount_amount='',
            ar_amount='',
            got_amount='',
            postfee='',
            service_fee='',
            deliver_requirements=None,
            receiver_info=None,
            sender_info=None,
            order_item_list=None,
            invoice_info_list=None,
            extend_fields='',
            remark=''
    ):
        """
        发货订单通知
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24554

        :param order_code: ERP订单号
        :param order_type: 单据类型 201 一般交易出库单 202 B2B交易出库单 502 换货出库单 503 补发出库单
        :param order_flag: 订单标识 (1: cod –货到付款，4:invoiceinfo-需要发票)
        :param order_source: 订单来源（213 天猫，201 淘宝，214 京东，202 1688 阿里中文站 ，203 苏宁在线，204 亚马逊中国，205 当当，208 1号店，207 唯品会，209 国美在线，210 拍拍，206 易贝ebay，211 聚美优品，212 乐蜂网，215 邮乐，216 凡客，217 优购，218 银泰，219 易讯，221 聚尚网，222 蘑菇街，223 POS门店，301 其他）
        :param store_code: 仓库编码，此字段为空时，由菜鸟路由仓库发货
        :param tms_service_code: 快递公司编码，此字段为空时，由菜鸟选择快递配送
        :param tms_service_name: 快递公司名称
        :param prev_order_code: 前物流订单号，订单类型为502 换货出库单 503 补发出库单时，需求传入此内容
        :param order_shop_create_time: 下单时间，订单在交易平台创建时间
        :param order_pay_time: 订单支付时间
        :param order_create_time: 订单创建时间,ERP创建订单时间
        :param order_examination_time: 订单审核时间,ERP创建支付时间
        :param order_amount: 订单总金额,=总商品金额-订单优惠金额+快递费用，单位分
        :param discount_amount: 订单优惠金额，整单优惠金额，单位分
        :param ar_amount: 订单应收金额，消费者还需要付的金额，单位分
        :param got_amount: 订单已付金额，消费者已经支付的金额，单位分
        :param postfee: 快递费用，单位分
        :param service_fee: COD服务费，单位分
        :param deliver_requirements: 配送要求
        :param receiver_info: 收件人信息
        :param sender_info: 发货方信息
        :param order_item_list: 订单商品信息列表
        :param invoice_info_list: 发票信息列表
        :param extend_fields: 拓展属性
        :param remark: 备注
        """
        return self._top_request(
            "taobao.wlb.wms.consign.order.notify",
            {
                "order_code": order_code,
                "order_type": order_type,
                "order_flag": order_flag,
                "order_source": order_source,
                "store_code": store_code,
                "tms_service_code": tms_service_code,
                "tms_service_name": tms_service_name,
                "prev_order_code": prev_order_code,
                "order_shop_create_time": order_shop_create_time,
                "order_pay_time": order_pay_time,
                "order_create_time": order_create_time,
                "order_examination_time": order_examination_time,
                "order_amount": order_amount,
                "discount_amount": discount_amount,
                "ar_amount": ar_amount,
                "got_amount": got_amount,
                "postfee": postfee,
                "service_fee": service_fee,
                "deliver_requirements": deliver_requirements,
                "receiver_info": receiver_info,
                "sender_info": sender_info,
                "order_item_list": order_item_list,
                "invoice_info_list": invoice_info_list,
                "extend_fields": extend_fields,
                "remark": remark
            }
        )

    def taobao_wlb_wms_order_cancel_notify(
            self,
            order_code,
            store_code,
            order_type
    ):
        """
        单据取消接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24555

        :param order_code: 订单类型
        :param store_code: 仓库编码
        :param order_type: 单据类型 601普通入库单、501销退入库单、302 调拨入库单、904其他入库单、301 调拨出库单、901普通出库单、903 其他出库单、201 一般交易出库单 202 B2B交易出库单 502 换货出库单 503 补发出库单、1102 仓内加工作业单、 701 盘亏单、702盘盈单、711 库存状态调整单
        """
        return self._top_request(
            "taobao.wlb.wms.order.cancel.notify",
            {
                "order_code": order_code,
                "store_code": store_code,
                "order_type": order_type
            }
        )

    def taobao_wlb_wms_sku_create(
            self,
            item_code,
            name,
            type,
            use_yn,
            bar_code='',
            store_code='',
            title='',
            category='',
            category_name='',
            brand='',
            brand_name='',
            specification='',
            color='',
            size='',
            gross_weight='',
            net_weight='',
            length='',
            width='',
            height='',
            volume='',
            pcs='',
            origin_address='',
            approval_number='',
            is_shelflife='',
            lifecycle='',
            reject_lifecycle='',
            lockup_lifecycle='',
            advent_lifecycle='',
            is_sn_mgt='',
            is_hygroscopic='',
            is_danger='',
            tag_price='',
            item_price='',
            cost_price='',
            is_batch_mgt='',
            extend_fields='',
            item_id='',
            is_area_sale=''
    ):
        """
        商品同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24556

        :param item_code: 商家商品编码
        :param name: 商品名称
        :param type: 商品类别NORMAL：普通商品、COMBINE：组合商品、DISTRIBUTION：分销商品、HAOCAI耗材、FUSHUPIN附属品、BAOCAI 包材、XUNI虚拟商品、QITA其他)
        :param use_yn: 启用标识
        :param bar_code: 条形码，多条码请用”；”分隔；
        :param store_code: 仓库编码
        :param title: 商品标题
        :param category: 商品类别编码（外部系统类别）
        :param category_name: 商品类别名称
        :param brand: 品牌编码
        :param brand_name: 品牌名称
        :param specification: 规格
        :param color: 颜色
        :param size: 尺码
        :param gross_weight: 毛重，单位克
        :param net_weight: 净重，单位克
        :param length: 长度，单位毫米
        :param width: 宽度，单位毫米
        :param height: 高度，单位毫米
        :param volume: 体积，单位立方厘米
        :param pcs: 箱规
        :param origin_address: 产地
        :param approval_number: 批准文号
        :param is_shelflife: 是否启用保质期管理
        :param lifecycle: 商品保质期天数
        :param reject_lifecycle: 保质期禁收天数
        :param lockup_lifecycle: 保质期禁售天数
        :param advent_lifecycle: 保质期预警天数
        :param is_sn_mgt: 是否启用序列号管理
        :param is_hygroscopic: 是否易碎品
        :param is_danger: 是否危险品
        :param tag_price: 吊牌价，单位分
        :param item_price: 零售价，单位分
        :param cost_price: 成本价，单位分
        :param is_batch_mgt: 是否启用批次管理
        :param extend_fields: 拓展属性
        :param item_id: 商家商品ID
        :param is_area_sale: 是否区域销售
        """
        return self._top_request(
            "taobao.wlb.wms.sku.create",
            {
                "item_code": item_code,
                "name": name,
                "type": type,
                "use_yn": use_yn,
                "bar_code": bar_code,
                "store_code": store_code,
                "title": title,
                "category": category,
                "category_name": category_name,
                "brand": brand,
                "brand_name": brand_name,
                "specification": specification,
                "color": color,
                "size": size,
                "gross_weight": gross_weight,
                "net_weight": net_weight,
                "length": length,
                "width": width,
                "height": height,
                "volume": volume,
                "pcs": pcs,
                "origin_address": origin_address,
                "approval_number": approval_number,
                "is_shelflife": is_shelflife,
                "lifecycle": lifecycle,
                "reject_lifecycle": reject_lifecycle,
                "lockup_lifecycle": lockup_lifecycle,
                "advent_lifecycle": advent_lifecycle,
                "is_sn_mgt": is_sn_mgt,
                "is_hygroscopic": is_hygroscopic,
                "is_danger": is_danger,
                "tag_price": tag_price,
                "item_price": item_price,
                "cost_price": cost_price,
                "is_batch_mgt": is_batch_mgt,
                "extend_fields": extend_fields,
                "item_id": item_id,
                "is_area_sale": is_area_sale
            }
        )

    def taobao_wlb_wms_sku_update(
            self,
            item_id,
            use_yn,
            store_code='',
            name='',
            title='',
            category='',
            category_name='',
            brand='',
            brand_name='',
            specification='',
            color='',
            size='',
            gross_weight='',
            net_weight='',
            length='',
            width='',
            height='',
            volume='',
            pcs='',
            origin_address='',
            approval_number='',
            is_shelflife='',
            lifecycle='',
            reject_lifecycle='',
            lockup_lifecycle='',
            advent_lifecycle='',
            is_sn_mgt='',
            is_hygroscopic='',
            is_danger='',
            tag_price='',
            item_price='',
            cost_price='',
            is_batch_mgt='',
            extend_fields='',
            bar_code='',
            attribute='',
            type='',
            is_area_sale=''
    ):
        """
        商品信息的更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24557

        :param item_id: 外部系统ID
        :param use_yn: 启用标识
        :param store_code: 仓库编码
        :param name: 商品名称
        :param title: 商品标题
        :param category: 商品类别编码（外部系统类别）
        :param category_name: 商品类别名称
        :param brand: 品牌编码
        :param brand_name: 品牌名称
        :param specification: 规格
        :param color: 颜色
        :param size: 尺码
        :param gross_weight: 毛重，单位克
        :param net_weight: 净重，单位克
        :param length: 长度，单位毫米
        :param width: 宽度，单位毫米
        :param height: 高度，单位毫米
        :param volume: 体积，单位立方厘米
        :param pcs: 箱规
        :param origin_address: 产地
        :param approval_number: 批准文号
        :param is_shelflife: 是否启用保质期管理
        :param lifecycle: 商品保质期天数
        :param reject_lifecycle: 保质期禁收天数
        :param lockup_lifecycle: 保质期禁售天数
        :param advent_lifecycle: 保质期预警天数
        :param is_sn_mgt: 是否启用序列号管理
        :param is_hygroscopic: 是否易碎品
        :param is_danger: 是否危险品
        :param tag_price: 吊牌价，单位分
        :param item_price: 零售价，单位分
        :param cost_price: 成本价，单位分
        :param is_batch_mgt: 是否启用批次管理
        :param extend_fields: 拓展属性
        :param bar_code: 条形码，多条码请用”;”分隔；条码更新只技术增量更新，已有条码无法修改，只能在原条码基础上增加新的条码。例：原商品条码为：BAR001，要增加一条新条码BAR002时，此字段内容应填写为：BAR001;BAR002
        :param attribute: 商品属性编码
        :param type: 商品类型:NORMAL-普通商品、 COMBINE-组合商品、 DISTRIBUTION-分销商品
        :param is_area_sale: 是否区域销售属性
        """
        return self._top_request(
            "taobao.wlb.wms.sku.update",
            {
                "item_id": item_id,
                "use_yn": use_yn,
                "store_code": store_code,
                "name": name,
                "title": title,
                "category": category,
                "category_name": category_name,
                "brand": brand,
                "brand_name": brand_name,
                "specification": specification,
                "color": color,
                "size": size,
                "gross_weight": gross_weight,
                "net_weight": net_weight,
                "length": length,
                "width": width,
                "height": height,
                "volume": volume,
                "pcs": pcs,
                "origin_address": origin_address,
                "approval_number": approval_number,
                "is_shelflife": is_shelflife,
                "lifecycle": lifecycle,
                "reject_lifecycle": reject_lifecycle,
                "lockup_lifecycle": lockup_lifecycle,
                "advent_lifecycle": advent_lifecycle,
                "is_sn_mgt": is_sn_mgt,
                "is_hygroscopic": is_hygroscopic,
                "is_danger": is_danger,
                "tag_price": tag_price,
                "item_price": item_price,
                "cost_price": cost_price,
                "is_batch_mgt": is_batch_mgt,
                "extend_fields": extend_fields,
                "bar_code": bar_code,
                "attribute": attribute,
                "type": type,
                "is_area_sale": is_area_sale
            }
        )

    def taobao_wlb_wms_sku_get(
            self,
            item_code='',
            item_id='',
            owner_user_id=''
    ):
        """
        商品信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25322

        :param item_code: 菜鸟商品ID,与itemcode必须有一个值不为空
        :param item_id: 商家商品编码,与itemid必须有一个值不为空
        :param owner_user_id: 货主ID
        """
        return self._top_request(
            "taobao.wlb.wms.sku.get",
            {
                "item_code": item_code,
                "item_id": item_id,
                "owner_user_id": owner_user_id
            }
        )

    def taobao_wlb_wms_return_order_notify(
            self,
            order_code='',
            store_code='',
            order_flag='',
            prev_order_code='',
            tms_service_code='',
            tms_order_code='',
            return_reason='',
            buyer_nick='',
            sender_info=None,
            receiver_info=None,
            order_item_list=None,
            extend_fields='',
            remark='',
            order_source='',
            order_type='',
            owner_user_id='',
            order_create_time='',
            tms_service_name=''
    ):
        """
        销售退货通知
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25326

        :param order_code: ERP单据编码
        :param store_code: 仓库编码
        :param order_flag: 用字符串格式来表示订单标记列表：比如VISIT^ SELLER_AFFORD^SYNC_RETURN_BILL 等，中间用“^”来隔开 ----------------------------------------  订单标记list（所有字母全部大写）： 9:VISIT-上门12: SELLER_AFFORD 是否卖家承担运费 默认是，即没 13: SYNC_RETURN_BILL，同时退回发票
        :param prev_order_code: 来源单据号，销售退货时填充原发货的LBX号
        :param tms_service_code: 快递公司编码
        :param tms_order_code: 运单号
        :param return_reason: 销退时请提供退货的原因
        :param buyer_nick: 买家昵称
        :param sender_info: 发件人信息
        :param receiver_info: 收件人信息
        :param order_item_list: 商品信息列表
        :param extend_fields: 扩展属性, key-value结构，格式要求： 以英文分号“;”分隔每组key-value，以英文冒号“:”分隔key与value。如果value中带有分号，需要转成下划线“_”，如果带有冒号，需要转成中划线“-”
        :param remark: 备注
        :param order_source: 订单来源 201 淘宝，202 1688，203 苏宁，204 亚马逊中国，205 当当，206 ebay，207 唯品会，208 1号店，209 国美，210 拍拍，211 聚美优品，212 乐峰，214 京东，301 其他
        :param order_type: 订单类型 501 销退入库
        :param owner_user_id: 货主ID
        :param order_create_time: ERP订单创建时间
        :param tms_service_name: 快递公司名称
        """
        return self._top_request(
            "taobao.wlb.wms.return.order.notify",
            {
                "order_code": order_code,
                "store_code": store_code,
                "order_flag": order_flag,
                "prev_order_code": prev_order_code,
                "tms_service_code": tms_service_code,
                "tms_order_code": tms_order_code,
                "return_reason": return_reason,
                "buyer_nick": buyer_nick,
                "sender_info": sender_info,
                "receiver_info": receiver_info,
                "order_item_list": order_item_list,
                "extend_fields": extend_fields,
                "remark": remark,
                "order_source": order_source,
                "order_type": order_type,
                "owner_user_id": owner_user_id,
                "order_create_time": order_create_time,
                "tms_service_name": tms_service_name
            }
        )

    def taobao_wlb_wms_cainiao_bill_query(
            self,
            start_modified_time,
            end_modified_time,
            order_type='',
            page_no='1',
            page_size='50'
    ):
        """
        查询单据列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25671

        :param start_modified_time: 结束时间，此字段检索订单最后修改时间， 格式 yyyy-MM-dd HH:mm:ss。
        :param end_modified_time: 起始时间，此字段检索订单最后修改时间， 格式 yyyy-MM-dd HH:mm:ss。
        :param order_type: 订单类型 201 销售出库 501 退货入库 502 换货出库 503 补发出库904 普通入库 903 普通出库单 306 B2B入库单 305 B2B出库单 601 采购入库 901 退供出库单 701 盘点出库 702 盘点入库 711 库存异动单
        :param page_no: 页码。（大于0的整数。默认为1）
        :param page_size: 每页条数。（每页条数不超过50条。默认为50）
        """
        return self._top_request(
            "taobao.wlb.wms.cainiao.bill.query",
            {
                "start_modified_time": start_modified_time,
                "end_modified_time": end_modified_time,
                "order_type": order_type,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_wlb_wms_return_bill_get(
            self,
            order_code='',
            cn_order_code=''
    ):
        """
        获取销退收货信息
        通过订单号获取单个销退单收货信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25678

        :param order_code: ERP订单编码，查询单个订单时orderCode与cnOrderCode必须有一个参数值不为空，两个参数都赋值时，以cnOrderCode值检索数据
        :param cn_order_code: 菜鸟订单编码，查询单个订单时orderCode与cnOrderCode必须有一个参数值不为空，两个参数都赋值时，以cnOrderCode值检索数据
        """
        return self._top_request(
            "taobao.wlb.wms.return.bill.get",
            {
                "order_code": order_code,
                "cn_order_code": cn_order_code
            },
            result_processor=lambda x: x["return_order_info"]
        )

    def taobao_wlb_wms_stock_in_bill_get(
            self,
            order_code='',
            cn_order_code=''
    ):
        """
        获取入库单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25679

        :param order_code: ERP订单编码，查询单个订单时orderCode与cnOrderCode必须有一个参数值不为空，两个参数都赋值时，以cnOrderCode值检索数据
        :param cn_order_code: 菜鸟订单编码，查询单个订单时orderCode与cnOrderCode必须有一个参数值不为空，两个参数都赋值时，以cnOrderCode值检索数据
        """
        return self._top_request(
            "taobao.wlb.wms.stock.in.bill.get",
            {
                "order_code": order_code,
                "cn_order_code": cn_order_code
            },
            result_processor=lambda x: x["stock_in_info"]
        )

    def taobao_wlb_wms_stock_out_bill_get(
            self,
            order_code='',
            cn_order_code=''
    ):
        """
        通过订单号获取单个出库单发货信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25680

        :param order_code: ERP订单编码，查询单个订单时orderCode与cnOrderCode必须有一个参数值不为空，两个参数都赋值时，以cnOrderCode值检索数据
        :param cn_order_code: 菜鸟订单编码，查询单个订单时orderCode与cnOrderCode必须有一个参数值不为空，两个参数都赋值时，以cnOrderCode值检索数据
        """
        return self._top_request(
            "taobao.wlb.wms.stock.out.bill.get",
            {
                "order_code": order_code,
                "cn_order_code": cn_order_code
            },
            result_processor=lambda x: x["stock_out_info"]
        )

    def taobao_wlb_wms_consign_bill_get(
            self,
            cn_order_code='',
            order_code=''
    ):
        """
        获取销售订单发货信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25681

        :param cn_order_code: 菜鸟订单编码,cnOrderCode与orderCode必须有一个值不可为空
        :param order_code: ERP订单编码,cnOrderCode与orderCode必须有一个值不可为空
        """
        return self._top_request(
            "taobao.wlb.wms.consign.bill.get",
            {
                "cn_order_code": cn_order_code,
                "order_code": order_code
            },
            result_processor=lambda x: x["consign_send_info_list"]
        )

    def taobao_wlb_wms_inventory_profitloss_get(
            self,
            cn_order_code
    ):
        """
        通过订单列表批量获取库存损益单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25683

        :param cn_order_code: 菜鸟订单编码
        """
        return self._top_request(
            "taobao.wlb.wms.inventory.profitloss.get",
            {
                "cn_order_code": cn_order_code
            },
            result_processor=lambda x: x["profit_loss_info"]
        )

    def taobao_wlb_wms_inventory_query(
            self,
            item_id='',
            store_code='',
            inventory_type='',
            type='',
            batch_code='',
            produce_date='',
            due_date='',
            channel_code='',
            page_no='',
            page_size=''
    ):
        """
        菜鸟商品库存查询
        支持按汇总（不分批次和渠道的总的库存数量）、渠道、批次三类方式查询商品实时库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25720

        :param item_id: 菜鸟商品ID
        :param store_code: 仓库编码
        :param inventory_type: 库存类型。 (1 正品 101 残次 102 机损 103 箱损 201 冻结库存 301 在途库存 )
        :param type: 库存查询类型 1-	汇总库存，不区分批次和渠道 2-	批次库存，库存按商品批次维度划分 3-	渠道库存，库存按渠道维度划分 （当前业务不支持批次库存和渠道库存共存，批次库存无渠道属性，渠道库存无批次属性）
        :param batch_code: 库存批次号，type=2时字段传值有效。 商品设置为批次管理时，商品产生批次库存。当商品为批次管理时，此字段不传值，返回所有批次库存信息。
        :param produce_date: 生产日期，type=2时字段传值有效。
        :param due_date: 失效日期，type=2时字段传值有效。
        :param channel_code: 渠道编码，type=3时字段传值有效。（TB 淘系， OTHERS 其他）
        :param page_no: 分页的第几页
        :param page_size: 每页多少条，最大50条
        """
        return self._top_request(
            "taobao.wlb.wms.inventory.query",
            {
                "item_id": item_id,
                "store_code": store_code,
                "inventory_type": inventory_type,
                "type": type,
                "batch_code": batch_code,
                "produce_date": produce_date,
                "due_date": due_date,
                "channel_code": channel_code,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def cainiao_bim_tradeorder_consign(
            self,
            trade_id,
            store_code='',
            res_id=''
    ):
        """
        驱动保税交易订单发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26245

        :param trade_id: 交易单号
        :param store_code: 仓储编码，ERP指定仓库发货时需要传值，编码由菜鸟提供
        :param res_id: 选择的线路ID非必填字段
        """
        return self._top_request(
            "cainiao.bim.tradeorder.consign",
            {
                "trade_id": trade_id,
                "store_code": store_code,
                "res_id": res_id
            }
        )

    def taobao_wlb_wms_sn_info_query(
            self,
            order_code,
            order_code_type,
            page_index
    ):
        """
        查询单据序列号信息
        查询仓库作业的各类单据记录的Sn信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26453

        :param order_code: 订单编码
        :param order_code_type: 订单类型（1:仓配订单 10：配送扫码 20：增值扫码 40:ERP单号; 50：交易订单 ）
        :param page_index: 页数，默认每页50条
        """
        return self._top_request(
            "taobao.wlb.wms.sn.info.query",
            {
                "order_code": order_code,
                "order_code_type": order_code_type,
                "page_index": page_index
            }
        )

    def taobao_wlb_wms_item_combination_create(
            self,
            item_id,
            sub_item_list
    ):
        """
        创建组合商品与子商品关系
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26722

        :param item_id: 组合商品ID
        :param sub_item_list: 子货品列表
        """
        return self._top_request(
            "taobao.wlb.wms.item.combination.create",
            {
                "item_id": item_id,
                "sub_item_list": sub_item_list
            }
        )

    def taobao_wlb_wms_item_combination_delete(
            self,
            item_id=''
    ):
        """
        删除货品组合关系
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26723

        :param item_id: 组合货品ID
        """
        return self._top_request(
            "taobao.wlb.wms.item.combination.delete",
            {
                "item_id": item_id
            }
        )

    def taobao_wlb_wms_item_combination_get(
            self,
            itemid
    ):
        """
        查询组合商品的组合关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26724

        :param itemid: 货品Id
        """
        return self._top_request(
            "taobao.wlb.wms.item.combination.get",
            {
                "itemid": itemid
            }
        )

    def taobao_wlb_wms_consign_inventory_occupancy(
            self,
            content=None
    ):
        """
        ERP发货库存预占用
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26923

        :param content: 库存占用
        """
        return self._top_request(
            "taobao.wlb.wms.consign.inventory.occupancy",
            {
                "content": content
            }
        )

    def taobao_wlb_wms_consign_inventory_release(
            self,
            content=None
    ):
        """
        ERP释放预占用库存
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26924

        :param content: 库存释放
        """
        return self._top_request(
            "taobao.wlb.wms.consign.inventory.release",
            {
                "content": content
            }
        )

    def taobao_wlb_wms_unknown_package_upload(
            self,
            content
    ):
        """
        有货无单销退入库单消息回传
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26943

        :param content: WlbWmsUnknownPackageUpload
        """
        return self._top_request(
            "taobao.wlb.wms.unknown.package.upload",
            {
                "content": content
            },
            result_processor=lambda x: x["response"]
        )

    def cainiao_crm_oms_rule_sync(
            self,
            shop_code,
            is_open_cnauto,
            is_auto_check,
            check_rule_msg='',
            is_sys_merge_order='false',
            merge_order_cycle='0',
            other_rule=''
    ):
        """
        商家ERP订单处理规则同步
        将商家ERP订单处理规则同步到菜鸟CRM系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29647

        :param shop_code: 店铺nick
        :param is_open_cnauto: 是否开启菜鸟自动流转规则
        :param is_auto_check: 是否系统智能处理订单（无人工介入）
        :param check_rule_msg: 人工审单规则描述
        :param is_sys_merge_order: 是否开启了订单合单
        :param merge_order_cycle: 订单合单周期（单位：分钟）
        :param other_rule: 其他未定义订单处理规则，格式｛name;stauts;cycle;｝
        """
        return self._top_request(
            "cainiao.crm.oms.rule.sync",
            {
                "shop_code": shop_code,
                "is_open_cnauto": is_open_cnauto,
                "is_auto_check": is_auto_check,
                "check_rule_msg": check_rule_msg,
                "is_sys_merge_order": is_sys_merge_order,
                "merge_order_cycle": merge_order_cycle,
                "other_rule": other_rule
            }
        )


class TbWangShangFaTingDuiWai(DingTalkBaseAPI):
    """
    网上法庭对外API
    """

    def alibaba_infodept_lassen_casestatistics_get(
            self,
            area_code='33',
            start_time='2016-01-11',
            end_time='2016-11-11'
    ):
        """
        法庭提交和结案案件量接口
        功能描述：云嘉为浙江省高院制作数据大屏，需展示网上法庭相关数据，我方为省高院提供浙江省内法院收案和结案的案件量，开放数据接口，供其调取这两组数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27772

        :param area_code: 地区代码
        :param start_time: 开始时间
        :param end_time: 结束时间
        """
        return self._top_request(
            "alibaba.infodept.lassen.casestatistics.get",
            {
                "area_code": area_code,
                "start_time": start_time,
                "end_time": end_time
            }
        )

    def alibaba_nazca_token_filesecret_get(
            self,
            platform_user_id='',
            contract_num=''
    ):
        """
        获取文件秘钥
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28623

        :param platform_user_id: 客户在1688的唯一标识
        :param contract_num: 合同编号
        """
        return self._top_request(
            "alibaba.nazca.token.filesecret.get",
            {
                "platform_user_id": platform_user_id,
                "contract_num": contract_num
            }
        )

    def alibaba_nazca_token_issuecertapply_get(
            self,
            token=''
    ):
        """
        根据token获取出证申请信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28640

        :param token: token
        """
        return self._top_request(
            "alibaba.nazca.token.issuecertapply.get",
            {
                "token": token
            }
        )

    def alibaba_nazca_auth_issueauthapply_callback(
            self,
            contract_num='',
            issue_org='',
            platform_user_id='',
            report_url='',
            status=''
    ):
        """
        出证申请回调
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28641

        :param contract_num: 合同编号
        :param issue_org: 出证机构
        :param platform_user_id: 客户在1688的唯一标识
        :param report_url: 出证报告下载地址
        :param status: 出证状态
        """
        return self._top_request(
            "alibaba.nazca.auth.issueauthapply.callback",
            {
                "contract_num": contract_num,
                "issue_org": issue_org,
                "platform_user_id": platform_user_id,
                "report_url": report_url,
                "status": status
            }
        )

    def alibaba_nazca_auth_changeauthapply_callback(
            self,
            param_change_auth_call_back_do=None
    ):
        """
        变更认证回调
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28642

        :param param_change_auth_call_back_do: 变更认证回调参数
        """
        return self._top_request(
            "alibaba.nazca.auth.changeauthapply.callback",
            {
                "param_change_auth_call_back_do": param_change_auth_call_back_do
            }
        )

    def alibaba_nazca_auth_authapply_callback(
            self,
            auth_apply_done_callback_do=None
    ):
        """
        认证的统一回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28643

        :param auth_apply_done_callback_do: 认证回调参数
        """
        return self._top_request(
            "alibaba.nazca.auth.authapply.callback",
            {
                "auth_apply_done_callback_do": auth_apply_done_callback_do
            }
        )

    def alibaba_nazca_token_changeauthapply_get(
            self,
            token=''
    ):
        """
        根据token获取变更认证申请信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28646

        :param token: token
        """
        return self._top_request(
            "alibaba.nazca.token.changeauthapply.get",
            {
                "token": token
            }
        )

    def alibaba_nazca_token_authapply_get(
            self,
            token=''
    ):
        """
        根据token获取认证申请信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28652

        :param token: token
        """
        return self._top_request(
            "alibaba.nazca.token.authapply.get",
            {
                "token": token
            }
        )


class TbWuDaoKou(DingTalkBaseAPI):
    """
    五道口API
    """

    def alibaba_wdk_item_storesku_update(
            self,
            store_id,
            sku_code,
            sale_flag=''
    ):
        """
        五道口商品中心门店商品修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29139

        :param store_id: 盒马门店id
        :param sku_code: 商品编码
        :param sale_flag: 1-可售   0-不可售
        """
        return self._top_request(
            "alibaba.wdk.item.storesku.update",
            {
                "store_id": store_id,
                "sku_code": sku_code,
                "sale_flag": sale_flag
            }
        )

    def alibaba_wdk_item_price_update(
            self,
            store_id,
            sku_code,
            sku_price='',
            sku_member_price=''
    ):
        """
        五道口商品中心价格修改
        修改门店商品售价和会员价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29140

        :param store_id: 盒马门店id
        :param sku_code: 商品编码
        :param sku_price: 价格，单位是分
        :param sku_member_price: 会员价格，单位是分，且不能大于价格
        """
        return self._top_request(
            "alibaba.wdk.item.price.update",
            {
                "store_id": store_id,
                "sku_code": sku_code,
                "sku_price": sku_price,
                "sku_member_price": sku_member_price
            },
            result_processor=lambda x: x["hsf_result"]
        )

    def alibaba_wdk_merchant_item_createdraft(
            self,
            params
    ):
        """
        新建商品草稿
        新建商品草稿erp接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29601

        :param params: 商品信息json
        """
        return self._top_request(
            "alibaba.wdk.merchant.item.createdraft",
            {
                "params": params
            }
        )

    def alibaba_wdk_merchant_item_update(
            self,
            sku_code='',
            merchant_code='',
            params=''
    ):
        """
        修改商家商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29615

        :param sku_code: 商品编码
        :param merchant_code: 门店编码
        :param params: 修改字段的json
        """
        return self._top_request(
            "alibaba.wdk.merchant.item.update",
            {
                "sku_code": sku_code,
                "merchant_code": merchant_code,
                "params": params
            }
        )

    def alibaba_wdk_merchant_item_query(
            self,
            sku_code='',
            merchant_code=''
    ):
        """
        商家商品查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29616

        :param sku_code: 商品编码
        :param merchant_code: 商家编码
        """
        return self._top_request(
            "alibaba.wdk.merchant.item.query",
            {
                "sku_code": sku_code,
                "merchant_code": merchant_code
            }
        )

    def alibaba_wdk_merchant_storeitem_update(
            self,
            sku_code='',
            merchant_code='',
            store_id='',
            params=''
    ):
        """
        修改门店商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29617

        :param sku_code: 商品编码
        :param merchant_code: 商家编码
        :param store_id: 门店编码
        :param params: 修改参数的json
        """
        return self._top_request(
            "alibaba.wdk.merchant.storeitem.update",
            {
                "sku_code": sku_code,
                "merchant_code": merchant_code,
                "store_id": store_id,
                "params": params
            }
        )

    def alibaba_wdk_merchant_storeitem_query(
            self,
            sku_code='',
            merchant_code='',
            store_id=''
    ):
        """
        门店商品信心查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29618

        :param sku_code: 商品编码
        :param merchant_code: 商家编码
        :param store_id: 门店编码
        """
        return self._top_request(
            "alibaba.wdk.merchant.storeitem.query",
            {
                "sku_code": sku_code,
                "merchant_code": merchant_code,
                "store_id": store_id
            }
        )

    def alibaba_wdk_merchant_brand_query(
            self,
            keyword='',
            offset='',
            page_size=''
    ):
        """
        品牌查询接口
        三江erp对接时，提供品牌查询的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30235

        :param keyword: 关键词，不填就查全部
        :param offset: 可不填，默认0
        :param page_size: 可不填，默认2000
        """
        return self._top_request(
            "alibaba.wdk.merchant.brand.query",
            {
                "keyword": keyword,
                "offset": offset,
                "page_size": page_size
            }
        )

    def alibaba_wdk_merchant_storeitem_create(
            self,
            store_id,
            sku_code,
            merchant_code,
            params
    ):
        """
        新建门店商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30267

        :param store_id: 门店id
        :param sku_code: 商品编码
        :param merchant_code: 商家编码
        :param params: 新增门店商品参数，具体字段详见文档
        """
        return self._top_request(
            "alibaba.wdk.merchant.storeitem.create",
            {
                "store_id": store_id,
                "sku_code": sku_code,
                "merchant_code": merchant_code,
                "params": params
            }
        )

    def alibaba_wdk_merchant_category_query(
            self,
            keyword='',
            root_category_code=''
    ):
        """
        三江erp对接类目查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30268

        :param keyword: 搜索关键词，可不填就查全部
        :param root_category_code: 类目起点，可不填从根目录开始查
        """
        return self._top_request(
            "alibaba.wdk.merchant.category.query",
            {
                "keyword": keyword,
                "root_category_code": root_category_code
            }
        )

    def alibaba_wdk_member_score_rule_upinsert(
            self,
            score_rule_bo=None
    ):
        """
        积分规则更新
        积分规则新建或更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30449

        :param score_rule_bo: 积分规则BO
        """
        return self._top_request(
            "alibaba.wdk.member.score.rule.upinsert",
            {
                "score_rule_bo": score_rule_bo
            }
        )

    def taobao_wdk_equipment_conveyor_info_upload(
            self,
            param0=''
    ):
        """
        五道口仓库悬挂链信息上报
        五道口仓库悬挂链信息上传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30481

        :param param0: 上传信息
        """
        return self._top_request(
            "taobao.wdk.equipment.conveyor.info.upload",
            {
                "param0": param0
            }
        )

    def alibaba_wdk_stock_real_query(
            self,
            query
    ):
        """
        仓内实时库存查询
        查询仓内实时库存信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30522

        :param query: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.stock.real.query",
            {
                "query": query
            }
        )

    def alibaba_wdk_order_list(
            self,
            batch_query_request=None
    ):
        """
        五道口订单拉取
        五道口交易订单拉取接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30547

        :param batch_query_request: 查询参数
        """
        return self._top_request(
            "alibaba.wdk.order.list",
            {
                "batch_query_request": batch_query_request
            }
        )

    def taobao_wdk_equipment_conveyor_systemevent_get(
            self,
            warehouse_id='9999',
            conveyor_id='1',
            start_id='0'
    ):
        """
        获取悬挂链系统事件
        五道口悬挂链系统事件查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30548

        :param warehouse_id: 仓库Id
        :param conveyor_id: 悬挂链Id，即wcsNum
        :param start_id: 数据库id最小值
        """
        return self._top_request(
            "taobao.wdk.equipment.conveyor.systemevent.get",
            {
                "warehouse_id": warehouse_id,
                "conveyor_id": conveyor_id,
                "start_id": start_id
            }
        )

    def taobao_wdk_equipment_conveyor_containerinfo_get(
            self,
            warehouse_id='0',
            container_code='',
            batch_code='',
            wave_code=''
    ):
        """
        获取批次或波次中容器的信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30556

        :param warehouse_id: 仓库id
        :param container_code: 容器号
        :param batch_code: 批次号，可以为空串
        :param wave_code: 波次号，可以为空串
        """
        return self._top_request(
            "taobao.wdk.equipment.conveyor.containerinfo.get",
            {
                "warehouse_id": warehouse_id,
                "container_code": container_code,
                "batch_code": batch_code,
                "wave_code": wave_code
            }
        )

    def taobao_wdk_equipment_conveyor_hardwarestatuslog_get(
            self,
            warehouse_id='9999',
            conveyor_id='1',
            start_id='0'
    ):
        """
        硬件状态变化日志查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30557

        :param warehouse_id: 仓库Id
        :param conveyor_id: 悬挂链Id，即wcsNum
        :param start_id: 数据库id最小值
        """
        return self._top_request(
            "taobao.wdk.equipment.conveyor.hardwarestatuslog.get",
            {
                "warehouse_id": warehouse_id,
                "conveyor_id": conveyor_id,
                "start_id": start_id
            }
        )

    def taobao_wdk_equipment_conveyor_exceptionslidewaylog_get(
            self,
            warehouse_id='9999',
            conveyor_id='1',
            start_id='0'
    ):
        """
        异常通道日志查询
        五道口悬挂链异常通道事件查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30558

        :param warehouse_id: 仓库Id
        :param conveyor_id: 悬挂链Id，即wcsNum
        :param start_id: 数据库id最小值
        """
        return self._top_request(
            "taobao.wdk.equipment.conveyor.exceptionslidewaylog.get",
            {
                "warehouse_id": warehouse_id,
                "conveyor_id": conveyor_id,
                "start_id": start_id
            }
        )

    def taobao_wdk_equipment_conveyor_conveyorinfo_get(
            self,
            warehouse_code='',
            conveyor_id='0'
    ):
        """
        获取五道口悬挂链信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30620

        :param warehouse_code: 仓库code
        :param conveyor_id: wcsNum
        """
        return self._top_request(
            "taobao.wdk.equipment.conveyor.conveyorinfo.get",
            {
                "warehouse_code": warehouse_code,
                "conveyor_id": conveyor_id
            }
        )

    def alibaba_wdk_order_sync_finish(
            self,
            order_sync_update_request=None
    ):
        """
        更新订单同步状态为完成
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        配合订单拉取接口，更新订单处理状态为已处理。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30621

        :param order_sync_update_request: 更新消费状态对象
        """
        return self._top_request(
            "alibaba.wdk.order.sync.finish",
            {
                "order_sync_update_request": order_sync_update_request
            }
        )

    def alibaba_wdk_ums_outbound_process_get(
            self,
            warehouse_code
    ):
        """
        出库业务UMS异步处理结果返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30629

        :param warehouse_code: 店仓code，指的是作业对象，对应一个物理店或仓编码
        """
        return self._top_request(
            "alibaba.wdk.ums.outbound.process.get",
            {
                "warehouse_code": warehouse_code
            }
        )

    def alibaba_wdk_ums_inbound(
            self,
            erp_arrivalnotice_dto
    ):
        """
        入库-ERP下发单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30630

        :param erp_arrivalnotice_dto: 1
        """
        return self._top_request(
            "alibaba.wdk.ums.inbound",
            {
                "erp_arrivalnotice_dto": erp_arrivalnotice_dto
            }
        )

    def alibaba_wdk_ums_feedback(
            self,
            erp_feedbackdto
    ):
        """
        质量反馈（入库辅助）-ERP下发单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30631

        :param erp_feedbackdto: 质量反馈请求dto
        """
        return self._top_request(
            "alibaba.wdk.ums.feedback",
            {
                "erp_feedbackdto": erp_feedbackdto
            }
        )

    def alibaba_wdk_ums_returnitems_get(
            self,
            warehouse_code
    ):
        """
        退货库位商品查询（退货出库辅助）-回流单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30632

        :param warehouse_code: 店仓code，指的是作业对象，对应一个物理店或仓编码
        """
        return self._top_request(
            "alibaba.wdk.ums.returnitems.get",
            {
                "warehouse_code": warehouse_code
            }
        )

    def alibaba_wdk_ums_outbound(
            self,
            erp_output_order_dto
    ):
        """
        出库-ERP下发单(新接口，包含调拨出库单和退货出库单等)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30633

        :param erp_output_order_dto: 出库-ERP下发单请求dto
        """
        return self._top_request(
            "alibaba.wdk.ums.outbound",
            {
                "erp_output_order_dto": erp_output_order_dto
            }
        )

    def alibaba_wdk_ums_inventory_adjust_get(
            self,
            warehouse_code
    ):
        """
        库调单-回流单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30634

        :param warehouse_code: 店仓code，指的是库调对象，对应一个物理店或仓编码
        """
        return self._top_request(
            "alibaba.wdk.ums.inventory.adjust.get",
            {
                "warehouse_code": warehouse_code
            }
        )

    def alibaba_wdk_ums_inventory_check_get(
            self,
            warehouse_code
    ):
        """
        盘点结果单-回流单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30635

        :param warehouse_code: 店仓code，指的是库调对象，对应一个物理店或仓编码
        """
        return self._top_request(
            "alibaba.wdk.ums.inventory.check.get",
            {
                "warehouse_code": warehouse_code
            }
        )

    def alibaba_wdk_ums_order_get(
            self,
            query_erpbill_dto
    ):
        """
        查询店仓作业单据清单 （库存对账辅助）-回流单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30636

        :param query_erpbill_dto: 查询单据的dto
        """
        return self._top_request(
            "alibaba.wdk.ums.order.get",
            {
                "query_erpbill_dto": query_erpbill_dto
            }
        )

    def alibaba_wdk_ums_handling_get(
            self,
            warehouse_code=''
    ):
        """
        加工单-回流单（新接口）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30637

        :param warehouse_code: 仓库编码
        """
        return self._top_request(
            "alibaba.wdk.ums.handling.get",
            {
                "warehouse_code": warehouse_code
            }
        )

    def alibaba_wdk_ums_retrieve_confirm(
            self,
            warehouse_code,
            uuid
    ):
        """
        回流单－外部对已拉取到的UMS单据进行确认
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30638

        :param warehouse_code: 店仓code，指的是作业对象，对应一个物理店或仓编码
        :param uuid: 唯一识别码
        """
        return self._top_request(
            "alibaba.wdk.ums.retrieve.confirm",
            {
                "warehouse_code": warehouse_code,
                "uuid": uuid
            }
        )

    def alibaba_wdk_order_get(
            self,
            id_list_query_req=None
    ):
        """
        交易订单详情查询
        五道口三江单据查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30640

        :param id_list_query_req: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.order.get",
            {
                "id_list_query_req": id_list_query_req
            }
        )

    def alibaba_wdk_order_push(
            self,
            receipt_order=None
    ):
        """
        外部商户订单同步到五道口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        外部商户老pos机产生的订单同步到五道口，用于扣减库存等操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30643

        :param receipt_order: 订单
        """
        return self._top_request(
            "alibaba.wdk.order.push",
            {
                "receipt_order": receipt_order
            }
        )

    def alibaba_wdk_order_refund_get(
            self,
            biz_order_ids='',
            refund_ids='',
            order_from='',
            shop_id='',
            store_id=''
    ):
        """
        五道口订单退款按ID查询
        按照退款ID或者五道口中台订单ID查询退款信息详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30766

        :param biz_order_ids: 五道口订单列表（子订单）
        :param refund_ids: 退款订单列表
        :param order_from: 渠道来源 3：饿了么 4：盒马
        :param shop_id: 渠道店id
        :param store_id: 经营店id
        """
        return self._top_request(
            "alibaba.wdk.order.refund.get",
            {
                "biz_order_ids": biz_order_ids,
                "refund_ids": refund_ids,
                "order_from": order_from,
                "shop_id": shop_id,
                "store_id": store_id
            }
        )

    def alibaba_wdk_order_refund_list(
            self,
            batch_query_refund_request=None
    ):
        """
        五道口交易退款批量查询
        按照条件查询退款数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30774

        :param batch_query_refund_request: 查询条件
        """
        return self._top_request(
            "alibaba.wdk.order.refund.list",
            {
                "batch_query_refund_request": batch_query_refund_request
            }
        )

    def alibaba_wdk_order_refund_sync_finish(
            self,
            refund_ids=''
    ):
        """
        五道口订单退款数据同步状态更新
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据退款单据ID更新退款数据消费状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30775

        :param refund_ids: 退款id列表
        """
        return self._top_request(
            "alibaba.wdk.order.refund.sync.finish",
            {
                "refund_ids": refund_ids
            }
        )

    def taobao_wdk_equipment_conveyor_statusconfirm(
            self,
            warehouse_code='',
            uuid=''
    ):
        """
        悬挂链状态回传确认
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31183

        :param warehouse_code: warehouse_code
        :param uuid: uuid
        """
        return self._top_request(
            "taobao.wdk.equipment.conveyor.statusconfirm",
            {
                "warehouse_code": warehouse_code,
                "uuid": uuid
            }
        )

    def alibaba_wdk_stock_cabinet_query(
            self,
            query=None
    ):
        """
        仓内实时库位库存查询
        查询仓内实时库位库存信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31240

        :param query: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.stock.cabinet.query",
            {
                "query": query
            }
        )

    def taobao_wdk_equipment_conveyor_wcsbtoc_containerassignedtoconveyor(
            self,
            warehouse_code='',
            wcs_num='0'
    ):
        """
        容器被预分拣器分配到悬挂链
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31282

        :param warehouse_code: warehouse_code
        :param wcs_num: wcs_num
        """
        return self._top_request(
            "taobao.wdk.equipment.conveyor.wcsbtoc.containerassignedtoconveyor",
            {
                "warehouse_code": warehouse_code,
                "wcs_num": wcs_num
            }
        )

    def taobao_wdk_equipment_conveyor_wcsbtoc_containerscannedbyconveyor(
            self,
            warehouse_code='',
            wcs_num=''
    ):
        """
        容器被悬挂链扫描
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31283

        :param warehouse_code: warehouse_code
        :param wcs_num: wcs_num
        """
        return self._top_request(
            "taobao.wdk.equipment.conveyor.wcsbtoc.containerscannedbyconveyor",
            {
                "warehouse_code": warehouse_code,
                "wcs_num": wcs_num
            }
        )

    def alibaba_wdk_ums_retrieve_batch_confirm(
            self,
            warehouse_code='',
            uuids=''
    ):
        """
        批量消息确认
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31310

        :param warehouse_code: warehouse_code
        :param uuids: warehouse_code
        """
        return self._top_request(
            "alibaba.wdk.ums.retrieve.batch.confirm",
            {
                "warehouse_code": warehouse_code,
                "uuids": uuids
            }
        )

    def alibaba_wdk_ums_shift_get(
            self,
            warehouse_code=''
    ):
        """
        移库单获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31329

        :param warehouse_code: 店仓code，指的是库调对象，对应一个物理店或仓编码
        """
        return self._top_request(
            "alibaba.wdk.ums.shift.get",
            {
                "warehouse_code": warehouse_code
            }
        )

    def taobao_wdk_equipment_wcs_wcsinfo_upload(
            self,
            param0=''
    ):
        """
        悬挂链业务信息上传
        五道口仓库悬挂链信息上传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31334

        :param param0: 上传信息
        """
        return self._top_request(
            "taobao.wdk.equipment.wcs.wcsinfo.upload",
            {
                "param0": param0
            }
        )

    def alibaba_wdk_marketing_itemdiscount_createactivity(
            self,
            param
    ):
        """
        创建商品特价活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31400

        :param param: 创建活动请求入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.itemdiscount.createactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itemdiscount_removeitems(
            self,
            activity_id,
            sku_code,
            out_act_id=''
    ):
        """
        删除特价商品
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        将参加活动的商品从特价活动中移除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31401

        :param activity_id: 五道口活动id
        :param sku_code: 删除活动的商品skuCodes
        :param out_act_id: 商家活动id
        """
        return self._top_request(
            "alibaba.wdk.marketing.itemdiscount.removeitems",
            {
                "activity_id": activity_id,
                "sku_code": sku_code,
                "out_act_id": out_act_id
            }
        )

    def alibaba_wdk_marketing_itemdiscount_deleteactivity(
            self,
            param
    ):
        """
        删除商品特价活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31411

        :param param: 需要删除的活动的信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itemdiscount.deleteactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itemdiscount_queryitems(
            self,
            param
    ):
        """
        查询特价商品
        查询参加特价活动的商品优惠详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31413

        :param param: 查询入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.itemdiscount.queryitems",
            {
                "param": param
            }
        )

    def taobao_wdk_equipment_conveyor_batchconfirm(
            self,
            warehouse_code='',
            uuids=''
    ):
        """
        五道口悬挂链信息批量确认
        批量消息确认
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31448

        :param warehouse_code: 仓库code
        :param uuids: 待确认的uuid列表
        """
        return self._top_request(
            "taobao.wdk.equipment.conveyor.batchconfirm",
            {
                "warehouse_code": warehouse_code,
                "uuids": uuids
            }
        )

    def alibaba_wdk_plan_allocate_reverseorder_get(
            self,
            warehouse_code,
            start_modified,
            end_modified,
            token='',
            page_no='1',
            page_size='50'
    ):
        """
        逆向调拨单开放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        返回调出方为入参仓Code的调拨单列表
        获取范围是在修改开始时间和修改结束时间之间
        分页获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31478

        :param warehouse_code: 仓Code
        :param start_modified: 修改开始时间
        :param end_modified: 修改结束时间
        :param token: 授权token
        :param page_no: 页码
        :param page_size: 每页记录数
        """
        return self._top_request(
            "alibaba.wdk.plan.allocate.reverseorder.get",
            {
                "warehouse_code": warehouse_code,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "token": token,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_wdk_plan_storeback_order_get(
            self,
            warehouse_code,
            start_modified,
            end_modified,
            token='',
            page_no='1',
            page_size='50'
    ):
        """
        退仓单开放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提供基于修改开始时间和修改结束时间的分页查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31479

        :param warehouse_code: 仓code
        :param start_modified: 修改开始时间
        :param end_modified: 修改结束时间
        :param token: 授权token
        :param page_no: 页数
        :param page_size: 每页记录数
        """
        return self._top_request(
            "alibaba.wdk.plan.storeback.order.get",
            {
                "warehouse_code": warehouse_code,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "token": token,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_wdk_plan_purchase_inbound_get(
            self,
            warehouse_code,
            start_modified,
            end_modified,
            token='',
            page_no='1',
            page_size='50'
    ):
        """
        获取采购入库单
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        通过店仓code查询采购订单
        方式为通过更新时间范围增量拉取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31484

        :param warehouse_code: 仓Code
        :param start_modified: 开始修改时间
        :param end_modified: 结束修改时间
        :param token: 授权token
        :param page_no: 页码
        :param page_size: 每页记录数(推荐40-50)
        """
        return self._top_request(
            "alibaba.wdk.plan.purchase.inbound.get",
            {
                "warehouse_code": warehouse_code,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "token": token,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_wdk_plan_diff_order_get(
            self,
            warehouse_code,
            start_create,
            end_create,
            token='',
            page_no='1',
            page_size='50'
    ):
        """
        质量反馈(差异)单开放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提供基于创建时间的范围筛选
        拉取到的都是未处理的差异单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31485

        :param warehouse_code: 仓Code
        :param start_create: 开始创建时间
        :param end_create: 结束创建时间
        :param token: 授权token
        :param page_no: 页码
        :param page_size: 每页记录数
        """
        return self._top_request(
            "alibaba.wdk.plan.diff.order.get",
            {
                "warehouse_code": warehouse_code,
                "start_create": start_create,
                "end_create": end_create,
                "token": token,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_wdk_plan_returnbill_order_get(
            self,
            warehouse_code,
            start_modified,
            end_modified,
            token='',
            page_no='1',
            page_size='50'
    ):
        """
        退供单开放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        基于修改开始时间和修改结束时间提供了分页的查询方式
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31486

        :param warehouse_code: 仓Code
        :param start_modified: 修改开始时间
        :param end_modified: 修改结束时间
        :param token: 授权token
        :param page_no: 页码
        :param page_size: 每页记录数
        """
        return self._top_request(
            "alibaba.wdk.plan.returnbill.order.get",
            {
                "warehouse_code": warehouse_code,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "token": token,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_wdk_plan_allocate_order_get(
            self,
            warehouse_code,
            start_modified,
            end_modified,
            token='',
            page_no='1',
            page_size='50'
    ):
        """
        正向调拨
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取入参店仓Code为调拨单中调入方的单据
        提供根据修改时间的范围查询
        分页方式获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31487

        :param warehouse_code: 仓Code
        :param start_modified: 查询修改时间开始时间
        :param end_modified: 查询修改时间结束时间
        :param token: 授权token
        :param page_no: 页码
        :param page_size: 每页记录数
        """
        return self._top_request(
            "alibaba.wdk.plan.allocate.order.get",
            {
                "warehouse_code": warehouse_code,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "token": token,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_wdk_plan_purchase_adjust_get(
            self,
            warehouse_code,
            start_modified,
            end_modified,
            token='',
            page_no='1',
            page_size='50'
    ):
        """
        采购入库金额调整单开放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提供了分页查询的方式进行入库调整单据查询
        范围是根据入参的修改时间来确定
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31488

        :param warehouse_code: 仓Code
        :param start_modified: 修改时间查询起始
        :param end_modified: 修改时间查询结束
        :param token: 授权code
        :param page_no: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "alibaba.wdk.plan.purchase.adjust.get",
            {
                "warehouse_code": warehouse_code,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "token": token,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_wdk_plan_disoutbound_order_get(
            self,
            warehouse_code,
            start_modified,
            end_modified,
            token='',
            page_no='1',
            page_size='50'
    ):
        """
        物流配货出库单开放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提供基于修改时间的增量分页查询
        单据状态为门店已收货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31489

        :param warehouse_code: 入库仓Code
        :param start_modified: 修改开始时间
        :param end_modified: 修改结束时间
        :param token: 授权参数
        :param page_no: 页码
        :param page_size: 每页记录数
        """
        return self._top_request(
            "alibaba.wdk.plan.disoutbound.order.get",
            {
                "warehouse_code": warehouse_code,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "token": token,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_wdk_plan_disinbound_order_get(
            self,
            warehouse_code,
            start_modified,
            end_modified,
            token='',
            page_no='1',
            page_size='50'
    ):
        """
        门店配货入库单开放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提供门店配货入库单开放接口
        基于修改的开始结束时间进行分页查询
        入参为入库机构code
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31490

        :param warehouse_code: 仓Code
        :param start_modified: 开始修改时间
        :param end_modified: 结束修改时间
        :param token: shou授权token
        :param page_no: 页码
        :param page_size: 每页记录数
        """
        return self._top_request(
            "alibaba.wdk.plan.disinbound.order.get",
            {
                "warehouse_code": warehouse_code,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "token": token,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_wdk_plan_diff_order_update(
            self,
            token='',
            param_list=None
    ):
        """
        质量反馈(差异)单提交开放
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        接入方从质量反馈单列表中拉取到的数据处理完成后需要通过该接口进行提交
        如果非线下补发，归责给仓的部分接口中会自动生成退仓单并将退仓单号设置到对应的sku上
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31491

        :param token: 授权token
        :param param_list: 反馈实体列表
        """
        return self._top_request(
            "alibaba.wdk.plan.diff.order.update",
            {
                "token": token,
                "param_list": param_list
            }
        )

    def alibaba_wdk_marketing_itemdiscount_removeitem(
            self,
            param0,
            param1
    ):
        """
        移除报名的商品
        将报名特价活动的商品从特价活动中移除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31683

        :param param0: 商品对象
        :param param1: 活动基本信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itemdiscount.removeitem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_itemdiscount_additem(
            self,
            param0,
            param1
    ):
        """
        报名特价商品
        在商品特价活动中报名特价商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31684

        :param param0: 商品对象
        :param param1: 活动基本信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itemdiscount.additem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_itempool_queryitems(
            self,
            param
    ):
        """
        查询商品池活动下的商品
        查询商品池活动下面的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31761

        :param param: 查询入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.queryitems",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itembuygift_createactivity(
            self,
            param
    ):
        """
        创建买赠活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31778

        :param param: 创建活动请求入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.itembuygift.createactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itembuygift_queryactivity(
            self,
            param
    ):
        """
        查询买赠活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31779

        :param param: 查询入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.itembuygift.queryactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itembuygift_deleteactivity(
            self,
            param
    ):
        """
        删除买赠活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31780

        :param param: 要删除的活动信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itembuygift.deleteactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itemdiscount_queryactivity(
            self,
            param0
    ):
        """
        查找特价活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31781

        :param param0: 商品对象
        """
        return self._top_request(
            "alibaba.wdk.marketing.itemdiscount.queryactivity",
            {
                "param0": param0
            }
        )

    def alibaba_wdk_marketing_itempool_removeitem(
            self,
            param0,
            param1
    ):
        """
        移除商品池里面的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31782

        :param param0: 商品对象
        :param param1: 活动基本信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.removeitem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_itempool_additem(
            self,
            param0,
            param1
    ):
        """
        增加商品池里面的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31783

        :param param0: 商品对象
        :param param1: 活动基本信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.additem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_itempool_deleteactivity(
            self,
            param
    ):
        """
        删除商品池活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31784

        :param param: 需要删除的活动的信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.deleteactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itempool_queryactivity(
            self,
            param0
    ):
        """
        查找商品池活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31785

        :param param0: 查询商品池活动入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.queryactivity",
            {
                "param0": param0
            }
        )

    def alibaba_wdk_marketing_itempool_createactivity(
            self,
            param
    ):
        """
        添加商品池活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31786

        :param param: 创建活动请求入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.createactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itembuygift_queryitems(
            self,
            param
    ):
        """
        查询买赠活动下的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31787

        :param param: 查询入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.itembuygift.queryitems",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itembuygift_removeitem(
            self,
            param0,
            param1
    ):
        """
        移除买赠活动下的商品。【注意，此接口暂不支持并发！】
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31788

        :param param0: 商品对象
        :param param1: 活动基本信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itembuygift.removeitem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_itembuygift_additem(
            self,
            param0,
            param1
    ):
        """
        增加买赠活动商品。【注意，此接口暂不支持并发！】
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31789

        :param param0: 商品对象
        :param param1: 活动基本信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itembuygift.additem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_trace_url_get(
            self,
            shop_id,
            source_code,
            scan_code
    ):
        """
        溯源url透出
        根据shopId和skuCode返回商品溯源url
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32324

        :param shop_id: 所属门店code
        :param source_code: 来源编码
        :param scan_code: barCode 或者skuCode
        """
        return self._top_request(
            "alibaba.wdk.trace.url.get",
            {
                "shop_id": shop_id,
                "source_code": source_code,
                "scan_code": scan_code
            }
        )

    def alibaba_wdk_marketing_price(
            self,
            page_size,
            page_index,
            sku_codes='',
            shop_ids='',
            end_time='',
            begin_time=''
    ):
        """
        促销价签服务
        获取营销-促销商品中的实时价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32601

        :param page_size: 单页大小
        :param page_index: 页码
        :param sku_codes: 商品sku
        :param shop_ids: 门店标识数组
        :param end_time: 查询结束时间(sku_codes非空无效)
        :param begin_time: 查询开始时间(sku_codes非空无效)
        """
        return self._top_request(
            "alibaba.wdk.marketing.price",
            {
                "page_size": page_size,
                "page_index": page_index,
                "sku_codes": sku_codes,
                "shop_ids": shop_ids,
                "end_time": end_time,
                "begin_time": begin_time
            }
        )

    def alibaba_wdk_item_category_update(
            self,
            bean
    ):
        """
        修改类目
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32806

        :param bean: 入参
        """
        return self._top_request(
            "alibaba.wdk.item.category.update",
            {
                "bean": bean
            }
        )

    def alibaba_wdk_item_trace_url_get(
            self,
            shop_id,
            source_code,
            sku_code
    ):
        """
        根据shopId和skuCode返回商品静态溯源url
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33188

        :param shop_id: 所属门店code
        :param source_code: 来源编码
        :param sku_code: 商品skuCode
        """
        return self._top_request(
            "alibaba.wdk.item.trace.url.get",
            {
                "shop_id": shop_id,
                "source_code": source_code,
                "sku_code": sku_code
            }
        )

    def alibaba_wdk_stock_publish(
            self,
            batch_stock_publish_dto=None
    ):
        """
        五道口库存发布接口（针对外部渠道）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33520

        :param batch_stock_publish_dto: 批量参数
        """
        return self._top_request(
            "alibaba.wdk.stock.publish",
            {
                "batch_stock_publish_dto": batch_stock_publish_dto
            }
        )

    def alibaba_wdk_marketing_itempool_stair_removeitem(
            self,
            param0,
            param1=None
    ):
        """
        删除换购活动商品
        删除换购商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33666

        :param param0: 商品sku信息
        :param param1: 活动信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.stair.removeitem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_itempool_stair_additem(
            self,
            param0=None,
            param1=None
    ):
        """
        商品池阶梯商品添加
        添加商品池阶梯商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33667

        :param param0: 系统自动生成
        :param param1: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.stair.additem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_itempool_stair_queryitem(
            self,
            param0
    ):
        """
        换购商品查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33668

        :param param0: 换购商品查询参数
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.stair.queryitem",
            {
                "param0": param0
            }
        )

    def taobao_wdk_iot_deviceadmin_mqtt_token_get(
            self,
            access_key,
            apply_timestamp
    ):
        """
        获取MQTT访问令牌
        智能硬件设备动态注册和获取mqtt设备信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33673

        :param access_key: accessKey
        :param apply_timestamp: 申请令牌的客户端时间戳
        """
        return self._top_request(
            "taobao.wdk.iot.deviceadmin.mqtt.token.get",
            {
                "access_key": access_key,
                "apply_timestamp": apply_timestamp
            }
        )

    def taobao_wdk_iot_deviceadmin_mqtt_device_getwithtoken(
            self,
            business_code,
            device_type,
            enviro_code,
            device_id,
            apply_access_token
    ):
        """
        获取mqtt设备信息
        智能硬件设备动态注册和获取mqtt设备信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33674

        :param business_code: 业务编码，具体编码请联系杜尘
        :param device_type: 设备类型编码，具体编码请联系杜尘
        :param enviro_code: 环境编码，0日常，1预发，2线上
        :param device_id: 设备的唯一标识码，比如网卡的MAC地址
        :param apply_access_token: 访问令牌
        """
        return self._top_request(
            "taobao.wdk.iot.deviceadmin.mqtt.device.getwithtoken",
            {
                "business_code": business_code,
                "device_type": device_type,
                "enviro_code": enviro_code,
                "device_id": device_id,
                "apply_access_token": apply_access_token
            }
        )

    def alibaba_wdk_fulfill_batch_on_task_status_changed(
            self,
            task_status=None
    ):
        """
        作业状态回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33677

        :param task_status: 作业状态回传对象
        """
        return self._top_request(
            "alibaba.wdk.fulfill.batch.on.task.status.changed",
            {
                "task_status": task_status
            },
            result_processor=lambda x: x["fulfill_logistic_single_result"]
        )

    def alibaba_wdk_fulfill_batch_query_by_batchids(
            self,
            node_type='',
            node_code='',
            batch_ids=''
    ):
        """
        作业小票查询接口
        根据节点等条件查询履约单小票信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33679

        :param node_type: 作业节点类型： WAREHOUSE：仓  DELIVERY_DOCK：配送站 SHOP：经营店
        :param node_code: warehouseCode, 出库仓，由基础店仓维护，盒马全域统一,
        :param batch_ids: 批次号列表
        """
        return self._top_request(
            "alibaba.wdk.fulfill.batch.query.by.batchids",
            {
                "node_type": node_type,
                "node_code": node_code,
                "batch_ids": batch_ids
            },
            result_processor=lambda x: x["fulfill_logistic_list_result"]
        )

    def alibaba_wdk_item_serviceitem_query(
            self,
            hema_category_id,
            org_no
    ):
        """
        查询服务商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35153

        :param hema_category_id: 后台类目
        :param org_no: 机构编码
        """
        return self._top_request(
            "alibaba.wdk.item.serviceitem.query",
            {
                "hema_category_id": hema_category_id,
                "org_no": org_no
            }
        )

    def alibaba_wdk_marketing_coupon_queryitems(
            self,
            param
    ):
        """
        查询优惠券活动下的商品
        查询优惠券活动下面的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35497

        :param param: 查询入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.coupon.queryitems",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_coupon_additem(
            self,
            param0,
            param1
    ):
        """
        在优惠券活动下添加商品。【注意，此接口暂不支持并发！】
        如果是商品券，则添加的商品为券适用的商品；
        如果是品类券，则添加的商品为券排除的商品；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35498

        :param param0: 商品对象
        :param param1: 活动基本信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.coupon.additem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_coupon_endactivity(
            self,
            param
    ):
        """
        结束优惠券活动
        结束优惠券活动。优惠券变为结束领取状态，已领取的优惠券可以继续使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35499

        :param param: 需要删除的活动的信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.coupon.endactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_coupon_queryactivity(
            self,
            param0
    ):
        """
        查询优惠券活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35500

        :param param0: 查询优惠券活动入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.coupon.queryactivity",
            {
                "param0": param0
            }
        )

    def alibaba_wdk_time_get(
            self
    ):
        """
        获得当前系统时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35625

        """
        return self._top_request(
            "alibaba.wdk.time.get"
        )

    def alibaba_wdk_marketing_coupon_createactivity(
            self,
            param
    ):
        """
        优惠券活动创建
        添加优惠券活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36139

        :param param: 创建优惠券活动请求入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.coupon.createactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_trade_order_balance_bill_query(
            self,
            order_balance_bill_request=None
    ):
        """
        分页拉取订单数据
        提供接口供外部调用，分页拉取订单数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36344

        :param order_balance_bill_request: 入参
        """
        return self._top_request(
            "alibaba.wdk.trade.order.balance.bill.query",
            {
                "order_balance_bill_request": order_balance_bill_request
            },
            result_processor=lambda x: x["api_result"]
        )

    def alibaba_wdk_wholesale_inboundorder_commit(
            self,
            inbound_info_commit_req
    ):
        """
        盒马帮退货信息回传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36772

        :param inbound_info_commit_req: 退货信息参数
        """
        return self._top_request(
            "alibaba.wdk.wholesale.inboundorder.commit",
            {
                "inbound_info_commit_req": inbound_info_commit_req
            }
        )

    def alibaba_wdk_wholesale_outboundorder_commit(
            self,
            outbound_info_commit_req
    ):
        """
        盒马帮发货信息回传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36773

        :param outbound_info_commit_req: 发货信息参数
        """
        return self._top_request(
            "alibaba.wdk.wholesale.outboundorder.commit",
            {
                "outbound_info_commit_req": outbound_info_commit_req
            }
        )

    def alibaba_wdk_wholesale_order_commit(
            self,
            order_commit_req
    ):
        """
        盒马帮采购确认订单接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36774

        :param order_commit_req: 采购单信息
        """
        return self._top_request(
            "alibaba.wdk.wholesale.order.commit",
            {
                "order_commit_req": order_commit_req
            }
        )

    def alibaba_price_promotion_activity_delete(
            self,
            outer_promotion_code,
            ou_code
    ):
        """
        删除档期活动
        删除盒马帮档期活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36853

        :param outer_promotion_code: 外部主键
        :param ou_code: 经营店OU
        """
        return self._top_request(
            "alibaba.price.promotion.activity.delete",
            {
                "outer_promotion_code": outer_promotion_code,
                "ou_code": ou_code
            }
        )

    def alibaba_price_promotion_item_delete(
            self,
            sku_codes,
            ou_code,
            outer_promotion_code
    ):
        """
        批量删除档期
        盒马帮批量删除档期商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36854

        :param sku_codes: 商品code
        :param ou_code: toB渠道店OU
        :param outer_promotion_code: 外部档期编码
        """
        return self._top_request(
            "alibaba.price.promotion.item.delete",
            {
                "sku_codes": sku_codes,
                "ou_code": ou_code,
                "outer_promotion_code": outer_promotion_code
            }
        )

    def alibaba_price_promotion_item_add(
            self,
            promotion_content_do=None
    ):
        """
        新增档期商品
        批量新增档期活动商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36855

        :param promotion_content_do: 数据对象
        """
        return self._top_request(
            "alibaba.price.promotion.item.add",
            {
                "promotion_content_do": promotion_content_do
            }
        )

    def alibaba_price_promotion_create(
            self,
            promotion_activity_do
    ):
        """
        营销档期活动创建
        大润发-盒马帮提供新增创建营销活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36856

        :param promotion_activity_do: 档期活动参数
        """
        return self._top_request(
            "alibaba.price.promotion.create",
            {
                "promotion_activity_do": promotion_activity_do
            }
        )

    def alibaba_price_promotion_activity_query(
            self,
            page,
            outer_promotion_code,
            page_size,
            ou_code=''
    ):
        """
        查询盒马帮档期活动详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36865

        :param page: 页码
        :param outer_promotion_code: 外部档期code
        :param page_size: 页码大小
        :param ou_code: TOB店仓编码
        """
        return self._top_request(
            "alibaba.price.promotion.activity.query",
            {
                "page": page,
                "outer_promotion_code": outer_promotion_code,
                "page_size": page_size,
                "ou_code": ou_code
            }
        )

    def alibaba_wdk_sku_query(
            self,
            param
    ):
        """
        查询商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36866

        :param param: 入参
        """
        return self._top_request(
            "alibaba.wdk.sku.query",
            {
                "param": param
            }
        )

    def alibaba_wdk_sku_update(
            self,
            param_list
    ):
        """
        更新商品
        盒马帮一期 更新商品，对商品某些属性提供修改操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36867

        :param param_list: 参数列表
        """
        return self._top_request(
            "alibaba.wdk.sku.update",
            {
                "param_list": param_list
            }
        )

    def alibaba_wdk_sku_channelsku_update(
            self,
            param_list=None
    ):
        """
        更新渠道商品
        批量更新渠道商品，商家通过Top接入
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36868

        :param param_list: 请求参数
        """
        return self._top_request(
            "alibaba.wdk.sku.channelsku.update",
            {
                "param_list": param_list
            }
        )

    def alibaba_wdk_sku_channelsku_add(
            self,
            ch_sku_d_o_list
    ):
        """
        新增渠道商品
        盒马帮1期新增渠道商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36869

        :param ch_sku_d_o_list: 入参模型
        """
        return self._top_request(
            "alibaba.wdk.sku.channelsku.add",
            {
                "ch_sku_d_o_list": ch_sku_d_o_list
            }
        )

    def alibaba_wdk_sku_add(
            self,
            param_list
    ):
        """
        新增商品
        创建RT门店商品或DC商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36870

        :param param_list: 商品列表
        """
        return self._top_request(
            "alibaba.wdk.sku.add",
            {
                "param_list": param_list
            }
        )

    def alibaba_wdk_sku_channelsku_query(
            self,
            param
    ):
        """
        查询渠道商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36876

        :param param: 查询渠道商品的入参
        """
        return self._top_request(
            "alibaba.wdk.sku.channelsku.query",
            {
                "param": param
            }
        )

    def wdk_meal_pos_getfetchmealcode(
            self,
            channel_shop_id
    ):
        """
        五道口餐饮取餐号获取接口
        pos机创建订单前获取餐饮取餐号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37541

        :param channel_shop_id: 渠道店id
        """
        return self._top_request(
            "wdk.meal.pos.getfetchmealcode",
            {
                "channel_shop_id": channel_shop_id
            },
            result_processor=lambda x: x["fetch_meal_code"]
        )

    def alibaba_wdk_stock_increment_get(
            self,
            inventory_increment_get_param=None
    ):
        """
        库存对账每日增量数据获取
        分页拉取库存的每日增量数据获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37806

        :param inventory_increment_get_param: 请求入参
        """
        return self._top_request(
            "alibaba.wdk.stock.increment.get",
            {
                "inventory_increment_get_param": inventory_increment_get_param
            },
            result_processor=lambda x: x["ap_result"]
        )

    def alibaba_wdk_order_aggregate(
            self,
            order_aggregate_query_request=None
    ):
        """
        淘鲜达订单按门店机台号聚合查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38076

        :param order_aggregate_query_request: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.order.aggregate",
            {
                "order_aggregate_query_request": order_aggregate_query_request
            }
        )

    def alibaba_wdk_marketing_version_generate(
            self,
            param=None
    ):
        """
        生成发布使用的版本号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38631

        :param param: 档期版本号参数信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.version.generate",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itempool_activity_create(
            self,
            param
    ):
        """
        创建活动新接口
        创建活动新接口，支持新工具玩法
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38632

        :param param: 创建活动请求入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.activity.create",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_itempool_item_add_async(
            self,
            version,
            param0=None,
            param1=None
    ):
        """
        商品池新增商品
        新分组模型下新增商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38633

        :param version: alibaba.wdk.marketing.version.generate接口生成
        :param param0: 阶梯商品信息
        :param param1: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.item.add.async",
            {
                "version": version,
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_itempool_item_remove_async(
            self,
            param0,
            param1,
            version
    ):
        """
        商品池删除商品
        新模型下删除商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38634

        :param param0: sku信息
        :param param1: 活动信息
        :param version: alibaba.wdk.marketing.version.generate接口生成
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.item.remove.async",
            {
                "param0": param0,
                "param1": param1,
                "version": version
            }
        )

    def alibaba_wdk_marketing_discount_item_add_async(
            self,
            param0,
            version,
            param1=None
    ):
        """
        特价批量新增商品
        新分组模型下新增商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38635

        :param param0: sku信息
        :param version: alibaba.wdk.marketing.version.generate接口生成
        :param param1: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.marketing.discount.item.add.async",
            {
                "param0": param0,
                "version": version,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_discount_item_remove_async(
            self,
            param0,
            version,
            param1=None
    ):
        """
        特价批量移除商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38636

        :param param0: sku信息
        :param version: alibaba.wdk.marketing.version.generate接口生成
        :param param1: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.marketing.discount.item.remove.async",
            {
                "param0": param0,
                "version": version,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_buygift_item_add_async(
            self,
            param0,
            version,
            param1=None
    ):
        """
        批量发布买赠商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38637

        :param param0: sku信息
        :param version: alibaba.wdk.marketing.version.generate接口生成
        :param param1: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.marketing.buygift.item.add.async",
            {
                "param0": param0,
                "version": version,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_buygift_item_remove_async(
            self,
            param0,
            version,
            param1=None
    ):
        """
        批量删除买赠商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38638

        :param param0: sku信息
        :param version: alibaba.wdk.marketing.version.generate接口生成
        :param param1: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.marketing.buygift.item.remove.async",
            {
                "param0": param0,
                "version": version,
                "param1": param1
            }
        )

    def alibaba_wdk_refund_aggregate(
            self,
            refund_aggregate_query_request=None
    ):
        """
        淘鲜达退款单按门店聚合查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38662

        :param refund_aggregate_query_request: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.refund.aggregate",
            {
                "refund_aggregate_query_request": refund_aggregate_query_request
            }
        )

    def alibaba_wdk_member_qrcode_identify(
            self,
            qr_code
    ):
        """
        扫码识别会员接口
        根据用户输入的付款码（支付宝、盒马、淘宝）、商家等信息，查询当前用户的基本信息及对应会员卡信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38732

        :param qr_code: 付款码
        """
        return self._top_request(
            "alibaba.wdk.member.qrcode.identify",
            {
                "qr_code": qr_code
            }
        )

    def alibaba_wdk_order_sync(
            self,
            receipt_order
    ):
        """
        五道口外部订单同步
        外部商户使用自助POS下单订单同步到五道口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38796

        :param receipt_order: 订单
        """
        return self._top_request(
            "alibaba.wdk.order.sync",
            {
                "receipt_order": receipt_order
            }
        )

    def alibaba_wdk_shop_query(
            self,
            ou_code=''
    ):
        """
        门店查询接口
        根据门店code查询门店信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38925

        :param ou_code: 如果不传，返回所有
        """
        return self._top_request(
            "alibaba.wdk.shop.query",
            {
                "ou_code": ou_code
            }
        )

    def alibaba_wdk_sku_category_delete(
            self,
            param
    ):
        """
        商家类目删除接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38942

        :param param: 类目删除请求模型
        """
        return self._top_request(
            "alibaba.wdk.sku.category.delete",
            {
                "param": param
            }
        )

    def alibaba_wdk_sku_category_update(
            self,
            param
    ):
        """
        商家类目修改接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38943

        :param param: 更新请求模型
        """
        return self._top_request(
            "alibaba.wdk.sku.category.update",
            {
                "param": param
            }
        )

    def alibaba_wdk_sku_category_add(
            self,
            param
    ):
        """
        商家类目新增接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38944

        :param param: 类目新增请求模型
        """
        return self._top_request(
            "alibaba.wdk.sku.category.add",
            {
                "param": param
            }
        )

    def alibaba_wdk_supplier_refund_list(
            self,
            supplier_refund_query_request=None
    ):
        """
        五道口按供应商拉取退款单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39183

        :param supplier_refund_query_request: 查询参数
        """
        return self._top_request(
            "alibaba.wdk.supplier.refund.list",
            {
                "supplier_refund_query_request": supplier_refund_query_request
            }
        )

    def alibaba_wdk_supplier_order_list(
            self,
            supplier_order_query_request=None
    ):
        """
        五道口供应商维度正向订单拉取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39184

        :param supplier_order_query_request: 查询参数
        """
        return self._top_request(
            "alibaba.wdk.supplier.order.list",
            {
                "supplier_order_query_request": supplier_order_query_request
            }
        )

    def alibaba_wdk_marketing_fullrange_removeitem(
            self,
            param0,
            param1=None
    ):
        """
        全场活动删除购品
        删除换购商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39195

        :param param0: 商品sku信息
        :param param1: 活动信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.fullrange.removeitem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_marketing_fullrange_queryitem(
            self,
            param0
    ):
        """
        全场活动查询换购品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39215

        :param param0: 换购商品查询参数
        """
        return self._top_request(
            "alibaba.wdk.marketing.fullrange.queryitem",
            {
                "param0": param0
            }
        )

    def alibaba_wdk_marketing_fullrange_queryactivity(
            self,
            param0
    ):
        """
        全场活动查询活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39216

        :param param0: 查询活动入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.fullrange.queryactivity",
            {
                "param0": param0
            }
        )

    def alibaba_wdk_marketing_fullrange_deleteactivity(
            self,
            param
    ):
        """
        全场活动删除活动接口
        全场活动删除活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39220

        :param param: 需要删除的活动的信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.fullrange.deleteactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_fullrange_createactivity(
            self,
            param
    ):
        """
        创建全场活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39221

        :param param: 创建活动请求入参
        """
        return self._top_request(
            "alibaba.wdk.marketing.fullrange.createactivity",
            {
                "param": param
            }
        )

    def alibaba_wdk_marketing_fullrange_addexchangeitem(
            self,
            param0=None,
            param1=None
    ):
        """
        全场增加换购品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39222

        :param param0: 系统自动生成
        :param param1: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.marketing.fullrange.addexchangeitem",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_supplier_refund_get(
            self,
            supplier_refund_query_list_request=None
    ):
        """
        五道口按订单号批量查询供应商退款单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39372

        :param supplier_refund_query_list_request: 查询入参
        """
        return self._top_request(
            "alibaba.wdk.supplier.refund.get",
            {
                "supplier_refund_query_list_request": supplier_refund_query_list_request
            }
        )

    def alibaba_wdk_supplier_order_get(
            self,
            supplier_order_query_list_request=None
    ):
        """
        五道口按订单号批量查询供应商正向订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39373

        :param supplier_order_query_list_request: 查询参数
        """
        return self._top_request(
            "alibaba.wdk.supplier.order.get",
            {
                "supplier_order_query_list_request": supplier_order_query_list_request
            }
        )

    def taobao_wdk_equipment_deviceadmin_deviceinfo_get(
            self,
            warehouse_code,
            device_type
    ):
        """
        获取五道口设备管理信息
        通过仓编码获取五道口设备管理信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39408

        :param warehouse_code: 仓编码
        :param device_type: 设备类型
        """
        return self._top_request(
            "taobao.wdk.equipment.deviceadmin.deviceinfo.get",
            {
                "warehouse_code": warehouse_code,
                "device_type": device_type
            }
        )

    def alibaba_wdk_marketing_expire_promotion_delete(
            self,
            param0=None
    ):
        """
        短保优惠删除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39410

        :param param0: 删除短保优惠
        """
        return self._top_request(
            "alibaba.wdk.marketing.expire.promotion.delete",
            {
                "param0": param0
            }
        )

    def alibaba_wdk_marketing_expire_promotion_create(
            self,
            param0
    ):
        """
        短保优惠创建
        过期优惠优惠信息录入
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39411

        :param param0: 创建短保优惠
        """
        return self._top_request(
            "alibaba.wdk.marketing.expire.promotion.create",
            {
                "param0": param0
            }
        )

    def alibaba_wdk_marketing_expire_promotion_query(
            self,
            shop_id,
            sku_code
    ):
        """
        短保优惠查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39412

        :param shop_id: 店铺id
        :param sku_code: 商品skucode
        """
        return self._top_request(
            "alibaba.wdk.marketing.expire.promotion.query",
            {
                "shop_id": shop_id,
                "sku_code": sku_code
            }
        )

    def alibaba_wdk_sku_category_query(
            self,
            param
    ):
        """
        商家类目获取接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39542

        :param param: 查询类目请模型
        """
        return self._top_request(
            "alibaba.wdk.sku.category.query",
            {
                "param": param
            }
        )

    def alibaba_wdk_oldpos_refund_create(
            self,
            pos_refund_create_request=None
    ):
        """
        五道口外部商户老pos机产生的退款单同步进盒马
        淘鲜达外部商户老pos机产生的退款单同步进淘鲜达
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39543

        :param pos_refund_create_request: 入参
        """
        return self._top_request(
            "alibaba.wdk.oldpos.refund.create",
            {
                "pos_refund_create_request": pos_refund_create_request
            }
        )

    def alibaba_wdk_oldpos_order_create(
            self,
            pos_order_create_request=None
    ):
        """
        淘鲜达外部商户老pos机产生的订单同步进淘鲜达
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39544

        :param pos_order_create_request: 入参
        """
        return self._top_request(
            "alibaba.wdk.oldpos.order.create",
            {
                "pos_order_create_request": pos_order_create_request
            }
        )

    def alibaba_wdk_sku_combinesku_query(
            self,
            param
    ):
        """
        组合商品查询接口
        查询组合商品接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39580

        :param param: 请求参数
        """
        return self._top_request(
            "alibaba.wdk.sku.combinesku.query",
            {
                "param": param
            }
        )

    def alibaba_wdk_sku_combinesku_update(
            self,
            param_list=None
    ):
        """
        组合商品更新接口
        组合商品修改接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39644

        :param param_list: 请求参数
        """
        return self._top_request(
            "alibaba.wdk.sku.combinesku.update",
            {
                "param_list": param_list
            }
        )

    def alibaba_wdk_sku_combinesku_add(
            self,
            param_list=None
    ):
        """
        组合商品新增接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39645

        :param param_list: 请求参数
        """
        return self._top_request(
            "alibaba.wdk.sku.combinesku.add",
            {
                "param_list": param_list
            }
        )

    def taobao_wdk_iot_conveyor_conveyorconfig_get(
            self,
            warehouse_code,
            conveyor_id
    ):
        """
        获取悬挂链基本配置信息
        用于从云端WCS获取悬挂链基本配置信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40123

        :param warehouse_code: 仓编码
        :param conveyor_id: 悬挂链id，默认为1
        """
        return self._top_request(
            "taobao.wdk.iot.conveyor.conveyorconfig.get",
            {
                "warehouse_code": warehouse_code,
                "conveyor_id": conveyor_id
            }
        )

    def alibaba_wdk_member_card_get(
            self,
            member_query=None
    ):
        """
        查询会员卡信息
        根据会员卡查询会员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40224

        :param member_query: 系统自动生成
        """
        return self._top_request(
            "alibaba.wdk.member.card.get",
            {
                "member_query": member_query
            },
            result_processor=lambda x: x["api_result"]
        )

    def alibaba_wdk_marketing_version_commit(
            self,
            param
    ):
        """
        提交版本号
        提交版本号，标识结束此版本操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40250

        :param param: 版本号提交参数
        """
        return self._top_request(
            "alibaba.wdk.marketing.version.commit",
            {
                "param": param
            }
        )

    def alibaba_wdk_fulfill_config_read_limit_order(
            self,
            warehouse_code_list
    ):
        """
        根据仓code查询仓限单配置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40260

        :param warehouse_code_list: 仓code集合
        """
        return self._top_request(
            "alibaba.wdk.fulfill.config.read.limit.order",
            {
                "warehouse_code_list": warehouse_code_list
            },
            result_processor=lambda x: x["results"]
        )

    def alibaba_wdk_ums_inventory_publish(
            self,
            wdk_erp_arrival_notice
    ):
        """
        初始化覆盖实物库存
        先去库存这边查询当前实物库存有多少的量，然后算出来需要增加的量。接下来调用ums原来的入库语义的接口进行库存的增量补充
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40711

        :param wdk_erp_arrival_notice: 1
        """
        return self._top_request(
            "alibaba.wdk.ums.inventory.publish",
            {
                "wdk_erp_arrival_notice": wdk_erp_arrival_notice
            },
            result_processor=lambda x: x["api_result"]
        )

    def alibaba_wdk_scm_lrp_order_predict(
            self,
            param_order_predict_query
    ):
        """
        单量预测
        提供基于门店和配送站的订单量预测，可用于提前安排人力资源
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40727

        :param param_order_predict_query: 单量预测查询参数
        """
        return self._top_request(
            "alibaba.wdk.scm.lrp.order.predict",
            {
                "param_order_predict_query": param_order_predict_query
            }
        )

    def alibaba_wdk_sku_warehousesku_query(
            self,
            sku_code_list,
            warehouse_code
    ):
        """
        仓商品查询接口(指定商品编码)
        提供指定仓商品编码查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40927

        :param sku_code_list: 商品编码
        :param warehouse_code: 仓编码
        """
        return self._top_request(
            "alibaba.wdk.sku.warehousesku.query",
            {
                "sku_code_list": sku_code_list,
                "warehouse_code": warehouse_code
            }
        )

    def alibaba_wdk_sku_warehousesku_scroll_query(
            self,
            warehouse_code,
            scroll_id=''
    ):
        """
        仓商品遍历接口(游标)
        提供仓商品数据接口查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40930

        :param warehouse_code: 仓库编码
        :param scroll_id: 游标
        """
        return self._top_request(
            "alibaba.wdk.sku.warehousesku.scroll.query",
            {
                "warehouse_code": warehouse_code,
                "scroll_id": scroll_id
            }
        )

    def alibaba_wdk_reverse_refund(
            self,
            open_refund_req_d_t_o
    ):
        """
        退款打款
        五道口退款打款开放能力接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41041

        :param open_refund_req_d_t_o: 退款打款请求
        """
        return self._top_request(
            "alibaba.wdk.reverse.refund",
            {
                "open_refund_req_d_t_o": open_refund_req_d_t_o
            }
        )

    def alibaba_wdk_hrworkbench_cdporgs_query(
            self
    ):
        """
        homs人力资源组织树查询接口
        提供查询homs人力组织树的接口，按照商家做权限隔离。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41317

        """
        return self._top_request(
            "alibaba.wdk.hrworkbench.cdporgs.query"
        )

    def alibaba_wdk_order_sync_withitem(
            self,
            pos_order_and_item_sync
    ):
        """
        订单和商品同步接口
        轻pos,将订单和商品的信息一起传到盒马这边，进行创单和添加商品处理。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41364

        :param pos_order_and_item_sync: 商家传过来的交易和商品信息
        """
        return self._top_request(
            "alibaba.wdk.order.sync.withitem",
            {
                "pos_order_and_item_sync": pos_order_and_item_sync
            }
        )

    def alibaba_wdk_hrworkbench_cdpemps_query(
            self,
            page_size,
            biz_key,
            biz_code,
            current_page
    ):
        """
        homs员工信息核对查询服务
        给盒马可靠软件服务商Cdp系统，做非阿里编员工数据一致性核对检查
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41373

        :param page_size: 页面大小
        :param biz_key: 业务授权key
        :param biz_code: 业务授权code
        :param current_page: 起始页
        """
        return self._top_request(
            "alibaba.wdk.hrworkbench.cdpemps.query",
            {
                "page_size": page_size,
                "biz_key": biz_key,
                "biz_code": biz_code,
                "current_page": current_page
            }
        )

    def wdk_meal_item_producecurve_sync(
            self,
            param=None
    ):
        """
        餐饮商品烹饪曲线同步接口
        该API用于盒煲宝项目中供应商烹饪曲线修改后同步到餐饮系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41426

        :param param: 入参
        """
        return self._top_request(
            "wdk.meal.item.producecurve.sync",
            {
                "param": param
            },
            result_processor=lambda x: x["count"]
        )

    def alibaba_wdk_marketing_itempool_addcategory(
            self,
            item_pool_activity_category=None,
            common_activity_param=None
    ):
        """
        增加商品池里面的类目
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41563

        :param item_pool_activity_category: 类目对象
        :param common_activity_param: 活动对象
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.addcategory",
            {
                "item_pool_activity_category": item_pool_activity_category,
                "common_activity_param": common_activity_param
            }
        )

    def alibaba_wdk_marketing_itempool_excludeskucode(
            self,
            param0,
            param1
    ):
        """
        商品池排除商品【品类优惠使用】
        品类优惠新增排除池
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41564

        :param param0: 商品对象
        :param param1: 活动基本信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.itempool.excludeskucode",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_wdk_shop_sku_inventory_init(
            self,
            shop_id
    ):
        """
        渠道商品库存初始化
        渠道店商品库存初始化
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41712

        :param shop_id: 渠道店id
        """
        return self._top_request(
            "alibaba.wdk.shop.sku.inventory.init",
            {
                "shop_id": shop_id
            },
            result_processor=lambda x: x["api_result"]
        )

    def alibaba_wdk_finance_order_backflow(
            self,
            finance_order_detail_request
    ):
        """
        财务订单回流
        星巴克拉取财务订单回流数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41985

        :param finance_order_detail_request: 财务订单回流入参
        """
        return self._top_request(
            "alibaba.wdk.finance.order.backflow",
            {
                "finance_order_detail_request": finance_order_detail_request
            },
            result_processor=lambda x: x["api_result"]
        )

    def alibaba_wdk_marketing_open_data_relation_query(
            self,
            out_data_ids,
            biz_code,
            sub_biz_code
    ):
        """
        数据关联关系查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41995

        :param out_data_ids: 外部数据Id
        :param biz_code: 数据类型：WDK_MARKET:五道口营销
        :param sub_biz_code: 数据子类型：ACTIVITY:营销活动数据
        """
        return self._top_request(
            "alibaba.wdk.marketing.open.data.relation.query",
            {
                "out_data_ids": out_data_ids,
                "biz_code": biz_code,
                "sub_biz_code": sub_biz_code
            }
        )

    def alibaba_wdk_marketing_open_version_count(
            self,
            version_id,
            operate_id
    ):
        """
        版本数量查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41996

        :param version_id: 查询版本号
        :param operate_id: 操作Id
        """
        return self._top_request(
            "alibaba.wdk.marketing.open.version.count",
            {
                "version_id": version_id,
                "operate_id": operate_id
            }
        )

    def alibaba_wdk_marketing_open_version_apply(
            self,
            sync_version
    ):
        """
        数据同步版本号申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41997

        :param sync_version: 同步版本信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.open.version.apply",
            {
                "sync_version": sync_version
            }
        )

    def alibaba_wdk_marketing_open_darunfa_activity_sku_sync(
            self,
            version_id,
            activity_id,
            activity_sku_list=None,
            shop_id=''
    ):
        """
        营销商品数据同步
        大润发营销商品数据同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41998

        :param version_id: 数据版本Id
        :param activity_id: 大润发活动Id
        :param activity_sku_list: 淘鲜达活动商品信息
        :param shop_id: 活动对应的门店Id
        """
        return self._top_request(
            "alibaba.wdk.marketing.open.darunfa.activity.sku.sync",
            {
                "version_id": version_id,
                "activity_id": activity_id,
                "activity_sku_list": activity_sku_list,
                "shop_id": shop_id
            }
        )

    def alibaba_wdk_marketing_open_darunfa_activity_sync(
            self,
            activity_list,
            shop_id,
            version_id
    ):
        """
        活动数据同步
        大润发活动数据同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41999

        :param activity_list: 大润发活动数据
        :param shop_id: 门店Id
        :param version_id: 版本ID
        """
        return self._top_request(
            "alibaba.wdk.marketing.open.darunfa.activity.sync",
            {
                "activity_list": activity_list,
                "shop_id": shop_id,
                "version_id": version_id
            }
        )

    def alibaba_wdk_order_finance_bill_query(
            self,
            bill_query_request=None
    ):
        """
        资金合规商家账单
        拉取资金合规商家账单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42490

        :param bill_query_request: 入参
        """
        return self._top_request(
            "alibaba.wdk.order.finance.bill.query",
            {
                "bill_query_request": bill_query_request
            }
        )

    def alibaba_wdk_item_merchant_category_query(
            self,
            query_request=None
    ):
        """
        查询商品的商家叶子类目
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42522

        :param query_request: 请求
        """
        return self._top_request(
            "alibaba.wdk.item.merchant.category.query",
            {
                "query_request": query_request
            }
        )

    def alibaba_wdk_merchant_routing_register(
            self,
            merchant_routing_info_register
    ):
        """
        商家注册更新路由信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42601

        :param merchant_routing_info_register: 接口入参
        """
        return self._top_request(
            "alibaba.wdk.merchant.routing.register",
            {
                "merchant_routing_info_register": merchant_routing_info_register
            }
        )

    def wdk_wms_pick_medicine_query(
            self,
            shop_id,
            uuid
    ):
        """
        查询拣货单中的药品信息
        联营商药机查询拣货单中的药品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42642

        :param shop_id: shopId
        :param uuid: uuid
        """
        return self._top_request(
            "wdk.wms.pick.medicine.query",
            {
                "shop_id": shop_id,
                "uuid": uuid
            }
        )

    def wdk_wms_pick_medicine_checksell(
            self,
            uuid='',
            shop_id=''
    ):
        """
        联营商药品柜核销
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42643

        :param uuid: 从二维码扫描出的信息
        :param shop_id: shopId
        """
        return self._top_request(
            "wdk.wms.pick.medicine.checksell",
            {
                "uuid": uuid,
                "shop_id": shop_id
            }
        )

    def alibaba_wdk_marketing_open_heartbeat(
            self,
            heart_beat
    ):
        """
        心跳服务【10s一次】
        商家数据同步心跳服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42745

        :param heart_beat: 心跳信息
        """
        return self._top_request(
            "alibaba.wdk.marketing.open.heartbeat",
            {
                "heart_beat": heart_beat
            }
        )

    def alibaba_wdk_sku_merchantsku_scroll_query(
            self,
            org_no='',
            scroll_id=''
    ):
        """
        商家商品批量查询接口
        提供主档商品数据接口查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43208

        :param org_no: HM
        :param scroll_id: 第一次为null，后面从结果中获取
        """
        return self._top_request(
            "alibaba.wdk.sku.merchantsku.scroll.query",
            {
                "org_no": org_no,
                "scroll_id": scroll_id
            }
        )

    def alibaba_wdk_sku_storesku_scroll_query(
            self,
            store_id='',
            scroll_id=''
    ):
        """
        门店商品批量查询接口
        提供门店商品批量查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43209

        :param store_id: 经营的id
        :param scroll_id: 历游标，首次调用传递null，后续传递ScrollPageResult.getScrollId()
        """
        return self._top_request(
            "alibaba.wdk.sku.storesku.scroll.query",
            {
                "store_id": store_id,
                "scroll_id": scroll_id
            }
        )

    def alibaba_txcs_brandmarketing_coupon_qrcode_get(
            self,
            coupon_qrcode_param_do
    ):
        """
        品牌营销导购员券页面二维码获取
        构建券页码二维码url
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43861

        :param coupon_qrcode_param_do: 请求信息
        """
        return self._top_request(
            "alibaba.txcs.brandmarketing.coupon.qrcode.get",
            {
                "coupon_qrcode_param_do": coupon_qrcode_param_do
            },
            result_processor=lambda x: x["api_result"]
        )

    def alibaba_txcs_brandmarketing_coupon_statistics_get(
            self,
            coupon_statistics_param_do
    ):
        """
        品牌营销导购员券推广统计数据回流
        请求券统计数据回流
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43862

        :param coupon_statistics_param_do: 请求信息
        """
        return self._top_request(
            "alibaba.txcs.brandmarketing.coupon.statistics.get",
            {
                "coupon_statistics_param_do": coupon_statistics_param_do
            },
            result_processor=lambda x: x["api_page_result"]
        )

    def alibaba_wdk_purchase_price(
            self,
            wdk_open_purchase_price=None
    ):
        """
        rt回传采购价
        猫超共享库存项目-rt回传采购价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44087

        :param wdk_open_purchase_price: 入参
        """
        return self._top_request(
            "alibaba.wdk.purchase.price",
            {
                "wdk_open_purchase_price": wdk_open_purchase_price
            }
        )

    def alibaba_wdk_fulfill_bill_return_warehouse_on_task_status_changed(
            self,
            return_warehouse_result=None
    ):
        """
        退仓结果回传
        退货入仓结果回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44157

        :param return_warehouse_result: 退仓结果
        """
        return self._top_request(
            "alibaba.wdk.fulfill.bill.return.warehouse.on.task.status.changed",
            {
                "return_warehouse_result": return_warehouse_result
            }
        )

    def alibaba_wdk_eleme_bill_detail_get(
            self,
            ele_bill_request
    ):
        """
        饿了么对账单查询，带订单明细
        查询饿了么对账单信息，带订单明细
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44162

        :param ele_bill_request: 对账单查询参数
        """
        return self._top_request(
            "alibaba.wdk.eleme.bill.detail.get",
            {
                "ele_bill_request": ele_bill_request
            }
        )

    def alibaba_wdk_eleme_bill_get(
            self,
            ele_bill_request
    ):
        """
        饿了么日维度对账单查询
        查询饿了么日维度对账单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44163

        :param ele_bill_request: 对账单查询参数
        """
        return self._top_request(
            "alibaba.wdk.eleme.bill.get",
            {
                "ele_bill_request": ele_bill_request
            }
        )


class TbALiDaYu(DingTalkBaseAPI):
    """
    阿里大于API
    """

    def alibaba_aliqin_fc_voice_num_doublecall(
            self,
            caller_num,
            caller_show_num,
            called_num,
            called_show_num,
            session_time_out='',
            extend=''
    ):
        """
        多方通话
        根据传入的主叫号码与被叫号码，由系统依次向主叫号码与被叫号码发起呼叫，双方都应答后，开始一对一通话并开始计费。使用前需要在阿里大于管理中心添加呼叫双方的显示号码。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25443

        :param caller_num: 主叫号码，支持国内手机号与固话号码,格式如下057188773344,13911112222,4001112222,95500
        :param caller_show_num: 主叫号码侧的号码显示，传入的显示号码必须是阿里大于“管理中心-号码管理”中申请通过的号码。显示号码格式如下057188773344，4001112222，95500
        :param called_num: 被叫号码，支持国内手机号与固话号码,格式如下057188773344,13911112222,4001112222,95500
        :param called_show_num: 被叫号码侧的号码显示，传入的显示号码可以是阿里大于“管理中心-号码管理”中申请通过的号码。显示号码格式如下057188773344，4001112222，95500。显示号码也可以为主叫号码。
        :param session_time_out: 通话超时时长，如接通后到达120秒时，通话会因为超时自动挂断。若无需设置超时时长，可不传。
        :param extend: 公共回传参数，在“消息返回”中会透传回该参数；举例：用户可以传入自己下级的会员ID，在消息返回时，该会员ID会包含在内，用户可以根据该会员ID识别是哪位会员使用了你的应用
        """
        return self._top_request(
            "alibaba.aliqin.fc.voice.num.doublecall",
            {
                "caller_num": caller_num,
                "caller_show_num": caller_show_num,
                "called_num": called_num,
                "called_show_num": called_show_num,
                "session_time_out": session_time_out,
                "extend": extend
            }
        )

    def alibaba_aliqin_fc_tts_num_singlecall(
            self,
            called_num,
            called_show_num,
            tts_code,
            extend='',
            tts_param=''
    ):
        """
        文本转语音通知
        向指定手机号码发起单向呼叫，将文本模板内容转化为语音播放给被叫方。使用前需要在阿里大于管理中心添加去电显示号码与文本转语音模板。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25444

        :param called_num: 被叫号码，支持国内手机号与固话号码,格式如下057188773344,13911112222,4001112222,95500
        :param called_show_num: 被叫号显，传入的显示号码必须是阿里大于“管理中心-号码管理”中申请或购买的号码
        :param tts_code: TTS模板ID，传入的模板必须是在阿里大于“管理中心-语音TTS模板管理”中的可用模板
        :param extend: 公共回传参数，在“消息返回”中会透传回该参数；举例：用户可以传入自己下级的会员ID，在消息返回时，该会员ID会包含在内，用户可以根据该会员ID识别是哪位会员使用了你的应用
        :param tts_param: 文本转语音（TTS）模板变量，传参规则{'key'：'value'}，key的名字须和TTS模板中的变量名一致，多个变量之间以逗号隔开，示例：{'name':'xiaoming','code':'1234'}
        """
        return self._top_request(
            "alibaba.aliqin.fc.tts.num.singlecall",
            {
                "called_num": called_num,
                "called_show_num": called_show_num,
                "tts_code": tts_code,
                "extend": extend,
                "tts_param": tts_param
            }
        )

    def alibaba_aliqin_fc_voice_num_singlecall(
            self,
            called_num,
            called_show_num,
            voice_code,
            extend=''
    ):
        """
        语音通知
        向指定手机号码发起单向呼叫，播放指定的语音文件内容。使用前需要在阿里大于管理中心添加去电显示号码与语音文件。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25445

        :param called_num: 被叫号码，支持国内手机号与固话号码,格式如下057188773344,13911112222,4001112222,95500
        :param called_show_num: 被叫号显，传入的显示号码必须是阿里大于“管理中心-号码管理”中申请通过的号码
        :param voice_code: 语音文件ID，传入的语音文件必须是在阿里大于“管理中心-语音文件管理”中的可用语音文件
        :param extend: 公共回传参数，在“消息返回”中会透传回该参数；举例：用户可以传入自己下级的会员ID，在消息返回时，该会员ID会包含在内，用户可以根据该会员ID识别是哪位会员使用了你的应用
        """
        return self._top_request(
            "alibaba.aliqin.fc.voice.num.singlecall",
            {
                "called_num": called_num,
                "called_show_num": called_show_num,
                "voice_code": voice_code,
                "extend": extend
            }
        )

    def alibaba_aliqin_fc_sms_num_send(
            self,
            sms_type,
            sms_free_sign_name,
            rec_num,
            sms_template_code,
            extend='',
            sms_param=''
    ):
        """
        短信发送
        向指定手机号码发送模板短信，模板内可设置部分变量。使用前需要在阿里大于管理中心添加短信签名与短信模板。测试时请直接使用正式环境HTTP请求地址。
        【重要】批量发送（一次传递多个号码eg:1381111111,1382222222）会产生相应的延迟，触达时间要求高的建议单条发送
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25450

        :param sms_type: 短信类型，传入值请填写normal
        :param sms_free_sign_name: 短信签名，传入的短信签名必须是在阿里大于“管理中心-验证码/短信通知/推广短信-配置短信签名”中的可用签名。如“阿里大于”已在短信签名管理中通过审核，则可传入”阿里大于“（传参时去掉引号）作为短信签名。短信效果示例：【阿里大于】欢迎使用阿里大于服务。
        :param rec_num: 短信接收号码。支持单个或多个手机号码，传入号码为11位手机号码，不能加0或+86。群发短信需传入多个号码，以英文逗号分隔，一次调用最多传入200个号码。示例：18600000000,13911111111,13322222222
        :param sms_template_code: 短信模板ID，传入的模板必须是在阿里大于“管理中心-短信模板管理”中的可用模板。示例：SMS_585014
        :param extend: 公共回传参数，在“消息返回”中会透传回该参数；举例：用户可以传入自己下级的会员ID，在消息返回时，该会员ID会包含在内，用户可以根据该会员ID识别是哪位会员使用了你的应用
        :param sms_param: 短信模板变量，传参规则{'key':'value'}，key的名字须和申请模板中的变量名一致，多个变量之间以逗号隔开。示例：针对模板“验证码${code}，您正在进行${product}身份验证，打死不要告诉别人哦！”，传参时需传入{'code':'1234','product':'alidayu'}
        """
        return self._top_request(
            "alibaba.aliqin.fc.sms.num.send",
            {
                "sms_type": sms_type,
                "sms_free_sign_name": sms_free_sign_name,
                "rec_num": rec_num,
                "sms_template_code": sms_template_code,
                "extend": extend,
                "sms_param": sms_param
            }
        )

    def alibaba_aliqin_fc_sms_num_query(
            self,
            rec_num,
            query_date,
            current_page,
            page_size,
            biz_id=''
    ):
        """
        短信发送记录查询
        短信发送记录查询。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26039

        :param rec_num: 短信接收号码
        :param query_date: 短信发送日期，支持近30天记录查询，格式yyyyMMdd
        :param current_page: 分页参数,页码
        :param page_size: 分页参数，每页数量。最大值50
        :param biz_id: 短信发送流水
        """
        return self._top_request(
            "alibaba.aliqin.fc.sms.num.query",
            {
                "rec_num": rec_num,
                "query_date": query_date,
                "current_page": current_page,
                "page_size": page_size,
                "biz_id": biz_id
            }
        )

    def alibaba_aliqin_fc_flow_query(
            self,
            out_id=''
    ):
        """
        流量直充查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26305

        :param out_id: 唯一流水号
        """
        return self._top_request(
            "alibaba.aliqin.fc.flow.query",
            {
                "out_id": out_id
            },
            result_processor=lambda x: x["value"]
        )

    def alibaba_aliqin_fc_flow_charge(
            self,
            phone_num,
            grade,
            out_recharge_id,
            reason='',
            scope='0',
            is_province='false'
    ):
        """
        流量直充
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26306

        :param phone_num: 手机号
        :param grade: 需要充值的流量
        :param out_recharge_id: 唯一流水号
        :param reason: 充值原因
        :param scope: 0:全国漫游流量  1:省内流量。不填默认值为0
        :param is_province: 当scope=0时，is_province=true为指定分省通道。默认值为false
        """
        return self._top_request(
            "alibaba.aliqin.fc.flow.charge",
            {
                "phone_num": phone_num,
                "grade": grade,
                "out_recharge_id": out_recharge_id,
                "reason": reason,
                "scope": scope,
                "is_province": is_province
            },
            result_processor=lambda x: x["value"]
        )

    def alibaba_aliqin_fc_flow_grade(
            self,
            phone_num=''
    ):
        """
        流量直充档位表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26312

        :param phone_num: 手机号码。如果未填手机号码，返回所有运营商的档位信息。如果填了手机号码，则返回此手机号码所属运营商的档位，如果手机号码对应的运营商未知，则返回所有档位
        """
        return self._top_request(
            "alibaba.aliqin.fc.flow.grade",
            {
                "phone_num": phone_num
            },
            result_processor=lambda x: x["value"]
        )

    def alibaba_aliqin_fc_flow_charge_province(
            self,
            phone_num,
            grade,
            out_recharge_id,
            reason=''
    ):
        """
        流量直充分省接口
        流量直充
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26477

        :param phone_num: 手机号
        :param grade: 需要充值的流量
        :param out_recharge_id: 唯一流水号
        :param reason: 充值原因
        """
        return self._top_request(
            "alibaba.aliqin.fc.flow.charge.province",
            {
                "phone_num": phone_num,
                "grade": grade,
                "out_recharge_id": out_recharge_id,
                "reason": reason
            },
            result_processor=lambda x: x["value"]
        )

    def alibaba_aliqin_fc_ivr_num_call(
            self,
            called_number,
            called_show_number,
            use_tts,
            menu_code,
            session_time_out='',
            extend='',
            bye_code='',
            menu_args='',
            play_times='1',
            params='',
            service_number=''
    ):
        """
        ivr呼叫
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27163

        :param called_number: 被叫号码，支持国内手机号与固话号码,格式如下057188773344,13911112222,4001112222,95500
        :param called_show_number: 被叫号码侧的号码显示，传入的显示号码可以是阿里大鱼“管理中心-号码管理”中申请通过的号码。显示号码格式如下057188773344，4001112222，95500。显示号码也可以为主叫号码。
        :param use_tts: 可选值：tts或voice。
        :param menu_code: 当值为tts时，menu_codet填写tts模板；当值为voice时，menu_code填写语音模板编码
        :param session_time_out: 通话超时时长，如接通后到达120秒时，通话会因为超时自动挂断。若无需设置超时时长，可不传。
        :param extend: 公共回传参数，在消息中带回
        :param bye_code: 结束语编码，当use_tts=voice时，该字段填写语音文件编码，当use_tts=tts时，该字段填写tts模板编码
        :param menu_args: 当use_tts=tts时，该字段可填写tts模板变量参数
        :param play_times: 播放次数
        :param params: 按键映射事件
        :param service_number: 人工服务号码
        """
        return self._top_request(
            "alibaba.aliqin.fc.ivr.num.call",
            {
                "called_number": called_number,
                "called_show_number": called_show_number,
                "use_tts": use_tts,
                "menu_code": menu_code,
                "session_time_out": session_time_out,
                "extend": extend,
                "bye_code": bye_code,
                "menu_args": menu_args,
                "play_times": play_times,
                "params": params,
                "service_number": service_number
            }
        )

    def alibaba_aliqin_fc_iot_qrycard(
            self,
            bill_source,
            bill_real,
            iccid
    ):
        """
        查询终端信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27487

        :param bill_source: 外部计费来源
        :param bill_real: 外部计费号
        :param iccid: ICCID
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.qrycard",
            {
                "bill_source": bill_source,
                "bill_real": bill_real,
                "iccid": iccid
            }
        )

    def alibaba_aliqin_fc_iot_rechargeCard(
            self,
            bill_source,
            bill_real,
            offer_id,
            out_recharge_id,
            iccid,
            eff_code,
            eff_time=''
    ):
        """
        按终端号订购增值业务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27488

        :param bill_source: 外部计费号类型：写‘ICCID’
        :param bill_real: iccid的值
        :param offer_id: 流量包offerId
        :param out_recharge_id: 外部id,用来做幂等
        :param iccid: ICCID
        :param eff_code: 生效时间,1000,立即生效; AUTO_ORD,下周期自动续订
        :param eff_time: yyyy-MM-dd HH:mm:ss
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.rechargeCard",
            {
                "bill_source": bill_source,
                "bill_real": bill_real,
                "offer_id": offer_id,
                "out_recharge_id": out_recharge_id,
                "iccid": iccid,
                "eff_code": eff_code,
                "eff_time": eff_time
            }
        )

    def alibaba_aliqin_fc_iot_modbind(
            self,
            opion_type,
            bill_real,
            iccid,
            imei,
            bill_source,
            mid_pat_channel,
            newimei=''
    ):
        """
        物联网绑定/换绑API
        支持用户的设备的换绑和解绑操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28522

        :param opion_type: chgBind：换绑；unBind：解绑
        :param bill_real: 物联卡和iccid保持一致
        :param iccid: iccid （20位）
        :param imei: 目前绑定的设备imei
        :param bill_source: 物联卡业务：若无特殊为ICCID
        :param mid_pat_channel: 若无特殊物联卡传入122
        :param newimei: 换绑的时候必传，换的新设备imei
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.modbind",
            {
                "opion_type": opion_type,
                "bill_real": bill_real,
                "iccid": iccid,
                "imei": imei,
                "bill_source": bill_source,
                "mid_pat_channel": mid_pat_channel,
                "newimei": newimei
            }
        )

    def alibaba_aliqin_fc_iot_qry_personinfo(
            self,
            iccid,
            mid_pat_channel,
            userid=''
    ):
        """
        查询物联卡个人实人认证信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28553

        :param iccid: 需要查询的iccid
        :param mid_pat_channel: 由系统根据业务分配
        :param userid: 指定查询某userid
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.qry.personinfo",
            {
                "iccid": iccid,
                "mid_pat_channel": mid_pat_channel,
                "userid": userid
            }
        )

    def alibaba_aliqin_fc_iot_cardStatus(
            self,
            iccid
    ):
        """
        物联卡状态查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28645

        :param iccid: SIM卡号
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.cardStatus",
            {
                "iccid": iccid
            }
        )

    def alibaba_aliqin_fc_iot_cardInfo(
            self,
            iccid
    ):
        """
        物联卡信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28647

        :param iccid: SIM卡号
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.cardInfo",
            {
                "iccid": iccid
            }
        )

    def alibaba_aliqin_fc_iot_device_post(
            self,
            imei,
            device_type='',
            comments='',
            mid_pat_channel=''
    ):
        """
        商家提交设备信息
        物联网商家设备信息录入
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28669

        :param imei: 15位imei号
        :param device_type: 设备类型（将来扩展）
        :param comments: 备注
        :param mid_pat_channel: 扩展字段
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.device.post",
            {
                "imei": imei,
                "device_type": device_type,
                "comments": comments,
                "mid_pat_channel": mid_pat_channel
            }
        )

    def alibaba_aliqin_fc_iot_device_isexist(
            self,
            imei,
            device_type='',
            mid_pat_channel=''
    ):
        """
        判断设备是否存在
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28672

        :param imei: 设备编号
        :param device_type: 设备类型（预留将来扩展）
        :param mid_pat_channel: 渠道扩展编码（预留）
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.device.isexist",
            {
                "imei": imei,
                "device_type": device_type,
                "mid_pat_channel": mid_pat_channel
            }
        )

    def alibaba_aliqin_fc_iot_sms_send(
            self,
            sms_type,
            rec_num,
            sms_template_code,
            extend='',
            sms_param=''
    ):
        """
        物联网短信发送
        发送物联网短信，只允许使用物联网短信模板
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28775

        :param sms_type: 短信类型，传入值请填写normal
        :param rec_num: 短信接收号码。
        :param sms_template_code: 短信模板ID，传入的模板必须是在阿里大于“管理中心-短信模板管理”中的可用模板。示例：SMS_585014
        :param extend: 公共回传参数，在“消息返回”中会透传回该参数；举例：用户可以传入自己下级的会员ID，在消息返回时，该会员ID会包含在内，用户可以根据该会员ID识别是哪位会员使用了你的应用
        :param sms_param: 短信模板变量，传参规则{'key':'value'}，key的名字须和申请模板中的变量名一致，多个变量之间以逗号隔开。示例：针对模板“验证码${code}，您正在进行${product}身份验证，打死不要告诉别人哦！”，传参时需传入{'code':'1234','product':'alidayu'}
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.sms.send",
            {
                "sms_type": sms_type,
                "rec_num": rec_num,
                "sms_template_code": sms_template_code,
                "extend": extend,
                "sms_param": sms_param
            }
        )

    def alibaba_aliqin_fc_iot_cardoffer(
            self,
            billreal,
            billsource
    ):
        """
        查询物联网卡上订购的offer
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29114

        :param billreal: 具体ICCID的值
        :param billsource: ICCID
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.cardoffer",
            {
                "billreal": billreal,
                "billsource": billsource
            }
        )

    def alibaba_aliqin_fc_iot_useroscontrol(
            self,
            iccid,
            action
    ):
        """
        物联卡用户管理停开机功能
        物联网针对用户级管理停开支持
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29291

        :param iccid: 物联卡的iccid
        :param action: 用户停开的操作类型：MANAGE_RESUME、MANAGE_STOP
        """
        return self._top_request(
            "alibaba.aliqin.fc.iot.useroscontrol",
            {
                "iccid": iccid,
                "action": action
            }
        )

    def alibaba_isv_digitalsms_createtemplate(
            self,
            template_name,
            template_contents,
            apply_remark
    ):
        """
        数字短信模板创建
        数字短信模板创建，给聚石塔，类型：2
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40353

        :param template_name: 模板名称
        :param template_contents: 系统自动生成
        :param apply_remark: 申请说明
        """
        return self._top_request(
            "alibaba.isv.digitalsms.createtemplate",
            {
                "template_name": template_name,
                "template_contents": template_contents,
                "apply_remark": apply_remark
            }
        )

    def alibaba_aliyunindep_digitalsms_createtemplate(
            self,
            template_name,
            template_contents,
            apply_remark
    ):
        """
        数字短信模板创建
        数字短信模板创建，给阿里云一方产品使用，类型：9
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42447

        :param template_name: 模板名称
        :param template_contents: 系统自动生成
        :param apply_remark: 申请说明
        """
        return self._top_request(
            "alibaba.aliyunindep.digitalsms.createtemplate",
            {
                "template_name": template_name,
                "template_contents": template_contents,
                "apply_remark": apply_remark
            }
        )


class TbTaoBaoNeiRong(DingTalkBaseAPI):
    """
    淘宝内容API
    """

    def taobao_beehive_computron_data(
            self,
            scene_id,
            page_size='10',
            current_page='1'
    ):
        """
        内容平台筛选数据接口
        针对内容平台的基础内容定制筛选规则，将筛选出的数据按照规则ID输出给业务方。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26752

        :param scene_id: 规则场景ID
        :param page_size: 每页大小
        :param current_page: 当前页
        """
        return self._top_request(
            "taobao.beehive.computron.data",
            {
                "scene_id": scene_id,
                "page_size": page_size,
                "current_page": current_page
            }
        )

    def taobao_beehive_content_detail(
            self,
            feed_id,
            has_content='false',
            has_favorite_count='false',
            has_comment_count='false',
            has_favour_count='false'
    ):
        """
        内容详情接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        根据内容平台中内容id查询详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27011

        :param feed_id: 内容ID
        :param has_content: 是否需要内容详情
        :param has_favorite_count: 是否需要收藏数
        :param has_comment_count: 是否需要评论数
        :param has_favour_count: 是否需要收藏数
        """
        return self._top_request(
            "taobao.beehive.content.detail",
            {
                "feed_id": feed_id,
                "has_content": has_content,
                "has_favorite_count": has_favorite_count,
                "has_comment_count": has_comment_count,
                "has_favour_count": has_favour_count
            }
        )

    def taobao_beehive_item_cps_url(
            self,
            platform,
            ad_user_id,
            source_type,
            biz_type,
            item_id
    ):
        """
        分佣链接生成接口
        传入包括itemId,accountId,bizType在内的参数，对应参数返回分佣链接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27196

        :param platform: 平台，一般为手机
        :param ad_user_id: 达人ID
        :param source_type: 站外是1
        :param biz_type: 业务方，新浪为sina
        :param item_id: 商品ID
        """
        return self._top_request(
            "taobao.beehive.item.cps.url",
            {
                "platform": platform,
                "ad_user_id": ad_user_id,
                "source_type": source_type,
                "biz_type": biz_type,
                "item_id": item_id
            }
        )


class TbLvXingYongChe(DingTalkBaseAPI):
    """
    旅行用车API
    """

    def taobao_alitrip_car_order_confirm(
            self,
            param_order_confirm
    ):
        """
        司机应答API
        航旅事业群-度假事业部-旅行用车项目组对外部服务商提供的司机应答回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25925

        :param param_order_confirm: 请求对象
        """
        return self._top_request(
            "taobao.alitrip.car.order.confirm",
            {
                "param_order_confirm": param_order_confirm
            }
        )

    def taobao_alitrip_car_order_complete(
            self,
            param_order_complete=None
    ):
        """
        服务完成API
        用来接收服务商订单流程完成信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25938

        :param param_order_complete: 服务完成API
        """
        return self._top_request(
            "taobao.alitrip.car.order.complete",
            {
                "param_order_complete": param_order_complete
            }
        )

    def taobao_alitrip_car_order_accept(
            self,
            param_order_accept
    ):
        """
        确认接单
        用来接收服务商确认接单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26037

        :param param_order_accept: 确认订单请求
        """
        return self._top_request(
            "taobao.alitrip.car.order.accept",
            {
                "param_order_accept": param_order_accept
            }
        )

    def taobao_alitrip_car_rent_order_cancel(
            self,
            param0=None
    ):
        """
        租车-取消订单
        服务商主动取消用户订单或者拒绝取消订单.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26554

        :param param0: 取消请求对象
        """
        return self._top_request(
            "taobao.alitrip.car.rent.order.cancel",
            {
                "param0": param0
            }
        )

    def taobao_alitrip_car_order_status(
            self,
            order_id,
            provider_id,
            status,
            operation=''
    ):
        """
        商家订单状态改变通知接口（神州专车接口）
        商家订单状态改变通知接口，神州专车专用接口！
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26874

        :param order_id: 飞猪订单ID
        :param provider_id: 服务商ID
        :param status: 司机服务状态。arriving-司机已出发，arrived-司机已到达，serviceStarted-已开始服务，serviceFinished-已结束服务
        :param operation: 固定值：statusChanged
        """
        return self._top_request(
            "taobao.alitrip.car.order.status",
            {
                "order_id": order_id,
                "provider_id": provider_id,
                "status": status,
                "operation": operation
            }
        )

    def taobao_alitrip_car_driver_status_update(
            self,
            order_id,
            provider_id,
            status,
            time,
            third_order_id='',
            seller_id=''
    ):
        """
        司机服务状态更新接口
        飞猪用车业务回调接口，用于服务商实时回传更新司机当前服务状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29393

        :param order_id: 飞猪订单id
        :param provider_id: 服务商标识，由飞猪提供给到各服务商
        :param status: 司机服务状态。1-司机已出发，2-司机已到达，3-司机已开始服务
        :param time: 状态变更相应时间（如司机出发时间、司机到达时间、服务开始时间），格式：yyyy-mm-dd hh:mm:ss
        :param third_order_id: 服务商订单id
        :param seller_id: 可选，卖家id
        """
        return self._top_request(
            "taobao.alitrip.car.driver.status.update",
            {
                "order_id": order_id,
                "provider_id": provider_id,
                "status": status,
                "time": time,
                "third_order_id": third_order_id,
                "seller_id": seller_id
            }
        )

    def taobao_alitrip_car_order_query(
            self,
            order_id
    ):
        """
        飞猪订单状态查询接口
        提供给直连商家查询在飞猪平台上产生的订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29767

        :param order_id: 飞猪平台订单id
        """
        return self._top_request(
            "taobao.alitrip.car.order.query",
            {
                "order_id": order_id
            },
            result_processor=lambda x: x["first_result"]
        )

    def taobao_alitrip_car_order_info(
            self,
            param_order_info=None
    ):
        """
        查询单个订单
        旅行用车增加单个订单查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29769

        :param param_order_info: 单个订单查询对象
        """
        return self._top_request(
            "taobao.alitrip.car.order.info",
            {
                "param_order_info": param_order_info
            }
        )

    def taobao_alitrip_domestic_rent_car_status_update(
            self,
            status,
            order_id,
            provider_id,
            third_order_id=''
    ):
        """
        航旅国内租车订单状态更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41576

        :param status: 121-用车中（用户取车成功） 122-待结算（用户还车成功）
        :param order_id: 飞猪平台订单号
        :param provider_id: 服务商标识，由飞猪提供给到各服务商
        :param third_order_id: 服务商平台订单号
        """
        return self._top_request(
            "taobao.alitrip.domestic.rent.car.status.update",
            {
                "status": status,
                "order_id": order_id,
                "provider_id": provider_id,
                "third_order_id": third_order_id
            }
        )

    def alitrip_travel_crsdriver_arrange(
            self,
            crs_driver_arrange_param
    ):
        """
        CRS接送机商家派司机接口
        提供给CRS接送机商家派司机的API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44234

        :param crs_driver_arrange_param: 请求对象
        """
        return self._top_request(
            "alitrip.travel.crsdriver.arrange",
            {
                "crs_driver_arrange_param": crs_driver_arrange_param
            }
        )

    def alitrip_travel_crsorder_complete(
            self,
            crs_order_complete_param
    ):
        """
        CRS接送机商家服务完成接口
        提供给CRS接送机商家的服务完成回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44235

        :param crs_order_complete_param: 请求对象
        """
        return self._top_request(
            "alitrip.travel.crsorder.complete",
            {
                "crs_order_complete_param": crs_order_complete_param
            }
        )

    def alitrip_travel_crsorder_search(
            self,
            crs_order_status,
            begin_car_use_time,
            end_car_use_time,
            page_size='20',
            current_page='1'
    ):
        """
        CRS接送机订单列表搜索
        提供给CRS商家搜索订单列表，仅返回订单号列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44511

        :param crs_order_status: 订单状态，10-待派单，20-待用车，30-已取消，40-待处理退款申请，60-已关闭，70-已完成
        :param begin_car_use_time: 用车时间-起始
        :param end_car_use_time: 用车时间-终止
        :param page_size: 页大小，默认20
        :param current_page: 当前页，默认值1
        """
        return self._top_request(
            "alitrip.travel.crsorder.search",
            {
                "crs_order_status": crs_order_status,
                "begin_car_use_time": begin_car_use_time,
                "end_car_use_time": end_car_use_time,
                "page_size": page_size,
                "current_page": current_page
            },
            result_processor=lambda x: x["order_string_list"]
        )


class TbMenPiaoShangPinGuanLi(DingTalkBaseAPI):
    """
    门票-商品管理API
    """

    def alitrip_ticket_scenic_query(
            self,
            ali_scenic_id='',
            current_page='',
            out_scenic_id=''
    ):
        """
        【门票API2.0】卖家已发布门票商品列表查询接口（根据景点维度查询）
        查询卖家已发布过的门票商品列表，根据景点维度聚合查询。如果卖家在该景点下未发布过任何商品，则查询不到数据！
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27941

        :param ali_scenic_id: 标准景点ID。ali_scenic_id，out_scenic_id二者至少需要填写一个
        :param current_page: 当前分页。每页默认最多返回20条数据
        :param out_scenic_id: 商家景点ID。ali_scenic_id，out_scenic_id二者至少需要填写一个
        """
        return self._top_request(
            "alitrip.ticket.scenic.query",
            {
                "ali_scenic_id": ali_scenic_id,
                "current_page": current_page,
                "out_scenic_id": out_scenic_id
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_ticket_rule_query(
            self,
            out_rule_id
    ):
        """
        【门票API2.0】门票规则信息查询接口
        门票规则信息查询接口：返回商家上传的门票规则信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27942

        :param out_rule_id: 卖家景点规则编码
        """
        return self._top_request(
            "alitrip.ticket.rule.query",
            {
                "out_rule_id": out_rule_id
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_ticket_product_query(
            self,
            out_product_id='',
            ali_product_id='',
            item_id=''
    ):
        """
        【门票API2.0】门票商品查询接口
        门票商品查询接口：返回商家上传的门票商品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27945

        :param out_product_id: 商户自定义收费项目编码。与ali_product_id，item_id 三者至少填写一个
        :param ali_product_id: 阿里标准收费项目id。与out_product_id，item_id 三者至少填写一个
        :param item_id: 商品ID。与out_product_id，ali_product_id三者至少填写一个
        """
        return self._top_request(
            "alitrip.ticket.product.query",
            {
                "out_product_id": out_product_id,
                "ali_product_id": ali_product_id,
                "item_id": item_id
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_ticket_scenic_bind(
            self,
            ali_scenic_id,
            out_scenic_id,
            city='',
            address='',
            out_scenic_name='',
            province='',
            update_out_scenic_id=''
    ):
        """
        【门票API2.0】门票景点绑定接口
        门票景点绑定接口，用于建立阿里标准景点id与商家系统景点id的映射关系。该接口同时支持新建和修改映射关系，当用户没有为ali_scenic_id建立过映射关系时，则判断为新建映射关系，否则为修改。可以通过设置update_out_scenic_id来修改ali_scenic_id与out_scenic_id的映射关系。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27946

        :param ali_scenic_id: 必填，阿里旅行对应的景点编码
        :param out_scenic_id: 必填，商户系统中的景点编码，用于与ali_scenic_id建立映射关系
        :param city: 商户景点城市
        :param address: 商户景点地址
        :param out_scenic_name: 商户景点名称
        :param province: 商户景点省份
        :param update_out_scenic_id: 可选，如果需要更新out_scenic_id与ali_scenic_id的映射关系时 需要填写
        """
        return self._top_request(
            "alitrip.ticket.scenic.bind",
            {
                "ali_scenic_id": ali_scenic_id,
                "out_scenic_id": out_scenic_id,
                "city": city,
                "address": address,
                "out_scenic_name": out_scenic_name,
                "province": province,
                "update_out_scenic_id": update_out_scenic_id
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_ticket_skus_upload(
            self,
            ticket_type,
            price_rules,
            ali_product_id='',
            out_product_id='',
            item_id='',
            ticket_season='',
            ticket_area=''
    ):
        """
        【门票API2.0】门票价格库存同步接口
        航旅度假新版门票商品价格库存同步接口。
        注1、一个票种下可以挂多个规则（规则id必须不一样，每个规则实际对应了一个sku），同一个规则可以在不同票种下使用。
        注2、日历库存和区间库存门票，统一使用DateInventory结构。对于日历库存门票请上传每一天的价格库存；对于区间库存门票，建议只上传开始和结束日期的价格库存，也支持上传每天的价格库存，系统会自动进行聚合（取第一天的价格为区间价格，累计所有天的库存为区间库存）。
        注3、该接口同时支持 新增某个规则的价格库存 和 更新现有规则的价格库存。如果不清楚是否已在某个规则下上传过价格库存，请使用alitrip.ticket.product.query接口进行查询。如果该规则在该票种下已经存在，则该接口会判断为是价格库存更新操作。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27947

        :param ticket_type: 必填，门票 票种类型
        :param price_rules: 必填，该票种下使用的价格规则。
        :param ali_product_id: 特殊必填，阿里标准收费项目id。ali_product_id, item_id与out_product_id三选一，至少填写其中一个
        :param out_product_id: 特殊必填，商户收费项目id。ali_product_id, item_id与out_product_id三选一，至少填写其中一个
        :param item_id: 特殊必填，淘宝商品id。ali_product_id, item_id与out_product_id三选一，至少填写其中一个
        :param ticket_season: 可选，门票场次（场次门票专用，对于场次门票必选）
        :param ticket_area: 可选，门票区域（场次门票专用，对于场次门票必选）
        """
        return self._top_request(
            "alitrip.ticket.skus.upload",
            {
                "ticket_type": ticket_type,
                "price_rules": price_rules,
                "ali_product_id": ali_product_id,
                "out_product_id": out_product_id,
                "item_id": item_id,
                "ticket_season": ticket_season,
                "ticket_area": ticket_area
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_ticket_rule_upload(
            self,
            out_rule_id,
            out_rule_name='',
            out_scenic_id='',
            ali_scenic_id='',
            rule_type='',
            rule_status='',
            refund_type='',
            refund_desc='',
            auto_refund_support='',
            refund_custom_rules='',
            visitor_require='',
            visitor_infos='',
            visitor_limit_able='',
            visitor_limit_mode='',
            visitor_limit_type='',
            visitor_limit_num='',
            enter_type='',
            enter_voucher_type='',
            enter_voucher_value='',
            ticket_change_adderss='',
            enter_address='',
            fee_include='',
            extra_desc=''
    ):
        """
        【门票API2.0】景点门票规则维护接口
        景点门票规则维护接口。该接口同时支持新发规则和编辑现有规则，如果out_rule_id下没有发布过规则，则系统将判断为新发一个规则，否则认为是编辑现有规则。
        对于新发布规则的情况，有些参数是必填的，请仔细查看各字段说明。对于编辑的情况，除out_rule_id外都是可选，编辑情况支持增量更新（某个参数不传则使用该规则上原有值）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27949

        :param out_rule_id: 商户票种规则id
        :param out_rule_name: 新发布规则时必填。商户票种规则名称
        :param out_scenic_id: 商户景点编码。新发布规则时必填，out_scenic_id与ali_scenic_id二选一，至少填写其中一个
        :param ali_scenic_id: 阿里旅行景点编码。新发布规则时必填，out_scenic_id与ali_scenic_id二选一，至少填写其中一个
        :param rule_type: 可选，票种规则类型：0-实体票规则，1-电子票（包含手工票和直连票）规则。新发规则时不传 默认为1
        :param rule_status: 可选，规则状态。0-生效，-1-失效。新发规则时不传 默认生效状态。
        :param refund_type: 新发布规则时必填。退票类型。1-无条件退改， 2-有条件退改， 3-不可退改。
        :param refund_desc: （该字段已废弃，请使用结构化退改规则字段替代：refund_custom_rules）新发布规则时特殊选填。退票描述。当refund_type为2时，该字段必填
        :param auto_refund_support: 可选，是否支持自动退款，0或为空时表示不支持。0-不支持，1-只支持'售中自动退款'，2-只支持'过期未使用自动退款'，3-同时支持'售中自动退款'和'过期未使用自动退款'
        :param refund_custom_rules: 结构化自定义退款规则（json数组格式），当refund_type为2时，该字段必填。【type字段说明（特别注意：2和3不能同时存在）：1（游玩日期前退改规则），2（游玩日期当日退改规则），3（区间票 游玩日期有效期内退改规则），4（游玩日期后退改规则），5（其他情况退改规则）。amount字段说明：收取的手续费。unit字段说明：手续费单位，1（票价百分比），2（固定金额，单位分）。】  【示例含义说明：1、游玩日期前2天16点30分前申请退款，每张票收取票价20%的手续费；2、(单日票）游玩日当天12点00分前申请退款，每张票收取票价50%手续费；3、（区间票）游玩日期有效期，最后一天11点00分前申请退款，每张票收取票价60%手续费；4、游玩日期后7天23点59分前申请退款，每张票收取票价80%手续费；5、其他情况，每张票收取固定100元手续费。】
        :param visitor_require: 新发布规则时必填。出游人信息设置。1、不需要，2、仅需一位游客信息。3、需要所有游客信息。不填默认为1（不需要）。注：实体票（rule_type=2）不需要出游人信息，电子票（rule_type=1）一般是需要出游人信息
        :param visitor_infos: 新发布规则时特殊选填。需要的出游人信息，需要出游人信息时必填。 2:手机号,3:身份证,4:姓名,5:护照号码 6:护照姓名拼音。示例格式：2,3,4
        :param visitor_limit_able: 新发布规则时必填。出游人 是否限购。1:限购,2:不限购
        :param visitor_limit_mode: 新发布规则时特殊选填。限购模式：mode为1按天, mode为2按周, mode为3按月
        :param visitor_limit_type: 新发布规则时特殊选填。限购类型。0-身份证限购， 1-手机号限购
        :param visitor_limit_num: 新发布规则时特殊选填。限购数量
        :param enter_type: 新发布规则时必填。入园类型。1-用兑换凭证直接入园，2-用兑换凭证换票入园
        :param enter_voucher_type: 新发布规则时必填。入园使用的凭证类型。1、二维码，2、身份证，3、二维码或身份证，4:数字码，5、手机号，6、其它。当enter_type为1时，该字段只能选择1～3 。而当enterType为2时，该字段可设置1～6
        :param enter_voucher_value: 其他入园凭证类型。当enter_voucher_type=6时，填写其他入园凭证类型。
        :param ticket_change_adderss: 新发布规则时特殊选填。换票地址。当enter_type为2时，该字段必填。
        :param enter_address: 新发布规则时必填。景区入园地址。游客在景区的详细入园地址，请仔细填写。
        :param fee_include: 新发布规则时必填。门票费用包含，请详细说明该门票商品包含的费用信息。
        :param extra_desc: 新发布规则时必填。门票商品一些游客须知的补充说明。800字符限制
        """
        return self._top_request(
            "alitrip.ticket.rule.upload",
            {
                "out_rule_id": out_rule_id,
                "out_rule_name": out_rule_name,
                "out_scenic_id": out_scenic_id,
                "ali_scenic_id": ali_scenic_id,
                "rule_type": rule_type,
                "rule_status": rule_status,
                "refund_type": refund_type,
                "refund_desc": refund_desc,
                "auto_refund_support": auto_refund_support,
                "refund_custom_rules": refund_custom_rules,
                "visitor_require": visitor_require,
                "visitor_infos": visitor_infos,
                "visitor_limit_able": visitor_limit_able,
                "visitor_limit_mode": visitor_limit_mode,
                "visitor_limit_type": visitor_limit_type,
                "visitor_limit_num": visitor_limit_num,
                "enter_type": enter_type,
                "enter_voucher_type": enter_voucher_type,
                "enter_voucher_value": enter_voucher_value,
                "ticket_change_adderss": ticket_change_adderss,
                "enter_address": enter_address,
                "fee_include": fee_include,
                "extra_desc": extra_desc
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_ticket_product_upload(
            self,
            ali_product_id='',
            out_product_id='',
            update_out_product_id='',
            out_product_name='',
            inventory_type='',
            need_enter_date='',
            expire_date='',
            reserve_limit_type='',
            reserve_limit_rule='',
            code_sending_info=None,
            title='',
            pic_urls='',
            desc=''
    ):
        """
        【门票API2.0】门票收费项目管理接口
        航旅度假新版门票商品（门票收费项目）管理接口：支持门票商品的发布、编辑。如果在ali_product_id下没有发布过门票商品，则系统将判断为新发布商品，否则是编辑已有商品。可以通过辅助查询接口判断是否已在某个ali_product_id下发布过门票商品。
        对应新发布商品的情况，有些参数是必填的，请仔细查看各字段说明。对于编辑商品的情况，ali_product_id和out_product_id至少需要填一个，其他参数都是可选，编辑情况支持增量更新（某个参数不传则使用该商品上原有值）。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27950

        :param ali_product_id: 新发布门票商品时必填。阿里旅行提供的收费项目编码，与商户收费项目编码进行绑定。注：一个收费项目编码对应了一个淘宝商品
        :param out_product_id: 可选，商户自定义收费项目编码。注：如果商户上传了自定义收费项目编码，则在价格库存同步接口可以使用该自定义编码更新价格库存。
        :param update_out_product_id: 可选，商家想要更新映射关系的时候，用于更新商户自定义收费项目编码。
        :param out_product_name: 商户收费项目名称
        :param inventory_type: 新发布门票商品时必填。门票商品 库存类型。1、日历库存， 2、非日历库存
        :param need_enter_date: inventory_type=2时必填，指定该收费项目在购买时是否需要买家指定入园日期。1、需要，2-不需要
        :param expire_date: 新发布门票商品时必填。门票有效期：指定入园日期后 多少天内有效。当为数字时，表示多少天内有效；当为日期时，表示到某日期有效，日期格式：yyyy-MM-dd。发布时不填则默认设置30天内有效
        :param reserve_limit_type: 新发布门票商品时必填。门票 预定时间限制。1、表示无限制 购买后可立即入园，2、有限制，此时预定时间限制规则必填。
        :param reserve_limit_rule: 特殊选填，门票 预定时间限制规则。格式：1_18_00_3 或者 1_18_00_3_30，含义：必须提前1天拍下，且在18点00分前支付成功，订单才生效。当为提前0天时（即当日票），最后两个数字才生效，指当日票需要在出票后3小时30分钟后方可入园。
        :param code_sending_info: 新发布门票商品时必填。门票商品发码方式
        :param title: 可选，商品标题
        :param pic_urls: 可选，商品主图，最多支持5张。图片链接支持外链图片（即商家系统中图片链接，必须外网可访问，且格式为png、jpg或jpeg，大小在500k以内），或者用户淘宝空间内的图片链接。对于外链图片，将自动下载并上传用户淘宝图片空间，上传失败的外链图片将自动忽略不计。
        :param desc: 可选，商品详情描述，不超过50000个字符。详情描述支持纯文本描述，也支持html格式的详情描述。html格式的详情描述中 图片链接支持外链图片（必须外网可访问， 且格式为png、jpg或jpeg，大小在500k以内）和淘宝图片空间链接。
        """
        return self._top_request(
            "alitrip.ticket.product.upload",
            {
                "ali_product_id": ali_product_id,
                "out_product_id": out_product_id,
                "update_out_product_id": update_out_product_id,
                "out_product_name": out_product_name,
                "inventory_type": inventory_type,
                "need_enter_date": need_enter_date,
                "expire_date": expire_date,
                "reserve_limit_type": reserve_limit_type,
                "reserve_limit_rule": reserve_limit_rule,
                "code_sending_info": code_sending_info,
                "title": title,
                "pic_urls": pic_urls,
                "desc": desc
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_ticket_skus_batch_upload(
            self,
            ticket_price_rules,
            ali_product_id='',
            out_product_id='',
            item_id=''
    ):
        """
        【门票API2.0】门票价格库存同步接口（多票种批量更新）
        飞猪度假新版门票商品价格库存同步接口（多票种批量更新）。
        注1、一个票种下可以挂多个规则（规则id必须不一样，每个规则实际对应了一个sku），同一个规则可以在不同票种下使用。
        注2、日历库存和区间库存门票，统一使用DateInventory结构。对于日历库存门票请上传每一天的价格库存；对于区间库存门票，建议只上传开始和结束日期的价格库存，也支持上传每天的价格库存，系统会自动进行聚合（取第一天的价格为区间价格，累计所有天的库存为区间库存）。
        注3、该接口同时支持 新增某个规则的价格库存 和 更新现有规则的价格库存。如果不清楚是否已在某个规则下上传过价格库存，请使用alitrip.ticket.product.query接口进行查询。如果该规则在该票种下已经存在，则该接口会判断为是价格库存更新操作。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36414

        :param ticket_price_rules: 必填，各票种下sku的价格库存参数。
        :param ali_product_id: 特殊必填，阿里标准收费项目id。ali_product_id, item_id与out_product_id三选一，至少填写其中一个
        :param out_product_id: 特殊必填，商户收费项目id。ali_product_id, item_id与out_product_id三选一，至少填写其中一个
        :param item_id: 特殊必填，淘宝商品id。ali_product_id, item_id与out_product_id三选一，至少填写其中一个
        """
        return self._top_request(
            "alitrip.ticket.skus.batch.upload",
            {
                "ticket_price_rules": ticket_price_rules,
                "ali_product_id": ali_product_id,
                "out_product_id": out_product_id,
                "item_id": item_id
            },
            result_processor=lambda x: x["update_result"]
        )


class TbCaiNiaoWuXian(DingTalkBaseAPI):
    """
    菜鸟无线API
    """

    def cainiao_guoguo_cp_grasptaskbycourier(
            self,
            cp_code,
            cp_user_id,
            group_task,
            group_task_size
    ):
        """
        小件员提交抢单申请
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        小件员提交抢单申请（注意返回的是申请是否成功而不是抢单是否成功，抢单成功与否会有异步消息给出）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27311

        :param cp_code: 小件员所在公司编号
        :param cp_user_id: 小件员员工编号
        :param group_task: 抢单任务组编号
        :param group_task_size: 任务组内任务数量
        """
        return self._top_request(
            "cainiao.guoguo.cp.grasptaskbycourier",
            {
                "cp_code": cp_code,
                "cp_user_id": cp_user_id,
                "group_task": group_task,
                "group_task_size": group_task_size
            }
        )

    def cainiao_guoguo_cp_backup_assigncourier(
            self,
            cp_code,
            cp_user_id,
            lp_code='',
            task_id='',
            assign_reason_code='',
            assign_reason='',
            mobile=''
    ):
        """
        CP兜底后指定接单的小件员
        CP兜底后指定接单的小件员；CP改派小件员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27314

        :param cp_code: 小件员所在公司编号
        :param cp_user_id: 小件员员工编号
        :param lp_code: LP订单号
        :param task_id: 任务ID
        :param assign_reason_code: 指派/改派原因编码
        :param assign_reason: 指派/改派原因
        :param mobile: 小件员手机号
        """
        return self._top_request(
            "cainiao.guoguo.cp.backup.assigncourier",
            {
                "cp_code": cp_code,
                "cp_user_id": cp_user_id,
                "lp_code": lp_code,
                "task_id": task_id,
                "assign_reason_code": assign_reason_code,
                "assign_reason": assign_reason,
                "mobile": mobile
            }
        )

    def cainiao_guoguo_cp_uploadmailnobycourier(
            self,
            cp_code,
            cp_user_id,
            task_id,
            mailno,
            lp_code='',
            waybill_code='',
            waybill_short_address='',
            mail_cp_code=''
    ):
        """
        小件员通过CP服务端回传运单号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27451

        :param cp_code: 小件员所在公司编号
        :param cp_user_id: 小件员员工编号
        :param task_id: 任务ID
        :param mailno: 运单号
        :param lp_code: LP订单号
        :param waybill_code: 电子面单编码
        :param waybill_short_address: 电子面单地址
        :param mail_cp_code: 运单号所属的CP公司编号
        """
        return self._top_request(
            "cainiao.guoguo.cp.uploadmailnobycourier",
            {
                "cp_code": cp_code,
                "cp_user_id": cp_user_id,
                "task_id": task_id,
                "mailno": mailno,
                "lp_code": lp_code,
                "waybill_code": waybill_code,
                "waybill_short_address": waybill_short_address,
                "mail_cp_code": mail_cp_code
            }
        )

    def cainiao_guoguo_cp_nborderfrontr_updateuser(
            self,
            cp_user_id,
            cp_code,
            name='',
            work_station_name='',
            alipay_account='',
            city_name='',
            city_code='',
            work_station_code='',
            mobile=''
    ):
        """
        小件员信息变更
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27462

        :param cp_user_id: 小件员员工编号
        :param cp_code: 小件员所在公司编号
        :param name: 姓名
        :param work_station_name: 网点站点信息
        :param alipay_account: 支付宝账号
        :param city_name: 城市
        :param city_code: 城市行政区域编码
        :param work_station_code: 网点站点编码
        :param mobile: 手机号
        """
        return self._top_request(
            "cainiao.guoguo.cp.nborderfrontr.updateuser",
            {
                "cp_user_id": cp_user_id,
                "cp_code": cp_code,
                "name": name,
                "work_station_name": work_station_name,
                "alipay_account": alipay_account,
                "city_name": city_name,
                "city_code": city_code,
                "work_station_code": work_station_code,
                "mobile": mobile
            }
        )

    def cainiao_guoguo_cp_nborderfrontr_uploadcoordinate(
            self,
            cp_code,
            cp_user_id,
            time_stamp,
            source,
            lng,
            lat,
            gps_type
    ):
        """
        上传小件员GPS位置信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27463

        :param cp_code: 小件员所在公司编号
        :param cp_user_id: 小件员员工编号
        :param time_stamp: 上报时间，格式：yyyy-MM-dd HH:mm:ss
        :param source: 来源：1.小件员app sdk 2.驿站 3. 裹裹 10001.圆通行者
        :param lng: 经度
        :param lat: 纬度
        :param gps_type: 0 安卓定位，     1 苹果定位，  2 其他系统定位，   10 高德定位，  11 百度定位，  12 google定位     13 其他
        """
        return self._top_request(
            "cainiao.guoguo.cp.nborderfrontr.uploadcoordinate",
            {
                "cp_code": cp_code,
                "cp_user_id": cp_user_id,
                "time_stamp": time_stamp,
                "source": source,
                "lng": lng,
                "lat": lat,
                "gps_type": gps_type
            }
        )

    def cainiao_guoguo_cp_validatecancelbycourier(
            self,
            cp_code,
            cp_user_id,
            task_id='',
            lp_code=''
    ):
        """
        小件员取消订单校验
        校验小件员是否可以取消订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27721

        :param cp_code: 小件员所在公司编号
        :param cp_user_id: 小件员员工编号
        :param task_id: 任务ID
        :param lp_code: LP订单号
        """
        return self._top_request(
            "cainiao.guoguo.cp.validatecancelbycourier",
            {
                "cp_code": cp_code,
                "cp_user_id": cp_user_id,
                "task_id": task_id,
                "lp_code": lp_code
            }
        )

    def cainiao_guoguo_cp_querycancelreasonbycourier(
            self,
            task_id='',
            lp_code='',
            order_source=''
    ):
        """
        获取小件员取消原因列表
        获取小件员取消原因列表（取消原因按订单来源会有不同配置，入参的优先级为1.如果taskId不为空并且>0时优先按taskId取对应订单的order_source;2.如果lpCode不为空，按LpCode取对应订单的order_source;3.直接取入参中的orderSource，所以如果CP确定订单来源，直接填这个入参即可）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27760

        :param task_id: 任务ID
        :param lp_code: LP订单号
        :param order_source: 订单来源，0-裹裹，1-支付宝，2-天猫，3-淘宝，4-闲鱼
        """
        return self._top_request(
            "cainiao.guoguo.cp.querycancelreasonbycourier",
            {
                "task_id": task_id,
                "lp_code": lp_code,
                "order_source": order_source
            }
        )

    def cainiao_guoguo_cp_backup_assigncourierbyid(
            self,
            task_id,
            account_id,
            cp_code,
            assign_reason='',
            assign_reason_code=''
    ):
        """
        根据菜鸟账号ID指派小件员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27979

        :param task_id: 任务编号
        :param account_id: 小件员菜鸟账号ID
        :param cp_code: CP公司编号
        :param assign_reason: 指派/改派原因
        :param assign_reason_code: 指派/改派原因编码
        """
        return self._top_request(
            "cainiao.guoguo.cp.backup.assigncourierbyid",
            {
                "task_id": task_id,
                "account_id": account_id,
                "cp_code": cp_code,
                "assign_reason": assign_reason,
                "assign_reason_code": assign_reason_code
            }
        )

    def cainiao_member_courier_userstatus_get(
            self,
            cp_code='',
            cp_userid=''
    ):
        """
        获取包裹侠用户状态
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33514

        :param cp_code: cpcode
        :param cp_userid: cpuserid
        """
        return self._top_request(
            "cainiao.member.courier.userstatus.get",
            {
                "cp_code": cp_code,
                "cp_userid": cp_userid
            }
        )


class TbQiMenCangChu(DingTalkBaseAPI):
    """
    奇门仓储API
    """

    def taobao_qimen_deliveryorder_query(
            self,
            order_code,
            page,
            page_size,
            owner_code='',
            warehouse_code='',
            order_id='',
            order_source_code='',
            extend_props='',
            remark=''
    ):
        """
        发货单查询接口
        ERP调用奇门的发货单查询接口，查询发货单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24690

        :param order_code: 发库单号
        :param page: 当前页
        :param page_size: 每页orderLine条数(最多100条)
        :param owner_code: 货主编码
        :param warehouse_code: 仓库编码
        :param order_id: 仓储系统发库单号
        :param order_source_code: 交易单号
        :param extend_props: 扩展属性
        :param remark: 备注
        """
        return self._top_request(
            "taobao.qimen.deliveryorder.query",
            {
                "request": {
                    "orderCode": order_code,
                    "page": page,
                    "pageSize": page_size,
                    "ownerCode": owner_code,
                    "warehouseCode": warehouse_code,
                    "orderId": order_id,
                    "orderSourceCode": order_source_code,
                    "extendProps": extend_props,
                    "remark": remark
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_entryorder_query(
            self,
            entry_order_code,
            page,
            page_size,
            owner_code='',
            warehouse_code='',
            entry_order_id='',
            extend_props='',
            remark=''
    ):
        """
        入库单查询接口
        ERP调用接口，查询入库单信息;
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24691

        :param entry_order_code: 入库单编码
        :param page: 当前页(从1开始)
        :param page_size: 每页orderLine条数(最多100条)
        :param owner_code: 货主编码
        :param warehouse_code: 仓库编码
        :param entry_order_id: 仓储系统入库单ID
        :param extend_props: 扩展属性
        :param remark: 备注
        """
        return self._top_request(
            "taobao.qimen.entryorder.query",
            {
                "request": {
                    "entryOrderCode": entry_order_code,
                    "page": page,
                    "pageSize": page_size,
                    "ownerCode": owner_code,
                    "warehouseCode": warehouse_code,
                    "entryOrderId": entry_order_id,
                    "extendProps": extend_props,
                    "remark": remark
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_returnorder_create(
            self,
            return_order=None,
            order_lines=None,
            extend_props=''
    ):
        """
        退货入库单创建接口
        ERP调用奇门的接口,创建退货单信息;该接口和入库单的区别就是该接口是从入库单接口中单独剥离出来的，专门处理退货引起的入 库操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25989

        :param return_order: 退货单信息
        :param order_lines: 订单信息
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.returnorder.create",
            {
                "request": {
                    "returnOrder": return_order,
                    "orderLines": order_lines,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_entryorder_create(
            self,
            entry_order=None,
            order_lines=None,
            extend_props=''
    ):
        """
        入库单创建接口
        ERP调用接口，创建入库单;
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25991

        :param entry_order: 入库单信息
        :param order_lines: 入库单详情
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.entryorder.create",
            {
                "request": {
                    "entryOrder": entry_order,
                    "orderLines": order_lines,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_stockout_create(
            self,
            delivery_order=None,
            order_lines=None,
            extend_props=''
    ):
        """
        出库单创建接口
        ERP调用奇门接口，创建出库单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25992

        :param delivery_order: 出库单信息
        :param order_lines: 单据信息
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.stockout.create",
            {
                "request": {
                    "deliveryOrder": delivery_order,
                    "orderLines": order_lines,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_deliveryorder_batchconfirm(
            self,
            orders=None,
            extend_props=''
    ):
        """
        发货单确认接口
        taobao.qimen.deliveryorder.batchconfirm
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25993

        :param orders: 发货单列表
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.deliveryorder.batchconfirm",
            {
                "request": {
                    "orders": orders,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_deliveryorder_batchcreate(
            self,
            orders=None,
            extend_props=''
    ):
        """
        发货单创建批量接口
        ERP调用接口，将发货信息批量推送给WMS
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25994

        :param orders: 订单信息
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.deliveryorder.batchcreate",
            {
                "request": {
                    "orders": orders,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_entryorder_confirm(
            self,
            entry_order=None,
            order_lines=None,
            extend_props=''
    ):
        """
        入库单确认接口
        WMS调用接口，回传入库单信息;
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25995

        :param entry_order: 入库单信息
        :param order_lines: 订单信息
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.entryorder.confirm",
            {
                "request": {
                    "entryOrder": entry_order,
                    "orderLines": order_lines,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_stockchange_report(
            self,
            items=None,
            extend_props=''
    ):
        """
        库存异动通知接口
        WMS调用奇门的接口,将库存异动信息信息回传给ERP
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25996

        :param items: item
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.stockchange.report",
            {
                "request": {
                    "items": items,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_returnorder_confirm(
            self,
            return_order=None,
            order_lines=None,
            extend_props=''
    ):
        """
        退货入库单确认接口
        taobao.qimen.returnorder.confirm
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25997

        :param return_order: 退货单信息
        :param order_lines: 订单信息
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.returnorder.confirm",
            {
                "request": {
                    "returnOrder": return_order,
                    "orderLines": order_lines,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_singleitem_synchronize(
            self,
            action_type,
            warehouse_code,
            owner_code,
            supplier_code='',
            supplier_name='',
            item=None,
            extend_props=''
    ):
        """
        商品同步接口
        ERP调用奇门的接口,同步商品信息给WMS
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25998

        :param action_type: 操作类型(两种类型：add|update)
        :param warehouse_code: 仓库编码(统仓统配等无需ERP指定仓储编码的情况填OTHER)
        :param owner_code: 货主编码
        :param supplier_code: 供应商编码
        :param supplier_name: 供应商名称
        :param item: 商品信息
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.singleitem.synchronize",
            {
                "request": {
                    "actionType": action_type,
                    "warehouseCode": warehouse_code,
                    "ownerCode": owner_code,
                    "supplierCode": supplier_code,
                    "supplierName": supplier_name,
                    "item": item,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_inventory_query(
            self,
            criteria_list=None,
            extend_props='',
            remark=''
    ):
        """
        库存查询接口（多商品）
        ERP调用奇门的接口,查询商品的库存量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25999

        :param criteria_list: 查询准则
        :param extend_props: 扩展属性
        :param remark: 备注
        """
        return self._top_request(
            "taobao.qimen.inventory.query",
            {
                "request": {
                    "criteriaList": criteria_list,
                    "extendProps": extend_props,
                    "remark": remark
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_order_cancel(
            self,
            warehouse_code,
            order_code,
            owner_code='',
            order_id='',
            order_type='',
            cancel_reason='',
            extend_props=''
    ):
        """
        单据取消接口
        ERP调用奇门的接口,取消创建单据操作。场景介绍：ERP主动发起取消某些创建的单据。如入库单、出库单、退货单等；所有的场景
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26000

        :param warehouse_code: 仓库编码(统仓统配等无需ERP指定仓储编码的情况填OTHER)
        :param order_code: 单据编码
        :param owner_code: 货主编码
        :param order_id: 仓储系统单据编码
        :param order_type: 单据类型(JYCK=一般交易出库单;HHCK= 换货出库;BFCK=补发出库;PTCK=普通出库单;DBCK=调拨出库;B2BRK=B2B入库;B2BCK=B2B出库;QTCK=其他出库;SCRK=生产入库;LYRK=领用入库;CCRK=残次品入库;CGRK=采购入库;DBRK= 调拨入库;QTRK=其他入库;XTRK= 销退入库;THRK=退货入库;HHRK= 换货入库;CNJG= 仓内加工单;CGTH=采购退货出库单)
        :param cancel_reason: 取消原因
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.order.cancel",
            {
                "request": {
                    "warehouseCode": warehouse_code,
                    "orderCode": order_code,
                    "ownerCode": owner_code,
                    "orderId": order_id,
                    "orderType": order_type,
                    "cancelReason": cancel_reason,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_deliveryorder_confirm(
            self,
            delivery_order=None,
            packages=None,
            order_lines=None,
            extend_props=''
    ):
        """
        发货单确认接口
        taobao.qimen.deliveryorder.confirm
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26001

        :param delivery_order: 发货单信息
        :param packages: 包裹信息
        :param order_lines: 单据列表
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.deliveryorder.confirm",
            {
                "request": {
                    "deliveryOrder": delivery_order,
                    "packages": packages,
                    "orderLines": order_lines,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_deliveryorder_create(
            self,
            delivery_order=None,
            order_lines=None,
            extend_props=''
    ):
        """
        发货单创建接口
        taobao.qimen.deliveryorder.create
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26002

        :param delivery_order: 发货单信息
        :param order_lines: 订单列表
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.deliveryorder.create",
            {
                "request": {
                    "deliveryOrder": delivery_order,
                    "orderLines": order_lines,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_orderprocess_report(
            self,
            order=None,
            process=None,
            extend_props='',
            remark=''
    ):
        """
        订单流水通知接口
        WMS调用奇门的接口,将订单在仓库的状态回传给ERP；场景说明：仓库仓内操作状态回传给ERP, 比如打包操作完成时, 回传一个打 包完成的状态给到ERP, ERP自行决定如何处理。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26003

        :param order: 订单信息
        :param process: 订单处理信息
        :param extend_props: 扩展属性
        :param remark: 备注
        """
        return self._top_request(
            "taobao.qimen.orderprocess.report",
            {
                "request": {
                    "order": order,
                    "process": process,
                    "extendProps": extend_props,
                    "remark": remark
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_store_update(
            self,
            store_name,
            main_category,
            end_time,
            company_name,
            start_time,
            store_type,
            store_id,
            store_code,
            remark='',
            store_status='',
            store_description='',
            address=None,
            shop_id='',
            store_keeper=None
    ):
        """
        门店更新接口
        商家在ERP等系统中调用该接口，更新门店信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26689

        :param store_name: 门店名称
        :param main_category: 门店主营类目
        :param end_time: 停止营业时间(只填时，分；只支持半点和整点)
        :param company_name: 商户名称
        :param start_time: 开始营业时间(只填时，分；只支持半点和整点)
        :param store_type: 门店类型
        :param store_id: 线上门店id
        :param store_code: ERP系统中 门店编码
        :param remark: 备注
        :param store_status: 门店状态
        :param store_description: 商户介绍
        :param address: 门店地址信息
        :param shop_id: 需要关联的线上店铺ID
        :param store_keeper: 门店所有者信息
        """
        return self._top_request(
            "taobao.qimen.store.update",
            {
                "store_name": store_name,
                "main_category": main_category,
                "end_time": end_time,
                "company_name": company_name,
                "start_time": start_time,
                "store_type": store_type,
                "store_id": store_id,
                "store_code": store_code,
                "remark": remark,
                "store_status": store_status,
                "store_description": store_description,
                "address": address,
                "shop_id": shop_id,
                "store_keeper": store_keeper
            }
        )

    def taobao_qimen_store_create(
            self,
            store_name,
            main_category,
            company_name,
            end_time,
            start_time,
            store_type,
            store_code,
            store_status='',
            store_description='',
            address=None,
            shop_id='',
            store_keeper=None,
            remark=''
    ):
        """
        门店新增接口
        isv调用接口来讲线下门店同步到线上
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26690

        :param store_name: 门店名称
        :param main_category: 门店主营类目
        :param company_name: 商户名称
        :param end_time: 关闭营业时间(只填时，分；只支持半点和整点)
        :param start_time: 开始营业时间(只填时，分；只支持半点和整点)
        :param store_type: 门店的类型
        :param store_code: ERP系统中门店的编码
        :param store_status: 门店状态
        :param store_description: 商户介绍
        :param address: 地址信息
        :param shop_id: 需要关联的线上店铺ID
        :param store_keeper: 门店所有者信息
        :param remark: 备注
        """
        return self._top_request(
            "taobao.qimen.store.create",
            {
                "store_name": store_name,
                "main_category": main_category,
                "company_name": company_name,
                "end_time": end_time,
                "start_time": start_time,
                "store_type": store_type,
                "store_code": store_code,
                "store_status": store_status,
                "store_description": store_description,
                "address": address,
                "shop_id": shop_id,
                "store_keeper": store_keeper,
                "remark": remark
            }
        )

    def taobao_qimen_store_delete(
            self,
            store_id
    ):
        """
        门店删除接口
        商家在ERP等系统中调用该接口，删除线下门店
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26712

        :param store_id: 要删除的门店id
        """
        return self._top_request(
            "taobao.qimen.store.delete",
            {
                "store_id": store_id
            }
        )

    def taobao_qimen_store_query(
            self,
            store_id
    ):
        """
        门店信息查询接口
        商家在ERP等系统中调用该接口，查询门店相关信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26737

        :param store_id: 已分配的线上门店ID
        """
        return self._top_request(
            "taobao.qimen.store.query",
            {
                "store_id": store_id
            }
        )

    def taobao_qimen_storecategory_get(
            self,
            remark=''
    ):
        """
        门店类目获取接口
        商家在ERP中调用该接口，获取门店类目
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26738

        :param remark: 备注
        """
        return self._top_request(
            "taobao.qimen.storecategory.get",
            {
                "remark": remark
            }
        )

    def taobao_qimen_itemstore_banding(
            self,
            store_ids,
            action_type,
            item_id,
            remark=''
    ):
        """
        商品关联绑定接口
        商家在ERP等系统中调用该接口，将线上商品和线下门店“新建/删除”关联。这里的线上。每次只能单个商品关联多个门店，门店上限200
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26739

        :param store_ids: 门店列表
        :param action_type: 操作类型
        :param item_id: 线上商品ID
        :param remark: 备注信息
        """
        return self._top_request(
            "taobao.qimen.itemstore.banding",
            {
                "store_ids": store_ids,
                "action_type": action_type,
                "item_id": item_id,
                "remark": remark
            }
        )

    def taobao_qimen_itemstore_query(
            self,
            item_id,
            page='1'
    ):
        """
        商品关联门店查询接口
        商家在ERP等系统中调用该接口，查询线上商品所关联的门店列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26769

        :param item_id: 线上商品ID
        :param page: 当前查询的页面编码
        """
        return self._top_request(
            "taobao.qimen.itemstore.query",
            {
                "item_id": item_id,
                "page": page
            }
        )

    def taobao_qimen_storeitem_query(
            self,
            store_id,
            page=''
    ):
        """
        门店关联商品查询接口
        商家在ERP等系统中调用该接口，查询某门店所关联的线上商品列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26770

        :param store_id: 线上门店id
        :param page: 当前页面
        """
        return self._top_request(
            "taobao.qimen.storeitem.query",
            {
                "store_id": store_id,
                "page": page
            }
        )

    def taobao_qimen_sn_report(
            self,
            total_page,
            current_page,
            page_size,
            delivery_order=None,
            items=None,
            extend_props=''
    ):
        """
        发货单SN通知接口
        WMS调用奇门的接口,在仓库出库单后, 把SN信息回传给ERP
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26791

        :param total_page: 总页数
        :param current_page: 当前页(从1开始)
        :param page_size: 每页记录的条数
        :param delivery_order: 发货单信息
        :param items: 商品列表
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.sn.report",
            {
                "request": {
                    "totalPage": total_page,
                    "currentPage": current_page,
                    "pageSize": page_size,
                    "deliveryOrder": delivery_order,
                    "items": items,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_stockout_confirm(
            self,
            delivery_order=None,
            packages=None,
            order_lines=None,
            extend_props=''
    ):
        """
        出库单确认接口
        货品出库后，WMS将状态回传给ERP
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27143

        :param delivery_order: deliveryOrder
        :param packages: packages
        :param order_lines: orderLines
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.stockout.confirm",
            {
                "request": {
                    "deliveryOrder": delivery_order,
                    "packages": packages,
                    "orderLines": order_lines,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_wavenum_report(
            self,
            wave_num,
            orders=None,
            extend_props=''
    ):
        """
        发货单波次通知接口
        WMS调用奇门的接口,该接口用来给ERP或者OMS回传波次号及对应的发货单号，以支持商家货票同行、波次内包裹的处理等需求
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27257

        :param wave_num: 波次号
        :param orders: 发货单号
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.wavenum.report",
            {
                "request": {
                    "waveNum": wave_num,
                    "orders": orders,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_inventory_report(
            self,
            total_page,
            current_page,
            page_size,
            warehouse_code,
            check_order_code,
            owner_code,
            out_biz_code,
            adjust_type,
            check_order_id='',
            check_time='',
            remark='',
            items=None,
            extend_props=''
    ):
        """
        库存盘点通知接口
        WMS调用奇门的接口,将库存盘点情况回传ERP
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27261

        :param total_page: 总页数
        :param current_page: 当前页(从1开始)
        :param page_size: 每页记录的条数
        :param warehouse_code: 仓库编码
        :param check_order_code: 盘点单编码
        :param owner_code: 货主编码
        :param out_biz_code: 外部业务编码(消息ID;用于去重;ISV对于同一请求;分配一个唯一性的编码。用来保证因为网络等原因导致重复传输;请求不 会被重复处理)
        :param adjust_type: 变动类型：CHECK=盘点 ADJUST=调整
        :param check_order_id: 仓储系统的盘点单编码
        :param check_time: 盘点时间(YYYY-MM-DD HH:MM:SS)
        :param remark: 备注
        :param items: 商品库存信息列表
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.inventory.report",
            {
                "request": {
                    "totalPage": total_page,
                    "currentPage": current_page,
                    "pageSize": page_size,
                    "warehouseCode": warehouse_code,
                    "checkOrderCode": check_order_code,
                    "ownerCode": owner_code,
                    "outBizCode": out_biz_code,
                    "adjustType": adjust_type,
                    "checkOrderId": check_order_id,
                    "checkTime": check_time,
                    "remark": remark,
                    "items": items,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_items_synchronize(
            self,
            action_type,
            warehouse_code,
            owner_code,
            items=None,
            extend_props=''
    ):
        """
        商品同步接口 (批量)
        ERP调用奇门的接口,批量同步商品信息给WMS
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27262

        :param action_type: 操作类型(两种类型：add|update)
        :param warehouse_code: 仓库编码(统仓统配等无需ERP指定仓储编码的情况填OTHER)
        :param owner_code: 货主编码
        :param items: 同步的商品信息
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.items.synchronize",
            {
                "request": {
                    "actionType": action_type,
                    "warehouseCode": warehouse_code,
                    "ownerCode": owner_code,
                    "items": items,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_combineitem_synchronize(
            self,
            item_code,
            owner_code,
            warehouse_code='',
            items=None,
            extend_props=''
    ):
        """
        组合商品接口
        ERP调用奇门的接口,将商品信息同步给WMS
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27264

        :param item_code: 组合商品的ERP编码
        :param owner_code: 货主编码
        :param warehouse_code: 仓库编码
        :param items: 组合商品接口中的单商品信息
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.combineitem.synchronize",
            {
                "request": {
                    "itemCode": item_code,
                    "ownerCode": owner_code,
                    "warehouseCode": warehouse_code,
                    "items": items,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_deliveryorder_batchcreate_answer(
            self,
            orders=None,
            extend_props=''
    ):
        """
        发货单创建结果通知接口(批量)
        WMS调用接口，用于异步化的批量发货单创建结果通知。（如菜鸟发货单批量创建结果的返回）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27267

        :param orders: 发货单列表
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.deliveryorder.batchcreate.answer",
            {
                "request": {
                    "orders": orders,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_storeprocess_create(
            self,
            process_order_code,
            warehouse_code,
            order_type,
            order_create_time,
            plan_time,
            service_type,
            plan_qty='',
            remark='',
            materialitems=None,
            productitems=None,
            extend_props=''
    ):
        """
        仓内加工单创建接口
        ERP调用奇门的接口,创建仓内加工单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27269

        :param process_order_code: 加工单编码
        :param warehouse_code: 仓库编码(统仓统配等无需ERP指定仓储编码的情况填OTHER)
        :param order_type: 单据类型(CNJG=仓内加工作业单)
        :param order_create_time: 加工单创建时间(YYYY-MM-DD HH:MM:SS)
        :param plan_time: 计划加工时间(YYYY-MM-DD HH:MM:SS)
        :param service_type: 加工类型(1:仓内组合加工 2:仓内组合拆分)
        :param plan_qty: 成品计划数量
        :param remark: 备注
        :param materialitems: 加工商品列表
        :param productitems: 商品列表
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.storeprocess.create",
            {
                "request": {
                    "processOrderCode": process_order_code,
                    "warehouseCode": warehouse_code,
                    "orderType": order_type,
                    "orderCreateTime": order_create_time,
                    "planTime": plan_time,
                    "serviceType": service_type,
                    "planQty": plan_qty,
                    "remark": remark,
                    "materialitems": materialitems,
                    "productitems": productitems,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_storeprocess_confirm(
            self,
            process_order_code,
            out_biz_code,
            order_type,
            order_complete_time,
            owner_code='',
            process_order_id='',
            actual_qty='',
            remark='',
            materialitems=None,
            productitems=None,
            extend_props=''
    ):
        """
        仓内加工单确认接口
        WMS调用奇门的接口,回传仓内加工单创建情况
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27270

        :param process_order_code: 加工单编码
        :param out_biz_code: 外部业务编码(一个合作伙伴中要求唯一多次确认时;每次传入要求唯一(一般传入WMS损益单据编码))
        :param order_type: 单据类型(CNJG=仓内加工作业单)
        :param order_complete_time: 加工单完成时间(YYYY-MM-DD HH:MM:SS)
        :param owner_code: 货主编码
        :param process_order_id: 仓储系统加工单ID
        :param actual_qty: 实际作业总数量
        :param remark: 备注
        :param materialitems: 加工商品列表
        :param productitems: 加工商品列表
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.storeprocess.confirm",
            {
                "request": {
                    "processOrderCode": process_order_code,
                    "outBizCode": out_biz_code,
                    "orderType": order_type,
                    "orderCompleteTime": order_complete_time,
                    "ownerCode": owner_code,
                    "processOrderId": process_order_id,
                    "actualQty": actual_qty,
                    "remark": remark,
                    "materialitems": materialitems,
                    "productitems": productitems,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_stock_query(
            self,
            item_code,
            page,
            page_size,
            warehouse_code='',
            owner_code='',
            item_id='',
            inventory_type='',
            batch_code='',
            product_date='',
            expire_date='',
            extend_props='',
            remark=''
    ):
        """
        库存查询接口（多条件）
        ERP调用奇门的接口,查询商品的库存量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27271

        :param item_code: 商品编码
        :param page: 当前页(从1开始)
        :param page_size: 每页条数(最多100条)
        :param warehouse_code: 仓库编码
        :param owner_code: 货主编码
        :param item_id: 仓储系统商品ID
        :param inventory_type: 库存类型(ZP=正品;CC=残次;JS=机损;XS=箱损;ZT=在途库存;默认为查所有类型的库存)
        :param batch_code: 批次编码
        :param product_date: 商品生产日期(YYYY-MM-DD)
        :param expire_date: 商品过期日期(YYYY-MM-DD)
        :param extend_props: 扩展属性
        :param remark: 备注
        """
        return self._top_request(
            "taobao.qimen.stock.query",
            {
                "request": {
                    "itemCode": item_code,
                    "page": page,
                    "pageSize": page_size,
                    "warehouseCode": warehouse_code,
                    "ownerCode": owner_code,
                    "itemId": item_id,
                    "inventoryType": inventory_type,
                    "batchCode": batch_code,
                    "productDate": product_date,
                    "expireDate": expire_date,
                    "extendProps": extend_props,
                    "remark": remark
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_orderprocess_query(
            self,
            order_code,
            order_type='',
            order_id='',
            warehouse_code='',
            extend_props='',
            remark='',
            order_source_code='',
            owner_code=''
    ):
        """
        订单流水查询接口
        ERP调用订单流水查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27274

        :param order_code: 单据号
        :param order_type: 单据类型(JYCK=一般交易出库单;HHCK=换货出库;BFCK=补发出库;PTCK=普通出库单;DBCK=调拨出库;QTCK=其他出库;B2BRK=B2B入库;B2BCK=B2B出库;CGRK=采购入库;DBRK=调拨入库;QTRK=其他入库;XTRK=销退入库;HHRK=换货入库;CNJG=仓内加工单)
        :param order_id: 仓储系统单据号
        :param warehouse_code: 仓库编码
        :param extend_props: 扩展属性
        :param remark: 备注
        :param order_source_code: 交易单号
        :param owner_code: 货主编码
        """
        return self._top_request(
            "taobao.qimen.orderprocess.query",
            {
                "request": {
                    "orderCode": order_code,
                    "orderType": order_type,
                    "orderId": order_id,
                    "warehouseCode": warehouse_code,
                    "extendProps": extend_props,
                    "remark": remark,
                    "orderSourceCode": order_source_code,
                    "ownerCode": owner_code
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_itemlack_report(
            self,
            warehouse_code,
            delivery_order_code,
            create_time,
            out_biz_code,
            delivery_order_id='',
            items=None,
            extend_props='',
            remark=''
    ):
        """
        发货单缺货通知接口
        WMS调用奇门的接口,将商家在库某商品缺货的信息回传给ERP
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27275

        :param warehouse_code: 仓库编码
        :param delivery_order_code: ERP的发货单编码
        :param create_time: 缺货回告创建时间(YYYY-MM-DD HH:mm:ss)
        :param out_biz_code: 外部业务编码(消息ID;用于去重;ISV对于同一请求;分配一个唯一性的编码。用来保证因为网络等原因导致重复传输;请求不 会被重复处理)
        :param delivery_order_id: 仓库系统的发货单编码
        :param items: 缺货商品列表
        :param extend_props: 扩展属性
        :param remark: 备注
        """
        return self._top_request(
            "taobao.qimen.itemlack.report",
            {
                "request": {
                    "warehouseCode": warehouse_code,
                    "deliveryOrderCode": delivery_order_code,
                    "createTime": create_time,
                    "outBizCode": out_biz_code,
                    "deliveryOrderId": delivery_order_id,
                    "items": items,
                    "extendProps": extend_props,
                    "remark": remark
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_order_pending(
            self,
            action_type,
            warehouse_code,
            order_code,
            owner_code='',
            order_id='',
            order_type='',
            reason='',
            extend_props=''
    ):
        """
        单据挂起（恢复）接口
        ERP调用奇门的接口,挂起某些创建的单据;场景介绍：ERP主动发起挂起（恢复）某些创建的单据，如入库单、出库单、退货单等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27276

        :param action_type: 操作类型(pending=挂起;restore=恢复)
        :param warehouse_code: 仓库编码(统仓统配等无需ERP指定仓储编码的情况填OTHER)
        :param order_code: 单据编码
        :param owner_code: 货主编码
        :param order_id: 仓储系统单据编码
        :param order_type: 单据类型(JYCK=一般交易出库单;HHCK=换货出库;BFCK=补发出库;PTCK=普通出库单;DBCK=调拨出库;QTCK=其他出库;B2BRK=B2B入库;B2BCK=B2B出库;CGRK=采购入库;DBRK=调拨入库;QTRK=其他入库;XTRK=销退入库;HHRK=换货入库;CNJG=仓内加工单)
        :param reason: 挂起/恢复原因
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.order.pending",
            {
                "request": {
                    "actionType": action_type,
                    "warehouseCode": warehouse_code,
                    "orderCode": order_code,
                    "ownerCode": owner_code,
                    "orderId": order_id,
                    "orderType": order_type,
                    "reason": reason,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_orderexception_report(
            self,
            message_id='',
            warehouse_code='',
            delivery_order_code='',
            delivery_order_id='',
            order_type='',
            logistics_code='',
            express_code='',
            message_type='',
            message_desc='',
            create_time='',
            order_lines=None,
            remark='',
            extend_props=''
    ):
        """
        订单异常通知接口
        WMS调用奇门的接口,当WMS接收到ERP的发货指令时，由于种种原因（5.1.5说明了各种异常场景）可能无法完成发货。WMS通过调用此接口，通知ERP具体异常情况
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27380

        :param message_id: 奇门仓储字段
        :param warehouse_code: 奇门仓储字段
        :param delivery_order_code: 奇门仓储字段
        :param delivery_order_id: 奇门仓储字段
        :param order_type: 奇门仓储字段
        :param logistics_code: 奇门仓储字段
        :param express_code: 奇门仓储字段
        :param message_type: 奇门仓储字段
        :param message_desc: 奇门仓储字段
        :param create_time: 奇门仓储字段
        :param order_lines: 奇门仓储字段
        :param remark: 奇门仓储字段
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.orderexception.report",
            {
                "request": {
                    "messageId": message_id,
                    "warehouseCode": warehouse_code,
                    "deliveryOrderCode": delivery_order_code,
                    "deliveryOrderId": delivery_order_id,
                    "orderType": order_type,
                    "logisticsCode": logistics_code,
                    "expressCode": express_code,
                    "messageType": message_type,
                    "messageDesc": message_desc,
                    "createTime": create_time,
                    "orderLines": order_lines,
                    "remark": remark,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_inventoryreserve_cancel(
            self,
            owner_code='',
            order_code='',
            order_source='',
            item_inventories=None,
            extend_props=''
    ):
        """
        库存预占取消接口
        库存预占取消
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27381

        :param owner_code: 奇门仓储字段
        :param order_code: 奇门仓储字段
        :param order_source: 奇门仓储字段
        :param item_inventories: 奇门仓储字段
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.inventoryreserve.cancel",
            {
                "request": {
                    "ownerCode": owner_code,
                    "orderCode": order_code,
                    "orderSource": order_source,
                    "itemInventories": item_inventories,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_expressinfo_query(
            self,
            owner_code='',
            express_code='',
            extend_props=''
    ):
        """
        配送公司信息查询接口
        配送公司信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27530

        :param owner_code: 奇门仓储字段
        :param express_code: 奇门仓储字段
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.expressinfo.query",
            {
                "request": {
                    "ownerCode": owner_code,
                    "expressCode": express_code,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_warehouseinfo_query(
            self,
            owner_code='',
            extend_props=''
    ):
        """
        货主仓库资源查询接口
        货主仓库资源查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27531

        :param owner_code: 奇门仓储字段
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.warehouseinfo.query",
            {
                "request": {
                    "ownerCode": owner_code,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_combineitem_query(
            self,
            owner_code='',
            item_id='',
            extend_props=''
    ):
        """
        组合货品关系查询接口
        组合货品关系查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27728

        :param owner_code: 奇门仓储字段
        :param item_id: 奇门仓储字段
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.combineitem.query",
            {
                "request": {
                    "ownerCode": owner_code,
                    "itemId": item_id,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_order_sn_report(
            self,
            total_page,
            current_page,
            page_size,
            order=None,
            items=None,
            extend_props=''
    ):
        """
        订单SN通知接口
        WMS调用奇门的接口,在出库、发货、入库等场景下，ERP和WMS之间同步操作的SN列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27962

        :param total_page: 总页数
        :param current_page: 当前页(从1开始)
        :param page_size: 每页记录的条数
        :param order: 单据列表
        :param items: 商品列表
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.order.sn.report",
            {
                "request": {
                    "totalPage": total_page,
                    "currentPage": current_page,
                    "pageSize": page_size,
                    "order": order,
                    "items": items,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_order_callback(
            self,
            warehouse_code='',
            owner_code='',
            delivery_order_code='',
            order_id='',
            express_code=''
    ):
        """
        配送拦截接口
        配送拦截
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29217

        :param warehouse_code: 奇门仓储字段,C123,string(50),,
        :param owner_code: 奇门仓储字段,C123,string(50),,
        :param delivery_order_code: 奇门仓储字段,C123,string(50),,
        :param order_id: 奇门仓储字段,C123,string(50),,
        :param express_code: 运单号
        """
        return self._top_request(
            "taobao.qimen.order.callback",
            {
                "request": {
                    "warehouseCode": warehouse_code,
                    "ownerCode": owner_code,
                    "deliveryOrderCode": delivery_order_code,
                    "orderId": order_id,
                    "expressCode": express_code
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_transferorder_query(
            self,
            transfer_order_code,
            owner_code,
            erp_order_code=''
    ):
        """
        调拨单查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29227

        :param transfer_order_code: 调拨单号
        :param owner_code: 111
        :param erp_order_code: ERP单号
        """
        return self._top_request(
            "taobao.qimen.transferorder.query",
            {
                "request": {
                    "transferOrderCode": transfer_order_code,
                    "ownerCode": owner_code,
                    "erpOrderCode": erp_order_code
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_transferorder_create(
            self,
            owner_code,
            erp_order_code='',
            from_store_code='',
            to_store_code='',
            expect_start_time='',
            attributes='',
            transfer_items=None
    ):
        """
        调拨单创建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29228

        :param owner_code: 111
        :param erp_order_code: 外部ERP订单号,HZ1234,string(50),必填,
        :param from_store_code: 出库仓编码,Item1234,string(50),必填,
        :param to_store_code: 入库仓编码,HZ1234,string(50),必填,
        :param expect_start_time: 期望调拨开始时间,Item1234,string(50),,
        :param attributes: 扩展属性,HZ1234,string(500),,
        :param transfer_items: 项目集
        """
        return self._top_request(
            "taobao.qimen.transferorder.create",
            {
                "request": {
                    "ownerCode": owner_code,
                    "erpOrderCode": erp_order_code,
                    "fromStoreCode": from_store_code,
                    "toStoreCode": to_store_code,
                    "expectStartTime": expect_start_time,
                    "attributes": attributes,
                    "transferItems": transfer_items
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_transferorder_report(
            self,
            transfer_order_code='',
            items=None,
            transfer_out_order_code='',
            transfer_in_order_code='',
            confirm_out_time='',
            confirm_in_time='',
            create_time='',
            from_warehouse_code='',
            to_warehouse_code='',
            owner_code='',
            erp_order_code='',
            order_status=''
    ):
        """
        调拨单通知
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29229

        :param transfer_order_code: 调拨单号,0,string(50),必填,
        :param items: 项目集
        :param transfer_out_order_code: 调拨出库单号
        :param transfer_in_order_code: 调拨入库单号
        :param confirm_out_time: 确认出库时间
        :param confirm_in_time: 确认入库时间
        :param create_time: 调拨单创建时间
        :param from_warehouse_code: 调拨出库仓编码
        :param to_warehouse_code: 调拨入库仓编码
        :param owner_code: 111
        :param erp_order_code: erpOrderCode
        :param order_status: orderStatus
        """
        return self._top_request(
            "taobao.qimen.transferorder.report",
            {
                "request": {
                    "transferOrderCode": transfer_order_code,
                    "items": items,
                    "transferOutOrderCode": transfer_out_order_code,
                    "transferInOrderCode": transfer_in_order_code,
                    "confirmOutTime": confirm_out_time,
                    "confirmInTime": confirm_in_time,
                    "createTime": create_time,
                    "fromWarehouseCode": from_warehouse_code,
                    "toWarehouseCode": to_warehouse_code,
                    "ownerCode": owner_code,
                    "erpOrderCode": erp_order_code,
                    "orderStatus": order_status
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_itemmapping_create(
            self,
            action_type='',
            owner_code='',
            shop_nick='',
            item_source='',
            item_id='',
            shop_item_id='',
            sku_id=''
    ):
        """
        前后端商品映射接口
        前后端商品映射
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29360

        :param action_type: 奇门仓储字段,C123,string(50),必填,
        :param owner_code: 奇门仓储字段,C123,string(50),必填,
        :param shop_nick: 奇门仓储字段,C123,string(50),必填,
        :param item_source: 奇门仓储字段,C123,string(50),必填,
        :param item_id: 奇门仓储字段,C123,string(50),必填,
        :param shop_item_id: 奇门仓储字段,C123,string(50),必填,
        :param sku_id: 奇门仓储字段,C123,string(50),必填,
        """
        return self._top_request(
            "taobao.qimen.itemmapping.create",
            {
                "request": {
                    "actionType": action_type,
                    "ownerCode": owner_code,
                    "shopNick": shop_nick,
                    "itemSource": item_source,
                    "itemId": item_id,
                    "shopItemId": shop_item_id,
                    "skuId": sku_id
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_singleitem_query(
            self,
            owner_code='',
            item_code='',
            item_id=''
    ):
        """
        商品查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29361

        :param owner_code: 货主编码,H123,string(50),必填,
        :param item_code: 商品编码,S1234,string(50),必填,
        :param item_id: 仓储系统商品编码,C123,string(50),必填,
        """
        return self._top_request(
            "taobao.qimen.singleitem.query",
            {
                "request": {
                    "ownerCode": owner_code,
                    "itemCode": item_code,
                    "itemId": item_id
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_combineitem_delete(
            self,
            owner_code='',
            item_id=''
    ):
        """
        组合货品删除接口
        组合货品删除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29362

        :param owner_code: 奇门仓储字段,C123,string(50),,
        :param item_id: 奇门仓储字段,C123,string(50),,
        """
        return self._top_request(
            "taobao.qimen.combineitem.delete",
            {
                "request": {
                    "ownerCode": owner_code,
                    "itemId": item_id
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_inventoryrule_create(
            self,
            owner_code='',
            inventory_rules=None
    ):
        """
        渠道间库存规则设置接口
        渠道间库存规则设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29363

        :param owner_code: 奇门仓储字段,C1223,string(50),,
        :param inventory_rules: inventoryRules
        """
        return self._top_request(
            "taobao.qimen.inventoryrule.create",
            {
                "request": {
                    "ownerCode": owner_code,
                    "inventoryRules": inventory_rules
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_channelinventory_query(
            self,
            owner_code='',
            warehouse_codes='',
            item_codes='',
            channel_codes=''
    ):
        """
        渠道库存查询接口
        渠道库存查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29364

        :param owner_code: 奇门仓储字段,C123,string(50),,
        :param warehouse_codes: 奇门仓储字段
        :param item_codes: 奇门仓储字段
        :param channel_codes: 奇门仓储字段
        """
        return self._top_request(
            "taobao.qimen.channelinventory.query",
            {
                "request": {
                    "ownerCode": owner_code,
                    "warehouseCodes": warehouse_codes,
                    "itemCodes": item_codes,
                    "channelCodes": channel_codes
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_shop_synchronize(
            self,
            action_type='',
            shop=None
    ):
        """
        店铺同步接口
        店铺同步接口描述
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36436

        :param action_type: add,update, 必填
        :param shop: 店铺
        """
        return self._top_request(
            "taobao.qimen.shop.synchronize",
            {
                "request": {
                    "actionType": action_type,
                    "shop": shop
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_returnpackage_report(
            self,
            order=None,
            packages=None
    ):
        """
        退货包裹状态通知接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42438

        :param order: 订单
        :param packages: 包裹列表
        """
        return self._top_request(
            "taobao.qimen.returnpackage.report",
            {
                "request": {
                    "order": order,
                    "packages": packages
                }
            },
            result_processor=lambda x: x["response"]
        )


class TbYunosTuiSongFuWuApi(DingTalkBaseAPI):
    """
    yunos推送服务api
    """

    def yunos_service_cmns_coa_push(
            self,
            msg_obj
    ):
        """
        消息推送接口
        调用CMNS系统的pushMessage接口实现消息通知到YUNOS设备的第三方应用软件。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25235

        :param msg_obj: 消息结构对象
        """
        return self._top_request(
            "yunos.service.cmns.coa.push",
            {
                "msg_obj": msg_obj
            }
        )

    def yunos_service_cmns_coa_messageresult_get(
            self,
            mid
    ):
        """
        CMNS消息发送到达查询
        CMNS消息发送到达查询,根据消息ID查询，仅能查询该appKey所发送的消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25265

        :param mid: 消息ID
        """
        return self._top_request(
            "yunos.service.cmns.coa.messageresult.get",
            {
                "mid": mid
            }
        )

    def yunos_service_cmns_coa_message_ack(
            self,
            mid,
            device_token='',
            imei='',
            uuid=''
    ):
        """
        消息回执查询
        第三方应用开发者调用此接口查询设备是否收到消息，只能查询此appKey床发的消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25278

        :param mid: 消息ID
        :param device_token: 设备唯一值deviceToken
        :param imei: 设备imei
        :param uuid: 设备uuid
        """
        return self._top_request(
            "yunos.service.cmns.coa.message.ack",
            {
                "mid": mid,
                "device_token": device_token,
                "imei": imei,
                "uuid": uuid
            }
        )

    def yunos_service_cmns_coa_message_cancel(
            self,
            mid
    ):
        """
        CMNS消息撤回
        此接口用户撤回之前已经发出去的消息，根据消息ID撤回，只能撤回此appKey创建的消息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25279

        :param mid: 消息ID
        """
        return self._top_request(
            "yunos.service.cmns.coa.message.cancel",
            {
                "mid": mid
            }
        )

    def yunos_service_cmns_coa_message_push(
            self,
            push_request
    ):
        """
        消息推送接口
        调用CMNS系统的pushMessage接口实现消息通知到YUNOS设备的第三方应用软件。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27660

        :param push_request: 消息推送请求对象
        """
        return self._top_request(
            "yunos.service.cmns.coa.message.push",
            {
                "push_request": push_request
            }
        )

    def yunos_service_cmns_coa_device_isonline(
            self,
            type='',
            value=''
    ):
        """
        根据设备id查询设备是否在线
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37015

        :param type: 设备id类型，取值'uuid'或者'imei'或者'deviceToken'
        :param value: 对应的设备id值
        """
        return self._top_request(
            "yunos.service.cmns.coa.device.isonline",
            {
                "type": type,
                "value": value
            }
        )


class TbShengHuoHui(DingTalkBaseAPI):
    """
    生活汇API
    """

    def taobao_elife_lifecard_consume(
            self,
            consume_request
    ):
        """
        品牌惠卡券核销
        用户线上购买生活汇品牌惠虚拟消费卡，线下购物时，商家码枪核销，涉及用户虚拟卡余额扣减操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26189

        :param consume_request: 交易请求参数
        """
        return self._top_request(
            "taobao.elife.lifecard.consume",
            {
                "consume_request": consume_request
            }
        )

    def taobao_elife_lifecard_refund(
            self,
            refund_request
    ):
        """
        品牌惠卡券冲正退还
        淘宝生活汇消费卡虚拟卡，线下冲正退货接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26190

        :param refund_request: 请求参数
        """
        return self._top_request(
            "taobao.elife.lifecard.refund",
            {
                "refund_request": refund_request
            }
        )

    def taobao_elife_lifecard_query(
            self,
            query_request
    ):
        """
        查询交易结果
        卖家在交易状态不明的情况下, 查询交易结果.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27177

        :param query_request: 入参
        """
        return self._top_request(
            "taobao.elife.lifecard.query",
            {
                "query_request": query_request
            }
        )

    def taobao_elife_lifecard_recon(
            self,
            op_date
    ):
        """
        查询对账文件地址接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27263

        :param op_date: 对账日期(YYYYMMDD)
        """
        return self._top_request(
            "taobao.elife.lifecard.recon",
            {
                "op_date": op_date
            }
        )


class TbTvZhiFu(DingTalkBaseAPI):
    """
    tv支付
    """

    def taobao_tvpay_access_data_get(
            self,
            device_id,
            out_order_no,
            account_client_version,
            from_=''
    ):
        """
        tv支付
        在匿名用户支付后尝试为其登陆绑定的淘宝账号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26205

        :param device_id: 设备id
        :param out_order_no: 订单id
        :param account_client_version: 账号客户端版本
        :param from_: 来源
        """
        return self._top_request(
            "taobao.tvpay.access.data.get",
            {
                "device_id": device_id,
                "out_order_no": out_order_no,
                "account_client_version": account_client_version,
                "from": from_
            }
        )

    def taobao_tvpay_promotion_result_get(
            self,
            device_id,
            ext_order_id,
            is_tao,
            from_=''
    ):
        """
        tv支付消费抽奖结果查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询消费抽奖结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26209

        :param device_id: 设备id
        :param ext_order_id: 外部订单号
        :param is_tao: 是否淘系
        :param from_: 来源
        """
        return self._top_request(
            "taobao.tvpay.promotion.result.get",
            {
                "device_id": device_id,
                "ext_order_id": ext_order_id,
                "is_tao": is_tao,
                "from": from_
            }
        )

    def taobao_tvpay_appinfo_get(
            self,
            device_id,
            from_='',
            client_version='3.0'
    ):
        """
        tv支付获取应用信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26210

        :param device_id: 设备id
        :param from_: 来源
        :param client_version: 客户端版本号
        """
        return self._top_request(
            "taobao.tvpay.appinfo.get",
            {
                "device_id": device_id,
                "from": from_,
                "client_version": client_version
            }
        )

    def taobao_tvpay_auth_query(
            self,
            device_id,
            from_='',
            biz_order_id='',
            is_tao='false',
            order_no='',
            out_order_no=''
    ):
        """
        tv支付授权查询
        查询该用户在指定设备上是否有支付授权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26214

        :param device_id: 设备号
        :param from_: 来源
        :param biz_order_id: 业务订单号
        :param is_tao: 是否淘系
        :param order_no: 支付宝订单号
        :param out_order_no: 外部订单号
        """
        return self._top_request(
            "taobao.tvpay.auth.query",
            {
                "device_id": device_id,
                "from": from_,
                "biz_order_id": biz_order_id,
                "is_tao": is_tao,
                "order_no": order_no,
                "out_order_no": out_order_no
            }
        )

    def taobao_tvpay_order_query(
            self,
            device_id,
            order_type,
            from_='',
            biz_order_id='',
            is_tao='',
            order_no='',
            out_order_no='',
            license=''
    ):
        """
        tv支付查询订单状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26215

        :param device_id: 设备id
        :param order_type: 订单类型
        :param from_: 来源
        :param biz_order_id: 业务订单号
        :param is_tao: 是否淘系
        :param order_no: 支付宝订单号
        :param out_order_no: 外部订单号
        :param license: 牌照方
        """
        return self._top_request(
            "taobao.tvpay.order.query",
            {
                "device_id": device_id,
                "order_type": order_type,
                "from": from_,
                "biz_order_id": biz_order_id,
                "is_tao": is_tao,
                "order_no": order_no,
                "out_order_no": out_order_no,
                "license": license
            }
        )

    def taobao_tvpay_auth_cancel(
            self,
            device_id,
            from_=''
    ):
        """
        tv支付取消授权
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        tv支付用户取消设备授权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26216

        :param device_id: 设备id
        :param from_: 来源
        """
        return self._top_request(
            "taobao.tvpay.auth.cancel",
            {
                "device_id": device_id,
                "from": from_
            }
        )

    def taobao_tvpay_auth_apply(
            self,
            device_id,
            from_='',
            biz_scene='',
            item_name='',
            operate_type='',
            out_approve_id='',
            total_fee=''
    ):
        """
        tv支付申请设备授权
        为用户在指定设备上申请支付授权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26217

        :param device_id: 设备id
        :param from_: 请求来源
        :param biz_scene: 场景
        :param item_name: 商品名称
        :param operate_type: 授权类型
        :param out_approve_id: 外部订单号
        :param total_fee: 金额
        """
        return self._top_request(
            "taobao.tvpay.auth.apply",
            {
                "device_id": device_id,
                "from": from_,
                "biz_scene": biz_scene,
                "item_name": item_name,
                "operate_type": operate_type,
                "out_approve_id": out_approve_id,
                "total_fee": total_fee
            }
        )

    def taobao_tvpay_promotion_info_get(
            self,
            device_id,
            is_tao,
            from_='',
            subject_id='',
            ext_order_id='',
            subject=''
    ):
        """
        tv支付查询消费抽奖配置
        查询消费抽奖配置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26218

        :param device_id: 设备id
        :param is_tao: 是否淘系
        :param from_: 来源
        :param subject_id: 商品id
        :param ext_order_id: 淘系订单号
        :param subject: 标题
        """
        return self._top_request(
            "taobao.tvpay.promotion.info.get",
            {
                "device_id": device_id,
                "is_tao": is_tao,
                "from": from_,
                "subject_id": subject_id,
                "ext_order_id": ext_order_id,
                "subject": subject
            }
        )

    def taobao_tvpay_order_precreate(
            self,
            device_id,
            data,
            from_='',
            license=''
    ):
        """
        tv支付预下单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26219

        :param device_id: 设备id
        :param data: 订单详情
        :param from_: 来源
        :param license: 牌照方
        """
        return self._top_request(
            "taobao.tvpay.order.precreate",
            {
                "device_id": device_id,
                "data": data,
                "from": from_,
                "license": license
            }
        )

    def taobao_tvpay_order_partnerpay(
            self,
            device_id,
            data,
            from_='',
            pay_type='',
            license=''
    ):
        """
        tv支付第三方支付订单
        tv支付第三方发起并支付订单（使用设备授权）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26220

        :param device_id: 设备id
        :param data: 订单信息
        :param from_: 来源
        :param pay_type: 支付方式
        :param license: 牌照方
        """
        return self._top_request(
            "taobao.tvpay.order.partnerpay",
            {
                "device_id": device_id,
                "data": data,
                "from": from_,
                "pay_type": pay_type,
                "license": license
            }
        )

    def taobao_tvpay_order_generateqrcode(
            self,
            device_id,
            order_no,
            from_=''
    ):
        """
        tv支付为订单生成二维码
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        tv支付为已有alipay订单生成二维码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26221

        :param device_id: 设备id
        :param order_no: 支付宝订单号
        :param from_: 来源
        """
        return self._top_request(
            "taobao.tvpay.order.generateqrcode",
            {
                "device_id": device_id,
                "order_no": order_no,
                "from": from_
            }
        )

    def taobao_tvpay_partner_order_query(
            self,
            order_no
    ):
        """
        商户查询订单
        给商户提供的查询订单状态的API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26872

        :param order_no: 商户订单号
        """
        return self._top_request(
            "taobao.tvpay.partner.order.query",
            {
                "order_no": order_no
            }
        )

    def taobao_tvpay_renewal_thread_create(
            self,
            device_id,
            interval,
            price_list,
            ref_order_no,
            subject,
            from_='',
            client_version='',
            description='',
            allow_diff_prices='false'
    ):
        """
        创建续费订单序列
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        创建tv授权续费支付序列
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27001

        :param device_id: 设备id
        :param interval: 间隔
        :param price_list: 价格列表
        :param ref_order_no: 首笔订单id
        :param subject: 标题
        :param from_: 来源
        :param client_version: 版本号
        :param description: 续费描述
        :param allow_diff_prices: 是否允许续费价格变化
        """
        return self._top_request(
            "taobao.tvpay.renewal.thread.create",
            {
                "device_id": device_id,
                "interval": interval,
                "price_list": price_list,
                "ref_order_no": ref_order_no,
                "subject": subject,
                "from": from_,
                "client_version": client_version,
                "description": description,
                "allow_diff_prices": allow_diff_prices
            }
        )

    def taobao_tvpay_partner_renewal_pay(
            self,
            partner_notify_url,
            partner_order_no,
            price,
            ref_order_no,
            seq,
            subject,
            subject_id,
            license=''
    ):
        """
        tv支付三方续费
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        由tv sdk接入方触发续费动作。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27002

        :param partner_notify_url: 回调地址
        :param partner_order_no: 业务单号
        :param price: 价格，分为单位
        :param ref_order_no: 关联订单号
        :param seq: 续费序列号
        :param subject: 标题
        :param subject_id: 商品id
        :param license: 牌照方
        """
        return self._top_request(
            "taobao.tvpay.partner.renewal.pay",
            {
                "partner_notify_url": partner_notify_url,
                "partner_order_no": partner_order_no,
                "price": price,
                "ref_order_no": ref_order_no,
                "seq": seq,
                "subject": subject,
                "subject_id": subject_id,
                "license": license
            }
        )

    def taobao_tvpay_sdk_data_upload(
            self,
            category_key1,
            value,
            device_id='',
            from_='',
            client_version=''
    ):
        """
        sdk上传业务数据
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        供sdk上传数据，汇总给BI进行分析
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27350

        :param category_key1: 类目id
        :param value: 业务数据内容
        :param device_id: 设备id
        :param from_: 来源
        :param client_version: 版本
        """
        return self._top_request(
            "taobao.tvpay.sdk.data.upload",
            {
                "category_key1": category_key1,
                "value": value,
                "device_id": device_id,
                "from": from_,
                "client_version": client_version
            }
        )


class TbYunOSID2(DingTalkBaseAPI):
    """
    YunOS-ID2
    """

    def yunos_id_jtagpubkey_get(
            self,
            id2
    ):
        """
        id2获取jtag公钥
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        该接口通过传入id2获取相对应机型的jtag publickey
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26235

        :param id2: 被调试设备的ID2
        """
        return self._top_request(
            "yunos.id.jtagpubkey.get",
            {
                "id2": id2
            }
        )

    def yunos_id_jtagprivkey_sign(
            self,
            id2,
            nonce_str,
            cmd,
            sig_alg='0'
    ):
        """
        使用jtag私钥签名cmd
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        用id2对应的jtag私钥对nonce+cmd进行签名
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26236

        :param id2: 被调试的设备的id2
        :param nonce_str: 设备端产生的随机数
        :param cmd: 调试指令
        :param sig_alg: 签名算法
        """
        return self._top_request(
            "yunos.id.jtagprivkey.sign",
            {
                "id2": id2,
                "nonceStr": nonce_str,
                "cmd": cmd,
                "sigAlg": sig_alg
            }
        )

    def yunos_id_sk_encode(
            self,
            auth_code='',
            id2='',
            sk=''
    ):
        """
        id2加密接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        对id2对指定字符串进行加密
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28232

        :param auth_code: authcode，用于验证请求合法性
        :param id2: id2
        :param sk: 被加密的明文
        """
        return self._top_request(
            "yunos.id.sk.encode",
            {
                "auth_code": auth_code,
                "id2": id2,
                "sk": sk
            }
        )

    def aliyun_idid_productprivkey_encrypt(
            self,
            type='',
            product_model='',
            data=''
    ):
        """
        产品私钥加密
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        ID2 产品私钥加密接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29321

        :param type: product key 的类型，0表示trust boot
        :param product_model: 产品型号
        :param data: 需要加密的数据，base64格式
        """
        return self._top_request(
            "aliyun.idid.productprivkey.encrypt",
            {
                "type": type,
                "product_model": product_model,
                "data": data
            }
        )

    def aliyun_idid_productpubkey_get(
            self,
            type='',
            product_model=''
    ):
        """
        获取产品公钥
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29379

        :param type: 类型
        :param product_model: 产品型号
        """
        return self._top_request(
            "aliyun.idid.productpubkey.get",
            {
                "type": type,
                "product_model": product_model
            }
        )


class TbCaiNiaoJiHuo(DingTalkBaseAPI):
    """
    菜鸟集货API
    """

    def taobao_wlb_imports_resource_get(
            self,
            from_id,
            to_address
    ):
        """
        获取所有服务列表
        一般进口TOP接口，获取所有服务列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24355

        :param from_id: 卖家发货地区域ID
        :param to_address: 买家收货地信息
        """
        return self._top_request(
            "taobao.wlb.imports.resource.get",
            {
                "from_id": from_id,
                "to_address": to_address
            },
            result_processor=lambda x: x["resources"]
        )

    def taobao_wlb_imports_resource_transferstore_get(
            self,
            resource_id,
            cids,
            to_address,
            from_id=''
    ):
        """
        根据指定的资源获取所有中转仓列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24462

        :param resource_id: 通过taobao.wlb.imports.resource.get接口查询出来的资源ID
        :param cids: 商品前台叶子类目ID
        :param to_address: 买家收货地信息
        :param from_id: 卖家发货地址的区域ID，如果不填则为默认发货地址ID
        """
        return self._top_request(
            "taobao.wlb.imports.resource.transferstore.get",
            {
                "resource_id": resource_id,
                "cids": cids,
                "to_address": to_address,
                "from_id": from_id
            },
            result_processor=lambda x: x["stores"]
        )

    def taobao_wlb_imports_waybill_get(
            self,
            order_code
    ):
        """
        获取运单信息
        一般进口商家，获取订单的电子面单链接地址
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24476

        :param order_code: 物流订单号
        """
        return self._top_request(
            "taobao.wlb.imports.waybill.get",
            {
                "order_code": order_code
            },
            result_processor=lambda x: x["waybillurl"]
        )

    def taobao_wlb_imports_order_get(
            self,
            trade_id='',
            gmt_create_start='',
            gmt_create_end='',
            status_code='',
            page_no='1',
            page_size='20'
    ):
        """
        物流订单获取
        一般进口物流订单获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24548

        :param trade_id: 交易订单号
        :param gmt_create_start: 交易订单开始创建时间
        :param gmt_create_end: 交易订单结束创建时间
        :param status_code: 物流订单状态编码。以下依（物流订单状态编码，描述）的形式列举出来：(TIN_CONSING,发货中),(SENT_WAIT_COMPANY_MAKE_SURE,待仓库收货),(ORDER_CANCELED,订单关闭),(COMPANY_MAKE_SURE,海外仓已揽收),(REJECTED_RECEIVED_BY_COMPANY,海外仓拒收),(ORDER_REFUNDING,退货中),(ORDER_REFUND_BY_COMPANY,订单已退货),(EXCEPTION_IN_COMPANY,海外仓内异常),(FAILED_PAID_SHIPPING_FEE,支付失败),(PAID_SHIPPING_FEE,待仓库发货),(COMPANY_CONSIGN_CONFIRM,海外仓已发货),(WAIT_CUSTOMS_MAKE_SURE,清关已收货),(EXCEPTION_IN_CUSTOMS,清关异常),(CUSTOMSING,清关中),(COMPANY_DELIVERY,国内配送)。
        :param page_no: 页码。取值范围:大于零的整数; 默认值:1
        :param page_size: 每页条数。取值范围:大于0小于等于100的整数; 默认值:40; 最小值：1；最大值:20
        """
        return self._top_request(
            "taobao.wlb.imports.order.get",
            {
                "trade_id": trade_id,
                "gmt_create_start": gmt_create_start,
                "gmt_create_end": gmt_create_end,
                "status_code": status_code,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_wlb_imports_general_consign(
            self,
            trade_order_id,
            resource_id,
            store_code,
            first_logistics,
            first_waybillno,
            sender_id='',
            cancel_id=''
    ):
        """
        一般进口发货
        将订单信息发送到菜鸟海外转运仓；
        业务规则：
        1）交易订单为待发货状态。
        2）单笔订单多个商品，交易金额不能大于1000人民币。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24615

        :param trade_order_id: 交易订单id
        :param resource_id: 物流资源ID
        :param store_code: 仓库编码
        :param first_logistics: 第1段物流承运商
        :param first_waybillno: 第1段物流运单号
        :param sender_id: 卖家发货地址库ID；不填的话取默认发货地址；如果填写的senderId对应多个地址，取第一个
        :param cancel_id: 卖家退货地址库ID；不填写的话取默认退货地址；如果填写的cancelId对应多个地址，取第一个
        """
        return self._top_request(
            "taobao.wlb.imports.general.consign",
            {
                "trade_order_id": trade_order_id,
                "resource_id": resource_id,
                "store_code": store_code,
                "first_logistics": first_logistics,
                "first_waybillno": first_waybillno,
                "sender_id": sender_id,
                "cancel_id": cancel_id
            }
        )

    def taobao_wlb_imports_order_cancel(
            self,
            lgorder_code
    ):
        """
        一般进口取消物流订单
        商家在发货后，需要对订单进行取消，如果仓库已经收货则无法取消。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24616

        :param lgorder_code: 物流订单编号
        """
        return self._top_request(
            "taobao.wlb.imports.order.cancel",
            {
                "lgorder_code": lgorder_code
            }
        )


class TbDiDongYi(DingTalkBaseAPI):
    """
    地动仪
    """

    def taobao_lbs_message_upload(
            self,
            topic,
            body
    ):
        """
        lbs数据采集
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37287

        :param topic: 消息TOPIC
        :param body: 消息体 json结构
        """
        return self._top_request(
            "taobao.lbs.message.upload",
            {
                "topic": topic,
                "body": body
            }
        )


class TbALiJianKangYao(DingTalkBaseAPI):
    """
    阿里健康药API
    """

    def alibaba_alihealth_nr_trade_order_get(
            self,
            order_id
    ):
        """
        获取订单详情
        阿里健康O2O，获取订单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41388

        :param order_id: 淘宝订单ID
        """
        return self._top_request(
            "alibaba.alihealth.nr.trade.order.get",
            {
                "order_id": order_id
            }
        )

    def taobao_alihealth_drug_store_get(
            self,
            shop_id
    ):
        """
        根据店铺id获取店铺详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30580

        :param shop_id: 店铺ID
        """
        return self._top_request(
            "taobao.alihealth.drug.store.get",
            {
                "shop_id": shop_id
            },
            result_processor=lambda x: x["model"]
        )

    def taobao_alihealth_drug_store_search(
            self,
            shop_id,
            keyword='',
            page_size='10',
            page_no='1'
    ):
        """
        药品店内搜索
        提供给千牛智能客服，在阿里健康O2O店铺内搜索药品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30610

        :param shop_id: 店铺ID
        :param keyword: 搜索关键字
        :param page_size: 每页显示数量
        :param page_no: 页码
        """
        return self._top_request(
            "taobao.alihealth.drug.store.search",
            {
                "shop_id": shop_id,
                "keyword": keyword,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["model"]
        )

    def taobao_alihealth_drug_user_shop_get(
            self,
            user_nick
    ):
        """
        根据用户id获取店铺id
        提供给千牛智能客服，获取用户当前咨询的店铺ID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30611

        :param user_nick: 用户昵称
        """
        return self._top_request(
            "taobao.alihealth.drug.user.shop.get",
            {
                "user_nick": user_nick
            },
            result_processor=lambda x: x["shop_id"]
        )

    def alibaba_alihealth_simpleitem_query(
            self,
            itemid
    ):
        """
        商品类目规格品牌查询
        根据商品ID获取商品的叶子类目，品牌，规格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43808

        :param itemid: 商品ID列表
        """
        return self._top_request(
            "alibaba.alihealth.simpleitem.query",
            {
                "itemid": itemid
            }
        )


class TbShouTaoFenXiang(DingTalkBaseAPI):
    """
    手淘分享
    """

    def taobao_wireless_share_tpwd_query(
            self,
            password_content
    ):
        """
        查询解析淘口令
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32461

        :param password_content: 淘口令
        """
        return self._top_request(
            "taobao.wireless.share.tpwd.query",
            {
                "password_content": password_content
            }
        )


class TbFaWuSuSongDuiWai(DingTalkBaseAPI):
    """
    法务诉讼对外API
    """

    def alibaba_legal_suit_file_upload(
            self,
            file,
            time_stamp,
            file_name,
            file_size,
            signature
    ):
        """
        诉讼文件上传接口
        上传文件接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42176

        :param file: 文件
        :param time_stamp: 时间搓
        :param file_name: 文件名称
        :param file_size: 文件大小
        :param signature: 签名
        """
        return self._top_request(
            "alibaba.legal.suit.file.upload",
            {
                "file": file,
                "time_stamp": time_stamp,
                "file_name": file_name,
                "file_size": file_size,
                "signature": signature
            }
        )


class TbDuJiaShangPinGuanLi(DingTalkBaseAPI):
    """
    度假-商品管理API
    """

    def taobao_alitrip_travel_item_sku_override(
            self,
            skus,
            item_id='',
            out_product_id=''
    ):
        """
        【API3.0】商品级别日历价格库存修改，全量覆盖
        旅行度假新商品日历价格库存信息修改接口 第三版。提供商家通过TOP API方式修改商品sku信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25759

        :param skus: 商品日历价格库存套餐
        :param item_id: 商品id。itemId和outProductId至少填写一个
        :param out_product_id: 商品 外部商家编码。itemId和outProductId至少填写一个
        """
        return self._top_request(
            "taobao.alitrip.travel.item.sku.override",
            {
                "skus": skus,
                "item_id": item_id,
                "out_product_id": out_product_id
            },
            result_processor=lambda x: x["travel_item"]
        )

    def taobao_alitrip_travel_baseinfo_cities_get(
            self,
            ioc_type,
            cat_type
    ):
        """
        【API3.0】度假线路商品发布时基础信息获取接口：地址数据查询
        旅行度假新商品发布时可用的扩展接口，用于获取可用的出发地或目的地城市列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25760

        :param ioc_type: 1-获取目的地城市列表 2-获取出发地城市列表
        :param cat_type: 1-境内跟团游 2-境内自由行 3-出境跟团游 4-出境自由行 5-境外当地玩乐 6-国际邮轮 9-境内邮轮
        """
        return self._top_request(
            "taobao.alitrip.travel.baseinfo.cities.get",
            {
                "ioc_type": ioc_type,
                "cat_type": cat_type
            },
            result_processor=lambda x: x["ioc_infos"]
        )

    def taobao_alitrip_travel_item_shelve(
            self,
            item_status,
            item_id='',
            out_product_id='',
            online_time=''
    ):
        """
        【API3.0】度假线路商品上下架接口
        旅行度假新商品发布接口 第三版：度假商品上下架接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25761

        :param item_status: 1-上架 0-下架
        :param item_id: 商品id。itemId和outProductId至少填写一个
        :param out_product_id: 商品 外部商家编码。itemId和outProductId至少填写一个
        :param online_time: 指定定时上架时间，格式：yyyy-MM-dd HH:mm:ss。若不设置该值且item_status为1，则表示立即上架。
        """
        return self._top_request(
            "taobao.alitrip.travel.item.shelve",
            {
                "item_status": item_status,
                "item_id": item_id,
                "out_product_id": out_product_id,
                "online_time": online_time
            }
        )

    def taobao_alitrip_travel_item_base_modify(
            self,
            item_id,
            group_item_ext=None,
            base_info=None,
            itineraries=None,
            refund_info=None,
            booking_rules=None,
            freedom_item_ext=None,
            sales_info=None,
            fields_to_clean='',
            cruise_item_ext=None,
            tcwl_item_ext=None
    ):
        """
        【API3.0】度假线路商品编辑接口
        旅行度假新商品基本信息修改接口 第三版。提供商家通过TOP API方式修改商品除sku外的基本信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25762

        :param item_id: 商品id
        :param group_item_ext: 跟团游商品相关信息
        :param base_info: 商品基本信息
        :param itineraries: 详细行程描述结构
        :param refund_info: 退款规则结构
        :param booking_rules: 预定规则结构
        :param freedom_item_ext: 自由行商品相关信息
        :param sales_info: 商品的销售属性相关信息
        :param fields_to_clean: 可选，支持清空商品某些字段内容。多个待清空字段名之间以英文逗号分隔。目前支持清除以下字段内容：seller_cids表示删除关联的店铺类目id
        :param cruise_item_ext: 邮轮商品相关扩展信息
        :param tcwl_item_ext: 同城活动商品相关扩展信息
        """
        return self._top_request(
            "taobao.alitrip.travel.item.base.modify",
            {
                "item_id": item_id,
                "group_item_ext": group_item_ext,
                "base_info": base_info,
                "itineraries": itineraries,
                "refund_info": refund_info,
                "booking_rules": booking_rules,
                "freedom_item_ext": freedom_item_ext,
                "sales_info": sales_info,
                "fields_to_clean": fields_to_clean,
                "cruise_item_ext": cruise_item_ext,
                "tcwl_item_ext": tcwl_item_ext
            },
            result_processor=lambda x: x["travel_item"]
        )

    def taobao_alitrip_travel_item_base_add(
            self,
            base_info,
            booking_rules,
            freedom_item_ext=None,
            group_item_ext=None,
            itineraries=None,
            refund_info=None,
            sales_info=None,
            cruise_item_ext=None,
            tcwl_item_ext=None
    ):
        """
        【API3.0】度假线路商品发布接口
        旅行度假新商品发布接口。目前支持的类目包括：境内跟团游、出境跟团游、境内自由行、出境自由行、境内当地玩乐、境外玩乐套餐、境内邮轮、国际邮轮
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25764

        :param base_info: 必填，商品基本信息
        :param booking_rules: 必填，预定规则结构。示例： [{  'rule_type': 'fee_excluded',  'rule_desc': '费用包含描述'},{  'rule_type': 'fee_included',  'rule_desc': '费用不含描述'},{  'rule_type': 'order_info',  'rule_desc': '预定须知描述'}]
        :param freedom_item_ext: 特殊选填（当发布自由行商品时必填，其他情况不填）。自由行商品相关信息，自由行商品必填。大交通、酒店住宿、景点门票、租车、保险、餐饮、其他费用，自由行商品至少需要填写其中两项
        :param group_item_ext: 特殊选填（当发布跟团游商品时必填，其他情况不填）。跟团游商品相关信息，发布跟团游商品时必填
        :param itineraries: 选填，详细行程描述结构
        :param refund_info: 选填，退款规则结构
        :param sales_info: 选填，商品的销售属性相关信息
        :param cruise_item_ext: 特殊选填（当发布邮轮商品时必填，其他情况不填）邮轮商品相关信息，发布邮轮商品时必填
        :param tcwl_item_ext: 特殊选填（当发布同城活动商品时必填，其他情况不填）同城活动商品相关信息，发布同城活动商品时必填
        """
        return self._top_request(
            "taobao.alitrip.travel.item.base.add",
            {
                "base_info": base_info,
                "booking_rules": booking_rules,
                "freedom_item_ext": freedom_item_ext,
                "group_item_ext": group_item_ext,
                "itineraries": itineraries,
                "refund_info": refund_info,
                "sales_info": sales_info,
                "cruise_item_ext": cruise_item_ext,
                "tcwl_item_ext": tcwl_item_ext
            },
            result_processor=lambda x: x["travel_item"]
        )

    def taobao_alitrip_travel_item_single_query(
            self,
            item_id='',
            out_product_id=''
    ):
        """
        【API3.0】度假单个商品查询接口
        旅行度假新商品查询接口（单个商品查询） 第三版
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25767

        :param item_id: 商品id。itemId和outProductId至少填写一个
        :param out_product_id: 商品 外部商家编码。itemId和outProductId至少填写一个
        """
        return self._top_request(
            "taobao.alitrip.travel.item.single.query",
            {
                "item_id": item_id,
                "out_product_id": out_product_id
            },
            result_processor=lambda x: x["travel_item"]
        )

    def taobao_alitrip_travel_baseinfo_scenics_get(
            self,
            scenic,
            city='',
            scenic_id=''
    ):
        """
        【API3.0】基础信息获取接口：景点数据查询
        商品发布辅助接口，用于飞猪度假或门票商品发布时 获取可用的景点（及景点下收费项目）信息列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25781

        :param scenic: 景点简称
        :param city: 城市名称
        :param scenic_id: 景点id，可选。若传了该值，则查询结果中只会保留该id的景点，其余景点信息将被过滤
        """
        return self._top_request(
            "taobao.alitrip.travel.baseinfo.scenics.get",
            {
                "scenic": scenic,
                "city": city,
                "scenic_id": scenic_id
            },
            result_processor=lambda x: x["scenic_infos"]
        )

    def taobao_alitrip_travel_item_sku_price_modify(
            self,
            item_id='',
            out_product_id='',
            skus=None
    ):
        """
        【API3.0】日期级别日历价格库存修改，增量维护
        【API3.0】日期级别日历价格库存增量维护
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25811

        :param item_id: 商品id。itemId和outProductId至少填写一个
        :param out_product_id: 商品 外部商家编码。itemId和outProductId至少填写一个
        :param skus: 商品日历价格库存套餐
        """
        return self._top_request(
            "taobao.alitrip.travel.item.sku.price.modify",
            {
                "item_id": item_id,
                "out_product_id": out_product_id,
                "skus": skus
            },
            result_processor=lambda x: x["travel_item"]
        )

    def taobao_alitrip_travel_item_sku_package_modify(
            self,
            skus,
            item_id='',
            out_product_id=''
    ):
        """
        【API3.0】套餐级别日历价格库存增删操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26164

        :param skus: 商品日历价格库存套餐
        :param item_id: 商品id。itemId和outProductId至少填写一个
        :param out_product_id: 商品 外部商家编码。itemId和outProductId至少填写一个
        """
        return self._top_request(
            "taobao.alitrip.travel.item.sku.package.modify",
            {
                "skus": skus,
                "item_id": item_id,
                "out_product_id": out_product_id
            },
            result_processor=lambda x: x["travel_item"]
        )

    def taobao_alitrip_travel_baseinfo_cruise_get(
            self,
            is_overseas
    ):
        """
        【API3.0】度假线路商品发布时基础信息获取接口：邮轮扩展信息获取
        旅行度假新商品发布时可用的扩展接口，用于获取邮轮类目相关扩展信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26203

        :param is_overseas: true-获取国际邮轮类目扩展信息；false-获取国内邮轮类目扩展信息
        """
        return self._top_request(
            "taobao.alitrip.travel.baseinfo.cruise.get",
            {
                "is_overseas": is_overseas
            },
            result_processor=lambda x: x["cruise_ext_infos"]
        )

    def taobao_alitrip_travel_item_element_manage(
            self,
            operation,
            outer_id,
            element_type='',
            name='',
            city='',
            type='',
            desc=''
    ):
        """
        【API3.0】资源元素管理接口
        资源元素管理接口：提供商家管理（增删改）基本资源元素信息。基本资源元素可供多个商品共享
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27563

        :param operation: 必填，操作类型：1-新增，2-修改，3-删除。。特别注意：删除 为逻辑删除，即该outer_id所对应的元素还存在但是会置为无效状态，重新编辑修改即可恢复为有效状态。因此该id一旦使用将不可重复
        :param outer_id: 必填，元素的外部商家编码，必须唯一。编辑、删除时将根据该编码找到对应元素。
        :param element_type: 资源元素类型，新增时必填：1-景点，2-酒店，5-交通接驳，6-WIFI库；8-餐饮，9-签证库，11-特色活动，999-其他
        :param name: 元素名称，新增时必填； 注意：Wifi库的使用地和签证库所在国家均适用这个字段
        :param city: 元素所在城市，景点、酒店在新增时必填
        :param type: 元素的子类型，新增时必填。景点指门票类型，酒店指房型信息，交通接驳（接送机、接驳车、租车、船票、其他）选其一，餐饮（早餐、晚餐、午餐、下午茶及其他）选其一；签证（旅游签证、商务签证、工作签证、留学签证、探亲访友签证、入台证、其他）
        :param desc: 当新增“交通接驳、餐饮、特色活动、其他”资源类型时 必填
        """
        return self._top_request(
            "taobao.alitrip.travel.item.element.manage",
            {
                "operation": operation,
                "outer_id": outer_id,
                "element_type": element_type,
                "name": name,
                "city": city,
                "type": type,
                "desc": desc
            },
            result_processor=lambda x: x["first_result"]
        )

    def taobao_alitrip_travel_item_element_query(
            self,
            outer_ids
    ):
        """
        【API3.0】资源元素查询接口
        提供资源元素查询接口，支持商家查询已经发布过的资源元素
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27902

        :param outer_ids: 需要查询的资源元素列表，最大列表长度为50
        """
        return self._top_request(
            "taobao.alitrip.travel.item.element.query",
            {
                "outer_ids": outer_ids
            },
            result_processor=lambda x: x["results"]
        )

    def alitrip_daytours_product_upload(
            self,
            out_product_id,
            item_id='',
            title='',
            sub_titles='',
            pic_urls='',
            from_locations='',
            to_locations='',
            trip_day='',
            trip_night='',
            desc_xml='',
            desc_html='',
            wap_desc='',
            itineraries='',
            struct_itineraries=None,
            fee_include='',
            fee_exclude='',
            order_info='',
            tourist_service_provider='',
            refund_type='',
            refund_regulations_json='',
            reserve_limit='',
            confirm_type='',
            confirm_time='',
            sub_stock='',
            traveller_template_id='',
            item_custom_tag='',
            high_lights=None,
            business_license='',
            seller_cids='',
            second_kill='',
            has_discount='false'
    ):
        """
        境外一日游/多日游 产品维护接口
        境外一日游/多日游 产品维护接口。
        接口同时支持新商品发布 和 现有商品编辑：
        1）只上传out_product_id的情况：如果out_product_id已经关联过某个商品id，则认为是编辑现有商品，否则认为是新发布一个商品。
        2）同时上传out_product_id和item_id，则认为是将out_product_id与item_id进行关联，同时对该商品进行编辑。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28132

        :param out_product_id: 商家自定义商品编码。注：商品基本信息维护、价格库存维护，商品查询都以该编码为主键。
        :param item_id: 可选，淘系商品id，用于将out_product_id关联到已经存在的商品，并且修改该商品外部商家编码为out_product_id。
        :param title: 新发布商品时必填。商品标题，30个中文字符以内
        :param sub_titles: 可选，商品亮点，最多支持4个亮点。注：在SDK中数组多个元素间以英文逗号分隔
        :param pic_urls: 新发布商品时必填。商品图片路径。最多支持5张，第一张为主图，必填，其余四张可选填。图片链接支持外链图片（即商家系统中图片链接，必须外网可访问，且格式为jpg或jpeg，大小在500k以内），或者用户淘宝空间内的图片链接。对于外链图片，将自动下载并上传用户淘宝图片空间，上传失败的外链图片将自动忽略不计。。注：在SDK中数组多个元素间以英文逗号分隔
        :param from_locations: 新发布商品时必填。出发地，多个出发地用英文逗号分隔。使用说明同“目的地”
        :param to_locations: 新发布商品时必填。目的地，多个目的地用英文逗号分隔。地址可以使用飞猪标准地址名称，也可以使用商家系统中目的地地址（支持商家目的地id和商家目的地名称）。如果需要使用商家目的地地址，必须在目的地关联页（https://sell.alitrip.com/icenter/main.htm#/widgets/api-adaptor?_k=n61ii0）配置映射关系（一次性批量上传建立映射关系，之后度假所有类目、API接口共用该映射关系）。 商家目的地地址使用示例1：东京,大阪。示例2：123,124。说明：商家目的地id（123,124）会根据映射关系自动转换成飞猪标准地址
        :param trip_day: 新发布商品时必填。旅游天数
        :param trip_night: 可选，旅游晚数，不传默认旅游天数-1
        :param desc_xml: PC端详情描述（新发布商品时，desc_xml和desc_html二者至少填写一个），xml格式：DESC根标签必须有，每一个亮点（HIGHLIGHT）支持1个title子标签，1个txt子标签和多个img子标签。
        :param desc_html: PC端详情描述（新发布商品时，desc_xml和desc_html二者至少填写一个），Html格式。商家自定义Html格式描述。
        :param wap_desc: 可选，手机端详情描述，xml格式，格式详见示例。
        :param itineraries: 特殊必填，（struct_itineraries与itineraries二者选填一个即可，如果两个都上传则以struct_itineraries为准）。itineraries数组的元素个数必须与旅游天数trip_day一致。行程描述，每一天行程都是xml格式（数组的每个元素对应每一天的行程）： ITINERARY根标签必须有，每个活动（ACTIVITY）支持1个title子标签，1个txt子标签和多个img子标签。注：在SDK中多个元素间以英文逗号分隔
        :param struct_itineraries: 特殊必填，行程描述（struct_itineraries与itineraries二者选填一个即可，如果两个都上传则以struct_itineraries为准）。列表中每一个元素对应一天的行程，每天行程由多个活动组成。行程描述是可选项，如果上传了行程内容 则行程序号和行程活动信息必填。
        :param fee_include: 新发布商品时必填。费用包含。列表中每一个元素 对应一点描述，每点描述小于100个中文字符。注：在SDK中数组多个元素间以英文逗号分隔
        :param fee_exclude: 新发布商品时必填。费用不含。列表中每一个元素 对应一点描述，每点描述小于100个中文字符。注：在SDK中数组多个元素间以英文逗号分隔
        :param order_info: 新发布商品时必填。预定须知。列表中每一个元素 对应一点描述，每点描述小于100个中文字符。注：在SDK中数组多个元素间以英文逗号分隔
        :param tourist_service_provider: 真实的旅游服务提供商
        :param refund_type: 可选，退改规则类型。0-平台标准退改规则，1-自定义退改规则，2-不支持退改（已废弃，勿用），7-新版自定义退改规则。不传默认为0
        :param refund_regulations_json: 特殊可选，退款规则（json数组格式）。自定义退改时需填写（与refund_regulations字段二选一）。示例中一共包含4条规则（3条平日规则，1条节假日规则），按照顺序每条规则含义如下：出行前5日及以上，买家违约收取总费用的50，卖家违约收取总费用的20；出行前4日至1日，买家违约收取总费用的80，卖家违约收取总费用的50；行程开始当天，买家违约收取总费用的100，卖家违约收取总费用的70；如果行程日期包含节假日，则节假日条款为买家违约收取总费用的100，卖家违约收取总费用的90
        :param reserve_limit: 可选，该商品提前预定时间限制。格式：1_18_00，含义：该商品必须提前1天预定，且在18:00之前完成预定
        :param confirm_type: 可选，资源确认类型。1-即时确认，2-二次确认。不传默认1
        :param confirm_time: 特殊可选（confirm_type为2时必填），资源确认时长，当confirm_type=2时必填。1：2个工作小时内确认，2：6个工作小时内确认，3：9个工作小时内确认，4：18个工作小时内确认
        :param sub_stock: 可选，减库存方式。0-拍下减库存。1-付款减库存。不传默认为0
        :param traveller_template_id: 可选，出行人模板id。模板id需要商家以店铺账号身份登录飞猪商家工作台，从卖家工具->出行人管理中获取。注意：如果传0则代表设置为不需要出行人模板或使用飞猪平台默认的类目模板。
        :param item_custom_tag: 可选，商家自定义标签（最多4个字，超长则自动截断，会进行违禁词校验）
        :param high_lights: 一日游 产品亮点
        :param business_license: 必填，营业执照图片路径。图片链接支持外链图片（即商家系统中图片链接，必须外网可访问，且格式为jpg或jpeg，大小在3M以内），或者用户淘宝空间内的图片链接。对于外链图片，将自动下载并上传用户淘宝图片空间。
        :param seller_cids: 关联商品与店铺类目 结构:'cid1,cid2,...,'。如何获取卖家店铺类目具体参见：http://open.taobao.com/doc2/apiDetail.htm?apiId=65
        :param second_kill: 商品秒杀，商品秒杀三个值：可选类型web_only(只能通过web网络秒杀)，wap_only(只能通过wap网络秒杀)，web_and_wap(既能通过web秒杀也能通过wap秒杀)
        :param has_discount: 是否支持会员打折。可选值：true，false；默认值：false(不打折)。不传的话默认为false
        """
        return self._top_request(
            "alitrip.daytours.product.upload",
            {
                "out_product_id": out_product_id,
                "item_id": item_id,
                "title": title,
                "sub_titles": sub_titles,
                "pic_urls": pic_urls,
                "from_locations": from_locations,
                "to_locations": to_locations,
                "trip_day": trip_day,
                "trip_night": trip_night,
                "desc_xml": desc_xml,
                "desc_html": desc_html,
                "wap_desc": wap_desc,
                "itineraries": itineraries,
                "struct_itineraries": struct_itineraries,
                "fee_include": fee_include,
                "fee_exclude": fee_exclude,
                "order_info": order_info,
                "tourist_service_provider": tourist_service_provider,
                "refund_type": refund_type,
                "refund_regulations_json": refund_regulations_json,
                "reserve_limit": reserve_limit,
                "confirm_type": confirm_type,
                "confirm_time": confirm_time,
                "sub_stock": sub_stock,
                "traveller_template_id": traveller_template_id,
                "item_custom_tag": item_custom_tag,
                "high_lights": high_lights,
                "business_license": business_license,
                "seller_cids": seller_cids,
                "second_kill": second_kill,
                "has_discount": has_discount
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_grouptours_product_upload(
            self,
            out_product_id,
            item_id='',
            title='',
            sub_titles='',
            pic_urls='',
            from_locations='',
            gather_places=None,
            to_locations='',
            is_overseas_tour='',
            trip_day='',
            trip_night='',
            desc_xml='',
            desc_html='',
            wap_desc='',
            itineraries='',
            struct_itineraries=None,
            fee_include='',
            fee_exclude='',
            order_info='',
            refund_type='',
            refund_regulations='',
            go_traffic_type='',
            back_traffic_type='',
            route_type='',
            pure_play='',
            electron_contract=None,
            reserve_limit='',
            confirm_type='',
            confirm_time='',
            sub_stock='',
            item_custom_tag='',
            traveller_template_id=''
    ):
        """
        跟团游 产品维护接口
        跟团游 产品维护接口。
        接口同时支持新商品发布 和 现有商品编辑：
        1）只上传out_product_id的情况：如果out_product_id已经关联过某个商品id，则认为是编辑现有商品，否则认为是新发布一个商品。
        2）同时上传out_product_id和item_id，则认为是将out_product_id与item_id进行关联，同时对该商品进行编辑。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28543

        :param out_product_id: 商家自定义商品编码。注：商品基本信息维护、价格库存维护，商品查询都以该编码为主键。
        :param item_id: 可选，淘系商品id，用于将out_product_id关联到已经存在的商品，并且修改该商品外部商家编码为out_product_id。
        :param title: 新发布商品时必填。商品标题，30个中文字符以内
        :param sub_titles: 可选，商品亮点，最多支持4个亮点。注：在SDK中数组多个元素间以英文逗号分隔
        :param pic_urls: 新发布商品时必填。商品图片路径。最多支持5张，第一张为主图，必填，其余四张可选填。图片链接支持外链图片（即商家系统中图片链接，必须外网可访问，且格式为jpg或jpeg，大小在500k以内），或者用户淘宝空间内的图片链接。对于外链图片，将自动下载并上传用户淘宝图片空间，上传失败的外链图片将自动忽略不计。。注：在SDK中数组多个元素间以英文逗号分隔
        :param from_locations: 新发布商品时必填。出发地，多个出发地用英文逗号分隔。使用说明同“目的地”
        :param gather_places: 可选，跟团时的集合地点，列表中每一个元素对应一个集合地点
        :param to_locations: 新发布商品时必填。目的地，多个目的地用英文逗号分隔。地址可以使用飞猪标准地址名称，也可以使用商家系统中目的地地址（支持商家目的地id和商家目的地名称）。如果需要使用商家目的地地址，必须在目的地关联页（https://sell.alitrip.com/icenter/main.htm#/widgets/api-adaptor?_k=n61ii0）配置映射关系（一次性批量上传建立映射关系，之后度假所有类目、API接口共用该映射关系）。 商家目的地地址使用示例1：东京,大阪。示例2：123,124。说明：商家目的地id（123,124）会根据映射关系自动转换成飞猪标准地址
        :param is_overseas_tour: 新发布商品时必填。是否出境游，0-不是，1-是。
        :param trip_day: 新发布商品时必填。旅游天数
        :param trip_night: 可选，旅游晚数，不传默认旅游天数-1
        :param desc_xml: PC端详情描述（新发布商品时，desc_xml和desc_html二者至少填写一个），xml格式：DESC根标签必须有，每一个亮点（HIGHLIGHT）支持1个title子标签，1个txt子标签和多个img子标签。
        :param desc_html: PC端详情描述（新发布商品时，desc_xml和desc_html二者至少填写一个），Html格式。商家自定义Html格式描述。
        :param wap_desc: 可选，手机端详情描述，xml格式，格式详见示例。
        :param itineraries: 可选，（struct_itineraries与itineraries二者选填一个即可，如果两个都上传则以struct_itineraries为准）。itineraries数组的元素个数必须与旅游天数trip_day一致。行程描述，每一天行程都是xml格式（数组的每个元素对应每一天的行程）： ITINERARY根标签必须有，每个活动（ACTIVITY）支持1个title子标签，1个txt子标签和多个img子标签。注：在SDK中多个元素间以英文逗号分隔
        :param struct_itineraries: 行程描述（struct_itineraries与itineraries二者选填一个即可，如果两个都上传则以struct_itineraries为准）。列表中每一个元素对应一天的行程，每天行程由多个活动组成。行程描述是可选项，如果上传了行程内容 则行程序号和行程活动信息必填。
        :param fee_include: 新发布商品时必填。费用包含。列表中每一个元素 对应一点描述，所有描述合起来必须小于1500个中文字符。注：在SDK中数组多个元素间以英文逗号分隔
        :param fee_exclude: 新发布商品时必填。费用不含。列表中每一个元素 对应一点描述，所有描述合起来必须小于1500个中文字符。注：在SDK中数组多个元素间以英文逗号分隔
        :param order_info: 新发布商品时必填。预定须知。列表中每一个元素 对应一点描述，所有描述合起来必须小于1500个中文字符。注：在SDK中数组多个元素间以英文逗号分隔
        :param refund_type: 可选，退改规则类型。0-平台标准退改规则，1-自定义退改规则，2-不支持退改（已废弃，勿用），7-新版自定义退改规则。不传默认为0
        :param refund_regulations: 特殊可选，当refund_type=1或7时，需要上传自定义退改内容。自定义退改规则，最多可含5组规则，每组规则间以英文逗号分隔。 1）当refund_type为1时格式为：a_b_num,b-1_c_num。含义：提前a天至提前b天发起退款，买家需支付num比例违约费。 2）当refund_type为7时格式为：a_b_num1_num2_0,b-1_c_num1_num2_0。含义：提前a天至提前b天发起退款，买家需支付num1比例违约费，卖家需支付num2比例违约费，最后一个数字代表是否节假日规则（0-不是，1-是）。特别注意，当refund_type为7时，自定义退改规则必须设置 n天以上违约规则 以及 行程当日违约规则，即第一组规则需要以-1_a_num1_num2_0或-1_a_num1_num2_1开头，且最后一组规则需要以0_0_num1_num2_0或0_0_num1_num2_1结尾。
        :param go_traffic_type: 新发布商品时必填。去程交通。1-飞机，2-火车，3-汽，4-船
        :param back_traffic_type: 新发布商品时必填。回程交通。1-飞机，2-火车，3-汽，4-船
        :param route_type: 新发布商品时必填。参团线路类型。0 -目的地参团，1-为出发地参团
        :param pure_play: 可选，是否纯玩团。0-纯玩团，1-含购物团。新发布商品时不传默认为“含购物团”
        :param electron_contract: 可选，电子合同信息设置。
        :param reserve_limit: 可选，该商品提前预定时间限制。格式：1_18_00，含义：该商品必须提前1天预定，且在18:00之前完成预定
        :param confirm_type: 可选，资源确认类型。1-即时确认，2-二次确认。不传默认1
        :param confirm_time: 可选，资源确认时长，当confirm_type=2时必填。1：2个工作小时内确认，2：6个工作小时内确认，3：9个工作小时内确认，4：18个工作小时内确认
        :param sub_stock: 可选，减库存方式。0-拍下减库存。1-付款减库存。不传默认为0
        :param item_custom_tag: 可选，商家自定义标签（最多4个字，超长则自动截断，会进行违禁词校验）
        :param traveller_template_id: 可选，出行人模板id，预留，暂不支持
        """
        return self._top_request(
            "alitrip.grouptours.product.upload",
            {
                "out_product_id": out_product_id,
                "item_id": item_id,
                "title": title,
                "sub_titles": sub_titles,
                "pic_urls": pic_urls,
                "from_locations": from_locations,
                "gather_places": gather_places,
                "to_locations": to_locations,
                "is_overseas_tour": is_overseas_tour,
                "trip_day": trip_day,
                "trip_night": trip_night,
                "desc_xml": desc_xml,
                "desc_html": desc_html,
                "wap_desc": wap_desc,
                "itineraries": itineraries,
                "struct_itineraries": struct_itineraries,
                "fee_include": fee_include,
                "fee_exclude": fee_exclude,
                "order_info": order_info,
                "refund_type": refund_type,
                "refund_regulations": refund_regulations,
                "go_traffic_type": go_traffic_type,
                "back_traffic_type": back_traffic_type,
                "route_type": route_type,
                "pure_play": pure_play,
                "electron_contract": electron_contract,
                "reserve_limit": reserve_limit,
                "confirm_type": confirm_type,
                "confirm_time": confirm_time,
                "sub_stock": sub_stock,
                "item_custom_tag": item_custom_tag,
                "traveller_template_id": traveller_template_id
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_travel_gereralsku_update(
            self,
            item_id,
            price='',
            quantity='',
            outer_id='',
            alias=None,
            properties=None,
            date_list=None
    ):
        """
        发布SKU信息（如果properties重复 则更新）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32039

        :param item_id: 淘宝商品ID
        :param price: Sku的销售价格，普通商品使用。精确到2位小数;单位:分。如:20007，表示:200元7分。修改后的sku价格要保证商品的价格在所有sku价格所形成的价格区间内（例如：商品价格为6元，sku价格有5元、10元两种，如果要修改5元sku的价格，那么修改的范围只能是0-6元之间；如果要修改10元的sku，那么修改的范围只能是6到无穷大的区间中）
        :param quantity: Sku的库存数量，普通商品使用。sku的总数量应该小于等于商品总数量(Item的NUM)，sku数量变化后item的总数量也会随着变化。取值范围:大于等于零的整数
        :param outer_id: 商家编码
        :param alias: sku销售属性别名；如套餐1 需要调整成其他 需要在这里修改
        :param properties: 商品属性列表；由类目的属性PID和VID组成，属性的pid调用taobao.itemprops.get取得，属性值的vid用taobao.itempropvalues.get取得vid。如果该类目下面没有属性，可以不用填写。如果有属性，必选属性必填，其他非必选属性可以选择不填写.属性不能超过35对
        :param date_list: SKU的销售价格库存，日历商品使用
        """
        return self._top_request(
            "alitrip.travel.gereralsku.update",
            {
                "item_id": item_id,
                "price": price,
                "quantity": quantity,
                "outer_id": outer_id,
                "alias": alias,
                "properties": properties,
                "date_list": date_list
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_travel_poi_search(
            self,
            name,
            type,
            id=''
    ):
        """
        POI信息查询
        POI信息查询，用于商品更新使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32042

        :param name: POI信息名称
        :param type: POI类型；0->城市；1->机场；2->火车站；3->汽车站；4->酒店；5->经典；6->购物；7->美食；9->  玩乐;10->阿里旅行服务站；11->服务
        :param id: POI信息ID；
        """
        return self._top_request(
            "alitrip.travel.poi.search",
            {
                "name": name,
                "type": type,
                "id": id
            },
            result_processor=lambda x: x["results"]
        )

    def alitrip_travel_gereralitem_update(
            self,
            booking_rules,
            base_info=None,
            date_sku_info_list=None,
            item_ele_cert_info=None,
            item_refund_info=None,
            poi=None,
            common_sku_list=None
    ):
        """
        除度假线路、门票以外的其他类目商品维护接口（商品ID重复将自动更新）
        除度假线路、门票以外的商品维护接口；目前该接口支持以下类目；
        （123740001：客栈周边交通服务、125038002：旅行设备/GPS/相机租赁、50018298：船票、124084006：酒店商品升级差价、125228016：预约卡券、50011954：旅游服务、50012913：酒店优惠券、50214003：旅游会员卡/酒店会员卡、50012917：巴士/地铁/交通卡/一卡通、50134002：代客烧香/还愿、50026091：境外火车票、123742001：客栈周边餐饮服务、50019817：海外套餐、125210016：团建/outing、124212017：其他预定、50025888：机场行李托运取送寄存、50025831：旅游年票/年卡、124142009：旅游商品升级差价/押金、123744001：客栈周边其他服务、50012762：广深口岸港澳送关服务、50025880：旅行拍照/婚纱摄影、123166001：酒店餐饮美食、50668002：手绘地图/明信片、50024210：旅游购物/纪念品、50024208：酒店用品、50024215：购物折扣卡券、50025878：酒店SPA/足浴/温泉、50024212：旅游必备品、123738001：客栈周边票务服务、123164002：游泳健身、50686003：机票增值产品、123164001：酒店SPA、124832008：美食卡券/酒店餐饮卡券、125408001：旅游定制服务、50018112：旅行社/网站优惠券、124258004：酒店客房优惠券、50104001：机场周边停车位、124730002：内机机场/火车站送关服务、124090010：其他）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32043

        :param booking_rules: 必填，预定规则结构。示例： [{ 'rule_type': 'fee_excluded', 'rule_desc': '费用包含描述'},{ 'rule_type': 'fee_included', 'rule_desc': '费用不含描述'},{ 'rule_type': 'order_info', 'rule_desc': '预定须知描述'}]
        :param base_info: 必填，商品基本信息
        :param date_sku_info_list: 更新sku信息，仅限日历商品使用
        :param item_ele_cert_info: 新版电子凭证信息。如果传递了此参数，则sales_info中旧版电子凭证信息将被忽略，否则电子凭证信息将以旧版电子凭证参数为准。如果新、旧版参数都没传，则该商品不支持电子凭证
        :param item_refund_info: 选填，退款规则结构
        :param poi: poi信息，个别类目必填，如演艺类目下场馆信息
        :param common_sku_list: 更新sku信息，仅限非日历（普通）商品使用
        """
        return self._top_request(
            "alitrip.travel.gereralitem.update",
            {
                "booking_rules": booking_rules,
                "base_info": base_info,
                "date_sku_info_list": date_sku_info_list,
                "item_ele_cert_info": item_ele_cert_info,
                "item_refund_info": item_refund_info,
                "poi": poi,
                "common_sku_list": common_sku_list
            },
            result_processor=lambda x: x["travel_item"]
        )

    def alitrip_localplay_product_upload(
            self,
            out_product_id,
            item_id='',
            title='',
            sub_titles='',
            pic_urls='',
            from_locations='',
            to_locations='',
            is_overseas_tour='',
            trip_day='',
            trip_night='',
            desc_xml='',
            desc_html='',
            wap_desc='',
            fee_exclude='',
            order_info='',
            refund_type='',
            refund_regulations_json='',
            reserve_limit='',
            confirm_type='',
            confirm_time='',
            sub_stock='',
            item_custom_tag='',
            traveller_template_id='',
            tourist_service_provider='',
            seller_cids='',
            second_kill='',
            has_discount='false'
    ):
        """
        当地玩乐 产品维护接口
        当地玩乐（境内当地玩乐/境外玩乐套餐） 产品维护接口。
        接口同时支持新商品发布 和 现有商品编辑：
        1）只上传out_product_id的情况：如果out_product_id已经关联过某个商品id，则认为是编辑现有商品，否则认为是新发布一个商品。
        2）同时上传out_product_id和item_id，则认为是将out_product_id与item_id进行关联，同时对该商品进行编辑。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32546

        :param out_product_id: 商家自定义商品编码。注：商品基本信息维护、价格库存维护，商品查询都以该编码为主键。
        :param item_id: 可选，淘系商品id，用于将out_product_id关联到已经存在的商品，并且修改该商品外部商家编码为out_product_id。
        :param title: 新发布商品时必填。商品标题，30个中文字符以内
        :param sub_titles: 可选，商品亮点，最多支持4个亮点。注：在SDK中数组多个元素间以英文逗号分隔
        :param pic_urls: 新发布商品时必填。商品图片路径。最多支持5张，第一张为主图，必填，其余四张可选填。图片链接支持外链图片（即商家系统中图片链接，必须外网可访问，且格式为jpg或jpeg，大小在500k以内），或者用户淘宝空间内的图片链接。对于外链图片，将自动下载并上传用户淘宝图片空间，上传失败的外链图片将自动忽略不计。。注：在SDK中数组多个元素间以英文逗号分隔
        :param from_locations: 新发布商品时必填。出发地，多个出发地用英文逗号分隔。使用说明同“目的地”
        :param to_locations: 新发布商品时必填。目的地，多个目的地用英文逗号分隔。地址可以使用飞猪标准地址名称，也可以使用商家系统中目的地地址（支持商家目的地id和商家目的地名称）。如果需要使用商家目的地地址，必须在目的地关联页（https://sell.alitrip.com/icenter/main.htm#/widgets/api-adaptor?_k=n61ii0）配置映射关系（一次性批量上传建立映射关系，之后度假所有类目、API接口共用该映射关系）。 商家目的地地址使用示例1：东京,大阪。示例2：123,124。说明：商家目的地id（123,124）会根据映射关系自动转换成飞猪标准地址
        :param is_overseas_tour: 新发布商品时必填。是否出境游，0-不是，1-是。
        :param trip_day: 新发布商品时必填。旅游天数
        :param trip_night: 可选，旅游晚数，不传默认旅游天数-1
        :param desc_xml: PC端详情描述（新发布商品时，desc_xml和desc_html二者至少填写一个），xml格式：DESC根标签必须有，每一个亮点（HIGHLIGHT）支持1个title子标签，1个txt子标签和多个img子标签。
        :param desc_html: PC端详情描述（新发布商品时，desc_xml和desc_html二者至少填写一个），Html格式。商家自定义Html格式描述。
        :param wap_desc: 可选，手机端详情描述，xml格式，格式详见示例。
        :param fee_exclude: 新发布商品时必填。费用不含。列表中每一个元素 对应一点描述，所有描述合起来必须小于1500个中文字符。注：在SDK中数组多个元素间以英文逗号分隔
        :param order_info: 新发布商品时必填。预定须知。列表中每一个元素 对应一点描述，所有描述合起来必须小于1500个中文字符。注：在SDK中数组多个元素间以英文逗号分隔
        :param refund_type: 可选，退改规则类型。0-平台标准退改规则，1-自定义退改规则，2-不支持退改（已废弃，勿用），7-线路商品（跟团、自由行）新版自定义退改规则。不传默认为0
        :param refund_regulations_json: 特殊可选，退款规则（json数组格式）。自定义退改时需填写（与refund_regulations字段二选一）。示例中一共包含4条规则（3条平日规则，1条节假日规则），按照顺序每条规则含义如下：出行前5日及以上，买家违约收取总费用的50，卖家违约收取总费用的20；出行前4日至1日，买家违约收取总费用的80，卖家违约收取总费用的50；行程开始当天，买家违约收取总费用的100，卖家违约收取总费用的70；如果行程日期包含节假日，则节假日条款为买家违约收取总费用的100，卖家违约收取总费用的90
        :param reserve_limit: 可选，该商品提前预定时间限制。格式：1_18_00，含义：该商品必须提前1天预定，且在18:00之前完成预定
        :param confirm_type: 可选，资源确认类型。1-即时确认，2-二次确认。不传默认1
        :param confirm_time: 可选，资源确认时长，当confirm_type=2时必填。1：2个工作小时内确认，2：6个工作小时内确认，3：9个工作小时内确认，4：18个工作小时内确认
        :param sub_stock: 可选，减库存方式。0-拍下减库存。1-付款减库存。不传默认为0
        :param item_custom_tag: 可选，商家自定义标签（最多4个字，超长则自动截断，会进行违禁词校验）
        :param traveller_template_id: 可选，出行人模板id。模板id需要商家以店铺账号身份登录飞猪商家工作台，从卖家工具->出行人管理中获取。注意：如果传0则代表设置为不需要出行人模板或使用飞猪平台默认的类目模板。
        :param tourist_service_provider: 代订服务说明（请填写真实的旅游服务提供商）
        :param seller_cids: 关联商品与店铺类目 结构:'cid1,cid2,...,'。如何获取卖家店铺类目具体参见：http://open.taobao.com/doc2/apiDetail.htm?apiId=65
        :param second_kill: 商品秒杀，商品秒杀三个值：可选类型web_only(只能通过web网络秒杀)，wap_only(只能通过wap网络秒杀)，web_and_wap(既能通过web秒杀也能通过wap秒杀)
        :param has_discount: 是否支持会员打折。可选值：true，false；默认值：false(不打折)。不传的话默认为false
        """
        return self._top_request(
            "alitrip.localplay.product.upload",
            {
                "out_product_id": out_product_id,
                "item_id": item_id,
                "title": title,
                "sub_titles": sub_titles,
                "pic_urls": pic_urls,
                "from_locations": from_locations,
                "to_locations": to_locations,
                "is_overseas_tour": is_overseas_tour,
                "trip_day": trip_day,
                "trip_night": trip_night,
                "desc_xml": desc_xml,
                "desc_html": desc_html,
                "wap_desc": wap_desc,
                "fee_exclude": fee_exclude,
                "order_info": order_info,
                "refund_type": refund_type,
                "refund_regulations_json": refund_regulations_json,
                "reserve_limit": reserve_limit,
                "confirm_type": confirm_type,
                "confirm_time": confirm_time,
                "sub_stock": sub_stock,
                "item_custom_tag": item_custom_tag,
                "traveller_template_id": traveller_template_id,
                "tourist_service_provider": tourist_service_provider,
                "seller_cids": seller_cids,
                "second_kill": second_kill,
                "has_discount": has_discount
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_freetour_product_upload(
            self,
            go_traffic_type='',
            free_tour_package_info=None,
            trip_day='',
            sub_stock='',
            wap_desc='',
            back_traffic_type='',
            desc_xml='',
            confirm_time='',
            title='',
            confirm_type='',
            item_custom_tag='',
            out_product_id='',
            to_locations='',
            trip_night='',
            pic_urls='',
            item_id='',
            reserve_limit='',
            refund_type='',
            desc_html='',
            from_locations='',
            sub_titles='',
            traveller_template_id='',
            is_overseas_tour='',
            refund_regulations_json='',
            package_operation='0',
            seller_cids='',
            second_kill='',
            has_discount='false'
    ):
        """
        自由行商品发布及编辑接口
        自由行 产品维护接口。
        接口同时支持新商品发布 和 现有商品编辑：
        1）只上传out_product_id的情况：如果out_product_id已经关联过某个商品id，则认为是编辑现有商品，否则认为是新发布一个商品。
        2）同时上传out_product_id和item_id，则认为是将out_product_id与item_id进行关联，同时对该商品进行编辑。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33055

        :param go_traffic_type: 新发布商品时必填。去程交通。1-飞机，2-火车，3-汽，4-船，100-其他
        :param free_tour_package_info: 套餐信息,数组类型，支持上传多个套餐信息
        :param trip_day: 新发布商品时必填。旅游天数
        :param sub_stock: 可选，减库存方式。0-拍下减库存。1-付款减库存。不传默认为0
        :param wap_desc: 可选，手机端详情描述，xml格式，格式详见示例。
        :param back_traffic_type: 新发布商品时必填。回程交通。1-飞机，2-火车，3-汽，4-船，100-其他
        :param desc_xml: PC端详情描述（新发布商品时，desc_xml和desc_html二者至少填写一个），xml格式：DESC根标签必须有，每一个亮点（HIGHLIGHT）支持1个title子标签，1个txt子标签和多个img子标签。
        :param confirm_time: 可选，资源确认时长，当confirm_type=2时必填。1：2个工作小时内确认，2：6个工作小时内确认，3：9个工作小时内确认，4：18个工作小时内确认
        :param title: 新发布商品时必填。商品标题，30个中文字符以内
        :param confirm_type: 可选，资源确认类型。1-即时确认，2-二次确认。不传默认1
        :param item_custom_tag: 可选，商家自定义标签（最多4个字，超长则自动截断，会进行违禁词校验）
        :param out_product_id: 商家自定义商品编码。注：商品基本信息维护、价格库存维护，商品查询都以该编码为主键。
        :param to_locations: 新发布商品时必填。目的地，多个目的地用英文逗号分隔。地址可以使用飞猪标准地址名称，也可以使用商家系统中目的地地址（支持商家目的地id和商家目的地名称）。如果需要使用商家目的地地址，必须在目的地关联页（https://sell.alitrip.com/icenter/main.htm#/widgets/api-adaptor?_k=n61ii0）配置映射关系（一次性批量上传建立映射关系，之后度假所有类目、API接口共用该映射关系）。 商家目的地地址使用示例1：东京,大阪。示例2：123,124。说明：商家目的地id（123,124）会根据映射关系自动转换成飞猪标准地址
        :param trip_night: 可选，旅游晚数，不传默认旅游天数-1
        :param pic_urls: 新发布商品时必填。商品图片路径。最多支持5张，第一张为主图，必填，其余四张可选填。图片链接支持外链图片（即商家系统中图片链接，必须外网可访问，且格式为jpg或jpeg，大小在500k以内），或者用户淘宝空间内的图片链接。对于外链图片，将自动下载并上传用户淘宝图片空间，上传失败的外链图片将自动忽略不计。。注：在SDK中数组多个元素间以英文逗号分隔
        :param item_id: 可选，淘系商品id，用于将out_product_id关联到已经存在的商品，并且修改该商品外部商家编码为out_product_id。
        :param reserve_limit: 可选，该商品提前预定时间限制。格式：1_18_00，含义：该商品必须提前1天预定，且在18:00之前完成预定
        :param refund_type: 可选，退改规则类型。0-平台标准退改规则，1-自定义退改规则，2-不支持退改（已废弃，勿用），7-新版自定义退改规则。不传默认为0
        :param desc_html: PC端详情描述（新发布商品时，desc_xml和desc_html二者至少填写一个），Html格式。商家自定义Html格式描述。
        :param from_locations: 新发布商品时必填。出发地，多个出发地用英文逗号分隔。使用说明同“目的地”
        :param sub_titles: 可选，商品亮点，最多支持4个亮点。注：在SDK中数组多个元素间以英文逗号分隔
        :param traveller_template_id: 可选，出行人模板id。模板id需要商家以店铺账号身份登录飞猪商家工作台，从卖家工具->出行人管理中获取。注意：如果传0则代表设置为不需要出行人模板或使用飞猪平台默认的类目模板。
        :param is_overseas_tour: 新发布商品时必填。是否出境游，0-不是，1-是。
        :param refund_regulations_json: 特殊可选，退款规则（json数组格式）。自定义退改时需填写（与refund_regulations字段二选一）。示例中一共包含4条规则（3条平日规则，1条节假日规则），按照顺序每条规则含义如下：出行前5日及以上，买家违约收取总费用的50，卖家违约收取总费用的20；出行前4日至1日，买家违约收取总费用的80，卖家违约收取总费用的50；行程开始当天，买家违约收取总费用的100，卖家违约收取总费用的70；如果行程日期包含节假日，则节假日条款为买家违约收取总费用的100，卖家违约收取总费用的90
        :param package_operation: 0：使用上传的套餐信息（free_tour_package_info）覆盖商品上原有的套餐信息（此时free_tour_package_info中设置的packageOperation无效）；1：根据套餐信息（free_tour_package_info）中的packageOperation和outProductId增加，修改，删除指定套餐，====默认值为0===
        :param seller_cids: 关联商品与店铺类目 结构:'cid1,cid2,...,'。如何获取卖家店铺类目具体参见：http://open.taobao.com/doc2/apiDetail.htm?apiId=65
        :param second_kill: 商品秒杀，商品秒杀三个值：可选类型web_only(只能通过web网络秒杀)，wap_only(只能通过wap网络秒杀)，web_and_wap(既能通过web秒杀也能通过wap秒杀)
        :param has_discount: 是否支持会员打折。可选值：true，false；默认值：false(不打折)。不传的话默认为false
        """
        return self._top_request(
            "alitrip.freetour.product.upload",
            {
                "go_traffic_type": go_traffic_type,
                "free_tour_package_info": free_tour_package_info,
                "trip_day": trip_day,
                "sub_stock": sub_stock,
                "wap_desc": wap_desc,
                "back_traffic_type": back_traffic_type,
                "desc_xml": desc_xml,
                "confirm_time": confirm_time,
                "title": title,
                "confirm_type": confirm_type,
                "item_custom_tag": item_custom_tag,
                "out_product_id": out_product_id,
                "to_locations": to_locations,
                "trip_night": trip_night,
                "pic_urls": pic_urls,
                "item_id": item_id,
                "reserve_limit": reserve_limit,
                "refund_type": refund_type,
                "desc_html": desc_html,
                "from_locations": from_locations,
                "sub_titles": sub_titles,
                "traveller_template_id": traveller_template_id,
                "is_overseas_tour": is_overseas_tour,
                "refund_regulations_json": refund_regulations_json,
                "package_operation": package_operation,
                "seller_cids": seller_cids,
                "second_kill": second_kill,
                "has_discount": has_discount
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_grouptour_product_upload(
            self,
            go_traffic_type='',
            trip_day='',
            wap_desc='',
            sub_stock='',
            back_traffic_type='',
            desc_xml='',
            confirm_time='',
            title='',
            route_type='',
            group_tour_package_info=None,
            confirm_type='',
            item_custom_tag='',
            out_product_id='',
            trip_night='',
            to_locations='',
            pic_urls='',
            reserve_limit='',
            item_id='',
            refund_type='',
            sub_titles='',
            from_locations='',
            desc_html='',
            traveller_template_id='',
            is_overseas_tour='',
            pure_play='',
            refund_regulations_json='',
            package_operation='0',
            group_tour_type='',
            seller_cids='',
            second_kill='',
            has_discount='false'
    ):
        """
        新版跟团游商品维护接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33601

        :param go_traffic_type: 新发布商品时必填。去程交通。1-飞机，2-火车，3-汽，4-船，100-其他
        :param trip_day: 新发布商品时必填。旅游天数。已废弃，以套餐维度行程天数为准。
        :param wap_desc: 可选，手机端详情描述，xml格式，格式详见示例。
        :param sub_stock: 可选，减库存方式。0-拍下减库存。1-付款减库存。不传默认为0
        :param back_traffic_type: 新发布商品时必填。回程交通。1-飞机，2-火车，3-汽，4-船，100-其他
        :param desc_xml: PC端详情描述（新发布商品时，desc_xml和desc_html二者至少填写一个），xml格式：DESC根标签必须有，每一个亮点（HIGHLIGHT）支持1个title子标签，1个txt子标签和多个img子标签。
        :param confirm_time: 可选，资源确认时长，当confirm_type=2时必填。1：2个工作小时内确认，2：6个工作小时内确认，3：9个工作小时内确认，4：18个工作小时内确认
        :param title: 新发布商品时必填。商品标题，30个中文字符以内
        :param route_type: 参团线路类型。0 -目的地参团，1-为出发地参团
        :param group_tour_package_info: 套餐信息,数组类型，支持上传多个套餐信息
        :param confirm_type: 可选，资源确认类型。1-即时确认，2-二次确认。不传默认1
        :param item_custom_tag: 可选，商家自定义标签（最多4个字，超长则自动截断，会进行违禁词校验）
        :param out_product_id: 必填，商家自定义商品编码。注：商品基本信息维护、价格库存维护，商品查询都以该编码为主键。
        :param trip_night: 可选，旅游晚数，不传默认旅游天数-1。已废弃，以套餐维度行程晚数为准。
        :param to_locations: 新发布商品时必填。目的地，多个目的地用英文逗号分隔。地址可以使用飞猪标准地址名称，也可以使用商家系统中目的地地址（支持商家目的地id和商家目的地名称）。如果需要使用商家目的地地址，必须在目的地关联页（https://sell.alitrip.com/icenter/main.htm#/widgets/api-adaptor?_k=n61ii0）配置映射关系（一次性批量上传建立映射关系，之后度假所有类目、API接口共用该映射关系）。 商家目的地地址使用示例1：东京,大阪。示例2：123,124。说明：商家目的地id（123,124）会根据映射关系自动转换成飞猪标准地址
        :param pic_urls: 新发布商品时必填。商品图片路径。最多支持5张，第一张为主图，必填，其余四张可选填。图片链接支持外链图片（即商家系统中图片链接，必须外网可访问，且格式为jpg或jpeg，大小在500k以内），或者用户淘宝空间内的图片链接。对于外链图片，将自动下载并上传用户淘宝图片空间，上传失败的外链图片将自动忽略不计。。注：在SDK中数组多个元素间以英文逗号分隔
        :param reserve_limit: 可选，该商品提前预定时间限制。格式：1_18_00，含义：该商品必须提前1天预定，且在18:00之前完成预定
        :param item_id: 可选，淘系商品id，用于将out_product_id关联到已经存在的商品，并且修改该商品外部商家编码为out_product_id。
        :param refund_type: 可选，退改规则类型。0-平台标准退改规则，1-自定义退改规则，2-不支持退改（已废弃，勿用），7-新版自定义退改规则。不传默认为0
        :param sub_titles: 可选，商品亮点，最多支持4个亮点。注：在SDK中数组多个元素间以英文逗号分隔
        :param from_locations: 新发布商品时必填。出发地，多个出发地用英文逗号分隔。使用说明同“目的地”
        :param desc_html: PC端详情描述（新发布商品时，desc_xml和desc_html二者至少填写一个），Html格式。商家自定义Html格式描述。
        :param traveller_template_id: 可选，出行人模板id。模板id需要商家以店铺账号身份登录飞猪商家工作台，从卖家工具->出行人管理中获取。注意：如果传0则代表设置为不需要出行人模板或使用飞猪平台默认的类目模板。
        :param is_overseas_tour: 新发布商品时必填。是否出境游，0-不是，1-是。
        :param pure_play: 是否纯玩团。0-纯玩团，1-含购物团。新发布商品时不传默认为“含购物团”
        :param refund_regulations_json: 特殊可选，退款规则（json数组格式）。自定义退改时需填写（与refund_regulations字段二选一）。示例中一共包含4条规则（3条平日规则，1条节假日规则），按照顺序每条规则含义如下：出行前5日及以上，买家违约收取总费用的50，卖家违约收取总费用的20；出行前4日至1日，买家违约收取总费用的80，卖家违约收取总费用的50；行程开始当天，买家违约收取总费用的100，卖家违约收取总费用的70；如果行程日期包含节假日，则节假日条款为买家违约收取总费用的100，卖家违约收取总费用的90
        :param package_operation: 0：使用上传的套餐信息（group_tour_package_info）覆盖商品上原有的套餐信息（此时group_tour_package_info中设置的packageOperation无效）；1：根据套餐信息（group_tour_package_info）中的packageOperation和outProductId增加，修改，删除指定套餐，====默认值为0===
        :param group_tour_type: 必填，线路的“细分类型”属性：1-普通跟团游、2-半自由行、3-私家团；不填默认值设置为'1-普通跟团游'。
        :param seller_cids: 关联商品与店铺类目 结构:'cid1,cid2,...,'。如何获取卖家店铺类目具体参见：http://open.taobao.com/doc2/apiDetail.htm?apiId=65
        :param second_kill: 商品秒杀，商品秒杀三个值：可选类型web_only(只能通过web网络秒杀)，wap_only(只能通过wap网络秒杀)，web_and_wap(既能通过web秒杀也能通过wap秒杀)
        :param has_discount: 是否支持会员打折。可选值：true，false；默认值：false(不打折)。不传的话默认为false
        """
        return self._top_request(
            "alitrip.grouptour.product.upload",
            {
                "go_traffic_type": go_traffic_type,
                "trip_day": trip_day,
                "wap_desc": wap_desc,
                "sub_stock": sub_stock,
                "back_traffic_type": back_traffic_type,
                "desc_xml": desc_xml,
                "confirm_time": confirm_time,
                "title": title,
                "route_type": route_type,
                "group_tour_package_info": group_tour_package_info,
                "confirm_type": confirm_type,
                "item_custom_tag": item_custom_tag,
                "out_product_id": out_product_id,
                "trip_night": trip_night,
                "to_locations": to_locations,
                "pic_urls": pic_urls,
                "reserve_limit": reserve_limit,
                "item_id": item_id,
                "refund_type": refund_type,
                "sub_titles": sub_titles,
                "from_locations": from_locations,
                "desc_html": desc_html,
                "traveller_template_id": traveller_template_id,
                "is_overseas_tour": is_overseas_tour,
                "pure_play": pure_play,
                "refund_regulations_json": refund_regulations_json,
                "package_operation": package_operation,
                "group_tour_type": group_tour_type,
                "seller_cids": seller_cids,
                "second_kill": second_kill,
                "has_discount": has_discount
            },
            result_processor=lambda x: x["first_result"]
        )

    def taobao_alitrip_travel_product_base_add(
            self,
            base_info,
            booking_rules,
            product_sale_info,
            itineraries=None,
            refund_info=None,
            cruise_product_ext=None
    ):
        """
        供应商新增产品API
        飞猪供销平台供应商可通过该API发布新产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43494

        :param base_info: 产品基本信息
        :param booking_rules: 必填，预定规则结构。示例： [{  'rule_type': 'fee_excluded',  'rule_desc': '费用包含描述'},{  'rule_type': 'fee_included',  'rule_desc': '费用不含描述'},{  'rule_type': 'order_info',  'rule_desc': '预定须知描述'}]
        :param product_sale_info: 选填，商品的销售属性相关信息
        :param itineraries: 选填，详细行程描述结构
        :param refund_info: 选填，退款规则结构
        :param cruise_product_ext: 特殊选填（当发布邮轮商品时必填，其他情况不填）邮轮商品相关信息，发布邮轮商品时必填
        """
        return self._top_request(
            "taobao.alitrip.travel.product.base.add",
            {
                "base_info": base_info,
                "booking_rules": booking_rules,
                "product_sale_info": product_sale_info,
                "itineraries": itineraries,
                "refund_info": refund_info,
                "cruise_product_ext": cruise_product_ext
            },
            result_processor=lambda x: x["travel_item"]
        )

    def taobao_alitrip_travel_product_base_modify(
            self,
            item_id,
            itineraries=None,
            base_info=None,
            refund_info=None,
            booking_rules=None,
            cruise_product_ext=None,
            product_sale_info=None
    ):
        """
        供应商编辑产品API
        飞猪供销平台供应商可通过该API编辑产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43495

        :param item_id: 产品id
        :param itineraries: 详细行程描述结构
        :param base_info: 产品基本信息
        :param refund_info: 退款规则结构
        :param booking_rules: 预定规则结构。示例： [{ 'rule_type': 'fee_excluded', 'rule_desc': '费用包含描述'},{ 'rule_type': 'fee_included', 'rule_desc': '费用不含描述'},{ 'rule_type': 'order_info', 'rule_desc': '预定须知描述'}]
        :param cruise_product_ext: 邮轮商品相关信息
        :param product_sale_info: 商品的销售属性相关信息
        """
        return self._top_request(
            "taobao.alitrip.travel.product.base.modify",
            {
                "item_id": item_id,
                "itineraries": itineraries,
                "base_info": base_info,
                "refund_info": refund_info,
                "booking_rules": booking_rules,
                "cruise_product_ext": cruise_product_ext,
                "product_sale_info": product_sale_info
            },
            result_processor=lambda x: x["travel_item"]
        )

    def taobao_alitrip_travel_product_sku_override(
            self,
            out_product_id='',
            item_id='',
            skus=None
    ):
        """
        （供销）产品级别日历价格库存修改，全量覆盖
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43498

        :param out_product_id: 商品 外部商家编码。itemId和outProductId至少填写一个
        :param item_id: 商品id。itemId和outProductId至少填写一个
        :param skus: 商品日历价格库存套餐
        """
        return self._top_request(
            "taobao.alitrip.travel.product.sku.override",
            {
                "out_product_id": out_product_id,
                "item_id": item_id,
                "skus": skus
            },
            result_processor=lambda x: x["travel_item"]
        )

    def alitrip_travel_gereralproduct_update(
            self,
            base_info,
            booking_rules,
            refund_info=None,
            product_sale_info=None,
            date_sku_info_list=None
    ):
        """
        通用类目产品发布编辑
        提供给飞猪供销平台供应商发布编辑通用类目产品的API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43499

        :param base_info: 产品基本信息
        :param booking_rules: 必填，预定规则结构。示例： [{ 'rule_type': 'fee_excluded', 'rule_desc': '费用包含描述'},{ 'rule_type': 'fee_included', 'rule_desc': '费用不含描述'},{ 'rule_type': 'order_info', 'rule_desc': '预定须知描述'}]
        :param refund_info: 退款规则结构
        :param product_sale_info: 产品销售信息
        :param date_sku_info_list: 更新sku信息，仅限日历商品使用
        """
        return self._top_request(
            "alitrip.travel.gereralproduct.update",
            {
                "base_info": base_info,
                "booking_rules": booking_rules,
                "refund_info": refund_info,
                "product_sale_info": product_sale_info,
                "date_sku_info_list": date_sku_info_list
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_travel_product_gereralsku_update(
            self,
            item_id,
            alias=None,
            properties=None,
            price='',
            quantity='',
            outer_id='',
            date_list=None
    ):
        """
        (供销)船票通用类目sku新增&编辑API
        发布SKU信息（如果properties重复 则更新）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43502

        :param item_id: 淘宝商品ID
        :param alias: sku销售属性别名；如套餐1 需要调整成其他 需要在这里修改
        :param properties: 商品属性列表；由类目的属性PID和VID组成，属性的pid调用taobao.itemprops.get取得，属性值的vid用taobao.itempropvalues.get取得vid。如果该类目下面没有属性，可以不用填写。如果有属性，必选属性必填，其他非必选属性可以选择不填写.属性不能超过35对
        :param price: Sku的销售价格。精确到2位小数;单位:分。如:20007，表示:200元7分。修改后的sku价格要保证商品的价格在所有sku价格所形成的价格区间内（例如：商品价格为6元，sku价格有5元、10元两种，如果要修改5元sku的价格，那么修改的范围只能是0-6元之间；如果要修改10元的sku，那么修改的范围只能是6到无穷大的区间中）
        :param quantity: Sku的库存数量。sku的总数量应该小于等于商品总数量(Item的NUM)，sku数量变化后item的总数量也会随着变化。取值范围:大于等于零的整数
        :param outer_id: 商家编码
        :param date_list: SKU的销售价格库存，日历商品使用
        """
        return self._top_request(
            "alitrip.travel.product.gereralsku.update",
            {
                "item_id": item_id,
                "alias": alias,
                "properties": properties,
                "price": price,
                "quantity": quantity,
                "outer_id": outer_id,
                "date_list": date_list
            },
            result_processor=lambda x: x["first_result"]
        )


class TbJiuDianShangPin(DingTalkBaseAPI):
    """
    酒店商品API
    """

    def taobao_xhotel_roomtype_get(
            self,
            rid='',
            outer_id='',
            vendor=''
    ):
        """
        房型查询接口
        房型查询房型查询接口返回结果增加date_confirm字段
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22660

        :param rid: 废弃，使用商家房型ID
        :param outer_id: 商家房型ID
        :param vendor: 系统商，一般不填写，使用须申请
        """
        return self._top_request(
            "taobao.xhotel.roomtype.get",
            {
                "rid": rid,
                "outer_id": outer_id,
                "vendor": vendor
            },
            result_processor=lambda x: x["xroomtype"]
        )

    def taobao_xhotel_roomtype_update(
            self,
            name='',
            max_occupancy='2',
            area='',
            floor='',
            bed_type='',
            bed_size='',
            internet='',
            service='',
            extend='',
            rid='',
            window_type='',
            srid='',
            outer_id='',
            vendor='',
            hid='',
            hotel_code='',
            pics='',
            status='',
            name_e='',
            operator='',
            connection_type=''
    ):
        """
        房型更新接口（ID不存在自动新增）
        酒店房型更新或添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22661

        :param name: 房型名称。不能超过30字；添加房型时为必须
        :param max_occupancy: 最大入住人数，默认2（1-99）
        :param area: 具体面积大小，请按照正确格式填写。两种格式，例如：40 或者 10-20
        :param floor: 客房在建筑的第几层，隔层为1-2层，4-5层，7-8层
        :param bed_type: 床型。必填，按链接中床型列表定义值存储 http://open.taobao.com/docs/doc.htm?&docType=1&articleId=105610
        :param bed_size: 床宽。按自己定义存储，比如：2.1米
        :param internet: 宽带服务。A,B,C,D。分别代表： A：无宽带，B：免费宽带，C：收费宽带，D：部分收费宽带
        :param service: 设施服务。JSON格式。 value值true有此服务，false没有。 bar：吧台，catv：有线电视，ddd：国内长途电话，idd：国际长途电话，toilet：独立卫生间，pubtoliet：公共卫生间。 如： {'bar':false,'catv':false,'ddd':false,'idd':false,'pubtoilet':false,'toilet':false}
        :param extend: 扩展信息的JSON。注：此字段的值需要ISV在接入前与淘宝沟通，且确认能解析
        :param rid: （已废弃）
        :param window_type: 0:无窗/1:有窗
        :param srid: 该字段只有确定的时候，才允许填入。用于标示和淘宝房型的匹配关系。目前尚未启动该字段。
        :param outer_id: （必传）商家房型ID
        :param vendor: 系统商，不要使用，只有申请才可用
        :param hid: （已废弃）
        :param hotel_code: 商家酒店ID(如果更新房型的时候房型不存在，会拿该code去新增房型)
        :param pics: 房型图片只支持远程图片，格式如下：[{'url':'http://taobao.com/123.jpg','ismain':'true'},{'url':'http://taobao.com/456.jpg','ismain':'false'},{'url':'http://taobao.com/789.jpg','ismain':'false'}]其中url是远程图片的访问地址（URL地址必须是合法的，否则会报错），main是是否为主图。只能设置一张图片为主图。要求：无logo、水印、边框、人物，不模糊，不重复，不歪斜，房间图清晰，图片尺寸不小于300*225，不小于5M
        :param status: 房型状态。0:正常，-1:删除，-2:停售
        :param name_e: 卖家房型英文名称
        :param operator: 操作人信息
        :param connection_type: 属性值为1: 含义是非直连房型
        """
        return self._top_request(
            "taobao.xhotel.roomtype.update",
            {
                "name": name,
                "max_occupancy": max_occupancy,
                "area": area,
                "floor": floor,
                "bed_type": bed_type,
                "bed_size": bed_size,
                "internet": internet,
                "service": service,
                "extend": extend,
                "rid": rid,
                "window_type": window_type,
                "srid": srid,
                "outer_id": outer_id,
                "vendor": vendor,
                "hid": hid,
                "hotel_code": hotel_code,
                "pics": pics,
                "status": status,
                "name_e": name_e,
                "operator": operator,
                "connection_type": connection_type
            },
            result_processor=lambda x: x["xroomtype"]
        )

    def taobao_xhotel_roomtype_add(
            self,
            outer_id,
            name,
            bed_type,
            hid='',
            max_occupancy='2',
            area='',
            floor='',
            bed_size='',
            internet='',
            service='',
            extend='',
            window_type='',
            srid='',
            out_hid='',
            vendor='',
            pics='',
            name_e='',
            operator='',
            connection_type=''
    ):
        """
        房型新增接口（ID重复变更新）
        房型添加或更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22662

        :param outer_id: 卖家房型ID，不能重复建议格式是:酒店code_房型code
        :param name: 房型名称。不能超过30字
        :param bed_type: 床型。按链接中床型列表定义值存储 http://open.taobao.com/docs/doc.htm?&docType=1&articleId=105610
        :param hid: （已废弃）请使用outHid
        :param max_occupancy: 最大入住人数，默认2（1-99）
        :param area: 具体面积大小，请按照正确格式填写。两种格式，例如：40或者 10-20
        :param floor: 客房在建筑的第几层，隔层为1-2层，4-5层，7-8层
        :param bed_size: 床宽。按自己定义存储，比如：2.1米
        :param internet: 宽带服务。A,B,C,D。分别代表： A：无宽带，B：免费宽带，C：收费宽带，D：部分收费宽带
        :param service: 设施服务。JSON格式。 value值true有此服务，false没有。 bar：吧台，catv：有线电视，ddd：国内长途电话，idd：国际长途电话，toilet：独立卫生间，pubtoliet：公共卫生间。 如： {'bar':false,'catv':false,'ddd':false,'idd':false,'pubtoilet':false,'toilet':false}
        :param extend: 不要使用
        :param window_type: 0:无窗/1:有窗/2:部分有窗/3:暗窗/4:部分暗窗
        :param srid: 该字段只有确定的时候，才允许填入。用于标示和淘宝房型的匹配关系。目前尚未启动该字段。
        :param out_hid: （必传）商家酒店ID，指明该房型属于哪家酒店
        :param vendor: 系统商，无申请不可使用
        :param pics: 房型图片只支持远程图片，格式如下：[{'url':'http://taobao.com/123.jpg','ismain':'true'},{'url':'http://taobao.com/456.jpg','ismain':'false'},{'url':'http://taobao.com/789.jpg','ismain':'false'}]其中url是远程图片的访问地址（URL地址必须是合法的，否则会报错），main是是否为主图。只能设置一张图片为主图。
        :param name_e: 卖家房型英文名称
        :param operator: 操作人信息
        :param connection_type: 属性值为1: 含义是非直连房型
        """
        return self._top_request(
            "taobao.xhotel.roomtype.add",
            {
                "outer_id": outer_id,
                "name": name,
                "bed_type": bed_type,
                "hid": hid,
                "max_occupancy": max_occupancy,
                "area": area,
                "floor": floor,
                "bed_size": bed_size,
                "internet": internet,
                "service": service,
                "extend": extend,
                "window_type": window_type,
                "srid": srid,
                "out_hid": out_hid,
                "vendor": vendor,
                "pics": pics,
                "name_e": name_e,
                "operator": operator,
                "connection_type": connection_type
            },
            result_processor=lambda x: x["xroomtype"]
        )

    def taobao_xhotel_get(
            self,
            hid='',
            outer_id='',
            vendor='',
            need_sale_info='false'
    ):
        """
        酒店查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22663

        :param hid: 废弃，请使用outer_id
        :param outer_id: 卖家系统中的酒店ID。
        :param vendor: 系统商，一般不用填写，使用须申请
        :param need_sale_info: 是否需要在售状态(默认false不需要)
        """
        return self._top_request(
            "taobao.xhotel.get",
            {
                "hid": hid,
                "outer_id": outer_id,
                "vendor": vendor,
                "need_sale_info": need_sale_info
            },
            result_processor=lambda x: x["xhotel"]
        )

    def taobao_xhotel_update(
            self,
            address,
            tel,
            hid='',
            name='',
            used_name='',
            domestic='',
            country='',
            province='',
            city='',
            district='0',
            business='',
            longitude='',
            latitude='',
            position_type='',
            extend='',
            shid='',
            outer_id='',
            vendor='',
            star='',
            opening_time='',
            decorate_time='',
            floors='',
            rooms='',
            description='',
            hotel_facilities='',
            service='',
            room_facilities='',
            pics='',
            brand='',
            postal_code='',
            hotel_policies='',
            booking_notice='',
            status='',
            credit_card_types='',
            orbit_track='',
            name_e='',
            tag_json='',
            ali_nick='',
            supplier='',
            settlement_currency='',
            standard_booking_notice='',
            standard_hotel_facilities='',
            standard_hotel_service='',
            standard_room_facilities='',
            standard_amuse_facilities=''
    ):
        """
        酒店更新接口（ID不存在自动新增）
        酒店更新接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22664

        :param address: 酒店地址。长度不能超过120
        :param tel: 酒店电话。格式：国家代码（最长6位）#区号（最长4位）#电话（最长20位）。国家代码提示：中国大陆0086、香港00852、澳门00853、台湾00886
        :param hid: （已废弃）请使用outer_id来标识要修改的酒店
        :param name: 酒店名称；（新增酒店时为必须）,国内酒店请传中文名称
        :param used_name: 酒店曾用名
        :param domestic: 是否国内酒店。0:国内;1:国外
        :param country: domestic为true时，固定China； domestic为false时，必须传定义的海外国家编码值。参见：http://kezhan.trip.taobao.com/countrys.html
        :param province: 省份编码。参见：http://kezhan.trip.taobao.com/area.html，domestic为false时默认为0
        :param city: 城市编码。参见：http://kezhan.trip.taobao.com/area.html，domestic为false时，输入对应国家的海外城市编码，可调用海外城市查询接口获取；（新增酒店时为必须）
        :param district: 区域（县级市）编码。参见：http://kezhan.trip.taobao.com/area.html
        :param business: 商业区（圈）长度不超过20字
        :param longitude: 经度
        :param latitude: 纬度
        :param position_type: 坐标类型，现在支持：G – GoogleB – 百度A – 高德M – MapbarL – 灵图
        :param extend: 不要使用
        :param shid: 该字段只有确定的时候，才允许填入。用于标示和淘宝酒店的匹配关系。目前尚未启动该字段。
        :param outer_id: 必传，酒店标识，商家酒店ID
        :param vendor: 系统商，一般情况不用，需申请使用
        :param star: 酒店档次，星级。取值范围为1,1.5,2,2.5,3,3.5,4,4.5,5
        :param opening_time: 开业时间，格式为2015-01-01
        :param decorate_time: 装修时间，格式为2015-10-01
        :param floors: 楼层信息
        :param rooms: 房间数 0~9999之内的数字
        :param description: 酒店描述
        :param hotel_facilities: 酒店设施。json格式示例值：{'free Wi-Fi in all rooms':'true','massage':'true','meetingRoom':'true'}目前支持维护的设施枚举有：free Wi-Fi in all rooms 所有房间设有免费无线网络;meetingRoom 会议室;massage  按摩室;fitnessClub 健身房;bar 酒吧;cafe 咖啡厅;frontDeskSafe 前台贵重物品保险柜wifi 无线上网公共区域;casino 娱乐场/棋牌室;restaurant 餐厅;smoking area 吸烟区;Business Facilities 商务设施
        :param service: 酒店基础服务。json格式示例值：{'receiveForeignGuests':'true','morningCall':'true','breakfast':'true'}目前支持维护的设施枚举有：receiveForeignGuests 接待外宾;morningCall 叫醒服务; breakfast  早餐服务; airportShuttle 接机服务; luggageClaim 行李寄存; rentCar 租车; HourRoomService24 24小时客房服务; airportTransfer 酒店/机场接送; dryCleaning 干洗; expressCheckInCheckOut 快速入住/退房登记; custodyServices 保管服务
        :param room_facilities: 房间的基础设施。json格式示例值：{'bathtub':'true','bathPub':'true'}目前支持维护的设施枚举有：bathtub 独立卫浴;bathPub 公共卫浴
        :param pics: 酒店图片只支持远程图片，格式如下：[{'url':'http://123.jpg','ismain':'false','type':'大堂','attribute':'普通图'},{'url':'http://456.jpg','ismain':'true','type':'公共区域','attribute':'全景图'},{'url':'http://789.jpg','ismain':'false','type':'大堂','attribute':'普通图'}] 其中url是远程图片的访问地址，main是否为主图（主图只能有一个）,attribute表示图片属性，取值范围只能是：[普通图, 平面图, 全景图] ,type表示图片类型，取值范围只能是：[周边, 外观, 商务中心, 健身房, 其他, 会议室, 餐厅, 浴室, 客房, 公共区域, 娱乐设施, 大堂, 泳池]，图片数量最多10张。要求：无logo、水印、边框、人物，不模糊、重复、歪斜，房间图清晰，图片尺寸不小于300*225，不小于5M
        :param brand: 酒店品牌。取值为数字。枚举如下（只给出top30，如果不满足，请联系去啊接口人）： ruJia('1', 'rujiakuaijie', '如家快捷', 1), qiTian('2', '7 days', '7天连锁', 1), hanTing('3', 'Hanting Inns & Hotels', '汉庭酒店', 1), geLinHaoTai('4', 'Green Tree Inn', '格林豪泰', 1), jinJiang('5', 'Jinjiang Inn', '锦江之星', 1), su8('6', 'Super 8', '速8', 1), moTai('7', 'Motel', '莫泰', 1), zhouji('8', 'InterContinental', '洲际', 4), budint('9', 'Pod Inn', '布丁', 1), jiuJiu('10', 'jiujiuliansuo', '99连锁', 1), piaoHome('11', 'Piao Home Inn', '飘HOME', 1), juzi('12', 'Orange Hotels', '桔子酒店', 1), yibai('13', 'yibai', '易佰', 1), weiyena('14','weiyena','维也纳',2), huangguanjiari('15', 'huangguanjiari', '皇冠假日', 4), xidawu('16', 'xidawu', '喜达屋', 3), chengshiBJ('17', 'chengshibianjie', '城市便捷', 1), shagnKeYou('18', 'shagnkeyou', '尚客优', 1), jinjiang('19', 'jinjiang', '锦江酒店', 3), wendemu('20', 'Hawthorn Suites', '温德姆', 4), yibisi('21', 'Ibis Hotels', '宜必思', 1), wanhao('22', 'JM Hoteles', '万豪', 4), yijia365('23', 'yijia365', '驿家365', 1), shoulv('24', 'shoulvjituan', '首旅建国', 3), kaiyuan('25', 'New Century Hotel', '开元大酒店', 4), yagao('26', 'yagao', '雅高', 3), daisi('27', 'daisi', '戴斯', 3), jinling('28', 'jinlingliansuo', '金陵', 4), xianggelila('29', 'Shangri-La City Hotels', '香格里拉', 4), xierdun('30', 'Hilton', '希尔顿', 4)
        :param postal_code: 邮编
        :param hotel_policies: 酒店入住政策(针对国际酒店，儿童及加床信息)格式：{'children_age_from':'2','children_age_to':'3','children_stay_free':'True','infant_age':'1','min_guest_age':'4'}
        :param booking_notice: 预订须知。json字段描述：hotelInMountaintop 酒店位于山顶 1在山顶、0不在；needBoat 酒店需要坐船前往 1需要、0不需要；酒店位于景区内 1在景区、0不在；extraBed 加床收费；extraCharge 额外收费；arrivalTime 到店时间；extend 其他补充项
        :param status: 酒店状态 0:正常，-1:删除，-2:停售
        :param credit_card_types: 逗号分隔的字符串 1visa；2万事达卡；3美国运通卡；4发现卡；5大来卡；6JCB卡；7银联卡
        :param orbit_track: 扩展信息的JSON。 orbitTrack 业务字段是指从飞猪到酒店说经过平台名以及方式的一个数组，按顺序，从飞猪，再经过若干平台，最后到酒店， platform是指定当前平台名，ways 是指通过哪种方式到该平台 其中，飞猪到下一个平台里, ways 字段只能是【直连】、【人工】两个方式之一； 从最后一个平台到酒店的ways字段只能是【电话】、【传真】、【人工】、【系统】之一； 第一个 飞猪平台 和 最后具体酒店是至少得填的
        :param name_e: 卖家酒店英文名称
        :param tag_json: 打标去标使用的 tagJson 字段
        :param ali_nick: 旺旺昵称
        :param supplier: 供应商标识，如果确实需要修改原来的供应商标识才需要填写，否则不需要填写，请谨慎使用。
        :param settlement_currency: 结算流程中的结算币种，如需对接请联系飞猪技术支持，请谨慎使用
        :param standard_booking_notice: 资源方酒店预订须知,参考文档https://open.alitrip.com/docs/doc.htm?docType=1&articleId=108891
        :param standard_hotel_facilities: 资源方酒店设施,参考文档https://open.alitrip.com/docs/doc.htm?docType=1&articleId=108891
        :param standard_hotel_service: 资源方酒店服务,参考文档https://open.alitrip.com/docs/doc.htm?docType=1&articleId=108891
        :param standard_room_facilities: 资源方房型设施,参考文档https://open.alitrip.com/docs/doc.htm?docType=1&articleId=108891
        :param standard_amuse_facilities: 资源方娱乐设施,参考文档https://open.alitrip.com/docs/doc.htm?docType=1&articleId=108891
        """
        return self._top_request(
            "taobao.xhotel.update",
            {
                "address": address,
                "tel": tel,
                "hid": hid,
                "name": name,
                "used_name": used_name,
                "domestic": domestic,
                "country": country,
                "province": province,
                "city": city,
                "district": district,
                "business": business,
                "longitude": longitude,
                "latitude": latitude,
                "position_type": position_type,
                "extend": extend,
                "shid": shid,
                "outer_id": outer_id,
                "vendor": vendor,
                "star": star,
                "opening_time": opening_time,
                "decorate_time": decorate_time,
                "floors": floors,
                "rooms": rooms,
                "description": description,
                "hotel_facilities": hotel_facilities,
                "service": service,
                "room_facilities": room_facilities,
                "pics": pics,
                "brand": brand,
                "postal_code": postal_code,
                "hotel_policies": hotel_policies,
                "booking_notice": booking_notice,
                "status": status,
                "credit_card_types": credit_card_types,
                "orbit_track": orbit_track,
                "name_e": name_e,
                "tag_json": tag_json,
                "ali_nick": ali_nick,
                "supplier": supplier,
                "settlement_currency": settlement_currency,
                "standard_booking_notice": standard_booking_notice,
                "standard_hotel_facilities": standard_hotel_facilities,
                "standard_hotel_service": standard_hotel_service,
                "standard_room_facilities": standard_room_facilities,
                "standard_amuse_facilities": standard_amuse_facilities
            },
            result_processor=lambda x: x["xhotel"]
        )

    def taobao_xhotel_add(
            self,
            outer_id,
            name,
            city,
            address,
            tel,
            used_name='',
            domestic='0',
            country='',
            province='',
            district='0',
            business='',
            longitude='',
            latitude='',
            position_type='',
            extend='',
            shid='',
            vendor='',
            star='',
            opening_time='',
            decorate_time='',
            floors='',
            rooms='',
            description='',
            hotel_policies='',
            hotel_facilities='',
            service='',
            room_facilities='',
            pics='',
            brand='',
            postal_code='',
            booking_notice='',
            credit_card_types='',
            orbit_track='',
            name_e='',
            supplier='',
            settlement_currency='',
            standard_amuse_facilities='',
            standard_room_facilities='',
            standard_hotel_service='',
            standard_hotel_facilities='',
            standard_booking_notice=''
    ):
        """
        酒店新增接口（ID重复自动更新）
        添加酒店或更新酒店
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22665

        :param outer_id: 外部酒店ID, 这是卖家自己系统中的ID
        :param name: 酒店名称,国内酒店请传中文名称
        :param city: 城市编码。参见：http://hotel.alitrip.com/area.htm，domestic为false时，输入对应国家的海外城市编码，可调用海外城市查询接口获取；（更新酒店时为可选）
        :param address: 酒店地址。长度不能超过120。不填入会导致不能自动匹配。
        :param tel: 酒店电话。格式：国家代码（最长6位）#区号（最长4位）#电话（最长20位）。国家代码提示：中国大陆0086、香港00852、澳门00853、台湾00886
        :param used_name: 酒店曾用名
        :param domestic: 是否国内酒店。0:国内;1:国外。默认是国内
        :param country: domestic为0时，固定China； domestic为1时，必须传定义的海外国家编码值。参见：http://hotel.alitrip.com/area.htm
        :param province: 省份编码。选填，不填入的时候已city字段为准.参见：http://hotel.alitrip.com/area.htm，domestic为false时默认为0
        :param district: 区域（县级市）编码。参见：http://hotel.alitrip.com/area.htm
        :param business: 商业区（圈）长度不超过20字
        :param longitude: 经度
        :param latitude: 纬度
        :param position_type: 坐标类型，现在支持：G – GoogleB – 百度A – 高德M – MapbarL – 灵图
        :param extend: 扩展信息的JSON。注：此字段的值需要ISV在接入前与淘宝沟通，且确认能解析
        :param shid: 该字段只有确定的时候，才允许填入。用于标示和淘宝酒店的匹配关系。目前尚未启动该字段。
        :param vendor: 对接系统商名称：可为空不要乱填，需要申请后使用
        :param star: 酒店档次，星级。取值范围为1,1.5,2,2.5,3,3.5,4,4.5,5
        :param opening_time: 开业时间，格式为2015-01-01
        :param decorate_time: 装修时间，格式为2015-01-01装修时间
        :param floors: 楼层信息。
        :param rooms: 房间数 0~9999之内的数字
        :param description: 酒店描述
        :param hotel_policies: 酒店入住政策(针对国际酒店，儿童及加床信息)格式：{'children_age_from':'2','children_age_to':'3','children_stay_free':'True','infant_age':'1','min_guest_age':'4'}
        :param hotel_facilities: 酒店设施。json格式示例值：{'free Wi-Fi in all rooms':'true','massage':'true','meetingRoom':'true'}目前支持维护的设施枚举有：free Wi-Fi in all rooms 所有房间设有免费无线网络;meetingRoom 会议室;massage  按摩室;fitnessClub 健身房;bar 酒吧;cafe 咖啡厅;frontDeskSafe 前台贵重物品保险柜wifi 无线上网公共区域;casino 娱乐场/棋牌室;restaurant 餐厅;smoking area 吸烟区;Business Facilities 商务设施
        :param service: 酒店基础服务。json格式示例值：{'receiveForeignGuests':'true','morningCall':'true','breakfast':'true'}目前支持维护的设施枚举有：receiveForeignGuests 接待外宾;morningCall 叫醒服务; breakfast  早餐服务; airportShuttle 接机服务; luggageClaim 行李寄存; rentCar 租车; HourRoomService24 24小时客房服务; airportTransfer 酒店/机场接送; dryCleaning 干洗; expressCheckInCheckOut 快速入住/退房登记; custodyServices 保管服务
        :param room_facilities: 房间的基础设施。json格式示例值：{'bathtub':'true','bathPub':'true'}目前支持维护的设施枚举有：bathtub 独立卫浴;bathPub 公共卫浴
        :param pics: 酒店图片只支持远程图片，格式如下：[{'url':'http://123.jpg','ismain':'false','type':'大堂','attribute':'普通图'},{'url':'http://456.jpg','ismain':'true','type':'公共区域','attribute':'全景图'},{'url':'http://789.jpg','ismain':'false','type':'大堂','attribute':'普通图'}] 其中url是远程图片的访问地址（URL地址必须是合法的，否则会报错），main是是否为主图（主图只能有一个，如果有多个或者没有，则会报错）,attribute表示图片属性，取值范围只能是：[普通图, 平面图, 全景图] ,type表示图片类型，取值范围只能是：[周边, 外观, 商务中心, 健身房, 其他, 会议室, 餐厅, 浴室, 客房, 公共区域, 娱乐设施, 大堂, 泳池]，图片数量最多是能是10张。
        :param brand: 酒店品牌。取值为数字。枚举如下（只给出top30，如果不满足，请联系去啊接口人）：    ruJia('1', 'rujiakuaijie', '如家快捷', 1),    qiTian('2', '7 days', '7天连锁', 1),    hanTing('3', 'Hanting Inns & Hotels', '汉庭酒店', 1),    geLinHaoTai('4', 'Green Tree Inn', '格林豪泰', 1),    jinJiang('5', 'Jinjiang Inn', '锦江之星', 1),    su8('6', 'Super 8', '速8', 1),    moTai('7', 'Motel', '莫泰', 1),    zhouji('8', 'InterContinental', '洲际', 4),    budint('9', 'Pod Inn', '布丁', 1),    jiuJiu('10', 'jiujiuliansuo', '99连锁', 1),    piaoHome('11', 'Piao Home Inn', '飘HOME', 1),    juzi('12', 'Orange Hotels', '桔子酒店', 1),    yibai('13', 'yibai', '易佰', 1),    weiyena('14','weiyena','维也纳',2),    huangguanjiari('15', 'huangguanjiari', '皇冠假日', 4),    xidawu('16', 'xidawu', '喜达屋', 3),    chengshiBJ('17', 'chengshibianjie', '城市便捷', 1),    shagnKeYou('18', 'shagnkeyou', '尚客优', 1),    jinjiang('19', 'jinjiang', '锦江酒店', 3),    wendemu('20', 'Hawthorn Suites', '温德姆', 4),    yibisi('21', 'Ibis Hotels', '宜必思', 1),    wanhao('22', 'JM Hoteles', '万豪', 4),    yijia365('23', 'yijia365', '驿家365', 1),    shoulv('24', 'shoulvjituan', '首旅建国', 3),    kaiyuan('25', 'New Century Hotel', '开元大酒店', 4),    yagao('26', 'yagao', '雅高', 3),    daisi('27', 'daisi', '戴斯', 3),    jinling('28', 'jinlingliansuo', '金陵', 4),    xianggelila('29', 'Shangri-La City Hotels', '香格里拉', 4),    xierdun('30', 'Hilton', '希尔顿', 4),
        :param postal_code: 邮政编码。
        :param booking_notice: 预订须知。json字段描述：hotelInMountaintop 酒店位于山顶 1在山顶、0不在；needBoat 酒店需要坐船前往 1需要、0不需要；酒店位于景区内 1在景区、0不在；extraBed 加床收费；extraCharge 额外收费；arrivalTime 到店时间；extend 其他补充项
        :param credit_card_types: 逗号分隔的字符串 1visa；2万事达卡；3美国运通卡；4发现卡；5大来卡；6JCB卡；7银联卡
        :param orbit_track: 扩展信息的JSON。 orbitTrack 业务字段是指从飞猪到酒店说经过平台名以及方式的一个数组，按顺序，从飞猪，再经过若干平台，最后到酒店， platform是指定当前平台名，ways 是指通过哪种方式到该平台 其中，飞猪到下一个平台里, ways 字段只能是【直连】、【人工】两个方式之一； 从最后一个平台到酒店的ways字段只能是【电话】、【传真】、【人工】、【系统】之一； 第一个 飞猪平台 和 最后具体酒店是至少得填的
        :param name_e: 卖家酒店英文名称
        :param supplier: 供应商标识，需要提前开通权限，如果需要对接请联系技术支持，请谨慎使用
        :param settlement_currency: 结算过程中的结算币种符合，如需对接请联系飞猪技术支持，请谨慎使用
        :param standard_amuse_facilities: 标准娱乐设施,参考文档https://open.alitrip.com/docs/doc.htm?docType=1&articleId=108891
        :param standard_room_facilities: 标准房型设施,参考文档https://open.alitrip.com/docs/doc.htm?docType=1&articleId=108891
        :param standard_hotel_service: 标准酒店服务,参考文档https://open.alitrip.com/docs/doc.htm?docType=1&articleId=108891
        :param standard_hotel_facilities: 标准酒店设施,参考文档https://open.alitrip.com/docs/doc.htm?docType=1&articleId=108891
        :param standard_booking_notice: 标准预订须知,参考文档https://open.alitrip.com/docs/doc.htm?docType=1&articleId=108891
        """
        return self._top_request(
            "taobao.xhotel.add",
            {
                "outer_id": outer_id,
                "name": name,
                "city": city,
                "address": address,
                "tel": tel,
                "used_name": used_name,
                "domestic": domestic,
                "country": country,
                "province": province,
                "district": district,
                "business": business,
                "longitude": longitude,
                "latitude": latitude,
                "position_type": position_type,
                "extend": extend,
                "shid": shid,
                "vendor": vendor,
                "star": star,
                "opening_time": opening_time,
                "decorate_time": decorate_time,
                "floors": floors,
                "rooms": rooms,
                "description": description,
                "hotel_policies": hotel_policies,
                "hotel_facilities": hotel_facilities,
                "service": service,
                "room_facilities": room_facilities,
                "pics": pics,
                "brand": brand,
                "postal_code": postal_code,
                "booking_notice": booking_notice,
                "credit_card_types": credit_card_types,
                "orbit_track": orbit_track,
                "name_e": name_e,
                "supplier": supplier,
                "settlement_currency": settlement_currency,
                "standard_amuse_facilities": standard_amuse_facilities,
                "standard_room_facilities": standard_room_facilities,
                "standard_hotel_service": standard_hotel_service,
                "standard_hotel_facilities": standard_hotel_facilities,
                "standard_booking_notice": standard_booking_notice
            },
            result_processor=lambda x: x["xhotel"]
        )

    def taobao_xhotel_room_get(
            self,
            vendor='',
            out_rid='',
            gid=''
    ):
        """
        room实体查询
        此接口用于查询一个商品，根据传入的gid查询商品信息。卖家只能查询自己的商品。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22666

        :param vendor: 卖家渠道 如果gid为空，那么out_rid和vendor都不能为空。 支持通过gid或者通过out_rid和vendor来获取商品
        :param out_rid: 外部房型id 如果gid为空，那么out_rid和vendor都不能为空 支持通过gid或者通过out_rid和vendor来获取商品
        :param gid: 废弃
        """
        return self._top_request(
            "taobao.xhotel.room.get",
            {
                "vendor": vendor,
                "out_rid": out_rid,
                "gid": gid
            },
            result_processor=lambda x: x["room"]
        )

    def taobao_xhotel_rateplan_get(
            self,
            rpid='',
            rateplan_code='',
            vendor=''
    ):
        """
        价格计划rateplan查询
        酒店产品库rateplan查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22667

        :param rpid: 废弃，使用rateplan_code
        :param rateplan_code: 卖家自己系统的Code，简称RateCode
        :param vendor: 系统商，一般不填写，使用须申请
        """
        return self._top_request(
            "taobao.xhotel.rateplan.get",
            {
                "rpid": rpid,
                "rateplan_code": rateplan_code,
                "vendor": vendor
            },
            result_processor=lambda x: x["rateplan"]
        )

    def taobao_xhotel_rooms_update(
            self,
            room_quota_map
    ):
        """
        房型共享库存推送接口（批量全量）
        此接口用于更新多个集市酒店商品房态信息，根据传入的gids更新商品信息，该商品必须为对应的发布者才能执行更新操作。如果对应的商品在淘宝集市酒店系统中不存在，则会返回错误提示。是全量更新，非增量，会把之前的房态进行覆盖。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22670

        :param room_quota_map: 批量全量推送房型共享库存,一次最多修改30个房型。json encode。示例：[{'out_rid':'hotel1_roomtype22','vendor':'','allotment_start_Time':'','allotment_end_time':'','superbook_start_time':'','superbook_end_time':'','roomQuota':[{'date':2010-01-28,'quota':10,'al_quota':2,'sp_quota':3}]}] 其中al_quota为保留房库存，sp_quota为超预定库存，quota为物理库存。al_quota和sp_quota需要向运营申请权限才可维护。allotment_start_Time和allotment_end_time为保留房库存开始和截止时间；superbook_start_time和superbook_end_time为超预定库存开始和截止时间。
        """
        return self._top_request(
            "taobao.xhotel.rooms.update",
            {
                "room_quota_map": room_quota_map
            },
            result_processor=lambda x: x["gids"]
        )

    def taobao_xhotel_room_update(
            self,
            gid='',
            title='',
            guide='',
            desc='',
            pic='',
            has_receipt='',
            receipt_type='',
            receipt_other_type_desc='',
            receipt_info='',
            inventory='',
            vendor='',
            out_rid='',
            room_switch_cal='',
            superbook_end_time='',
            superbook_start_time='',
            allotment_end_time='',
            allotment_start_time='',
            status=''
    ):
        """
        房型库存推送接口（全量推送）
        此接口用于更新一个酒店商品，根据传入的gid更新商品信息，该商品必须为对应的发布者才能执行更新操作。如果对应的商品在酒店系统中不存在，则会返回错误提示。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22671

        :param gid: 废弃，使用out_rid
        :param title: 废弃，宝贝名称展示在店铺里
        :param guide: 废弃，房型购买须知展示在PC购物路径
        :param desc: 废弃，宝贝描述展示在宝贝详情页面
        :param pic: 废弃，宝贝图片，没有默认使用标准酒店房型图片
        :param has_receipt: 废弃，房型是否提供发票
        :param receipt_type: 废弃，房型发票类型。A,B。分别代表： A:酒店住宿发票,B:其他
        :param receipt_other_type_desc: 废弃，房型发票类型为其他时的发票描述,不能超过30个字
        :param receipt_info: 废弃，房型发票说明，不能超过100个字
        :param inventory: 房型共享库存日历。quota物理库存；al_quota保留房库存；sp_quota超预定库存。其中保留房库存和超预定库存需要向运营申请权限示例：[{'date':2011-01-28,'quota':10,'al_quota':2,'sp_quota':3}]
        :param vendor: 系统商，一般不填写，使用须申请
        :param out_rid: 卖家房型ID
        :param room_switch_cal: 房型库存开关。 1，开；2，关
        :param superbook_end_time: 超预定库存截止时间
        :param superbook_start_time: 超预定库存开始时间
        :param allotment_end_time: 保留房库存截止时间
        :param allotment_start_time: 保留房库存截止时间
        :param status: 宝贝状态,1上架, 2下架
        """
        return self._top_request(
            "taobao.xhotel.room.update",
            {
                "gid": gid,
                "title": title,
                "guide": guide,
                "desc": desc,
                "pic": pic,
                "has_receipt": has_receipt,
                "receipt_type": receipt_type,
                "receipt_other_type_desc": receipt_other_type_desc,
                "receipt_info": receipt_info,
                "inventory": inventory,
                "vendor": vendor,
                "out_rid": out_rid,
                "room_switch_cal": room_switch_cal,
                "superbook_end_time": superbook_end_time,
                "superbook_start_time": superbook_start_time,
                "allotment_end_time": allotment_end_time,
                "allotment_start_time": allotment_start_time,
                "status": status
            },
            result_processor=lambda x: x["gid"]
        )

    def taobao_xhotel_rates_update(
            self,
            rate_inventory_price_map
    ):
        """
        价格推送接口（批量全量）
        酒店产品库rate批量更新房态信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22672

        :param rate_inventory_price_map: 批量修改价格和房价专有库存信息，json格式,可同时修改多套房型+价格计划的价格：A:use_room_inventory:是否使用房型共享库存，可选值 true false 1、true时：使用房型共享库存 2、false时：使用房价专有库存，此时要求房价专有库存必填。B:date  日期必须为 T---T+180 日内的日期（T为当天），不能重复。 C:price 价格 int类型 取值范围1-99999999 单位为分D:quota 房价专有库存 int 类型 取值范围  0-999（数量库存） 60000(状态库存关) 61000(状态库存开) E:status 价格开关，0为关，1为开。lock_start_time为锁库存开始时间，lock_end_time为锁库存结束时间，如果当前时间在这个时间范围内，那么不允许修改库存。示例值：（1）[{'out_rid':'ABCDE_123','rateplan_code':'ABCDE_WHL01','vendor':'','lock_start_time':'','lock_end_time':'','data':{'use_room_inventory':false,'inventory_price':[{'date':'2013-11-18','quota':1,'price':1000,'status':1},{'date':'2013-11-19','quota':1,'price':1000,'status':0}]}},{'out_rid':'ABCDE_234','rateplan_code':'ABCDE_WHL01','vendor':'','data':{'use_room_inventory':false,'inventory_price':[{'date':'2013-11-18','quota':1,'price':1000,'status':1},{'date':'2013-11-19','quota':1,'price':1000,'status':0}]}}]
        """
        return self._top_request(
            "taobao.xhotel.rates.update",
            {
                "rate_inventory_price_map": rate_inventory_price_map
            },
            result_processor=lambda x: x["gid_and_rpids"]
        )

    def taobao_xhotel_rate_update(
            self,
            inventory_price='',
            rateplan_code='',
            out_rid='',
            vendor='',
            rate_switch_cal='',
            lock_end_time='',
            lock_start_time=''
    ):
        """
        价格推送接口（全量更新）
        酒店产品库rate更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22673

        :param inventory_price: 每日价格和房价专有库存信息。A:use_room_inventory:是否使用room级别共享库存，可选值 true false 1、true时：使用room级别共享库存（即使用gid对应的XRoom中的inventory），rate_quota_map 的json 数据中不需要录入库存信息,录入的库存信息会忽略 2、false时：使用rate级别私有库存，此时要求价格和库存必填。B:date  日期必须为 T---T+180 日内的日期（T为当天），且不能重复C:price 价格 int类型 取值范围1-99999999 单位为分D:quota 库存 int 类型 取值范围  0-999（数量库存）  60000(状态库存关) 61000(状态库存开)
        :param rateplan_code: 商家价格计划编码
        :param out_rid: 商家房型ID
        :param vendor: 系统商，一般不用填写，使用需要申请
        :param rate_switch_cal: 日历价格开关， date：开关状态控制的是那一天 rate_status：开关状态。0，关闭；1，打开
        :param lock_end_time: 锁库存截止时间，如果当前时间是在锁库存开始时间和截止时间之间，那么不允许修改该活动库存（包含开始时间和截止时间）
        :param lock_start_time: 锁库存开始时间，如果当前时间是在锁库存开始时间和截止时间之间，那么不允许修改该活动库存（包含开始时间和截止时间）
        """
        return self._top_request(
            "taobao.xhotel.rate.update",
            {
                "inventory_price": inventory_price,
                "rateplan_code": rateplan_code,
                "out_rid": out_rid,
                "vendor": vendor,
                "rate_switch_cal": rate_switch_cal,
                "lock_end_time": lock_end_time,
                "lock_start_time": lock_start_time
            },
            result_processor=lambda x: x["gid_and_rpid"]
        )

    def taobao_xhotel_rate_get(
            self,
            gid='',
            rpid='',
            out_rid='',
            rateplan_code='',
            vendor='',
            rate_id=''
    ):
        """
        酒店产品库rate查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22674

        :param gid: gid酒店商品id
        :param rpid: 酒店RPID
        :param out_rid: 卖家房型ID, 这是卖家自己系统中的房型ID 注意：需要按照规则组合
        :param rateplan_code: 卖家自己系统的Code，简称RateCode
        :param vendor: 用于标示该宝贝的售卖渠道信息，允许同一个卖家酒店房型在淘宝系统发布多个售卖渠道的宝贝的价格。
        :param rate_id: RateID
        """
        return self._top_request(
            "taobao.xhotel.rate.get",
            {
                "gid": gid,
                "rpid": rpid,
                "out_rid": out_rid,
                "rateplan_code": rateplan_code,
                "vendor": vendor,
                "rate_id": rate_id
            },
            result_processor=lambda x: x["rate"]
        )

    def taobao_xhotel_rate_add(
            self,
            inventory_price,
            gid='',
            rpid='',
            name='',
            add_bed='',
            add_bed_price='',
            currency_code='',
            shijia_tag='',
            jishiqueren_tag='',
            rateplan_code='',
            vendor='',
            out_rid='',
            rate_switch_cal='',
            lock_end_time='',
            lock_start_time='',
            currency_code_name='',
            operator='',
            source='',
            status=''
    ):
        """
        新增专享房价
        酒店产品库rate添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22675

        :param inventory_price: 价格和库存信息。A:use_room_inventory:是否使用room级别共享库存，可选值 true false 1、true时：使用room级别共享库存（即使用gid对应的XRoom中的inventory），rate_quota_map 的json 数据中不需要录入库存信息,录入的库存信息会忽略 2、false时：使用rate级别私有库存，此时要求价格和库存必填。B:date  日期必须为 T---T+90 日内的日期（T为当天），且不能重复C:price 价格 int类型 取值范围1-99999999 单位为分D:quota 库存 int 类型 取值范围  0-999（数量库存）  60000(状态库存关) 61000(状态库存开)
        :param gid: gid酒店商品id
        :param rpid: 酒店RPID
        :param name: 名称
        :param add_bed: 额外服务-是否可以加床，1：不可以，2：可以
        :param add_bed_price: 额外服务-加床价格
        :param currency_code: 币种（仅支持CNY）
        :param shijia_tag: 实价有房标签（RP支付类型为全额支付）
        :param jishiqueren_tag: “即时确认”标识，此类商品预订后直接发货。
        :param rateplan_code: 卖家自己系统的Code，简称RateCode
        :param vendor: 用于标示该宝贝的售卖渠道信息，允许同一个卖家酒店房型在淘宝系统发布多个售卖渠道的宝贝的价格。
        :param out_rid: 卖家房型ID, 这是卖家自己系统中的房型ID，注意：需按照规则组合
        :param rate_switch_cal: 在添加新rate时，同时添加rate开关日历。可以只设定想设定的某些天，可以不连续。date：开关状态控制的是那一天rate_status：开关状态。0，关闭；1，打开
        :param lock_end_time: 锁库存截止时间，如果当前时间是在锁库存开始时间和截止时间之间，那么不允许修改该活动库存（包含开始时间和截止时间）
        :param lock_start_time: 锁库存开始时间，如果当前时间是在锁库存开始时间和截止时间之间，那么不允许修改该活动库存（包含开始时间和截止时间）
        :param currency_code_name: 币种信息,默认是CNY,  @see com.taobao.trip.hotel.model.enums.CurrencyEnum
        :param operator: 操作人信息
        :param source: 默认是2 ,
        :param status: 1是开,0是关, 不填默认是开, rate状态
        """
        return self._top_request(
            "taobao.xhotel.rate.add",
            {
                "inventory_price": inventory_price,
                "gid": gid,
                "rpid": rpid,
                "name": name,
                "add_bed": add_bed,
                "add_bed_price": add_bed_price,
                "currency_code": currency_code,
                "shijia_tag": shijia_tag,
                "jishiqueren_tag": jishiqueren_tag,
                "rateplan_code": rateplan_code,
                "vendor": vendor,
                "out_rid": out_rid,
                "rate_switch_cal": rate_switch_cal,
                "lock_end_time": lock_end_time,
                "lock_start_time": lock_start_time,
                "currency_code_name": currency_code_name,
                "operator": operator,
                "source": source,
                "status": status
            }
        )

    def taobao_xhotel_rateplan_update(
            self,
            name='',
            breakfast_count='',
            min_days='',
            max_days='',
            min_amount='',
            min_adv_hours='',
            max_adv_hours='',
            start_time='',
            end_time='',
            cancel_policy='',
            status='',
            english_name='',
            guarantee_type='',
            guarantee_start_time='',
            member_level='',
            channel='',
            vendor='',
            rateplan_code='',
            first_stay='',
            agreement='',
            breakfast_cal='',
            cancel_policy_cal='',
            guarantee_cal='',
            effective_time='',
            deadline_time='',
            payment_type='',
            rp_type='',
            hourage='',
            can_checkin_end='',
            can_checkin_start='',
            is_student='',
            hid='',
            rid='',
            out_rid='',
            out_hid='',
            super_rp_flag='',
            base_rp_flag='',
            guarantee_mode='',
            operator='',
            parent_rp_code='',
            parent_rpid='',
            tag_json='',
            allotment_release_time='',
            pack_room_flag='',
            bottom_price_flag='',
            display_name='',
            source='',
            common_allot_release_time='',
            company_assist='',
            hotel_company_mapping_d_o_s='',
            resource_type='',
            rpid=''
    ):
        """
        价格计划rateplan更新或添加
        酒店产品库rateplan更新或添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22676

        :param name: 在淘宝搜索页面展示的房价名称；（添加RP时为必须）。注意该名称不要包含早餐相关信息，如果想维护早餐信息，请设置breakfast_count字段即可。
        :param breakfast_count: -1,状态早餐，和入住人数有关系，几人价就是几份早餐；0：不含早1：含单早2：含双早N：含N早（1-99可选）；（添加RP时为必须）
        :param min_days: 最小入住天数（1-90）。默认1,小时房RP请设置为1
        :param max_days: 最大入住天数（1-90）。默认90,信用住最大入住天数不超过9天,小时房RP请设置为1
        :param min_amount: 首日入住房间数（1-99）。默认1。【废弃】
        :param min_adv_hours: 最小提前预定小时数，从入住当天的24点往前计算。例如如果这个字段设置了48，代表必须至少提前两天预定，那么如果想预定24号入住，,必须在23号零点前下单。
        :param max_adv_hours: 最大提前预定小时数，从入住当天的24点往前计算。例如如果这个字段设置了48，代表最多提前两天预定，那么如果想预定24号入住，,必须在23号零点以后下单。
        :param start_time: 产品每日开始销售时间，start_time一定为当天时间
        :param end_time: 产品每日开始销售时间，start_time一定为当天时间
        :param cancel_policy: 退订政策字段，是个json串，参考示例值设置改字段的值。允许变更/取消：在XX年XX月XX日XX时前取消收取Y%的手续费，100>Y>=0允许变更/取消：在入住前X小时前取消收取Y%的手续费，100>Y>=0（不超过10条）。1.表示任意退{'cancelPolicyType':1};2.表示不能退{'cancelPolicyType':2};4.从入住当天24点往前推X小时前取消收取Y%手续费，否则不可取消{'cancelPolicyType':4,'policyInfo':{'48':10,'24':20}}表示，从入住日24点往前推提前至少48小时取消，收取10%的手续费，从入住日24点往前推提前至少24小时取消，收取20%的手续费;5.从24点往前推多少小时可退{'cancelPolicyType':5,'policyInfo':{'timeBefore':6}}表示从入住日24点往前推至少6个小时即入住日18点前可免费取消;6.从入住日24点往前推，至少提前小时数扣取首晚房费{'cancelPolicyType':6,'policyInfo':{'14':1}}表示入住日24点往前推14小时，即入住日10点前取消收取首晚房费。 注意：支付类型为预付，那么可以使用所有的退订类型,但是必须是非担保；支付类型为面付或者信任住并且是无担保，那么只能使用1类型的退订；支付类型为面付或者信任住并且为担保，那么只能使用2,5类型的退订；支付类型为在线预约，那么只能使用1,2,5类型的退改。如果支付类型是面付或者信任住并且为担保，那么如果传了4或者6的退订，那么会强制转成类型5。支持多段时间、多间夜扣款
        :param status: 1：开启（默认）2：关闭。如果没传值那么默认默认值为1；（添加RP时为必须）
        :param english_name: RP的英文名称
        :param guarantee_type: 担保类型，只支持： 0 无担保 1 峰时首晚担保 2峰时全额担保 3全天首晚担保 4全天全额担保
        :param guarantee_start_time: 分时担保每日开始担保时间。 （如果设置了峰时担保类型，那么峰时担保时间不能为空，并且必须大于等于8点）
        :param member_level: 双方映射后的会员等级。如需开通，需要申请权限，取值范围为：1,2,3,4,5,none。比如飞猪F3对应商家V4,则传4.（如果有疑问请联系对接技术支持）
        :param channel: 销售渠道。如需开通，需要申请权限。目前支持的渠道有 H:飞猪 O:钉钉商旅 A:集团内部商旅 M:无线专享价。如果只投放飞猪，改字段不用填写或者只填H；如果有多个用','分开。如果需要投放其他渠道，请联系飞猪运营或者技术支持。
        :param vendor: 系统商，一般不用填写，使用须申请
        :param rateplan_code: 商家价格政策编码
        :param first_stay: 需申请会员权限。是否是新用户首住优惠rp。1-代表是。0-代表否。不填写代表不更新该字段。
        :param agreement: 价格类型字段：0.非协议价；1.集采协议价；如果不是协议价，请不要填写该字段。该字段有权限控制，如需使用，请联系阿里旅行运营。 如果不填写或者填写为0，默认是阿里旅行价
        :param breakfast_cal: 在更新rateplan时，同时新增或更新早餐日历。 date：早餐政策属于具体哪一天 breakfast_count：这一天早餐的数量。>=0,<=99 如果date为空，那么会去读取startDate和endDate（格式都为'yyyy-MM-dd'），即早餐正常属于一个时间段。-1为状态早餐，和最终绑定的几人价有关，如果是一人价那么就是我一份早餐，二人价就是两份早餐。请注意，该字段仅能维护从当前时间开始，10年以内的数据，如果超过10年，会报错。
        :param cancel_policy_cal: 在新增rateplan的同时新增取消政策日历。 json格式。 date：日历的某一天，格式为'yyyy-MM-dd' cancel_policy：日历某一天的价格政策。格式和限制同cancel_policy。 如果date为空，那么会读取startDate和endDate（格式都为'yyyy-MM-dd'），即取消政策属于某一个时间段。 注意：支付类型为预付，那么可以使用所有的退订类型，但是必须是非担保；支付类型为面付或者信任住并且是无担保，那么只能使用1类型的退订；支付类型为面付或者信任住并且为担保，那么只能使用2,5类型的退订；支付类型为在线预约，那么只能使用1,2,5类型的退改。如果支付类型是面付或者信任住并且为担保，那么如果传了4或者6的退订，那么会强制转成类型5。请注意，该字段仅能维护从当前时间开始，10年以内的数据，如果超过10年，会报错。
        :param guarantee_cal: 在更新rateplan的同时，新增或更新担保日历。 date：担保日历的某一天。 guarantee:担保政策。 其中有两个属性：guaranteeType,guaranteeStartTime。 guaranteeType的可选值同guaranteeType字段，详见guaranteeType字段。guaranteeStartTime格式为'HH:mm' 。如果date为空，那么会读取startDate和endDate（格式都为'yyyy-MM-dd'），即担保政策属于某一个时间段。（如果设置了峰时担保类型，那么峰时担保时间不能为空，并且必须大于等于8点） 请注意，该字段仅能维护从当前时间开始，10年以内的数据，如果超过10年，会报错。
        :param effective_time: 生效开始时间，用来控制此rateplan生效的开始时间，配合字段deadline_time一起限定rp的有效期
        :param deadline_time: 生效截止时间，用来控制此rateplan生效的截止时间，配合字段effective_time一起限定rp的有效期
        :param payment_type: 支付类型，只支持：1：预付5：现付6: 信用住7:在线预约8:在线预约信用住。其中5,6,7,8三种类型需要申请权限
        :param rp_type: rp类型，1为小时房。目前只支持小时房。如果不是小时房rateplan,则不要填写。如果想要清空该字段可以传入none
        :param hourage: 小时房入住时间跨度。小时房特有字段。比如4小时的小时房，那么值为4
        :param can_checkin_end: 最晚可选入住时间，小时房特有字段。格式为HH:mm
        :param can_checkin_start: 最早可选入住时间，小时房特有字段。格式为HH:mm
        :param is_student: 学生价，1：是；0：否
        :param hid: 酒店id
        :param rid: 房型id
        :param out_rid: 外部房型id
        :param out_hid: 外部酒店id
        :param super_rp_flag: super rp标记，1是；0否
        :param base_rp_flag: base rp标记，1是；0否
        :param guarantee_mode: 2 VCC担保, 1 PCI担保，0 支付宝担保(信用住产品担保方式只能为支付宝担保)
        :param operator: operator
        :param parent_rp_code: 父rpcode，使用场景：当一个rp发布变价rate的时候，用于下单时候传递约定的rpcode给外部
        :param parent_rpid: 父rpid，使用场景：当一个rp发布变价rate的时候，记录父rp信息，用于下单时候传递约定的rpcode给外部
        :param tag_json: 更新RP时的 打标和去标 需求, 0 就是 去标, 1 就是打标,    key的含义:    non-direct-RP 表示非直连RP,,     super-could-price-change-RP 表示rp的super标，打上这个tag，表明这个rateplan下单的时候支持变价，商家系统直接放开价格校验。   base-could-derived-RP 表示base rateplan标签，打上了这个tag，表明这是一个base的rateplan，基于该rateplan可以衍生出子rateplan,       ebk-tail-room-RP 表示 ebk尾房rate plan级别标
        :param allotment_release_time: 协议保留房提前x小时自动确认时间 比如设置为6 那么从入住当日24点往前推6小时即18:00以前可以自动确认有房，否则是待确认
        :param pack_room_flag: 是否包房RP 1包房RP,0 非包房rp
        :param bottom_price_flag: 是否底价加价，1是底价加价,0 非底价加价rp
        :param display_name: 价格计划名称name通过加工处理以后的值
        :param source: 来源
        :param common_allot_release_time: 普通保留房提前x小时自动确认时间 比如设置为6 那么从入住当日24点往前推6小时即18:00以前可以自动确认有房，否则是待确认
        :param company_assist: 是否企业托管RP 0-普通rp,1-企业托管rp
        :param hotel_company_mapping_d_o_s: 酒店-企业-rp映射实体集合
        :param resource_type: 商品来源渠道。1：直采（直连酒店PMS）, 1-1：直采（非直连） 2：携程系, 3：美团, 4：国内旅行社分销, 5：海外供应商。非酒店资源方卖家必须提供商品来源渠道，携程系包括携程、去哪儿、艺龙。
        :param rpid: 不推荐使用，使用ratePlanCode来标识要修改的RP
        """
        return self._top_request(
            "taobao.xhotel.rateplan.update",
            {
                "name": name,
                "breakfast_count": breakfast_count,
                "min_days": min_days,
                "max_days": max_days,
                "min_amount": min_amount,
                "min_adv_hours": min_adv_hours,
                "max_adv_hours": max_adv_hours,
                "start_time": start_time,
                "end_time": end_time,
                "cancel_policy": cancel_policy,
                "status": status,
                "english_name": english_name,
                "guarantee_type": guarantee_type,
                "guarantee_start_time": guarantee_start_time,
                "member_level": member_level,
                "channel": channel,
                "vendor": vendor,
                "rateplan_code": rateplan_code,
                "first_stay": first_stay,
                "agreement": agreement,
                "breakfast_cal": breakfast_cal,
                "cancel_policy_cal": cancel_policy_cal,
                "guarantee_cal": guarantee_cal,
                "effective_time": effective_time,
                "deadline_time": deadline_time,
                "payment_type": payment_type,
                "rp_type": rp_type,
                "hourage": hourage,
                "can_checkin_end": can_checkin_end,
                "can_checkin_start": can_checkin_start,
                "is_student": is_student,
                "hid": hid,
                "rid": rid,
                "out_rid": out_rid,
                "out_hid": out_hid,
                "super_rp_flag": super_rp_flag,
                "base_rp_flag": base_rp_flag,
                "guarantee_mode": guarantee_mode,
                "operator": operator,
                "parent_rp_code": parent_rp_code,
                "parent_rpid": parent_rpid,
                "tag_json": tag_json,
                "allotment_release_time": allotment_release_time,
                "pack_room_flag": pack_room_flag,
                "bottom_price_flag": bottom_price_flag,
                "display_name": display_name,
                "source": source,
                "common_allot_release_time": common_allot_release_time,
                "company_assist": company_assist,
                "hotel_company_mapping_d_o_s": hotel_company_mapping_d_o_s,
                "resource_type": resource_type,
                "rpid": rpid
            },
            result_processor=lambda x: x["rpid"]
        )

    def taobao_xhotel_rateplan_add(
            self,
            rateplan_code,
            name,
            payment_type,
            breakfast_count,
            cancel_policy,
            status,
            fee_service_percent='',
            min_days='1',
            max_days='90',
            min_amount='1',
            min_adv_hours='0',
            max_adv_hours='2160',
            start_time='00:00',
            end_time='00:00',
            english_name='',
            guarantee_type='',
            guarantee_start_time='',
            member_level='',
            channel='',
            occupancy='',
            vendor='',
            first_stay='',
            agreement='',
            breakfast_cal='',
            cancel_policy_cal='',
            guarantee_cal='',
            cancel_before_hour='',
            cancel_before_day='',
            effective_time='',
            deadline_time='',
            rp_type='',
            hourage='',
            can_checkin_end='',
            can_checkin_start='',
            is_student='',
            hid='',
            rid='',
            out_rid='',
            out_hid='',
            super_rp_flag='',
            base_rp_flag='',
            guarantee_mode='',
            parent_rp_code='',
            parent_rpid='',
            operator='',
            tag_json='',
            source='',
            allotment_release_time='',
            common_allot_release_time='',
            resource_type='',
            bottom_price_flag=''
    ):
        """
        酒店产品库rateplan添加
        酒店产品库rateplan
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22677

        :param rateplan_code: 卖家自己系统的Code，简称RateCode
        :param name: 在淘宝搜索页面展示的房价名称。请注意名称里不要维护早餐信息，如果想设置早餐信息，请设置breakfast_count字段即可
        :param payment_type: 支付类型，只支持：1：预付5：现付6: 信用住7:预付在线预约8:信用住在线预约。其中5,6,7,8四种类型需要申请权限
        :param breakfast_count: -1：状态早餐,有具体几人价有关系，几人价是几份早餐;0：不含早1：含单早2：含双早N：含N早（-1-99可选）
        :param cancel_policy: 退订政策字段，是个json串，参考示例值设置改字段的值。允许变更/取消：在XX年XX月XX日XX时前取消收取Y%的手续费，100>Y>=0允许变更/取消：在入住前X小时前取消收取Y%的手续费，100>Y>=0（不超过10条）。1.表示任意退{'cancelPolicyType':1};2.表示不能退{'cancelPolicyType':2};4.从入住当天24点往前推X小时前取消收取Y%手续费，否则不可取消{'cancelPolicyType':4,'policyInfo':{'48':10,'24':20}}表示，从入住日24点往前推提前至少48小时取消，收取10%的手续费，从入住日24点往前推提前至少24小时取消，收取20%的手续费;5.从24点往前推多少小时可退{'cancelPolicyType':5,'policyInfo':{'timeBefore':6}}表示从入住日24点往前推至少6个小时即入住日18点前可免费取消;6.从入住日24点往前推，至少提前小时数扣取首晚房费{'cancelPolicyType':6,'policyInfo':{'14':1}}表示入住日24点往前推14小时，即入住日10点前取消收取首晚房费。 注意：支付类型为预付，那么可以使用所有的退订类型,但是必须是非担保；支付类型为面付或者信任住并且是无担保，那么只能使用1类型的退订；支付类型为面付或者信任住并且为担保，那么只能使用2,5类型的退订；支付类型为在线预约，那么只能使用1,2,5类型的退改。如果支付类型是面付或者信任住并且为担保，那么如果传了4或者6的退订，那么会强制转成类型5。支持多段时间,多间夜扣款。阶梯退手续费限制请查看https://hot.bbs.taobao.com/detail.html?postId=8892814
        :param status: 1：开启（默认）2：关闭。如果没传值那么默认默认值为1
        :param fee_service_percent: 不推荐使用
        :param min_days: 最小入住天数（1-90）。默认1,小时房RP请设置为1
        :param max_days: 最大入住天数（1-90）。默认90 信用住不超过9天,小时房RP请设置为1
        :param min_amount: 首日入住房间数（1-99）。默认1。【废弃】
        :param min_adv_hours: 最小提前预定小时数，从入住当天的24点往前计算。例如如果这个字段设置了48，代表必须至少提前两天预定，那么如果想预定24号入住，,必须在23号零点前下单。
        :param max_adv_hours: 最大提前预定小时数，从入住当天的24点往前计算。例如如果这个字段设置了48，代表最多提前两天预定，那么如果想预定24号入住，,必须在23号零点以后下单。
        :param start_time: 产品每日开始销售时间，start_time一定为当天时间
        :param end_time: 产品每日结束销售时间,当end_time<start_time时，表示end_time为第二天，此时附加限制end_time<=06:00:00并且start_time>=12:00:00,表明可售时间从当天12点到次日的凌晨6点（扩展此信息主要为了描述尾房的rp）注意start_time一定是当天的时间。尾房18：00起可售
        :param english_name: RP的英文名称
        :param guarantee_type: 担保类型，只支持： 0  无担保  1  峰时首晚担保 2峰时全额担保 3全天首晚担保 4全天全额担保
        :param guarantee_start_time: 分时担保每日开始担保时间。 （如果设置了峰时担保类型，那么峰时担保时间不能为空，并且必须大于等于8点）
        :param member_level: 双方映射后的会员等级。如需开通，需要申请权限，取值范围为：1,2,3,4,5,none。比如飞猪F3对应商家V4,则传4.（如果有疑问请联系对接技术支持）
        :param channel: 销售渠道。如需开通，需要申请权限。目前支持的渠道有 H:飞猪 O:钉钉商旅 A:集团内部商旅。如果只投放飞猪，改字段不用填写或者只填H；如果有多个用','分开。如果需要投放其他渠道，请联系飞猪运营或者技术支持。
        :param occupancy: 不推荐使用
        :param vendor: 系统商，一般不填写，使用须申请
        :param first_stay: 需申请会员权限。是否是新用户首住优惠rp。1-代表是。0或者不填写代表否
        :param agreement: 废弃。价格类型字段：0.非协议价；1.集采协议价；如果不是协议价，请不要填写该字段。该字段有权限控制，如需使用，请联系阿里旅行运营。 如果不填写或者填写为0，默认是阿里旅行价
        :param breakfast_cal: 在添加rateplan时，同时新增早餐日历。date：说明这条记录的早餐政策breakfast_count：这一天早餐的数量。>=-1,<=99。如果date为空，那么会去读取startDate和endDate（格式都为'yyyy-MM-dd'），即早餐正常属于一个时间段。-1为状态早餐，和最终绑定的几人价有关，如果是一人价那么就是我一份早餐，二人价就是两份早餐。请注意，该字段仅能维护从当前时间开始，10年以内的数据，如果超过10年，会报错。
        :param cancel_policy_cal: 在新增rateplan的同时新增取消政策日历。 json格式。 date：日历的某一天，格式为'yyyy-MM-dd' cancel_policy：日历某一天的价格政策。格式和限制同cancel_policy。 如果date为空，那么会读取startDate和endDate（格式都为'yyyy-MM-dd'），即取消政策属于某一个时间段。 注意：支付类型为预付，那么可以使用所有的退订类型，但是必须是非担保；支付类型为面付或者信任住并且是无担保，那么只能使用1类型的退订；支付类型为面付或者信任住并且为担保，那么只能使用2,5类型的退订；支付类型为在线预约，那么只能使用1,2,5类型的退改。如果支付类型是面付或者信任住并且为担保，那么如果传了4或者6的退订，那么会强制转成类型5。请注意，该字段仅能维护从当前时间开始，10年以内的数据，如果超过10年，会报错。阶梯退手续费限制请查看https://hot.bbs.taobao.com/detail.html?postId=8892814
        :param guarantee_cal: 在新增rateplan的同时，新增担保日历。date：担保日历的某一天。guarantee:担保政策。其中有两个属性：guaranteeType,guaranteeStartTime。 guaranteeType的可选值同guaranteeType字段，详见guaranteeType字段。guaranteeStartTime格式为'HH:mm'。如果date为空，那么会读取startDate和endDate（格式都为'yyyy-MM-dd'），即担保政策属于某一个时间段。（如果设置了峰时担保类型，那么峰时担保时间不能为空，并且必须大于等于8点）。请注意，该字段仅能维护从当前时间开始，10年以内的数据，如果超过10年，会报错。
        :param cancel_before_hour: 不推荐使用，使用改规则
        :param cancel_before_day: 不推荐使用，使用改规则
        :param effective_time: 生效开始时间，用来控制此rateplan生效的开始时间，配合字段deadline_time一起限定rp的有效期
        :param deadline_time: 生效截止时间，用来控制此rateplan生效的截止时间，配合字段effective_time一起限定rp的有效期
        :param rp_type: rp类型，1为小时房。目前只支持小时房。如果不是小时房rateplan,则不要填写。如果想要清空该字段可以传入none
        :param hourage: 小时房入住时间跨度。小时房特有字段。比如4小时的小时房，那么值为4
        :param can_checkin_end: 最早可选入住时间，小时房特有字段。格式为HH:mm
        :param can_checkin_start: 最晚可选入住时间，小时房特有字段。格式为HH:mm
        :param is_student: 是否学生价，0：否；1：是。
        :param hid: 酒店id
        :param rid: 房型id
        :param out_rid: 外部房型id
        :param out_hid: 外部酒店id
        :param super_rp_flag: super rp标记，1是；0否
        :param base_rp_flag: base rp标记，1是；0否
        :param guarantee_mode: 2 VCC担保 1 PCI担保 0 支付宝担保(信用住产品担保方式只能为支付宝担保)
        :param parent_rp_code: 父rpid,使用场景：当一个rp发布变价rate的时候，记录父rp信息，用于下单时候传递约定的rpcode给外部
        :param parent_rpid: 父rpcode，使用场景：当一个rp发布变价rate的时候，用于下单时候传递约定的rpcode给外部
        :param operator: 操作rateplan的来源
        :param tag_json: 新增RP时的 打标和去标 需求,
        :param source: 来源
        :param allotment_release_time: 保留房提前x小时自动确认时间，比如设置为6 那么从入住当日24点往前推6小时即18:00以前可以自动确认有房，否则是待确认
        :param common_allot_release_time: 普通保留房提前x小时自动确认时间，比如设置为6 那么从入住当日24点往前推6小时即18:00以前可以自动确认有房，否则是待确认
        :param resource_type: 商品来源渠道。1：直采（直连酒店PMS）, 1-1：直采（非直连） 2：携程系, 3：美团, 4：国内旅行社分销, 5：海外供应商。非酒店资源方卖家必须提供商品来源渠道，携程系包括携程、去哪儿、艺龙。
        :param bottom_price_flag: 是否底价加价，1是底价加价,0 非底价加价rp
        """
        return self._top_request(
            "taobao.xhotel.rateplan.add",
            {
                "rateplan_code": rateplan_code,
                "name": name,
                "payment_type": payment_type,
                "breakfast_count": breakfast_count,
                "cancel_policy": cancel_policy,
                "status": status,
                "fee_service_percent": fee_service_percent,
                "min_days": min_days,
                "max_days": max_days,
                "min_amount": min_amount,
                "min_adv_hours": min_adv_hours,
                "max_adv_hours": max_adv_hours,
                "start_time": start_time,
                "end_time": end_time,
                "english_name": english_name,
                "guarantee_type": guarantee_type,
                "guarantee_start_time": guarantee_start_time,
                "member_level": member_level,
                "channel": channel,
                "occupancy": occupancy,
                "vendor": vendor,
                "first_stay": first_stay,
                "agreement": agreement,
                "breakfast_cal": breakfast_cal,
                "cancel_policy_cal": cancel_policy_cal,
                "guarantee_cal": guarantee_cal,
                "cancel_before_hour": cancel_before_hour,
                "cancel_before_day": cancel_before_day,
                "effective_time": effective_time,
                "deadline_time": deadline_time,
                "rp_type": rp_type,
                "hourage": hourage,
                "can_checkin_end": can_checkin_end,
                "can_checkin_start": can_checkin_start,
                "is_student": is_student,
                "hid": hid,
                "rid": rid,
                "out_rid": out_rid,
                "out_hid": out_hid,
                "super_rp_flag": super_rp_flag,
                "base_rp_flag": base_rp_flag,
                "guarantee_mode": guarantee_mode,
                "parent_rp_code": parent_rp_code,
                "parent_rpid": parent_rpid,
                "operator": operator,
                "tag_json": tag_json,
                "source": source,
                "allotment_release_time": allotment_release_time,
                "common_allot_release_time": common_allot_release_time,
                "resource_type": resource_type,
                "bottom_price_flag": bottom_price_flag
            },
            result_processor=lambda x: x["rpid"]
        )

    def taobao_xhotel_rates_increment(
            self,
            rate_inventory_price_map
    ):
        """
        价格推送接口（批量增量）
        Rate库存&价格增量更新接口，用户仅需要更新Rate中发生变化的库存日历&价格日历即可
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23005

        :param rate_inventory_price_map: 批量修改价格和房价专有库存信息，json格式,可同时修改多套房型+价格计划的价格：A:use_room_inventory:是否使用房型共享库存，可选值 true false 1、true时：使用房型共享库存 2、false时：使用房价专有库存，此时要求房价专有库存必填。B:date  日期必须为 T---T+180 日内的日期（T为当天），不能重复。 C:price 价格 int类型 取值范围1-99999999 单位为分D:quota 房价专有库存 int 类型 取值范围  0-999（数量库存） 60000(状态库存关) 61000(状态库存开) E:status 价格开关，0为关，1为开。lock_start_time为锁库存开始时间，lock_end_time为锁库存结束时间，如果当前时间在这个时间范围内，那么不允许修改库存。示例值：（1）[{'out_rid':'ABCDE_123','rateplan_code':'ABCDE_WHL01','vendor':'','lock_start_time':'','lock_end_time':'','data':{'use_room_inventory':false,'inventory_price':[{'date':'2013-11-18','quota':1,'price':1000,'status':1},{'date':'2013-11-19','quota':1,'price':1000,'status':0}]}},{'out_rid':'ABCDE_234','rateplan_code':'ABCDE_WHL01','vendor':'','data':{'use_room_inventory':false,'inventory_price':[{'date':'2013-11-18','quota':1,'price':1000,'status':1},{'date':'2013-11-19','quota':1,'price':1000,'status':0}]}}]
        """
        return self._top_request(
            "taobao.xhotel.rates.increment",
            {
                "rate_inventory_price_map": rate_inventory_price_map
            },
            result_processor=lambda x: x["gid_and_rpids"]
        )

    def taobao_xhotel_rooms_increment(
            self,
            room_quota_map
    ):
        """
        房型库存推送接口（批量增量）
        Room库存增量更新接口，用户仅需要更新ROOM库存中发生变化的库存日历即可。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23006

        :param room_quota_map: 批量全量推送房型共享库存,一次最多修改30个房型。json encode。示例：[{'out_rid':'hotel1_roomtype22','vendor':'','allotment_start_Time':'','allotment_end_time':'','superbook_start_time':'','superbook_end_time':'','roomQuota':[{'date':2010-01-28,'quota':10,'al_quota':2,'sp_quota':3}]}] 其中al_quota为保留房库存，sp_quota为超预定库存，quota为物理库存。al_quota和sp_quota需要向运营申请权限才可维护。allotment_start_Time和allotment_end_time为保留房库存开始和截止时间；superbook_start_time和superbook_end_time为超预定库存开始和截止时间。
        """
        return self._top_request(
            "taobao.xhotel.rooms.increment",
            {
                "room_quota_map": room_quota_map
            },
            result_processor=lambda x: x["gids"]
        )

    def taobao_xhotel_rate_relationshipwithrp_get(
            self,
            gid,
            page_no='1'
    ):
        """
        根据gid查询卖家下所有的rpId
        根据gid查询卖家下所有的rpId，可分页，默认展示第一页的数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23285

        :param gid: 宝贝的gid
        :param page_no: 页数，可根据此值展示某页的数据。不填默认为1
        """
        return self._top_request(
            "taobao.xhotel.rate.relationshipwithrp.get",
            {
                "gid": gid,
                "page_no": page_no
            }
        )

    def taobao_xhotel_rate_relationshipwithroom_get(
            self,
            rp_id,
            page_no='1'
    ):
        """
        查询rpId
        某个卖家根据rpId查询所有的gid，可分页，不填分页信息则默认显示第一页。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23286

        :param rp_id: rpId
        :param page_no: 页数
        """
        return self._top_request(
            "taobao.xhotel.rate.relationshipwithroom.get",
            {
                "rp_id": rp_id,
                "page_no": page_no
            }
        )

    def taobao_xhotel_increment_info_get(
            self,
            gmt_modified,
            change_type,
            current_page='',
            page_size=''
    ):
        """
        酒店状态增量查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23780

        :param gmt_modified: 更新时间
        :param change_type: 变化类别，1为酒店价格，0为酒店
        :param current_page: 分页参数：当前页数，从1开始计数。<br/>默认值：1
        :param page_size: 分页参数：每页酒店数量。最小值1，最大值为1000。默认值：1000
        """
        return self._top_request(
            "taobao.xhotel.increment.info.get",
            {
                "gmt_modified": gmt_modified,
                "change_type": change_type,
                "current_page": current_page,
                "page_size": page_size
            }
        )

    def taobao_xhotel_multiplerate_get(
            self,
            nod='',
            nop='',
            rate_plan_code='',
            rate_plan_id='',
            out_rid='',
            gid='',
            vendor=''
    ):
        """
        复杂房价查询接口
        查询复杂房价，支持通过入住人数，连住天数，商品信息，房价信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25401

        :param nod: 连住天数(范围1~10)
        :param nop: 入住人数(范围1~10)
        :param rate_plan_code: 卖家的房价code
        :param rate_plan_id: 废弃，使用rate_plan_code
        :param out_rid: 卖家的房型code
        :param gid: 废弃，使用out_rid
        :param vendor: 系统商，一般不填写，使用须申请
        """
        return self._top_request(
            "taobao.xhotel.multiplerate.get",
            {
                "nod": nod,
                "nop": nop,
                "rate_plan_code": rate_plan_code,
                "rate_plan_id": rate_plan_id,
                "out_rid": out_rid,
                "gid": gid,
                "vendor": vendor
            },
            result_processor=lambda x: x["rates"]
        )

    def taobao_xhotel_multiplerates_update(
            self,
            rate_quota_map
    ):
        """
        复杂价格推送接口（批量全量）
        批量更新复杂价格
        涵盖了taobao.xhotel.rates.update的功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25402

        :param rate_quota_map: 批量全量修改价格和库存信息,会以请求参数中的数据覆盖掉原来报价库存数据。A:useRoomInventory:是否使用room级别共享库存，可选值 true false  2、false时：使用rate级别私有库存，此时如果填写了库存，那么会写入库存表。B:date  日期必须为 T---T+180 日内的日期（T为当天），且不能重复C:basePrice 基本价格 int类型 取值范围1-99999999 单位为分D:quota 库存 int 类型 取值范围  0-999（数量库存） 支持状态库存， 60000(状态库存关) 61000(状态库存开);E:occupancy为入住人数，范围为1~10;F:lengthofStay为连住天数，范围为1~10；G:taxAndFee为总税费；H:addBedPrice为加床价；I:addPersonPrice为加人价；J:rateSwitch为开关房状态，1为开房，0为关房。K:支持outRoomId和ratePlanCode来更新报价库存。L:childnum为儿童人数。M:infantnum为婴儿人数。N:ckinSwitch为入住开关(0，关闭；1，打开) O：ckoutSwitch为离店开关 (0，关闭；1，打开) P:lockStartTime锁库存开始时间 Q:lockEndTime锁库存截止时间
        """
        return self._top_request(
            "taobao.xhotel.multiplerates.update",
            {
                "rate_quota_map": rate_quota_map
            }
        )

    def taobao_xhotel_multiplerate_update(
            self,
            occupancy,
            lengthofstay,
            gid='',
            out_rid='',
            rpid='',
            rate_plan_code='',
            name='',
            inventory_price='',
            rate_switch_cal='',
            currency_code='',
            status='',
            vendor='',
            childnum='',
            infantnum='',
            lock_end_time='',
            lock_start_time=''
    ):
        """
        复杂价格推送接口（全量更新）
        酒店产品库复杂rate（多人价，连住价等）更新
        同时完全涵盖taobao.xhotel.rate.update的功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25403

        :param occupancy: 入住人数(范围1~10)
        :param lengthofstay: 连住天数(范围1~5)
        :param gid: 废弃，使用out_rid
        :param out_rid: 卖家房型ID
        :param rpid: 废弃，使用rate_plan_code
        :param rate_plan_code: 卖家自己系统的房价code
        :param name: 废弃
        :param inventory_price: 价格和库存信息。 A:use_room_inventory:是否使用房型共享库存，可选值 true false ,false时：使用房价专有库存，此时要求价格和库存必填。 B:date 日期必须为 T---T+180 日内的日期（T为当天），且不能重复 C:price 价格 int类型 取值范围1-99999999 单位为分 D:quota 库存 int 类型 取值范围 0-999（数量库存） 60000(状态库存关) 61000(状态库存开) tax为税费，addBed为加床价，addPerson为加人价1,若连住大于1，price请推送总价
        :param rate_switch_cal: 价格开关 date：开关状态控制的那一天；rate_status：开关状态(0，关闭；1，打开); checkin_status：入住开关(0，关闭；1，打开)；checkout_status：离店开关 (0，关闭；1，打开)
        :param currency_code: 币种.CNY为人民币
        :param status: 价格状态。0为不可售；1为可售，默认可售
        :param vendor: 系统商，一般不填写，使用须申请
        :param childnum: 儿童人数
        :param infantnum: 婴儿人数
        :param lock_end_time: 锁库存截止时间，如果当前时间是在锁库存开始时间和截止时间之间，那么不允许修改该活动库存（包含开始时间和截止时间）
        :param lock_start_time: 锁库存开始时间，如果当前时间是在锁库存开始时间和截止时间之间，那么不允许修改该活动库存（包含开始时间和截止时间）
        """
        return self._top_request(
            "taobao.xhotel.multiplerate.update",
            {
                "occupancy": occupancy,
                "lengthofstay": lengthofstay,
                "gid": gid,
                "out_rid": out_rid,
                "rpid": rpid,
                "rate_plan_code": rate_plan_code,
                "name": name,
                "inventory_price": inventory_price,
                "rate_switch_cal": rate_switch_cal,
                "currency_code": currency_code,
                "status": status,
                "vendor": vendor,
                "childnum": childnum,
                "infantnum": infantnum,
                "lock_end_time": lock_end_time,
                "lock_start_time": lock_start_time
            },
            result_processor=lambda x: x["gid_and_rpid_occupancy_lengthofstay"]
        )

    def taobao_xhotel_multiplerates_increment(
            self,
            rate_quota_map
    ):
        """
        复杂房价推送接口（批量增量）
        复杂房价批量增量更新，只会更新指定日期的信息
        完全涵盖了taobao.xhotel.rates.increment接口的功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25404

        :param rate_quota_map: 批量全量修改价格和库存信息,会以请求参数中的数据覆盖掉原来报价库存数据。A:useRoomInventory:是否使用room级别共享库存，可选值 true false  2、false时：使用rate级别私有库存，此时如果填写了库存，那么会写入库存表。B:date  日期必须为 T---T+180 日内的日期（T为当天），且不能重复C:basePrice 基本价格 int类型 取值范围1-99999999 单位为分D:quota 库存 int 类型 取值范围  0-999（数量库存） 支持状态库存， 60000(状态库存关) 61000(状态库存开);E:occupancy为入住人数，范围为1~10;F:lengthofStay为连住天数，范围为1~10；G:taxAndFee为总税费；H:addBedPrice为加床价；I:addPersonPrice为加人价；J:rateSwitch为开关房状态，1为开房，0为关房。K:支持outRoomId和ratePlanCode来更新报价库存。L:childnum为儿童人数。M:infantnum为婴儿人数。N:ckinSwitch为入住开关(0，关闭；1，打开) O：ckoutSwitch为离店开关 (0，关闭；1，打开) P:lockStartTime锁库存开始时间 Q:lockEndTime锁库存截止时间
        """
        return self._top_request(
            "taobao.xhotel.multiplerates.increment",
            {
                "rate_quota_map": rate_quota_map
            }
        )

    def taobao_xhotel_baseinfo_get(
            self,
            hid='',
            out_hid='',
            vendor='',
            is_need_rate_plan='true',
            is_need_room_type='true',
            need_s_room_type_list='false',
            need_hotel_dynamic_info='false',
            json_hotel_seller_inv_query=''
    ):
        """
        酒店基础信息查询接口
        酒店基础信息(酒店/房型/房价定义)查询接口， 包括 酒店房型可售, 以及 hid 下 的标准房型列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27522

        :param hid: 淘宝酒店ID
        :param out_hid: 推荐使用卖家系统中的酒店ID。
        :param vendor: 用于标示该酒店发布的渠道信息
        :param is_need_rate_plan: 是否需要房价基本信息（false为不需要），默认为需要
        :param is_need_room_type: 是否需要房型基本信息（false为不需要），默认为需要
        :param need_s_room_type_list: 是否需要 根据 hid 查询 标准房型列表
        :param need_hotel_dynamic_info: 是否需要酒店房型可售详情
        :param json_hotel_seller_inv_query: 在查询酒店房型可售详情 时的入参JSON , {@link com.taobao.trip.hpc.client.query.HotelSellerInvQuery}
        """
        return self._top_request(
            "taobao.xhotel.baseinfo.get",
            {
                "hid": hid,
                "out_hid": out_hid,
                "vendor": vendor,
                "is_need_rate_plan": is_need_rate_plan,
                "is_need_room_type": is_need_room_type,
                "need_s_room_type_list": need_s_room_type_list,
                "need_hotel_dynamic_info": need_hotel_dynamic_info,
                "json_hotel_seller_inv_query": json_hotel_seller_inv_query
            }
        )

    def taobao_xhotel_rateplan_delete(
            self,
            rp_id='',
            vendor='',
            rateplan_code=''
    ):
        """
        价格计划rateplan删除
        酒店产品库rateplan删除，同时删除级联的rate，请谨慎使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27769

        :param rp_id: ratepland标识
        :param vendor: 系统商，一般不用填写，使用须申请
        :param rateplan_code: 商家价格政策编码
        """
        return self._top_request(
            "taobao.xhotel.rateplan.delete",
            {
                "rp_id": rp_id,
                "vendor": vendor,
                "rateplan_code": rateplan_code
            }
        )

    def taobao_xhotel_rate_delete(
            self,
            vendor='',
            rateplan_code='',
            out_rid=''
    ):
        """
        rate删除接口
        酒店产品库rate删除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27770

        :param vendor: 系统商，一般不用填写，使用须申请
        :param rateplan_code: 商家价格政策编码
        :param out_rid: 商家房型ID
        """
        return self._top_request(
            "taobao.xhotel.rate.delete",
            {
                "vendor": vendor,
                "rateplan_code": rateplan_code,
                "out_rid": out_rid
            }
        )

    def taobao_xhotel_baseinfo_room_get(
            self,
            out_hid,
            vendor='',
            is_need_rate_plan='true'
    ):
        """
        酒店房型与房价查询
        根据outHid/hid获取酒店的房型和价格信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28763

        :param out_hid: 卖家系统中的酒店ID。
        :param vendor: 用于标示该酒店发布的渠道信息
        :param is_need_rate_plan: 是否需要房价基本信息（false为不需要），默认为需要
        """
        return self._top_request(
            "taobao.xhotel.baseinfo.room.get",
            {
                "out_hid": out_hid,
                "vendor": vendor,
                "is_need_rate_plan": is_need_rate_plan
            }
        )

    def taobao_xhotel_city_coordinates_batch_upload(
            self,
            coordinate_list
    ):
        """
        上传信息计算飞猪国际城市
        给供应商提供计算对应飞猪城市的服务，免去城市名称匹配流程，加快对接流程。目前只适用于国际城市，国内+港澳台暂不支持。
        非实时计算接口，每次批量上传不少于1条的数据，后端离线计算，请于30分钟后再下载结果。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32070

        :param coordinate_list: 经纬度列表
        """
        return self._top_request(
            "taobao.xhotel.city.coordinates.batch.upload",
            {
                "coordinate_list": coordinate_list
            },
            result_processor=lambda x: x["batch_id"]
        )

    def taobao_xhotel_city_coordinates_batch_download(
            self,
            batch_id=''
    ):
        """
        下载飞猪国际城市结果
        给国际酒店供应商提供计算对应飞猪城市的服务，免去城市名称匹配流程，加快对接流程
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32757

        :param batch_id: 上传的经纬度批次号
        """
        return self._top_request(
            "taobao.xhotel.city.coordinates.batch.download",
            {
                "batch_id": batch_id
            },
            result_processor=lambda x: x["coordinate_list"]
        )

    def taobao_xhotel_entity_config(
            self,
            entity_code='',
            config_data='',
            vendor='',
            entity_id='',
            type='0'
    ):
        """
        飞猪商品各实体通用配置
        飞猪商品各实体通用配置服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33177

        :param entity_code: 实体编码，例如酒店编码，房价编码
        :param config_data: 格式为：[{'invoice_status':'1'},{'invoice_has':'1'},{'invoice_canvat':'1'},{'invoice_provider':'2'},{'invoice_channel':'1'},{'invoice_payer':'1'},{'invoice_type':'1,2,3'},{'invoice_desc':'测试发票描叙123'}]  key-value形式的配置信息其中invoice_status为发票状态，取值为0(无效),1(有效);invoice_has是否能开发票，1(能),0(不能);invoice_canvat是否能提供增值税专用发票1(能),0(不能)；invoice_provider发票提供方1(酒店提供),2(卖家邮寄)；invoice_channel开票渠道，目前仅支持1(线下开具)；invoice_payer邮费承担方，1(卖家承担)，2(买家承担-邮费到付);invoice_type开票类型 1(代订房费),2(旅游费) 3(差旅费) 4(卖家提供Email版收据)  如果多个请以英文逗号隔开，例如1,2,3。invoice_desc发票补充说明，如果没有可以填写无，长度不要超过20字符。该接口是全量更新的形式，每次更新必须要携带这些节点信息，如果想失效掉该rp上的发票信息，那么可以将invoice_status设置为0。
        :param vendor: 默认是taobao。和酒店，房型等实体上的vendor保持一致。
        :param entity_id: 实体id,例如酒店id,房型id(飞猪平台的id),rpid等，目前仅支持rpid
        :param type: 实体类型：1：卖家维度，2：酒店维度，3：房型维度，4：宝贝维度，5：rp维度。请注意目前仅支持类型5
        """
        return self._top_request(
            "taobao.xhotel.entity.config",
            {
                "entity_code": entity_code,
                "config_data": config_data,
                "vendor": vendor,
                "entity_id": entity_id,
                "type": type
            }
        )

    def taobao_xhotel_house_add(
            self,
            outer_id,
            name,
            city,
            address,
            tel,
            used_name='',
            domestic='0',
            country='',
            province='',
            district='0',
            business='',
            longitude='',
            latitude='',
            position_type='',
            extend='',
            shid='',
            vendor='',
            star='',
            opening_time='',
            decorate_time='',
            floors='',
            rooms='',
            description='',
            hotel_policies='',
            hotel_facilities='',
            service='',
            room_facilities='',
            pics='',
            brand='',
            postal_code='',
            booking_notice='',
            credit_card_types='',
            orbit_track='',
            name_e='',
            supplier='',
            settlement_currency='',
            owner_info='',
            arround_desc='',
            real_address='',
            status=''
    ):
        """
        非标准民宿房源添加
        添加酒店或更新酒店
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34791

        :param outer_id: 外部酒店ID, 这是卖家自己系统中的ID
        :param name: 酒店名称
        :param city: 城市编码。参见：http://hotel.alitrip.com/area.htm，domestic为false时，输入对应国家的海外城市编码，可调用海外城市查询接口获取；（更新酒店时为可选）
        :param address: 酒店地址。长度不能超过120。不填入会导致不能自动匹配,此地址为下单前展示给用户地址
        :param tel: 酒店电话。格式：国家代码（最长6位）#区号（最长4位）#电话（最长20位）。国家代码提示：中国大陆0086、香港00852、澳门00853、台湾00886
        :param used_name: 酒店曾用名
        :param domestic: 是否国内酒店。0:国内;1:国外。默认是国内
        :param country: domestic为0时，固定China； domestic为1时，必须传定义的海外国家编码值。参见：http://hotel.alitrip.com/area.htm
        :param province: 省份编码。选填，不填入的时候已city字段为准.参见：http://hotel.alitrip.com/area.htm，domestic为false时默认为0
        :param district: 区域（县级市）编码。参见：http://hotel.alitrip.com/area.htm
        :param business: 商业区（圈）长度不超过20字
        :param longitude: 经度
        :param latitude: 纬度
        :param position_type: 坐标类型，现在支持：G – GoogleB – 百度A – 高德M – MapbarL – 灵图
        :param extend: 扩展信息的JSON。注：此字段的值需要ISV在接入前与淘宝沟通，且确认能解析
        :param shid: 该字段只有确定的时候，才允许填入。用于标示和淘宝酒店的匹配关系。目前尚未启动该字段。
        :param vendor: 对接系统商名称：可为空不要乱填，需要申请后使用
        :param star: 酒店档次，星级。取值范围为1,1.5,2,2.5,3,3.5,4,4.5,5
        :param opening_time: 开业时间，格式为2015-01-01
        :param decorate_time: 装修时间，格式为2015-01-01装修时间
        :param floors: 楼层信息。
        :param rooms: 房间数 0~9999之内的数字
        :param description: 酒店描述
        :param hotel_policies: 酒店入住政策，{'10003':'仅2岁以上儿童可随同入住'}，key取值参见 https://open.alitrip.com/docs/doc.htm?spm=0.0.0.0.vSVPks&docType=1&articleId=108416&previewCode=987A11324A278EF679E24102BA30D426 中type=10、code=10003,value为文字描述
        :param hotel_facilities: 酒店设施。json格式示例值：{'24152':true,'24149':true,'24150':true}，key取值参见 https://open.alitrip.com/docs/doc.htm?spm=0.0.0.0.vSVPks&docType=1&articleId=108416&previewCode=987A11324A278EF679E24102BA30D426 中type=20的分类
        :param service: 酒店服务。json格式示例值：{'24058':'可以接待外宾','24198':'叫醒服务','24200':'洗衣服务'}，key-24101为属性编码，value-为'true'时表示有该属性，为文字时表示具体描述，key取值参见 https://open.alitrip.com/docs/doc.htm?spm=0.0.0.0.vSVPks&docType=1&articleId=108416&previewCode=987A11324A278EF679E24102BA30D426 中type=40的分类
        :param room_facilities: 房间设施。json格式示例值：{'24101': true,'24091': true,'24095': true}，key-24101为属性编码，value-为'true'时表示有该属性，为文字时表示具体描述，key取值参见 https://open.alitrip.com/docs/doc.htm?spm=0.0.0.0.vSVPks&docType=1&articleId=108416&previewCode=987A11324A278EF679E24102BA30D426 中type=40的分类
        :param pics: 酒店图片只支持远程图片，格式如下：[{'url':'http://123.jpg','ismain':'false','type':'大堂','attribute':'普通图'},{'url':'http://456.jpg','ismain':'true','type':'公共区域','attribute':'全景图'},{'url':'http://789.jpg','ismain':'false','type':'大堂','attribute':'普通图'}] 其中url是远程图片的访问地址（URL地址必须是合法的，否则会报错），main是是否为主图（主图只能有一个，如果有多个或者没有，则会报错）,attribute表示图片属性，取值范围只能是：[普通图, 平面图, 全景图] ,type表示图片类型，取值范围只能是：[周边, 外观, 商务中心, 健身房, 其他, 会议室, 餐厅, 浴室, 客房, 公共区域, 娱乐设施, 大堂, 泳池]，图片数量最多是能是10张。
        :param brand: 酒店品牌。取值为数字。枚举如下（只给出top30，如果不满足，请联系去啊接口人）：    ruJia('1', 'rujiakuaijie', '如家快捷', 1),    qiTian('2', '7 days', '7天连锁', 1),    hanTing('3', 'Hanting Inns & Hotels', '汉庭酒店', 1),    geLinHaoTai('4', 'Green Tree Inn', '格林豪泰', 1),    jinJiang('5', 'Jinjiang Inn', '锦江之星', 1),    su8('6', 'Super 8', '速8', 1),    moTai('7', 'Motel', '莫泰', 1),    zhouji('8', 'InterContinental', '洲际', 4),    budint('9', 'Pod Inn', '布丁', 1),    jiuJiu('10', 'jiujiuliansuo', '99连锁', 1),    piaoHome('11', 'Piao Home Inn', '飘HOME', 1),    juzi('12', 'Orange Hotels', '桔子酒店', 1),    yibai('13', 'yibai', '易佰', 1),    weiyena('14','weiyena','维也纳',2),    huangguanjiari('15', 'huangguanjiari', '皇冠假日', 4),    xidawu('16', 'xidawu', '喜达屋', 3),    chengshiBJ('17', 'chengshibianjie', '城市便捷', 1),    shagnKeYou('18', 'shagnkeyou', '尚客优', 1),    jinjiang('19', 'jinjiang', '锦江酒店', 3),    wendemu('20', 'Hawthorn Suites', '温德姆', 4),    yibisi('21', 'Ibis Hotels', '宜必思', 1),    wanhao('22', 'JM Hoteles', '万豪', 4),    yijia365('23', 'yijia365', '驿家365', 1),    shoulv('24', 'shoulvjituan', '首旅建国', 3),    kaiyuan('25', 'New Century Hotel', '开元大酒店', 4),    yagao('26', 'yagao', '雅高', 3),    daisi('27', 'daisi', '戴斯', 3),    jinling('28', 'jinlingliansuo', '金陵', 4),    xianggelila('29', 'Shangri-La City Hotels', '香格里拉', 4),    xierdun('30', 'Hilton', '希尔顿', 4),
        :param postal_code: 邮政编码。
        :param booking_notice: 预订须知。json格式，示例:{'10001':'14:00','10002':'12:00','10005':'清洁福50元','10006':'请准备好您的身份证件，我需要登记 不允许吸烟'},预订须知，key取值参见 https://open.alitrip.com/docs/doc.htm?spm=0.0.0.0.vSVPks&docType=1&articleId=108416&previewCode=987A11324A278EF679E24102BA30D426 中type=10的分类
        :param credit_card_types: 逗号分隔的字符串 1visa；2万事达卡；3美国运通卡；4发现卡；5大来卡；6JCB卡；7银联卡
        :param orbit_track: 扩展信息的JSON。 orbitTrack 业务字段是指从飞猪到酒店说经过平台名以及方式的一个数组，按顺序，从飞猪，再经过若干平台，最后到酒店， platform是指定当前平台名，ways 是指通过哪种方式到该平台 其中，飞猪到下一个平台里, ways 字段只能是【直连】、【人工】两个方式之一； 从最后一个平台到酒店的ways字段只能是【电话】、【传真】、【人工】、【系统】之一； 第一个 飞猪平台 和 最后具体酒店是至少得填的
        :param name_e: 卖家酒店英文名称
        :param supplier: 供应商标识，需要提前开通权限，如果需要对接请联系技术支持，请谨慎使用
        :param settlement_currency: 结算过程中的结算币种符合，如需对接请联系飞猪技术支持，请谨慎使用
        :param owner_info: 房东信息,{'outerId: 外部房东ID,': 'xxxx', 'nickName': '张三', 'avatarUrl': 'http://test.com/1.jpg', 'telephone': '0571-1234567', 'mobilePhone': '12334567678', 'email':'test@test.com', 'gender': 'F', 'avgConfirmTime': 30, 'responseRate': 100, 'description': '房东太懒,什么也没有填', 'birthday':'2018-01-01', 'qualifacation': 1, 'bloodType': 1, 'profession':'交互设计师', 'country':'CN', 'province':'420000', 'city':'421200', 'real_name_status': true, 'validate':'1,2,4,8','confirmRate': 98} JSON字段描述: outerId: 商家房东ID, nickName: 房东昵称, avatarUrl: 房东头像地址, telephone: 固定电话, mobilePhone: 移动电话, email: 邮箱地址, gender: 性别 M男性， F女性， avgConfirmTime: 平均确认时间, 单位分钟, responseRate: 房东回复率, description: 房东介绍, birthday:生日，格式yyyy-MM-dd, qualifacation:学历,1:小学,2:初中,3:高中,4:本科,5:硕士,6:博士,7:博士后,0:其他, profession: 职业 country: 国家code province: 省code city: 城市code realNameStatus: 实名认证状态, true已认证 validate: 认证情况:1:身份验证,2:头像验证,4:手机验证,8:邮箱验证,二进制各位代表含义, bloodType: 血型: 0未知,1:A型,2:B型,3:AB型,4:O型;confirmRate: 订单接单率，0-100
        :param arround_desc: 描述信息，inside： 内部描述,traffic:交通情况,arround:周边情况
        :param real_address: 用户下单之后展示的详细地址
        :param status: 数据状态 0:正常，-1:删除，-2:停售
        """
        return self._top_request(
            "taobao.xhotel.house.add",
            {
                "outer_id": outer_id,
                "name": name,
                "city": city,
                "address": address,
                "tel": tel,
                "used_name": used_name,
                "domestic": domestic,
                "country": country,
                "province": province,
                "district": district,
                "business": business,
                "longitude": longitude,
                "latitude": latitude,
                "position_type": position_type,
                "extend": extend,
                "shid": shid,
                "vendor": vendor,
                "star": star,
                "opening_time": opening_time,
                "decorate_time": decorate_time,
                "floors": floors,
                "rooms": rooms,
                "description": description,
                "hotel_policies": hotel_policies,
                "hotel_facilities": hotel_facilities,
                "service": service,
                "room_facilities": room_facilities,
                "pics": pics,
                "brand": brand,
                "postal_code": postal_code,
                "booking_notice": booking_notice,
                "credit_card_types": credit_card_types,
                "orbit_track": orbit_track,
                "name_e": name_e,
                "supplier": supplier,
                "settlement_currency": settlement_currency,
                "owner_info": owner_info,
                "arround_desc": arround_desc,
                "real_address": real_address,
                "status": status
            },
            result_processor=lambda x: x["xhotel"]
        )

    def taobao_xhotel_house_roomtype_add(
            self,
            outer_id,
            name,
            hid='',
            max_occupancy='2',
            area='',
            floor='',
            internet='',
            service='',
            extend='',
            window_type='',
            srid='',
            out_hid='',
            vendor='',
            pics='',
            name_e='',
            operator='',
            connection_type='',
            house_model='',
            house_size='',
            rent_type='',
            rent_size='',
            has_landlord='',
            bed_info='',
            status=''
    ):
        """
        民宿房型信息添加
        房型添加或更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34792

        :param outer_id: 卖家房型ID，不能重复建议格式是:酒店code_房型code
        :param name: 房型名称。不能超过30字
        :param hid: （已废弃）请使用outHid
        :param max_occupancy: 最大入住人数，默认2（1-99）
        :param area: 具体面积大小，请按照正确格式填写。两种格式，例如：40或者 10-20
        :param floor: 客房在建筑的第几层，隔层为1-2层，4-5层，7-8层
        :param internet: 宽带服务。A,B,C,D。分别代表： A：无宽带，B：免费宽带，C：收费宽带，D：部分收费宽带
        :param service: 设施服务。JSON格式。 value值true有此服务，false没有。 bar：吧台，catv：有线电视，ddd：国内长途电话，idd：国际长途电话，toilet：独立卫生间，pubtoliet：公共卫生间。 如： {'bar':false,'catv':false,'ddd':false,'idd':false,'pubtoilet':false,'toilet':false}
        :param extend: 不要使用
        :param window_type: 0:无窗/1:有窗/2:部分有窗/3:暗窗/4:部分暗窗
        :param srid: 该字段只有确定的时候，才允许填入。用于标示和淘宝房型的匹配关系。目前尚未启动该字段。
        :param out_hid: （必传）商家酒店ID，指明该房型属于哪家酒店
        :param vendor: 系统商，无申请不可使用
        :param pics: 房型图片只支持远程图片，格式如下：[{'url':'http://taobao.com/123.jpg','ismain':'true'},{'url':'http://taobao.com/456.jpg','ismain':'false'},{'url':'http://taobao.com/789.jpg','ismain':'false'}]其中url是远程图片的访问地址（URL地址必须是合法的，否则会报错），main是是否为主图。只能设置一张图片为主图。
        :param name_e: 卖家房型英文名称
        :param operator: 操作人信息
        :param connection_type: 属性值为1: 含义是非直连房型
        :param house_model: 房屋户型， bedroom: 室, bathroom: 卫, livingroom: 厅, study: 书房, balcony: 阳台,kitchen: 厨房
        :param house_size: 房屋面积
        :param rent_type: 出租类型:1.整租;2.单间;3.床位
        :param rent_size: 出租面积,单位平方米
        :param has_landlord: 是否和房东合住:0.不和房东合住;1.和房东合住;
        :param bed_info: 床信息: bedType:床型, desc: 床型名, width:床宽, length：床长, bedNum: 床数。床型取值见链接https://open.alitrip.com/docs/doc.htm?spm=0.0.0.0.4zBOVn&docType=1&articleId=108347
        :param status: 数据状态 0:正常，-1:删除，-2:停售
        """
        return self._top_request(
            "taobao.xhotel.house.roomtype.add",
            {
                "outer_id": outer_id,
                "name": name,
                "hid": hid,
                "max_occupancy": max_occupancy,
                "area": area,
                "floor": floor,
                "internet": internet,
                "service": service,
                "extend": extend,
                "window_type": window_type,
                "srid": srid,
                "out_hid": out_hid,
                "vendor": vendor,
                "pics": pics,
                "name_e": name_e,
                "operator": operator,
                "connection_type": connection_type,
                "house_model": house_model,
                "house_size": house_size,
                "rent_type": rent_type,
                "rent_size": rent_size,
                "has_landlord": has_landlord,
                "bed_info": bed_info,
                "status": status
            },
            result_processor=lambda x: x["xroomtype"]
        )

    def taobao_xhotel_servicetime_update(
            self,
            param
    ):
        """
        飞猪酒店多维度服务时间维护接口
        飞猪酒店多维度服务时间维护，支持卖家维度，supplier维度，酒店维度
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39193

        :param param: 请按照示例值的格式来填写，涉及到是否当日订单，是否展示，周一到周日的服务时间，业务id,业务类型1为卖家，2为supplier ，3为酒店。[{'businessId':11925099374,'businessType':3,'displayItemInNonWorkingTime':1,'mondayConfirmLocalTime':'09:00-18:00','operator':'操作人','orderConfirmType':1,'saturdayConfirmLocalTime':'09:00-18:00','sellerId':2054718374,'sellerNick':'sandbox_b_27','sundayConfirmLocalTime':'09:00-18:00','supplier':'','thursdayConfirmLocalTime':'09:00-18:00','timeZoneName':'Asia/Shanghai','tuesdayConfirmLocalTime':'09:00-18:00','wednesdayConfirmLocalTime':'09:00-18:00','fridayConfirmLocalTime':'09:00-18:00'},{'businessId':11925099374,'businessType':3,'displayItemInNonWorkingTime':1,'mondayConfirmLocalTime':'09:00-18:00','operator':'操作人','orderConfirmType':2,'saturdayConfirmLocalTime':'09:00-18:00','sellerId':2054718374,'sellerNick':'sandbox_b_27','sundayConfirmLocalTime':'09:00-18:00','supplier':'','thursdayConfirmLocalTime':'09:00-18:00','timeZoneName':'Asia/Shanghai','tuesdayConfirmLocalTime':'09:00-18:00','wednesdayConfirmLocalTime':'09:00-18:00','fridayConfirmLocalTime':'09:00-18:00'}]
        """
        return self._top_request(
            "taobao.xhotel.servicetime.update",
            {
                "param": param
            }
        )

    def taobao_xhotel_servicetime_get(
            self,
            hid
    ):
        """
        查询实体对应的服务时间数据
        通过实体来获取对应的服务时间数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39194

        :param hid: 酒店id
        """
        return self._top_request(
            "taobao.xhotel.servicetime.get",
            {
                "hid": hid
            }
        )

    def taobao_xhotel_delete(
            self,
            hid='',
            vendor='taobao',
            outer_id=''
    ):
        """
        删除酒店接口
        删除飞猪酒店数据接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43194

        :param hid: 酒店id，传参方式  hid   或者   outer_id+vendor
        :param vendor: 酒店vendor
        :param outer_id: 酒店编码
        """
        return self._top_request(
            "taobao.xhotel.delete",
            {
                "hid": hid,
                "vendor": vendor,
                "outer_id": outer_id
            }
        )

    def taobao_xhotel_roomtype_delete_public(
            self,
            operator,
            rid='',
            vendor='',
            outer_rid=''
    ):
        """
        商家删除房型数据接口
        房型删除TOP接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43195

        :param operator: 具体操作人，比如酒店帐号、小二名称等
        :param rid: 房型rid ，传参方式：rid    或者   outer_id+vendor
        :param vendor: vendor
        :param outer_rid: 外部房型ID
        """
        return self._top_request(
            "taobao.xhotel.roomtype.delete.public",
            {
                "operator": operator,
                "rid": rid,
                "vendor": vendor,
                "outer_rid": outer_rid
            }
        )


class TbJiuDianZaiXianYuDing(DingTalkBaseAPI):
    """
    酒店在线预订API
    """

    def taobao_xhotel_order_search(
            self,
            created_end,
            created_start,
            order_ids='',
            page_no='1',
            order_tids='',
            vendor='',
            out_oids=''
    ):
        """
        酒店产品库订单查询
        酒店产品库订单查询功能，查询90天内的订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22834

        :param created_end: 订单创建时间查询结束时间，格式为：yyyy-MM-dd HH:mm:ss。不能早于created_start或者间隔不能大于30
        :param created_start: 订单创建时间查询起始时间，格式为：yyyy-MM-dd HH:mm:ss
        :param order_ids: 酒店订单oids列表，多个oid用英文逗号隔开，一次不超过20个。
        :param page_no: 分页页码。取值范围，大于零的整数，默认值1，即返回第一页的数据。页面大小为20
        :param order_tids: 酒店订单tids列表，多个tid用英文逗号隔开，一次不超过20个。oids和tids都传的情况下默认使用tids
        :param vendor: 系统商标识
        :param out_oids: 外部订单号out_oids列表，多个oid用英文逗号隔开，一次不超过20个。
        """
        return self._top_request(
            "taobao.xhotel.order.search",
            {
                "created_end": created_end,
                "created_start": created_start,
                "order_ids": order_ids,
                "page_no": page_no,
                "order_tids": order_tids,
                "vendor": vendor,
                "out_oids": out_oids
            }
        )

    def taobao_xhotel_order_alipayface_cancelsettle(
            self,
            tid='',
            reason='',
            out_id=''
    ):
        """
        信用住订单取消结算接口
        信用住订单由于客人为出现等原因，最终取消结算,一定要在结算后2个小时之内调用，否则不会成功。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23001

        :param tid: 阿里旅行订单号，淘宝订单号或外部订单号二选一必填
        :param reason: 取消结账的原因
        :param out_id: 外部订单号，和tid二选一必填
        """
        return self._top_request(
            "taobao.xhotel.order.alipayface.cancelsettle",
            {
                "tid": tid,
                "reason": reason,
                "out_id": out_id
            }
        )

    def taobao_xhotel_order_alipayface_settle(
            self,
            other_fee,
            total_room_fee,
            check_out,
            memo='',
            out_id='',
            room_no='',
            daily_price_info='',
            tid='',
            other_fee_detail='',
            room_settle_info_list=None,
            contain_guarantee='',
            price_change='',
            currency_code='CNY',
            currency_rate='1.0',
            tax_and_fee='',
            amount='',
            hotel_code=''
    ):
        """
        信用住订单结账接口
        用于离店付订单在客人离店后，发起结账以及扣款等后续动作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23002

        :param other_fee: 杂费总额(不能为负数)
        :param total_room_fee: 房费总额(必须大于0)。结账时请按订单原价发起结账卖家优惠由飞猪平台发起扣减
        :param check_out: 实际离店日期，用于校验总房费收取
        :param memo: 备注
        :param out_id: 商家订单号
        :param room_no: 入住房间号
        :param daily_price_info: 每日房价,json格式(包含日期，价格，税费，低价加价前费用等),如果房价和在阿里旅行下单时发生了变化，必须设置该字段.用于更新阿里旅行端的房价信息,涉及到对用户的优惠信息处理等环节(多间房的时候dailyPriceInfo留空)
        :param tid: 淘宝订单id,必须填写
        :param other_fee_detail: 杂费明细,如果otherFee>0则该字段必须设置,并和杂费金额相吻合
        :param room_settle_info_list: 单间房明细
        :param contain_guarantee: 此金额是否包含担保金 0：默认值无意义；1：包含；2：不包含
        :param price_change: 结账变价标识，0未变价，1变价
        :param currency_code: 币种标识，默认人民币
        :param currency_rate: 汇率
        :param tax_and_fee: 税和服务费
        :param amount: 应收金额,大于0时，直接按照此金额扣款，忽略房费和杂费金额。该字段仅适用于自助入住订单场景
        :param hotel_code: 酒店外部编码
        """
        return self._top_request(
            "taobao.xhotel.order.alipayface.settle",
            {
                "other_fee": other_fee,
                "total_room_fee": total_room_fee,
                "check_out": check_out,
                "memo": memo,
                "out_id": out_id,
                "room_no": room_no,
                "daily_price_info": daily_price_info,
                "tid": tid,
                "other_fee_detail": other_fee_detail,
                "room_settle_info_list": room_settle_info_list,
                "contain_guarantee": contain_guarantee,
                "price_change": price_change,
                "currency_code": currency_code,
                "currency_rate": currency_rate,
                "tax_and_fee": tax_and_fee,
                "amount": amount,
                "hotel_code": hotel_code
            }
        )

    def taobao_xhotel_order_alipayface_update(
            self,
            opt_type,
            tid='',
            reason_type='',
            reason_text='',
            out_room_number='',
            checkin_date='',
            checkout_date='',
            rooms='',
            out_id='',
            tids='',
            cancel_type='',
            operator='',
            confirm_code='',
            self_checkin=''
    ):
        """
        酒店信用住订单状态更新
        完成对信用住或者面付订单的状态的更新。包含订单状态的确认，入离店状态的更新等等。（不适用于预付订单）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23003

        :param opt_type: 操作的类型：12.补录确认号,11.多间房确认无房，10.多间房确认有房，8.取消订单(cancel)酒店端发起取消,必须在和买家协商通过的情况下操作,否则有法务风险; 5.买家未入住(noshow),如果该单有担保，会收取买家的担保金额; 3.核实入住(checkIn); 4.核实离店(checkOut); 1.确认无房(直连卖家禁止该操作),2.确认有房(直连卖家禁止该操作)
        :param tid: 淘宝订单号,必填
        :param reason_type: 无房原因分类:1.无房, 2.价格变动, 3.买家原因, 4.其它原因,opt_type=1时必填
        :param reason_text: 无房原因描述:opt_type=1时必填
        :param out_room_number: 入住房间号
        :param checkin_date: 客人实际入住日期,opt_type=3/4时必填
        :param checkout_date: 客人实际离店日期,opt_type=4时必填
        :param rooms: 客人实际预定房间数
        :param out_id: 外部订单号
        :param tids: opt_type为10,11启用，多间房订单号列表，逗号间隔
        :param cancel_type: opt_type为11启用，多间房订单取消原因类型，逗号间隔
        :param operator: opt_type为10,11,12启用，真实操作人
        :param confirm_code: opt_type为12, 订单确认号
        :param self_checkin: 是否自助入住
        """
        return self._top_request(
            "taobao.xhotel.order.alipayface.update",
            {
                "opt_type": opt_type,
                "tid": tid,
                "reason_type": reason_type,
                "reason_text": reason_text,
                "out_room_number": out_room_number,
                "checkin_date": checkin_date,
                "checkout_date": checkout_date,
                "rooms": rooms,
                "out_id": out_id,
                "tids": tids,
                "cancel_type": cancel_type,
                "operator": operator,
                "confirm_code": confirm_code,
                "self_checkin": self_checkin
            }
        )

    def taobao_xhotel_order_update(
            self,
            tid,
            opt_type
    ):
        """
        酒店订单发货接口
        卖家确认订单或者取消订单，适用于预付、面付、信用住订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23026

        :param tid: 订单号
        :param opt_type: 操作的类型：1.确认无房（取消预订，710发送短信提醒买家申请退款）2.确认预订 3.入住 4.离店 5.noshow 6.关单
        """
        return self._top_request(
            "taobao.xhotel.order.update",
            {
                "tid": tid,
                "opt_type": opt_type
            }
        )

    def taobao_xhotel_memberright_update(
            self,
            taobao_user_id,
            has_right,
            right_type
    ):
        """
        酒店会员权益更新操作
        当用户在搜索酒店时，我们需要根据用户是否可享有某项权益来进行相应价格的展示或隐藏，因此我们在酒店搜索时就需要判断用户是否享有某项权益。而由于酒店搜索频率过高，为提高搜索性能并降低第三方接口压力，当用户在搜索酒店时，淘宝会通过读取淘宝本地缓存的用户相关权益信息来进行判断。为提高缓存的准确性，当第三方有用户相关权益有变化时，通过调用淘宝此接口来更新淘宝本地缓存。此接口需要采用Top方式调用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25161

        :param taobao_user_id: 淘宝用户id
        :param has_right: 表示用户是否有对应的权益，取值范围true、false
        :param right_type: 会员权益类型，1表示首住权益
        """
        return self._top_request(
            "taobao.xhotel.memberright.update",
            {
                "taobao_user_id": taobao_user_id,
                "has_right": has_right,
                "right_type": right_type
            }
        )

    def taobao_xhotel_order_statement_get(
            self,
            order_tids='',
            page_size='100',
            start='0',
            date_type='0',
            to='',
            from_='',
            tid='',
            hotel_code='',
            vendor='taobao'
    ):
        """
        查询账单信息
        阿里根据此接口定义输出订单账务明细，结账状态发生变化时阿里需推送账单信息。系统商可实时调用该接口来查询订单的详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25911

        :param order_tids: 要查询的tid列表，逗号分隔,列表查询;当此值不为空时候，其余参数忽略。最多单次20条。
        :param page_size: 查询条数，最大支持500条
        :param start: 数据查询开始下标
        :param date_type: 0：check_in, 1：check_out,2：分账时间
        :param to: 查询结束时间
        :param from_: 查询开始时间
        :param tid: 淘宝订单号
        :param hotel_code: 外部酒店编码
        :param vendor: 系统商vendor
        """
        return self._top_request(
            "taobao.xhotel.order.statement.get",
            {
                "order_tids": order_tids,
                "page_size": page_size,
                "start": start,
                "date_type": date_type,
                "to": to,
                "from": from_,
                "tid": tid,
                "hotel_code": hotel_code,
                "vendor": vendor
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_xhotel_order_future_info_put(
            self,
            out_uuid,
            operate_type,
            hotel_code,
            context,
            vendor='taobao',
            request_id=''
    ):
        """
        订单信息上传更新
        商家调用推送信息给飞猪平台。 支持如下操作类型：21: 订单状态更新（商家推送订单状态变更）23：酒店房态信息上传（上传一段时间内的酒店房态）25：在线开发票请求确认 26：自助选房请求进行请求确认   27：自助checkIn请求进行请求确认 32: 扫脸入住入住信息回传 （飞猪将登记至公安系统）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26546

        :param out_uuid: 商家请求流水号
        :param operate_type: 操作类型 21: 订单状态更新（商家推送订单状态变更）23：酒店房态信息上传（上传一段时间内的酒店房态）25：在线开发票请求确认 26：自助选房请求进行请求确认   27：自助checkIn请求进行请求确认 32: 扫脸入住入住信息回传 （飞猪将登记至公安系统）
        :param hotel_code: 酒店编码
        :param context: 字段详细介绍参见 https://open.alitrip.com/docs/doc.htm?docType=1&articleId=106153
        :param vendor: 商家vendor信息。具体值咨询淘宝技术
        :param request_id: 请求流水号
        """
        return self._top_request(
            "taobao.xhotel.order.future.info.put",
            {
                "out_uuid": out_uuid,
                "operate_type": operate_type,
                "hotel_code": hotel_code,
                "context": context,
                "vendor": vendor,
                "request_id": request_id
            }
        )

    def taobao_xhotel_order_future_info_get(
            self,
            out_uuid,
            hotel_code,
            operate_type,
            tids='',
            vendor='',
            created_start='',
            created_end=''
    ):
        """
        获取(查询)订单变更信息
        支持操作类型 1.在线开发票请求 3.在线选房请求 4.自助checkIn请求 13.扫脸入住身份信息请求 10.房态信息查询请求 103.通用任务取消指令
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26560

        :param out_uuid: 请求流水号
        :param hotel_code: 酒店编码
        :param operate_type: 操作类型 1.在线开发票请求 3.在线选房请求 4.自助checkIn请求 13.扫脸入住身份信息请求 10.房态信息查询请求 103.通用任务取消指令
        :param tids: 指定淘宝订单ID。以英文分号隔开的字符串“123455666;123455666;123455666”
        :param vendor: 系统商分配的身份识别
        :param created_start: 开始时间
        :param created_end: 结束时间
        """
        return self._top_request(
            "taobao.xhotel.order.future.info.get",
            {
                "out_uuid": out_uuid,
                "hotel_code": hotel_code,
                "operate_type": operate_type,
                "tids": tids,
                "vendor": vendor,
                "created_start": created_start,
                "created_end": created_end
            }
        )

    def taobao_xhotel_order_extend(
            self,
            extend_fee,
            extend_daily_price_info,
            check_out,
            tid='',
            out_order_id=''
    ):
        """
        酒店产品库订单续住
        酒店产品库订单续住，用于将已有的酒店产品订单延长间夜，当前接口暂支持信用住产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27204

        :param extend_fee: 延住房费,注意不包含原有的房费金额,单位为分
        :param extend_daily_price_info: 延住日期段的每日房价信息,注意不包括原有的日期房价
        :param check_out: 延住后的离店日期(最多总共入住天数不能超过9间夜)
        :param tid: 阿里旅行订单id,和outOrderId必须至少传入一个
        :param out_order_id: 卖家系统订单号,和tid必须至少传入一个
        """
        return self._top_request(
            "taobao.xhotel.order.extend",
            {
                "extend_fee": extend_fee,
                "extend_daily_price_info": extend_daily_price_info,
                "check_out": check_out,
                "tid": tid,
                "out_order_id": out_order_id
            },
            result_processor=lambda x: x["result_msg"]
        )

    def taobao_xhotel_order_future_facescan_put(
            self,
            face_scan_param=None
    ):
        """
        未来酒店扫脸信息上传
        未来酒店扫脸信息上传服务，用于悉尔等厂商的扫脸设备对接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28107

        :param face_scan_param: 扫脸参数
        """
        return self._top_request(
            "taobao.xhotel.order.future.facescan.put",
            {
                "face_scan_param": face_scan_param
            }
        )

    def taobao_xhotel_order_account_statement(
            self,
            start_time,
            end_time,
            page_size='100',
            page_no='1'
    ):
        """
        查询订单对账信息
        阿里根据此接口定义输出订单对账信息，供各合作商家使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28322

        :param start_time: 查询开始时间，支持到年月日
        :param end_time: 查询结束时间，支持到年月日
        :param page_size: 查询条数，最大支持500条
        :param page_no: 页数
        """
        return self._top_request(
            "taobao.xhotel.order.account.statement",
            {
                "start_time": start_time,
                "end_time": end_time,
                "page_size": page_size,
                "page_no": page_no
            }
        )

    def taobao_xhotel_fastinvoice_request(
            self,
            invoice_info_param
    ):
        """
        极速开票开票请求回传
        极速开票开票请求回传,用于记录航信开票请求数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29553

        :param invoice_info_param: 无
        """
        return self._top_request(
            "taobao.xhotel.fastinvoice.request",
            {
                "invoice_info_param": invoice_info_param
            }
        )

    def taobao_xhotel_fastinvoice_complete(
            self,
            invoice_info_param
    ):
        """
        极速开票开票请求完成
        极速开票开票请求回传,用于更新航信开票请求数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29554

        :param invoice_info_param: 无
        """
        return self._top_request(
            "taobao.xhotel.fastinvoice.complete",
            {
                "invoice_info_param": invoice_info_param
            }
        )

    def taobao_xhotel_commoninvoice_remove(
            self,
            invoice_id,
            user_nick
    ):
        """
        常用发票信息删除接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29561

        :param invoice_id: 发票id
        :param user_nick: 用户名
        """
        return self._top_request(
            "taobao.xhotel.commoninvoice.remove",
            {
                "invoice_id": invoice_id,
                "user_nick": user_nick
            }
        )

    def taobao_xhotel_commoninvoice_update(
            self,
            common_invoice_info_param=None
    ):
        """
        常用发票信息更新接口
        常用发票信息更新接口(根据用户id,发票抬头和发票属性或发票id进行更新,没有则添加)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29569

        :param common_invoice_info_param: 无
        """
        return self._top_request(
            "taobao.xhotel.commoninvoice.update",
            {
                "common_invoice_info_param": common_invoice_info_param
            }
        )

    def taobao_xhotel_commoninvoice_list(
            self,
            user_nick
    ):
        """
        获取用户常用发票信息接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29576

        :param user_nick: 用户名
        """
        return self._top_request(
            "taobao.xhotel.commoninvoice.list",
            {
                "user_nick": user_nick
            }
        )

    def taobao_xhotel_pms_guestbill_get(
            self,
            tax_num,
            short_id_num,
            room_num,
            request_id,
            user_channel='0',
            user_nick=''
    ):
        """
        从pms获取客人账单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29580

        :param tax_num: 开票点税号
        :param short_id_num: 身份证后4位
        :param room_num: 房间号
        :param request_id: 请求id (32位唯一值)
        :param user_channel: 用户渠道(0:未知,1:淘宝)
        :param user_nick: 用户名
        """
        return self._top_request(
            "taobao.xhotel.pms.guestbill.get",
            {
                "tax_num": tax_num,
                "short_id_num": short_id_num,
                "room_num": room_num,
                "request_id": request_id,
                "user_channel": user_channel,
                "user_nick": user_nick
            }
        )

    def taobao_xhotel_order_invoice_search(
            self,
            status='',
            vendor='',
            hids=''
    ):
        """
        订单待开发票查询
        查询酒店订单待开发票列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30962

        :param status: 状态,逗号分隔
        :param vendor: vendor
        :param hids: hid,逗号分隔
        """
        return self._top_request(
            "taobao.xhotel.order.invoice.search",
            {
                "status": status,
                "vendor": vendor,
                "hids": hids
            },
            result_processor=lambda x: x["orders_result_set"]
        )

    def taobao_xhotel_order_detail_search(
            self,
            out_oid='',
            tid=''
    ):
        """
        订单详情查询
        提供订单详情查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30974

        :param out_oid: 外部订单号
        :param tid: 外部订单号
        """
        return self._top_request(
            "taobao.xhotel.order.detail.search",
            {
                "out_oid": out_oid,
                "tid": tid
            }
        )

    def taobao_xhotel_future_softmodify(
            self,
            operate_type,
            request_id,
            expire_time='',
            tid='',
            out_order_id='',
            hotel_code='',
            hid='',
            context=''
    ):
        """
        未来酒店信息下发
        未来酒店信息下发，包含PMS订单查询和自助入住
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36660

        :param operate_type: 操作类型
        :param request_id: 请求唯一标识值
        :param expire_time: 超时时长，默认3s
        :param tid: 淘宝订单号
        :param out_order_id: 外部订单号
        :param hotel_code: 酒店code
        :param hid: 酒店Id
        :param context: 请求报文
        """
        return self._top_request(
            "taobao.xhotel.future.softmodify",
            {
                "operate_type": operate_type,
                "request_id": request_id,
                "expire_time": expire_time,
                "tid": tid,
                "out_order_id": out_order_id,
                "hotel_code": hotel_code,
                "hid": hid,
                "context": context
            },
            result_processor=lambda x: x["context"]
        )

    def taobao_xhotel_order_update_confirmcode(
            self,
            param=None
    ):
        """
        推送及更新订单确认号
        商家拿到订单确认号后，异步推送给飞猪或更新给飞猪。订单确认号用于到店查无时的紧急查单依据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40268

        :param param: 系统入参
        """
        return self._top_request(
            "taobao.xhotel.order.update.confirmcode",
            {
                "param": param
            }
        )


class TbJiuDianGuanWangXinYongZhu(DingTalkBaseAPI):
    """
    酒店官网信用住API
    """

    def taobao_xhotel_order_official_settle_cancel(
            self,
            tid='',
            reason='',
            out_id='',
            notify_url='',
            out_uuid=''
    ):
        """
        官网信用住取消结账
        用于官网信用住取消结账
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26070

        :param tid: 阿里旅行订单号，淘宝订单号或外部订单号二选一必填
        :param reason: 取消结账的原因
        :param out_id: 外部订单号，和tid二选一必填
        :param notify_url: 暂时无意义，无需传入
        :param out_uuid: 请求流水号
        """
        return self._top_request(
            "taobao.xhotel.order.official.settle.cancel",
            {
                "tid": tid,
                "reason": reason,
                "out_id": out_id,
                "notify_url": notify_url,
                "out_uuid": out_uuid
            }
        )

    def taobao_xhotel_order_official_settle_put(
            self,
            total_room_fee,
            other_fee,
            check_out,
            tid='',
            other_fee_detail='',
            out_id='',
            room_no='',
            daily_price_info='',
            memo='',
            room_settle_info_list=None,
            contain_guarantee='',
            out_uuid='',
            notify_url=''
    ):
        """
        官网信用住结账接口
        用于酒店官网信用住商家结账调用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26071

        :param total_room_fee: 房费总额(必须大于0)
        :param other_fee: 杂费总额(不能为负数)
        :param check_out: 实际离店日期，用于校验总房费收取
        :param tid: 淘宝订单id,必须填写
        :param other_fee_detail: 杂费明细,如果otherFee>0则该字段必须设置,并和杂费金额相吻合
        :param out_id: 商家订单号
        :param room_no: 入住房间号
        :param daily_price_info: 每日房价,json格式,如果房价和在阿里旅行下单时发生了变化，必须设置该字段.用于更新阿里旅行端的房价信息,涉及到对用户的优惠信息处理等环节(多间房的时候dailyPriceInfo留空)
        :param memo: 备注
        :param room_settle_info_list: 房间明细列表
        :param contain_guarantee: 此金额是否包含担保金 0：默认值无意义；1：包含；2：不包含（多间房结账必须传入）
        :param out_uuid: 结账请求流水号
        :param notify_url: 请求结果通知地址（暂时无效，无需传入）
        """
        return self._top_request(
            "taobao.xhotel.order.official.settle.put",
            {
                "total_room_fee": total_room_fee,
                "other_fee": other_fee,
                "check_out": check_out,
                "tid": tid,
                "other_fee_detail": other_fee_detail,
                "out_id": out_id,
                "room_no": room_no,
                "daily_price_info": daily_price_info,
                "memo": memo,
                "room_settle_info_list": room_settle_info_list,
                "contain_guarantee": contain_guarantee,
                "out_uuid": out_uuid,
                "notify_url": notify_url
            }
        )

    def taobao_xhotel_order_official_cancel(
            self,
            tid='',
            reason_text='',
            out_id='',
            out_uuid='',
            notify_url=''
    ):
        """
        官网信用住订单取消
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26073

        :param tid: 淘宝订单号,必选
        :param reason_text: 原因描述
        :param out_id: 外部订单号
        :param out_uuid: 请求流水号（必须传入）
        :param notify_url: 暂无意义，无需传入
        """
        return self._top_request(
            "taobao.xhotel.order.official.cancel",
            {
                "tid": tid,
                "reason_text": reason_text,
                "out_id": out_id,
                "out_uuid": out_uuid,
                "notify_url": notify_url
            }
        )

    def taobao_xhotel_order_official_precheck(
            self,
            id_number,
            total_fee,
            hotel_code,
            guest_name,
            mobile_no,
            encrypt_type='0',
            id_type='0',
            type='0',
            vendor=''
    ):
        """
        官网信用住用户资格预校验接口
        官网信用住用户资格预校验接口是在订单创建之前，根据入住人身份信息对其做预先校验是否具有信用住资格。可以优化用户预定体验，对于无资格的用户在预定前即不可进行信用住的选择。减少在提交预定后预定失败体验。该接口为可选对接接口，商家可根据实际情况自行决定是否对接。
        接口使用场景
        提交订单前的预定人信用住资格预先校验，卖家可决定是否在搜索，预订页，补全身份信息时进行调用，以便决定信用住是否提供给用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26269

        :param id_number: 证件号, 如果加密方式设置为1, 传入加密后的证件号（建议明文传递）
        :param total_fee: 总的收费金额，单位为分
        :param hotel_code: 参数必填，发布到阿里旅行的酒店编码
        :param guest_name: 入住人姓名
        :param mobile_no: 客人手机号
        :param encrypt_type: 加密方式, 默认0: 不加密, 信息会通过淘宝开放平台传输, 阿里旅行可以获取到具体信息; 1: SHA-1不可逆加密, 阿里旅行方面无法解析到具体信息, 只用于做信息匹配.注意加密后生成40字节长度的字符串(目前不建议加密)
        :param id_type: 证件类型, 默认0:身份证; 1: 护照; 2:警官证; 3:士兵证; 4: 回乡证（目前仅仅支持身份证）
        :param type: 验证类型.可以不设置. 默认0-下单前资格校验;1-已经创建的信用住订单,入住人在checkIn时的资格复审（无特殊要求不填写）
        :param vendor: 请咨酒店对接负责人, 用于和outHid共同定位一个酒店
        """
        return self._top_request(
            "taobao.xhotel.order.official.precheck",
            {
                "id_number": id_number,
                "total_fee": total_fee,
                "hotel_code": hotel_code,
                "guest_name": guest_name,
                "mobile_no": mobile_no,
                "encrypt_type": encrypt_type,
                "id_type": id_type,
                "type": type,
                "vendor": vendor
            }
        )


class TbJiuDianXianXiaXinYongZhu(DingTalkBaseAPI):
    """
    酒店线下信用住API
    """

    def taobao_xhotel_order_alipayface_create(
            self,
            total_fee,
            check_out,
            hotel_code,
            check_in,
            out_order_id,
            room_quantity,
            guests,
            daily_price_info='',
            alipay_number='',
            channel='',
            vendor='taobao',
            roomtype_name='',
            rateplan_name='',
            self_checkin='false'
    ):
        """
        信用住支付创建接口
        用于创建一笔信用住支付，主要应用场景是线下信用住
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25622

        :param total_fee: 总房费,单位为分
        :param check_out: 离店日期(最多允许9天)
        :param hotel_code: 发布到阿里旅行的酒店编码
        :param check_in: 入住日期
        :param out_order_id: 商家系统的订单号，必须全局唯一，重复会按照相同订单处理
        :param room_quantity: 预定的房间数量
        :param guests: 入住人信息, 注意必须有且只有一个设置为主入住人, 用于信用住结算扣款. 对于java版本的SDK可以使用setGuests(List &lt Guest &gt guests)赋值; 对于.net等其他版本SDK可以通过将List &lt Guest&gt结构数据转为json串赋值.
        :param daily_price_info: 每日房价,json格式
        :param alipay_number: 扫描用户支付宝得到的串号, 该字段不为空时会采用串号对应的支付宝账号进行信用住结算
        :param channel: 订单渠道信息,可以留空
        :param vendor: 不清楚请留空, 用于和outHid共同定位一个酒店
        :param roomtype_name: 房型名称
        :param rateplan_name: rateplan名称(不清楚可以留空)
        :param self_checkin: 是否为自助入住模式下创建订单，是：true,否：false
        """
        return self._top_request(
            "taobao.xhotel.order.alipayface.create",
            {
                "total_fee": total_fee,
                "check_out": check_out,
                "hotel_code": hotel_code,
                "check_in": check_in,
                "out_order_id": out_order_id,
                "room_quantity": room_quantity,
                "guests": guests,
                "daily_price_info": daily_price_info,
                "alipay_number": alipay_number,
                "channel": channel,
                "vendor": vendor,
                "roomtype_name": roomtype_name,
                "rateplan_name": rateplan_name,
                "self_checkin": self_checkin
            }
        )

    def taobao_xhotel_order_alipayface_check(
            self,
            total_fee,
            id_number,
            hotel_code='',
            encrypt_type='0',
            type='0',
            id_type='0',
            vendor='taobao',
            guest_name='',
            mobile_no=''
    ):
        """
        线下信用住买家资格校验接口
        接口用于校验买家是否具有使用酒店信用住的资格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25623

        :param total_fee: 总的收费金额，单位为分
        :param id_number: 证件号, 如果加密方式设置为1, 传入加密后的证件号
        :param hotel_code: 参数必填，发布到阿里旅行的酒店编码
        :param encrypt_type: 加密方式, 默认0: 不加密, 信息会通过淘宝开放平台传输, 阿里旅行可以获取到具体信息;  1: SHA-1不可逆加密,  阿里旅行方面无法解析到具体信息, 只用于做信息匹配.注意加密后生成40字节长度的字符串
        :param type: 验证类型.可以不设置. 默认0-信用住下单资格校验;1-已经创建的信用住订单,入住人在checkIn时的资格复审
        :param id_type: 证件类型, 默认0:身份证; 1: 护照; 2:警官证; 3:士兵证; 4: 回乡证
        :param vendor: 不清楚请留空, 用于和outHid共同定位一个酒店
        :param guest_name: 入住人姓名
        :param mobile_no: 客人手机号
        """
        return self._top_request(
            "taobao.xhotel.order.alipayface.check",
            {
                "total_fee": total_fee,
                "id_number": id_number,
                "hotel_code": hotel_code,
                "encrypt_type": encrypt_type,
                "type": type,
                "id_type": id_type,
                "vendor": vendor,
                "guest_name": guest_name,
                "mobile_no": mobile_no
            }
        )

    def taobao_xhotel_order_alipayface_extend(
            self,
            check_out,
            extend_fee,
            extend_daily_price_info,
            tid='',
            out_order_id=''
    ):
        """
        信用住订单延住接口
        信用住订单延住接口，用于将已有的信用住支付订单checkOut和订单金额等更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25690

        :param check_out: 延住后的离店日期(最多总共入住天数不能超过9间夜)
        :param extend_fee: 延住房费,注意不包含原有的房费金额,单位为分
        :param extend_daily_price_info: 延住日期段的每日房价信息,注意不包括原有的日期房价
        :param tid: 阿里旅行订单id,和outOrderId必须至少传入一个
        :param out_order_id: 卖家系统订单号,和tid必须至少传入一个
        """
        return self._top_request(
            "taobao.xhotel.order.alipayface.extend",
            {
                "check_out": check_out,
                "extend_fee": extend_fee,
                "extend_daily_price_info": extend_daily_price_info,
                "tid": tid,
                "out_order_id": out_order_id
            }
        )

    def taobao_xhotel_order_alipayface_union(
            self,
            total_fee,
            tid='',
            out_order_id='',
            extend_fee='',
            remark='',
            guests=None
    ):
        """
        联房结账接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        信用住联房结账接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25692

        :param total_fee: 变更后总的订单金额.单位为分
        :param tid: 阿里旅行订单id
        :param out_order_id: 酒店(卖家)订单号
        :param extend_fee: 废弃字段，请勿使用.请使用total_fee字段设置总的金额.
        :param remark: 联房备注信息,请填写联房结账的具体情况
        :param guests: 入住人信息, 最好将要参与联房结账的所有入住人都传入
        """
        return self._top_request(
            "taobao.xhotel.order.alipayface.union",
            {
                "total_fee": total_fee,
                "tid": tid,
                "out_order_id": out_order_id,
                "extend_fee": extend_fee,
                "remark": remark,
                "guests": guests
            }
        )

    def taobao_xhotel_order_alipayface_cancel(
            self,
            tid='',
            reason_text='',
            out_id='',
            notify_url='',
            out_uuid=''
    ):
        """
        线下信用住订单取消
        提供给卖家进行线下信用住的订单取消。此接口仅仅支持线下信用住订单的取消
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26074

        :param tid: 淘宝订单ID，必选
        :param reason_text: 原因描述
        :param out_id: 外部订单号
        :param notify_url: 预留后续用
        :param out_uuid: 请求流水号
        """
        return self._top_request(
            "taobao.xhotel.order.alipayface.cancel",
            {
                "tid": tid,
                "reason_text": reason_text,
                "out_id": out_id,
                "notify_url": notify_url,
                "out_uuid": out_uuid
            }
        )

    def taobao_xhotel_order_offline_settle_put(
            self,
            total_room_fee,
            other_fee,
            check_out,
            tid='',
            other_fee_detail='',
            out_id='',
            room_no='',
            daily_price_info='',
            memo='',
            room_settle_info_list=None,
            contain_guarantee='',
            out_uuid='',
            notify_url='',
            amount='',
            hotel_code='',
            vendor='taobao'
    ):
        """
        线下信用住结账专用接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26107

        :param total_room_fee: 房费总额(必须大于0)
        :param other_fee: 杂费总额(不能为负数)
        :param check_out: 实际离店日期，用于校验总房费收取
        :param tid: 淘宝订单id,必须填写
        :param other_fee_detail: 杂费明细,如果otherFee>0则该字段必须设置,并和杂费金额相吻合
        :param out_id: 商家订单号
        :param room_no: 入住房间号
        :param daily_price_info: 每日房价,json格式,如果房价和在阿里旅行下单时发生了变化，必须设置该字段.用于更新阿里旅行端的房价信息,涉及到对用户的优惠信息处理等环节(多间房的时候dailyPriceInfo留空)
        :param memo: 备注
        :param room_settle_info_list: 房间明细列表
        :param contain_guarantee: 此金额是否包含担保金 0：默认值无意义；1：包含；2：不包含（多间房结账必须传入）
        :param out_uuid: 结账请求流水号
        :param notify_url: 请求结果通知地址（暂时无效，无需传入）
        :param amount: 应收金额,大于0时，直接按照此金额扣款，忽略房费和杂费金额(单位分)
        :param hotel_code: 商家酒店编码
        :param vendor: 系统商标识
        """
        return self._top_request(
            "taobao.xhotel.order.offline.settle.put",
            {
                "total_room_fee": total_room_fee,
                "other_fee": other_fee,
                "check_out": check_out,
                "tid": tid,
                "other_fee_detail": other_fee_detail,
                "out_id": out_id,
                "room_no": room_no,
                "daily_price_info": daily_price_info,
                "memo": memo,
                "room_settle_info_list": room_settle_info_list,
                "contain_guarantee": contain_guarantee,
                "out_uuid": out_uuid,
                "notify_url": notify_url,
                "amount": amount,
                "hotel_code": hotel_code,
                "vendor": vendor
            }
        )

    def taobao_xhotel_verifycode_send(
            self,
            id_number,
            guest_name,
            request_type,
            id_type='1',
            mobile_no=''
    ):
        """
        酒店线下信用住签约验证码发送
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        酒店线下信用住签约前，发送校验的验证码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38247

        :param id_number: 证件号
        :param guest_name: 用户姓名
        :param request_type: 1：线下信用住；2：官网信用住 3：自助入住
        :param id_type: 证件类型 1身份证
        :param mobile_no: 手机号
        """
        return self._top_request(
            "taobao.xhotel.verifycode.send",
            {
                "id_number": id_number,
                "guest_name": guest_name,
                "request_type": request_type,
                "id_type": id_type,
                "mobile_no": mobile_no
            }
        )


class TbQuanQuDao(DingTalkBaseAPI):
    """
    全渠道API
    """

    def tmall_storedeliver_allocation_accept(
            self,
            allocation_code,
            is_accept,
            sub_order_code
    ):
        """
        门店发货门店接单
        商品通门店发货业务门店接单拒单接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26636

        :param allocation_code: 派单号
        :param is_accept: 是否接单
        :param sub_order_code: 子订单号必须和派单号匹配
        """
        return self._top_request(
            "tmall.storedeliver.allocation.accept",
            {
                "allocation_code": allocation_code,
                "is_accept": is_accept,
                "sub_order_code": sub_order_code
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_qimen_tag_items_query(
            self,
            tag_type,
            remark=''
    ):
        """
        打标结果查询-标维度
        调用该接口，查询打了某个标的商品列表。说明：该接口调用后，返回值的时间较长，建议不要经常调用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27153

        :param tag_type: 打标值，string（50），TBKU=同步库存标，MDZT=门店自提标，必填
        :param remark: 备注，string（500）
        """
        return self._top_request(
            "taobao.qimen.tag.items.query",
            {
                "tag_type": tag_type,
                "remark": remark
            }
        )

    def taobao_qimen_items_marking(
            self,
            action_type,
            tag_type,
            item_ids,
            remark=''
    ):
        """
        商品通自动打标
        调用该接口，对商品进行XXXX标的打标、去标的动作。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27154

        :param action_type: 操作类型，string（50），ADD=打标，DELETE=去标，必填
        :param tag_type: 打标值，string（50），TBKU=同步库存标，MDZT=门店自提标，必填
        :param item_ids: 线上商品ID，long，必填
        :param remark: 备注，string（500）
        """
        return self._top_request(
            "taobao.qimen.items.marking",
            {
                "action_type": action_type,
                "tag_type": tag_type,
                "item_ids": item_ids,
                "remark": remark
            }
        )

    def taobao_qimen_items_tag_query(
            self,
            item_ids
    ):
        """
        打标结果查询-商品维度
        调用该接口，查询某个/某批商品上的标
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27162

        :param item_ids: 线上淘宝商品ID，long，必填
        """
        return self._top_request(
            "taobao.qimen.items.tag.query",
            {
                "item_ids": item_ids
            }
        )

    def taobao_omniorder_allocatedinfo_sync(
            self,
            tid,
            status,
            report_timestamp,
            sub_order_list,
            message='',
            trace_id=''
    ):
        """
        分单结果同步给星盘
        ISV分单完成，将分单结果同步给星盘
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27387

        :param tid: 淘宝交易主订单ID
        :param status: 分单状态，如： 等待中(Waiting)，已分单(Allocated)，分单失败(AllocateFail)
        :param report_timestamp: 1231243213213
        :param sub_order_list: 门店的分单列表
        :param message: 分单结果消息, 如果status为AllocateFail, 则表示失败的理由.
        :param trace_id: 跟踪Id
        """
        return self._top_request(
            "taobao.omniorder.allocatedinfo.sync",
            {
                "tid": tid,
                "status": status,
                "report_timestamp": report_timestamp,
                "sub_order_list": sub_order_list,
                "message": message,
                "trace_id": trace_id
            }
        )

    def taobao_omniorder_store_accpeted(
            self,
            tid,
            sub_order_list,
            report_timestamp,
            trace_id=''
    ):
        """
        Pos端门店接单接口
        ISV Pos端门店接单，通知星盘
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27389

        :param tid: 淘宝交易主订单ID
        :param sub_order_list: 子订单列表
        :param report_timestamp: ISV系统上报时间
        :param trace_id: 跟踪Id
        """
        return self._top_request(
            "taobao.omniorder.store.accpeted",
            {
                "tid": tid,
                "sub_order_list": sub_order_list,
                "report_timestamp": report_timestamp,
                "trace_id": trace_id
            }
        )

    def taobao_omniorder_store_refused(
            self,
            tid,
            sub_order_list,
            report_timestamp,
            trace_id=''
    ):
        """
        Pos端门店拒单
        ISV Pos端门店拒单，通知星盘
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27390

        :param tid: 淘宝交易主订单ID
        :param sub_order_list: 子订单列表
        :param report_timestamp: ISV的系统时间
        :param trace_id: 跟踪Id
        """
        return self._top_request(
            "taobao.omniorder.store.refused",
            {
                "tid": tid,
                "sub_order_list": sub_order_list,
                "report_timestamp": report_timestamp,
                "trace_id": trace_id
            }
        )

    def taobao_omniorder_store_consigned(
            self,
            tid,
            report_timestamp,
            sub_order_list,
            trace_id=''
    ):
        """
        Pos端门店发货
        ISV Pos端门店发货，通知星盘
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27391

        :param tid: 淘宝交易主订单ID
        :param report_timestamp: ISV系统上报时间
        :param sub_order_list: 子订单列表
        :param trace_id: 跟踪Id
        """
        return self._top_request(
            "taobao.omniorder.store.consigned",
            {
                "tid": tid,
                "report_timestamp": report_timestamp,
                "sub_order_list": sub_order_list,
                "trace_id": trace_id
            }
        )

    def taobao_omniorder_print_sale_judge(
            self,
            sub_uid=''
    ):
        """
        导购员判断
        用于判断当前子账号是否导购员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27680

        :param sub_uid: 用户子账号ID
        """
        return self._top_request(
            "taobao.omniorder.print.sale.judge",
            {
                "sub_uid": sub_uid
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_omniorder_print_order_get(
            self,
            start_date='',
            end_date='',
            sub_uid=''
    ):
        """
        可打印订单列表获取
        获取可发货的订单关系列表，供isv过滤出导购员可见订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27681

        :param start_date: 修改起始时间
        :param end_date: 修改结束时间
        :param sub_uid: 用户子账号ID
        """
        return self._top_request(
            "taobao.omniorder.print.order.get",
            {
                "start_date": start_date,
                "end_date": end_date,
                "sub_uid": sub_uid
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_omniorder_print_seller_get(
            self
    ):
        """
        全渠道发货商家列表
        提供接入门店发货业务的全渠道商家列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27682

        """
        return self._top_request(
            "taobao.omniorder.print.seller.get",
            result_processor=lambda x: x["data"]
        )

    def taobao_omniorder_store_sdtconsign(
            self,
            package_id,
            tag_code=''
    ):
        """
        通知菜鸟裹裹发货
        ISV取完单号后通知菜鸟裹裹发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29116

        :param package_id: 取号接口返回的包裹id
        :param tag_code: 发货标签号
        """
        return self._top_request(
            "taobao.omniorder.store.sdtconsign",
            {
                "package_id": package_id,
                "tag_code": tag_code
            }
        )

    def taobao_omniorder_store_warehouse(
            self,
            operation,
            store_id='',
            warehouse_address='',
            warehouse_mobile='',
            warehouse_code='',
            warehouse_contact=''
    ):
        """
        设置门店与区域仓的映射关系
        为了能够支持逆向到门店对应的区域仓，商家需要配置门店与区域仓的映射关系，这个接口可以给商家提供门店与区域仓映射关系的增删改查功能。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29118

        :param operation: 操作，1表示增加或者更新，2表示删除，3表示查询
        :param store_id: 门店id
        :param warehouse_address: 仓联系地址
        :param warehouse_mobile: 仓联系电话
        :param warehouse_code: 仓编码
        :param warehouse_contact: 仓联系人
        """
        return self._top_request(
            "taobao.omniorder.store.warehouse",
            {
                "operation": operation,
                "store_id": store_id,
                "warehouse_address": warehouse_address,
                "warehouse_mobile": warehouse_mobile,
                "warehouse_code": warehouse_code,
                "warehouse_contact": warehouse_contact
            }
        )

    def taobao_omniorder_store_getconsignmailcode(
            self,
            store_id,
            channel,
            trades,
            sender_contact='',
            receiver=None,
            sdt_extend_info_d_t_o=None
    ):
        """
        全渠道门店物流菜鸟裹裹取号
        用于ISV获取全渠道门店物流订单菜鸟裹裹门店的物流快递取号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29119

        :param store_id: 门店ID
        :param channel: 淘宝(TB)、天猫(TM)、京东(JD)、当当(DD)、拍拍(PP)、易讯(YX)、ebay(EBAY)、QQ网购(QQ)      、亚马逊(AMAZON)、苏宁(SN)、国美(GM)、唯品会(WPH)、聚美(JM)、乐蜂(LF)、蘑菇街(MGJ)      、聚尚(JS)、拍鞋(PX)、银泰(YT)、1号店(YHD)、凡客(VANCL)、邮乐(YL)、优购(YG)、阿里      巴巴(1688)、其他(OTHERS)
        :param trades: 订单信息，目前一次请求只支持一个主订单
        :param sender_contact: 发件人联系电话，如空则表示使用门店信息中的电话号码
        :param receiver: 收件人信息
        :param sdt_extend_info_d_t_o: 扩展信息
        """
        return self._top_request(
            "taobao.omniorder.store.getconsignmailcode",
            {
                "store_id": store_id,
                "channel": channel,
                "trades": trades,
                "sender_contact": sender_contact,
                "receiver": receiver,
                "sdt_extend_info_d_t_o": sdt_extend_info_d_t_o
            }
        )

    def taobao_omniorder_store_sdtcancel(
            self,
            package_id
    ):
        """
        通知速店通取消取号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29120

        :param package_id: 取号返回的packageId
        """
        return self._top_request(
            "taobao.omniorder.store.sdtcancel",
            {
                "package_id": package_id
            }
        )

    def taobao_omniorder_store_sdtquerystation(
            self,
            param_long2
    ):
        """
        速店通查询站点信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29121

        :param param_long2: 取号时返回的packageId
        """
        return self._top_request(
            "taobao.omniorder.store.sdtquerystation",
            {
                "param_long2": param_long2
            }
        )

    def taobao_omniorder_storecollect_query(
            self,
            code
    ):
        """
        全渠道门店自提根据核销码查询订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29286

        :param code: 核销码
        """
        return self._top_request(
            "taobao.omniorder.storecollect.query",
            {
                "code": code
            }
        )

    def taobao_omniorder_storecollect_consume(
            self,
            code,
            main_order_id,
            operator=''
    ):
        """
        全渠道门店自提核销订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29287

        :param code: 核销码
        :param main_order_id: 淘宝主订单ID
        :param operator: 核销操作人信息
        """
        return self._top_request(
            "taobao.omniorder.storecollect.consume",
            {
                "code": code,
                "main_order_id": main_order_id,
                "operator": operator
            }
        )

    def taobao_omniorder_store_reallocate(
            self,
            main_order_id,
            sub_order_ids,
            store_id='',
            warehouse_code=''
    ):
        """
        rellocate
        门店发货提供改派接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30448

        :param main_order_id: 主订单号
        :param sub_order_ids: 子订单号
        :param store_id: 门店Id
        :param warehouse_code: 电商仓code
        """
        return self._top_request(
            "taobao.omniorder.store.reallocate",
            {
                "main_order_id": main_order_id,
                "sub_order_ids": sub_order_ids,
                "store_id": store_id,
                "warehouse_code": warehouse_code
            }
        )

    def taobao_omniorder_store_switchstatus_update(
            self,
            store_id,
            status
    ):
        """
        switchstatus.update
        变更门店发货、门店自提状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30688

        :param store_id: 门店ID
        :param status: 门店发货自提状态
        """
        return self._top_request(
            "taobao.omniorder.store.switchstatus.update",
            {
                "store_id": store_id,
                "status": status
            }
        )

    def taobao_omniorder_store_switchstatus_get(
            self,
            store_id,
            seller_id
    ):
        """
        switchstatus.get
        查询门店发货、门店自提状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30689

        :param store_id: 门店ID
        :param seller_id: 卖家ID
        """
        return self._top_request(
            "taobao.omniorder.store.switchstatus.get",
            {
                "store_id": store_id,
                "seller_id": seller_id
            }
        )

    def taobao_omniitem_item_publish(
            self,
            operate_type,
            light_publish_info=None
    ):
        """
        全渠道门店商品轻发布
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30890

        :param operate_type: 在全域商品或是门店商品中校验码是否重复，可选值对应为ALL或者STORE
        :param light_publish_info: 发布商品信息
        """
        return self._top_request(
            "taobao.omniitem.item.publish",
            {
                "operate_type": operate_type,
                "light_publish_info": light_publish_info
            }
        )

    def taobao_omniitem_category_get(
            self,
            category_id=''
    ):
        """
        全渠道商品轻发布类目信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30891

        :param category_id: 全渠道商品类目ID，不填表示获取所有全渠道商品类目信息
        """
        return self._top_request(
            "taobao.omniitem.category.get",
            {
                "category_id": category_id
            }
        )

    def taobao_omniitem_item_image_upload(
            self,
            img,
            bar_code='',
            item_id='',
            outer_id='',
            major='false',
            position='0'
    ):
        """
        全渠道商品上传图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30892

        :param img: 商品图片信息，允许png、jpg、gif图片格式,3M以内
        :param bar_code: 条形码
        :param item_id: 商品ID，若填入商品ID则以商品ID为准，否则以outerId/barCode为准
        :param outer_id: 商品outerId
        :param major: 是否为主图
        :param position: 图片顺序
        """
        return self._top_request(
            "taobao.omniitem.item.image.upload",
            {
                "img": img,
                "bar_code": bar_code,
                "item_id": item_id,
                "outer_id": outer_id,
                "major": major,
                "position": position
            }
        )

    def taobao_omniitem_item_fullupdate(
            self,
            light_publish_info,
            operate_type
    ):
        """
        全渠道商品全量更新
        全渠道商品全量更新，仅适用于全渠道门店商品
        需要全量传入商品相关所有参数，更新时会根据传入的字段进行全量更新
        对于SKU信息，会以skus对象进行判断，若传入的skus对象的sku为商品之前未包含的，则新增SKU，如果原先商品有该sku但现在没有传，则删除该SKU。所有传入的SKU信息要么全部均传入skuId，要么全部都不传入skuId。对于新增SKU的场景，目前无需传入SKUID，会根据传入的销售属性自动对应
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30893

        :param light_publish_info: 发布商品信息
        :param operate_type: 操作类型，STORE表示门店域新增，ALL表示全域新增
        """
        return self._top_request(
            "taobao.omniitem.item.fullupdate",
            {
                "light_publish_info": light_publish_info,
                "operate_type": operate_type
            }
        )

    def taobao_omniitem_item_delete(
            self,
            bar_code='',
            item_id='',
            outer_id=''
    ):
        """
        全渠道商品删除
        全渠道商品删除，能够对门店商品库商品进行删除动作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30894

        :param bar_code: 条形码
        :param item_id: 商品ID，若填入则以该字段为准，否则以outerId+barcode为准
        :param outer_id: 商品outerId
        """
        return self._top_request(
            "taobao.omniitem.item.delete",
            {
                "bar_code": bar_code,
                "item_id": item_id,
                "outer_id": outer_id
            }
        )

    def taobao_omniorder_dtd_resend(
            self,
            main_order_id
    ):
        """
        门店自送重发码
        该接口触发对门店自送发码短信进行重发，码内容不变，接受码的手机号也不变。每个码限制每日重发一次，总共重发5次
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31868

        :param main_order_id: 淘宝主订单ID
        """
        return self._top_request(
            "taobao.omniorder.dtd.resend",
            {
                "main_order_id": main_order_id
            }
        )

    def taobao_omniorder_dtd_consign(
            self,
            main_order_id,
            store_id=''
    ):
        """
        门店自送发货
        该接口触发门店自送发货，推进淘系订单状态为发货，为消费者发送核销码短信，并将物流信息写入订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31869

        :param main_order_id: 淘宝订单主订单号
        :param store_id: 发货对应的商户中心门店ID
        """
        return self._top_request(
            "taobao.omniorder.dtd.consign",
            {
                "main_order_id": main_order_id,
                "store_id": store_id
            }
        )

    def taobao_omniorder_dtd_consume(
            self,
            param_door2door_consume_request=None
    ):
        """
        门店自送对码进行核销
        该接口根据传入的码及订单信息，如果码与订单一致，则对门店自送服务进行核销。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31870

        :param param_door2door_consume_request: 核销信息
        """
        return self._top_request(
            "taobao.omniorder.dtd.consume",
            {
                "param_door2door_consume_request": param_door2door_consume_request
            }
        )

    def taobao_omniorder_dtd_query(
            self,
            code
    ):
        """
        门店自送根据核销码查订单
        门店自送根据核销码码查询订单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31871

        :param code: 核销码
        """
        return self._top_request(
            "taobao.omniorder.dtd.query",
            {
                "code": code
            }
        )

    def taobao_omniitem_classify_query(
            self,
            page_num,
            page_size,
            keyword=''
    ):
        """
        查询分类信息
        通过查询关键字，分页查询分类信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31914

        :param page_num: 页码
        :param page_size: 每页大小
        :param keyword: 查询关键词
        """
        return self._top_request(
            "taobao.omniitem.classify.query",
            {
                "page_num": page_num,
                "page_size": page_size,
                "keyword": keyword
            }
        )

    def taobao_omniitem_classify_store_query(
            self,
            store_id,
            page_num,
            page_size
    ):
        """
        根据门店查分类信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31915

        :param store_id: 商户的门店ID
        :param page_num: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.omniitem.classify.store.query",
            {
                "store_id": store_id,
                "page_num": page_num,
                "page_size": page_size
            }
        )

    def taobao_omniitem_classify_item_query(
            self,
            classify_id,
            page_num,
            page_size
    ):
        """
        根据分类查商品信息
        商家根据分类查商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31916

        :param classify_id: 分类ID
        :param page_num: 页码
        :param page_size: 每页大小
        """
        return self._top_request(
            "taobao.omniitem.classify.item.query",
            {
                "classify_id": classify_id,
                "page_num": page_num,
                "page_size": page_size
            }
        )

    def taobao_omniitem_classify_item_batch_operate(
            self,
            classify_ids,
            add_item_ids='-1',
            delete_item_ids='-1',
            operator=''
    ):
        """
        批量添加/删除商品和分类的关联关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31917

        :param classify_ids: 分类ID
        :param add_item_ids: 需要添加分类关联关系的商品ID
        :param delete_item_ids: 需要删除分类关联关系的商品ID
        :param operator: 操作人信息（暂时不填）
        """
        return self._top_request(
            "taobao.omniitem.classify.item.batch.operate",
            {
                "classify_ids": classify_ids,
                "add_item_ids": add_item_ids,
                "delete_item_ids": delete_item_ids,
                "operator": operator
            }
        )

    def taobao_omniitem_classify_store_batch_operate(
            self,
            store_ids,
            add_category_ids='-1',
            remove_category_ids='-1',
            operator=''
    ):
        """
        批量添加/删除门店和分类的关联关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31918

        :param store_ids: 商家门店ID
        :param add_category_ids: 需要添加的分类ID
        :param remove_category_ids: 需要删除的分类ID
        :param operator: 操作信息（暂时不填）
        """
        return self._top_request(
            "taobao.omniitem.classify.store.batch.operate",
            {
                "store_ids": store_ids,
                "add_category_ids": add_category_ids,
                "remove_category_ids": remove_category_ids,
                "operator": operator
            }
        )

    def taobao_omniitem_classify_delete(
            self,
            classify_id,
            operator=''
    ):
        """
        删除一个分类
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31919

        :param classify_id: 分类ID
        :param operator: 操作人信息（暂时不填）
        """
        return self._top_request(
            "taobao.omniitem.classify.delete",
            {
                "classify_id": classify_id,
                "operator": operator
            }
        )

    def taobao_omniitem_classify_operator(
            self,
            category=None,
            add_item_ids='-1',
            remove_item_ids='-1',
            operator=''
    ):
        """
        添加/修改分类
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31929

        :param category: 分类信息
        :param add_item_ids: 需要添加的关联关系的商品
        :param remove_item_ids: 需要修改的关联关系的商品
        :param operator: 操作人信息（暂时不填）
        """
        return self._top_request(
            "taobao.omniitem.classify.operator",
            {
                "category": category,
                "add_item_ids": add_item_ids,
                "remove_item_ids": remove_item_ids,
                "operator": operator
            }
        )

    def taobao_omniitem_item_get(
            self,
            page_no='1',
            page_size='20',
            item_id='',
            outer_id=''
    ):
        """
        获取全渠道门店商品
        通过门店id/类目id/商品id单个或多个参数组合查询全渠道门店商品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33240

        :param page_no: 分页当前页数
        :param page_size: 分页单页大小
        :param item_id: 可选，指定获取的商品id
        :param outer_id: 可选，指定获取的商品外部id
        """
        return self._top_request(
            "taobao.omniitem.item.get",
            {
                "page_no": page_no,
                "page_size": page_size,
                "item_id": item_id,
                "outer_id": outer_id
            }
        )

    def taobao_omniitem_sku_get(
            self,
            item_id='',
            sku_id='',
            sku_outer_id=''
    ):
        """
        获取全渠道门店商品sku
        通过skuId或者skuOutId查询全渠道门店商品sku信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33529

        :param item_id: 商品id
        :param sku_id: skuId
        :param sku_outer_id: sku商家编码
        """
        return self._top_request(
            "taobao.omniitem.sku.get",
            {
                "item_id": item_id,
                "sku_id": sku_id,
                "sku_outer_id": sku_outer_id
            }
        )

    def taobao_omniorder_store_deliverconfig_update(
            self,
            store_id,
            store_deliver_config
    ):
        """
        修改门店发货配置内容
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33752

        :param store_id: 门店ID
        :param store_deliver_config: 卖家发货配置
        """
        return self._top_request(
            "taobao.omniorder.store.deliverconfig.update",
            {
                "store_id": store_id,
                "store_deliver_config": store_deliver_config
            }
        )

    def taobao_omniorder_store_collectconfig_update(
            self,
            store_collect_config,
            store_id
    ):
        """
        门店自提配置修改
        修改门店自提配置内容
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33753

        :param store_collect_config: 门店自提配置
        :param store_id: 门店ID
        """
        return self._top_request(
            "taobao.omniorder.store.collectconfig.update",
            {
                "store_collect_config": store_collect_config,
                "store_id": store_id
            }
        )

    def taobao_omniorder_store_collectconfig_get(
            self,
            store_id,
            activity='false'
    ):
        """
        查询门店自提配置内容
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33757

        :param store_id: 门店ID
        :param activity: 是否是活动期
        """
        return self._top_request(
            "taobao.omniorder.store.collectconfig.get",
            {
                "store_id": store_id,
                "activity": activity
            }
        )

    def taobao_omniorder_store_deliverconfig_get(
            self,
            store_id,
            activity='false'
    ):
        """
        查询门店发货配置内容
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33758

        :param store_id: 门店ID
        :param activity: 是否是活动期
        """
        return self._top_request(
            "taobao.omniorder.store.deliverconfig.get",
            {
                "store_id": store_id,
                "activity": activity
            }
        )

    def taobao_omniorder_store_sdtstatus(
            self,
            package_id='0'
    ):
        """
        菜鸟裹裹运单状态查询
        提供给商家查询运力单的状态。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35291

        :param package_id: 菜鸟裹裹的包裹ID
        """
        return self._top_request(
            "taobao.omniorder.store.sdtstatus",
            {
                "package_id": package_id
            }
        )

    def taobao_omniorder_item_tag_operate(
            self,
            item_id,
            types,
            status,
            omni_setting=None
    ):
        """
        全渠道商品打标与去标
        用于对全渠道商品进行打标、去标（门店发货标，门店自提标，前置拆单标）操作。另外还包括增加、删除、修改分单系统，接单系统配置。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35627

        :param item_id: 商品ID
        :param types: 商品标,storeDeliver代表门店发货, AllocateByFront代表前置拆单, storeCollect代表门店自提
        :param status: 操作状态， 填 1 代表打标，填 -1 代表去标
        :param omni_setting: 分单&接单设置
        """
        return self._top_request(
            "taobao.omniorder.item.tag.operate",
            {
                "item_id": item_id,
                "types": types,
                "status": status,
                "omni_setting": omni_setting
            }
        )

    def taobao_jst_astrolabe_storeinventory_iteminitial(
            self,
            operation_time,
            stores=None
    ):
        """
        库存初始化接口
        ERP调用奇门的接口，对门店的库存进行初始化
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37856

        :param operation_time: 操作时间
        :param stores: 门店列表
        """
        return self._top_request(
            "taobao.jst.astrolabe.storeinventory.iteminitial",
            {
                "operation_time": operation_time,
                "stores": stores
            }
        )

    def taobao_jst_astrolabe_storeinventory_itemadjust(
            self,
            operation_time,
            inventory_adjust_info=None
    ):
        """
        库存占用调整接口
        当第三方系统出现分单结果和天猫货品中心分单结果不一致时，需要调用此接口同步分单消息给天猫货品中心，调整之前占用的门店/电商仓库存。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37900

        :param operation_time: 操作时间
        :param inventory_adjust_info: 库存调整信息
        """
        return self._top_request(
            "taobao.jst.astrolabe.storeinventory.itemadjust",
            {
                "operation_time": operation_time,
                "inventory_adjust_info": inventory_adjust_info
            }
        )

    def taobao_jst_astrolabe_storeinventory_itemquery(
            self,
            stores=None
    ):
        """
        库存查询接口
        查询门店或电商仓库存，该接口一次可以同时查询多个门店或电商仓的多个商品的多种类型的库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37901

        :param stores: 门店信息
        """
        return self._top_request(
            "taobao.jst.astrolabe.storeinventory.itemquery",
            {
                "stores": stores
            }
        )

    def taobao_jst_astrolabe_storeinventory_itemupdate(
            self,
            operation_time,
            stores=None
    ):
        """
        库存增量更新接口
        ERP调用该接口，增量更新门店或电商仓库存，该接口一次可以同时增量更新多个门店的多个商品的非确定性库存。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37902

        :param operation_time: 操作时间
        :param stores: 门店列表
        """
        return self._top_request(
            "taobao.jst.astrolabe.storeinventory.itemupdate",
            {
                "operation_time": operation_time,
                "stores": stores
            }
        )

    def taobao_jst_astrolabe_storeinventory_initial(
            self,
            operation_time,
            stores=None
    ):
        """
        后端商品库存初始化
        初始化电商仓或门店库存，该接口一次可以初始化多个门店(或电商仓)的多个商品的多种类型库存。此接口只能使用一次，后续所有的库存变动都需走增量库存同步接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37941

        :param operation_time: 操作时间
        :param stores: 门店列表
        """
        return self._top_request(
            "taobao.jst.astrolabe.storeinventory.initial",
            {
                "operation_time": operation_time,
                "stores": stores
            }
        )

    def taobao_jst_astrolabe_storeinventory_update(
            self,
            operation_time,
            stores=None
    ):
        """
        后端商品库存增量更新接口
        增量更新门店或电商仓库存，该接口一次可以同时增量更新多个门店的多个商品的非确定性库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37942

        :param operation_time: 操作时间
        :param stores: 门店列表
        """
        return self._top_request(
            "taobao.jst.astrolabe.storeinventory.update",
            {
                "operation_time": operation_time,
                "stores": stores
            }
        )

    def taobao_jst_astrolabe_storeinventory_query(
            self,
            stores=None
    ):
        """
        后端商品库存查询接口
        查询门店或电商仓库存，该接口一次可以同时查询多个门店或电商仓的多个商品的多种类型的库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37944

        :param stores: 门店
        """
        return self._top_request(
            "taobao.jst.astrolabe.storeinventory.query",
            {
                "stores": stores
            }
        )

    def taobao_jst_astrolabe_storeinventory_adjust(
            self,
            operation_time,
            inventory_adjust_info=None
    ):
        """
        后端商品库存占用调整接口
        当第三方系统出现分单结果和天猫货品中心分单结果不一致时，需要调用此接口同步分单消息给天猫货品中心，调整之前占用的门店/电商仓库存。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37945

        :param operation_time: 操作时间
        :param inventory_adjust_info: 库存调整信息
        """
        return self._top_request(
            "taobao.jst.astrolabe.storeinventory.adjust",
            {
                "operation_time": operation_time,
                "inventory_adjust_info": inventory_adjust_info
            }
        )

    def taobao_omniorder_guide_data_get(
            self,
            type,
            start_time,
            page_no,
            page_size
    ):
        """
        获取全渠道导购产品数据
        获取全渠道导购产品，目前包括随心购、随身购扫码、加购和交易数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39449

        :param type: detail_smg_scan: 扫码购扫码明细;detail_smg_cart: 扫码购加购明细;detail_smg_order: 扫码购订单明细;detail_sxg_search: 随心购搜索明细;detail_sxg_view_item: 随心购商品浏览明细;detail_sxg_cart: 随心购加购明细;detail_sxg_order: 随心购订单明细
        :param start_time: 拉取数据开始时间
        :param page_no: 页码，从1开始
        :param page_size: 每页数量，不能大于1000
        """
        return self._top_request(
            "taobao.omniorder.guide.data.get",
            {
                "type": type,
                "start_time": start_time,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["data_list"]
        )

    def alibaba_retail_commission_order_sync(
            self,
            param0=None
    ):
        """
        分佣数据传输
        同步分佣结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41790

        :param param0: 请求参数
        """
        return self._top_request(
            "alibaba.retail.commission.order.sync",
            {
                "param0": param0
            }
        )

    def taobao_jst_astrolabe_orderstatus_sync(
            self,
            parent_order_code,
            sub_order_ids='',
            action_time='',
            operator='',
            type='',
            status='',
            store_id=''
    ):
        """
        线下门店派单以及单据相关操作接口
        针对ERP系统部署在门店的商家，将派单状态回流到星盘
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37940

        :param parent_order_code: 交易订单
        :param sub_order_ids: 子订单Id
        :param action_time: 事件发生时间
        :param operator: 操作人
        :param type: 业务类型
        :param status: 订单状态
        :param store_id: 目标门店的商户中心门店编码
        """
        return self._top_request(
            "taobao.jst.astrolabe.orderstatus.sync",
            {
                "parent_order_code": parent_order_code,
                "sub_order_ids": sub_order_ids,
                "action_time": action_time,
                "operator": operator,
                "type": type,
                "status": status,
                "store_id": store_id
            }
        )

    def alibaba_retail_commission_status_change(
            self,
            param0=None
    ):
        """
        分佣状态变更
        分佣系统，分佣状态变更接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42661

        :param param0: 请求参数
        """
        return self._top_request(
            "alibaba.retail.commission.status.change",
            {
                "param0": param0
            }
        )

    def alibaba_retail_commission_order_query(
            self,
            end_pay_time,
            start_pay_time,
            page_no='1',
            page_size='10'
    ):
        """
        分销订单查询
        查询商家的分销订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42927

        :param end_pay_time: 查询三个月内交易创建时间开始。格式:yyyy-MM-dd HH:mm:ss
        :param start_pay_time: 查询交易创建时间结束。格式:yyyy-MM-dd HH:mm:ss
        :param page_no: 页码，默认第一页
        :param page_size: 页大小，默认每页十条
        """
        return self._top_request(
            "alibaba.retail.commission.order.query",
            {
                "end_pay_time": end_pay_time,
                "start_pay_time": start_pay_time,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_retail_commission_result_query(
            self,
            param0=None
    ):
        """
        分佣结果查询
        查询导购分佣记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43948

        :param param0: 请求参数
        """
        return self._top_request(
            "alibaba.retail.commission.result.query",
            {
                "param0": param0
            }
        )


class TbGuoJiJiPiaoZhengCe(DingTalkBaseAPI):
    """
    国际机票政策API
    """

    def taobao_alitrip_shoppingcache_update(
            self,
            request_shoppingcacheupdate=None
    ):
        """
        去啊运价缓存更新
        由于卖家的Shopping接口数据在“去啊”上有10分钟的缓存时间，因此卖家在自我扫线调价时前台存在一定的延迟，所以我们提供一个外部接口给卖家，当卖家需要主动刷新Shopping的缓存信息的时候，就来调用这个接口，达到立即刷新对方接口缓存信息的功能。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24970

        :param request_shoppingcacheupdate: 请求实体
        """
        return self._top_request(
            "taobao.alitrip.shoppingcache.update",
            {
                "request_shoppingcacheupdate": request_shoppingcacheupdate
            },
            result_processor=lambda x: x["response_result"]
        )

    def taobao_alitrip_it_fare_get(
            self,
            extend_attributes='',
            fare_id='',
            out_id=''
    ):
        """
        【国际机票自有政策】单条查询
        通过此接口可以查询单条政策的详情，可以根据fareId或outId查询，用户outId查询时，如果outId不唯一，只返回最新添加的一条数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25493

        :param extend_attributes: json格式的字符串，扩展属性，预留
        :param fare_id: 运价id，单条新增成功时返回运价id，fareId和outId必填一个，fareId优先
        :param out_id: 外部id，为新增时请求参数中的外部政策id
        """
        return self._top_request(
            "taobao.alitrip.it.fare.get",
            {
                "extendAttributes": extend_attributes,
                "fareId": fare_id,
                "outId": out_id
            }
        )

    def taobao_alitrip_it_fare_addow(
            self,
            ticketing_airline,
            origin_land,
            destination,
            cabin,
            valid_date4_dep,
            sale_date,
            adult_passenger_identity,
            ticket_price,
            luggage_rule,
            is_can_all_refund,
            is_can_part_refund,
            can_dep_change,
            noshow_restrict,
            out_file_code='',
            file_code='',
            product_type='',
            stock_mode='',
            sale_airline='',
            address_option='',
            trip_type='',
            transit_land='',
            restrict_flight_no='',
            exclude_flight_no='',
            exclude_date_range4_dep='',
            trip_date_point4_dep='',
            trip_exclude_date_point4_dep='',
            flight_date_restrict4_dep='',
            flight_date_point4_dep='',
            min_travel_person='',
            max_travel_person='',
            gv2_child_rule='',
            nationality='',
            exclude_nationality='',
            passenger_age='',
            adult_tax='',
            child_price='',
            child_tax='',
            return_point='',
            adjust_money='',
            early_ticketing_time_limit='',
            late_ticketing_time_limit='',
            vip_code='',
            fare_source='',
            is_create_pnr='',
            booking_office='',
            receipts='',
            is_validat_price='',
            is_can_refund4_dep='',
            refund_price4_dep='',
            refund_part_price4_dep='',
            is_can_reissue4_dep='',
            reissue_price4_dep='',
            reissue_part_price4_dep='',
            no_show_time_limit4_dep='',
            is_no_show_can_refund4_dep='',
            is_no_show_can_reissue4_dep='',
            no_show_penalty4_dep='',
            luggage_rule4_dep='',
            remark='',
            working_hours='',
            refund_rule='',
            reissue_rule='',
            noshow_rule='',
            apply_channel='',
            commodity_type='',
            code_sharing_type='',
            extend_attributes='',
            buy_ticket_notice='',
            refund_fee_all_unused='',
            refund_currency_all_unused='CNY',
            refund_fee_type_all_unused='全程',
            refund_fee_part_unused='',
            refund_currency_part_unused='CNY',
            refund_fee_type_part_unused='全程',
            dep_change_fee='',
            dep_change_currency='CNY',
            dep_change_fee_type='全程',
            noshow_time_restrict='',
            noshow_time_restrict_unit='小时',
            noshow_rule_type='',
            noshow_fee='',
            noshow_currency='CNY',
            farebasis='',
            fare_type_code='',
            tariff='',
            rule_id=''
    ):
        """
        【国际机票自有政策】单条单程添加
        自有政策单程添加接口，重复的老数据会被删除，重复判断规则同excel
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25494

        :param ticketing_airline: 出票航司,1.不可为空 2.航空公司二字码 3.只能输入一个
        :param origin_land: 始发地,多个用“,”隔开 1.不得为空 2.可以填写：机场三字码”或“城市码” 3.最多允许100个机场三字码/城市码
        :param destination: 目的地，多个用“,”隔开 1.不得为空 2.可以填写：机场三字码”或“城市码” 3.最多允许100个机场三字码/城市码
        :param cabin: 舱位， 用','表示航段的分割。 1、舱位代码。每段只允许录入一个舱位代码，若全程舱位一致则可以只录入一个
        :param valid_date4_dep: 去程旅行有效期，支持多段组合，用“,”隔开， 1.不得为空 2例：2014-04-01~2014-06-30，2014-09-01 ~2014-09-30， 3日期格式为 YYYY-MM-DD或YYYY/MM/DD，例：2014-04-01或2014/04/01
        :param sale_date: 销售日期，1、不得为空 2.输入格式为：2014-04-01~2014-06-30 3.不支持多段组合， 4.3日期格式为 YYYY-MM-DD或YYYY/MM/DD，例：2014-04-01或20104/04/01
        :param adult_passenger_identity: 成人旅客身份，1.不得为空 2.普通/学生  3.当输入学生时，儿童价格项输入无效 4.当为小团产品时，此适用身份类别必须为 普通。5、后期支持劳工、移民、海员、老人、青年
        :param ticket_price: 销售票面价,1.不得为空 2.价格区间为【0-999999】 3、销售票面价为10的整数倍(向下取整，如录入3002，则实际录入数值为3000)
        :param luggage_rule: 行李额规定,1、不可为空2、可填写：1PC。逾重行李费用为每公斤100元3、行李额规定最多为300个字符
        :param is_can_all_refund: 必填项，全部未使用可否退票，可输入:是，否
        :param is_can_part_refund: 必填项，部分未使用可否退票，可输入：是，否
        :param can_dep_change: 必填项，去程可否改期，可输入是或否
        :param noshow_restrict: 必填项，NOSHOW是否有限制，可输入是或否
        :param out_file_code: 外部政策ID,1、自行输入的ID，建议为唯一id，有些操作可以使用此id 最多50个字符
        :param file_code: 文件编号
        :param product_type: （后期字段，预留）,产品类型,1.不可为空 2.填写为:包机切位、申请、见舱预订；
        :param stock_mode: （后期字段，预留）,库存模式,1.不可为空 2.填写为见舱或定额；默认为见舱
        :param sale_airline: 销售航司，不同航段之间用 “,”隔开。  1、销售航司二字码； 2、如为直达；请录入一个航司二字码；如为中转，录入格式为 第一程航司，第二程航司；或者航司；若全程都一样，则录入一个航司二字代码即可 3、如果不录入，则航司默认为出票航司；
        :param address_option: 城市/机场选项，默认为城市1、可以填写：“机场',“城市”2、定义始发地/目的地/中转点，输入为机场，还是城市。3、如：此项输入机场，则始发地、目的地必须输入机场三字码
        :param trip_type: 航程种类，1、默认为直达；有直达和中转两个选项；2、不填写 默认为 直达
        :param transit_land: 中转地，多个用“，”隔开 1.不得为空 2.可以填写：机场三字码,城市码 3.最多允许100个机场三字码/城市码  4、当航程类型书写为 中转时，此处为必填
        :param restrict_flight_no: 航班号限制,同一航段之间用，隔开表示或的关系；不同航段之间用/隔开。                       1 CA001-999,CA3000-3999  表示CA001至999以及3000至3999之间航班号的航班 2 MU  表示所有MU开头的航班  3 CA(LH\AZ) 表示CA开头的实际承运人为LH或AZ的航班 4 CA(*)   表示CA代码共享航班/CA开头的实际承运人为其他航空公司的航班 5 CA(CA)   表示CA自营航班/CA实际承运航班； 6 CA(OZ)001-999 表示CA开头航班号为001-999之间且实际承运人为OZ的航班； 7 为空表示无限制
        :param exclude_flight_no: 排除航班号限制，同一航段之间用，隔开表示或的关系；不同航段之间用/隔开。                       1 CA001-999,CA3000-3999  表示CA001至999以及3000至3999之间航班号的航班 2 MU  表示所有MU开头的自营航班  3 CA(LH\AZ) 表示CA开头的实际承运人为LH或AZ的航班 4 CA(*)   表示CA代码共享航班/CA开头的实际承运人为其他航空公司的航班 5 CA(CA)   表示CA自营航班/CA实际承运航班； 6 CA(OZ)001-999 表示CA开头航班号为001-999之间且实际承运人为OZ的航班； 7 为空表示无限制；8比如两段，第一段无限制，第二段有限制 /CA123
        :param exclude_date_range4_dep: 去程旅行排除时间段，支持多段组合，用“,”隔开隔开， 1.格式，例：2014-04-01~2014-12-31；或例：2014-04-01~2014-06-30,2014-09-01~2014-09-30， 3日期格式为 YYYY-MM-DD,YYYY/MM/DD 4、旅行排除日期最多只能输入200个字符
        :param trip_date_point4_dep: 去程旅行日期作用点，始发航段/第一国际段/主航段/全部；默认空为 第一国际段
        :param trip_exclude_date_point4_dep: 去程旅行排除日期作用点，始发航段/第一国际段/主航段/全部；默认空为 第一国际段
        :param flight_date_restrict4_dep: 去程班期限制，1.12表示周一周二                                                                                              2.12:00-14:00表示每天的12点到14点                                                                                  3. 12:00FRI-12:00SAT 表示周五的中午12点至周六的中午12点
        :param flight_date_point4_dep: 去程班期作用点，始发航段/第一国际段/主航段/全部；默认空为 第一国际段
        :param min_travel_person: 最小出行人数,数字1-9
        :param max_travel_person: 最大出行人数,数字1-9
        :param gv2_child_rule: 小团儿童计数规则，可选值：1个儿童计1个成人、2个儿童计1个成人、儿童不计
        :param nationality: 国籍，可录入多个用','隔开表示或的关系 1、可录入国家二字代码，为空表示不限制，最多录20个 *默认为空，不输入为不限制
        :param exclude_nationality: 除外国籍，可录入多个用','隔开表示或的关系 1、可录入国家二字代码，为空表示不限制，最多录20个 *默认为空，不输入为不限制
        :param passenger_age: 乘客年龄,1、可录入范围如21-25表示21周岁至25周岁
        :param adult_tax: （后期字段，预留）,成人税费，1、整数金额（包机切位产品适用）
        :param child_price: 儿童价，1、可不输入，空表示不适用儿童价 2、可输入大于0的正整数及百分比，输入百分比时，成人价格必须录入 例如：2000或70%。 3. 百分比计算的数值，个位向上取整 当'乘客类型'输入非“普通”（成人）时，此项输入无效。
        :param child_tax: （后期字段，预留）,儿童税费，1、整数金额（包机切位产品适用）
        :param return_point: 返点,1.不得为空 2.只允许填写数字，支持到小数点后两位；不用填写% 3.返点需小于100 成人价=销售票面价*（1-返点）+留钱
        :param adjust_money: 留钱，1.0或正负数字2.-20表示返20元；20代表留20元
        :param early_ticketing_time_limit: 提前出票时限，默认为空，代表无限制； 输入为小于等于365的正整数。 小于或等于最晚出票时限。 单位为天
        :param late_ticketing_time_limit: 最晚出票时限,默认为空，代表无限制； 输入为小于等于365的正整数。 大于或等于提前出票时限。 单位为天
        :param vip_code: 大客户编码，文本框
        :param fare_source: （后期字段，预留）,运价发布渠道,1、可填写 PC、无线、都适用 2、默认为都适用
        :param is_create_pnr: （后期字段，预留）,是否创建PNR，1、选项 可填写是，否.默认为是
        :param booking_office: 预定OFFICE，空表示默认优先级最高OFFICE，可输入OFFICE，校验必须为配置中存在的OFFICE
        :param receipts: 必填项  赋值范围:电子行程单,旅行发票,差额行程单发票,等额行程单
        :param is_validat_price: 是否校验票面价,1、可填写 是或者否；默认为否
        :param is_can_refund4_dep: （已废除字段）,去程全部未使用可否退票，录入是或否
        :param refund_price4_dep: （已废除字段）,去程全部未使用退票费用,可输入格式如：200-72-300-48-1000-0-*，表示72小时前退票手续费200；48小时到72小时，退票手续费300；飞机起飞不足48小时退票手续费1000；飞机起飞后不予退票（输入*）；
        :param refund_part_price4_dep: （已废除字段）,去程部分未使用退票费用,可输入空，*或正整数，其中空表示按照航空公司规定执行，*表示不支持部分退票
        :param is_can_reissue4_dep: （已废除字段）,去程全部未使用可否改期，录入是或否
        :param reissue_price4_dep: （已废除字段）,去程全部未使用改期费用，可输入格式如：200-72-300-48-1000-0-*，表示72小时前改期手续费200；48小时到72小时，改期手续费300；飞机起飞不足48小时改期手续费1000；飞机起飞后不予改期（输入*）；
        :param reissue_part_price4_dep: （已废除字段）,去程部分未使用改期费用,可输入空，*或正整数，其中空表示按照航空公司规定执行，*表示不支持部分改期
        :param no_show_time_limit4_dep: （已废除字段）,去程NOSHOW规定时限，输入正整数
        :param is_no_show_can_refund4_dep: （已废除字段）,去程NOSHOW能否退票，输入是或否；默认为否
        :param is_no_show_can_reissue4_dep: （已废除字段）,去程NOSHOW能否改期，输入是或否；默认为否
        :param no_show_penalty4_dep: （已废除字段）,去程NOSHOW罚金，可为空，若输入则为正整数；其中空表示按航空公司规定执行
        :param luggage_rule4_dep: （后期字段，预留）,去程行李额规定,可输入1-23,1-23 中间用','隔开，表示第一程和第二程（中转）支持行李额为1PC，23KG。若某段为空表示该段按照航空公司规定执行，逗号不可缺少；若不提供免费行李额直接输入空
        :param remark: 备注,出票备注文本
        :param working_hours: 工作时间,18:00FRI表示周一到周五的每天早上9点到下午6点                                                     最多录入三个时间段用，隔开表示或的关系                                                                               可以为空，表示不限制(运价上的工作时间优先级高于设置时间界面上的时间)
        :param refund_rule: （已废除字段）退票规定,1、不可为空 2、可填写：收取20%退票费用，或者是收取500元退票费等。 3、退票规定最多为300个字符
        :param reissue_rule: （已废除字段）改期规定,1、不可为空 2、可填写：收取20%改期费用，或者是收取500元改期费等。 3、改期规定最多为300个字符
        :param noshow_rule: （已废除字段）误机罚金说明，1、不可为空 2、可填写：起飞前不得退票，不得改期 3、误机罚金说明最多为300个字符
        :param apply_channel: 运价渠道 可选listing,宝贝 默认listing
        :param commodity_type: 商品类型，可选值：普通、金牌，默认普通，非金牌卖家不得选择金牌
        :param code_sharing_type: 不录入表示不限制；选项为：仅限同集团代码共享适用；代码共享适用；不允许代码共享；不限制 默认不限制
        :param extend_attributes: json格式的字符串，扩展属性，预留
        :param buy_ticket_notice: 购票须知，非必输长度小于300字符只在退票规定不为空时才会生效
        :param refund_fee_all_unused: 【全部未使用可否退票】为是时，此项为必填项。 可输入格式如:  1) 200 表示退票手续费为200（货币单位在下一个格子里） 2) 20% 表示退票手续费为票面价的20% 3）* 表示不允许退票 4) 200-0-400 表示起飞前退票手续费200；起飞后退票手续费400 5) 30%-0-* 表示起飞前退票手续费为票面价的30%；起飞后不允许退票 6）200-72-300-48-1000-0-* 表示72小时前退票手续费200; 48小时到72小时，退票手续费300; 飞机起飞不足48小时; 退票手续费1000; 飞机起飞后不予退票（输入*） 7) 10%-72-30%-48-70%-0-* 表示72小时前退票手续费为票面价的10%; 48小时到72小时，退票手续费为票面价的30%; 飞机起飞不足48小时; 退票手续费为票面价的70%; 飞机起飞后不予退票（输入*）
        :param refund_currency_all_unused: 全部未使用退票币种，只能录入币种三字码，默认值CNY
        :param refund_fee_type_all_unused: 全部未使用退票费用收取方式，按每个航段收还是全程收(0:全程, 1：每个航段，默认值：全程)
        :param refund_fee_part_unused: 部分未使用退票费用,格式同【全部未使用退票费用】，【部分未使用可否退票】为是时，此项为必填项
        :param refund_currency_part_unused: 部分未使用退票币种，可录入币种三字码，默认值CNY
        :param refund_fee_type_part_unused: 部分未使用退票费用收取方式，按每个航段收还是全程收(0:全程, 1：每个航段，默认值：全程)
        :param dep_change_fee: 【去程可否改期】为是时为必填项， 可输入格式如:  1) 200 表示改期手续费为200（货币单位在下一个格子里） 2）* 表示不允许改期 3) 200-0-400 表示起飞前改期手续费200；起飞后改期手续费400 4) 30-0-* 表示起飞前改期手续费30；起飞后不允许改期 5）200-72-300-48-1000-0-* 表示72小时前改期手续费200; 48小时到72小时，改期手续费300; 飞机起飞不足48小时; 改期手续费1000; 飞机起飞后不予改期（输入*）
        :param dep_change_currency: 去程改期币种，可录入币种三字码，默认值CNY
        :param dep_change_fee_type: 去程改期费用收取方式,按每个航段收还是全程收(0:全程, 1：每个航段，默认值：全程)
        :param noshow_time_restrict: NOSHOW时限,只能录入整数，【NOSHOW是否有限制】为是时，此项为必填项
        :param noshow_time_restrict_unit: NOSHOW时限单位(小时/天, 默认为小时)
        :param noshow_rule_type: NOSHOW规则，可录入多个，多个用逗号分隔。可录入不可退票、不可改期、不可退票,不可改期
        :param noshow_fee: NOSHOW金额，只能录入整数或百分比，【NOSHOW是否有限制】为是,【NOSHOW规则】不是不可退票,不可改期时，此项为必填项
        :param noshow_currency: NOSHOW币种,可录入币种三字码，默认值CNY
        :param farebasis: 运价基础，最大长度8
        :param fare_type_code: 运价类型，最大长度3
        :param tariff: 运价tariff，最大长度3
        :param rule_id: 运价规则id，最大长度4
        """
        return self._top_request(
            "taobao.alitrip.it.fare.addow",
            {
                "ticketingAirline": ticketing_airline,
                "originLand": origin_land,
                "destination": destination,
                "cabin": cabin,
                "validDate4Dep": valid_date4_dep,
                "saleDate": sale_date,
                "adultPassengerIdentity": adult_passenger_identity,
                "ticketPrice": ticket_price,
                "luggageRule": luggage_rule,
                "isCanAllRefund": is_can_all_refund,
                "isCanPartRefund": is_can_part_refund,
                "canDepChange": can_dep_change,
                "noshowRestrict": noshow_restrict,
                "outFileCode": out_file_code,
                "fileCode": file_code,
                "productType": product_type,
                "stockMode": stock_mode,
                "saleAirline": sale_airline,
                "addressOption": address_option,
                "tripType": trip_type,
                "transitLand": transit_land,
                "restrictFlightNo": restrict_flight_no,
                "excludeFlightNo": exclude_flight_no,
                "excludeDateRange4Dep": exclude_date_range4_dep,
                "tripDatePoint4Dep": trip_date_point4_dep,
                "tripExcludeDatePoint4Dep": trip_exclude_date_point4_dep,
                "flightDateRestrict4Dep": flight_date_restrict4_dep,
                "flightDatePoint4Dep": flight_date_point4_dep,
                "minTravelPerson": min_travel_person,
                "maxTravelPerson": max_travel_person,
                "gv2ChildRule": gv2_child_rule,
                "nationality": nationality,
                "excludeNationality": exclude_nationality,
                "passengerAge": passenger_age,
                "adultTax": adult_tax,
                "childPrice": child_price,
                "childTax": child_tax,
                "returnPoint": return_point,
                "adjustMoney": adjust_money,
                "earlyTicketingTimeLimit": early_ticketing_time_limit,
                "lateTicketingTimeLimit": late_ticketing_time_limit,
                "vipCode": vip_code,
                "fareSource": fare_source,
                "isCreatePnr": is_create_pnr,
                "bookingOffice": booking_office,
                "receipts": receipts,
                "isValidatPrice": is_validat_price,
                "isCanRefund4Dep": is_can_refund4_dep,
                "refundPrice4Dep": refund_price4_dep,
                "refundPartPrice4Dep": refund_part_price4_dep,
                "isCanReissue4Dep": is_can_reissue4_dep,
                "reissuePrice4Dep": reissue_price4_dep,
                "reissuePartPrice4Dep": reissue_part_price4_dep,
                "noShowTimeLimit4Dep": no_show_time_limit4_dep,
                "isNoShowCanRefund4Dep": is_no_show_can_refund4_dep,
                "isNoShowCanReissue4Dep": is_no_show_can_reissue4_dep,
                "noShowPenalty4Dep": no_show_penalty4_dep,
                "luggageRule4Dep": luggage_rule4_dep,
                "remark": remark,
                "workingHours": working_hours,
                "refundRule": refund_rule,
                "reissueRule": reissue_rule,
                "noshowRule": noshow_rule,
                "applyChannel": apply_channel,
                "commodityType": commodity_type,
                "codeSharingType": code_sharing_type,
                "extendAttributes": extend_attributes,
                "buyTicketNotice": buy_ticket_notice,
                "refundFeeAllUnused": refund_fee_all_unused,
                "refundCurrencyAllUnused": refund_currency_all_unused,
                "refundFeeTypeAllUnused": refund_fee_type_all_unused,
                "refundFeePartUnused": refund_fee_part_unused,
                "refundCurrencyPartUnused": refund_currency_part_unused,
                "refundFeeTypePartUnused": refund_fee_type_part_unused,
                "depChangeFee": dep_change_fee,
                "depChangeCurrency": dep_change_currency,
                "depChangeFeeType": dep_change_fee_type,
                "noshowTimeRestrict": noshow_time_restrict,
                "noshowTimeRestrictUnit": noshow_time_restrict_unit,
                "noshowRuleType": noshow_rule_type,
                "noshowFee": noshow_fee,
                "noshowCurrency": noshow_currency,
                "farebasis": farebasis,
                "fareTypeCode": fare_type_code,
                "tariff": tariff,
                "ruleId": rule_id
            }
        )

    def taobao_alitrip_it_fare_querytask(
            self,
            task_id,
            extend_attributes=''
    ):
        """
        【国际机票自有政策】批量操作结果查询
        批量操作同步返回任务id，后台生成异步任务，通过此接口查询批量操作的执行结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25495

        :param task_id: 任务id
        :param extend_attributes: json格式的字符串，扩展属性，预留
        """
        return self._top_request(
            "taobao.alitrip.it.fare.querytask",
            {
                "taskId": task_id,
                "extendAttributes": extend_attributes
            }
        )

    def taobao_alitrip_it_fare_delete(
            self,
            extend_attributes='',
            fare_id='',
            out_id=''
    ):
        """
        【国际机票自有政策】单条删除
        自有政策删除接口，可以根据fareId或outId删除，根据outId删除时，如果outId不唯一，返回失败
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25496

        :param extend_attributes: json格式的字符串，扩展属性，预留
        :param fare_id: 运价id，单条新增成功时返回运价id，fareId和outId必填一个，fareId优先
        :param out_id: 外部id，为新增时请求参数中的外部政策id
        """
        return self._top_request(
            "taobao.alitrip.it.fare.delete",
            {
                "extendAttributes": extend_attributes,
                "fareId": fare_id,
                "outId": out_id
            },
            result_processor=lambda x: x["extend_attributes"]
        )

    def taobao_alitrip_it_fare_addrt(
            self,
            ticketing_airline,
            origin_land,
            destination,
            cabin,
            valid_date4_dep,
            valid_date4_ret,
            sale_date,
            adult_passenger_identity,
            ticket_price,
            luggage_rule,
            is_can_all_refund,
            is_can_part_refund,
            can_dep_change,
            can_ret_change,
            noshow_restrict,
            out_file_code='',
            file_code='',
            product_type='',
            stock_mode='',
            is_rt='',
            rt_type='',
            combination_filecode='',
            is_allow_oj='',
            oj_type='',
            combination_oj_filecode='',
            sale_airline='',
            address_option='',
            trip_type='',
            transit_land='',
            restrict_flight_no='',
            exclude_flight_no='',
            exclude_date_range4_dep='',
            trip_date_point4_dep='',
            trip_exclude_date_point4_dep='',
            flight_date_restrict4_dep='',
            flight_date_point4_dep='',
            exclude_date_range4_ret='',
            trip_date_point4_ret='',
            trip_exclude_date_point4_ret='',
            flight_date_restrict4_ret='',
            flight_date_point4_ret='',
            min_stay='',
            max_stay='',
            min_travel_person='',
            max_travel_person='',
            gv2_child_rule='',
            nationality='',
            exclude_nationality='',
            passenger_age='',
            adult_tax='',
            child_price='',
            child_tax='',
            return_point='',
            adjust_money='',
            rt_commission_formula='',
            early_ticketing_time_limit='',
            late_ticketing_time_limit='',
            vip_code='',
            fare_source='',
            is_create_pnr='',
            booking_office='',
            receipts='',
            is_validat_price='',
            is_can_refund4_dep='',
            refund_price4_dep='',
            refund_part_price4_dep='',
            is_can_refund4_ret='',
            refund_price4_ret='',
            refund_part_price4_ret='',
            is_can_reissue4_dep='',
            reissue_price4_dep='',
            reissue_part_price4_dep='',
            is_can_reissue4_ret='',
            reissue_price4_ret='',
            reissue_part_price4_ret='',
            no_show_time_limit4_dep='',
            is_no_show_can_refund4_dep='',
            is_no_show_can_reissue4_dep='',
            no_show_penalty4_dep='',
            no_show_time_limit4_ret='',
            is_no_show_can_refund4_ret='',
            is_no_show_can_reissue4_ret='',
            no_show_penalty4_ret='',
            luggage_rule4_dep='',
            luggage_rule4_ret='',
            remark='',
            working_hours='',
            refund_rule='',
            reissue_rule='',
            noshow_rule='',
            apply_channel='',
            commodity_type='',
            code_sharing_type='',
            extend_attributes='',
            buy_ticket_notice='',
            refund_fee_all_unused='',
            refund_currency_all_unused='CNY',
            refund_fee_type_all_unused='全程',
            refund_fee_part_unused='',
            refund_currency_part_unused='CNY',
            refund_fee_type_part_unused='全程',
            dep_change_fee='',
            dep_change_currency='CNY',
            dep_change_fee_type='全程',
            ret_change_fee='',
            ret_change_currency='CNY',
            ret_change_fee_type='全程',
            noshow_time_restrict='',
            noshow_time_restrict_unit='小时',
            noshow_rule_type='',
            noshow_fee='',
            noshow_currency='CNY',
            farebasis='',
            fare_type_code='',
            tariff='',
            rule_id='',
            fare_direct_destrict='0'
    ):
        """
        【国际机票自有政策】单条往返添加
        自有政策往返添加接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25497

        :param ticketing_airline: 出票航司,1.不可为空 2.航空公司二字码 3.只能输入一个
        :param origin_land: 始发地,多个用“,”隔开 1.不得为空 2.可以填写：机场三字码”或“城市码” 3.最多允许100个机场三字码/城市码
        :param destination: 目的地，多个用“,”隔开 1.不得为空 2.可以填写：机场三字码”或“城市码” 3.最多允许100个机场三字码/城市码
        :param cabin: 舱位， 用','表示航段的分割。 1、舱位代码。每段只允许录入一个舱位代码，若全程舱位一致则可以只录入一个
        :param valid_date4_dep: 去程旅行有效期，支持多段组合，用“,”隔开， 1.不得为空 2例：2014-04-01~2014-06-30，2014-09-01 ~2014-09-30， 3日期格式为 YYYY-MM-DD或YYYY/MM/DD，例：2014-04-01或2014/04/01
        :param valid_date4_ret: 回程旅行有效期，支持多段组合，用“,”隔开， 1.不得为空 2例：2014-04-01~2014-6-30，2014-09-01 ~2014-09-30， 3日期格式为 YYYY-MM-DD或YYYY/MM/DD，例：2014-04-01或2014/04/01
        :param sale_date: 销售日期，1、不得为空 2.输入格式为：2014-04-01~2014-06-30 3.不支持多段组合， 4.3日期格式为 YYYY-MM-DD或YYYY/MM/DD，例：2014-04-01或20104/04/01
        :param adult_passenger_identity: 成人旅客身份，1.不得为空 2.普通/学生  3.当输入学生时，儿童价格项输入无效 4.当为小团产品时，此适用身份类别必须为 普通。5、后期支持劳工、移民、海员、老人、青年
        :param ticket_price: 销售票面价,1.不得为空 2.价格区间为【0-999999】 3、销售票面价为10的整数倍(向下取整，如录入3002，则实际录入数值为3000)
        :param luggage_rule: 行李额规定,1、不可为空2、可填写：1PC。逾重行李费用为每公斤100元3、行李额规定最多为300个字符
        :param is_can_all_refund: 必填项，全部未使用可否退票，可输入:是，否
        :param is_can_part_refund: 必填项，部分未使用可否退票，可输入：是，否
        :param can_dep_change: 必填项，去程可否改期，可输入是或否
        :param can_ret_change: 必填项，回程可否改期，可输入是或否
        :param noshow_restrict: 必填项，NOSHOW是否有限制，可输入是或否
        :param out_file_code: 外部政策ID,1、自行输入的ID，建议为唯一id，有些操作可以使用此id 最多50个字符
        :param file_code: 文件编号
        :param product_type: （后期字段，预留）,产品类型,1.不可为空 2.填写为:包机切位、申请、见舱预订；
        :param stock_mode: （后期字段，预留）,库存模式,1.不可为空 2.填写为见舱或定额；默认为见舱
        :param is_rt: 是否1/2RT，1、请填写 是或者否；默认为否
        :param rt_type: （后期字段，预留）,1/2RT类型，当需要多填入多个时，请以','分隔 1、可填写 、旅行有效期、排除旅行有效期、班期 ；表明1/2RT 混舱计算时，取严还是各取各 2、默认值是 全部各取各
        :param combination_filecode: 可组文件编号， 当需要多填入多个时，请以','分隔 1、标记可组文件的编号政策信息，可填写空白； 2、如果是否1/2RT 字段为是，则此字段为必输项
        :param is_allow_oj: （后期字段，预留）,是否允许缺口，1、为是或否；默认为否
        :param oj_type: （后期字段，预留）,缺口类型，1、可填单缺、双缺、始发地缺、目的地缺、或为空；默认为空（当允许缺口组合时，此项为必输项）
        :param combination_oj_filecode: （后期字段，预留）,可组缺口文件编号,当需要多填入多个时，请以','分隔 1、标记政策信息，可填写空白； 2、如果是否缺口 字段为是，则此字段为必输项
        :param sale_airline: 销售航司，不同航段之间用 “,”隔开。  1、销售航司二字码； 2、如为直达；请录入一个航司二字码；如为中转，录入格式为 第一程航司，第二程航司；或者航司；若全程都一样，则录入一个航司二字代码即可 3、如果不录入，则航司默认为出票航司；
        :param address_option: 城市/机场选项，默认为城市1、可以填写：“机场',“城市”2、定义始发地/目的地/中转点，输入为机场，还是城市。3、如：此项输入机场，则始发地、目的地必须输入机场三字码
        :param trip_type: 航程种类，1、默认为直达；有直达和中转两个选项；2、不填写 默认为 直达
        :param transit_land: 中转地，多个用“，”隔开 1.不得为空 2.可以填写：机场三字码,城市码 3.最多允许100个机场三字码/城市码  4、当航程类型书写为 中转时，此处为必填
        :param restrict_flight_no: 航班号限制,同一航段之间用，隔开表示或的关系；不同航段之间用/隔开。                       1 CA001-999,CA3000-3999  表示CA001至999以及3000至3999之间航班号的航班 2 MU  表示所有MU开头的航班  3 CA(LH\AZ) 表示CA开头的实际承运人为LH或AZ的航班 4 CA(*)   表示CA代码共享航班/CA开头的实际承运人为其他航空公司的航班 5 CA(CA)   表示CA自营航班/CA实际承运航班； 6 CA(OZ)001-999 表示CA开头航班号为001-999之间且实际承运人为OZ的航班； 7 为空表示无限制
        :param exclude_flight_no: 排除航班号限制，同一航段之间用，隔开表示或的关系；不同航段之间用/隔开。                       1 CA001-999,CA3000-3999  表示CA001至999以及3000至3999之间航班号的航班 2 MU  表示所有MU开头的自营航班  3 CA(LH\AZ) 表示CA开头的实际承运人为LH或AZ的航班 4 CA(*)   表示CA代码共享航班/CA开头的实际承运人为其他航空公司的航班 5 CA(CA)   表示CA自营航班/CA实际承运航班； 6 CA(OZ)001-999 表示CA开头航班号为001-999之间且实际承运人为OZ的航班； 7 为空表示无限制；8比如两段，第一段无限制，第二段有限制 /CA123
        :param exclude_date_range4_dep: 去程旅行排除时间段，支持多段组合，用“,”隔开隔开， 1.格式，例：2014-04-01~2014-12-31；或例：2014-04-01~2014-06-30,2014-09-01~2014-09-30， 3日期格式为 YYYY-MM-DD,YYYY/MM/DD 4、旅行排除日期最多只能输入200个字符
        :param trip_date_point4_dep: 去程旅行日期作用点，始发航段/第一国际段/主航段/全部；默认空为 第一国际段
        :param trip_exclude_date_point4_dep: 去程旅行排除日期作用点，始发航段/第一国际段/主航段/全部；默认空为 第一国际段
        :param flight_date_restrict4_dep: 去程班期限制，1.12表示周一周二                                                                                              2.12:00-14:00表示每天的12点到14点                                                                                  3. 12:00FRI-12:00SAT 表示周五的中午12点至周六的中午12点
        :param flight_date_point4_dep: 去程班期作用点，始发航段/第一国际段/主航段/全部；默认空为 第一国际段
        :param exclude_date_range4_ret: 回程旅行排除时间段，支持多段组合，用“,”隔开隔开， 1.格式，例：2014-04-01~2014-12-31；或例：2014-04-01~2014-06-30,2014-09-01~2014-09-30， 3日期格式为 YYYY-MM-DD,YYYY/MM/DD 4、旅行排除日期最多只能输入200个字符
        :param trip_date_point4_ret: 回程旅行日期作用点，始发航段/第一国际段/主航段/全部；默认空为 第一国际段
        :param trip_exclude_date_point4_ret: 回程旅行排除日期作用点，始发航段/第一国际段/主航段/全部；默认空为 第一国际段
        :param flight_date_restrict4_ret: 回程班期限制，1.12表示周一周二                                                                                              2.12:00-14:00表示每天的12点到14点                                                                                  3. 12:00FRI-12:00SAT 表示周五的中午12点至周六的中午12点
        :param flight_date_point4_ret: 回程班期作用点，始发航段/第一国际段/主航段/全部；默认空为 第一国际段
        :param min_stay: 最短停留期,1、 默认为空，代表无限制； 2、 格式为：数字+字符/字符 3D表示3天  ; 4M表示4个月 ; SAT表示周六; 3D/SAT表示3天或者周六  3、 12M 表示一年
        :param max_stay: 最长停留期,1、 默认为空，代表无限制； 2、 格式为：数字+字符/字符 3D表示3天  ; 4M表示4个月 ; SAT表示周六; 3D/SAT表示3天或者周六  3、 12M 表示一年
        :param min_travel_person: 最小出行人数,数字1-9
        :param max_travel_person: 最大出行人数,数字1-9
        :param gv2_child_rule: （后期字段，预留）,小团儿童计数规则，可选值：1个儿童计1个成人、2个儿童计1个成人、儿童不计
        :param nationality: 国籍，可录入多个用','隔开表示或的关系 1、可录入国家二字代码，为空表示不限制，最多录20个 *默认为空，不输入为不限制
        :param exclude_nationality: 除外国籍，可录入多个用','隔开表示或的关系 1、可录入国家二字代码，为空表示不限制，最多录20个 *默认为空，不输入为不限制
        :param passenger_age: 乘客年龄,1、可录入范围如21-25表示21周岁至25周岁,1-表示1岁以上，-99表示99岁以下
        :param adult_tax: （后期字段，预留）,成人税费，1、整数金额（包机切位产品适用）
        :param child_price: 儿童价，1、可不输入，空表示不适用儿童价 2、可输入大于0的正整数及百分比，输入百分比时，成人价格必须录入 例如：2000或70%。 3. 百分比计算的数值，个位向上取整 当'乘客类型'输入非“普通”（成人）时，此项输入无效。
        :param child_tax: （后期字段，预留）,儿童税费，1、整数金额（包机切位产品适用）
        :param return_point: 返点,1.不得为空 2.只允许填写数字，支持到小数点后两位；不用填写% 3.返点需小于100 成人价=销售票面价*（1-返点）+留钱
        :param adjust_money: 留钱，1.0或正负数字2.-20表示返20元；20代表留20元
        :param rt_commission_formula: 1/2RT佣金计算方式,1、各取各，取严； 默认为 取严
        :param early_ticketing_time_limit: 提前出票时限，默认为空，代表无限制； 输入为小于等于365的正整数。 小于或等于最晚出票时限。 单位为天
        :param late_ticketing_time_limit: 最晚出票时限,默认为空，代表无限制； 输入为小于等于365的正整数。 大于或等于提前出票时限。 单位为天
        :param vip_code: 大客户编码，文本框
        :param fare_source: （后期字段，预留）,运价发布渠道,1、可填写 PC、无线、都适用 2、默认为都适用
        :param is_create_pnr: （后期字段，预留）,是否创建PNR，1、选项 可填写是，否.默认为是
        :param booking_office: 预定OFFICE，空表示默认优先级最高OFFICE，可输入OFFICE，校验必须为配置中存在的OFFICE
        :param receipts: 必填项 赋值范围 境外电子凭证,旅行发票,差额行程单发票,等额行程单
        :param is_validat_price: 是否校验票面价,1、可填写 是或者否；默认为否
        :param is_can_refund4_dep: （已废除字段）,去程全部未使用可否退票，录入是或否
        :param refund_price4_dep: （已废除字段）,去程全部未使用退票费用,可输入格式如：200-72-300-48-1000-0-*，表示72小时前退票手续费200；48小时到72小时，退票手续费300；飞机起飞不足48小时退票手续费1000；飞机起飞后不予退票（输入*）；
        :param refund_part_price4_dep: （已废除字段）,去程部分未使用退票费用,可输入空，*或正整数，其中空表示按照航空公司规定执行，*表示不支持部分退票
        :param is_can_refund4_ret: （已废除字段）,回程全部未使用可否退票，录入是或否
        :param refund_price4_ret: （已废除字段）,回程全部未使用退票费用,可输入格式如：200-72-300-48-1000-0-*，表示72小时前退票手续费200；48小时到72小时，退票手续费300；飞机起飞不足48小时退票手续费1000；飞机起飞后不予退票（输入*）；
        :param refund_part_price4_ret: （已废除字段）,回程部分未使用退票费用,可输入空，*或正整数，其中空表示按照航空公司规定执行，*表示不支持部分退票
        :param is_can_reissue4_dep: （已废除字段）,去程全部未使用可否改期，录入是或否
        :param reissue_price4_dep: （已废除字段）,去程全部未使用改期费用，可输入格式如：200-72-300-48-1000-0-*，表示72小时前改期手续费200；48小时到72小时，改期手续费300；飞机起飞不足48小时改期手续费1000；飞机起飞后不予改期（输入*）；
        :param reissue_part_price4_dep: （已废除字段）,去程部分未使用改期费用,可输入空，*或正整数，其中空表示按照航空公司规定执行，*表示不支持部分改期
        :param is_can_reissue4_ret: （已废除字段）,回程全部未使用可否改期，录入是或否
        :param reissue_price4_ret: （已废除字段）,回程全部未使用改期费用，可输入格式如：200-72-300-48-1000-0-*，表示72小时前改期手续费200；48小时到72小时，改期手续费300；飞机起飞不足48小时改期手续费1000；飞机起飞后不予改期（输入*）；
        :param reissue_part_price4_ret: （已废除字段）,回程部分未使用改期费用，可输入空，*或正整数，其中空表示按照航空公司规定执行，*表示不支持部分改期
        :param no_show_time_limit4_dep: （已废除字段）,去程NOSHOW规定时限，输入正整数
        :param is_no_show_can_refund4_dep: （已废除字段）,去程NOSHOW能否退票，输入是或否；默认为否
        :param is_no_show_can_reissue4_dep: （已废除字段）,去程NOSHOW能否改期，输入是或否；默认为否
        :param no_show_penalty4_dep: （已废除字段）,去程NOSHOW罚金，可为空，若输入则为正整数；其中空表示按航空公司规定执行
        :param no_show_time_limit4_ret: （已废除字段）,回程NOSHOW规定时限，输入正整数
        :param is_no_show_can_refund4_ret: （已废除字段）,回程NOSHOW能否退票，输入是或否；默认为否
        :param is_no_show_can_reissue4_ret: （已废除字段）,回程NOSHOW能否改期，输入是或否；默认为否
        :param no_show_penalty4_ret: （已废除字段）,回程NOSHOW罚金，可为空，若输入则为正整数；其中空表示按航空公司规定执行
        :param luggage_rule4_dep: （后期字段，预留）,去程行李额规定,可输入1-23,1-23 中间用','隔开，表示第一程和第二程（中转）支持行李额为1PC，23KG。若某段为空表示该段按照航空公司规定执行，逗号不可缺少；若不提供免费行李额直接输入空
        :param luggage_rule4_ret: （后期字段，预留）,回程行李额规定,可输入1-23,1-23 中间用','隔开，表示第一程和第二程（中转）支持行李额为1PC，23KG。若某段为空表示该段按照航空公司规定执行，逗号不可缺少；若不提供免费行李额直接输入空
        :param remark: 备注,出票备注文本
        :param working_hours: 工作时间,18:00FRI表示周一到周五的每天早上9点到下午6点                                                     最多录入三个时间段用，隔开表示或的关系                                                                               可以为空，表示不限制(运价上的工作时间优先级高于设置时间界面上的时间)
        :param refund_rule: （已废除字段）退票规定,1、不可为空 2、可填写：收取20%退票费用，或者是收取500元退票费等。 3、退票规定最多为300个字符
        :param reissue_rule: （已废除字段）改期规定,1、不可为空 2、可填写：收取20%改期费用，或者是收取500元改期费等。 3、改期规定最多为300个字符
        :param noshow_rule: （已废除字段）误机罚金说明，1、不可为空 2、可填写：起飞前不得退票，不得改期 3、误机罚金说明最多为300个字符
        :param apply_channel: 运价渠道 可选listing宝贝  默认listing
        :param commodity_type: 商品类型，可选值：普通、金牌，默认普通，非金牌卖家不得选择金牌
        :param code_sharing_type: 不录入表示不限制；选项为：仅限同集团代码共享适用；代码共享适用；不允许代码共享；不限制 默认不限制
        :param extend_attributes: json格式的字符串，扩展属性，预留
        :param buy_ticket_notice: 购票须知，非必输长度小于300字符只在退票规定不为空时才会生效
        :param refund_fee_all_unused: 【全部未使用可否退票】为是时，此项为必填项。 可输入格式如:  1) 200 表示退票手续费为200（货币单位在下一个格子里） 2) 20% 表示退票手续费为票面价的20% 3）* 表示不允许退票 4) 200-0-400 表示起飞前退票手续费200；起飞后退票手续费400 5) 30%-0-* 表示起飞前退票手续费为票面价的30%；起飞后不允许退票 6）200-72-300-48-1000-0-* 表示72小时前退票手续费200; 48小时到72小时，退票手续费300; 飞机起飞不足48小时; 退票手续费1000; 飞机起飞后不予退票（输入*） 7) 10%-72-30%-48-70%-0-* 表示72小时前退票手续费为票面价的10%; 48小时到72小时，退票手续费为票面价的30%; 飞机起飞不足48小时; 退票手续费为票面价的70%; 飞机起飞后不予退票（输入*）
        :param refund_currency_all_unused: 全部未使用退票币种，只能录入币种三字码，默认值CNY
        :param refund_fee_type_all_unused: 全部未使用退票费用收取方式，按每个航段收还是全程收(0:全程, 1：每个航段，默认值：全程)
        :param refund_fee_part_unused: 部分未使用退票费用,格式同【全部未使用退票费用】，【部分未使用可否退票】为是时，此项为必填项
        :param refund_currency_part_unused: 部分未使用退票币种，可录入币种三字码，默认值CNY
        :param refund_fee_type_part_unused: 部分未使用退票费用收取方式，按每个航段收还是全程收(0:全程, 1：每个航段，默认值：全程)
        :param dep_change_fee: 【去程可否改期】为是时为必填项， 可输入格式如:  1) 200 表示改期手续费为200（货币单位在下一个格子里） 2）* 表示不允许改期 3) 200-0-400 表示起飞前改期手续费200；起飞后改期手续费400 4) 30-0-* 表示起飞前改期手续费30；起飞后不允许改期 5）200-72-300-48-1000-0-* 表示72小时前改期手续费200; 48小时到72小时，改期手续费300; 飞机起飞不足48小时; 改期手续费1000; 飞机起飞后不予改期（输入*）
        :param dep_change_currency: 去程改期币种，可录入币种三字码，默认值CNY
        :param dep_change_fee_type: 去程改期费用收取方式,按每个航段收还是全程收(0:全程, 1：每个航段，默认值：全程)
        :param ret_change_fee: 回程改期费用，格式同【去程改期费用】，【回程可否改期】为是时为必填
        :param ret_change_currency: 回程改期币种，可输入币种三字码，默认值CN
        :param ret_change_fee_type: 回程改期费用收取方式，按每个航段收还是全程收(0:全程, 1：每个航段，默认值：全程)
        :param noshow_time_restrict: NOSHOW时限,只能录入整数，【NOSHOW是否有限制】为是时，此项为必填项
        :param noshow_time_restrict_unit: NOSHOW时限单位(小时/天, 默认为小时)
        :param noshow_rule_type: NOSHOW规则，可录入多个，多个用逗号分隔。可录入不可退票、不可改期、不可改期,不可改期
        :param noshow_fee: NOSHOW金额，只能录入整数或百分比，【NOSHOW是否有限制】为是,【NOSHOW规则】不是不可退票,不可改期时，此项为必填项
        :param noshow_currency: NOSHOW币种,可录入币种三字码，默认值CNY
        :param farebasis: 运价基础，最大长度8
        :param fare_type_code: 运价类型，最大长度3
        :param tariff: 运价tariff，最大长度3
        :param rule_id: 运价规则id，最大长度4
        :param fare_direct_destrict: 运价组合适用方向,0(或者字段不存在):不限制/1:仅作用在去程/2:仅作用在回程
        """
        return self._top_request(
            "taobao.alitrip.it.fare.addrt",
            {
                "ticketingAirline": ticketing_airline,
                "originLand": origin_land,
                "destination": destination,
                "cabin": cabin,
                "validDate4Dep": valid_date4_dep,
                "validDate4Ret": valid_date4_ret,
                "saleDate": sale_date,
                "adultPassengerIdentity": adult_passenger_identity,
                "ticketPrice": ticket_price,
                "luggageRule": luggage_rule,
                "isCanAllRefund": is_can_all_refund,
                "isCanPartRefund": is_can_part_refund,
                "canDepChange": can_dep_change,
                "canRetChange": can_ret_change,
                "noshowRestrict": noshow_restrict,
                "outFileCode": out_file_code,
                "fileCode": file_code,
                "productType": product_type,
                "stockMode": stock_mode,
                "isRT": is_rt,
                "rtType": rt_type,
                "combinationFilecode": combination_filecode,
                "isAllowOj": is_allow_oj,
                "ojType": oj_type,
                "combinationOjFilecode": combination_oj_filecode,
                "saleAirline": sale_airline,
                "addressOption": address_option,
                "tripType": trip_type,
                "transitLand": transit_land,
                "restrictFlightNo": restrict_flight_no,
                "excludeFlightNo": exclude_flight_no,
                "excludeDateRange4Dep": exclude_date_range4_dep,
                "tripDatePoint4Dep": trip_date_point4_dep,
                "tripExcludeDatePoint4Dep": trip_exclude_date_point4_dep,
                "flightDateRestrict4Dep": flight_date_restrict4_dep,
                "flightDatePoint4Dep": flight_date_point4_dep,
                "excludeDateRange4Ret": exclude_date_range4_ret,
                "tripDatePoint4Ret": trip_date_point4_ret,
                "tripExcludeDatePoint4Ret": trip_exclude_date_point4_ret,
                "flightDateRestrict4Ret": flight_date_restrict4_ret,
                "flightDatePoint4Ret": flight_date_point4_ret,
                "minStay": min_stay,
                "maxStay": max_stay,
                "minTravelPerson": min_travel_person,
                "maxTravelPerson": max_travel_person,
                "gv2ChildRule": gv2_child_rule,
                "nationality": nationality,
                "excludeNationality": exclude_nationality,
                "passengerAge": passenger_age,
                "adultTax": adult_tax,
                "childPrice": child_price,
                "childTax": child_tax,
                "returnPoint": return_point,
                "adjustMoney": adjust_money,
                "rtCommissionFormula": rt_commission_formula,
                "earlyTicketingTimeLimit": early_ticketing_time_limit,
                "lateTicketingTimeLimit": late_ticketing_time_limit,
                "vipCode": vip_code,
                "fareSource": fare_source,
                "isCreatePnr": is_create_pnr,
                "bookingOffice": booking_office,
                "receipts": receipts,
                "isValidatPrice": is_validat_price,
                "isCanRefund4Dep": is_can_refund4_dep,
                "refundPrice4Dep": refund_price4_dep,
                "refundPartPrice4Dep": refund_part_price4_dep,
                "isCanRefund4Ret": is_can_refund4_ret,
                "refundPrice4Ret": refund_price4_ret,
                "refundPartPrice4Ret": refund_part_price4_ret,
                "isCanReissue4Dep": is_can_reissue4_dep,
                "reissuePrice4Dep": reissue_price4_dep,
                "reissuePartPrice4Dep": reissue_part_price4_dep,
                "isCanReissue4Ret": is_can_reissue4_ret,
                "reissuePrice4Ret": reissue_price4_ret,
                "reissuePartPrice4Ret": reissue_part_price4_ret,
                "noShowTimeLimit4Dep": no_show_time_limit4_dep,
                "isNoShowCanRefund4Dep": is_no_show_can_refund4_dep,
                "isNoShowCanReissue4Dep": is_no_show_can_reissue4_dep,
                "noShowPenalty4Dep": no_show_penalty4_dep,
                "noShowTimeLimit4Ret": no_show_time_limit4_ret,
                "isNoShowCanRefund4Ret": is_no_show_can_refund4_ret,
                "isNoShowCanReissue4Ret": is_no_show_can_reissue4_ret,
                "noShowPenalty4Ret": no_show_penalty4_ret,
                "luggageRule4Dep": luggage_rule4_dep,
                "luggageRule4Ret": luggage_rule4_ret,
                "remark": remark,
                "workingHours": working_hours,
                "refundRule": refund_rule,
                "reissueRule": reissue_rule,
                "noshowRule": noshow_rule,
                "applyChannel": apply_channel,
                "commodityType": commodity_type,
                "codeSharingType": code_sharing_type,
                "extendAttributes": extend_attributes,
                "buyTicketNotice": buy_ticket_notice,
                "refundFeeAllUnused": refund_fee_all_unused,
                "refundCurrencyAllUnused": refund_currency_all_unused,
                "refundFeeTypeAllUnused": refund_fee_type_all_unused,
                "refundFeePartUnused": refund_fee_part_unused,
                "refundCurrencyPartUnused": refund_currency_part_unused,
                "refundFeeTypePartUnused": refund_fee_type_part_unused,
                "depChangeFee": dep_change_fee,
                "depChangeCurrency": dep_change_currency,
                "depChangeFeeType": dep_change_fee_type,
                "retChangeFee": ret_change_fee,
                "retChangeCurrency": ret_change_currency,
                "retChangeFeeType": ret_change_fee_type,
                "noshowTimeRestrict": noshow_time_restrict,
                "noshowTimeRestrictUnit": noshow_time_restrict_unit,
                "noshowRuleType": noshow_rule_type,
                "noshowFee": noshow_fee,
                "noshowCurrency": noshow_currency,
                "farebasis": farebasis,
                "fareTypeCode": fare_type_code,
                "tariff": tariff,
                "ruleId": rule_id,
                "fareDirectDestrict": fare_direct_destrict
            }
        )

    def taobao_alitrip_it_fare_batchdelete(
            self,
            airline='',
            arr_city='',
            cabin='',
            can_rt='',
            dep_city='',
            end_modify_date='',
            file_code='',
            operate_source='',
            out_id='',
            start_modify_date='',
            start_restrict_go_date='',
            end_restrict_go_date='',
            fare_type='',
            status_list='',
            extend_attributes=''
    ):
        """
        【国际机票自有政策】批量删除
        批量删除自有政策，单次删除最大5万，大于5万时候提示失败，需要缩小删除条件。此接口同步返回任务id，异步执行操作。每个接入方最多同时只能有10个处理中的任务，超过后直接返回失败。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25498

        :param airline: 航空公司
        :param arr_city: 到达城市 可传多个 AND关系
        :param cabin: 舱位 可传多个 或者的关系
        :param can_rt: 是否能够混舱
        :param dep_city: 到达城市 可传多个 AND关系
        :param end_modify_date: 最晚修改时间
        :param file_code: 文件编号
        :param operate_source: 维护方式，可选值（UI：后台界面录入；EXCEL：后台excel批量导入；API：top接口添加）
        :param out_id: 外部政策id
        :param start_modify_date: 最早修改时间
        :param start_restrict_go_date: 去程适用开始日期
        :param end_restrict_go_date: 去程适用结束日期
        :param fare_type: 运价类型，1单程 2往返
        :param status_list: 0：未发布 1：已发布 2：已过期。不传的话，默认只能删除未发布和已过期的数据
        :param extend_attributes: json格式的字符串，扩展属性，预留
        """
        return self._top_request(
            "taobao.alitrip.it.fare.batchdelete",
            {
                "airline": airline,
                "arrCity": arr_city,
                "cabin": cabin,
                "canRt": can_rt,
                "depCity": dep_city,
                "endModifyDate": end_modify_date,
                "fileCode": file_code,
                "operateSource": operate_source,
                "outId": out_id,
                "startModifyDate": start_modify_date,
                "startRestrictGoDate": start_restrict_go_date,
                "endRestrictGoDate": end_restrict_go_date,
                "fareType": fare_type,
                "statusList": status_list,
                "extendAttributes": extend_attributes
            }
        )

    def taobao_alitrip_it_fare_batchadd(
            self,
            add_type,
            bytes,
            data_type,
            extend_attributes=''
    ):
        """
        【国际机票自有政策】批量添加
        支持自有政策和销售规则批量添加，支持携程的数据格式。淘宝格式为list [object] to json string，object的属性和单条接口一致。每个接入方最多同时只能有1个处理中的导入任务，超过后直接返回失败。文件一定要zip压缩，压缩后大小不超过5M，编码格式utf-8
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25499

        :param add_type: 新增类型，1 自有政策单程 2 自有政策往返 3 销售规则
        :param bytes: 文本zip压缩后的数据字节流
        :param data_type: 数据格式类型，1 淘宝 2 携程
        :param extend_attributes: json格式的字符串，扩展属性，预留
        """
        return self._top_request(
            "taobao.alitrip.it.fare.batchadd",
            {
                "addType": add_type,
                "bytes": bytes,
                "dataType": data_type,
                "extendAttributes": extend_attributes
            }
        )

    def taobao_alitrip_it_fare_update(
            self,
            fare_json,
            fare_type,
            extend_attributes='',
            fare_id='',
            out_id=''
    ):
        """
        【国际机票自有政策】单条修改
        自有政策修改接口，可以根据fareId或outId修改，outId不唯一时，不能用outId修改。当外部政策id、出发城市、到达城市、出票航司任一有变化，或往返时是否允许混舱、文件编号、可混文件编号任一有变化，将删除老数据，产生一条新政策。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25500

        :param fare_json: 自有政策json序列化字符串，具体属性视fareType的类型，和addow或addrt接口的请求参数一致，如：{'ticketingAirline':'CA','saleAirline':'CA','addressOption':'城市','tripType':'直达','originLand':'SHA,BJS','destination':'HKG,SHA','cabin':'N','restrictFlightNo':'','excludeFlightNo':'','validDate4Dep':'2015-05-30~2015-11-30','flightDateRestrict4Dep':'12','saleDate':'2015-05-30~2015-11-30','adultPassengerIdentity':'普通','ticketPrice':2000,'childPrice':'1980','returnPoint':1.0,'adjustMoney':0,'refundRule':'收取80000元退票费','reissueRule':'收取20%改期费','noshowRule':'起飞前不得退票，不得改期','luggageRule':'逾重行李费用为每公斤100元'}
        :param fare_type: 运价类型，1单程 2往返
        :param extend_attributes: json格式的字符串，扩展属性，预留
        :param fare_id: 运价id，单条新增成功时返回运价id，fareId和outId必填一个，fareId优先
        :param out_id: 外部id，为新增时请求参数中的外部政策id
        """
        return self._top_request(
            "taobao.alitrip.it.fare.update",
            {
                "fareJson": fare_json,
                "fareType": fare_type,
                "extendAttributes": extend_attributes,
                "fareId": fare_id,
                "outId": out_id
            }
        )

    def taobao_alitrip_it_policy_delete(
            self,
            extend_attributes='',
            out_id='',
            taobao_id=''
    ):
        """
        【国际机票销售规则】单条删除
        销售规则删除接口，可以根据taobaoId或outId删除，根据outId删除时，如果outId不唯一，返回失败
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25769

        :param extend_attributes: 扩展字段
        :param out_id: 接入方产品id
        :param taobao_id: 淘宝政策id
        """
        return self._top_request(
            "taobao.alitrip.it.policy.delete",
            {
                "extend_attributes": extend_attributes,
                "out_id": out_id,
                "taobao_id": taobao_id
            },
            result_processor=lambda x: x["extend_attributes"]
        )

    def taobao_alitrip_it_policy_get(
            self,
            extend_attributes='',
            out_id='',
            taobao_id=''
    ):
        """
        【国际机票销售规则】单条查询
        通过此接口可以查询单条销售规则的详情，可以根据taobaoId或outId查询，用户outId查询时，如果outId不唯一，只返回最新添加的一条数据。taobaoId为新增成功时候返回的唯一id，outId为新增时的policy_id（产品编号）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25770

        :param extend_attributes: 预留扩展字段
        :param out_id: 接入方产品编号
        :param taobao_id: 淘宝政策id
        """
        return self._top_request(
            "taobao.alitrip.it.policy.get",
            {
                "extend_attributes": extend_attributes,
                "out_id": out_id,
                "taobao_id": taobao_id
            }
        )

    def taobao_alitrip_it_policy_batchdelete(
            self,
            airline='',
            arr_city='',
            cabin='',
            dep_city='',
            policy_id='',
            status_list=''
    ):
        """
        【国际机票销售规则】批量删除
        批量删除销售规则，单次删除最大5万，大于5万时候提示失败，需要缩小删除条件。此接口同步返回任务id，异步执行操作。每个接入方最多同时只能有10个处理中的任务，超过后直接返回失败。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25771

        :param airline: 航司二字码，完整匹配
        :param arr_city: 到达，，完整匹配
        :param cabin: 舱位，，完整匹配
        :param dep_city: 出发，，完整匹配
        :param policy_id: 产品id，，完整匹配
        :param status_list: 0：未发布 1：已发布 2：已过期。不传的话，默认只能删除未发布和已过期的数据
        """
        return self._top_request(
            "taobao.alitrip.it.policy.batchdelete",
            {
                "airline": airline,
                "arr_city": arr_city,
                "cabin": cabin,
                "dep_city": dep_city,
                "policy_id": policy_id,
                "status_list": status_list
            }
        )

    def taobao_alitrip_it_policy_add(
            self,
            extend_attributes='',
            top_policy_do=None
    ):
        """
        【国际机票销售规则】单条新增
        销售规则新增，成功返回taobaoId
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25772

        :param extend_attributes: 扩展字段
        :param top_policy_do: 国际机票销售规则
        """
        return self._top_request(
            "taobao.alitrip.it.policy.add",
            {
                "extend_attributes": extend_attributes,
                "top_policy_do": top_policy_do
            }
        )

    def taobao_alitrip_it_policy_update(
            self,
            extend_attributes='',
            out_id='',
            taobao_id='',
            top_policy_do=None
    ):
        """
        【国际机票销售规则】单条更新
        销售规则更新接口，可以根据taobaoId或outId修改，outId不唯一时，不能用outId修改。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25773

        :param extend_attributes: 扩展字段
        :param out_id: 接入方产品id
        :param taobao_id: 淘宝政策id
        :param top_policy_do: 国际机票销售规则
        """
        return self._top_request(
            "taobao.alitrip.it.policy.update",
            {
                "extend_attributes": extend_attributes,
                "out_id": out_id,
                "taobao_id": taobao_id,
                "top_policy_do": top_policy_do
            }
        )


class TbGuoJiJiPiaoDingDan(DingTalkBaseAPI):
    """
    国际机票订单API
    """

    def taobao_alitrip_ie_agent_ticket_issue(
            self,
            issue_ticket_v_o,
            agent_id=''
    ):
        """
        【国际机票】手工出票
        代理商手工出票，并回填票号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24308

        :param issue_ticket_v_o: 出票信息
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.ticket.issue",
            {
                "issue_ticket_v_o": issue_ticket_v_o,
                "agent_id": agent_id
            },
            result_processor=lambda x: x["ticket_success"]
        )

    def taobao_alitrip_ie_agent_order_hk(
            self,
            agent_id='',
            write_back_pnr_v_o=None
    ):
        """
        【国际机票】手工预定回填PNR
        代理商通过手工预定PNR，并回填。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24309

        :param agent_id: 代理商ID
        :param write_back_pnr_v_o: 回填pnr信息
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.order.hk",
            {
                "agent_id": agent_id,
                "write_back_pnr_v_o": write_back_pnr_v_o
            },
            result_processor=lambda x: x["hk_success"]
        )

    def taobao_alitrip_ie_agent_order_search(
            self,
            agent_id='',
            begin_time='',
            current_page='',
            end_time='',
            order_status='',
            page_size='',
            fare_source='',
            resource_code='',
            office_no=''
    ):
        """
        【国际机票】订单列表查询
        根据指定条件查询国际机票订单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24310

        :param agent_id: 代理商ID
        :param begin_time: 订单起始日期
        :param current_page: 当前页码
        :param end_time: 订单结束日期
        :param order_status: 订单状态（只能传入一个状态，不支持多个一起传）
        :param page_size: 分页大小
        :param fare_source: 0:自有运价;3:公布运价;9:大卖家API;11私有库存
        :param resource_code: 供应渠道/资源码
        :param office_no: officeNo
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.order.search",
            {
                "agent_id": agent_id,
                "begin_time": begin_time,
                "current_page": current_page,
                "end_time": end_time,
                "order_status": order_status,
                "page_size": page_size,
                "fare_source": fare_source,
                "resource_code": resource_code,
                "office_no": office_no
            }
        )

    def taobao_alitrip_ie_agent_order_get(
            self,
            agent_id='',
            trade_order_id=''
    ):
        """
        【国际机票】查询订单详情
        根据订单ID查询订单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=24314

        :param agent_id: 代理商ID
        :param trade_order_id: 交易订单ID
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.order.get",
            {
                "agent_id": agent_id,
                "trade_order_id": trade_order_id
            },
            result_processor=lambda x: x["order_vo"]
        )

    def alitrip_ie_buyer_order_bookpay(
            self,
            book_pay_order_param=None
    ):
        """
        【国际机票】下单预定支付
        【国际机票】 生单预定支付接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27905

        :param book_pay_order_param: 生单支付请求参数
        """
        return self._top_request(
            "alitrip.ie.buyer.order.bookpay",
            {
                "book_pay_order_param": book_pay_order_param
            },
            result_processor=lambda x: x["book_pay_order_result"]
        )

    def taobao_alitrip_ie_agent_refund_search(
            self,
            create_start_time,
            create_end_time,
            page_index,
            page_size,
            refund_status='',
            agent_id=''
    ):
        """
        卖家查询退票申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29834

        :param create_start_time: 查询起始时间
        :param create_end_time: 查询结束时间
        :param page_index: 从1开始
        :param page_size: 每页大小
        :param refund_status: WAIT(1,'待处理'), AGREED(2, '已同意'),REFUSE(3, '已拒绝'),PROCESS(6, '已受理'), SUCCESS(7, '已退款');
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.refund.search",
            {
                "create_start_time": create_start_time,
                "create_end_time": create_end_time,
                "page_index": page_index,
                "page_size": page_size,
                "refund_status": refund_status,
                "agent_id": agent_id
            }
        )

    def taobao_alitrip_ie_agent_refund_get(
            self,
            apply_id,
            agent_id=''
    ):
        """
        获取退票申请详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29836

        :param apply_id: 退票申请单id
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.refund.get",
            {
                "apply_id": apply_id,
                "agent_id": agent_id
            }
        )

    def taobao_alitrip_ie_agent_refund_agree(
            self,
            refund_money,
            apply_id,
            order_id,
            agent_answer,
            agent_id=''
    ):
        """
        同意退票
        卖家同意买家退票申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29837

        :param refund_money: 退款金额
        :param apply_id: 申请单id
        :param order_id: 订单id
        :param agent_answer: 回复信息
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.refund.agree",
            {
                "refund_money": refund_money,
                "apply_id": apply_id,
                "order_id": order_id,
                "agent_answer": agent_answer,
                "agent_id": agent_id
            }
        )

    def taobao_alitrip_ie_agent_refund_refuse(
            self,
            apply_id,
            order_id,
            agent_answer,
            agent_id=''
    ):
        """
        拒绝退票申请
        卖家拒绝退票退票申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29838

        :param apply_id: 退票申请单id
        :param order_id: 订单id
        :param agent_answer: 代理商回复
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.refund.refuse",
            {
                "apply_id": apply_id,
                "order_id": order_id,
                "agent_answer": agent_answer,
                "agent_id": agent_id
            }
        )

    def taobao_alitrip_ie_agent_refund_refundmoney(
            self,
            apply_id,
            agent_id=''
    ):
        """
        确认退款
        卖家进行退款操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29839

        :param apply_id: 退票申请单id
        :param agent_id: 代理商id
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.refund.refundmoney",
            {
                "apply_id": apply_id,
                "agent_id": agent_id
            }
        )

    def taobao_alitrip_ie_agent_change_querychangelist(
            self,
            change_biz_status_enum='',
            change_order_id='',
            change_reason_type='',
            end_create_date='',
            order_id='',
            page_index='',
            page_size='',
            sort_field='',
            start_create_date=''
    ):
        """
        卖家查询改签列表
        提供B2B卖家查看改签列表服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29842

        :param change_biz_status_enum: WAITING_CONFIRM(10, '卖家待确认'),CONFIRMED(20, '卖家已确认'),WAITING_ISSUE(30, '卖家待出票'),FROZEN_ORDER(40, '出票超时冻结'),ISSUE_SUCCESS(50, '出票成功'),CHECKING_FAILURE(60,'验真失败'),CHECKING_SUCCCESS(61,'验真成功'),REFUSED(70, '卖家已拒绝')
        :param change_order_id: 改签申请单ID
        :param change_reason_type: 申请原因类型 0－因乘客个人原因(自愿改签) ,1－因航班取消/延误(非自愿),
        :param end_create_date: 1
        :param order_id: 订单ID
        :param page_index: 分页索引
        :param page_size: 分页大小
        :param sort_field: 排序
        :param start_create_date: 1
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.change.querychangelist",
            {
                "change_biz_status_enum": change_biz_status_enum,
                "change_order_id": change_order_id,
                "change_reason_type": change_reason_type,
                "end_create_date": end_create_date,
                "order_id": order_id,
                "page_index": page_index,
                "page_size": page_size,
                "sort_field": sort_field,
                "start_create_date": start_create_date
            }
        )

    def alitrip_tripvp_agent_order_search(
            self,
            agent_id,
            begin_time,
            current_page,
            end_time,
            page_size,
            order_status=''
    ):
        """
        【国际机票】查询辅营订单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30160

        :param agent_id: 代理商ID
        :param begin_time: 辅营创建开始时间
        :param current_page: 当前页码
        :param end_time: 辅营创建结束时间
        :param page_size: 分页行数
        :param order_status: 订单状态，1-待支付 2-支付成功 3-	辅营出货成功 4-订单取消
        """
        return self._top_request(
            "alitrip.tripvp.agent.order.search",
            {
                "agent_id": agent_id,
                "begin_time": begin_time,
                "current_page": current_page,
                "end_time": end_time,
                "page_size": page_size,
                "order_status": order_status
            }
        )

    def alitrip_ie_flightvcc_agent_query(
            self,
            out_trade_id,
            agent_id
    ):
        """
        查询申请单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32885

        :param out_trade_id: 外部交易号
        :param agent_id: 代理人Id
        """
        return self._top_request(
            "alitrip.ie.flightvcc.agent.query",
            {
                "out_trade_id": out_trade_id,
                "agent_id": agent_id
            }
        )

    def alitrip_ie_flightvcc_agent_close(
            self,
            out_trade_id,
            agent_id
    ):
        """
        关闭申请
        关闭申请单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32925

        :param out_trade_id: 外部唯一交易号
        :param agent_id: 代理人Id
        """
        return self._top_request(
            "alitrip.ie.flightvcc.agent.close",
            {
                "out_trade_id": out_trade_id,
                "agent_id": agent_id
            }
        )

    def alitrip_ie_flightvcc_agent_create(
            self,
            amount,
            relate_id,
            agent_name,
            out_trade_id,
            agent_id,
            swipe_dead_line,
            currency
    ):
        """
        创建申请单
        创建vcc虚拟卡
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32926

        :param amount: 申请金额
        :param relate_id: 国际订单Id
        :param agent_name: 代理商名称
        :param out_trade_id: 外部唯一订单号
        :param agent_id: 代理人id
        :param swipe_dead_line: 刷卡截止时间
        :param currency: 申请币种
        """
        return self._top_request(
            "alitrip.ie.flightvcc.agent.create",
            {
                "amount": amount,
                "relate_id": relate_id,
                "agent_name": agent_name,
                "out_trade_id": out_trade_id,
                "agent_id": agent_id,
                "swipe_dead_line": swipe_dead_line,
                "currency": currency
            }
        )

    def taobao_alitrip_ie_agent_refund_new_multiplerefunds(
            self,
            param_refund_order_multiple_refunds_rq
    ):
        """
        补退接口
        1. 补退接口， 可以进行多次退款
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37896

        :param param_refund_order_multiple_refunds_rq: 请求参数
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.refund.new.multiplerefunds",
            {
                "param_refund_order_multiple_refunds_rq": param_refund_order_multiple_refunds_rq
            }
        )

    def taobao_alitrip_ie_agent_refund_new_getlist(
            self,
            param_refund_order_query_list_rq=None
    ):
        """
        新查询退票申请单列表
        查询商家国际机票退票申请单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38093

        :param param_refund_order_query_list_rq: 列表查询
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.refund.new.getlist",
            {
                "param_refund_order_query_list_rq": param_refund_order_query_list_rq
            }
        )

    def taobao_alitrip_ie_agent_refund_new_getdetail(
            self,
            param_refund_order_query_detail_rq=None
    ):
        """
        查询申请单详情(新版)
        查询申请单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38094

        :param param_refund_order_query_detail_rq: 请求
        """
        return self._top_request(
            "taobao.alitrip.ie.agent.refund.new.getdetail",
            {
                "param_refund_order_query_detail_rq": param_refund_order_query_detail_rq
            }
        )


class TbGuoNeiJiPiaoDingDan(DingTalkBaseAPI):
    """
    国内机票订单API
    """

    def taobao_jipiao_agent_order_ticket(
            self,
            order_id,
            success_info
    ):
        """
        【机票代理商订单】订单回填票号/成功订单
        淘宝机票代理商回填票号/成功订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22761

        :param order_id: 淘宝系统订单id
        :param success_info: 成功订单参数：列表元素结构为——<br/>1.航班号（注：是订单里的航班号，非实际承运航班号）;<br/>2.旧乘机人姓名;<br/>3.新乘机人姓名;<br/>4.票号 （乘机人、航段对应的票号）<br/>说明：<br/>1.往返订单，2段航班对应1个票号的，需要2条success_info记录，分别对应去程、回程；<br/>2.有时用户输入的乘机人姓名输入错误或者有生僻字，代理商必须输入新的名字以保证验真通过；即旧乘机人姓名和新乘机人姓名不需要变化时可以相同
        """
        return self._top_request(
            "taobao.jipiao.agent.order.ticket",
            {
                "order_id": order_id,
                "success_info": success_info
            }
        )

    def taobao_jipiao_agent_order_detail(
            self,
            order_ids
    ):
        """
        【机票代理商订单】订单详情
        根据淘宝系统订单号获取订单详情信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22762

        :param order_ids: 淘宝订单id列表，当前支持列表长度为1，即当前只支持单个订单详情查询
        """
        return self._top_request(
            "taobao.jipiao.agent.order.detail",
            {
                "order_ids": order_ids
            }
        )

    def taobao_jipiao_agent_order_search(
            self,
            begin_time='',
            end_time='',
            status='',
            trip_type='',
            has_itinerary='',
            page='',
            extra=''
    ):
        """
        【机票代理商订单】订单搜索
        卖家根据条件查询淘宝订单id列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=22763

        :param begin_time: 创建订单时间范围的开始时间，注意：当前搜索条件开始结束时间范围不能超过三天，默认开始时间为当前时间往前推三天 （具体天数可能调整）
        :param end_time: 创建订单时间范围的结束时间，注意：当前搜索条件开始结束时间范围不能超过三天，默认为当前时间 （具体天数可能调整）
        :param status: 订单状态，默认为空，查询所有状态的订单<br/>1:待确认<br/>2:待出票<br/>3:强制成功<br/>4:未付款<br/>5:预订成功<br/>6:已失效
        :param trip_type: 航程类型： 0.单程；1.往返
        :param has_itinerary: 是否需要行程单，true表示需要行程单；false表示不许要
        :param page: 页码，默认第一页；注意：页大小固定，搜索结果中返回页大小pageSize，和是否包含下一页hasNext
        :param extra: 扩展字段:<br/>needFilterAutobook：默认true。待出票状态下，会根据此值过滤掉自动出票状态下订单，以防止重复出票的问题。对于精选票，此值需要设置成false，并由API使用者保证不会重复出票。
        """
        return self._top_request(
            "taobao.jipiao.agent.order.search",
            {
                "begin_time": begin_time,
                "end_time": end_time,
                "status": status,
                "trip_type": trip_type,
                "has_itinerary": has_itinerary,
                "page": page,
                "extra": extra
            }
        )

    def taobao_alitrip_seller_refundorderlist_fetch(
            self,
            start_date,
            end_date,
            status=''
    ):
        """
        【机票代理商】——退票订单列表提取
        代理商纬度退票订单列表提取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25873

        :param start_date: 提取数据的开始时间
        :param end_date: 提取数据的结束时间
        :param status: 1：初始，2：接受，3：确认，4：失败，5：买家处理，6：卖家处理，7：等待小二回填，8：退款成功
        """
        return self._top_request(
            "taobao.alitrip.seller.refundorderlist.fetch",
            {
                "start_date": start_date,
                "end_date": end_date,
                "status": status
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_alitrip_seller_refund_unsuspend(
            self,
            apply_id,
            ticket_no
    ):
        """
        【机票代理商】解挂票
        解挂票号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26085

        :param apply_id: 申请单ID
        :param ticket_no: 票号
        """
        return self._top_request(
            "taobao.alitrip.seller.refund.unsuspend",
            {
                "apply_id": apply_id,
                "ticket_no": ticket_no
            }
        )

    def taobao_alitrip_seller_refund_confirmreturn(
            self,
            apply_id
    ):
        """
        【机票代理商】确认退票
        确认退票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26086

        :param apply_id: 退票申请单
        """
        return self._top_request(
            "taobao.alitrip.seller.refund.confirmreturn",
            {
                "apply_id": apply_id
            }
        )

    def taobao_alitrip_seller_refund_get(
            self,
            apply_id
    ):
        """
        【机票代理商】退票申请单详情
        查询退票申请单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26087

        :param apply_id: 申请单ID
        """
        return self._top_request(
            "taobao.alitrip.seller.refund.get",
            {
                "apply_id": apply_id
            }
        )

    def taobao_alitrip_seller_refund_fillfee(
            self,
            apply_id,
            fee_price_map,
            ticket_price_map,
            modify_fee='',
            upgrade_fee=''
    ):
        """
        机票代理商】回填手续费
        回填手续费
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26088

        :param apply_id: 申请单ID
        :param fee_price_map: 费对于关系，格式：{apply_fee_id:123,value:费用,金额单位分}
        :param ticket_price_map: 票价信息，格式：{apply_fee_id：123,value:费用,金额单位分}
        :param modify_fee: 改签费用，格式：{detail_id:123,value:费用,金额单位分}
        :param upgrade_fee: 升舱费用，格式：{detail_id:123,value:费用,金额单位分}
        """
        return self._top_request(
            "taobao.alitrip.seller.refund.fillfee",
            {
                "apply_id": apply_id,
                "fee_price_map": fee_price_map,
                "ticket_price_map": ticket_price_map,
                "modify_fee": modify_fee,
                "upgrade_fee": upgrade_fee
            }
        )

    def taobao_alitrip_seller_refund_refusereturn(
            self,
            apply_id,
            reason
    ):
        """
        【机票代理商】拒绝退票
        拒绝退票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26089

        :param apply_id: 申请单ID
        :param reason: 拒绝理由
        """
        return self._top_request(
            "taobao.alitrip.seller.refund.refusereturn",
            {
                "apply_id": apply_id,
                "reason": reason
            }
        )

    def taobao_alitrip_seller_refund_search(
            self,
            end_time,
            start_time,
            status=''
    ):
        """
        【机票代理商】退票申请单列表
        查询退票申请单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26093

        :param end_time: 结束时间
        :param start_time: 开始时间
        :param status: 申请单状态（如果为空查询所有状态，1初始 2接受 3确认 4失败 5买家处理 6卖家处理 7等待小二回填 8退款成功）
        """
        return self._top_request(
            "taobao.alitrip.seller.refund.search",
            {
                "end_time": end_time,
                "start_time": start_time,
                "status": status
            }
        )

    def taobao_alitrip_seller_order_confirm(
            self,
            trip_confirm_order_param
    ):
        """
        代理商确认机票订单接口
        此接口用于代理商确认机票订单。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26108

        :param trip_confirm_order_param: 请求参数
        """
        return self._top_request(
            "taobao.alitrip.seller.order.confirm",
            {
                "trip_confirm_order_param": trip_confirm_order_param
            }
        )

    def taobao_alitrip_buyer_get(
            self,
            request_axb
    ):
        """
        敏感信息查询
        针对商家提供统一的TOP接口，可以根据订单获取订单对应买家联系电话（阿里小号）。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26565

        :param request_axb: 敏感信息查询请求参数
        """
        return self._top_request(
            "taobao.alitrip.buyer.get",
            {
                "request_axb": request_axb
            }
        )

    def taobao_jipiao_agent_order_bdetail(
            self,
            order_id
    ):
        """
        【机票代理商订单】采购订单详情
        根据淘宝系统订单号获取订单详情信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26660

        :param order_id: 订单号
        """
        return self._top_request(
            "taobao.jipiao.agent.order.bdetail",
            {
                "order_id": order_id
            }
        )

    def taobao_alitrip_seller_refundmoney_confirm(
            self,
            apply_id=''
    ):
        """
        【机票代理商订单】确认退款
        代理人确认退票申请单的退款
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27201

        :param apply_id: 申请单id
        """
        return self._top_request(
            "taobao.alitrip.seller.refundmoney.confirm",
            {
                "apply_id": apply_id
            },
            result_processor=lambda x: x["is_success"]
        )

    def taobao_alitrip_seller_modify_list(
            self,
            apply_id='',
            order_id='',
            apply_date_end='',
            apply_date_start='',
            current_page='',
            fly_date_end='',
            fly_date_start='',
            page_size='',
            status='',
            modify_date_end='',
            modify_date_start=''
    ):
        """
        【机票代理商订单】改签订单列表
        提供机票代理商查询改签订单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27255

        :param apply_id: 申请单ID
        :param order_id: 淘宝订单号
        :param apply_date_end: 改签发起时间的查询结束日期 和 更新时间必选其一
        :param apply_date_start: 改签发起时间的查询开始日期 和 更新时间必选其一
        :param current_page: 页码
        :param fly_date_end: 乘客起飞时间的查询结束日期
        :param fly_date_start: 乘客起飞时间的查询开始日期
        :param page_size: 每页记录数
        :param status: 1：初始状态，2：已改签成功，3：已拒绝，4：未付款（已回填退票费），5：已付款
        :param modify_date_end: 记录修改结束时间  和 改签发起时间必选其一
        :param modify_date_start: 记录修改起始时间 和 改签发起时间必选其一
        """
        return self._top_request(
            "taobao.alitrip.seller.modify.list",
            {
                "apply_id": apply_id,
                "order_id": order_id,
                "apply_date_end": apply_date_end,
                "apply_date_start": apply_date_start,
                "current_page": current_page,
                "fly_date_end": fly_date_end,
                "fly_date_start": fly_date_start,
                "page_size": page_size,
                "status": status,
                "modify_date_end": modify_date_end,
                "modify_date_start": modify_date_start
            }
        )

    def taobao_alitrip_supplier_modify_list(
            self,
            gmt_create_end,
            gmt_create_start,
            current_page='',
            dep_end='',
            dep_start='',
            page_size='',
            status=''
    ):
        """
        【机票代理商订单】改签通知单列表
        提供供应商查询改签通知单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27256

        :param gmt_create_end: 申请单创建时间查询结束日期
        :param gmt_create_start: 申请单创建时间查询开始日期
        :param current_page: 页码
        :param dep_end: 乘客出发时间查询结束日期
        :param dep_start: 乘客出发时间查询开始日期
        :param page_size: 每页记录数
        :param status: 1：改签申请列表，2：改签已支付列表，3：改签成功列表
        """
        return self._top_request(
            "taobao.alitrip.supplier.modify.list",
            {
                "gmt_create_end": gmt_create_end,
                "gmt_create_start": gmt_create_start,
                "current_page": current_page,
                "dep_end": dep_end,
                "dep_start": dep_start,
                "page_size": page_size,
                "status": status
            },
            result_processor=lambda x: x["order_list"]
        )


class TbGuoNeiJiPiaoJingHang(DingTalkBaseAPI):
    """
    国内机票京杭API
    """

    def taobao_alitrip_orderinfo_get(
            self,
            channel_name,
            password,
            order_id='',
            reservation_code=''
    ):
        """
        【京杭】——查询订单详情
        查询订单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23998

        :param channel_name: 接入方提供的用户名
        :param password: 接入方提供的密码，以MD5方式加密后传入
        :param order_id: 阿里旅行订单号（该入参及外部订单号其中一个必填）
        :param reservation_code: 外部订单号（该入参及阿里旅行订单号其中一个必填）
        """
        return self._top_request(
            "taobao.alitrip.orderinfo.get",
            {
                "channel_name": channel_name,
                "password": password,
                "order_id": order_id,
                "reservation_code": reservation_code
            }
        )

    def taobao_alitrip_orderrefundinfo_get(
            self,
            channel_name,
            password,
            order_id
    ):
        """
        【京杭】——查询订单退票信息详情
        查询订单退票信息详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=23999

        :param channel_name: 接入方提供的用户名
        :param password: 接入方提供的密码，以MD5方式加密后传入
        :param order_id: 淘宝系统订单号
        """
        return self._top_request(
            "taobao.alitrip.orderrefundinfo.get",
            {
                "channel_name": channel_name,
                "password": password,
                "order_id": order_id
            }
        )

    def taobao_alitrip_insurance_inquiry(
            self,
            arr_airport,
            cabin,
            password,
            flight_no,
            airline_code,
            reservation_code,
            channel_name,
            dep_date,
            dep_airport,
            traver_number,
            sale_price,
            product_type='',
            ignored_shop_names=''
    ):
        """
        【京杭】——保险询价
        京杭保险询价接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25606

        :param arr_airport: 到达机场三字码
        :param cabin: 舱位
        :param password: 接入方提供的密码，以MD5方式加密后传入
        :param flight_no: 航班号
        :param airline_code: 航司二字码
        :param reservation_code: 外部订单号
        :param channel_name: 接入方提供的用户名
        :param dep_date: 出发日期
        :param dep_airport: 出发机场三字码
        :param traver_number: 旅行人数
        :param sale_price: 销售价格
        :param product_type: 保险询价时选择的产品类型，QW：全网最低价产品 JX：精选产品 JP：金牌产品 HS：航司产品 默认QW，即：默认选择全网最低价产品
        :param ignored_shop_names: 屏蔽的店铺名称
        """
        return self._top_request(
            "taobao.alitrip.insurance.inquiry",
            {
                "arr_airport": arr_airport,
                "cabin": cabin,
                "password": password,
                "flight_no": flight_no,
                "airline_code": airline_code,
                "reservation_code": reservation_code,
                "channel_name": channel_name,
                "dep_date": dep_date,
                "dep_airport": dep_airport,
                "traver_number": traver_number,
                "sale_price": sale_price,
                "product_type": product_type,
                "ignored_shop_names": ignored_shop_names
            },
            result_processor=lambda x: x["refund_insurance_result"]
        )

    def taobao_alitrip_createorder_unfreeze(
            self
    ):
        """
        【京杭】——解除余额不足下单限制
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25779

        """
        return self._top_request(
            "taobao.alitrip.createorder.unfreeze",
            result_processor=lambda x: x["is_success"]
        )

    def taobao_alitrip_refundticket_calculate(
            self,
            channel_name,
            refund_ticket_type,
            password,
            order_id,
            ticket_numbers=''
    ):
        """
        【京杭】——退票计算退票费（新）
        京杭计算退票费接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25780

        :param channel_name: 接入方提供的用户名
        :param refund_ticket_type: Voluntary:自愿，NonVoluntary:非自愿
        :param password: 接入方提供的密码，以MD5方式加密后传入
        :param order_id: 淘宝订单号
        :param ticket_numbers: 需退票的票号，不填写则认为该订单所有票均需要退
        """
        return self._top_request(
            "taobao.alitrip.refundticket.calculate",
            {
                "channel_name": channel_name,
                "refund_ticket_type": refund_ticket_type,
                "password": password,
                "order_id": order_id,
                "ticket_numbers": ticket_numbers
            }
        )

    def taobao_alitrip_refundticket_refundapply(
            self,
            channel_name,
            refund_ticket_type,
            password,
            order_id,
            ticket_numbers='',
            refund_fee='',
            refund_ticket_detail='',
            voucher_infos=None,
            refund_reason_type=''
    ):
        """
        【京杭】——退票申请（新）
        提交退票申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25783

        :param channel_name: 接入方提供的用户名
        :param refund_ticket_type: Voluntary:自愿，NonVoluntary:非自愿
        :param password: 接入方提供的密码，以MD5方式加密后传入
        :param order_id: 淘宝订单号
        :param ticket_numbers: 需退票的票号，一个订单仅有1个乘机人时无须填写（部分航司同时仅支持1个票号提交退票）
        :param refund_fee: 退票手续费（单位：元，非自愿退票及无法计算退票费时可不填）
        :param refund_ticket_detail: 退票原因说明（非自愿退票必填）
        :param voucher_infos: 通过凭证上传接口上传的凭证信息
        :param refund_reason_type: 1：自愿退票（我要改变行程计划、我不想飞）；31：自愿退票（填错名字、选错日期、选错航班）；32：自愿退票（没赶上飞机、证件忘带了）；33：自愿退票（生病了无法乘机（无二甲医院证明））；99：自愿退票（其他）；6：非自愿退票（航班延误或取消、航班时刻变更等航司原因）；21：非自愿退票（身体原因且有二级甲等医院<含>以上的医院证明）；
        """
        return self._top_request(
            "taobao.alitrip.refundticket.refundapply",
            {
                "channel_name": channel_name,
                "refund_ticket_type": refund_ticket_type,
                "password": password,
                "order_id": order_id,
                "ticket_numbers": ticket_numbers,
                "refund_fee": refund_fee,
                "refund_ticket_detail": refund_ticket_detail,
                "voucher_infos": voucher_infos,
                "refund_reason_type": refund_reason_type
            }
        )

    def taobao_alitrip_orderlist_fetch(
            self,
            fetch_date,
            start_order_id=''
    ):
        """
        【京杭】——订单列表提取
        查询买家纬度正向订单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25871

        :param fetch_date: 提取的订单日期
        :param start_order_id: 提取订单号大于该id的后续订单（该值请使用本接口返回的上一批数据中的最后一个订单id回填过来）
        """
        return self._top_request(
            "taobao.alitrip.orderlist.fetch",
            {
                "fetch_date": fetch_date,
                "start_order_id": start_order_id
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_alitrip_buyer_refundorderlist_fetch(
            self,
            fetch_date
    ):
        """
        【京杭】——退票订单列表提取
        买家退票订单列表提取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25872

        :param fetch_date: 提取数据日期（默认提取1天内的数据）
        """
        return self._top_request(
            "taobao.alitrip.buyer.refundorderlist.fetch",
            {
                "fetch_date": fetch_date
            },
            result_processor=lambda x: x["result_list"]
        )

    def taobao_alitrip_refundticket_uploadvoucher(
            self,
            channel_name,
            order_id,
            password,
            file_content
    ):
        """
        【京杭】——退票上传凭证
        客户申请退票前，通过该接口上传凭证，并获取接口返回的文件标识，在申请退票时回填给申请接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26142

        :param channel_name: 接入方提供的用户名
        :param order_id: 该附件对应的订单号
        :param password: 接入方提供的密码，以MD5方式加密后传入
        :param file_content: 退票凭证文件体
        """
        return self._top_request(
            "taobao.alitrip.refundticket.uploadvoucher",
            {
                "channel_name": channel_name,
                "order_id": order_id,
                "password": password,
                "file_content": file_content
            }
        )


class TbDuJiaMenPiaoJiaoYiGuanLi(DingTalkBaseAPI):
    """
    度假&门票-交易管理API
    """

    def taobao_alitrip_travel_trade_memo_add(
            self,
            tid,
            memo,
            flag='0'
    ):
        """
        添加一笔交易备注
        对一笔交易添加备注
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25972

        :param tid: 交易ID
        :param memo: 交易备注。最大长度: 1000个字节
        :param flag: 交易备注旗帜，可选值为：0(灰色), 1(红色), 2(黄色), 3(绿色), 4(蓝色), 5(粉红色)，默认值为0
        """
        return self._top_request(
            "taobao.alitrip.travel.trade.memo.add",
            {
                "tid": tid,
                "memo": memo,
                "flag": flag
            },
            result_processor=lambda x: x["memo_add"]
        )

    def taobao_alitrip_travel_trade_memo_update(
            self,
            tid,
            memo='',
            flag='',
            reset='false'
    ):
        """
        修改一笔交易备注
        更新一笔交易备注
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25975

        :param tid: 交易ID
        :param memo: 交易备注。最大长度: 1000个字节
        :param flag: 交易备注旗帜，可选值为：0(灰色), 1(红色), 2(黄色), 3(绿色), 4(蓝色), 5(粉红色)，默认值为0
        :param reset: 是否对memo的值置空若为true，则不管传入的memo字段的值是否为空，都将会对已有的memo值清空，慎用；若用false，则会根据memo是否为空来修改memo的值：若memo为空则忽略对已有memo字段的修改，若memo非空，则使用新传入的memo覆盖已有的memo的值
        """
        return self._top_request(
            "taobao.alitrip.travel.trade.memo.update",
            {
                "tid": tid,
                "memo": memo,
                "flag": flag,
                "reset": reset
            },
            result_processor=lambda x: x["memo_update"]
        )

    def alitrip_travel_trade_close(
            self,
            close_reason,
            sub_order_id,
            reason_desc=''
    ):
        """
        飞猪度假-订单关闭接口（快速退款）
        卖家关单（快速退款接口），不支持二次预约商品的订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28175

        :param close_reason: 交易关闭原因
        :param sub_order_id: 子订单编号
        :param reason_desc: 订单关闭原因描述
        """
        return self._top_request(
            "alitrip.travel.trade.close",
            {
                "close_reason": close_reason,
                "sub_order_id": sub_order_id,
                "reason_desc": reason_desc
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_travel_trade_deliver(
            self,
            sub_order_id
    ):
        """
        飞猪度假-订单发货接口
        航旅度假无需物流普通商品发货接口（不支持二次预约商品），只支持子订单级别发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28176

        :param sub_order_id: 子订单id
        """
        return self._top_request(
            "alitrip.travel.trade.deliver",
            {
                "sub_order_id": sub_order_id
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_travel_trades_search(
            self,
            end_created_time,
            start_created_time,
            page_size='20',
            order_status='',
            current_page='1',
            category=''
    ):
        """
        飞猪度假-订单列表搜索接口
        订单列表搜索接口：以订单创建、结束时间、订单状态为搜索条件，搜索过滤出满足条件的卖家订单列表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28558

        :param end_created_time: 订单创建 结束时间
        :param start_created_time: 订单创建 开始时间
        :param page_size: 页面大小，最大支持的页面大小为100。如查询旅行购订单，则最大支持的页面大小为30
        :param order_status: 订单状态 过滤。1-等待买家付款，2-等待卖家发货（买家已付款），3-等待买家确认收货，4-交易关闭（买家发起的退款），6-交易成功，8-交易关闭（订单超时 自动关单）
        :param current_page: 当前页
        :param category: 类目筛选, 1、旅行购，旅行购定制专用字段，表示搜索旅行购订单。
        """
        return self._top_request(
            "alitrip.travel.trades.search",
            {
                "end_created_time": end_created_time,
                "start_created_time": start_created_time,
                "page_size": page_size,
                "order_status": order_status,
                "current_page": current_page,
                "category": category
            }
        )

    def alitrip_travel_trade_query(
            self,
            order_id
    ):
        """
        飞猪度假-订单详情查询接口
        飞猪度假订单详情查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28564

        :param order_id: 主订单id
        """
        return self._top_request(
            "alitrip.travel.trade.query",
            {
                "order_id": order_id
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_travel_trade_template_query(
            self,
            order_id,
            is_new='false'
    ):
        """
        订单服务详情模版查询
        通过订单ID获取标注模版信息，商家可以根据模版来填充行业信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31528

        :param order_id: 淘宝平台订单ID
        :param is_new: 是否取最新的模版
        """
        return self._top_request(
            "alitrip.travel.trade.template.query",
            {
                "order_id": order_id,
                "is_new": is_new
            },
            result_processor=lambda x: x["first_result"]
        )

    def alitrip_travel_trade_serviceinfo_write(
            self,
            tip_value,
            sub_tc_order_id
    ):
        """
        订单服务信息写入接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31529

        :param tip_value: 根据模版要求传递对应的订单服务信息，当涉及多值时，用英文分号隔开';'，目前api暂时不支持文件上传，只支持链接；链接必须外网能访问
        :param sub_tc_order_id: 对应的订单信息
        """
        return self._top_request(
            "alitrip.travel.trade.serviceinfo.write",
            {
                "tip_value": tip_value,
                "sub_tc_order_id": sub_tc_order_id
            }
        )

    def alitrip_travel_visa_applicant_update(
            self,
            sub_order_id,
            oper_type,
            applicant_infos=None,
            applicant_op=None,
            file_bytes=''
    ):
        """
        飞猪度假-普通签证-申请人进度推进接口
        普通签证订单的申请人进度推进接口，用于商家代用户填写申请人基本信息 或 推进单个申请人的签证进度。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33244

        :param sub_order_id: 必填，子订单id
        :param oper_type: 必填，操作类型。1-上传新申请人基本信息（商家代填申请人），2-更新已有申请人基本信息，3-更新已有申请人的签证进度
        :param applicant_infos: 特殊必填，申请人基本信息（证件号，姓名，手机号）列表。当operType为1或2时必填
        :param applicant_op: 特殊必填，签证申请人进度推进操作（目前只支持对单个申请人状态进行推进）。当operType为3时必填
        :param file_bytes: 特殊必填，pdf文件字节流。用于上传电子签pdf结果 或者 预约面试信pdf文件。
        """
        return self._top_request(
            "alitrip.travel.visa.applicant.update",
            {
                "sub_order_id": sub_order_id,
                "oper_type": oper_type,
                "applicant_infos": applicant_infos,
                "applicant_op": applicant_op,
                "file_bytes": file_bytes
            }
        )


class TbALiTiYu(DingTalkBaseAPI):
    """
    阿里体育API
    """

    def alibaba_alisports_passport_account_tokenvalidate(
            self,
            alisp_app_key,
            alisp_sign,
            alisp_time,
            token='',
            user_type='',
            secret='',
            ext_info='',
            mtop_appkey=''
    ):
        """
        阿里体育会员系统帐号登录注册token验证接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28561

        :param alisp_app_key: 业务方appkey
        :param alisp_sign: 签名
        :param alisp_time: 时间戳
        :param token: token
        :param user_type: 注册用户类型
        :param secret: 一键登录参数
        :param ext_info: json字符串，传入扩展字段
        :param mtop_appkey: 选填，调用百川登录接口的appkey，百川登录时，需要传此字段
        """
        return self._top_request(
            "alibaba.alisports.passport.account.tokenvalidate",
            {
                "alisp_app_key": alisp_app_key,
                "alisp_sign": alisp_sign,
                "alisp_time": alisp_time,
                "token": token,
                "user_type": user_type,
                "secret": secret,
                "ext_info": ext_info,
                "mtop_appkey": mtop_appkey
            }
        )

    def alibaba_alisports_passport_account_getaccountinfo(
            self,
            alisp_time,
            alisp_app_key,
            alisp_sign,
            type,
            value,
            need_detail='',
            ext_info_type=''
    ):
        """
        获取会员信息
        获取阿里体育会员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28574

        :param alisp_time: 当前时间戳
        :param alisp_app_key: 业务appkey
        :param alisp_sign: 业务加密参数
        :param type: 查询类型：1阿里体育用户ID 2邮箱 3手机 默认1
        :param value: 要查询的值
        :param need_detail: 是否获取详情0否1是 默认0
        :param ext_info_type: 决定返回值是否包含扩展字段
        """
        return self._top_request(
            "alibaba.alisports.passport.account.getaccountinfo",
            {
                "alisp_time": alisp_time,
                "alisp_app_key": alisp_app_key,
                "alisp_sign": alisp_sign,
                "type": type,
                "value": value,
                "need_detail": need_detail,
                "ext_info_type": ext_info_type
            }
        )

    def alibaba_alisports_passport_oauth_tokenvalidate(
            self,
            token,
            alisp_time,
            alisp_app_key,
            alisp_sign
    ):
        """
        阿里体育会员系统--获取登录信息接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28657

        :param token: 登录时返回给前端的token
        :param alisp_time: 时间戳
        :param alisp_app_key: 应用的appkey
        :param alisp_sign: 参数加密之后的串
        """
        return self._top_request(
            "alibaba.alisports.passport.oauth.tokenvalidate",
            {
                "token": token,
                "alisp_time": alisp_time,
                "alisp_app_key": alisp_app_key,
                "alisp_sign": alisp_sign
            }
        )

    def alibaba_alisports_passport_account_ssotokenvalidate(
            self,
            sso_token,
            alisp_app_key,
            alisp_time,
            alisp_sign
    ):
        """
        sso_token验证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29455

        :param sso_token: sso_token
        :param alisp_app_key: 应用APPKEY
        :param alisp_time: 当前时间戳[精确到秒，10位]
        :param alisp_sign: 签名
        """
        return self._top_request(
            "alibaba.alisports.passport.account.ssotokenvalidate",
            {
                "sso_token": sso_token,
                "alisp_app_key": alisp_app_key,
                "alisp_time": alisp_time,
                "alisp_sign": alisp_sign
            }
        )

    def alibaba_alisports_passport_account_ssotokenrefresh(
            self,
            alisp_app_key,
            alisp_time,
            alisp_sign,
            secret
    ):
        """
        sso_token刷新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29456

        :param alisp_app_key: 应用appkey
        :param alisp_time: 当前时间戳[精确到秒,10位]
        :param alisp_sign: 签名
        :param secret: 登录成功返回的access_token(access_token是TOP保留关键字，只能改名，望谅解)
        """
        return self._top_request(
            "alibaba.alisports.passport.account.ssotokenrefresh",
            {
                "alisp_app_key": alisp_app_key,
                "alisp_time": alisp_time,
                "alisp_sign": alisp_sign,
                "secret": secret
            }
        )

    def alibaba_alisports_passport_parter_synccard(
            self,
            aliuid,
            type,
            old_card_num,
            alisp_time,
            alisp_app_key,
            alisp_sign,
            center_num=''
    ):
        """
        阿里体育-卡信息同步接口
        运享通修改卡号的时候，通知更新到阿里体育和支付宝卡包中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32551

        :param aliuid: 用户的id
        :param type: 类型：1.修改，2.删除
        :param old_card_num: 用户的老卡号(修改或删除之前的卡号)
        :param alisp_time: 时间戳
        :param alisp_app_key: appkey
        :param alisp_sign: 签名字符串
        :param center_num: 改卡的中心id，如果卡号唯一则不需要传
        """
        return self._top_request(
            "alibaba.alisports.passport.parter.synccard",
            {
                "aliuid": aliuid,
                "type": type,
                "old_card_num": old_card_num,
                "alisp_time": alisp_time,
                "alisp_app_key": alisp_app_key,
                "alisp_sign": alisp_sign,
                "center_num": center_num
            }
        )

    def alibaba_alisports_passport_account_checkmobile(
            self,
            alisp_app_key,
            alisp_time,
            alisp_sign,
            app_uid,
            mobile,
            nick='',
            gender='',
            birthday=''
    ):
        """
        阿里体育会员系统--手机号验证接口
        验证三方用户的手机号，获取对应的阿里体育会员id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38651

        :param alisp_app_key: 业务appkey
        :param alisp_time: 调用时间戳
        :param alisp_sign: 签名字符串
        :param app_uid: 合作方用户ID
        :param mobile: 手机号
        :param nick: 用户呢称
        :param gender: 性别 0未设置 1男 2女 3保密
        :param birthday: 生日
        """
        return self._top_request(
            "alibaba.alisports.passport.account.checkmobile",
            {
                "alisp_app_key": alisp_app_key,
                "alisp_time": alisp_time,
                "alisp_sign": alisp_sign,
                "app_uid": app_uid,
                "mobile": mobile,
                "nick": nick,
                "gender": gender,
                "birthday": birthday
            }
        )

    def alibaba_alisports_passport_account_delrelation(
            self,
            alisp_app_key,
            alisp_time,
            alisp_sign,
            app_uid,
            aliuid
    ):
        """
        阿里体育会员系统--取消三方关联接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38652

        :param alisp_app_key: 业务appkey
        :param alisp_time: 调用时间戳
        :param alisp_sign: 签名字符串
        :param app_uid: 合作方用户ID
        :param aliuid: 阿里体育会员id
        """
        return self._top_request(
            "alibaba.alisports.passport.account.delrelation",
            {
                "alisp_app_key": alisp_app_key,
                "alisp_time": alisp_time,
                "alisp_sign": alisp_sign,
                "app_uid": app_uid,
                "aliuid": aliuid
            }
        )

    def alibaba_alisports_passport_oauth_alipaygrant(
            self,
            alisp_app_key,
            alisp_time,
            alisp_sign,
            auth_code,
            partner_mode,
            appid,
            app_uid
    ):
        """
        阿里体育会员系统-支付宝授权接口
        开放给乐心运动使用的支付宝授权接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40618

        :param alisp_app_key: 阿里体育分配的用户appkey
        :param alisp_time: 请求接口的时间戳
        :param alisp_sign: 签名字符串
        :param auth_code: 调用支付宝登录sdk返回的code
        :param partner_mode: 固定为rich_sports
        :param appid: 支付宝的appid
        :param app_uid: 合作方的userid，即用户唯一的id标识
        """
        return self._top_request(
            "alibaba.alisports.passport.oauth.alipaygrant",
            {
                "alisp_app_key": alisp_app_key,
                "alisp_time": alisp_time,
                "alisp_sign": alisp_sign,
                "auth_code": auth_code,
                "partner_mode": partner_mode,
                "appid": appid,
                "app_uid": app_uid
            }
        )

    def alibaba_alisports_data_sports_syncstatdata(
            self,
            alisp_app_key,
            alisp_time,
            alisp_sign,
            aliuid,
            steps,
            calorie,
            distance,
            time,
            device_type='',
            device_name='',
            device_model=''
    ):
        """
        阿里体育数据中心用户当天累积数据同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40637

        :param alisp_app_key: 应用appkey
        :param alisp_time: 时间戳精确到秒
        :param alisp_sign: 签名
        :param aliuid: 阿里体育用户id
        :param steps: 运动步数
        :param calorie: 消耗卡路里 单位：卡
        :param distance: 运动距离 单位：米
        :param time: 日期 格式：y-m-d h:i:s
        :param device_type: 设备类型：1手环
        :param device_name: 设备名
        :param device_model: 设备型号
        """
        return self._top_request(
            "alibaba.alisports.data.sports.syncstatdata",
            {
                "alisp_app_key": alisp_app_key,
                "alisp_time": alisp_time,
                "alisp_sign": alisp_sign,
                "aliuid": aliuid,
                "steps": steps,
                "calorie": calorie,
                "distance": distance,
                "time": time,
                "device_type": device_type,
                "device_name": device_name,
                "device_model": device_model
            }
        )

    def alibaba_alisports_data_sports_syncsportsdata(
            self,
            alisp_app_key,
            alisp_time,
            alisp_sign,
            aliuid,
            data_id,
            sports_class,
            max_speed='',
            aver_heartrate='',
            max_heartrate='',
            min_heartrate='',
            trail='',
            stime='',
            etime='',
            device_type='',
            device_name='',
            device_model='',
            aver_speed='',
            sub_unit='',
            sub_num='',
            source='',
            sports_type='',
            num='',
            unit='',
            calorie='',
            match='',
            distance='',
            time='',
            country='',
            province='',
            city='',
            start_point='',
            end_point=''
    ):
        """
        阿里体育数据中心用户运动数据同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40638

        :param alisp_app_key: 应用appkey
        :param alisp_time: 时间戳精确到秒
        :param alisp_sign: 接口签名
        :param aliuid: 阿里体育用户id
        :param data_id: 三方运动数据主键id（数据唯一标记，去重使用）
        :param sports_class: 运动类型一级分类 定义：1-跑步;2-健走;3-骑行;4-游泳;5-健身;6-篮球;7-足球;8-羽毛球;9-排球;10-乒乓球;11-瑜伽;12-电竞;13-登山;16-椭圆机;19-健身操;20-太极;
        :param max_speed: 最高速度 单位：米/每分
        :param aver_heartrate: 平均心率 单位：次/每分
        :param max_heartrate: 最高心率 单位：次/每分
        :param min_heartrate: 最低心率 单位：次/每分
        :param trail: 运动轨迹，有序的经纬度集合，json格式 例：[[1,2],[3,4]] [1,2]是一个坐标点，1是经度 2是纬度（有就传，阿里体育较依赖此字段）
        :param stime: 运动开始时间（如果不区分开始结束，两个时间值相同;格式：Y-m-d H:i:s）
        :param etime: 运动结束时间（如果不区分开始结束，两个时间值相同;格式：Y-m-d H:i:s）
        :param device_type: 设备类型 :1.手环;2.手表;3.跑步机;4.智能运动鞋;5.耳机;6.智能运动鞋;7.智能运动Bra8.智能单车;9.智能跳绳10.智能背心11.脚环
        :param device_name: 设备名（展示会用到）
        :param device_model: 设备型号
        :param aver_speed: 平均速度 单位：米/每分
        :param sub_unit: 二级运动量单位 定义：1.爬楼层数(跑步、健走、健身、登山);2.划水次数(游泳)
        :param sub_num: 二级运动量
        :param source: 业务来源二级分类（中英文）
        :param sports_type: 运动类型二级分类 定义： 1001-室内跑步;1002-室外跑步;2001-室内健走;2002-室外健走;3001-室内骑行;3002-室外骑行;4001-室内游泳;4002-户外游泳
        :param num: 运动量
        :param unit: 运动量单位 1.步数(跑步、健走、椭圆机、登山);2.趟数(游泳);3.平均踏频(骑行);
        :param calorie: 运动消耗卡路里 单位：卡
        :param match: 所属赛事（有就传，阿里体育较依赖此字段）
        :param distance: 运动距离 单位:米（有就传，阿里体育较依赖此字段）
        :param time: 运动时长 单位:秒（有就传，阿里体育较依赖此字段）
        :param country: 国家(中英文/运动发生地点，如有就传)
        :param province: 省份(中英文/运动发生地点，如有就传)
        :param city: 城市(中英文/运动发生地点，如有就传)
        :param start_point: 开始运动地点经纬度，格式：1,2 (1为经度，2为纬度)
        :param end_point: 结束运动地点经纬度，格式：1,2 (1为经度，2为纬度)
        """
        return self._top_request(
            "alibaba.alisports.data.sports.syncsportsdata",
            {
                "alisp_app_key": alisp_app_key,
                "alisp_time": alisp_time,
                "alisp_sign": alisp_sign,
                "aliuid": aliuid,
                "data_id": data_id,
                "sports_class": sports_class,
                "max_speed": max_speed,
                "aver_heartrate": aver_heartrate,
                "max_heartrate": max_heartrate,
                "min_heartrate": min_heartrate,
                "trail": trail,
                "stime": stime,
                "etime": etime,
                "device_type": device_type,
                "device_name": device_name,
                "device_model": device_model,
                "aver_speed": aver_speed,
                "sub_unit": sub_unit,
                "sub_num": sub_num,
                "source": source,
                "sports_type": sports_type,
                "num": num,
                "unit": unit,
                "calorie": calorie,
                "match": match,
                "distance": distance,
                "time": time,
                "country": country,
                "province": province,
                "city": city,
                "start_point": start_point,
                "end_point": end_point
            }
        )

    def alibaba_alisports_data_sports_syncuserdata(
            self,
            alisp_app_key,
            data_id,
            aliuid,
            alisp_sign,
            alisp_time,
            time,
            metabolize='',
            protein='',
            bone='',
            water='',
            muscle='',
            fat='',
            heart_rate='',
            weight='',
            height='',
            age=''
    ):
        """
        阿里体育数据中心用户个人信息同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40643

        :param alisp_app_key: 应用appkey
        :param data_id: 三方主键id，唯一标识数据
        :param aliuid: 阿里体育用户id
        :param alisp_sign: 接口签名
        :param alisp_time: 时间戳精确到秒
        :param time: 日期 格式：y-m-d h:i:s
        :param metabolize: 基础代谢率
        :param protein: 蛋白质含量
        :param bone: 骨量
        :param water: 水分率
        :param muscle: 肌肉率
        :param fat: 体脂率
        :param heart_rate: 静息心率，单位：次/每分
        :param weight: 体重，单位kg
        :param height: 身高，单位m
        :param age: 年龄
        """
        return self._top_request(
            "alibaba.alisports.data.sports.syncuserdata",
            {
                "alisp_app_key": alisp_app_key,
                "data_id": data_id,
                "aliuid": aliuid,
                "alisp_sign": alisp_sign,
                "alisp_time": alisp_time,
                "time": time,
                "metabolize": metabolize,
                "protein": protein,
                "bone": bone,
                "water": water,
                "muscle": muscle,
                "fat": fat,
                "heart_rate": heart_rate,
                "weight": weight,
                "height": height,
                "age": age
            }
        )

    def alibaba_alisports_data_sports_syncsleepdata(
            self,
            alisp_app_key,
            stime,
            all_time,
            aliuid,
            alisp_sign,
            alisp_time,
            etime,
            sober_time='',
            shallow_time='',
            deep_time=''
    ):
        """
        阿里体育数据中心用户睡眠数据同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40644

        :param alisp_app_key: 应用appkey
        :param stime: 入睡时间，格式：y-m-d h:i:s
        :param all_time: 睡眠总时间，单位：小时
        :param aliuid: 阿里体育用户id
        :param alisp_sign: 接口签名
        :param alisp_time: 时间戳精确到秒
        :param etime: 醒来时间，格式：y-m-d h:i:s
        :param sober_time: 清醒时间，单位：小时
        :param shallow_time: 浅度睡眠时间，单位：小时
        :param deep_time: 深度睡眠时间，单位：小时
        """
        return self._top_request(
            "alibaba.alisports.data.sports.syncsleepdata",
            {
                "alisp_app_key": alisp_app_key,
                "stime": stime,
                "all_time": all_time,
                "aliuid": aliuid,
                "alisp_sign": alisp_sign,
                "alisp_time": alisp_time,
                "etime": etime,
                "sober_time": sober_time,
                "shallow_time": shallow_time,
                "deep_time": deep_time
            }
        )

    def alibaba_alisports_ldl_message_push(
            self,
            device_token,
            device_type,
            title,
            message
    ):
        """
        乐动力消息推送服务
        调用agoo进行消息推送
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41262

        :param device_token: deviceToken
        :param device_type: 0 Android 1 iOS
        :param title: 消息标题
        :param message: 消息内容
        """
        return self._top_request(
            "alibaba.alisports.ldl.message.push",
            {
                "device_token": device_token,
                "device_type": device_type,
                "title": title,
                "message": message
            }
        )

    def alibaba_alisports_data_sports_syncmatchdata(
            self,
            alisp_app_key,
            score,
            match_group,
            card_id,
            card_type,
            type,
            gender,
            name,
            match,
            match_type,
            num,
            alisp_sign,
            alisp_time,
            match_time,
            country='',
            birthday='',
            mobile='',
            ranking='',
            aliuid='',
            gunshot_score='',
            gunshot_ranking='',
            speed='',
            project='',
            sub_score='',
            sub_point=''
    ):
        """
        阿里体育数据中心用户比赛数据同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41267

        :param alisp_app_key: 应用appkey
        :param score: 成绩(比赛用时)
        :param match_group: 组别 1001半程马拉松  1002全程马拉松
        :param card_id: 证件ID
        :param card_type: 证件类型 1身份证 2军官证 4护照 8台胞证 16港澳通行证 32未设置  64 其他
        :param type: 类型：1专业 2业余
        :param gender: 性别 0未知 1男 2女
        :param name: 姓名
        :param match: 比赛名（展示用）
        :param match_type: 比赛类型 1马拉松
        :param num: 参赛号
        :param alisp_sign: 接口签名
        :param alisp_time: 时间戳精确到秒
        :param match_time: 比赛日期 格式：Y-m-d
        :param country: 国家
        :param birthday: 出生日期 格式：Y-m-d
        :param mobile: 手机号
        :param ranking: 排名
        :param aliuid: 阿里体育用户id
        :param gunshot_score: 枪声成绩
        :param gunshot_ranking: 枪声排名
        :param speed: 平均配速
        :param project: 展示用，比如：男子半程马拉松
        :param sub_score: 比如马拉松 5KM 10KM 15KM分段成绩，json key->value 格式
        :param sub_point: 比如马拉松 5KM 10KM 15KM分段时间点，json key->value 格式
        """
        return self._top_request(
            "alibaba.alisports.data.sports.syncmatchdata",
            {
                "alisp_app_key": alisp_app_key,
                "score": score,
                "match_group": match_group,
                "card_id": card_id,
                "card_type": card_type,
                "type": type,
                "gender": gender,
                "name": name,
                "match": match,
                "match_type": match_type,
                "num": num,
                "alisp_sign": alisp_sign,
                "alisp_time": alisp_time,
                "match_time": match_time,
                "country": country,
                "birthday": birthday,
                "mobile": mobile,
                "ranking": ranking,
                "aliuid": aliuid,
                "gunshot_score": gunshot_score,
                "gunshot_ranking": gunshot_ranking,
                "speed": speed,
                "project": project,
                "sub_score": sub_score,
                "sub_point": sub_point
            }
        )

    def alibaba_alisports_passport_account_bindthirdid(
            self,
            alisp_app_key,
            alisp_time,
            alisp_sign,
            aliuid,
            app_uid,
            mobile=''
    ):
        """
        阿里体育三方ID绑定接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41315

        :param alisp_app_key: 业务方appkey
        :param alisp_time: 时间戳精确到秒
        :param alisp_sign: 接口签名
        :param aliuid: 阿里体育用户ID
        :param app_uid: 三方ID
        :param mobile: 手机号
        """
        return self._top_request(
            "alibaba.alisports.passport.account.bindthirdid",
            {
                "alisp_app_key": alisp_app_key,
                "alisp_time": alisp_time,
                "alisp_sign": alisp_sign,
                "aliuid": aliuid,
                "app_uid": app_uid,
                "mobile": mobile
            }
        )


class TbDianZiFaPiao(DingTalkBaseAPI):
    """
    电子发票
    """

    def alibaba_einvoice_createreq(
            self,
            business_type,
            platform_code,
            platform_tid,
            serial_no,
            payee_address,
            payee_name,
            invoice_amount,
            invoice_items,
            invoice_type,
            payee_register_no,
            payer_name,
            sum_price,
            sum_tax,
            erp_tid='',
            payee_bankaccount='',
            payer_register_no='',
            payee_operator='',
            invoice_memo='',
            invoice_time='',
            normal_invoice_code='',
            normal_invoice_no='',
            payer_address='',
            payer_bankaccount='',
            payer_email='',
            payer_phone='',
            payee_checker='',
            payee_receiver='',
            payee_phone='',
            apply_id='',
            out_shop_name='',
            invoice_kind='0',
            red_notice_no='',
            request_role='',
            distribution_tid=''
    ):
        """
        ERP开票请求接口
        ERP发起开票请求
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25794

        :param business_type: 默认：0。对于商家对个人开具，为0;对于商家对企业开具，为1;
        :param platform_code: 电商平台代码。TB=淘宝 、TM=天猫 、JD=京东、DD=当当、PP=拍拍、YX=易讯、EBAY=ebay、QQ=QQ网购、AMAZON=亚马逊、SN=苏宁、GM=国美、WPH=唯品会、JM=聚美、LF=乐蜂、MGJ=蘑菇街、JS=聚尚、PX=拍鞋、YT=银泰、YHD=1号店、VANCL=凡客、YL=邮乐、YG=优购、1688=阿里巴巴、POS=POS门店、OTHER=其他,  (只传英文编码)
        :param platform_tid: 电商平台对应的主订单号
        :param serial_no: 开票流水号，唯一标志开票请求。如果两次请求流水号相同，则表示重复请求。请调用平台统一流水号获取接口，alibaba.einvoice.serialno.generate。
        :param payee_address: 开票方地址(新版中为必传)
        :param payee_name: 开票方名称，公司名(如:XX商城)
        :param invoice_amount: 开票金额； <span style='color:red;font-weight: bold;'>当开红票时，该字段为负数</span>
        :param invoice_items: 电子发票明细
        :param invoice_type: 发票(开票)类型，蓝票blue,红票red，默认blue
        :param payee_register_no: 收款方税务登记证号
        :param payer_name: 付款方名称, 对应发票台头
        :param sum_price: 合计金额(新版中为必传) <span style='color:red;font-weight: bold;'>当开红票时，该字段为负数</span>
        :param sum_tax: 合计税额 <span style='color:red;font-weight: bold;'>当开红票时，该字段为负数</span>
        :param erp_tid: ERP系统中的单据号。如果没有erp的唯一单据号。建议使用platform_code+”_”+ platform_tid的组合方式
        :param payee_bankaccount: 开票方银行及 帐号
        :param payer_register_no: 付款方税务登记证号。对企业开具电子发票时必填。
        :param payee_operator: 开票人
        :param invoice_memo: 发票备注，有些省市会把此信息打印到PDF中
        :param invoice_time: 开票日期, 格式'YYYY-MM-DD HH:SS:MM'
        :param normal_invoice_code: 原发票代码(开红票时传入)
        :param normal_invoice_no: 原发票号码(开红票时传入)
        :param payer_address: 消费者地址
        :param payer_bankaccount: 付款方开票开户银行及账号
        :param payer_email: 消费者电子邮箱
        :param payer_phone: 消费者联系电话
        :param payee_checker: 复核人
        :param payee_receiver: 收款人
        :param payee_phone: 收款方电话
        :param apply_id: 开票申请ID，接收了开票申请消息后，需要把apply_id带上
        :param out_shop_name: 外部平台店铺名称，需要在阿里发票平台配置，只有当platform_code不为TB和TM时，这个字段才生效。注意：后台配置的店铺平台必须和入参platform_code一致
        :param invoice_kind: 发票种类，0=电子发票,1=纸质发票,2=专票。注意：未订购纸票服务的税号无法开具纸票
        :param red_notice_no: 红字通知单号，专票冲红时需要，商家跟税局申请
        :param request_role: 开票角色，supplier=供应商，只有platform_code=TB|TM时生效，供应商开票时允许使用A店铺开具B店铺的订单号
        :param distribution_tid: 分销订单号，request_role=supplier供应商开票时必填，分销订单号必须属于platform_tid，同时分销订单号的供应商必须和开票的授权账号一致
        """
        return self._top_request(
            "alibaba.einvoice.createreq",
            {
                "business_type": business_type,
                "platform_code": platform_code,
                "platform_tid": platform_tid,
                "serial_no": serial_no,
                "payee_address": payee_address,
                "payee_name": payee_name,
                "invoice_amount": invoice_amount,
                "invoice_items": invoice_items,
                "invoice_type": invoice_type,
                "payee_register_no": payee_register_no,
                "payer_name": payer_name,
                "sum_price": sum_price,
                "sum_tax": sum_tax,
                "erp_tid": erp_tid,
                "payee_bankaccount": payee_bankaccount,
                "payer_register_no": payer_register_no,
                "payee_operator": payee_operator,
                "invoice_memo": invoice_memo,
                "invoice_time": invoice_time,
                "normal_invoice_code": normal_invoice_code,
                "normal_invoice_no": normal_invoice_no,
                "payer_address": payer_address,
                "payer_bankaccount": payer_bankaccount,
                "payer_email": payer_email,
                "payer_phone": payer_phone,
                "payee_checker": payee_checker,
                "payee_receiver": payee_receiver,
                "payee_phone": payee_phone,
                "apply_id": apply_id,
                "out_shop_name": out_shop_name,
                "invoice_kind": invoice_kind,
                "red_notice_no": red_notice_no,
                "request_role": request_role,
                "distribution_tid": distribution_tid
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_einvoice_create_result_get(
            self,
            payee_register_no,
            serial_no='',
            platform_code='',
            platform_tid='',
            out_shop_name=''
    ):
        """
        ERP开票结果获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25796

        :param payee_register_no: 收款方税务登记证号
        :param serial_no: 流水号 (serial_no)和(platform_code,platform_tid)必须填写其中一组,serial_no优先级更高
        :param platform_code: 电商平台代码。淘宝：taobao，天猫：tmall
        :param platform_tid: 电商平台对应的订单号
        :param out_shop_name: 外部平台店铺名称，需要在阿里发票平台配置，只有当platform_code不为TB和TM时，这个字段才生效。注意：后台配置的店铺平台必须和入参platform_code一致
        """
        return self._top_request(
            "alibaba.einvoice.create.result.get",
            {
                "payee_register_no": payee_register_no,
                "serial_no": serial_no,
                "platform_code": platform_code,
                "platform_tid": platform_tid,
                "out_shop_name": out_shop_name
            },
            result_processor=lambda x: x["invoice_result_list"]
        )

    def alibaba_einvoice_create_results_increment_get(
            self,
            start_modified,
            payee_register_no,
            end_modified,
            status='',
            page_size='',
            page_no=''
    ):
        """
        ERP增量开票结果获取
        增量开票结果获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=25797

        :param start_modified: 起始查询时间
        :param payee_register_no: 收款方税务登记证号
        :param end_modified: 终止查询时间
        :param status: 开票状态 (waiting = 开票中) 、(create_success = 开票成功)、(create_failed = 开票失败)
        :param page_size: 页面大小(不能超过200)
        :param page_no: 显示的页码
        """
        return self._top_request(
            "alibaba.einvoice.create.results.increment.get",
            {
                "start_modified": start_modified,
                "payee_register_no": payee_register_no,
                "end_modified": end_modified,
                "status": status,
                "page_size": page_size,
                "page_no": page_no
            }
        )

    def alibaba_einvoice_hxsecret(
            self
    ):
        """
        获取航信加密字符串
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27036

        """
        return self._top_request(
            "alibaba.einvoice.hxsecret"
        )

    def alibaba_einvoice_proxy_return(
            self,
            create_result,
            req_index,
            platform_code='',
            invoice_amount='',
            ciphertext='',
            payee_register_no='',
            qr_code='',
            erp_tid='',
            file_data_type='',
            invoice_no='',
            invoice_date='',
            invoice_file_data='',
            serial_no='',
            anti_fake_code='',
            device_no='',
            invoice_code='',
            platform_tid='',
            biz_error_code='',
            biz_error_msg=''
    ):
        """
        E-proxy回传开票结果（没有pdf数据）
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        开票商返回开票结果数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27101

        :param create_result: 开票结果'success'或者'fail'
        :param req_index: 开票请求的唯一索引
        :param platform_code: 电商平台身份标识码，TB=淘宝 、TM=天猫 、JD=京东、DD=当当、PP=拍拍、YX=易讯、EBAY=ebay、QQ=QQ网购、AMAZON=亚马逊、SN=苏宁、GM=国美、WPH=唯品会、JM=聚美、LF=乐蜂、MGJ=蘑菇街、JS=聚尚、PX=拍鞋、YT=银泰、YHD=1号店、VANCL=凡客、YL=邮乐、YG=优购、1688=阿里巴巴、POS=POS门店、OTHER=其他,  (只传英文编码)
        :param invoice_amount: 开票金额
        :param ciphertext: 发票密文，密码区的字符串
        :param payee_register_no: 收款方税务登记证号
        :param qr_code: 二维码
        :param erp_tid: erp自定义单据号
        :param file_data_type: 文件类型(pdf,jpg,png)
        :param invoice_no: 发票号码
        :param invoice_date: 发票日期
        :param invoice_file_data: 发票文件PDF内容，PDF的byte[]字段串。
        :param serial_no: 流水号
        :param anti_fake_code: 防伪码
        :param device_no: 税控设备编号(新版电子发票有)
        :param invoice_code: 发票代码
        :param platform_tid: 电商平台对应的订单号
        :param biz_error_code: 错误码
        :param biz_error_msg: 错误信息
        """
        return self._top_request(
            "alibaba.einvoice.proxy.return",
            {
                "create_result": create_result,
                "req_index": req_index,
                "platform_code": platform_code,
                "invoice_amount": invoice_amount,
                "ciphertext": ciphertext,
                "payee_register_no": payee_register_no,
                "qr_code": qr_code,
                "erp_tid": erp_tid,
                "file_data_type": file_data_type,
                "invoice_no": invoice_no,
                "invoice_date": invoice_date,
                "invoice_file_data": invoice_file_data,
                "serial_no": serial_no,
                "anti_fake_code": anti_fake_code,
                "device_no": device_no,
                "invoice_code": invoice_code,
                "platform_tid": platform_tid,
                "biz_error_code": biz_error_code,
                "biz_error_msg": biz_error_msg
            }
        )

    def alibaba_einvoice_regist_get(
            self,
            regist_id
    ):
        """
        查询商家入驻信息
        开票服务商查询商家入驻信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27103

        :param regist_id: 入驻流水ID
        """
        return self._top_request(
            "alibaba.einvoice.regist.get",
            {
                "regist_id": regist_id
            }
        )

    def alibaba_einvoice_regist_update(
            self,
            regist_id,
            status,
            ex_info='',
            attach_file=''
    ):
        """
        商家入驻申请状态回传
        开票服务商回传商家入驻申请的处理状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27104

        :param regist_id: 商家入驻申请流水ID
        :param status: 1:等待服务商接单,2:服务商已接单,电子发票税务准备,3:服务商拒绝接单,返回商家重新提交申请,4:电子发票税务准备完成,等待税控设备,5:税控设备部署完成,等待验收,6:其它异常需要人工介入,0:验收通过,完成入驻
        :param ex_info: 扩展信息，必传且要求 json 格式字符串
        :param attach_file: 附件内容
        """
        return self._top_request(
            "alibaba.einvoice.regist.update",
            {
                "regist_id": regist_id,
                "status": status,
                "ex_info": ex_info,
                "attach_file": attach_file
            }
        )

    def alibaba_einvoice_apply_get(
            self,
            platform_tid,
            apply_id=''
    ):
        """
        开票申请数据获取接口
        ERP获取开票申请数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27107

        :param platform_tid: 平台订单号
        :param apply_id: 开票申请ID，跟消息中的apply_id对应，传入applyId后，只会返回一条开票申请消息
        """
        return self._top_request(
            "alibaba.einvoice.apply.get",
            {
                "platform_tid": platform_tid,
                "apply_id": apply_id
            }
        )

    def alibaba_einvoice_serialno_generate(
            self
    ):
        """
        获取统一开票流水号
        erp调用开票请求时需要一个开票流水号，此接口就提供了统一的开票流水号，避免了不同系统的冲突
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27322

        """
        return self._top_request(
            "alibaba.einvoice.serialno.generate",
            result_processor=lambda x: x["serial_no"]
        )

    def alibaba_einvoice_serialno_batch_generate(
            self
    ):
        """
        开票流水号批量生成接口
        批量获取开票流水号接口。此接口1次返回1000条开票流水号，每个应用每天限流1000次调用。
        优先使用alibaba.einvoice.serial.generate。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27323

        """
        return self._top_request(
            "alibaba.einvoice.serialno.batch.generate",
            result_processor=lambda x: x["serial_no_list"]
        )

    def alibaba_einvoice_unitrefund_update(
            self,
            order_id='',
            payee_register_no='',
            operate='',
            reason=''
    ):
        """
        税控单元退款审核结果
        开票服务商回传税控单元退款审核结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27618

        :param order_id: 订单id
        :param payee_register_no: 纳税人识别号
        :param operate: 操作:1-同意,2-拒绝
        :param reason: 核实原因
        """
        return self._top_request(
            "alibaba.einvoice.unitrefund.update",
            {
                "order_id": order_id,
                "payee_register_no": payee_register_no,
                "operate": operate,
                "reason": reason
            }
        )

    def alibaba_einvoice_unitbuy_update(
            self,
            order_id='',
            payee_register_no='',
            operate='',
            tax_disk_no='',
            ex_info=''
    ):
        """
        更新税控单元部署进度
        开票服务商更新税控单元部署进度
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27619

        :param order_id: 订单编号
        :param payee_register_no: 税号
        :param operate: 操作类型,1-部署完成;2-更换盘;3-释放单元
        :param tax_disk_no: 税控盘编号
        :param ex_info: 扩展信息
        """
        return self._top_request(
            "alibaba.einvoice.unitbuy.update",
            {
                "order_id": order_id,
                "payee_register_no": payee_register_no,
                "operate": operate,
                "tax_disk_no": tax_disk_no,
                "ex_info": ex_info
            }
        )

    def alibaba_einvoice_dyn_group(
            self
    ):
        """
        发票动态组配置
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        读取发票动态组配置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27857

        """
        return self._top_request(
            "alibaba.einvoice.dyn.group"
        )

    def alibaba_einvoice_merchant_createreq(
            self,
            business_type,
            platform_code,
            platform_tid,
            serial_no,
            payee_address,
            payee_name,
            payee_operator,
            invoice_amount,
            invoice_items,
            invoice_type,
            payee_register_no,
            payer_name,
            sum_price,
            sum_tax,
            erp_tid='',
            payee_bankaccount='',
            payer_register_no='',
            invoice_memo='',
            normal_invoice_code='',
            normal_invoice_no='',
            payer_address='',
            payer_bankaccount='',
            payer_email='',
            payer_phone='',
            payee_checker='',
            payee_receiver='',
            payee_phone='',
            apply_id='',
            invoice_kind='0',
            red_notice_no=''
    ):
        """
        商家自研ERP开票请求接口
        商家自研ERP发起开票请求，无需授权，API只能使用商家入驻的税号进行开票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28290

        :param business_type: 默认：0。对于商家对个人开具，为0;对于商家对企业开具，为1;
        :param platform_code: 电商平台代码。TB=淘宝 、TM=天猫 、JD=京东、DD=当当、PP=拍拍、YX=易讯、EBAY=ebay、QQ=QQ网购、AMAZON=亚马逊、SN=苏宁、GM=国美、WPH=唯品会、JM=聚美、LF=乐蜂、MGJ=蘑菇街、JS=聚尚、PX=拍鞋、YT=银泰、YHD=1号店、VANCL=凡客、YL=邮乐、YG=优购、1688=阿里巴巴、POS=POS门店、OTHER=其他,  (只传英文编码)
        :param platform_tid: 电商平台对应的主订单号
        :param serial_no: 开票流水号，唯一标志开票请求。如果两次请求流水号相同，则表示重复请求。请调用平台统一流水号获取接口，alibaba.einvoice.serialno.generate。
        :param payee_address: 开票方地址(新版中为必传)
        :param payee_name: 开票方名称，公司名(如:XX商城)
        :param payee_operator: 开票人
        :param invoice_amount: 开票金额； <span style='color:red;font-weight: bold;'>当开红票时，该字段为负数</span>
        :param invoice_items: 电子发票明细
        :param invoice_type: 发票(开票)类型，蓝票blue,红票red，默认blue
        :param payee_register_no: 收款方税务登记证号
        :param payer_name: 付款方名称, 对应发票台头
        :param sum_price: 合计金额(新版中为必传) <span style='color:red;font-weight: bold;'>当开红票时，该字段为负数</span>
        :param sum_tax: 合计税额 <span style='color:red;font-weight: bold;'>当开红票时，该字段为负数</span>
        :param erp_tid: ERP系统中的单据号。如果没有erp的唯一单据号。建议使用platform_code+”_”+ platform_tid的组合方式
        :param payee_bankaccount: 开票方银行及 帐号
        :param payer_register_no: 付款方税务登记证号。对企业开具电子发票时必填。目前北京地区暂未开放对企业开具电子发票，若北京地区放开后，对于向企业开具的情况，付款方税务登记证号和名称也不能为空
        :param invoice_memo: 发票备注，有些省市会把此信息打印到PDF中
        :param normal_invoice_code: 原发票代码(开红票时传入)
        :param normal_invoice_no: 原发票号码(开红票时传入)
        :param payer_address: 消费者地址
        :param payer_bankaccount: 付款方开票开户银行及账号
        :param payer_email: 消费者电子邮箱
        :param payer_phone: 消费者联系电话
        :param payee_checker: 复核人
        :param payee_receiver: 收款人
        :param payee_phone: 收款方电话
        :param apply_id: 开票申请ID，接收了开票申请消息后，需要把apply_id带上
        :param invoice_kind: 发票种类，0=电子发票,1=纸质发票,2=专票
        :param red_notice_no: 红字通知单号，冲红时需要，商家跟税局申请
        """
        return self._top_request(
            "alibaba.einvoice.merchant.createreq",
            {
                "business_type": business_type,
                "platform_code": platform_code,
                "platform_tid": platform_tid,
                "serial_no": serial_no,
                "payee_address": payee_address,
                "payee_name": payee_name,
                "payee_operator": payee_operator,
                "invoice_amount": invoice_amount,
                "invoice_items": invoice_items,
                "invoice_type": invoice_type,
                "payee_register_no": payee_register_no,
                "payer_name": payer_name,
                "sum_price": sum_price,
                "sum_tax": sum_tax,
                "erp_tid": erp_tid,
                "payee_bankaccount": payee_bankaccount,
                "payer_register_no": payer_register_no,
                "invoice_memo": invoice_memo,
                "normal_invoice_code": normal_invoice_code,
                "normal_invoice_no": normal_invoice_no,
                "payer_address": payer_address,
                "payer_bankaccount": payer_bankaccount,
                "payer_email": payer_email,
                "payer_phone": payer_phone,
                "payee_checker": payee_checker,
                "payee_receiver": payee_receiver,
                "payee_phone": payee_phone,
                "apply_id": apply_id,
                "invoice_kind": invoice_kind,
                "red_notice_no": red_notice_no
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_einvoice_merchant_result_get(
            self,
            payee_register_no,
            serial_no='',
            platform_code='',
            platform_tid=''
    ):
        """
        商家自研ERP开票结果获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28291

        :param payee_register_no: 收款方税务登记证号
        :param serial_no: 流水号 (serial_no)和(platform_code,platform_tid)必须填写其中一组,serial_no优先级更高
        :param platform_code: 电商平台代码。淘宝：taobao，天猫：tmall
        :param platform_tid: 电商平台对应的订单号
        """
        return self._top_request(
            "alibaba.einvoice.merchant.result.get",
            {
                "payee_register_no": payee_register_no,
                "serial_no": serial_no,
                "platform_code": platform_code,
                "platform_tid": platform_tid
            },
            result_processor=lambda x: x["invoice_result_list"]
        )

    def alibaba_einvoice_merchant_results_increment_get(
            self,
            start_modified,
            payee_register_no,
            end_modified,
            status='',
            page_size='',
            page_no=''
    ):
        """
        商家自研ERP增量开票结果获取
        商家自研增量开票结果获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28292

        :param start_modified: 起始查询时间
        :param payee_register_no: 收款方税务登记证号
        :param end_modified: 终止查询时间
        :param status: 开票状态 (waiting = 开票中) 、(create_success = 开票成功)、(create_failed = 开票失败)
        :param page_size: 页面大小(不能超过200)
        :param page_no: 显示的页码
        """
        return self._top_request(
            "alibaba.einvoice.merchant.results.increment.get",
            {
                "start_modified": start_modified,
                "payee_register_no": payee_register_no,
                "end_modified": end_modified,
                "status": status,
                "page_size": page_size,
                "page_no": page_no
            }
        )

    def alibaba_einvoice_apply_test(
            self,
            business_type,
            platform_tid,
            payer_name,
            payer_register_no=''
    ):
        """
        开票申请消息测试接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29866

        :param business_type: 0=个人，1=企业
        :param platform_tid: 订单号
        :param payer_name: 买家抬头
        :param payer_register_no: 买家税号
        """
        return self._top_request(
            "alibaba.einvoice.apply.test",
            {
                "business_type": business_type,
                "platform_tid": platform_tid,
                "payer_name": payer_name,
                "payer_register_no": payer_register_no
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_einvoice_merchant_closereq(
            self,
            serial_no,
            payee_register_no
    ):
        """
        关闭失败开票请求
        关闭失败开票请求，避免造成重复开票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30123

        :param serial_no: 流水号
        :param payee_register_no: 税号
        """
        return self._top_request(
            "alibaba.einvoice.merchant.closereq",
            {
                "serial_no": serial_no,
                "payee_register_no": payee_register_no
            }
        )

    def alibaba_einvoice_closereq(
            self,
            serial_no,
            payee_register_no
    ):
        """
        关闭开票失败请求（失败列表可重试）
        关闭失败开票请求，避免造成重复开票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30289

        :param serial_no: 流水号
        :param payee_register_no: 税号
        """
        return self._top_request(
            "alibaba.einvoice.closereq",
            {
                "serial_no": serial_no,
                "payee_register_no": payee_register_no
            }
        )

    def alibaba_einvoice_bill_einvoice_list(
            self,
            payee_register_no,
            order_id,
            platform='default',
            einvoice_type=''
    ):
        """
        扫码开票列表
        扫码开票列表，包括用户扫二维码开票和结算单同步前的开票数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31271

        :param payee_register_no: 收款方税号
        :param order_id: 订单ID
        :param platform: 结算单同步的ERP平台系统
        :param einvoice_type: 开票状态：0=未开票，1=开票中，3=开蓝成功，4=开蓝失败。不填获取全部
        """
        return self._top_request(
            "alibaba.einvoice.bill.einvoice.list",
            {
                "payee_register_no": payee_register_no,
                "order_id": order_id,
                "platform": platform,
                "einvoice_type": einvoice_type
            }
        )

    def alibaba_einvoice_qrcode_create(
            self,
            invoice_items,
            payee_register_no,
            order_id,
            sum_price,
            source_id,
            qr_type,
            qr_logo='',
            width='',
            height='',
            platform='default'
    ):
        """
        扫码开票二维码生成
        扫码开票功能中的二维码生成接口，pos机等发起请求生成二维码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31273

        :param invoice_items: 发票商品明细
        :param payee_register_no: 收款方税务登记证号
        :param order_id: 开票的订单号，同结算单订单号
        :param sum_price: 开票金额
        :param source_id: 请求方唯一标识ID，例如POS机编码
        :param qr_type: 二维码返回类型：1=二维码背后的URL，2=二维码图片CDN URL，3=二维码二进制数据流
        :param qr_logo: 二维码图片中间的logo
        :param width: 二维码图片宽度，默认=450
        :param height: 二维码图片高度，默认=450
        :param platform: 请求方ERP系统平台，同结算单同步的platform，不填默认=platform
        """
        return self._top_request(
            "alibaba.einvoice.qrcode.create",
            {
                "invoice_items": invoice_items,
                "payee_register_no": payee_register_no,
                "order_id": order_id,
                "sum_price": sum_price,
                "source_id": source_id,
                "qr_type": qr_type,
                "qr_logo": qr_logo,
                "width": width,
                "height": height,
                "platform": platform
            }
        )

    def alibaba_einvoice_bill_forword_create(
            self,
            invoice_items,
            order_id,
            payee_register_no,
            sum_price,
            payer_name,
            payer_register_no,
            phone_number,
            platform='default',
            seri_no='',
            shop_name='',
            payer_address='',
            payer_bankaccount='',
            payer_email='',
            payer_phone='',
            business_type='1'
    ):
        """
        扫码开票结算单同步前开发票
        扫码开票结算单同步前开发票，会将数据同步到结算单中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31274

        :param invoice_items: 发票商品明细
        :param order_id: 结算单订单ID
        :param payee_register_no: 收款方税号
        :param sum_price: 开票金额，和明细累计总金额需相同
        :param payer_name: 付款方发票抬头
        :param payer_register_no: 付款方税号
        :param phone_number: 个人电话，接收发票通知
        :param platform: 调用平台，用以区分不同的订单ID，不填默认为default
        :param seri_no: 开票流水号，若不填则系统默认生成
        :param shop_name: 店铺名称
        :param payer_address: 付款方地址
        :param payer_bankaccount: 付款方银行账户
        :param payer_email: 付款方开票邮件通知邮箱
        :param payer_phone: 企业电话
        :param business_type: 企业或个人抬头发票，0=个人，1=企业。默认=1
        """
        return self._top_request(
            "alibaba.einvoice.bill.forword.create",
            {
                "invoice_items": invoice_items,
                "order_id": order_id,
                "payee_register_no": payee_register_no,
                "sum_price": sum_price,
                "payer_name": payer_name,
                "payer_register_no": payer_register_no,
                "phone_number": phone_number,
                "platform": platform,
                "seri_no": seri_no,
                "shop_name": shop_name,
                "payer_address": payer_address,
                "payer_bankaccount": payer_bankaccount,
                "payer_email": payer_email,
                "payer_phone": payer_phone,
                "business_type": business_type
            }
        )

    def alibaba_einvoice_bill_sync(
            self,
            invoice_items,
            status,
            order_date,
            shop_name,
            payee_register_no,
            order_id,
            sum_price,
            platform,
            qrcode=None,
            brand_name='',
            invoice_price='',
            shop_platform=''
    ):
        """
        结算单同步
        电子发票业务，服务商同步结算单，包括结算单的增删改功能。最终用于开发票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31288

        :param invoice_items: 结算商品单明细列表
        :param status: 结算单同步操作：=1插入，=2更新，=3废弃删除
        :param order_date: 结算单订单日期
        :param shop_name: 店铺名称，与后台店铺名称保持一致
        :param payee_register_no: 税务登记证号
        :param order_id: 结算单订单ID
        :param sum_price: 结算单总价格，小数点后2两位
        :param platform: 调用平台，用于区分同一个税号下多个店铺来源['TB:淘宝','ALIPAY:支付宝','TM:天猫','JD:京东','DD:当当','PP:拍拍','YX:易讯','EBAY:ebay','QQ:QQ网购','AMAZON:亚马逊','SN:苏宁','GM:国美','WPH:唯品会','JM:聚美','LF:乐蜂','MGJ:蘑菇街','JS:聚尚','PX:拍鞋','YT:银泰','YHD:1号店','VANCL:凡客','YL:邮乐','YG:优购','1688:阿里巴巴','POS:POS门店','ELEME:饿了么','OTHER:其他']
        :param qrcode: 生成二维码参数，若不需要生成二维码，则不填
        :param brand_name: 品牌名称，不填默认=shop_name
        :param invoice_price: 结算单可开票总金额（不填=sumPrice），小数点后2两位
        :param shop_platform: 开票店铺的平台，默认等于platform
        """
        return self._top_request(
            "alibaba.einvoice.bill.sync",
            {
                "invoice_items": invoice_items,
                "status": status,
                "order_date": order_date,
                "shop_name": shop_name,
                "payee_register_no": payee_register_no,
                "order_id": order_id,
                "sum_price": sum_price,
                "platform": platform,
                "qrcode": qrcode,
                "brand_name": brand_name,
                "invoice_price": invoice_price,
                "shop_platform": shop_platform
            }
        )

    def alibaba_einvoice_company_get(
            self,
            payee_register_no
    ):
        """
        税号相关企业信息查询
        查询税号入驻的企业信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31696

        :param payee_register_no: 纳税人识别号
        """
        return self._top_request(
            "alibaba.einvoice.company.get",
            {
                "payee_register_no": payee_register_no
            }
        )

    def alibaba_invoice_device_save(
            self,
            paper_device=None
    ):
        """
        保存或更新纸票终端设备信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33205

        :param paper_device: 纸票开票终端设备信息
        """
        return self._top_request(
            "alibaba.invoice.device.save",
            {
                "paper_device": paper_device
            }
        )

    def alibaba_invoice_device_status_update(
            self,
            payee_register_no,
            device_no,
            provider,
            ex_info
    ):
        """
        更新纸票终端设备的登录、在线、就绪等各种状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33206

        :param payee_register_no: 纳税人识别号
        :param device_no: 税盘分机号
        :param provider: 硬件设备提供商：hx=航信，bw=百望
        :param ex_info: 设备状态拓展信息，login_flag:登录状态,0否1是；online_status:设备在线状态，0否1是；free_system_status:免费版设备是否就绪 0否1是；charge_system_status: 收费版设备是否就绪 0否1是
        """
        return self._top_request(
            "alibaba.invoice.device.status.update",
            {
                "payee_register_no": payee_register_no,
                "device_no": device_no,
                "provider": provider,
                "ex_info": ex_info
            }
        )

    def alibaba_einvoice_paper_invalid(
            self,
            invalid_operator,
            invalid_type,
            payee_register_no,
            serial_no,
            invoice_code='',
            invoice_no=''
    ):
        """
        纸票作废接口
        作废一张已开具的纸票，开票日期在当月，产生逆向时作废即可，开票日期跨月则冲红蓝票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40482

        :param invalid_operator: 作废操作人
        :param invalid_type: 作废类型, 0=空白发票(有残缺 的纸张发票，不能做为有效报销)作废, 1=已开发票作废
        :param payee_register_no: 销售方纳税人识别号
        :param serial_no: 开票流水号
        :param invoice_code: 发票代码，空白作废时必填
        :param invoice_no: 发票号码，空白作废时必填
        """
        return self._top_request(
            "alibaba.einvoice.paper.invalid",
            {
                "invalid_operator": invalid_operator,
                "invalid_type": invalid_type,
                "payee_register_no": payee_register_no,
                "serial_no": serial_no,
                "invoice_code": invoice_code,
                "invoice_no": invoice_no
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_einvoice_paper_print(
            self,
            dialog_setting_flag,
            force_print,
            payee_register_no,
            print_flag,
            serial_no
    ):
        """
        纸票打印接口
        打印一张已开具成功的纸票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40483

        :param dialog_setting_flag: 打印框设置，0=不弹打印设置框，1=弹出打印设置框
        :param force_print: 是否强制打印，一般发票只能打印一次，但是因为打印机发票号码与待打印发票号码不一致，导致打印错误，需要重新打印
        :param payee_register_no: 销售方纳税人识别号
        :param print_flag: 打印标记，0=打印发票；1=打印清单。发票明细超过8行时会生成清单页，需要打印清单。
        :param serial_no: 开票流水号
        """
        return self._top_request(
            "alibaba.einvoice.paper.print",
            {
                "dialog_setting_flag": dialog_setting_flag,
                "force_print": force_print,
                "payee_register_no": payee_register_no,
                "print_flag": print_flag,
                "serial_no": serial_no
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_einvoice_item_update(
            self,
            invoice_name='',
            item_id='',
            item_no='',
            sku_id='',
            specification='',
            tax_rate='',
            zero_rate_flag='',
            unit='',
            outer_id='',
            update_sku=''
    ):
        """
        修改商品开票信息
        ERP通过接口将商品的开票信息同步给阿里发票平台，自动开票时将读取这些开票信息，需要联系阿里小二开通对应的权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40969

        :param invoice_name: 商品的开票名称，对应发票的货物劳务名称，值DELETE时表示删除
        :param item_id: 商品id，优先级高于outerId，商品必须归属于店铺，itemId和outerId不能同时为空
        :param item_no: 税收分类编码，需要精确到叶子节点，必须和taxRate同时修改或删除，值DELETE时表示删除
        :param sku_id: skuId，必须是itemId下的sku，填写skuId后，修改和删除sku的开票信息
        :param specification: 规格型号，值DELETE时表示删除
        :param tax_rate: 税率，可选值0，3，4，5，6，10，11，13， 16，17，必须和itemNo同时修改或删除,值为DELETE时表示删除
        :param zero_rate_flag: 0税率标识，只有税率为0的情况才有值，0=出口零税率，1=免税，2=不征收，3=普通零税率，值为DELETE时表示删除
        :param unit: 单位，值DELETE时表示删除
        :param outer_id: 商家外部商品id，如果outerId对应了多个天猫sku，则会更新所有的sku开票信息。itemId和outerId不能同时为空
        :param update_sku: 是否根据outerId更新所有对应sku的开票信息，true=更新，false=开票信息维护在发票平台；自动开票时，根据skuId获取outerId，再根据outerId查询开票信息。outerId不为空时必填
        """
        return self._top_request(
            "alibaba.einvoice.item.update",
            {
                "invoice_name": invoice_name,
                "item_id": item_id,
                "item_no": item_no,
                "sku_id": sku_id,
                "specification": specification,
                "tax_rate": tax_rate,
                "zero_rate_flag": zero_rate_flag,
                "unit": unit,
                "outer_id": outer_id,
                "update_sku": update_sku
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_einvoice_red_createreq(
            self,
            payee_register_no,
            red_serial_no,
            blue_serial_no='',
            invoice_code='',
            invoice_no=''
    ):
        """
        发票冲红接口
        发票冲红接口，通过蓝票流水号或者发票号码+发票代码进行冲红
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41461

        :param payee_register_no: 销售方税号
        :param red_serial_no: 红票流水号
        :param blue_serial_no: 蓝票流水号，优先级高于发票代码+发票号码
        :param invoice_code: 蓝票发票代码
        :param invoice_no: 蓝票发票号码
        """
        return self._top_request(
            "alibaba.einvoice.red.createreq",
            {
                "payee_register_no": payee_register_no,
                "red_serial_no": red_serial_no,
                "blue_serial_no": blue_serial_no,
                "invoice_code": invoice_code,
                "invoice_no": invoice_no
            },
            result_processor=lambda x: x["is_success"]
        )

    def alibaba_invoice_device_regist(
            self,
            invoice_paper_device=None
    ):
        """
        纸票终端设备激活并保存设备信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41538

        :param invoice_paper_device: 纸票开票终端设备信息
        """
        return self._top_request(
            "alibaba.invoice.device.regist",
            {
                "invoice_paper_device": invoice_paper_device
            }
        )

    def alibaba_invoice_device_get(
            self,
            payee_register_no,
            device_no,
            provider
    ):
        """
        纸票终端设备信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41630

        :param payee_register_no: 纳税人识别号
        :param device_no: 税盘分机号
        :param provider: 硬件服务提供商：hx 航天信息，bw 百望
        """
        return self._top_request(
            "alibaba.invoice.device.get",
            {
                "payee_register_no": payee_register_no,
                "device_no": device_no,
                "provider": provider
            }
        )


class TbGuoJiZhanShuJuGuanJia(DingTalkBaseAPI):
    """
    国际站数据管家
    """

    def alibaba_mydata_overview_date_get(
            self
    ):
        """
        我的效果-获取数据周期
        获取数据管家我的效果API可以使用的数据周期
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26908

        """
        return self._top_request(
            "alibaba.mydata.overview.date.get",
            result_processor=lambda x: x["result_list"]
        )

    def alibaba_mydata_overview_industry_get(
            self,
            date_range=None
    ):
        """
        我的效果-获取Top行业列表
        获取数据管家我的效果API可以使用的行业
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26909

        :param date_range: 系统自动生成
        """
        return self._top_request(
            "alibaba.mydata.overview.industry.get",
            {
                "date_range": date_range
            },
            result_processor=lambda x: x["result_list"]
        )

    def alibaba_mydata_overview_indicator_basic_get(
            self,
            date_range,
            industry
    ):
        """
        我的效果-获取公司询盘流量行业表现
        获取公司询盘流量行业表现
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26910

        :param date_range: 要查询的数据周期
        :param industry: 要查询的行业信息
        """
        return self._top_request(
            "alibaba.mydata.overview.indicator.basic.get",
            {
                "date_range": date_range,
                "industry": industry
            }
        )

    def alibaba_mydata_self_keyword_date_get(
            self
    ):
        """
        我的词-获取数据周期
        获取数据管家我的词API可以使用的数据周期
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26911

        """
        return self._top_request(
            "alibaba.mydata.self.keyword.date.get",
            result_processor=lambda x: x["result_list"]
        )

    def alibaba_mydata_industry_keyword_get(
            self,
            keywords,
            properties
    ):
        """
        获取热门搜索词相关表现数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26912

        :param keywords: 查询词列表，模糊匹配最多3个，精确匹配最多10个
        :param properties: 查询选项
        """
        return self._top_request(
            "alibaba.mydata.industry.keyword.get",
            {
                "keywords": keywords,
                "properties": properties
            }
        )

    def alibaba_mydata_self_keyword_effect_month_get(
            self,
            properties=None
    ):
        """
        我的词-获取月统计数据
        获取数据管家我的词月统计数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26913

        :param properties: 查询选项
        """
        return self._top_request(
            "alibaba.mydata.self.keyword.effect.month.get",
            {
                "properties": properties
            }
        )

    def alibaba_mydata_self_keyword_effect_week_get(
            self,
            date_range,
            properties
    ):
        """
        我的词-获取周统计数据
        获取数据管家我的词周统计数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26914

        :param date_range: 要查询的数据周期
        :param properties: 查询选项
        """
        return self._top_request(
            "alibaba.mydata.self.keyword.effect.week.get",
            {
                "date_range": date_range,
                "properties": properties
            }
        )

    def alibaba_mydata_self_product_date_get(
            self,
            statistics_type=''
    ):
        """
        获取客户产品相关表现数据的可用时间范围
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38834

        :param statistics_type: 统计周期类型，可以为'day'，'week'，'month'
        """
        return self._top_request(
            "alibaba.mydata.self.product.date.get",
            {
                "statistics_type": statistics_type
            }
        )

    def alibaba_mydata_self_product_get(
            self,
            statistics_type,
            stat_date,
            product_ids
    ):
        """
        获取客户产品相关表现数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38869

        :param statistics_type: 统计周期，可以为'day', 'week', 'month'
        :param stat_date: 统计日期
        :param product_ids: 待查询产品id列表
        """
        return self._top_request(
            "alibaba.mydata.self.product.get",
            {
                "statistics_type": statistics_type,
                "stat_date": stat_date,
                "product_ids": product_ids
            }
        )


class TbTmallcarcenter(DingTalkBaseAPI):
    """
    tmall-carcenter
    """

    def tmall_carcenter_vehicleinfo_register(
            self,
            vehicle_info
    ):
        """
        车型数据更新
        基本车型信息维护
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27518

        :param vehicle_info: 车型数据对象
        """
        return self._top_request(
            "tmall.carcenter.vehicleinfo.register",
            {
                "vehicle_info": vehicle_info
            }
        )

    def tmall_carcenter_vehicle_chasis_insert(
            self,
            dto=None
    ):
        """
        EPC车型底盘压缩库新增接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31209

        :param dto: 底盘压缩库入参
        """
        return self._top_request(
            "tmall.carcenter.vehicle.chasis.insert",
            {
                "dto": dto
            }
        )

    def tmall_carcenter_vehicle_version_insert(
            self,
            dto=None
    ):
        """
        汽车EPC版本压缩库新增接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31210

        :param dto: 版本压缩库入参
        """
        return self._top_request(
            "tmall.carcenter.vehicle.version.insert",
            {
                "dto": dto
            }
        )

    def tmall_carcenter_vehicle_cvmapping_insert(
            self,
            status='',
            supplier_version_cid='',
            supplier_chassis_cid=''
    ):
        """
        EPC车辆版本信息与底盘信息库关系绑定
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31211

        :param status: 状态
        :param supplier_version_cid: 版本ID
        :param supplier_chassis_cid: 底盘ID
        """
        return self._top_request(
            "tmall.carcenter.vehicle.cvmapping.insert",
            {
                "status": status,
                "supplier_version_cid": supplier_version_cid,
                "supplier_chassis_cid": supplier_chassis_cid
            }
        )


class TbYunosAccount(DingTalkBaseAPI):
    """
    Yunos Account API
    """

    def yunos_account_callapi(
            self,
            api,
            time_stamp,
            params,
            auth_sign,
            version='1'
    ):
        """
        调用YunOS账号开放API
        YunOS账号客户端对外开放的api通过top暴露
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27319

        :param api: 调用的API名称
        :param time_stamp: 时间戳，精确到秒；账号服务端会校验该值与服务器当前时间戳的差值，超过一定范围则拒绝请求
        :param params: 业务参数
        :param auth_sign: 应用签名的MD5值
        :param version: API版本号
        """
        return self._top_request(
            "yunos.account.callapi",
            {
                "api": api,
                "time_stamp": time_stamp,
                "params": params,
                "auth_sign": auth_sign,
                "version": version
            }
        )

    def yunos_ias_sts_ramproxy_checkpermissiontoken(
            self,
            security_token,
            ak,
            sts_action,
            resource,
            request_ip
    ):
        """
        临时token鉴权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31144

        :param security_token: 临时st
        :param ak: 临时ak
        :param sts_action: action
        :param resource: 资源
        :param request_ip: IP
        """
        return self._top_request(
            "yunos.ias.sts.ramproxy.checkpermissiontoken",
            {
                "security_token": security_token,
                "ak": ak,
                "sts_action": sts_action,
                "resource": resource,
                "request_ip": request_ip
            }
        )

    def yunos_ias_sts_ramproxy_decodeststoken(
            self,
            sts_access_key_id,
            security_token
    ):
        """
        临时token解析
        斑马需要解析token令牌
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31145

        :param sts_access_key_id: 临时ak
        :param security_token: 临时token
        """
        return self._top_request(
            "yunos.ias.sts.ramproxy.decodeststoken",
            {
                "sts_access_key_id": sts_access_key_id,
                "security_token": security_token
            }
        )


class TbCaiNiaoGuoGuo(DingTalkBaseAPI):
    """
    菜鸟裹裹API
    """

    def cainiao_nbadd_appointdeliver_feedbackabnormal(
            self,
            mail_no,
            order_id,
            user_id,
            abnormal_code,
            lp_code
    ):
        """
        小件员异常反馈
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29270

        :param mail_no: 运单号
        :param order_id: 订单号
        :param user_id: 小件员工号
        :param abnormal_code: 异常code
        :param lp_code: lpCode
        """
        return self._top_request(
            "cainiao.nbadd.appointdeliver.feedbackabnormal",
            {
                "mail_no": mail_no,
                "order_id": order_id,
                "user_id": user_id,
                "abnormal_code": abnormal_code,
                "lp_code": lp_code
            }
        )

    def cainiao_nbadd_appointdeliver_feedbackcodes(
            self
    ):
        """
        服务质量反馈编码列表
        服务质量反馈编码列表，建议获取数据后缓存在本地，定时刷新即可
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29271

        """
        return self._top_request(
            "cainiao.nbadd.appointdeliver.feedbackcodes"
        )

    def cainiao_endpoint_locker_top_order_withhold(
            self,
            company_code,
            gui_id,
            order_type,
            open_user_id,
            total_fee,
            order_code,
            mail_no,
            extra=''
    ):
        """
        代扣支付
        提供代扣，允许有一笔欠款。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29850

        :param company_code: 柜子公司编码
        :param gui_id: 柜子id
        :param order_type: 订单类型(0-取件业务，1-寄件业务，2-派样业务)
        :param open_user_id: 开放用户id
        :param total_fee: 代扣金额（全额），单位：分
        :param order_code: 柜子订单编码
        :param mail_no: 运单号
        :param extra: 扩展字段
        """
        return self._top_request(
            "cainiao.endpoint.locker.top.order.withhold",
            {
                "company_code": company_code,
                "gui_id": gui_id,
                "order_type": order_type,
                "open_user_id": open_user_id,
                "total_fee": total_fee,
                "order_code": order_code,
                "mail_no": mail_no,
                "extra": extra
            }
        )

    def cainiao_endpoint_locker_top_withhold_query(
            self,
            company_code,
            open_user_id,
            order_type
    ):
        """
        查询能否代扣
        查询是否有代扣欠款，是否签署代扣协议。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29851

        :param company_code: 柜子公司编码
        :param open_user_id: 开放用户Id
        :param order_type: 柜子业务：0-取件业务，1-寄件业务，2-派样业务，3-小件员约柜（在约期内仅能使用一次）4-小件员租柜（在约期内可反复使用）
        """
        return self._top_request(
            "cainiao.endpoint.locker.top.withhold.query",
            {
                "company_code": company_code,
                "open_user_id": open_user_id,
                "order_type": order_type
            }
        )

    def cainiao_nbadd_appointdeliver_getconsigninfo(
            self,
            trade_order_id
    ):
        """
        获取支持定时派送服务发货信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29924

        :param trade_order_id: 淘宝交易订单id
        """
        return self._top_request(
            "cainiao.nbadd.appointdeliver.getconsigninfo",
            {
                "trade_order_id": trade_order_id
            }
        )

    def cainiao_endpoint_locker_top_station_addorupdate(
            self,
            station_info=None
    ):
        """
        增加更新代收点
        新增或者修改代收点相关信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31078

        :param station_info: 站点信息
        """
        return self._top_request(
            "cainiao.endpoint.locker.top.station.addorupdate",
            {
                "station_info": station_info
            }
        )

    def cainiao_endpoint_locker_top_order_tracking_new(
            self,
            track_info
    ):
        """
        事件回传接口
        用于合作公司通知入站、出站信息到菜鸟，共定义了5个操作，1个投件操作，3个取件操作，1个超时提醒。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31195

        :param track_info: 回传信息
        """
        return self._top_request(
            "cainiao.endpoint.locker.top.order.tracking.new",
            {
                "track_info": track_info
            }
        )

    def cainiao_endpoint_locker_top_order_noticesend_query(
            self,
            station_id,
            mail_no,
            getter_phone=''
    ):
        """
        查询订单是否由裹裹发送消息
        合作公司查询消息发送的接口，判断是否裹裹发送消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31196

        :param station_id: 站点id
        :param mail_no: 运单号
        :param getter_phone: 收件人手机号
        """
        return self._top_request(
            "cainiao.endpoint.locker.top.order.noticesend.query",
            {
                "station_id": station_id,
                "mail_no": mail_no,
                "getter_phone": getter_phone
            }
        )

    def cainiao_endpoint_locker_top_order_notice(
            self,
            order_code,
            station_id,
            mail_no,
            scene_code
    ):
        """
        手动触发发短信
        合作公司对订单手动触发短信，有次数限制
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31197

        :param order_code: 合作公司唯一订单编号
        :param station_id: 站点ID
        :param mail_no: 运单号
        :param scene_code: 场景编号：0：重发短信，1：催取短信
        """
        return self._top_request(
            "cainiao.endpoint.locker.top.order.notice",
            {
                "order_code": order_code,
                "station_id": station_id,
                "mail_no": mail_no,
                "scene_code": scene_code
            }
        )


class TbDuJiaQianZhengGuanLi(DingTalkBaseAPI):
    """
    度假-签证管理API
    """

    def taobao_alitrip_travel_normalvisa_storeuser(
            self,
            biz_order_id,
            normal_visa_user_unit_list
    ):
        """
        代填办理人信息
        卖家代填买家填写办理人信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27012

        :param biz_order_id: 订单id
        :param normal_visa_user_unit_list: 列表：签证人信息列表
        """
        return self._top_request(
            "taobao.alitrip.travel.normalvisa.storeuser",
            {
                "biz_order_id": biz_order_id,
                "normal_visa_user_unit_list": normal_visa_user_unit_list
            }
        )

    def taobao_alitrip_travel_normalvisa_uploadfile(
            self,
            file_bytes,
            file_name,
            biz_order_id
    ):
        """
        上传电子签证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27013

        :param file_bytes: 文件
        :param file_name: 文件名：注意文件名请保证和上传的文件一直
        :param biz_order_id: 订单id
        """
        return self._top_request(
            "taobao.alitrip.travel.normalvisa.uploadfile",
            {
                "file_bytes": file_bytes,
                "file_name": file_name,
                "biz_order_id": biz_order_id
            }
        )

    def taobao_alitrip_travel_normalvisa_updatepersonstauts(
            self,
            normal_visa_update_unit_list,
            biz_order_id
    ):
        """
        更新签证办理进度
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27014

        :param normal_visa_update_unit_list: 更新信息
        :param biz_order_id: 订单号
        """
        return self._top_request(
            "taobao.alitrip.travel.normalvisa.updatepersonstauts",
            {
                "normal_visa_update_unit_list": normal_visa_update_unit_list,
                "biz_order_id": biz_order_id
            }
        )

    def taobao_alitrip_travel_normalvisa_get(
            self,
            biz_order_id=''
    ):
        """
        获取签证记录
        用于获取普通签证的记录信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27018

        :param biz_order_id: 订单号
        """
        return self._top_request(
            "taobao.alitrip.travel.normalvisa.get",
            {
                "biz_order_id": biz_order_id
            }
        )

    def taobao_alitrip_travel_normalvisa_getdetail(
            self,
            biz_order_id=''
    ):
        """
        获取单笔订单的详情
        获取单笔签证的详细记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27019

        :param biz_order_id: 订单id
        """
        return self._top_request(
            "taobao.alitrip.travel.normalvisa.getdetail",
            {
                "biz_order_id": biz_order_id
            }
        )

    def taobao_alitrip_travel_normalvisa_getcompany(
            self,
            param0
    ):
        """
        获取物流公司信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27020

        :param param0: true：取5个重要的物流公司 false：取所有的物流公司
        """
        return self._top_request(
            "taobao.alitrip.travel.normalvisa.getcompany",
            {
                "param0": param0
            }
        )

    def alitrip_travel_visa_applicant_query(
            self,
            param0=None
    ):
        """
        签证申请人查询接口
        签证申请人查询接口，商家可根据条件查询申请人id，用于签证办理
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44042

        :param param0: 请求参数
        """
        return self._top_request(
            "alitrip.travel.visa.applicant.query",
            {
                "param0": param0
            }
        )


class TbALiYinYueYinYueJiaoYi(DingTalkBaseAPI):
    """
    阿里音乐音乐交易API
    """

    def alibaba_music_billing_bizrightservice_orderright_update(
            self,
            target_id,
            right_type,
            source
    ):
        """
        更新权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27756

        :param target_id: 专辑or歌曲id
        :param right_type: 类型:2专辑,0单曲
        :param source: 来源:0虾米,1星球
        """
        return self._top_request(
            "alibaba.music.billing.bizrightservice.orderright.update",
            {
                "target_id": target_id,
                "right_type": right_type,
                "source": source
            }
        )

    def alibaba_music_wechatpay_update(
            self,
            xml_string=''
    ):
        """
        阿里音乐微信支付回调
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27853

        :param xml_string: xml串
        """
        return self._top_request(
            "alibaba.music.wechatpay.update",
            {
                "xml_string": xml_string
            }
        )


class TbALiYinYueYunYingHuoDong(DingTalkBaseAPI):
    """
    阿里音乐运营活动
    """

    def alibaba_xiami_operation_specialshare_get(
            self,
            item_id,
            item_type
    ):
        """
        获取个性化分享配置
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27784

        :param item_id: item的id
        :param item_type: item类型
        """
        return self._top_request(
            "alibaba.xiami.operation.specialshare.get",
            {
                "item_id": item_id,
                "item_type": item_type
            }
        )


class TbCaiNiaoNongCunWuLiu(DingTalkBaseAPI):
    """
    菜鸟农村物流
    """

    def cainiao_ncwl_jhorder_query(
            self,
            param0=None
    ):
        """
        农村物流集货单查询接口
        提供给接入商家，查询农村物流集货单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27588

        :param param0: 1
        """
        return self._top_request(
            "cainiao.ncwl.jhorder.query",
            {
                "param0": param0
            }
        )


class TbTiJianJiGou(DingTalkBaseAPI):
    """
    体检机构API
    """

    def alibaba_alihealth_examination_reserve_confirm(
            self,
            merchant_code='',
            name='',
            reserve_number='',
            gender='',
            birthday='',
            reserve_date='',
            package_code='',
            married='',
            store_id='',
            phone='',
            cert_type='',
            cert_number='',
            company='',
            department='',
            address='',
            add_items=None,
            add_packs=None,
            hava_report=''
    ):
        """
        体检机构对接_体检套餐预定确认
        向体检机构确认用户购买的体检套餐信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27333

        :param merchant_code: 商户唯一码
        :param name: 体检人姓名
        :param reserve_number: 阿里健康预约唯一标识
        :param gender: 性别(0-男;1-女;)
        :param birthday: 出生日期
        :param reserve_date: 预约时间
        :param package_code: 体检套餐编码
        :param married: 婚否(0-未婚; 1-已婚)
        :param store_id: 店铺ID
        :param phone: 电话号码
        :param cert_type: 证件类型(0-身份证; 1-护照; 2-军官证)
        :param cert_number: 证件号
        :param company: 所属公司
        :param department: 所属部门
        :param address: 报告邮寄地址
        :param add_items: 加项列表
        :param add_packs: 加项包列表
        :param hava_report: 0没报告1有报告
        """
        return self._top_request(
            "alibaba.alihealth.examination.reserve.confirm",
            {
                "merchant_code": merchant_code,
                "name": name,
                "reserve_number": reserve_number,
                "gender": gender,
                "birthday": birthday,
                "reserve_date": reserve_date,
                "package_code": package_code,
                "married": married,
                "store_id": store_id,
                "phone": phone,
                "cert_type": cert_type,
                "cert_number": cert_number,
                "company": company,
                "department": department,
                "address": address,
                "add_items": add_items,
                "add_packs": add_packs,
                "hava_report": hava_report
            }
        )

    def alibaba_alihealth_examination_reserve_report(
            self,
            merchant_code,
            reserve_number='',
            check_no='',
            uniq_reserve_code='',
            search_no='',
            search_pwd=''
    ):
        """
        体检机构对接_体检报告查询
        体检机构对接_体检报告获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27336

        :param merchant_code: 商户唯一码
        :param reserve_number: 阿里健康预约唯一标识
        :param check_no: 到检唯一标识
        :param uniq_reserve_code: 体检机构预约唯一标识码
        :param search_no: 查询报告卡号
        :param search_pwd: 查询报告密码
        """
        return self._top_request(
            "alibaba.alihealth.examination.reserve.report",
            {
                "merchant_code": merchant_code,
                "reserve_number": reserve_number,
                "check_no": check_no,
                "uniq_reserve_code": uniq_reserve_code,
                "search_no": search_no,
                "search_pwd": search_pwd
            }
        )

    def alibaba_alihealth_examination_reserve_state(
            self,
            merchant_code='',
            reserve_number='',
            uniq_reserve_code=''
    ):
        """
        体检机构对接_体检状态查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27337

        :param merchant_code: 商户唯一码
        :param reserve_number: 阿里健康预约唯一标识
        :param uniq_reserve_code: 体检机构预约唯一标识码
        """
        return self._top_request(
            "alibaba.alihealth.examination.reserve.state",
            {
                "merchant_code": merchant_code,
                "reserve_number": reserve_number,
                "uniq_reserve_code": uniq_reserve_code
            }
        )

    def alibaba_alihealth_examination_reserve_modify(
            self,
            merchant_code='',
            reserve_number='',
            reserve_date='',
            package_code='',
            store_id='',
            uniq_reserve_code=''
    ):
        """
        体检机构对接_体检套餐改期
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27338

        :param merchant_code: 商户唯一码
        :param reserve_number: 阿里健康预约唯一标识
        :param reserve_date: 预约时间
        :param package_code: 体检套餐编码
        :param store_id: 店铺ID
        :param uniq_reserve_code: 体检机构预约唯一标识码
        """
        return self._top_request(
            "alibaba.alihealth.examination.reserve.modify",
            {
                "merchant_code": merchant_code,
                "reserve_number": reserve_number,
                "reserve_date": reserve_date,
                "package_code": package_code,
                "store_id": store_id,
                "uniq_reserve_code": uniq_reserve_code
            }
        )

    def alibaba_alihealth_examination_reserve_cancel(
            self,
            merchant_code='',
            reserve_number='',
            reserve_date='',
            package_code='',
            store_id='',
            uniq_reserve_code=''
    ):
        """
        体检机构对接_预约取消
        体检机构对接_体检取消
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27339

        :param merchant_code: 商户唯一码
        :param reserve_number: 阿里健康预约唯一标识
        :param reserve_date: 预约时间
        :param package_code: 体检套餐编码
        :param store_id: 店铺ID
        :param uniq_reserve_code: 体检机构预约唯一标识码
        """
        return self._top_request(
            "alibaba.alihealth.examination.reserve.cancel",
            {
                "merchant_code": merchant_code,
                "reserve_number": reserve_number,
                "reserve_date": reserve_date,
                "package_code": package_code,
                "store_id": store_id,
                "uniq_reserve_code": uniq_reserve_code
            }
        )

    def alibaba_alihealth_examination_order_cancel(
            self,
            merchant_code,
            order_id
    ):
        """
        体检机构对接_体检订单取消
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27417

        :param merchant_code: 商户唯一码
        :param order_id: 订单号
        """
        return self._top_request(
            "alibaba.alihealth.examination.order.cancel",
            {
                "merchant_code": merchant_code,
                "order_id": order_id
            }
        )

    def alibaba_alihealth_examination_institution_query(
            self
    ):
        """
        获取支持的体检机构
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取支持的体检机构,用于让用户选择体检地点
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36385

        """
        return self._top_request(
            "alibaba.alihealth.examination.institution.query"
        )

    def alibaba_alihealth_examination_city_list(
            self
    ):
        """
        体检机构对接_城市列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37723

        """
        return self._top_request(
            "alibaba.alihealth.examination.city.list"
        )

    def alibaba_alihealth_examination_hospital_list(
            self,
            city_code=''
    ):
        """
        体检机构对接_体检中心列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37724

        :param city_code: 城市代码
        """
        return self._top_request(
            "alibaba.alihealth.examination.hospital.list",
            {
                "city_code": city_code
            }
        )

    def alibaba_alihealth_examination_package_list(
            self,
            hospital_code=''
    ):
        """
        体检机构对接_门店套餐查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37725

        :param hospital_code: 医院代码
        """
        return self._top_request(
            "alibaba.alihealth.examination.package.list",
            {
                "hospital_code": hospital_code
            }
        )

    def alibaba_alihealth_examination_hospital_onoffline(
            self,
            hospital_codes,
            type
    ):
        """
        门店的上线／下线
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38541

        :param hospital_codes: 需要操作的hospitalCode，列表类型
        :param type: 上线=online，下线=offline
        """
        return self._top_request(
            "alibaba.alihealth.examination.hospital.onoffline",
            {
                "hospital_codes": hospital_codes,
                "type": type
            }
        )

    def alibaba_alihealth_examination_hospital_publish(
            self,
            tel,
            city_name,
            city_code,
            type,
            key_word,
            point_x,
            point_y,
            address,
            work_time,
            hospital_name,
            hospital_code,
            detail='',
            exam_notice='',
            routes='',
            logo=''
    ):
        """
        体检机构对接_门店发布／更新
        第三方B端有新的门店发布，或者老的门店更新的时候，使用这个接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38542

        :param tel: 门店联系电话
        :param city_name: 门店所属城市
        :param city_code: 门店城市code（国标）
        :param type: 操作类型: publish=发布，update=更新
        :param key_word: 医院等级，三甲、二甲
        :param point_x: 门店位置经度Gcj02 坐标系
        :param point_y: 门店位置纬度Gcj02 坐标系
        :param address: 门店地址
        :param work_time: 工作时间
        :param hospital_name: 门店名称
        :param hospital_code: 门店ID，机构保证唯一
        :param detail: 门店简介
        :param exam_notice: 体检须知，通过 \r\n 进行换行
        :param routes: 交通线路，通过\r\n 进行换行
        :param logo: http://images.aliyun.com/image?id=123
        """
        return self._top_request(
            "alibaba.alihealth.examination.hospital.publish",
            {
                "tel": tel,
                "city_name": city_name,
                "city_code": city_code,
                "type": type,
                "key_word": key_word,
                "point_x": point_x,
                "point_y": point_y,
                "address": address,
                "work_time": work_time,
                "hospital_name": hospital_name,
                "hospital_code": hospital_code,
                "detail": detail,
                "exam_notice": exam_notice,
                "routes": routes,
                "logo": logo
            }
        )

    def alibaba_alihealth_examination_goods_onoffline(
            self,
            group_id,
            type,
            hospital_codes=''
    ):
        """
        上线/下线 体检产品
        第三方体检机构对接钉钉体检中的产品 上线／下线
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38545

        :param group_id: 商品组id，机构保证唯一
        :param type: 操作类型: online=上线，offline=下线
        :param hospital_codes: 门店id列表，如果hospital_codes为null，表示所有的门店都上下线group_id的商品
        """
        return self._top_request(
            "alibaba.alihealth.examination.goods.onoffline",
            {
                "group_id": group_id,
                "type": type,
                "hospital_codes": hospital_codes
            }
        )

    def alibaba_alihealth_examination_goods_publish(
            self,
            group_id,
            group_name,
            type,
            package_list=None,
            goods_desc='',
            target_group=''
    ):
        """
        体检机构对接_商品发布／更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38546

        :param group_id: 商品id，机构保证全局唯一
        :param group_name: 商品名称
        :param type: 操作类型: publish=发布，update=更新
        :param package_list: 套餐列表
        :param goods_desc: 最多200个字，界面对应商品详情页描述
        :param target_group: 最多256个字，界面对应列表文字
        """
        return self._top_request(
            "alibaba.alihealth.examination.goods.publish",
            {
                "group_id": group_id,
                "group_name": group_name,
                "type": type,
                "package_list": package_list,
                "goods_desc": goods_desc,
                "target_group": target_group
            }
        )

    def alibaba_alihealth_examination_agreement_list(
            self,
            store_code=''
    ):
        """
        isv协议获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41650

        :param store_code: isv传递过来的门店code
        """
        return self._top_request(
            "alibaba.alihealth.examination.agreement.list",
            {
                "store_code": store_code
            }
        )

    def alibaba_alihealth_examination_items_publish(
            self,
            isv_packages,
            isv_item_d_t_o_s,
            group_id='',
            isv_item_relation_d_t_o_s=None,
            hospital_codes='',
            isv_item_pack_d_t_o_s=None,
            isv_pack_relation_d_t_o_s=None
    ):
        """
        单项/加项包信息同步
        体检机构对接_单项/加项包信息发布／更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42985

        :param isv_packages: 套餐列表
        :param isv_item_d_t_o_s: 单项信息列表
        :param group_id: 商品id，机构保证全局唯一
        :param isv_item_relation_d_t_o_s: 单项之间关系
        :param hospital_codes: 体检机构标识
        :param isv_item_pack_d_t_o_s: 加项包列表
        :param isv_pack_relation_d_t_o_s: 加项包关系列表
        """
        return self._top_request(
            "alibaba.alihealth.examination.items.publish",
            {
                "isv_packages": isv_packages,
                "isv_item_d_t_o_s": isv_item_d_t_o_s,
                "group_id": group_id,
                "isv_item_relation_d_t_o_s": isv_item_relation_d_t_o_s,
                "hospital_codes": hospital_codes,
                "isv_item_pack_d_t_o_s": isv_item_pack_d_t_o_s,
                "isv_pack_relation_d_t_o_s": isv_pack_relation_d_t_o_s
            }
        )


class Tb1688TuiKe(DingTalkBaseAPI):
    """
    1688推客API
    """

    def alibaba_tuike_offer_get(
            self,
            isv_code,
            query_string
    ):
        """
        推广商品查询接口
        查询1688推客平台卖家推广中的商品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27457

        :param isv_code: 标识调用方
        :param query_string: 搜索查询参数(json)
        """
        return self._top_request(
            "alibaba.tuike.offer.get",
            {
                "isv_code": isv_code,
                "query_string": query_string
            }
        )

    def alibaba_tuike_web_union_order_query(
            self,
            time_type,
            start_time,
            end_time,
            page_offset,
            page_size
    ):
        """
        推客网盟合作抽佣订单查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28760

        :param time_type: 0 表示time为下单时间;1表示time为更新时间
        :param start_time: 13位时间戳
        :param end_time: 13位时间戳
        :param page_offset: 页码偏移
        :param page_size: 返回条数
        """
        return self._top_request(
            "alibaba.tuike.web.union.order.query",
            {
                "time_type": time_type,
                "start_time": start_time,
                "end_time": end_time,
                "page_offset": page_offset,
                "page_size": page_size
            },
            result_processor=lambda x: x["list"]
        )

    def alibaba_tuike_offer_get_pro(
            self,
            login_id,
            isv_code,
            query_string
    ):
        """
        推广商品查询接口2.0
        查询1688推客平台卖家推广中的商品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29313

        :param login_id: 用户ID
        :param isv_code: 标识调用方
        :param query_string: 搜索查询参数(json)
        """
        return self._top_request(
            "alibaba.tuike.offer.get.pro",
            {
                "login_id": login_id,
                "isv_code": isv_code,
                "query_string": query_string
            }
        )

    def alibaba_tuike_single_offer_get(
            self,
            login_id,
            offer_id
    ):
        """
        查询1688推客平台卖家推广中的商品信息
        查询单个推客商品信息的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29770

        :param login_id: 推客id
        :param offer_id: 商品id
        """
        return self._top_request(
            "alibaba.tuike.single.offer.get",
            {
                "login_id": login_id,
                "offer_id": offer_id
            }
        )

    def alibaba_tuike_offer_zhitoken(
            self,
            title='',
            desc='',
            icon_link='',
            biz_type='',
            source='',
            start_time='',
            left_btn_text='',
            left_btn_link='',
            right_btn_text='',
            right_btn_link=''
    ):
        """
        生成阿里口令
        推荐链接生产吱口令
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29784

        :param title: 主标题
        :param desc: 主要内容
        :param icon_link: 图标链接，可以为空
        :param biz_type: SHORT/MEDIUM/LONG
        :param source: 业务类型
        :param start_time: 生效时间，可以为空
        :param left_btn_text: 左按钮文案，可以为空，默认为'取消'
        :param left_btn_link: 左按钮链接，可以为空
        :param right_btn_text: 右按钮文案，可以为空，默认为'确定'
        :param right_btn_link: 右按钮链接
        """
        return self._top_request(
            "alibaba.tuike.offer.zhitoken",
            {
                "title": title,
                "desc": desc,
                "icon_link": icon_link,
                "biz_type": biz_type,
                "source": source,
                "start_time": start_time,
                "left_btn_text": left_btn_text,
                "left_btn_link": left_btn_link,
                "right_btn_text": right_btn_text,
                "right_btn_link": right_btn_link
            }
        )


class TbShangHu(DingTalkBaseAPI):
    """
    商户API
    """

    def taobao_place_account_add(
            self,
            account_d_t_o=None
    ):
        """
        商户中心子账号创建
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        开发者可以调开放平台接口创建商户中心所属的子账号。字段内容和商户中心excel表导入的相同。
        一次调用可以创建一条子账号。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27591

        :param account_d_t_o: 入参
        """
        return self._top_request(
            "taobao.place.account.add",
            {
                "account_d_t_o": account_d_t_o
            }
        )

    def taobao_place_account_enable(
            self,
            ids
    ):
        """
        批量启用子账号
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27593

        :param ids: 子账号ID数组
        """
        return self._top_request(
            "taobao.place.account.enable",
            {
                "ids": ids
            }
        )

    def taobao_place_account_disable(
            self,
            ids=''
    ):
        """
        批量禁用子账号
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27594

        :param ids: 子账号ID数组
        """
        return self._top_request(
            "taobao.place.account.disable",
            {
                "ids": ids
            }
        )

    def taobao_place_account_edit(
            self,
            account_d_t_o
    ):
        """
        商户中心子账号编辑
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        开发者可以调用开放平台的接口，修改商户中心子账号的信息。可修改字段和PC端操作相同。
        新增“离职”这个可编辑状态，就调用子账号后台离职的功能。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27595

        :param account_d_t_o: 入参
        """
        return self._top_request(
            "taobao.place.account.edit",
            {
                "account_d_t_o": account_d_t_o
            }
        )

    def taobao_place_store_create(
            self,
            store_create=None
    ):
        """
        商户门店创建接口
        用于商家创建线下门店
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41028

        :param store_create: 门店创建入参
        """
        return self._top_request(
            "taobao.place.store.create",
            {
                "store_create": store_create
            },
            result_processor=lambda x: x["store_id"]
        )


class TbZhuoMian(DingTalkBaseAPI):
    """
    桌面API
    """

    def yunos_tvscreen_launcher_get(
            self,
            property,
            ip
    ):
        """
        一体机桌面
        LCTS一体机桌面后台,提供基于运营坑位适配的桌面服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27722

        :param property: 设备属性
        :param ip: IP来源
        """
        return self._top_request(
            "yunos.tvscreen.launcher.get",
            {
                "property": property,
                "ip": ip
            }
        )

    def youku_ott_playservice_getplayurl(
            self,
            system_info,
            video_id,
            yktk='',
            havana_token=''
    ):
        """
        获取播放串地址
        获取播放串地址服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29909

        :param system_info: 系统信息
        :param video_id: 视频ID
        :param yktk: 优酷账号登录态
        :param havana_token: 账号登录态
        """
        return self._top_request(
            "youku.ott.playservice.getplayurl",
            {
                "system_info": system_info,
                "video_id": video_id,
                "yktk": yktk,
                "havana_token": havana_token
            }
        )

    def youku_ott_alicb_facadeservice_getdata(
            self,
            service_list,
            uuid,
            property_map_json,
            extra_info_map=''
    ):
        """
        影视SDK获取设备能力值
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29910

        :param service_list: 能力维度
        :param uuid: 设备唯一标识
        :param property_map_json: 属性MAP JSON串
        :param extra_info_map: 扩展属性
        """
        return self._top_request(
            "youku.ott.alicb.facadeservice.getdata",
            {
                "service_list": service_list,
                "uuid": uuid,
                "property_map_json": property_map_json,
                "extra_info_map": extra_info_map
            },
            result_processor=lambda x: x["model"]
        )

    def yunos_tvscreen_lge_launcher_get(
            self,
            property,
            ip
    ):
        """
        LG用桌面信息获取
        LCTS一体机桌面后台,提供基于运营坑位适配的桌面服务,根据LG的需求定制输出格式
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33772

        :param property: property of client
        :param ip: ip of client
        """
        return self._top_request(
            "yunos.tvscreen.lge.launcher.get",
            {
                "property": property,
                "ip": ip
            }
        )


class TbDianDongChe(DingTalkBaseAPI):
    """
    电动车API
    """

    def cainiao_vms_service_data_upload(
            self,
            device_id,
            provider_name,
            data_source,
            protocol_version,
            data_produced_timestamp,
            data
    ):
        """
        车况数据上传
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        电动车数据回流
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27704

        :param device_id: 车辆唯一标识
        :param provider_name: 厂家标识
        :param data_source: 数据源标识
        :param protocol_version: 协议版本标识
        :param data_produced_timestamp: 数据产生时间（Unix timestamp seconds since 1970-01-01 00:00:00 UTC）
        :param data: 电动车的数据内容（根据协议版本约束的格式）
        """
        return self._top_request(
            "cainiao.vms.service.data.upload",
            {
                "device_id": device_id,
                "provider_name": provider_name,
                "data_source": data_source,
                "protocol_version": protocol_version,
                "data_produced_timestamp": data_produced_timestamp,
                "data": data
            }
        )

    def cainiao_vms_service_vehicleinfo_upload(
            self,
            device_id,
            provider_name,
            data_source,
            protocol_version,
            data
    ):
        """
        新能源车--外部车辆信息回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30434

        :param device_id: 设备号
        :param provider_name: 厂家标识
        :param data_source: 数据源标识
        :param protocol_version: 协议版本标识
        :param data: 上传的信息
        """
        return self._top_request(
            "cainiao.vms.service.vehicleinfo.upload",
            {
                "device_id": device_id,
                "provider_name": provider_name,
                "data_source": data_source,
                "protocol_version": protocol_version,
                "data": data
            }
        )


class TbZhengFuXieTong(DingTalkBaseAPI):
    """
    政府协同
    """

    def alibaba_platformgovern_tmallhk_magicbuyinfo_feedback(
            self,
            ids
    ):
        """
        天猫国际神秘购买记录反馈
        天猫国际神秘购买记录同步反馈
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27723

        :param ids: 反馈的id集合, 不能超过20条记录
        """
        return self._top_request(
            "alibaba.platformgovern.tmallhk.magicbuyinfo.feedback",
            {
                "ids": ids
            }
        )

    def alibaba_platformgovern_tmallhk_rightprotection_feedback(
            self,
            ids
    ):
        """
        天猫国际维权记录信息反馈
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27724

        :param ids: 记录id集合
        """
        return self._top_request(
            "alibaba.platformgovern.tmallhk.rightprotection.feedback",
            {
                "ids": ids
            }
        )

    def alibaba_platformgovern_tmallhk_rightprotection_sync(
            self,
            page_size
    ):
        """
        获取天猫国际维权记录信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27725

        :param page_size: 同步记录数
        """
        return self._top_request(
            "alibaba.platformgovern.tmallhk.rightprotection.sync",
            {
                "page_size": page_size
            }
        )

    def alibaba_platformgovern_tmallhk_magicbuyinfo_sync(
            self,
            page_size
    ):
        """
        天猫国际神秘购买记录同步API
        天猫国际神秘购买记录同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27726

        :param page_size: 同步记录数
        """
        return self._top_request(
            "alibaba.platformgovern.tmallhk.magicbuyinfo.sync",
            {
                "page_size": page_size
            }
        )

    def taobao_cloudbridge_sellerinfo_check(
            self,
            param_list=None
    ):
        """
        工商校验商家数据是否存在阿里商家数据信息中
        提供工商系统校验商家信息是否存在于阿里系统中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27834

        :param param_list: 系统自动生成
        """
        return self._top_request(
            "taobao.cloudbridge.sellerinfo.check",
            {
                "param_list": param_list
            }
        )

    def taobao_cloudbridge_sellerinfo_exchangeinfo(
            self,
            param_list=None
    ):
        """
        工商局和阿里交换数据信息
        工商局将检查到在阿里系统内的商家信息同步给阿里，阿里返回工商所需要的商家其他信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27854

        :param param_list: 信息列表
        """
        return self._top_request(
            "taobao.cloudbridge.sellerinfo.exchangeinfo",
            {
                "param_list": param_list
            }
        )


class TbXinLingShou(DingTalkBaseAPI):
    """
    新零售API
    """

    def alibaba_nr_mafia_marketing_isvlottery(
            self
    ):
        """
        门店抽奖接口
        门店权益发放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36885

        """
        return self._top_request(
            "alibaba.nr.mafia.marketing.isvlottery"
        )


class TbSCM(DingTalkBaseAPI):
    """
    SCM API
    """

    def alibaba_ascm_settlement_invoice_synchronization_im(
            self,
            xml_data_slot
    ):
        """
        英迈发票同步到结算
        外部供应商通过此API将发货的发票信息推送给供应链中台结算系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36216

        :param xml_data_slot: im invoice xml
        """
        return self._top_request(
            "alibaba.ascm.settlement.invoice.synchronization.im",
            {
                "xml_data_slot": xml_data_slot
            }
        )


class TbBaiChuanCtg(DingTalkBaseAPI):
    """
    百川-ctg
    """

    def alibaba_baichuan_ctg_toutiao_content(
            self,
            param0=None
    ):
        """
        微博输出头条数据
        百川头条内容获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28682

        :param param0: param0
        """
        return self._top_request(
            "alibaba.baichuan.ctg.toutiao.content",
            {
                "param0": param0
            }
        )


class TbHuiJin(DingTalkBaseAPI):
    """
    汇金API
    """

    def alibaba_fundplatform_cardorders_status_make_finish(
            self,
            card_order_id
    ):
        """
        制卡商通知制卡完成
        当制卡完成后，制卡商需要调用该接口，通知我们制卡已完成。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28545

        :param card_order_id: 子制卡单ID
        """
        return self._top_request(
            "alibaba.fundplatform.cardorders.status.make.finish",
            {
                "card_order_id": card_order_id
            },
            result_processor=lambda x: x["success"]
        )

    def alibaba_fundplatform_cardorders_status_sended(
            self,
            card_order_id,
            logistics_order_id,
            logistics_company
    ):
        """
        制卡商通知实体卡发货完成
        当制卡商将实体卡发货完成后，需要调用该接口，通知我们已发货。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28546

        :param card_order_id: 子制卡单ID
        :param logistics_order_id: 物流单号
        :param logistics_company: 物流商名称
        """
        return self._top_request(
            "alibaba.fundplatform.cardorders.status.sended",
            {
                "card_order_id": card_order_id,
                "logistics_order_id": logistics_order_id,
                "logistics_company": logistics_company
            },
            result_processor=lambda x: x["success"]
        )

    def alibaba_fundplatform_cardorder_make(
            self,
            card_product_infos,
            card_order_id,
            own_sign,
            logistics_info=None
    ):
        """
        通知制卡商制卡
        该接口由内部定义，外部制卡商实现。当需要制卡商进行制卡操作时，将会调用该接口。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28550

        :param card_product_infos: 卡模板信息列表
        :param card_order_id: 子制卡单ID
        :param own_sign: 环境变量值，该字段为枚举值：daily（日常），pre（预发），online（线上）
        :param logistics_info: 物流信息
        """
        return self._top_request(
            "alibaba.fundplatform.cardorder.make",
            {
                "card_product_infos": card_product_infos,
                "card_order_id": card_order_id,
                "own_sign": own_sign,
                "logistics_info": logistics_info
            },
            result_processor=lambda x: x["response"]
        )

    def alibaba_fundplatform_cardorder_status_query(
            self,
            card_order_id,
            own_sign
    ):
        """
        查询制卡商制卡进度
        当通知制卡商进行制卡后，其制卡流程会比较长，若长时间未反馈当前制卡进展，则需要使用该接口来向制卡商发起进度查询。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28554

        :param card_order_id: 子制卡单ID
        :param own_sign: 环境变量值，该字段为枚举值：daily（日常），pre（预发），online（线上）
        """
        return self._top_request(
            "alibaba.fundplatform.cardorder.status.query",
            {
                "request": {
                    "card_order_id": card_order_id,
                    "own_sign": own_sign
                }
            },
            result_processor=lambda x: x["response"]
        )

    def alibaba_fundplatform_cardorders_info_query(
            self,
            parameters
    ):
        """
        根据制卡单分页查询卡信息
        该接口由汇金实现，外部调用。通过制卡单号分页查询卡信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28556

        :param parameters: 请求结构体
        """
        return self._top_request(
            "alibaba.fundplatform.cardorders.info.query",
            {
                "parameters": parameters
            }
        )

    def alibaba_fundplatform_card_template_new(
            self,
            template_no,
            card_name,
            par_value,
            is_test,
            own_sign,
            picture_url=''
    ):
        """
        新增实体卡模板
        该接口由制卡商实现，当新增一个实体卡模板的时候，需要调用该接口，通知制卡商同步新增卡模板信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28729

        :param template_no: 卡模板编号
        :param card_name: 该模板生成的卡名称
        :param par_value: 卡面额，单元分
        :param is_test: 是否为测试卡模板，true表示是，如果是测试卡模板则请求制卡时无需真正去制作实体卡
        :param own_sign: 环境变量值，该字段为枚举值：daily（日常），pre（预发），online（线上）
        :param picture_url: 卡外观图片地址
        """
        return self._top_request(
            "alibaba.fundplatform.card.template.new",
            {
                "template_no": template_no,
                "card_name": card_name,
                "par_value": par_value,
                "is_test": is_test,
                "own_sign": own_sign,
                "picture_url": picture_url
            }
        )

    def alibaba_fundplatform_cardorder_receipt(
            self,
            card_order_id,
            own_sign
    ):
        """
        通知确认收货
        告知卡商这一批储值卡已经被用户确认收货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28998

        :param card_order_id: 通知制卡成功的子卡子单号
        :param own_sign: 环境变量值，该字段为枚举值：daily（日常），pre（预发），online（线上）
        """
        return self._top_request(
            "alibaba.fundplatform.cardorder.receipt",
            {
                "card_order_id": card_order_id,
                "own_sign": own_sign
            }
        )

    def alibaba_fundplatform_cardorder_make_success(
            self,
            order_id,
            out_biz_id,
            own_sign
    ):
        """
        通知制卡成功
        当外部业务方调用资金平台异步制卡接口后，资金平台制卡成功后通知异步通知业务方
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30109

        :param order_id: 制卡单号
        :param out_biz_id: 制卡时传入的外部订单号
        :param own_sign: 环境变量值，该字段为枚举值：daily（日常），pre（预发），online（线上）
        """
        return self._top_request(
            "alibaba.fundplatform.cardorder.make.success",
            {
                "request": {
                    "order_id": order_id,
                    "out_biz_id": out_biz_id,
                    "own_sign": own_sign
                }
            }
        )

    def alibaba_fundplatform_account_charge(
            self,
            param_long,
            param_charge_request=None
    ):
        """
        资金平台余额账户充值
        资金平台余额账户充值【创建账户&返回付款URL】
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30278

        :param param_long: 用户ID
        :param param_charge_request: 入参对象
        """
        return self._top_request(
            "alibaba.fundplatform.account.charge",
            {
                "param_long": param_long,
                "param_charge_request": param_charge_request
            }
        )

    def alibaba_fundplatform_cardorder_fetch_card_async(
            self,
            param_card_fetch_async_request
    ):
        """
        异步批量生成储值卡
        外部业务方异步批量生成储值卡的接口。同步只返回接受成功，异步会通知制卡成功
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30285

        :param param_card_fetch_async_request: 入参复杂对象
        """
        return self._top_request(
            "alibaba.fundplatform.cardorder.fetch.card.async",
            {
                "param_card_fetch_async_request": param_card_fetch_async_request
            }
        )

    def alibaba_fundplatform_account_charge_notify(
            self,
            account_id,
            sub_biz_type,
            amount,
            out_biz_id,
            user_id,
            own_sign
    ):
        """
        账户充值成功通知
        通知外部业务方充值成功
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30286

        :param account_id: 在资金平台中账户ID
        :param sub_biz_type: 资金平台分配的业务类型
        :param amount: 充值金额，单位分
        :param out_biz_id: 回传充值时传入的outBizId
        :param user_id: 用户在淘宝中userId
        :param own_sign: 环境变量值，该字段为枚举值：daily（日常），pre（预发），online（线上）
        """
        return self._top_request(
            "alibaba.fundplatform.account.charge.notify",
            {
                "request": {
                    "account_id": account_id,
                    "sub_biz_type": sub_biz_type,
                    "amount": amount,
                    "out_biz_id": out_biz_id,
                    "user_id": user_id,
                    "own_sign": own_sign
                }
            }
        )

    def alibaba_fundplatform_cardorder_card_active(
            self,
            param_card_active_request
    ):
        """
        储值卡激活
        储值卡接货接口，可以通过外部订单号或者卡号进行批量激活。如果储值卡已经被激活过仍然幂等返回成功。资金平台保证批量激活时一定全部成功或全部失败。
        如果批量激活储值卡时，如果部分储值卡处于已激活，部分储值卡处于未激活，则会返回失败
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30326

        :param param_card_active_request: 入参对象
        """
        return self._top_request(
            "alibaba.fundplatform.cardorder.card.active",
            {
                "param_card_active_request": param_card_active_request
            }
        )

    def alibaba_fundplatform_cardorders_info_query_by_cardno(
            self,
            parameters
    ):
        """
        通过卡号查询卡信息
        该接口由汇金实现，外部调用。通过制卡单号分页查询卡信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30347

        :param parameters: 请求结构体
        """
        return self._top_request(
            "alibaba.fundplatform.cardorders.info.query.by.cardno",
            {
                "parameters": parameters
            }
        )

    def alibaba_fundplatform_account_query_info(
            self,
            account_id
    ):
        """
        查询账户信息
        外部查询资金平台用户账户信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31023

        :param account_id: 账户ID
        """
        return self._top_request(
            "alibaba.fundplatform.account.query.info",
            {
                "account_id": account_id
            }
        )

    def alibaba_fundplatform_account_jour_query_info(
            self,
            param_fund_account_journal_query_req=None
    ):
        """
        查询账户流水信息
        外部查询账户流水信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31024

        :param param_fund_account_journal_query_req: 入参对象
        """
        return self._top_request(
            "alibaba.fundplatform.account.jour.query.info",
            {
                "param_fund_account_journal_query_req": param_fund_account_journal_query_req
            }
        )


class TbShuYuMeiZiShuChu(DingTalkBaseAPI):
    """
    数娱媒资输出
    """

    def youku_wenyuvideo_persion_search(
            self,
            person_name=''
    ):
        """
        根据人物名称查询人物列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41680

        :param person_name: 人物名字，搜索规则是完全匹配，即只返回同名人物列表
        """
        return self._top_request(
            "youku.wenyuvideo.persion.search",
            {
                "person_name": person_name
            }
        )

    def youku_wenyuvideo_persion_get(
            self,
            system_info='',
            person_id=''
    ):
        """
        根据优酷人物ID获取人物详情页，包含相关影视和相关人物
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41681

        :param system_info: 设备信息
        :param person_id: 人物ID
        """
        return self._top_request(
            "youku.wenyuvideo.persion.get",
            {
                "system_info": system_info,
                "person_id": person_id
            }
        )


class TbShangLv(DingTalkBaseAPI):
    """
    商旅API
    """

    def alitrip_btrip_approval_update(
            self,
            approve_apply_request=None
    ):
        """
        更新审批单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29177

        :param approve_apply_request: 审批请求对象
        """
        return self._top_request(
            "alitrip.btrip.approval.update",
            {
                "approve_apply_request": approve_apply_request
            }
        )

    def alitrip_btrip_approval_new(
            self,
            add_apply_request=None
    ):
        """
        新建审批单
        用户新建审批单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29180

        :param add_apply_request: 申请单
        """
        return self._top_request(
            "alitrip.btrip.approval.new",
            {
                "add_apply_request": add_apply_request
            }
        )

    def alitrip_btrip_cost_center_get(
            self,
            corp_id,
            user_id
    ):
        """
        获取用户费用归属
        获取差旅申请用户的费用归属列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29198

        :param corp_id: 企业id
        :param user_id: 用户id
        """
        return self._top_request(
            "alitrip.btrip.cost.center.get",
            {
                "corp_id": corp_id,
                "user_id": user_id
            }
        )

    def alitrip_btrip_invoice_search(
            self,
            corp_id='',
            user_id='',
            title=''
    ):
        """
        根据发票抬头搜索发票
        用户根据发票抬头搜索发票信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29199

        :param corp_id: 企业id
        :param user_id: 用户id
        :param title: 发票抬头
        """
        return self._top_request(
            "alitrip.btrip.invoice.search",
            {
                "corp_id": corp_id,
                "user_id": user_id,
                "title": title
            }
        )

    def alitrip_btrip_invoice_get(
            self,
            corp_id,
            user_id
    ):
        """
        获取用户可用发票列表
        差旅申请用户获取可用发票列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29200

        :param corp_id: 企业id
        :param user_id: 用户id
        """
        return self._top_request(
            "alitrip.btrip.invoice.get",
            {
                "corp_id": corp_id,
                "user_id": user_id
            }
        )

    def alitrip_btrip_hotel_order_search(
            self,
            rq=None
    ):
        """
        搜索酒店订单列表
        企业获取商旅酒店订单数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29568

        :param rq: 请求
        """
        return self._top_request(
            "alitrip.btrip.hotel.order.search",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_apply_search(
            self,
            rq=None
    ):
        """
        搜索审批单
        外部企业调用获取本企业审批单列表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29571

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btrip.apply.search",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_apply_get(
            self,
            corp_id,
            thirdpart_apply_id='',
            apply_id='',
            apply_show_id=''
    ):
        """
        获取单个审批单
        获取单个审批单的详情数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29572

        :param corp_id: 企业id
        :param thirdpart_apply_id: 外部审批单id
        :param apply_id: 阿里商旅审批单id
        :param apply_show_id: 审批单展示id
        """
        return self._top_request(
            "alitrip.btrip.apply.get",
            {
                "corp_id": corp_id,
                "thirdpart_apply_id": thirdpart_apply_id,
                "apply_id": apply_id,
                "apply_show_id": apply_show_id
            }
        )

    def alitrip_btrip_flight_order_search(
            self,
            rq=None
    ):
        """
        获取机票订单列表
        第三方OA厂商获取机票订单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29574

        :param rq: 请求
        """
        return self._top_request(
            "alitrip.btrip.flight.order.search",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_train_order_search(
            self,
            rq=None
    ):
        """
        获取火车票订单列表
        第三方OA厂商获取自己的火车票数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29575

        :param rq: 请求
        """
        return self._top_request(
            "alitrip.btrip.train.order.search",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_train_city_suggest(
            self,
            user_id,
            keyword,
            corp_id
    ):
        """
        火车票城市搜索
        阿里商旅提供火车票搜索接口，方便OA厂商更精准的对接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32207

        :param user_id: 用户id
        :param keyword: 搜索关键字
        :param corp_id: 企业id
        """
        return self._top_request(
            "alitrip.btrip.train.city.suggest",
            {
                "user_id": user_id,
                "keyword": keyword,
                "corp_id": corp_id
            }
        )

    def alitrip_btrip_flight_city_suggest(
            self,
            user_id,
            keyword,
            corp_id
    ):
        """
        机票城市搜索
        提供机票城市搜索接口，提高OA用户对接效率
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32208

        :param user_id: 用户id
        :param keyword: 搜索关键字
        :param corp_id: 企业id
        """
        return self._top_request(
            "alitrip.btrip.flight.city.suggest",
            {
                "user_id": user_id,
                "keyword": keyword,
                "corp_id": corp_id
            }
        )

    def alitrip_btrip_cost_center_delete(
            self,
            rq
    ):
        """
        删除外部成本中心
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33162

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btrip.cost.center.delete",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_cost_center_entity_add(
            self,
            rq
    ):
        """
        增加外部成本中心人员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33163

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btrip.cost.center.entity.add",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_cost_center_new(
            self,
            rq
    ):
        """
        新建外部成本中心
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33164

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btrip.cost.center.new",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_cost_center_modify(
            self,
            rq
    ):
        """
        修改外部成本中心
        修改外部成本中心，设置成员，设置支付宝账号，设置名称，编号等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33166

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btrip.cost.center.modify",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_cost_center_entity_set(
            self,
            rq
    ):
        """
        设置外部成本中心人员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33167

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btrip.cost.center.entity.set",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_cost_center_entity_delete(
            self,
            rq
    ):
        """
        删除外部成本中心人员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33168

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btrip.cost.center.entity.delete",
            {
                "rq": rq
            }
        )

    def alitrip_btip_cost_center_query(
            self,
            rq
    ):
        """
        查询外部成本中心
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33169

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btip.cost.center.query",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_category_address_get(
            self,
            rq
    ):
        """
        获取类目预定页跳转地址
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33380

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btrip.category.address.get",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_vehicle_order_search(
            self,
            rq
    ):
        """
        用车订单查询接口
        企业获取商旅用车订单数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34237

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btrip.vehicle.order.search",
            {
                "rq": rq
            }
        )

    def alitrip_btrip_cost_center_transfer(
            self,
            rq
    ):
        """
        商旅成本中心转换为外部成本中心
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35946

        :param rq: 请求对象
        """
        return self._top_request(
            "alitrip.btrip.cost.center.transfer",
            {
                "rq": rq
            }
        )


class TbZhiNengPOS(DingTalkBaseAPI):
    """
    智能POS
    """

    def alibaba_lst_pos_member_checkexist(
            self,
            user_id,
            machine_id='1'
    ):
        """
        小店白名单检测
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提供小店白名单检查top接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28776

        :param user_id: 用户Id
        :param machine_id: pos机器序列号
        """
        return self._top_request(
            "alibaba.lst.pos.member.checkexist",
            {
                "user_id": user_id,
                "machine_id": machine_id
            }
        )


class TbLingShouPlus(DingTalkBaseAPI):
    """
    零售plus
    """

    def alibaba_nlife_b2c_trade_create(
            self,
            out_request_no,
            buyer_id_type,
            body,
            goods_list,
            time_expire,
            store_id,
            channel,
            picking_up,
            out_trade_no,
            buyer_id='',
            out_card_no='',
            sales_id='',
            extend_params='',
            attachment='',
            points='',
            deliver_address=None,
            trade_biz_type=''
    ):
        """
        零售+平台创建订单
        零售+平台创建订单接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28158

        :param out_request_no: 外部请求流水号
        :param buyer_id_type: 买家类型：TAOBAO_OPENID	经阿里百川淘宝登录获取到的用户id，ALIPAY_OPENID	经蚂蚁金服开放平台支付宝App登录获取到的用户id，WECHAT_OPENID	经微信开放平台微信App登录获取到的用户id，PHONE_NUMBER	通过手机号登录，APP_USERID	商户自有的用户id，ANONYMOUS_USER	匿名用户
        :param body: 订单描述
        :param goods_list: 商品明细列表
        :param time_expire: 订单过期关闭绝对时间
        :param store_id: 零售门店在零售+平台的ID
        :param channel: APP:是指线上销售应用，POS:是指现场收银应用
        :param picking_up: LOGISTICS('物流发货'),     SELF_DELIVERY('门店自提');
        :param out_trade_no: 对零售+为外部订单号，对业务方为订单号
        :param buyer_id: 买家ID
        :param out_card_no: 商户自由会员卡号
        :param sales_id: 收银员编号
        :param extend_params: 扩展参数 JSON格式
        :param attachment: 业务透传参数, 可在订单查询接口原样返回,格式自定
        :param points: 当前订单使用的积分数量,out_card_no为积分持有者的会员id
        :param deliver_address: 配送信息，网直供模式必填
        :param trade_biz_type: 业务类型，默认是0：经销模式， 3：网直供模式。
        """
        return self._top_request(
            "alibaba.nlife.b2c.trade.create",
            {
                "out_request_no": out_request_no,
                "buyer_id_type": buyer_id_type,
                "body": body,
                "goods_list": goods_list,
                "time_expire": time_expire,
                "store_id": store_id,
                "channel": channel,
                "picking_up": picking_up,
                "out_trade_no": out_trade_no,
                "buyer_id": buyer_id,
                "out_card_no": out_card_no,
                "sales_id": sales_id,
                "extend_params": extend_params,
                "attachment": attachment,
                "points": points,
                "deliver_address": deliver_address,
                "trade_biz_type": trade_biz_type
            }
        )

    def alibaba_nlife_b2c_trade_cancel(
            self,
            trade_no='',
            out_trade_no='',
            store_id=''
    ):
        """
        零售+平台取消订单
        零售+平台取消订单接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28159

        :param trade_no: 零售+平台订单号，和out_trade_no不能同时为空
        :param out_trade_no: 外部订单号，和trade_no不能同时为空
        :param store_id: 零售+门店号
        """
        return self._top_request(
            "alibaba.nlife.b2c.trade.cancel",
            {
                "trade_no": trade_no,
                "out_trade_no": out_trade_no,
                "store_id": store_id
            }
        )

    def alibaba_nlife_b2c_trade_refund(
            self,
            out_request_no,
            refund_bill_list,
            refund_goods_list,
            trade_no='',
            out_trade_no='',
            store_id='',
            refund_points=''
    ):
        """
        零售+请求退款
        零售+平台请求退款接口，在零售+平台不会有资金流变动，只是订单状态的更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28160

        :param out_request_no: 外部请求号
        :param refund_bill_list: 退款资金列表
        :param refund_goods_list: 所退货物的ID列表,逗号分隔商品组，冒号分隔商品和退货数量，支持三种方式退。 条码模式：barcode1:3,barcode2:2 表示barcode1退3件，barcode2退2件。 item_sku模式:itemId1_skuId1:3,itemId2_skuId2:2 表示itemId1_skuId1这个商品退3件，itemId2_skuId2这个商品退2件。 唯一码模式：uniqeueCodeA:1,uniqeueCodeA:1,因唯一码指定到唯一一件商品，退货数量都是1。
        :param trade_no: 零售+平台订单号，和out_trade_no不能同时为空
        :param out_trade_no: 外部订单号，和trade_no不能同时为空
        :param store_id: 零售+门店ID
        :param refund_points: 退积分,ISV自行算好
        """
        return self._top_request(
            "alibaba.nlife.b2c.trade.refund",
            {
                "out_request_no": out_request_no,
                "refund_bill_list": refund_bill_list,
                "refund_goods_list": refund_goods_list,
                "trade_no": trade_no,
                "out_trade_no": out_trade_no,
                "store_id": store_id,
                "refund_points": refund_points
            }
        )

    def alibaba_nlife_b2c_trade_pay(
            self,
            picking_up,
            gmt_payment,
            trade_no='',
            consignee='',
            consignee_phone_num='',
            consignee_address='',
            fund_bill_list=None,
            out_trade_no='',
            actual_pay_fee='',
            store_id=''
    ):
        """
        零售+平台支付订单
        零售+平台支付接口，外部商户调用此接口告知零售+支付结果，保持订单状态同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28161

        :param picking_up: 提货方式：    LOGISTICS('物流发货'),     SELF_DELIVERY('门店自提');
        :param gmt_payment: ISV处支付时间
        :param trade_no: 零售+平台订单号，和out_trade_no不能同时为空
        :param consignee: 收货人
        :param consignee_phone_num: 收货人电话
        :param consignee_address: 收货人地址
        :param fund_bill_list: 支付资金各渠道列表
        :param out_trade_no: 外部订单号，和trade_no不能同时为空
        :param actual_pay_fee: 实付金额，单位人民币分；该字段实际为必选，为兼容已经接入的isv设置成可选
        :param store_id: 只传out_trade_no时候，零售+门店号一定要传
        """
        return self._top_request(
            "alibaba.nlife.b2c.trade.pay",
            {
                "picking_up": picking_up,
                "gmt_payment": gmt_payment,
                "trade_no": trade_no,
                "consignee": consignee,
                "consignee_phone_num": consignee_phone_num,
                "consignee_address": consignee_address,
                "fund_bill_list": fund_bill_list,
                "out_trade_no": out_trade_no,
                "actual_pay_fee": actual_pay_fee,
                "store_id": store_id
            }
        )

    def alibaba_nlife_b2c_trade_get(
            self,
            trade_no='',
            out_trade_no='',
            store_id=''
    ):
        """
        零售+平台查询订单
        查询零售+平台创建出来的订单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28162

        :param trade_no: 零售+平台订单号,和out_trade_no不能同时为空
        :param out_trade_no: 外部订单号，和trade_no不能同时为空
        :param store_id: 零售+门店ID，如果传递的是outTradeNola，那么这个是必传的
        """
        return self._top_request(
            "alibaba.nlife.b2c.trade.get",
            {
                "trade_no": trade_no,
                "out_trade_no": out_trade_no,
                "store_id": store_id
            }
        )

    def alibaba_nlife_b2c_trade_download(
            self,
            page_no,
            page_size,
            store_id,
            start_date,
            end_date
    ):
        """
        b2c下载订单
        下载零售商在零售+平台创建的订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28164

        :param page_no: 页码
        :param page_size: 分页大小
        :param store_id: 零售门店在零售+平台对应的ID
        :param start_date: 开始时间
        :param end_date: 结束时间
        """
        return self._top_request(
            "alibaba.nlife.b2c.trade.download",
            {
                "page_no": page_no,
                "page_size": page_size,
                "store_id": store_id,
                "start_date": start_date,
                "end_date": end_date
            }
        )

    def alibaba_nlife_b2b_trade_accept(
            self,
            trade_no,
            extend_params='',
            attachment=''
    ):
        """
        B2B交易-供货商接受采购申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28251

        :param trade_no: 采购单编号
        :param extend_params: 业务扩展参数，json格式
        :param attachment: 附加数据，在获取采购单详情中原样返回，该字段主要用于商户携带订单的自定义数据。
        """
        return self._top_request(
            "alibaba.nlife.b2b.trade.accept",
            {
                "trade_no": trade_no,
                "extend_params": extend_params,
                "attachment": attachment
            },
            result_processor=lambda x: x["gmt_agree"]
        )

    def alibaba_nlife_b2b_trade_refuse(
            self,
            trade_no,
            refused_goods_lists,
            extend_params='',
            attachment=''
    ):
        """
        B2B交易-供货商拒绝采购申请
        B2B交易接口 - 供货商拒绝采购申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28252

        :param trade_no: 采购单编码
        :param refused_goods_lists: --
        :param extend_params: 扩展参数
        :param attachment: 业务透传参数
        """
        return self._top_request(
            "alibaba.nlife.b2b.trade.refuse",
            {
                "trade_no": trade_no,
                "refused_goods_lists": refused_goods_lists,
                "extend_params": extend_params,
                "attachment": attachment
            },
            result_processor=lambda x: x["gmt_refuse"]
        )

    def alibaba_nlife_b2b_trade_consign(
            self,
            out_id,
            trade_no,
            consign_time,
            goods_list,
            logistics_company_name,
            logistics_id,
            logistics_company_id=''
    ):
        """
        B2B交易-供货商发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28253

        :param out_id: 标识一次发货请求。主要为了避免请求重复提交的问题，在某些情况下，供货商系统在调用零售+平台进行发货后，无法确切知道零售+平台是否处理成功，在这种情况下，供货商系统应尝试使用同样的商家发货单号重试调用，零售+平台在接收到此类请求后，如果发现请求已处理，直接返回处理结果；否则，开始一次新的处理。
        :param trade_no: 零售+平台中的采购单编号
        :param consign_time: 发货时间
        :param goods_list: 发货的商品明细
        :param logistics_company_name: 物流公司名称
        :param logistics_id: 物流单号
        :param logistics_company_id: 物流公司id
        """
        return self._top_request(
            "alibaba.nlife.b2b.trade.consign",
            {
                "out_id": out_id,
                "trade_no": trade_no,
                "consign_time": consign_time,
                "goods_list": goods_list,
                "logistics_company_name": logistics_company_name,
                "logistics_id": logistics_id,
                "logistics_company_id": logistics_company_id
            },
            result_processor=lambda x: x["consignment"]
        )

    def alibaba_nlife_b2b_trade_get(
            self,
            trade_no
    ):
        """
        B2B交易 - 获取采购单详情
        供货商系统在收到采购单状态变化通知消息后，经此接口获取采购单详细信息，用以下一步的处理；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28261

        :param trade_no: 零售+平台中的采购单编号
        """
        return self._top_request(
            "alibaba.nlife.b2b.trade.get",
            {
                "trade_no": trade_no
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_nlife_b2c_item_detail_get(
            self,
            store_id,
            unique_code
    ):
        """
        b2c码详情查询
        根据零售+平台生成的唯一码获取对应详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28664

        :param store_id: 商家入驻门店在零售+平台的ID
        :param unique_code: 零售+平台生成的唯一码或条码
        """
        return self._top_request(
            "alibaba.nlife.b2c.item.detail.get",
            {
                "store_id": store_id,
                "unique_code": unique_code
            }
        )

    def alibaba_nlife_b2c_code_convert(
            self,
            url,
            store_id=''
    ):
        """
        b2c转码
        将商品的URL转码，ISV将该码写入RFID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29320

        :param url: 商品URL
        :param store_id: 零售商在零售+平台ID，非唯一码模式必填，建议传递该值
        """
        return self._top_request(
            "alibaba.nlife.b2c.code.convert",
            {
                "url": url,
                "store_id": store_id
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_nlife_b2c_member_register(
            self,
            phone_no,
            company_id,
            store_id='',
            remarks='',
            name='',
            birth='',
            gender='',
            tb_user_id='',
            tb_nick=''
    ):
        """
        开放会员注册
        注册成功会员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29847

        :param phone_no: 注册会员使用的手机号码
        :param company_id: 企业ID
        :param store_id: 零售+门店id，注册成为该门店的会员
        :param remarks: 记录一些特殊的偏好等
        :param name: 姓名
        :param birth: 会员生日
        :param gender: 会员性别 1：male;0：female
        :param tb_user_id: 淘宝用户ID
        :param tb_nick: 淘宝昵称，可用于后续PassPort识别
        """
        return self._top_request(
            "alibaba.nlife.b2c.member.register",
            {
                "phone_no": phone_no,
                "company_id": company_id,
                "store_id": store_id,
                "remarks": remarks,
                "name": name,
                "birth": birth,
                "gender": gender,
                "tb_user_id": tb_user_id,
                "tb_nick": tb_nick
            }
        )

    def alibaba_nlife_b2c_member_compute(
            self,
            card_no,
            company_id,
            total_fee,
            points,
            privilege_ids,
            optimal,
            store_id=''
    ):
        """
        开放会员算价
        用于消费者在使用会员权益过程中价格计算
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29869

        :param card_no: 会员标识
        :param company_id: 企业id，该企业的会员
        :param total_fee: 本次消费金额，单位 人民币 分
        :param points: 本次交易使用的积分数量
        :param privilege_ids: 选取的优惠ID列表
        :param optimal: 为true时，ISV需计算最优组合，为false时按用户指定的权益进行计算
        :param store_id: 门店id，该门店的会员
        """
        return self._top_request(
            "alibaba.nlife.b2c.member.compute",
            {
                "card_no": card_no,
                "company_id": company_id,
                "total_fee": total_fee,
                "points": points,
                "privilege_ids": privilege_ids,
                "optimal": optimal,
                "store_id": store_id
            }
        )

    def alibaba_nlife_b2c_member_query(
            self,
            query_str,
            company_id,
            store_id='',
            query_str_type=''
    ):
        """
        开放会员查询
        查询会员信息用于与CRM对接。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29870

        :param query_str: 查询码
        :param company_id: 会员隶属的企业ID
        :param store_id: 会员隶属的零售+门店ID
        :param query_str_type: taobao或者是空 空的话可能是手机号或者会员卡号
        """
        return self._top_request(
            "alibaba.nlife.b2c.member.query",
            {
                "query_str": query_str,
                "company_id": company_id,
                "store_id": store_id,
                "query_str_type": query_str_type
            }
        )

    def alibaba_nlife_b2c_member_privilege_manage(
            self,
            card_no,
            company_id,
            trade_no,
            operation_type,
            fee,
            points,
            privilege_ids='',
            refund_no=''
    ):
        """
        会员开放权益管理
        用于告知ISV锁定权益或者解锁
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29871

        :param card_no: 会员在ISV处的标识，可能是手机号
        :param company_id: 会员所属的企业ID
        :param trade_no: 零售+订单号，选取的优惠项用于此订单
        :param operation_type: 操作类型，锁定：LOCK； 解锁：UNLOCK；核销：CONSUME；退款：REVERT
        :param fee: 储值卡支付的金额，单位分。如果没使用则为0，单位：分；当operation_type为LOCK和REVERT时，需要按照该参数指定的金额进行操作；当operation_type为UNLOCK和CONSUME时，直接按trade_no上锁定的数值操作
        :param points: 订单关联的积分，如果没使用 则为0。当operation_type为LOCK和REVERT时，需要按照该参数指定的数值进行操作；当operation_type为UNLOCK和CONSUME时，直接按trade_no上锁定的数值操作；
        :param privilege_ids: 选取的或需要解锁的优惠列表，针对有特定表达的优惠，比如券。如果没有则空列表；当操作类型是非LOCK时，无需关心
        :param refund_no: 单次退款号，用于幂等处理。operation_type为'REVERT'时会传递此参数
        """
        return self._top_request(
            "alibaba.nlife.b2c.member.privilege.manage",
            {
                "card_no": card_no,
                "company_id": company_id,
                "trade_no": trade_no,
                "operation_type": operation_type,
                "fee": fee,
                "points": points,
                "privilege_ids": privilege_ids,
                "refund_no": refund_no
            }
        )

    def alibaba_nlife_b2c_member_binding(
            self,
            card_no,
            company_id,
            tb_nick,
            tb_user_id=''
    ):
        """
        开放会员绑定
        用于已经注册会员的用户绑定淘宝账号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29872

        :param card_no: 会员在ISV处的标识
        :param company_id: 会员所属企业ID
        :param tb_nick: 会员的淘宝昵称 不能重复绑定
        :param tb_user_id: 会员的淘宝ID
        """
        return self._top_request(
            "alibaba.nlife.b2c.member.binding",
            {
                "card_no": card_no,
                "company_id": company_id,
                "tb_nick": tb_nick,
                "tb_user_id": tb_user_id
            }
        )

    def alibaba_nlife_b2c_member_bindshow(
            self,
            company_id
    ):
        """
        各种开卡方式的描述信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29907

        :param company_id: 公司ID
        """
        return self._top_request(
            "alibaba.nlife.b2c.member.bindshow",
            {
                "company_id": company_id
            }
        )

    def alibaba_nlife_store_items_get(
            self,
            store_id_type,
            store_id,
            cid='',
            brand_id='',
            status='ALL',
            type='STORE_GOODS',
            title='',
            start_modified='',
            end_modified='',
            page_no='1',
            page_size='40',
            item_type=''
    ):
        """
        获取门店的商品列表(在售|已下架|全部)
        利用该接口可以获取到零售+商品服务中符合条件的商品列表，包括在售的、已下架的或者是所有状态的商品。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30693

        :param store_id_type: 门店类型: 零售加的门店-RETAIL_PLUS_STORE ; 商户中心门店-PLACE_STORE ;  门店设备号-STORE_DEVICE
        :param store_id: 门店ID/设备号
        :param cid: 商品类目ID
        :param brand_id: 品牌ID
        :param status: 商品状态: ON_SALE-在售 ; OFF_SALE-已下架 ; ALL-全部
        :param type: 商品类型: STORE_GOODS-经销/现货 ; SUPPLIER_GOODS-代销/网直供 ; TAOKE-淘宝客 ; ALL-全部商品
        :param title: 商品名称(支持模糊查询)
        :param start_modified: 查询开始时间
        :param end_modified: 查询结束时间
        :param page_no: 分页的页码
        :param page_size: 分页时每页的数量
        :param item_type: 商品的来源：0-从零售加采购的商品；1-商户线下导入的商品
        """
        return self._top_request(
            "alibaba.nlife.store.items.get",
            {
                "store_id_type": store_id_type,
                "store_id": store_id,
                "cid": cid,
                "brand_id": brand_id,
                "status": status,
                "type": type,
                "title": title,
                "start_modified": start_modified,
                "end_modified": end_modified,
                "page_no": page_no,
                "page_size": page_size,
                "item_type": item_type
            }
        )

    def alibaba_nlife_store_itemdetail_get(
            self,
            store_id_type,
            store_id,
            outer_id='',
            item_id='',
            sku_id_list='',
            item_type='0',
            code=''
    ):
        """
        查询商品的详情信息
        查询零售加平台上单个商品的详情信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30694

        :param store_id_type: 门店类型: 零售加的门店-RETAIL_PLUS_STORE ; 商户中心门店-PLACE_STORE ;  门店设备号-STORE_DEVICE
        :param store_id: 门店ID
        :param outer_id: 商品在外部商家的编码(与item_id不能同时为空)
        :param item_id: 商品Item的ID(与outer_id不能同时为空)
        :param sku_id_list: skuId列表-可查询指定的sku
        :param item_type: 商品来源类型: 0-线上商品; 1-商户导入的线下商品. 如果为空则默认值为0
        :param code: 商家对商品的自用编码
        """
        return self._top_request(
            "alibaba.nlife.store.itemdetail.get",
            {
                "store_id_type": store_id_type,
                "store_id": store_id,
                "outer_id": outer_id,
                "item_id": item_id,
                "sku_id_list": sku_id_list,
                "item_type": item_type,
                "code": code
            }
        )

    def alibaba_nlife_b2c_member_discountrule_get(
            self,
            company_id,
            card_no
    ):
        """
        会员抵扣规则
        获取企业会员抵扣规则
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30843

        :param company_id: 企业ID
        :param card_no: 会员在ISV处的编号
        """
        return self._top_request(
            "alibaba.nlife.b2c.member.discountrule.get",
            {
                "company_id": company_id,
                "card_no": card_no
            }
        )

    def alibaba_nlife_store_itemdetails_get(
            self,
            store_id,
            store_id_type,
            item_query_d_o_list,
            item_type='0'
    ):
        """
        批量获取零售加商品详情信息
        批量获取零售加平台上的商品详情信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30846

        :param store_id: 门店ID/设备号
        :param store_id_type: 门店类型: 零售加的门店-RETAIL_PLUS_STORE ; 商户中心门店-PLACE_STORE ; 门店设备号-STORE_DEVICE
        :param item_query_d_o_list: 查询参数list
        :param item_type: 商品来源类型: 0-线上商品; 1-商户导入的线下商品. 如果为空则默认值为0
        """
        return self._top_request(
            "alibaba.nlife.store.itemdetails.get",
            {
                "store_id": store_id,
                "store_id_type": store_id_type,
                "item_query_d_o_list": item_query_d_o_list,
                "item_type": item_type
            }
        )

    def alibaba_nlife_store_stores_get(
            self,
            group_store_id,
            page_size='',
            page_no=''
    ):
        """
        查询零售集团下的门店列表
        查询零售Plus平台上零售集团下的门店列表信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31011

        :param group_store_id: 零售集团的storeId
        :param page_size: 每页条数
        :param page_no: 分页查询的页码
        """
        return self._top_request(
            "alibaba.nlife.store.stores.get",
            {
                "group_store_id": group_store_id,
                "page_size": page_size,
                "page_no": page_no
            }
        )

    def alibaba_nlife_b2c_deposit_total(
            self,
            company_id,
            query_str,
            time_start,
            time_end,
            query_type
    ):
        """
        储值统计
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31041

        :param company_id: 企业ID
        :param query_str: 查询 手机号 导购员编号
        :param time_start: yyyy-MM-dd HH:mm:ss
        :param time_end: yyyy-MM-dd HH:mm:ss
        :param query_type: 查询类型 phone  operator
        """
        return self._top_request(
            "alibaba.nlife.b2c.deposit.total",
            {
                "company_id": company_id,
                "query_str": query_str,
                "time_start": time_start,
                "time_end": time_end,
                "query_type": query_type
            }
        )

    def alibaba_nlife_b2c_deposit_query(
            self,
            company_id,
            query_str,
            query_type,
            page_size,
            time_start,
            time_end,
            last_id=''
    ):
        """
        储值查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31042

        :param company_id: 企业ID
        :param query_str: 查询条件 可能是导购员或者手机号
        :param query_type: phone sales
        :param page_size: 最多取多少行
        :param time_start: 开始时间
        :param time_end: 结束时间
        :param last_id: 从哪行开始
        """
        return self._top_request(
            "alibaba.nlife.b2c.deposit.query",
            {
                "company_id": company_id,
                "query_str": query_str,
                "query_type": query_type,
                "page_size": page_size,
                "time_start": time_start,
                "time_end": time_end,
                "last_id": last_id
            }
        )

    def alibaba_nlife_b2c_deposit_recharge(
            self,
            company_id,
            member_card_id,
            deposit_level_id,
            pay_type='',
            operator='',
            sales='',
            store=''
    ):
        """
        储值提交
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31043

        :param company_id: 公司ID
        :param member_card_id: 会员ID
        :param deposit_level_id: 储值档位
        :param pay_type: 支付方式
        :param operator: 操作人
        :param sales: 导购员用于算业绩
        :param store: 门店信息
        """
        return self._top_request(
            "alibaba.nlife.b2c.deposit.recharge",
            {
                "company_id": company_id,
                "member_card_id": member_card_id,
                "deposit_level_id": deposit_level_id,
                "pay_type": pay_type,
                "operator": operator,
                "sales": sales,
                "store": store
            }
        )

    def alibaba_nlife_b2c_deposit_memberrule_get(
            self,
            company_id,
            level_no
    ):
        """
        储值档位查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31044

        :param company_id: 公司ID
        :param level_no: 会员档次
        """
        return self._top_request(
            "alibaba.nlife.b2c.deposit.memberrule.get",
            {
                "company_id": company_id,
                "level_no": level_no
            }
        )

    def alibaba_nlife_b2c_trade_discountrule_get(
            self,
            channel,
            member_id,
            company_id,
            store_id=''
    ):
        """
        交易会员抵扣规则
        获取会员对应抵扣规则
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31335

        :param channel: APP；POS
        :param member_id: 手机号；微信openId；淘宝昵称等
        :param company_id: 企业ID
        :param store_id: 零售+门店ID
        """
        return self._top_request(
            "alibaba.nlife.b2c.trade.discountrule.get",
            {
                "channel": channel,
                "member_id": member_id,
                "company_id": company_id,
                "store_id": store_id
            }
        )

    def alibaba_nlife_b2c_tradestatus_drive(
            self,
            store_id,
            channel,
            out_trade_no='',
            trade_no='',
            action='',
            logistics_info=None,
            extend_params=''
    ):
        """
        b2c订单状态驱动
        用于驱动零售+订单状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31476

        :param store_id: 零售门店在零售+平台的ID
        :param channel: APP:是指线上销售应用，POS:是指现场收银应用
        :param out_trade_no: 对零售+为外部订单号，对业务方为订单号
        :param trade_no: 零售+平台订单号，和out_trade_no不能同时为空
        :param action: 接口类型：CONFIRM（收货）DELIVER（发货）
        :param logistics_info: 货流信息
        :param extend_params: 扩展参数 JSON格式
        """
        return self._top_request(
            "alibaba.nlife.b2c.tradestatus.drive",
            {
                "store_id": store_id,
                "channel": channel,
                "out_trade_no": out_trade_no,
                "trade_no": trade_no,
                "action": action,
                "logistics_info": logistics_info,
                "extend_params": extend_params
            },
            result_processor=lambda x: x["message"]
        )

    def alibaba_nlife_store_items_create(
            self,
            item_create_do
    ):
        """
        同步商品到零售加
        商品发布规则：
        1、发布商品的销售属性的值不能为“其他”或者 “无”
        2、属性值最大长度为28个字符(14个汉字)
        3、商品名称不能包含“专供”关键词
        4、sku 吊牌价不能小于等于0
        5、商品标题不能超过30个汉字或60个字符
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31801

        :param item_create_do: 商品
        """
        return self._top_request(
            "alibaba.nlife.store.items.create",
            {
                "item_create_do": item_create_do
            }
        )

    def alibaba_nlife_storage_instorage(
            self,
            store_id,
            consign_no,
            item_id,
            sku_id,
            in_storage_type,
            barcode='',
            quantity='',
            unique_codes=''
    ):
        """
        采购入库
        * 若没有尚未完成的入库单 -> 创建一个入库单入库
        * 若尚未完成的入库单不是入库中状态 -> 报错提示状态不对
        * 若后续没有商品需要入库 -> 完结当前入库单
        * 若入库单完结后有差异 -> 发TOP消息，有差异
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35768

        :param store_id: 门店id
        :param consign_no: 采购发货单号
        :param item_id: 商品itemId
        :param sku_id: 商品skuId
        :param in_storage_type: 入库方式，0条码， 1唯一码
        :param barcode: 条形码
        :param quantity: 入库数量
        :param unique_codes: 唯一码列表
        """
        return self._top_request(
            "alibaba.nlife.storage.instorage",
            {
                "store_id": store_id,
                "consign_no": consign_no,
                "item_id": item_id,
                "sku_id": sku_id,
                "in_storage_type": in_storage_type,
                "barcode": barcode,
                "quantity": quantity,
                "unique_codes": unique_codes
            },
            result_processor=lambda x: x["instorage_no"]
        )

    def alibaba_nlife_storage_commit(
            self,
            consign_no,
            store_id
    ):
        """
        提交入库单
        * 若入库单在待复查状态 -> 跳过复查阶段，直接创建差异单并提交
        * 若入库单在复查完成状态 -> 直接创建差异单并提交
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35769

        :param consign_no: 发货单号
        :param store_id: 门店id
        """
        return self._top_request(
            "alibaba.nlife.storage.commit",
            {
                "consign_no": consign_no,
                "store_id": store_id
            }
        )

    def alibaba_nlife_storage_instorage_diff_commit(
            self,
            consign_no,
            store_id
    ):
        """
        提交差异确认单
        * 若入库单在待复查状态 -> 跳过复查阶段，直接创建差异单并提交
        * 若入库单在复查完成状态 -> 直接创建差异单并提交
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35770

        :param consign_no: 发货单号
        :param store_id: 门店id
        """
        return self._top_request(
            "alibaba.nlife.storage.instorage.diff.commit",
            {
                "consign_no": consign_no,
                "store_id": store_id
            },
            result_processor=lambda x: x["gmt_commit"]
        )

    def alibaba_nlife_b2b_trade_list(
            self,
            page_no,
            page_size,
            ent_id,
            start_effective_date='',
            end_effective_date=''
    ):
        """
        获取企业下的采购单列表
        获取指定门店下的采购单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36762

        :param page_no: 查询的页码
        :param page_size: 每页的数量
        :param ent_id: 企业ID
        :param start_effective_date: 采购单生效时间开始范围
        :param end_effective_date: 采购单生效时间结束范围
        """
        return self._top_request(
            "alibaba.nlife.b2b.trade.list",
            {
                "page_no": page_no,
                "page_size": page_size,
                "ent_id": ent_id,
                "start_effective_date": start_effective_date,
                "end_effective_date": end_effective_date
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_nlife_store_deliverdetail_get(
            self,
            consign_no,
            store_id
    ):
        """
        查询发货单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36763

        :param consign_no: 发货单号
        :param store_id: 门店id
        """
        return self._top_request(
            "alibaba.nlife.store.deliverdetail.get",
            {
                "consign_no": consign_no,
                "store_id": store_id
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_nlife_store_delivers_get(
            self,
            trade_no,
            store_id,
            page_size='10',
            page_no='1'
    ):
        """
        获取门店采购单下的发货单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36778

        :param trade_no: 门店采购订单号
        :param store_id: 零售商的门店id
        :param page_size: 每页的数量
        :param page_no: 查询的页码
        """
        return self._top_request(
            "alibaba.nlife.store.delivers.get",
            {
                "trade_no": trade_no,
                "store_id": store_id,
                "page_size": page_size,
                "page_no": page_no
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_nlife_store_deliver_sign(
            self,
            store_id,
            consign_no
    ):
        """
        签收发货单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36779

        :param store_id: 门店id
        :param consign_no: 发货单号
        """
        return self._top_request(
            "alibaba.nlife.store.deliver.sign",
            {
                "store_id": store_id,
                "consign_no": consign_no
            },
            result_processor=lambda x: x["gmt_sign"]
        )

    def alibaba_nlife_ent_supplier_list(
            self,
            group_id,
            group_out_id=''
    ):
        """
        获取零售商正在合作的供应商列表
        获取在零售+系统中与零售商正在合作的供应商列表，主要包含供应商的一些档案信息，供应商编码、供应商名称、供应商的联系人、联系方式等。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36889

        :param group_id: 零售商企业id
        :param group_out_id: 零售商企业的外部编码
        """
        return self._top_request(
            "alibaba.nlife.ent.supplier.list",
            {
                "group_id": group_id,
                "group_out_id": group_out_id
            }
        )

    def alibaba_nlife_store_tradedetail_get(
            self,
            procurement_no
    ):
        """
        查询采购单详情信息
        根据集团id和采购单号，查询采购单的详情信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36908

        :param procurement_no: 集团采购单号
        """
        return self._top_request(
            "alibaba.nlife.store.tradedetail.get",
            {
                "procurement_no": procurement_no
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_nlife_storage_item_adjust(
            self,
            adjust_inventory,
            adjust_no,
            store_id,
            biz_no,
            adjust_type,
            after_adjust_inventory='',
            before_adjust_inventory='',
            barcode='',
            item_id='',
            sku_id='',
            item_type='',
            adjust_unique_codes=''
    ):
        """
        调整商品库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36989

        :param adjust_inventory: 调整数量，有正负
        :param adjust_no: 调整单号
        :param store_id: 门店id
        :param biz_no: 请求流水号
        :param adjust_type: 调整类型
        :param after_adjust_inventory: 调整后数量
        :param before_adjust_inventory: 调整前数量
        :param barcode: 条形码
        :param item_id: itemId
        :param sku_id: skuId
        :param item_type: 商品类型
        :param adjust_unique_codes: 调整的唯一码
        """
        return self._top_request(
            "alibaba.nlife.storage.item.adjust",
            {
                "adjust_inventory": adjust_inventory,
                "adjust_no": adjust_no,
                "store_id": store_id,
                "biz_no": biz_no,
                "adjust_type": adjust_type,
                "after_adjust_inventory": after_adjust_inventory,
                "before_adjust_inventory": before_adjust_inventory,
                "barcode": barcode,
                "item_id": item_id,
                "sku_id": sku_id,
                "item_type": item_type,
                "adjust_unique_codes": adjust_unique_codes
            },
            result_processor=lambda x: x["gmt_adjust"]
        )

    def alibaba_nlife_b2b_trade_refund_consign(
            self,
            consign_d_o
    ):
        """
        采购退货单发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38356

        :param consign_d_o: 发货信息DO
        """
        return self._top_request(
            "alibaba.nlife.b2b.trade.refund.consign",
            {
                "consign_d_o": consign_d_o
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_nlife_b2b_trade_refund_get(
            self,
            store_id,
            refund_no
    ):
        """
        采购退货单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38357

        :param store_id: 门店id
        :param refund_no: 采购退货单单号
        """
        return self._top_request(
            "alibaba.nlife.b2b.trade.refund.get",
            {
                "store_id": store_id,
                "refund_no": refund_no
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_nlife_b2b_trade_refund_list(
            self,
            page_no,
            page_size,
            start_effective_date='',
            end_effective_date='',
            ent_id=''
    ):
        """
        获取采购退货单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38388

        :param page_no: 查询的页数
        :param page_size: 每页的数量
        :param start_effective_date: 采购退货单创建时间开始范围
        :param end_effective_date: 采购退货单创建时间结束范围
        :param ent_id: 企业Id
        """
        return self._top_request(
            "alibaba.nlife.b2b.trade.refund.list",
            {
                "page_no": page_no,
                "page_size": page_size,
                "start_effective_date": start_effective_date,
                "end_effective_date": end_effective_date,
                "ent_id": ent_id
            },
            result_processor=lambda x: x["data"]
        )


class TbTianMaoMenDian(DingTalkBaseAPI):
    """
    天猫门店API
    """

    def tmall_store_item_query(
            self,
            store_code='',
            item_id='',
            include_lbs='false',
            include_sku='false',
            include_service='false'
    ):
        """
        查询门店商品详情
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        新零售中台门店商品查询接口，提供对外查询相关门店的商品详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31166

        :param store_code: 门店编码
        :param item_id: 商品Id
        :param include_lbs: 是否包含位置信息
        :param include_sku: 是否包含sku信息
        :param include_service: 是否包含服务信息
        """
        return self._top_request(
            "tmall.store.item.query",
            {
                "store_code": store_code,
                "item_id": item_id,
                "include_lbs": include_lbs,
                "include_sku": include_sku,
                "include_service": include_service
            }
        )

    def tmall_store_item_update(
            self,
            update_item_request=None
    ):
        """
        更新商品信息
        新零售中台门店商品更新接口，提供对外更新相关门店的商品详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31410

        :param update_item_request: 入参
        """
        return self._top_request(
            "tmall.store.item.update",
            {
                "update_item_request": update_item_request
            }
        )

    def tmall_store_item_add(
            self,
            item_id,
            store_code,
            skus=None
    ):
        """
        增加门店商品
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        新零售中台门店商品创建接口，提供对外创建相关门店的商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31414

        :param item_id: 商品Id
        :param store_code: 门店编码
        :param skus: sku集合
        """
        return self._top_request(
            "tmall.store.item.add",
            {
                "item_id": item_id,
                "store_code": store_code,
                "skus": skus
            }
        )

    def tmall_store_item_inventory_update(
            self,
            store_code,
            item_id,
            stock,
            sku_id='',
            inv_biz_code='SHARE_INVENTORY'
    ):
        """
        更新商品库存信息
        新零售中台门店商品库存更新接口，提供对外更新相关门店的商品库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31416

        :param store_code: 门店编码
        :param item_id: 商品Id
        :param stock: 库存数量
        :param sku_id: SkuId
        :param inv_biz_code: 库存类型
        """
        return self._top_request(
            "tmall.store.item.inventory.update",
            {
                "store_code": store_code,
                "item_id": item_id,
                "stock": stock,
                "sku_id": sku_id,
                "inv_biz_code": inv_biz_code
            }
        )

    def tmall_store_item_location_update(
            self,
            store_code,
            item_id,
            sku_id='0',
            location_code='',
            location_name='',
            location_type=''
    ):
        """
        更新商品位置信息
        新零售中台门店商品位置更新接口，提供对外更新相关门店的商品位置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31417

        :param store_code: 门店编码
        :param item_id: 商品Id
        :param sku_id: SkuId
        :param location_code: 位置编码
        :param location_name: 位置名称
        :param location_type: 位置类型
        """
        return self._top_request(
            "tmall.store.item.location.update",
            {
                "store_code": store_code,
                "item_id": item_id,
                "sku_id": sku_id,
                "location_code": location_code,
                "location_name": location_name,
                "location_type": location_type
            }
        )

    def tmall_store_order_create(
            self,
            app_info=None,
            create_order_request=None
    ):
        """
        门店订单创建api
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31452

        :param app_info: 系统自动生成
        :param create_order_request: 创建订单请求
        """
        return self._top_request(
            "tmall.store.order.create",
            {
                "app_info": app_info,
                "create_order_request": create_order_request
            },
            result_processor=lambda x: x["detail_results"]
        )

    def alibaba_interact_retail_queryshelflocation(
            self,
            param0=''
    ):
        """
        查询货架和位置数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31454

        :param param0: 门店code
        """
        return self._top_request(
            "alibaba.interact.retail.queryshelflocation",
            {
                "param0": param0
            }
        )

    def alibaba_interact_retail_saveshelflocation(
            self,
            store_code='',
            shelf_no='',
            lng='',
            lat='',
            poi_id='',
            address=''
    ):
        """
        保存地理位置和货架关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31455

        :param store_code: 门店code
        :param shelf_no: 货架编号
        :param lng: 经度
        :param lat: 纬度
        :param poi_id: POI
        :param address: 地址
        """
        return self._top_request(
            "alibaba.interact.retail.saveshelflocation",
            {
                "store_code": store_code,
                "shelf_no": shelf_no,
                "lng": lng,
                "lat": lat,
                "poi_id": poi_id,
                "address": address
            }
        )

    def alibaba_retail_electronic_certificate_confirm(
            self,
            code='',
            item_id='',
            device_id=''
    ):
        """
        确认核销接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33949

        :param code: 核销码
        :param item_id: 商品ID
        :param device_id: 设备ID
        """
        return self._top_request(
            "alibaba.retail.electronic.certificate.confirm",
            {
                "code": code,
                "item_id": item_id,
                "device_id": device_id
            }
        )

    def alibaba_retail_electronic_certificate_pre_confirm(
            self,
            device_id='',
            code=''
    ):
        """
        贩卖机开始核销接口
        零售终端贩卖机开始核销接口,返回待领的商品ID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33950

        :param device_id: 设备ID
        :param code: 核销码
        """
        return self._top_request(
            "alibaba.retail.electronic.certificate.pre.confirm",
            {
                "device_id": device_id,
                "code": code
            }
        )

    def alibaba_retail_device_info_get(
            self,
            device_uuid='',
            device_code='',
            device_sn=''
    ):
        """
        贩卖机设备信息获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41297

        :param device_uuid: 外部设备ID
        :param device_code: 阿里设备编码
        :param device_sn: 阿里设备物理ID（32位）
        """
        return self._top_request(
            "alibaba.retail.device.info.get",
            {
                "device_uuid": device_uuid,
                "device_code": device_code,
                "device_sn": device_sn
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_retail_device_road_status_reset(
            self,
            device_uuid='',
            device_code='',
            device_sn='',
            road_no_list=''
    ):
        """
        贩卖机货道解锁
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41298

        :param device_uuid: 设备外部编码
        :param device_code: 阿里设备编码
        :param device_sn: 阿里设备物理编码
        :param road_no_list: 货道编码
        """
        return self._top_request(
            "alibaba.retail.device.road.status.reset",
            {
                "device_uuid": device_uuid,
                "device_code": device_code,
                "device_sn": device_sn,
                "road_no_list": road_no_list
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_retail_device_order_query(
            self,
            status,
            page_size,
            page_num,
            starts,
            ends,
            device_sn_list='',
            device_uuid='',
            device_code='',
            pay_type=''
    ):
        """
        贩卖机订单查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41320

        :param status: -20 已退款，-10 交易关闭 ，10 创单 20 已支付  30 已出货  40 交易完成
        :param page_size: 分页大小
        :param page_num: 页码
        :param starts: 查询订单开始时间
        :param ends: 查询订单结束时间
        :param device_sn_list: 阿里设备物理ID
        :param device_uuid: 外部设备编码
        :param device_code: 阿里设备编码
        :param pay_type: CASH 现金，ALIPAY_FACE_PAY_QR 支付宝，VENDING_PRIZE 抽奖，FACE_PAY 人脸
        """
        return self._top_request(
            "alibaba.retail.device.order.query",
            {
                "status": status,
                "page_size": page_size,
                "page_num": page_num,
                "starts": starts,
                "ends": ends,
                "device_sn_list": device_sn_list,
                "device_uuid": device_uuid,
                "device_code": device_code,
                "pay_type": pay_type
            }
        )

    def alibaba_retail_vending_price_whitelist_add(
            self,
            valid_starts,
            valid_ends,
            barcode,
            seller_id='',
            device_code_list='',
            device_uuid_list='',
            item_id='',
            min_price='',
            all_device=''
    ):
        """
        贩卖机价格修改白名单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41927

        :param valid_starts: 生效时间
        :param valid_ends: 生效结束时间
        :param barcode: 条码
        :param seller_id: 淘宝用户ID
        :param device_code_list: 设备编码 device_code_list, device_uuid_list 二选一必填
        :param device_uuid_list: 外部设备编码   device_code_list, device_uuid_list 二选一必填
        :param item_id: 商品ID
        :param min_price: 允许修改的最低价
        :param all_device: 是否生效到所有设备
        """
        return self._top_request(
            "alibaba.retail.vending.price.whitelist.add",
            {
                "valid_starts": valid_starts,
                "valid_ends": valid_ends,
                "barcode": barcode,
                "seller_id": seller_id,
                "device_code_list": device_code_list,
                "device_uuid_list": device_uuid_list,
                "item_id": item_id,
                "min_price": min_price,
                "all_device": all_device
            }
        )

    def alibaba_retail_vending_price_whitelist_remove(
            self,
            barcode,
            seller_id='',
            device_code_list='',
            device_uuid_list='',
            item_id='',
            all_device=''
    ):
        """
        价格管控白名单去除
        商家价格管控白名单去除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42075

        :param barcode: 条码
        :param seller_id: 淘宝用户ID
        :param device_code_list: 设备编码 device_code_list, device_uuid_list 二选一必填
        :param device_uuid_list: 外部设备编码 device_code_list, device_uuid_list 二选一必填
        :param item_id: 如果该参数传入，条码以商品条码为准
        :param all_device: 是否生效到所有设备
        """
        return self._top_request(
            "alibaba.retail.vending.price.whitelist.remove",
            {
                "barcode": barcode,
                "seller_id": seller_id,
                "device_code_list": device_code_list,
                "device_uuid_list": device_uuid_list,
                "item_id": item_id,
                "all_device": all_device
            }
        )


class TbAILABTuXiangSuanFa(DingTalkBaseAPI):
    """
    AILAB图像算法API
    """

    def alibaba_ai_ar_service_detect(
            self,
            img_data='',
            num='1',
            cached_targets='',
            device_info='',
            version='1.0'
    ):
        """
        ailab AR图像检索
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28140

        :param img_data: 原始图像数据
        :param num: 最多返回的结果数，默认为1
        :param cached_targets: 本地已cache的target，多个target间以|||分隔
        :param device_info: map，描述所有设备相关信息，如设备ID，分辨率等
        :param version: 版本，默认1.0
        """
        return self._top_request(
            "alibaba.ai.ar.service.detect",
            {
                "img_data": img_data,
                "num": num,
                "cached_targets": cached_targets,
                "device_info": device_info,
                "version": version
            },
            result_processor=lambda x: x["results"]
        )

    def alibaba_ai_ar_tmjl_app_detect(
            self,
            img_data='',
            num='1',
            cached_targets='',
            device_info='',
            version='1.0'
    ):
        """
        天猫精灵扫一扫入口的服务
        天猫精灵扫一扫入口的图像检测服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36850

        :param img_data: 原始图像数据
        :param num: 最多返回的结果数，默认为1
        :param cached_targets: 本地已cache的target，多个target间以|||分隔
        :param device_info: map，描述所有设备相关信息，如设备ID，分辨率等
        :param version: 版本，默认1.0
        """
        return self._top_request(
            "alibaba.ai.ar.tmjl.app.detect",
            {
                "img_data": img_data,
                "num": num,
                "cached_targets": cached_targets,
                "device_info": device_info,
                "version": version
            },
            result_processor=lambda x: x["results"]
        )

    def alibaba_ai_ar_open_platform_detect(
            self,
            img_data='',
            num='1',
            cached_targets='',
            device_info='',
            version='1.0'
    ):
        """
        AR开发者平台marker图片检测服务
        AR开发者平台marker图片检测服务，给AR SDK 和 阿里火眼app使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37057

        :param img_data: 原始图像数据
        :param num: 最多返回的结果数，默认为1
        :param cached_targets: 本地已cache的target，多个target间以|||分隔
        :param device_info: map，描述所有设备相关信息，如设备ID，分辨率等
        :param version: 版本，默认1.0
        """
        return self._top_request(
            "alibaba.ai.ar.open.platform.detect",
            {
                "img_data": img_data,
                "num": num,
                "cached_targets": cached_targets,
                "device_info": device_info,
                "version": version
            }
        )


class TbTianMaoGongYingLian(DingTalkBaseAPI):
    """
    天猫供应链
    """

    def tmall_ascp_pricing_scm_tof(
            self,
            costs
    ):
        """
        TOF&SCM营销域对接-成本录入设置
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40826

        :param costs: 成本价集合
        """
        return self._top_request(
            "tmall.ascp.pricing.scm.tof",
            {
                "costs": costs
            }
        )


class TbHuanXingKaiFaPingTai(DingTalkBaseAPI):
    """
    欢行开发平台API
    """

    def alibaba_happytrip_taxi_order_notify(
            self,
            notify_type,
            order_id,
            time='',
            notify_desc=''
    ):
        """
        状态通知
        当订单发生变化是供应商通过状态通知API通知欢行，欢行获取最新的订单详情和状态进行业务处理。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28377

        :param notify_type: 通知类型: 1-订单中间状态流转 2-订单终态通知 3-支付确认通知 4-订单退款通知 5-订单改价通知 6-客服关单通知。参考：https://open-hatrip.alibaba.com/doc/car/order_status_callback.html
        :param order_id: 订单id
        :param time: 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数
        :param notify_desc: 通知说明
        """
        return self._top_request(
            "alibaba.happytrip.taxi.order.notify",
            {
                "notify_type": notify_type,
                "order_id": order_id,
                "time": time,
                "notify_desc": notify_desc
            }
        )

    def alibaba_happytrip_travel_sync(
            self,
            travel_head_dto
    ):
        """
        差旅申请单同步接口
        以外部差旅申请单id（outer_travel_head_id）为主键，保存或更新差旅单信息到欢行系统中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38152

        :param travel_head_dto: 差旅申请单对象
        """
        return self._top_request(
            "alibaba.happytrip.travel.sync",
            {
                "travel_head_dto": travel_head_dto
            },
            result_processor=lambda x: x["travel_id"]
        )

    def alibaba_happytrip_order_get(
            self,
            order_id
    ):
        """
        获取欢行统一订单模型
        通过订单id获取欢行统一订单模型数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38166

        :param order_id: 订单id
        """
        return self._top_request(
            "alibaba.happytrip.order.get",
            {
                "order_id": order_id
            }
        )


class TbKuaJing(DingTalkBaseAPI):
    """
    跨境API
    """

    def alibaba_oversea_translate_get(
            self,
            text,
            source_lang,
            target_lang
    ):
        """
        获取文本翻译信息
        根据传入的文本信息，获取其目标语言的翻译结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28548

        :param text: 待翻译文本
        :param source_lang: 源语种英文
        :param target_lang: 目标语种中文
        """
        return self._top_request(
            "alibaba.oversea.translate.get",
            {
                "text": text,
                "source_lang": source_lang,
                "target_lang": target_lang
            }
        )

    def alibaba_oversea_exchagerate_get(
            self,
            base_code,
            target_code,
            biz_code='tmallhk'
    ):
        """
        汇率信息获取
        提供外部汇率查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28703

        :param base_code: 原始币种
        :param target_code: 目标币种
        :param biz_code: 业务类型
        """
        return self._top_request(
            "alibaba.oversea.exchagerate.get",
            {
                "base_code": base_code,
                "target_code": target_code,
                "biz_code": biz_code
            }
        )


class TbYingKeSongPaiZhaoShenHeJieKou(DingTalkBaseAPI):
    """
    迎客松牌照审核接口
    """

    def yunos_tvpubadmin_device_models(
            self,
            terminal_type,
            brand_id,
            license
    ):
        """
        获取品牌下设备列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28580

        :param terminal_type: 终端类型
        :param brand_id: 品牌ID
        :param license: 牌照方
        """
        return self._top_request(
            "yunos.tvpubadmin.device.models",
            {
                "terminal_type": terminal_type,
                "brand_id": brand_id,
                "license": license
            },
            result_processor=lambda x: x["model_list"]
        )

    def yunos_tvpubadmin_device_brands(
            self,
            terminal_type,
            license
    ):
        """
        获取终端类型下品牌列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28581

        :param terminal_type: 终端类型
        :param license: 牌照方
        """
        return self._top_request(
            "yunos.tvpubadmin.device.brands",
            {
                "terminal_type": terminal_type,
                "license": license
            },
            result_processor=lambda x: x["list"]
        )

    def yunos_tvpubadmin_device_stats(
            self,
            factory_name,
            device_model
    ):
        """
        获取设备统计数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28582

        :param factory_name: 厂商名称
        :param device_model: 设备型号
        """
        return self._top_request(
            "yunos.tvpubadmin.device.stats",
            {
                "factory_name": factory_name,
                "device_model": device_model
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_device_apkinfo(
            self,
            id
    ):
        """
        获取停开服apk信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28583

        :param id: apkid
        """
        return self._top_request(
            "yunos.tvpubadmin.device.apkinfo",
            {
                "id": id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_diccontroltask_update(
            self,
            id='',
            status='0',
            license='0'
    ):
        """
        停开服任务状态变更
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28584

        :param id: 任务ID
        :param status: 任务状态
        :param license: 牌照方
        """
        return self._top_request(
            "yunos.tvpubadmin.diccontroltask.update",
            {
                "id": id,
                "status": status,
                "license": license
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_channel_query(
            self,
            channel_audit_query
    ):
        """
        迎客松影视频道查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28585

        :param channel_audit_query: ChannelAuditQueryBO
        """
        return self._top_request(
            "yunos.tvpubadmin.content.channel.query",
            {
                "channel_audit_query": channel_audit_query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_diccontroltask_add(
            self,
            task=None
    ):
        """
        新增停开服任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28586

        :param task: 任务信息
        """
        return self._top_request(
            "yunos.tvpubadmin.diccontroltask.add",
            {
                "task": task
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_diccontroltask_getinfo(
            self,
            id,
            license
    ):
        """
        获取停开服任务详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28587

        :param id: 任务ID
        :param license: 牌照方
        """
        return self._top_request(
            "yunos.tvpubadmin.diccontroltask.getinfo",
            {
                "id": id,
                "license": license
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_channel_offline(
            self,
            id
    ):
        """
        迎客松影视频道下线
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28588

        :param id: id
        """
        return self._top_request(
            "yunos.tvpubadmin.content.channel.offline",
            {
                "id": id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_device_tvid(
            self,
            uuid
    ):
        """
        查询终端信息
        通过UUID查询终端信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28589

        :param uuid: 设备的UUID
        """
        return self._top_request(
            "yunos.tvpubadmin.device.tvid",
            {
                "uuid": uuid
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_topic_querytopic(
            self,
            topic_audit_query
    ):
        """
        迎客松专题查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28590

        :param topic_audit_query: TopicAuditQueryBO
        """
        return self._top_request(
            "yunos.tvpubadmin.content.topic.querytopic",
            {
                "topic_audit_query": topic_audit_query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_device_updateosstatus(
            self,
            license,
            version_id='',
            status='',
            audit_comment=''
    ):
        """
        更新系统版本审核状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28591

        :param license: 牌照方
        :param version_id: 升级ID
        :param status: 审核状态
        :param audit_comment: 审核意见
        """
        return self._top_request(
            "yunos.tvpubadmin.device.updateosstatus",
            {
                "license": license,
                "version_id": version_id,
                "status": status,
                "audit_comment": audit_comment
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_device_updateappstatus(
            self,
            license,
            version_id='',
            status='',
            audit_comment=''
    ):
        """
        更新应用版本审核状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28592

        :param license: 牌照方
        :param version_id: 应用ID
        :param status: 审核状态
        :param audit_comment: 审核意见
        """
        return self._top_request(
            "yunos.tvpubadmin.device.updateappstatus",
            {
                "license": license,
                "version_id": version_id,
                "status": status,
                "audit_comment": audit_comment
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_tableaudit_querymetaitem(
            self,
            table_audit_query_bo
    ):
        """
        运营位管控-查询魔盒运营位元数据列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28593

        :param table_audit_query_bo: 查询条件，json格式
        """
        return self._top_request(
            "yunos.tvpubadmin.content.tableaudit.querymetaitem",
            {
                "table_audit_query_bo": table_audit_query_bo
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_device_getterminaltypemap(
            self
    ):
        """
        获取终端类型表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28594

        """
        return self._top_request(
            "yunos.tvpubadmin.content.device.getterminaltypemap",
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_show_setexemptaudit(
            self,
            show_long_id,
            license,
            exempt_audit
    ):
        """
        迎客松节目设置免审开关
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28595

        :param show_long_id: 节目longid
        :param license: 牌照id：1CIBN，2WASU
        :param exempt_audit: 牌照免审：1-开启节目免审，2-关闭节目免审
        """
        return self._top_request(
            "yunos.tvpubadmin.content.show.setexemptaudit",
            {
                "show_long_id": show_long_id,
                "license": license,
                "exempt_audit": exempt_audit
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_show_getshowexemptauditmap(
            self,
            show_long_ids='',
            license=''
    ):
        """
        迎客松批量查询节目某个牌照的免审状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28596

        :param show_long_ids: 节目longid
        :param license: 牌照id
        """
        return self._top_request(
            "yunos.tvpubadmin.content.show.getshowexemptauditmap",
            {
                "show_long_ids": show_long_ids,
                "license": license
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_topic_offline(
            self,
            id
    ):
        """
        迎客松专题下线
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28597

        :param id: id
        """
        return self._top_request(
            "yunos.tvpubadmin.content.topic.offline",
            {
                "id": id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_show_getbyshowlongid(
            self,
            show_long_id
    ):
        """
        迎客松根据节目longid获取节目元数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28598

        :param show_long_id: 节目longid
        """
        return self._top_request(
            "yunos.tvpubadmin.content.show.getbyshowlongid",
            {
                "show_long_id": show_long_id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_show_getbyshowid(
            self,
            show_id
    ):
        """
        迎客松根据节目id获取节目元数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28599

        :param show_id: 节目字符串id
        """
        return self._top_request(
            "yunos.tvpubadmin.content.show.getbyshowid",
            {
                "show_id": show_id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_advert_queryschedule(
            self,
            range,
            page_no,
            page_size,
            license,
            gmt_start='',
            uuid='',
            sity_type=''
    ):
        """
        广告牌照管控查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28600

        :param range: 查询范围: 1-牌照，4-uuid
        :param page_no: 分页，页码
        :param page_size: 分页，单页数量
        :param license: 牌照方，1-华数，7-CIBN
        :param gmt_start: 日期
        :param uuid: uuid
        :param sity_type: 广告类型
        """
        return self._top_request(
            "yunos.tvpubadmin.content.advert.queryschedule",
            {
                "range": range,
                "page_no": page_no,
                "page_size": page_size,
                "license": license,
                "gmt_start": gmt_start,
                "uuid": uuid,
                "sity_type": sity_type
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_advert_manageschedule(
            self,
            req
    ):
        """
        广告牌照管控修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28601

        :param req: 管理参数
        """
        return self._top_request(
            "yunos.tvpubadmin.content.advert.manageschedule",
            {
                "req": req
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_video_submitauditresult(
            self,
            license_audit_result
    ):
        """
        迎客松提交视频审核结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28602

        :param license_audit_result: 审核结果，json格式
        """
        return self._top_request(
            "yunos.tvpubadmin.content.video.submitauditresult",
            {
                "license_audit_result": license_audit_result
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_tableaudit_querylauncher(
            self,
            table_audit_query
    ):
        """
        运营位管控-查询联盟一体机运营位元数据列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28603

        :param table_audit_query: 桌面坑位审核查询条件,json格式
        """
        return self._top_request(
            "yunos.tvpubadmin.content.tableaudit.querylauncher",
            {
                "table_audit_query": table_audit_query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_video_getauditlist(
            self,
            query
    ):
        """
        迎客松视频审核记录查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28604

        :param query: 查询
        """
        return self._top_request(
            "yunos.tvpubadmin.content.video.getauditlist",
            {
                "query": query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_tableaudit_offlinelauncheritem(
            self,
            id,
            terminal_type
    ):
        """
        运营位管理-联盟一体机下线运营位内容
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28605

        :param id: 元数据主键id
        :param terminal_type: 联盟：TV_OTT,一体机：TV_ALLINONE
        """
        return self._top_request(
            "yunos.tvpubadmin.content.tableaudit.offlinelauncheritem",
            {
                "id": id,
                "terminal_type": terminal_type
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_device_getvendor(
            self,
            license,
            brand_id
    ):
        """
        查询设备Vendor信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28606

        :param license: license
        :param brand_id: brand_id
        """
        return self._top_request(
            "yunos.tvpubadmin.content.device.getvendor",
            {
                "license": license,
                "brand_id": brand_id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_advert_gettypes(
            self
    ):
        """
        获取广告位类型
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28607

        """
        return self._top_request(
            "yunos.tvpubadmin.content.advert.gettypes",
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_tableaudit_querychilddesktop(
            self,
            query
    ):
        """
        迎客松查看小酷宝桌面坑位元数据列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28608

        :param query: 小酷宝桌面坑位查询参数
        """
        return self._top_request(
            "yunos.tvpubadmin.content.tableaudit.querychilddesktop",
            {
                "query": query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_app_onoffappbylicense(
            self,
            on_off_app
    ):
        """
        应用上下架操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28609

        :param on_off_app: com.ali.yunos.tvacs.domain.OnOffApp
        """
        return self._top_request(
            "yunos.tvpubadmin.content.app.onoffappbylicense",
            {
                "on_off_app": on_off_app
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_app_queryapp(
            self,
            query
    ):
        """
        查询应用信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28610

        :param query: 查询条件
        """
        return self._top_request(
            "yunos.tvpubadmin.content.app.queryapp",
            {
                "query": query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_app_querybylicence(
            self,
            query=''
    ):
        """
        按牌照查询应用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28611

        :param query: 查询条件
        """
        return self._top_request(
            "yunos.tvpubadmin.content.app.querybylicence",
            {
                "query": query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_user_orderlist(
            self,
            license,
            page_no,
            page_size,
            uid='',
            create_time_start_str='',
            create_time_end_str=''
    ):
        """
        获取用户订单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28627

        :param license: 牌照方
        :param page_no: 页码值
        :param page_size: 每页行数
        :param uid: 用户ID
        :param create_time_start_str: 开始时间
        :param create_time_end_str: 结束时间
        """
        return self._top_request(
            "yunos.tvpubadmin.user.orderlist",
            {
                "license": license,
                "page_no": page_no,
                "page_size": page_size,
                "uid": uid,
                "create_time_start_str": create_time_start_str,
                "create_time_end_str": create_time_end_str
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_user_rights(
            self,
            uid,
            page_no,
            page_size
    ):
        """
        获取用户权益
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28628

        :param uid: 用户ID
        :param page_no: 页码值
        :param page_size: 每页行数
        """
        return self._top_request(
            "yunos.tvpubadmin.user.rights",
            {
                "uid": uid,
                "page_no": page_no,
                "page_size": page_size
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_device_osupgradequery(
            self,
            license,
            day_range,
            page_no,
            page_size,
            status=''
    ):
        """
        系统升级查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28629

        :param license: 牌照方
        :param day_range: 时间范围
        :param page_no: 第几页
        :param page_size: 数据大小
        :param status: 审核状态
        """
        return self._top_request(
            "yunos.tvpubadmin.device.osupgradequery",
            {
                "license": license,
                "day_range": day_range,
                "page_no": page_no,
                "page_size": page_size,
                "status": status
            },
            result_processor=lambda x: x["object_list"]
        )

    def yunos_tvpubadmin_device_query(
            self,
            license,
            page_no,
            page_size,
            terminal_type='',
            brand_id=''
    ):
        """
        获取设备列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28630

        :param license: 牌照方
        :param page_no: 页码值
        :param page_size: 每页条数
        :param terminal_type: 终端类型
        :param brand_id: 品牌ID
        """
        return self._top_request(
            "yunos.tvpubadmin.device.query",
            {
                "license": license,
                "page_no": page_no,
                "page_size": page_size,
                "terminal_type": terminal_type,
                "brand_id": brand_id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_device_appupgradedetail(
            self,
            license,
            version_id=''
    ):
        """
        获取应用升级详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28631

        :param license: 牌照方
        :param version_id: 应用升级的ID
        """
        return self._top_request(
            "yunos.tvpubadmin.device.appupgradedetail",
            {
                "license": license,
                "version_id": version_id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_device_osupgradedetail(
            self,
            license,
            version_id=''
    ):
        """
        获取系统升级详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28632

        :param license: 牌照方
        :param version_id: 版本ID
        """
        return self._top_request(
            "yunos.tvpubadmin.device.osupgradedetail",
            {
                "license": license,
                "version_id": version_id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_user_suggest(
            self,
            keyword
    ):
        """
        获取关联账户列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28633

        :param keyword: 关键词
        """
        return self._top_request(
            "yunos.tvpubadmin.user.suggest",
            {
                "keyword": keyword
            },
            result_processor=lambda x: x["list"]
        )

    def yunos_tvpubadmin_device_appupgradequery(
            self,
            license,
            day_range,
            page_no,
            page_size,
            status=''
    ):
        """
        应用升级查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28637

        :param license: 牌照方
        :param day_range: 时间范围
        :param page_no: 第几页
        :param page_size: 数据大小
        :param status: 审核状态
        """
        return self._top_request(
            "yunos.tvpubadmin.device.appupgradequery",
            {
                "license": license,
                "day_range": day_range,
                "page_no": page_no,
                "page_size": page_size,
                "status": status
            },
            result_processor=lambda x: x["object_list"]
        )

    def yunos_tvpubadmin_device_apks(
            self,
            license
    ):
        """
        获取停开服apk列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28638

        :param license: 牌照
        """
        return self._top_request(
            "yunos.tvpubadmin.device.apks",
            {
                "license": license
            },
            result_processor=lambda x: x["apk_list"]
        )

    def yunos_tvpubadmin_diccontroltask_query(
            self,
            license,
            page_no,
            page_size,
            name='',
            status=''
    ):
        """
        停开服任务列表
        牌照方对终端设备的停开服管理
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28639

        :param license: 牌照方
        :param page_no: 当前页码值
        :param page_size: 每页条数
        :param name: 任务名称
        :param status: 任务状态
        """
        return self._top_request(
            "yunos.tvpubadmin.diccontroltask.query",
            {
                "license": license,
                "page_no": page_no,
                "page_size": page_size,
                "name": name,
                "status": status
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_single_video_submitauditresult(
            self,
            license_state,
            license,
            video_audit_id,
            auditor='',
            audit_comment=''
    ):
        """
        单视频审核提交审核结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28812

        :param license_state: 审核状态：1未提审，2审核中，3通过，4不通过，5已下线
        :param license: 牌照方
        :param video_audit_id: 视频审核ID
        :param auditor: 审核人
        :param audit_comment: 备注说明
        """
        return self._top_request(
            "yunos.tvpubadmin.content.single.video.submitauditresult",
            {
                "license_state": license_state,
                "license": license,
                "video_audit_id": video_audit_id,
                "auditor": auditor,
                "audit_comment": audit_comment
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_single_video_getlist(
            self,
            page_size,
            page_no,
            license,
            ext_type='',
            license_state='',
            gmt_end='',
            ext_video_str_id='',
            license_state_list='',
            date_type='',
            category='',
            gmt_start='',
            video_title_like='',
            priority=''
    ):
        """
        单视频审核获取视频列表
        牌照方在审核单视频时获取单视频列表接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28845

        :param page_size: 单页数量
        :param page_no: 页码
        :param license: 牌照方
        :param ext_type: 视频外部来源类型: 1:YOUKU, 2:MONGO_TV, 3:TAOTVMEDIA, 4:GOLIVE
        :param license_state: 审核状态：1未提审，2审核中，3通过，4不通过，5已下线
        :param gmt_end: 查询时间范围，结束时间
        :param ext_video_str_id: 视频id
        :param license_state_list: 查询多个审核状态
        :param date_type: 时间类型：1-licenseSubmitTime, 2-licenseAuditTime, 3-youkuPublishTime
        :param category: 主分类
        :param gmt_start: 查询时间范围，开始时间
        :param video_title_like: 视屏名称
        :param priority: 审核优先级，紧急4，高3，中2，低1
        """
        return self._top_request(
            "yunos.tvpubadmin.content.single.video.getlist",
            {
                "page_size": page_size,
                "page_no": page_no,
                "license": license,
                "ext_type": ext_type,
                "license_state": license_state,
                "gmt_end": gmt_end,
                "ext_video_str_id": ext_video_str_id,
                "license_state_list": license_state_list,
                "date_type": date_type,
                "category": category,
                "gmt_start": gmt_start,
                "video_title_like": video_title_like,
                "priority": priority
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_show_getlist(
            self,
            page_size,
            page_no,
            license,
            ext_type='',
            gmt_end='',
            license_state='',
            show_id='',
            ext_video_str_id='',
            date_type='',
            category='',
            show_name='',
            gmt_start='',
            video_title_like='',
            vmac_long_id=''
    ):
        """
        节目审核获取节目列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28850

        :param page_size: 分页
        :param page_no: 分页，页码
        :param license: 牌照方
        :param ext_type: 视频外部来源类型: 1:YOUKU, 2:MONGO_TV, 3:TAOTVMEDIA, 4:GOLIVE
        :param gmt_end: 时间查询范围，结束时间
        :param license_state: 审核状态：1未提审，2审核中，3通过，4不通过，5已下线
        :param show_id: 节目ID
        :param ext_video_str_id: 视频ID
        :param date_type: 时间类型：1-licenseSubmitTime, 2-licenseAuditTime, 3-youkuPublishTime
        :param category: 主分类
        :param show_name: 节目名称
        :param gmt_start: 时间查询范围，开始时间
        :param video_title_like: 视频名称
        :param vmac_long_id: 老媒资ID(program_id)
        """
        return self._top_request(
            "yunos.tvpubadmin.content.show.getlist",
            {
                "page_size": page_size,
                "page_no": page_no,
                "license": license,
                "ext_type": ext_type,
                "gmt_end": gmt_end,
                "license_state": license_state,
                "show_id": show_id,
                "ext_video_str_id": ext_video_str_id,
                "date_type": date_type,
                "category": category,
                "show_name": show_name,
                "gmt_start": gmt_start,
                "video_title_like": video_title_like,
                "vmac_long_id": vmac_long_id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_content_child_leafnode_get(
            self
    ):
        """
        获取少儿大厅二级类目列表
        获取少儿大厅二级类目列表的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29093

        """
        return self._top_request(
            "yunos.tvpubadmin.content.child.leafnode.get",
            result_processor=lambda x: x["child_node_vo_list"]
        )

    def yunos_tvpubadmin_content_child_rootnode_get(
            self,
            need_home_page='false'
    ):
        """
        获取少儿大厅根类目接口
        通过此接口可获取少儿大厅根类目列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29094

        :param need_home_page: 是否需要首页目录
        """
        return self._top_request(
            "yunos.tvpubadmin.content.child.rootnode.get",
            {
                "need_home_page": need_home_page
            },
            result_processor=lambda x: x["child_node_vo_list"]
        )

    def yunos_tvpubadmin_content_child_nodeitem_offline(
            self,
            content_id
    ):
        """
        少儿大厅类目内容下线接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29095

        :param content_id: 类目内容ID
        """
        return self._top_request(
            "yunos.tvpubadmin.content.child.nodeitem.offline",
            {
                "content_id": content_id
            }
        )

    def yunos_tvpubadmin_content_child_recoitem_query(
            self,
            id='',
            node_id='',
            status='',
            page_no='1',
            name='',
            page_size='20'
    ):
        """
        查询少儿大厅推荐内容列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29096

        :param id: 主键ID
        :param node_id: 所属类目ID
        :param status: 状态
        :param page_no: 页码
        :param name: 名称
        :param page_size: 单页数量
        """
        return self._top_request(
            "yunos.tvpubadmin.content.child.recoitem.query",
            {
                "id": id,
                "node_id": node_id,
                "status": status,
                "page_no": page_no,
                "name": name,
                "page_size": page_size
            }
        )

    def yunos_tvpubadmin_content_child_recoitem_offline(
            self,
            rec_item_id
    ):
        """
        下线少儿推荐内容接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29097

        :param rec_item_id: 推荐内容ID
        """
        return self._top_request(
            "yunos.tvpubadmin.content.child.recoitem.offline",
            {
                "rec_item_id": rec_item_id
            }
        )

    def yunos_tvpubadmin_content_child_nodeitem_query(
            self,
            id='',
            node_id='',
            status='',
            page_no='1',
            name='',
            page_size='20'
    ):
        """
        查询少儿大厅类目内容
        查询少儿大厅类目内容信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29098

        :param id: 主键ID
        :param node_id: 类目ID
        :param status: 状态
        :param page_no: 页码
        :param name: 内容名称
        :param page_size: 单页数量
        """
        return self._top_request(
            "yunos.tvpubadmin.content.child.nodeitem.query",
            {
                "id": id,
                "node_id": node_id,
                "status": status,
                "page_no": page_no,
                "name": name,
                "page_size": page_size
            },
            result_processor=lambda x: x["page_vo"]
        )

    def yunos_tvpubadmin_data_query(
            self,
            table_name,
            uuid,
            data_type_id,
            date,
            page_no,
            page_size,
            columns=''
    ):
        """
        魔盒统计数据查询接口
        用于华数查询魔盒上的一些用户统计数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30319

        :param table_name: 表名
        :param uuid: UUID
        :param data_type_id: 数据类型
        :param date: 日期
        :param page_no: 页码
        :param page_size: 每页个数
        :param columns: 列名
        """
        return self._top_request(
            "yunos.tvpubadmin.data.query",
            {
                "table_name": table_name,
                "uuid": uuid,
                "data_type_id": data_type_id,
                "date": date,
                "page_no": page_no,
                "page_size": page_size,
                "columns": columns
            }
        )

    def yunos_tvpubadmin_epg_desktop_operation(
            self,
            entity_type,
            action_type,
            parameter
    ):
        """
        影视桌面运营通用接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30365

        :param entity_type: 操作对象实体
        :param action_type: 操作类型
        :param parameter: 具体入参
        """
        return self._top_request(
            "yunos.tvpubadmin.epg.desktop.operation",
            {
                "entity_type": entity_type,
                "action_type": action_type,
                "parameter": parameter
            }
        )

    def yunos_tvpubadmin_manage_topic_contentdelete(
            self,
            id=''
    ):
        """
        删除专题下内容
        删除专题下内容信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30392

        :param id: 节目id
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.topic.contentdelete",
            {
                "id": id
            }
        )

    def yunos_tvpubadmin_manage_dialog_delete(
            self,
            id='0'
    ):
        """
        删除全局弹窗
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30395

        :param id: 全局弹窗id
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.dialog.delete",
            {
                "id": id
            }
        )

    def yunos_tvpubadmin_manage_dialog_findbyid(
            self,
            id=''
    ):
        """
        根据id查询全局弹窗
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30396

        :param id: 全局弹窗id
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.dialog.findbyid",
            {
                "id": id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_manage_dialog_edit(
            self,
            dialog_json=''
    ):
        """
        编辑全局弹窗
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30397

        :param dialog_json: 待编辑的全局弹窗
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.dialog.edit",
            {
                "dialog_json": dialog_json
            }
        )

    def yunos_tvpubadmin_manage_dialog_add(
            self,
            dialog_json=''
    ):
        """
        新增全局弹窗
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30398

        :param dialog_json: 新增的全局弹窗json
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.dialog.add",
            {
                "dialog_json": dialog_json
            }
        )

    def yunos_tvpubadmin_manage_dialog_list(
            self,
            query=''
    ):
        """
        分页获取弹窗列表
        分页获取弹窗配置列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30399

        :param query: 查询的query参数
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.dialog.list",
            {
                "query": query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_manage_topic_findbyid(
            self,
            id=''
    ):
        """
        根据id获取专题信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30400

        :param id: 专题id
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.topic.findbyid",
            {
                "id": id
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_manage_topic_list(
            self,
            query=''
    ):
        """
        专题内容操作列表
        获取外部可操作编辑的专题列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30401

        :param query: 查询条件
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.topic.list",
            {
                "query": query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_manage_topic_contentadd(
            self,
            content_json=''
    ):
        """
        专题新增内容
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30402

        :param content_json: 新增的专题内容
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.topic.contentadd",
            {
                "content_json": content_json
            }
        )

    def yunos_tvpubadmin_manage_topic_contentlist(
            self,
            program_query=''
    ):
        """
        查看专题内容列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30403

        :param program_query: 节目查询参数
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.topic.contentlist",
            {
                "program_query": program_query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_manage_topic_edit(
            self,
            topic_json=''
    ):
        """
        编辑专题
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30404

        :param topic_json: 待编辑专题
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.topic.edit",
            {
                "topic_json": topic_json
            }
        )

    def yunos_tvpubadmin_manage_topic_add(
            self,
            topic_json=''
    ):
        """
        新增专题
        专题新增
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30405

        :param topic_json: 新增topic的json信息
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.topic.add",
            {
                "topic_json": topic_json
            }
        )

    def yunos_tvpubadmin_common_file_upload(
            self,
            bytes='',
            original_filename='',
            size='',
            content_type='',
            upload_path=''
    ):
        """
        文件上传API
        文件上传服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30406

        :param bytes: 文件字节流
        :param original_filename: 原文件名
        :param size: 文件大小
        :param content_type: 文件类型
        :param upload_path: 上传地址
        """
        return self._top_request(
            "yunos.tvpubadmin.common.file.upload",
            {
                "bytes": bytes,
                "original_filename": original_filename,
                "size": size,
                "content_type": content_type,
                "upload_path": upload_path
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_osupdate_appversion_query(
            self,
            app_id,
            page,
            size
    ):
        """
        分页获取桌面升级任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30408

        :param app_id: 应用ID
        :param page: 页码值
        :param size: 页大小
        """
        return self._top_request(
            "yunos.osupdate.appversion.query",
            {
                "app_id": app_id,
                "page": page,
                "size": size
            }
        )

    def yunos_osupdate_versionstatus_update(
            self,
            id,
            status
    ):
        """
        更新应用升级状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30409

        :param id: 升级任务ID
        :param status: 状态值
        """
        return self._top_request(
            "yunos.osupdate.versionstatus.update",
            {
                "id": id,
                "status": status
            },
            result_processor=lambda x: x["is_success"]
        )

    def yunos_osupdate_appversion_create(
            self,
            app_version=None
    ):
        """
        创建应用升级任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30410

        :param app_version: 应用版本信息
        """
        return self._top_request(
            "yunos.osupdate.appversion.create",
            {
                "app_version": app_version
            },
            result_processor=lambda x: x["is_success"]
        )

    def yunos_osupdate_appversion_update(
            self,
            app_version=None
    ):
        """
        应用升级任务更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30411

        :param app_version: 应用版本升级信息
        """
        return self._top_request(
            "yunos.osupdate.appversion.update",
            {
                "app_version": app_version
            },
            result_processor=lambda x: x["is_success"]
        )

    def yunos_osupdate_model_search(
            self,
            app_id,
            name
    ):
        """
        机型检索
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30412

        :param app_id: 应用ID
        :param name: 关键词
        """
        return self._top_request(
            "yunos.osupdate.model.search",
            {
                "app_id": app_id,
                "name": name
            },
            result_processor=lambda x: x["model_list"]
        )

    def yunos_osupdate_appversion_info(
            self,
            id
    ):
        """
        获取应用升级详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30425

        :param id: 升级任务ID
        """
        return self._top_request(
            "yunos.osupdate.appversion.info",
            {
                "id": id
            },
            result_processor=lambda x: x["data"]
        )

    def yunos_osupdate_osfota_query(
            self,
            modle_id,
            page,
            page_size
    ):
        """
        系统升级分页查询
        分页查询osoupdate系统升级列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30520

        :param modle_id: 设备型号ID
        :param page: 页码
        :param page_size: 每页数量
        """
        return self._top_request(
            "yunos.osupdate.osfota.query",
            {
                "modle_id": modle_id,
                "page": page,
                "page_size": page_size
            },
            result_processor=lambda x: x["data"]
        )

    def yunos_osupdate_osfota_add(
            self,
            os_fota_json
    ):
        """
        添加系统升级任务
        添加osupdate系统升级任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30521

        :param os_fota_json: 系统升级任务json格式
        """
        return self._top_request(
            "yunos.osupdate.osfota.add",
            {
                "os_fota_json": os_fota_json
            },
            result_processor=lambda x: x["data"]
        )

    def yunos_osupdate_osfota_publish(
            self,
            publish_json
    ):
        """
        系统升级发布
        发布osupdate系统升级任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30523

        :param publish_json: 入参json格式
        """
        return self._top_request(
            "yunos.osupdate.osfota.publish",
            {
                "publish_json": publish_json
            },
            result_processor=lambda x: x["data"]
        )

    def yunos_osupdate_appversion_publish(
            self,
            publish_json
    ):
        """
        发布应用升级
        发布应用升级任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30524

        :param publish_json: 发布应用升级入参json
        """
        return self._top_request(
            "yunos.osupdate.appversion.publish",
            {
                "publish_json": publish_json
            },
            result_processor=lambda x: x["data"]
        )

    def yunos_osupdate_deviceservice_searchmodels(
            self,
            parent_id='',
            name=''
    ):
        """
        根据关键词检索设备型号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30525

        :param parent_id: 设备父ID
        :param name: 关键词
        """
        return self._top_request(
            "yunos.osupdate.deviceservice.searchmodels",
            {
                "parent_id": parent_id,
                "name": name
            },
            result_processor=lambda x: x["model_list"]
        )

    def yunos_tvpubadmin_adm_ott_audit(
            self,
            data
    ):
        """
        优酷OTT广告素材审核
        审核优酷OTT端广告素材
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30626

        :param data: 广告审核内容，json格式
        """
        return self._top_request(
            "yunos.tvpubadmin.adm.ott.audit",
            {
                "data": data
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvpubadmin_adm_ott_query(
            self,
            query
    ):
        """
        优酷OTT端广告素材查询
        查询广告素材
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30627

        :param query: 查询参数json格式
        """
        return self._top_request(
            "yunos.tvpubadmin.adm.ott.query",
            {
                "query": query
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_trade_admin_common_operation(
            self,
            method_name,
            interface_name,
            parameter=''
    ):
        """
        交易迎客松通用服务接口
        迎客松交易相关通用接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30697

        :param method_name: 调用方法
        :param interface_name: 调用接口
        :param parameter: 入参数据，json格式
        """
        return self._top_request(
            "yunos.trade.admin.common.operation",
            {
                "method_name": method_name,
                "interface_name": interface_name,
                "parameter": parameter
            },
            result_processor=lambda x: x["result"]
        )

    def yunos_tvpubadmin_content_show_edit(
            self,
            data
    ):
        """
        媒资节目信息修改
        供迎客松修改媒资节目信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30779

        :param data: 请求入参，JSON格式
        """
        return self._top_request(
            "yunos.tvpubadmin.content.show.edit",
            {
                "data": data
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvmbos_common_operation(
            self,
            interface_name,
            method_name,
            parameter
    ):
        """
        应用中心通用服务接口
        应用中心相关接口的代理
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31112

        :param interface_name: 接口名
        :param method_name: 方法名
        :param parameter: 入参，json格式
        """
        return self._top_request(
            "yunos.tvmbos.common.operation",
            {
                "interface_name": interface_name,
                "method_name": method_name,
                "parameter": parameter
            }
        )

    def yunos_tvpubadmin_manage_topic_contentedit(
            self,
            content_json
    ):
        """
        专题关联内容编辑
        编辑专题关联的内容
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31190

        :param content_json: 入参，json格式
        """
        return self._top_request(
            "yunos.tvpubadmin.manage.topic.contentedit",
            {
                "content_json": content_json
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_pubadmin_common_operation(
            self,
            parameter,
            interface_name,
            method_name
    ):
        """
        内部迎客松通用服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31216

        :param parameter: 入参json串
        :param interface_name: 接口名
        :param method_name: 方法名
        """
        return self._top_request(
            "yunos.pubadmin.common.operation",
            {
                "parameter": parameter,
                "interface_name": interface_name,
                "method_name": method_name
            },
            result_processor=lambda x: x["object"]
        )

    def yunos_tvscreen_admin_common_operation(
            self,
            method_name,
            interface_name,
            parameters=''
    ):
        """
        一体机桌面通用接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35582

        :param method_name: 方法名
        :param interface_name: 接口名称
        :param parameters: 参数数组
        """
        return self._top_request(
            "yunos.tvscreen.admin.common.operation",
            {
                "method_name": method_name,
                "interface_name": interface_name,
                "parameters": parameters
            }
        )

    def yunos_tvpubadmin_device_yks_skill_online(
            self,
            bot_skill_rel_id
    ):
        """
        迎客松技能上架接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37906

        :param bot_skill_rel_id: bot与技能关系表id
        """
        return self._top_request(
            "yunos.tvpubadmin.device.yks.skill.online",
            {
                "bot_skill_rel_id": bot_skill_rel_id
            }
        )

    def yunos_tvpubadmin_device_yks_skill_add(
            self,
            skill_id='',
            bot_id='',
            name='',
            icon_image_url=''
    ):
        """
        添加技能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37907

        :param skill_id: 技能id
        :param bot_id: 设备id
        :param name: 技能名称
        :param icon_image_url: 图片地址
        """
        return self._top_request(
            "yunos.tvpubadmin.device.yks.skill.add",
            {
                "skill_id": skill_id,
                "bot_id": bot_id,
                "name": name,
                "icon_image_url": icon_image_url
            }
        )

    def yunos_tvpubadmin_device_yks_skill_offline(
            self,
            bot_skill_rel_id=''
    ):
        """
        技能下架
        迎客松平台技能下架
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37909

        :param bot_skill_rel_id: bot与skill关系表id
        """
        return self._top_request(
            "yunos.tvpubadmin.device.yks.skill.offline",
            {
                "bot_skill_rel_id": bot_skill_rel_id
            }
        )

    def yunos_tvpubadmin_device_yks_skill_delete(
            self,
            bot_skill_rel_id,
            skill_id
    ):
        """
        技能删除
        删除技能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37910

        :param bot_skill_rel_id: bot与技能关系表id
        :param skill_id: 技能id
        """
        return self._top_request(
            "yunos.tvpubadmin.device.yks.skill.delete",
            {
                "bot_skill_rel_id": bot_skill_rel_id,
                "skill_id": skill_id
            }
        )

    def yunos_tvpubadmin_device_yks_skill_modify(
            self,
            skill_id='',
            icon_image_url='',
            name=''
    ):
        """
        修改技能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37911

        :param skill_id: 技能id
        :param icon_image_url: 图片地址
        :param name: 技能名称
        """
        return self._top_request(
            "yunos.tvpubadmin.device.yks.skill.modify",
            {
                "skill_id": skill_id,
                "icon_image_url": icon_image_url,
                "name": name
            }
        )

    def yunos_tvpubadmin_device_yks_skills(
            self,
            bot_id='',
            delet_token='',
            page_index='',
            page_size='',
            skill_id=''
    ):
        """
        根据设备id获取技能列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37912

        :param bot_id: 设备id
        :param delet_token: 1234
        :param page_index: 当前页
        :param page_size: 分页单位
        :param skill_id: 技能id
        """
        return self._top_request(
            "yunos.tvpubadmin.device.yks.skills",
            {
                "bot_id": bot_id,
                "delet_token": delet_token,
                "page_index": page_index,
                "page_size": page_size,
                "skill_id": skill_id
            }
        )

    def yunos_tvpubadmin_device_yks_bots(
            self
    ):
        """
        获取设备列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37935

        """
        return self._top_request(
            "yunos.tvpubadmin.device.yks.bots"
        )


class TbIoTI(DingTalkBaseAPI):
    """
    IoTI API
    """

    def alibaba_yunio_message_push(
            self,
            did='',
            did_type='',
            app_pkg='',
            idsu='',
            message='',
            auth_key=''
    ):
        """
        智能设备消息推送
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        向设备推送消息，控制指令。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28510

        :param did: 设备标识
        :param did_type: 设备标识类型['cuuid', 'alink', 'id2', 'other']
        :param app_pkg: 应用包名，用于设备端多应用场景[可选填]
        :param idsu: 下行消息数据标签(对应设备端处理method)
        :param message: 推送消息内容
        :param auth_key: 消息发送方身份标识
        """
        return self._top_request(
            "alibaba.yunio.message.push",
            {
                "did": did,
                "did_type": did_type,
                "app_pkg": app_pkg,
                "idsu": idsu,
                "message": message,
                "auth_key": auth_key
            }
        )

    def alibaba_it_esl_eslimage_sendimage(
            self,
            mac=''
    ):
        """
        下发厂测初始化图片
        工厂对生产出的电子价签进行全流程功能测试，能将出场图片通过ESL系统初始化到电子价签中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33751

        :param mac: 价签地址
        """
        return self._top_request(
            "alibaba.it.esl.eslimage.sendimage",
            {
                "mac": mac
            },
            result_processor=lambda x: x["resultmsg"]
        )

    def alibaba_it_cloudlive_getagentconfig(
            self,
            agent_id='',
            time_stamp='0',
            signature=''
    ):
        """
        线上巡店Agent获取配置
        线上巡店应用，外部Agent设备获取设备配置信息，根据配置信息链接mqtt，跟云端进行进一步的消息通信。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41822

        :param agent_id: agent标识
        :param time_stamp: 时间戳
        :param signature: MD5签名校验
        """
        return self._top_request(
            "alibaba.it.cloudlive.getagentconfig",
            {
                "agent_id": agent_id,
                "time_stamp": time_stamp,
                "signature": signature
            },
            result_processor=lambda x: x["resp_content"]
        )

    def alibaba_it_esl_sendota(
            self,
            mac_ap='',
            ota_data_base64_string=''
    ):
        """
        电子价签ota接口
        厂测接口，电子价签ota接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43535

        :param mac_ap: mac
        :param ota_data_base64_string: base64的ota包
        """
        return self._top_request(
            "alibaba.it.esl.sendota",
            {
                "mac_ap": mac_ap,
                "ota_data_base64_string": ota_data_base64_string
            }
        )

    def alibaba_it_esl_sendled(
            self,
            mac_ap='',
            type=''
    ):
        """
        厂测LED控制
        针对厂测生产的的价签，增加led闪灯的接口，进行led 闪灯测试
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43536

        :param mac_ap: mac
        :param type: 0、1、2、3：关蓝绿红
        """
        return self._top_request(
            "alibaba.it.esl.sendled",
            {
                "mac_ap": mac_ap,
                "type": type
            }
        )


class TbTaoBaoKaQuanPingTai(DingTalkBaseAPI):
    """
    淘宝卡券平台
    """

    def taobao_game_deliveryvoucher_sendvoucher(
            self,
            param0=None
    ):
        """
        提货券发券接口
        提货券发券接口：同步券和订单的关联信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29867

        :param param0: 发券参数
        """
        return self._top_request(
            "taobao.game.deliveryvoucher.sendvoucher",
            {
                "param0": param0
            }
        )

    def taobao_game_deliveryvoucher_sendgoods(
            self,
            param0=None
    ):
        """
        提货券发货接口
        提货券发券接口：同步券和订单的关联信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29873

        :param param0: 发券参数
        """
        return self._top_request(
            "taobao.game.deliveryvoucher.sendgoods",
            {
                "param0": param0
            }
        )

    def taobao_game_deliveryvoucher_cancelvoucher(
            self,
            param0=None
    ):
        """
        作废券
        提货券发券接口：同步券和订单的关联信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29874

        :param param0: 发券参数
        """
        return self._top_request(
            "taobao.game.deliveryvoucher.cancelvoucher",
            {
                "param0": param0
            }
        )

    def taobao_game_deliveryvoucher_rollbackvoucher(
            self,
            param0=None
    ):
        """
        回滚券
        提货券发券接口：同步券和订单的关联信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29875

        :param param0: 发券参数
        """
        return self._top_request(
            "taobao.game.deliveryvoucher.rollbackvoucher",
            {
                "param0": param0
            }
        )

    def taobao_game_deliveryvoucher_ordervoucher(
            self,
            param0=None
    ):
        """
        预约接口
        提货券发券接口：同步券和订单的关联信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29876

        :param param0: 发券参数
        """
        return self._top_request(
            "taobao.game.deliveryvoucher.ordervoucher",
            {
                "param0": param0
            }
        )

    def taobao_game_deliveryvoucher_watch(
            self,
            param0
    ):
        """
        监控预约数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39949

        :param param0: 入参
        """
        return self._top_request(
            "taobao.game.deliveryvoucher.watch",
            {
                "param0": param0
            }
        )

    def taobao_game_deliveryvoucher_evaluate(
            self,
            param0=None
    ):
        """
        卡券评价回传
        卡券ISV回传商品评价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41565

        :param param0: 系统自动生成
        """
        return self._top_request(
            "taobao.game.deliveryvoucher.evaluate",
            {
                "param0": param0
            }
        )


class TbZhiHuiMenDian(DingTalkBaseAPI):
    """
    智慧门店
    """

    def taobao_smartstore_trade_url_get(
            self,
            o2o_guide_id,
            device_code,
            link_type,
            shop_id='',
            ext_info='',
            item_id='',
            target_url=''
    ):
        """
        智慧门店扫码购URL生成
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30577

        :param o2o_guide_id: 商户中心的导购员id
        :param device_code: 智慧门店设备码
        :param link_type: 链接类型，可选值[item、shop、url]
        :param shop_id: 店铺ID，linkType=shop时必填
        :param ext_info: 扩展信息
        :param item_id: 商品ID，linkType=item时必填
        :param target_url: 码跳转的目标地址，只能指向*.tmall.com或者*.taobao.com，，linkType=url时必填
        """
        return self._top_request(
            "taobao.smartstore.trade.url.get",
            {
                "o2o_guide_id": o2o_guide_id,
                "device_code": device_code,
                "link_type": link_type,
                "shop_id": shop_id,
                "ext_info": ext_info,
                "item_id": item_id,
                "target_url": target_url
            },
            result_processor=lambda x: x["url"]
        )

    def taobao_smartstore_device_add(
            self,
            device_name,
            store_id,
            os_type,
            device_type,
            outer_code,
            mac='',
            indoor_position=''
    ):
        """
        智慧门店设备创建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30594

        :param device_name: 设备名称
        :param store_id: 门店ID
        :param os_type: 操作系统类型：WINDOWS('WINDOWS', 'WINDOWS'),     ANDROID('ANDROID', 'ANDROID'),     IOS('IOS', 'IOS'),     LINUX('LINUX', 'LINUX'),     OTHER('OTHER', 'OTHER');
        :param device_type: 设备类型：     CAMERA('CAMERA', '客流摄像头'),     SHELF('SHELF', '云货架'),     MAKEUP_MIRROR('MAKEUP_MIRROR', '试妆镜'),     FITTING_MIRROR('FITTING_MIRROR', '试衣镜'),     VENDOR('VENDOR', '售货机'),     SAMPLE_MACHINE('SAMPLE_MACHINE','派样机'),     DOLL_MACHINE('DOLL_MACHINE', '娃娃机'),     INTERACTIVE_PHOTO('INTERACTIVE_PHOTO', '互动拍照'),     INTERACTIVE_GAME('INTERACTIVE_GAME', '互动游戏'),     USHER_SCREEN('USHER_SCREEN', '智慧迎宾屏'),     DRESSING('DRESSING', '闪电换装'),     MAGIC_MIRROR('MAGIC_MIRROR', '百搭魔镜'),     SHOES_FITTING_MIRROR('SHOES_FITTING_MIRROR', '试鞋镜'),     SKIN_DETECTION('SKIN_DETECTION', '肌肤测试仪'),     FOOT_DETECTION('FOOT_DETECTION', '测脚仪'),     RFID_SENSOR('RFID_SENSOR', 'RFID'),touch_machine('touch_machine','导购一体屏')
        :param outer_code: 商家自定义设备编码
        :param mac: mac地址
        :param indoor_position: 设备在店内的位置，以文字描述
        """
        return self._top_request(
            "taobao.smartstore.device.add",
            {
                "device_name": device_name,
                "store_id": store_id,
                "os_type": os_type,
                "device_type": device_type,
                "outer_code": outer_code,
                "mac": mac,
                "indoor_position": indoor_position
            },
            result_processor=lambda x: x["device_code"]
        )

    def taobao_smartstore_device_delete(
            self,
            device_code
    ):
        """
        智慧门店设备删除
        根据deviceCode删除设备，
        规则：
        1. 操作的设备属于当前授权的用户
        2. 操作的设备属于当前应用添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30595

        :param device_code: 设备号
        """
        return self._top_request(
            "taobao.smartstore.device.delete",
            {
                "device_code": device_code
            }
        )

    def taobao_smartstore_device_update(
            self,
            device_code,
            mac='',
            indoor_position='',
            device_name='',
            store_id='',
            device_type='',
            os_type='',
            outer_code=''
    ):
        """
        智慧门店设备更新
        规则：
        1. 操作的设备属于当前授权的用户
        2. 操作的设备属于当前应用添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30596

        :param device_code: 设备编码
        :param mac: mac地址
        :param indoor_position: 设备在店内的位置，以文字描述
        :param device_name: 设备名称
        :param store_id: 门店ID
        :param device_type: 设备类型： CAMERA('CAMERA', '客流摄像头'), SHELF('SHELF', '云货架'), MAKEUP_MIRROR('MAKEUP_MIRROR', '试妆镜'), FITTING_MIRROR('FITTING_MIRROR', '试衣镜'), VENDOR('VENDOR', '售货机'),  SAMPLE_MACHINE('SAMPLE_MACHINE','派样机'), DOLL_MACHINE('DOLL_MACHINE', '娃娃机'), INTERACTIVE_PHOTO('INTERACTIVE_PHOTO', '互动拍照'), INTERACTIVE_GAME('INTERACTIVE_GAME', '互动游戏'), USHER_SCREEN('USHER_SCREEN', '智慧迎宾屏'), DRESSING('DRESSING', '闪电换装'), MAGIC_MIRROR('MAGIC_MIRROR', '百搭魔镜'), SHOES_FITTING_MIRROR('SHOES_FITTING_MIRROR', '试鞋镜'), SKIN_DETECTION('SKIN_DETECTION', '肌肤测试仪'), FOOT_DETECTION('FOOT_DETECTION', '测脚仪'), RFID_SENSOR('RFID_SENSOR', 'RFID')
        :param os_type: 操作系统类型：WINDOWS('WINDOWS', 'WINDOWS'),     ANDROID('ANDROID', 'ANDROID'),     IOS('IOS', 'IOS'),     LINUX('LINUX', 'LINUX'),     OTHER('OTHER', 'OTHER');
        :param outer_code: 商家自定义设备编码
        """
        return self._top_request(
            "taobao.smartstore.device.update",
            {
                "device_code": device_code,
                "mac": mac,
                "indoor_position": indoor_position,
                "device_name": device_name,
                "store_id": store_id,
                "device_type": device_type,
                "os_type": os_type,
                "outer_code": outer_code
            }
        )

    def taobao_smartstore_device_query(
            self,
            page_num,
            page_size,
            store_id='',
            device_type='',
            os_type='',
            outer_code=''
    ):
        """
        智慧门店设备查询
        规则：
        1. 查询的设备属于当前授权的用户
        2. 查询的设备属于当前应用添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30597

        :param page_num: 当前页数
        :param page_size: 每页条数最大50
        :param store_id: 门店ID
        :param device_type: 设备类型：MALL_INTERACTIVE_GAME('MALL_INTERACTIVE_GAME', '商场大屏互动游戏'), 	STORE_INTERACTIVE_GAME('STORE_INTERACTIVE_GAME', '店头互动游戏'), 	CAMERA('CAMERA', '客流摄像头'), 	SHELF('SHELF', '云货架'), 	VR_SHELF('VR_SHELF', 'VR云货架'), 	INTERACTIVE_SHELF('INTERACTIVE_SHELF', '互动云货架'), 	MAKEUP_MIRROR('MAKEUP_MIRROR', '试妆镜'),     FITTING_MIRROR('FITTING_MIRROR', '试衣镜'),     VENDOR('VENDOR', '售货机'),     OTHER('OTHER', 'OTHER');
        :param os_type: 操作系统类型：WINDOWS('WINDOWS', 'WINDOWS'),     ANDROID('ANDROID', 'ANDROID'),     IOS('IOS', 'IOS'),     LINUX('LINUX', 'LINUX'),     OTHER('OTHER', 'OTHER');
        :param outer_code: 商家自定义设备编码
        """
        return self._top_request(
            "taobao.smartstore.device.query",
            {
                "page_num": page_num,
                "page_size": page_size,
                "store_id": store_id,
                "device_type": device_type,
                "os_type": os_type,
                "outer_code": outer_code
            }
        )

    def taobao_smartstore_device_get(
            self,
            device_code
    ):
        """
        智慧门店设备获取
        智慧门店设备获取，
        获取规则：
        1. 操作的设备属于当前授权的用户
        2. 操作的设备属于当前应用添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30598

        :param device_code: 设备码
        """
        return self._top_request(
            "taobao.smartstore.device.get",
            {
                "device_code": device_code
            },
            result_processor=lambda x: x["device_info"]
        )

    def taobao_smartstore_device_status_feedback(
            self,
            status,
            device_code,
            status_time
    ):
        """
        设备在线状态回流
        智能硬件设备状态回流
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33525

        :param status: ONLINE_WITH_CONTENT('ONLINE_WITH_CONTENT', '设备在线'), OFFLINE('OFFLINE', '设备断线');
        :param device_code: 设备编码
        :param status_time: 当前状态的时间
        """
        return self._top_request(
            "taobao.smartstore.device.status.feedback",
            {
                "status": status,
                "device_code": device_code,
                "status_time": status_time
            }
        )

    def taobao_smartstore_device_shelf_feedback(
            self,
            device_code,
            end_time,
            start_time,
            action,
            item_id='',
            coupon_id='',
            outer_user=''
    ):
        """
        智能硬件云货架数据回流
        智慧门店云货架设备回流
        规则：
        1. 回流的设备属于当前授权的用户
        2. 回流的设备属于当前应用添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33553

        :param device_code: 硬件CODE
        :param end_time: 本次操作结束时间
        :param start_time: 本次操作开始时间
        :param action: 操作，枚举值：ACTION枚举值： ITEM_CLICK（商品点击时必须设置ITEM_ID） RECEIVE_COUPONS（领取优惠券时必须设置COUPON_ID） BUY_CLICK（点击购买） SHARE_CLICK（点击分享）
        :param item_id: 商品ID，action为item_click必填
        :param coupon_id: '例如官方领取优惠券链接里的activityId： https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=2649119619&activityId=9d390579777e41a981b54aa4d6154f5e'
        :param outer_user: 硬件识别的用户标识
        """
        return self._top_request(
            "taobao.smartstore.device.shelf.feedback",
            {
                "device_code": device_code,
                "end_time": end_time,
                "start_time": start_time,
                "action": action,
                "item_id": item_id,
                "coupon_id": coupon_id,
                "outer_user": outer_user
            }
        )

    def taobao_smartstore_device_shelf_batch_feedback(
            self,
            device_code,
            datas
    ):
        """
        智慧门店云货架批量回流
        智慧门店云货架设备批量回流，
        只能回流单个设备的批量业务数据
        规则：
        1. 回流的设备属于当前授权的用户
        2. 回流的设备属于当前应用添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33554

        :param device_code: 硬件CODE
        :param datas: 回流数据数组，一次最多100条
        """
        return self._top_request(
            "taobao.smartstore.device.shelf.batch.feedback",
            {
                "device_code": device_code,
                "datas": datas
            }
        )

    def taobao_smartstore_device_iashelf_batch_feedback(
            self,
            device_code,
            datas
    ):
        """
        智能硬件互动云货架批量数据回流
        智慧门店互动云货架设备批量回流，
        只能回流单个设备的批量业务数据
        规则：
        1. 回流的设备属于当前授权的用户
        2. 回流的设备属于当前应用添加
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33557

        :param device_code: 硬件CODE
        :param datas: 回流数据数组，一次最多100条
        """
        return self._top_request(
            "taobao.smartstore.device.iashelf.batch.feedback",
            {
                "device_code": device_code,
                "datas": datas
            }
        )

    def taobao_smartstore_device_iashelf_feedback(
            self,
            device_code,
            action,
            end_time='',
            start_time='',
            item_id='',
            coupon_id='',
            outer_biz_id='',
            op_time='',
            user_nick='',
            outer_user=''
    ):
        """
        智能硬件云货架数据回流
        智慧门店云货架设备回流规则：（互动云货架、VR云货架通用）</br>
        1.回流的数据属于当前授权的用户，回流的设备device_code由当前应用添加</br>
        2.对于快闪店的智能硬件不需要授权</br>
        3.每一个action都必须传入用户操作时间op_time（start/end_time后续废弃）</br>
        4.action为ITEM_CLICK、ITEM_SENSOR、BUY_CLICK时，item_id必须传入,且必须是淘宝商品的数字id</br>
        5.outer_biz_id 用于硬件设备大量数据回流场景，服务商本地日志统计系统对一条日志记录生成唯一标识。 平台后端会对传入的outer_biz_id 做去重处理</br>
        6.outer_user 用于标识不能获取淘宝账号的游客</br>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33558

        :param device_code: 硬件CODE
        :param action: ACTION枚举值： BODY_SENSOR（通过人体感应、人脸识别成功识别到人） ITEM_SENSOR（通过RFID、蓝牙等感应设备识别商品，必须设置ITEM_ID） ITEM_CLICK（商品点击时必须设置ITEM_ID）  RECEIVE_COUPONS（扫码领取优惠券时必须设置COUPON_ID） BUY_CLICK（点击购买，必须设置ITEM_ID）  SHARE_CLICK（点击分享）
        :param end_time: 字段废弃
        :param start_time: 字段废弃，考虑兼容，等同于op_time，两个必须传一个
        :param item_id: 商品ID，item_id 在action为ITEM_CLICK、ITEM_SENSOR、BUY_CLICK必须传入；  必须使用淘宝商品id，否则失败。
        :param coupon_id: '例如官方领取优惠券链接里的activityId： https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=2649119619&activityId=9d390579777e41a981b54aa4d6154f5e'
        :param outer_biz_id: 数据外部编码，保证数据唯一性
        :param op_time: 操作时间，后续统一使用该字段，考虑兼容，start_time跟该字段含义一致
        :param user_nick: 用户昵称（混淆）
        :param outer_user: 硬件识别的用户标识
        """
        return self._top_request(
            "taobao.smartstore.device.iashelf.feedback",
            {
                "device_code": device_code,
                "action": action,
                "end_time": end_time,
                "start_time": start_time,
                "item_id": item_id,
                "coupon_id": coupon_id,
                "outer_biz_id": outer_biz_id,
                "op_time": op_time,
                "user_nick": user_nick,
                "outer_user": outer_user
            }
        )

    def taobao_smartstore_device_storegame_feedback(
            self,
            device_code,
            action,
            item_id='',
            game_name='',
            end_time='',
            start_time='',
            coupon_id='',
            user_nick='',
            draw_result='',
            outer_biz_id='',
            op_time='',
            outer_user=''
    ):
        """
        智能硬件互动大屏数据回流
        智慧门店互动引流屏设备回流规则：（适用于智慧迎宾屏、互动游戏、互动拍照、娃娃机等）</br>
        1.回流的数据属于当前授权的用户，回流的设备device_code由当前应用添加</br>
        2.对于快闪店的智能硬件不需要授权</br>
        3.每一个action都必须传入用户操作时间op_time；（start/end_time后续废弃）</br>
        4.action为WINNING_PRIZE时，需传入draw_result，只能传入0或者1</br>
        5.outer_biz_id 用于硬件设备大量数据回流场景，服务商本地日志统计系统对一条日志记录生成唯一标识。 平台后端会对传入的outer_biz_id 做去重处理</br>
        6.outer_user 用于标识不能获取淘宝账号的游客</br>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33561

        :param device_code: 硬件CODE
        :param action: ACTION枚举值：  BODY_SENSOR（通过人体感应、人脸识别成功识别到人） PHOTO_CLICK（用户在屏幕拍摄照片） GET_PHOTO（用户扫码获取照片，必须设置user_nick） ITEM_CLICK（商品点击时必须设置ITEM_ID）  GAME_START（开始游戏，可以 设置 user）  GAME_OVER_WITHOUT_PROMOTION（游戏结束）  WINNING_PRIZE（中奖，必须设置DRAW_RESULT） SHARE_CLICK（点击分享） RECEIVE_COUPONS (扫码领取优惠券时必须设置COUPON_ID)
        :param item_id: 商品ID，item_id 在action为ITEM_CLICK时必须传入。 必须使用淘宝商品id，否则失败。
        :param game_name: 游戏名称
        :param end_time: 字段废弃
        :param start_time: 字段废弃，考虑兼容，等同于op_time，两个必须传一个
        :param coupon_id: 有则传入，没有可以不传。'例如官方领取优惠券链接里的activityId： https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=2649119619&activityId=9d390579777e41a981b54aa4d6154f5e'
        :param user_nick: 用户昵称，混淆的淘宝NIck
        :param draw_result: 抽奖结果 ，如果传入，0：表示没中奖，1：表示中奖。该值必须是0或者1，传入其他失败。
        :param outer_biz_id: 数据外部编码，保证数据唯一性
        :param op_time: 操作时间，后续统一使用该字段，考虑兼容，start_time跟该字段含义一致
        :param outer_user: 硬件识别的用户标识
        """
        return self._top_request(
            "taobao.smartstore.device.storegame.feedback",
            {
                "device_code": device_code,
                "action": action,
                "item_id": item_id,
                "game_name": game_name,
                "end_time": end_time,
                "start_time": start_time,
                "coupon_id": coupon_id,
                "user_nick": user_nick,
                "draw_result": draw_result,
                "outer_biz_id": outer_biz_id,
                "op_time": op_time,
                "outer_user": outer_user
            }
        )

    def taobao_smartstore_device_vendor_feedback(
            self,
            device_code,
            action,
            trade_no='',
            trade_type='',
            end_time='',
            start_time='',
            item_id='',
            coupon_id='',
            user_nick='',
            outer_biz_id='',
            op_time='',
            outer_user=''
    ):
        """
        智能硬件售货机数据回流
        智慧门店售货机设备回流规则：（适用于售货机、派样机等）</br>
        1.回流的数据属于当前授权的用户，回流的设备device_code由当前应用添加</br>
        2.对于快闪店的智能硬件不需要授权</br>
        3.action为VENDING_MACHINE_SHIPMENT时，trade_type 和trade_no 必须传入且配套使用</br>
        4.action为ITEM_CLICK、BUY_CLICK、VENDING_MACHINE_SHIPMENT、SHIP_CNT时，item_id必须传入,且必须是淘宝商品的数字id </br>
        5.每一个action都必须传入用户身份user_nick，需要传入淘宝账号名称</br>
        6.每一个action都必须传入用户操作时间op_time </br>
        7.outer_biz_id 用于硬件设备大量数据回流场景，服务商本地日志统计系统对一条日志记录生成唯一标识。 平台后端会对传入的outer_biz_id 做去重处理</br>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33568

        :param device_code: 硬件CODE
        :param action: ACTION枚举值：  BUY_CLICK_START(广告首页、点击开始购买) ITEM_CLICK（商品点击时必须设置ITEM_ID）  BUY_CLICK（点击购买/领取必须设置ITEM_ID）  VENDING_MACHINE_SHIPMENT（派样机出货时TRADE_TYPE、TRADE_NO要设置） SHIP_CNT (商品掉货成功，必须设置ITEM_ID） SHARE_CLICK（点击分享）  RECEIVE_COUPONS (扫码领取优惠券时必须设置COUPON_ID)
        :param trade_no: 订单编号
        :param trade_type: 'trade_type枚举值： alipay_trade（支付宝订单类型，对应的trade_no设置支付宝订单号） tmall_trade（天猫/淘宝订单类型，对应的trade_no设置天猫/淘宝订单号）'
        :param end_time: 字段废弃
        :param start_time: 字段废弃，考虑兼容，等同于op_time，两个必须传一个
        :param item_id: 商品ID，item_id 在action为ITEM_CLICK、BUY_CLICK、VENDING_MACHINE_SHIPMENT、SHIP_CNT必须传入； 必须使用淘宝商品id，否则失败
        :param coupon_id: '例如官方领取优惠券链接里的activityId： https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=2649119619&activityId=9d390579777e41a981b54aa4d6154f5e'
        :param user_nick: 用户昵称（混淆）
        :param outer_biz_id: 数据外部编码，保证数据唯一性
        :param op_time: 操作时间，后续统一使用该字段，考虑兼容，start_time跟该字段含义一致
        :param outer_user: 硬件识别的用户标识
        """
        return self._top_request(
            "taobao.smartstore.device.vendor.feedback",
            {
                "device_code": device_code,
                "action": action,
                "trade_no": trade_no,
                "trade_type": trade_type,
                "end_time": end_time,
                "start_time": start_time,
                "item_id": item_id,
                "coupon_id": coupon_id,
                "user_nick": user_nick,
                "outer_biz_id": outer_biz_id,
                "op_time": op_time,
                "outer_user": outer_user
            }
        )

    def taobao_smartstore_device_makeupmirror_feedback(
            self,
            device_code,
            action,
            skin_detection='',
            scalp_detection='',
            end_time='',
            start_time='',
            item_id='',
            coupon_id='',
            outer_biz_id='',
            op_time='',
            outer_user='',
            sku_id='',
            user_nick=''
    ):
        """
        智能硬件试妆镜数据回流
        智慧门店试妆镜设备回流规则（适用于试妆镜等）</br>
        1.回流的数据属于当前授权的用户，回流的设备device_code由当前应用添加</br>
        2.对于快闪店的智能硬件不需要授权</br>
        3.action为SKU_CLICK时，sku_id必须传入</br>
        4.action为ITEM_CLICK、SAMPLE_CLICK、BUY_CLICK、ITEM_FAVOR时，item_id必须传入,且必须是淘宝商品的数字id </br>
        5.skin_detection 和scalp_detection 涉及相关检测功能的硬件设备回传 </br>
        6.每一个acion都必须传入用户操作时间op_time </br>
        7.outer_biz_id 用于硬件设备大量数据回流场景，服务商本地日志统计系统对一条日志记录生成唯一标识。 平台后端会对传入的outer_biz_id 做去重处理</br>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33571

        :param device_code: 硬件CODE
        :param action: ACTION枚举值： ITEM_CLICK（商品点击时，必须设置ITEM_ID） SKU_CLICK（SKU点击时，必须设置SKU_ID) THEME_MAKEUP_CLICK(点击推荐主题妆) SAMPLE_CLICK（点击领取小样，必须设置ITEM_ID） RECEIVE_COUPONS（领取优惠券时，必须设置COUPON_ID）  BUY_CLICK（点击购买，购买PV，必须设置ITEM_ID）  ITEM_FAVOR(商品收藏时，必须设置item_id) PHOTO_CLICK（拍摄照片） GET_PHOTO（获取照片，必须设置user_nick） SHARE_CLICK（点击分享）
        :param skin_detection: 肌肤检测结果，'1. Moisture 水份/     2. Sebum (U/T Zone) 油份(U/T区)/ 3. Pore 毛孔 4. Melanin 色斑 5. Acne (UV) 暗疮(紫外线)  6. Wrinkle 皱纹 7. Sensitivity 敏感度  数字指标：  行业平均值 industry_average  当前顾客数值 current_customer  检测结果 detection_result  检测描述 detection_description 数字指标可以为空，但是单个key请务必完整。如 ''detection_result'':''''  {  ''moisture'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''湿度高'',   ''detection_description'':''完美的肌肤特质''  },  ''sebum'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''混合型'',   ''detection_description'':''该顾客混合了过多的油脂''  },  ''pore'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''毛孔比较细小''  },  ''melanin'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''特别护理'',   ''detection_description'':''有较大的色斑区域''  },  ''wrinkle'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''特别护理'',   ''detection_description'':''有很多黑色粉刺的大毛孔''  },  ''acne'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''没有皱纹，皮肤良好''  },  ''sensitivity'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''有部分角质可以进行护理''  } }'
        :param scalp_detection: 头皮检查结果，'1. Alopecia  脱发状态     2. Scalp state 头皮状态 3. Hair density 头发密度 4. Scalp of scalp 头皮角质 5. Nudity of scalp blood vessels 头皮血管裸露  6. Hair thickness 头发厚度 7. Hair follicle state 毛囊状态  数字指标：  行业平均值 industry_average  当前顾客数值 current_customer  检测结果 detection_result  检测描述 detection_description 数字指标可以为空，但是单个key请务必完整。如 ''detection_result'':''''  {  ''alopecia'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''湿度高'',   ''detection_description'':''完美的肌肤特质''  },  ''state'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''混合型'',   ''detection_description'':''该顾客混合了过多的油脂''  },  ''hair_density'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''毛孔比较细小''  },  ''scalp'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''特别护理'',   ''detection_description'':''有较大的色斑区域''  },  ''nudity_blood'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''特别护理'',   ''detection_description'':''有很多黑色粉刺的大毛孔''  },  ''hair_thickness'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''没有皱纹，皮肤良好''  },  ''hair_follicle_state'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''有部分角质可以进行护理''  } }'
        :param end_time: 字段废弃
        :param start_time: 字段废弃，考虑兼容，等同于op_time，两个必须传一个
        :param item_id: 商品ID，item_id 在action为ITEM_CLICK、SAMPLE_CLICK、BUY_CLICK、ITEM_FAVOR必须传入， 必须使用淘宝商品id，否则失败
        :param coupon_id: '例如官方领取优惠券链接里的activityId： https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=2649119619&activityId=9d390579777e41a981b54aa4d6154f5e'
        :param outer_biz_id: 数据外部编码，保证数据唯一性
        :param op_time: 操作时间，后续统一使用该字段，考虑兼容，start_time跟该字段含义一致
        :param outer_user: 硬件识别的用户标识
        :param sku_id: 库存ID，sku_id 在action为sku_click时必须传入； 必须使用淘宝商品id，否则失败。
        :param user_nick: 用户混淆nick
        """
        return self._top_request(
            "taobao.smartstore.device.makeupmirror.feedback",
            {
                "device_code": device_code,
                "action": action,
                "skin_detection": skin_detection,
                "scalp_detection": scalp_detection,
                "end_time": end_time,
                "start_time": start_time,
                "item_id": item_id,
                "coupon_id": coupon_id,
                "outer_biz_id": outer_biz_id,
                "op_time": op_time,
                "outer_user": outer_user,
                "sku_id": sku_id,
                "user_nick": user_nick
            }
        )

    def taobao_smartstore_device_fittingmirror_feedback(
            self,
            device_code,
            action,
            try_fitting='',
            end_time='',
            start_time='',
            item_id='',
            coupon_id='',
            user_nick='',
            op_time='',
            outer_biz_id='',
            outer_user='',
            call_click=''
    ):
        """
        智能硬件试穿场景数据回流
        智慧门店试衣镜设备回流规则（适用于百搭魔镜、试鞋镜、闪电换装、试衣镜等）</br>
        1.回流的数据属于当前授权的用户，回流的设备device_code由当前应用添加</br>
        2.对于快闪店的智能硬件不需要授权</br>
        3.action为IMAGE_RECOGNITION、ITEM_SENSOR、ITEM_CLICK、BUY_CLICK时，item_id必须传入,且必须是淘宝商品的数字id </br>
        4.action为TRY_FITTING_CLICK 点击试衣时，try_fitting需传入搭配商品id</br>
        5.action为CALL_CLICK 点击试衣时，call_click需传入搭配商品id</br>
        6.每一个acion都必须传入用户操作时间op_time；（start/end_time后续废弃） </br>
        7.outer_biz_id 用于硬件设备大量数据回流场景，服务商本地日志统计系统对一条日志记录生成唯一标识。 平台后端会对传入的outer_biz_id 做去重处理</br>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33593

        :param device_code: 硬件CODE
        :param action: ACTION枚举值： BODY_SENSOR（通过人体感应、人脸识别成功识别到人） IMAGE_RECOGNITION（通过摄像头图片识别商品，必须设置ITEM_ID） ITEM_SENSOR（通过RFID、蓝牙等感应设备识别商品，必须设置ITEM_ID） ITEM_CLICK（商品点击时必须设置ITEM_ID）  TRY_FITTING_CLICK（点击试衣时必须设置试衣搭配结果JSON） RECEIVE_COUPONS（领取优惠券时必须设置COUPON_ID）  BUY_CLICK（点击购买，必须设置ITEM_ID）  SHARE_CLICK（点击分享） CALL_CLICK（呼叫店员拿商品，点击取衣时必须设置店员需要拿的商品JSON）
        :param try_fitting: 试衣搭配套餐里所有的商品ID， key:value 方式回传。 示例： {'id_1':'565021763810','id_2':'2325763810','id_3':'17638109755'}
        :param end_time: 字段废弃
        :param start_time: 字段废弃，考虑兼容，等同于op_time，两个必须传一个
        :param item_id: 商品ID，item_id 在action为IMAGE_RECOGNITION、ITEM_SENSOR、ITEM_CLICK、BUY_CLICK时必须传入。 必须使用淘宝商品id，否则失败。
        :param coupon_id: '例如官方领取优惠券链接里的activityId： https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=2649119619&activityId=9d390579777e41a981b54aa4d6154f5e'
        :param user_nick: 用户昵称（混淆）
        :param op_time: 操作时间，后续统一使用该字段，考虑兼容，start_time跟该字段含义一致
        :param outer_biz_id: 数据外部编码，保证数据唯一性
        :param outer_user: 硬件识别的用户标识
        :param call_click: 呼叫店员拿取的所有商品ID。 示例： ['565021763810','2325763810']
        """
        return self._top_request(
            "taobao.smartstore.device.fittingmirror.feedback",
            {
                "device_code": device_code,
                "action": action,
                "try_fitting": try_fitting,
                "end_time": end_time,
                "start_time": start_time,
                "item_id": item_id,
                "coupon_id": coupon_id,
                "user_nick": user_nick,
                "op_time": op_time,
                "outer_biz_id": outer_biz_id,
                "outer_user": outer_user,
                "call_click": call_click
            }
        )

    def taobao_smartstore_stores_query(
            self,
            query='',
            page_size='10',
            page_no='1'
    ):
        """
        智慧门店门店查询
        查询当前用户下的门店列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33596

        :param query: 查询的关键字
        :param page_size: 每页数量，默认10，最大100
        :param page_no: 第几页，默认值1，最大值100
        """
        return self._top_request(
            "taobao.smartstore.stores.query",
            {
                "query": query,
                "page_size": page_size,
                "page_no": page_no
            }
        )

    def taobao_popstore_activitys_query(
            self,
            count='10'
    ):
        """
        快闪活动查询
        查询最近N场快闪活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33660

        :param count: 最近10场活动
        """
        return self._top_request(
            "taobao.popstore.activitys.query",
            {
                "count": count
            },
            result_processor=lambda x: x["activitys"]
        )

    def taobao_popstore_stores_query(
            self,
            page_index='1',
            page_size='20'
    ):
        """
        快闪店查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询快闪店信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33661

        :param page_index: 页码
        :param page_size: 数量
        """
        return self._top_request(
            "taobao.popstore.stores.query",
            {
                "page_index": page_index,
                "page_size": page_size
            }
        )

    def taobao_popstore_activity_dissemination_detail_feedback(
            self,
            op_time,
            activity_id,
            action,
            platform='',
            action_info='',
            content_id='',
            platform_id='',
            outer_nick='',
            extra_attr='',
            taobao_nick='',
            phase='',
            outer_id='',
            content_name='',
            seller_nick='',
            outer_biz_id='',
            url=''
    ):
        """
        快闪活动外部传播数据详情回流
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33789

        :param op_time: 用户操作时间
        :param activity_id: 快闪活动ID（可通过快闪活动接口获取）
        :param action: 动作类型: INTERACTIVE_CLICK('INTERACTIVE_CLICK','互动点击'),FORWARD('FORWARD', '转发'), 	VIEW('VIEW', '浏览'), 	OPEN_TAOBAO('OPEN_TAOBAO', '打开手淘'), 	RECEIVE_COUPONS('RECEIVE_COUPONS', '领取优惠券'), 	SHOP_FAVOR('SHOP_FAVOR', '店铺关注'), 	ITEM_FAVOR('ITEM_FAVOR', '宝贝收藏（会有item_id)'), 	ITEM_CART('ITEM_CART', '宝贝加购（item_id)');
        :param platform: 传播平台，传播平台名称（如：微信、微博...）
        :param action_info: 动作内容，牵扯到宝贝的时候填写具体的item_id
        :param content_id: 内容ID，传播内容的H5链接。content_id或者url必须设置一个
        :param platform_id: 平台号，传播快闪活动的微信公众号、微博主账号
        :param outer_nick: 访问用户的微信、微博混淆昵称（授权后会有）
        :param extra_attr: 扩张信息：KV结构或JSON格式的其他数据，如：地址、年龄、性别、昵称、语言等
        :param taobao_nick: 访问用户的淘宝昵称
        :param phase: PREHEAT('PREHEAT', '预热'), 	ACTIVITY('ACTIVITY', '活动中'), 	AFTER_ACTIVITY('AFTER_ACTIVITY', '活动后');
        :param outer_id: 访问用户的微信、微博open_id（未授权）
        :param content_name: 内容名称，传播内容的名称
        :param seller_nick: 商家名称，当Action为RECEIVE_COUPONS、SHOP_FAVOR、ITEM_FAVOR、ITEM_CART时，seller_nick不能为空
        :param outer_biz_id: 数据外部编码，保证数据唯一性
        :param url: 分享的URL地址。content_id或者url必须设置一个
        """
        return self._top_request(
            "taobao.popstore.activity.dissemination.detail.feedback",
            {
                "op_time": op_time,
                "activity_id": activity_id,
                "action": action,
                "platform": platform,
                "action_info": action_info,
                "content_id": content_id,
                "platform_id": platform_id,
                "outer_nick": outer_nick,
                "extra_attr": extra_attr,
                "taobao_nick": taobao_nick,
                "phase": phase,
                "outer_id": outer_id,
                "content_name": content_name,
                "seller_nick": seller_nick,
                "outer_biz_id": outer_biz_id,
                "url": url
            }
        )

    def taobao_popstore_activity_dissemination_statistics_feedback(
            self,
            report_date,
            platform,
            view_pv,
            forward_uv,
            view_uv,
            content_id,
            platform_id,
            activity_id,
            share_uv,
            forward_pv,
            share_pv,
            phase,
            content_name='',
            outer_biz_id=''
    ):
        """
        快闪活动外部传播数据统计数据回流
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33790

        :param report_date: 按天频度回流总体数据，格式：yyyy-MM-dd
        :param platform: 传播平台，传播平台名称（如：微信、微博...）
        :param view_pv: 浏览PV
        :param forward_uv: 转发UV
        :param view_uv: 浏览UV
        :param content_id: 内容ID，传播内容的H5链接
        :param platform_id: 平台号，传播快闪活动的微信公众号、微博主账号
        :param activity_id: 快闪活动ID（可通过快闪活动接口获取）
        :param share_uv: 分享UV
        :param forward_pv: 转发PV
        :param share_pv: 分享PV
        :param phase: PREHEAT('PREHEAT', '预热'), ACTIVITY('ACTIVITY', '活动中'), AFTER_ACTIVITY('AFTER_ACTIVITY', '活动后');
        :param content_name: 内容名称,传播内容的名称
        :param outer_biz_id: 数据外部编码，保证数据唯一性
        """
        return self._top_request(
            "taobao.popstore.activity.dissemination.statistics.feedback",
            {
                "report_date": report_date,
                "platform": platform,
                "view_pv": view_pv,
                "forward_uv": forward_uv,
                "view_uv": view_uv,
                "content_id": content_id,
                "platform_id": platform_id,
                "activity_id": activity_id,
                "share_uv": share_uv,
                "forward_pv": forward_pv,
                "share_pv": share_pv,
                "phase": phase,
                "content_name": content_name,
                "outer_biz_id": outer_biz_id
            }
        )

    def taobao_popstore_qrcode_get(
            self,
            device_code,
            target_type,
            redirect_url='',
            item_id=''
    ):
        """
        快闪店快闪码生成API
        快闪店快闪码生成接口，可生成商品码和活动码。
        该接口只能为快闪店的设备使用。
        商品码必须传递商品ID，活动码必须传跳转的URL
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34296

        :param device_code: 硬件CODE
        :param target_type: 活动码类型，item：商品码，activity：活动码
        :param redirect_url: 活动的URL，需要聚石塔或者EWS内部署；当是活动码时必填
        :param item_id: 商品ID，当时商品码时，必填
        """
        return self._top_request(
            "taobao.popstore.qrcode.get",
            {
                "device_code": device_code,
                "target_type": target_type,
                "redirect_url": redirect_url,
                "item_id": item_id
            },
            result_processor=lambda x: x["qcode_url"]
        )

    def taobao_popstore_token_validate(
            self,
            token=''
    ):
        """
        iframe页面token验证
        在访问iframe页面时进行token校验
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34864

        :param token: token
        """
        return self._top_request(
            "taobao.popstore.token.validate",
            {
                "token": token
            }
        )

    def taobao_wisdom_member_query_exist(
            self,
            taobao_nick,
            seller_id
    ):
        """
        查询人脸会员是否存在
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36357

        :param taobao_nick: 混淆nick
        :param seller_id: 商户ID
        """
        return self._top_request(
            "taobao.wisdom.member.query.exist",
            {
                "taobao_nick": taobao_nick,
                "seller_id": seller_id
            }
        )

    def taobao_wisdom_member_goods_recommend(
            self,
            param0=None
    ):
        """
        人脸识别和商品推荐
        主要用于人脸识别(人脸图像回流)以及根据人脸照或全身照推荐商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36361

        :param param0: 入参
        """
        return self._top_request(
            "taobao.wisdom.member.goods.recommend",
            {
                "param0": param0
            }
        )

    def taobao_wisdom_member_create(
            self,
            face_group_type,
            seller_id,
            user_nick,
            images,
            request_id='',
            user_full_name='',
            alias_name='',
            mobile=''
    ):
        """
        会员头像注册入库
        主要用于会员标准头像的注册(入库)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36362

        :param face_group_type: 会员分组标识，区分淘宝用户或新客,'TaobaoMember'|'GuestMember',如果是淘宝用户请传'TaobaoMember'
        :param seller_id: 商户ID
        :param user_nick: 用户淘宝nick
        :param images: 图片二进制码
        :param request_id: 用于获取异步计算结果
        :param user_full_name: 用户实名
        :param alias_name: 别名
        :param mobile: 会员手机号
        """
        return self._top_request(
            "taobao.wisdom.member.create",
            {
                "face_group_type": face_group_type,
                "seller_id": seller_id,
                "user_nick": user_nick,
                "images": images,
                "request_id": request_id,
                "user_full_name": user_full_name,
                "alias_name": alias_name,
                "mobile": mobile
            }
        )

    def taobao_wisdom_facelibrary_query_registered(
            self,
            images,
            device_code
    ):
        """
        查询人脸是否已经注册入库
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        上传人脸图片，查询该人脸是否已经被注册到人脸库
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36978

        :param images: 图片二进制码
        :param device_code: 设备id
        """
        return self._top_request(
            "taobao.wisdom.facelibrary.query.registered",
            {
                "images": images,
                "device_code": device_code
            }
        )

    def tmall_popupstore_activity_query(
            self,
            start_date,
            end_date
    ):
        """
        查询某段时间内的快闪活动列表
        提供给ISV查询某一时间段内包含指定appKey的活动列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37400

        :param start_date: 查询开始时间,yyyy-MM-dd
        :param end_date: 查询结束时间，yyyy-MM-dd
        """
        return self._top_request(
            "tmall.popupstore.activity.query",
            {
                "start_date": start_date,
                "end_date": end_date
            },
            result_processor=lambda x: x["result_dto"]
        )

    def tmall_popupstore_device_single_save(
            self,
            store_id,
            device_type,
            os_type,
            out_code,
            device_name,
            activity_id=''
    ):
        """
        单个设备code创建接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37402

        :param store_id: 门店id
        :param device_type: 设备类型：MALL_INTERACTIVE_GAME('MALL_INTERACTIVE_GAME', '商场大屏互动游戏'), STORE_INTERACTIVE_GAME('STORE_INTERACTIVE_GAME', '店头互动游戏'), CAMERA('CAMERA', '客流摄像头'), SHELF('SHELF', '云货架'), VR_SHELF('VR_SHELF', 'VR云货架'), INTERACTIVE_SHELF('INTERACTIVE_SHELF', '互动云货架'), MAKEUP_MIRROR('MAKEUP_MIRROR', '试妆镜'), FITTING_MIRROR('FITTING_MIRROR', '试衣镜'), VENDOR('VENDOR', '售货机'), OTHER('OTHER', 'OTHER');
        :param os_type: 操作系统类型：WINDOWS('WINDOWS', 'WINDOWS'), ANDROID('ANDROID', 'ANDROID'), IOS('IOS', 'IOS'), LINUX('LINUX', 'LINUX'), OTHER('OTHER', 'OTHER');
        :param out_code: 外部编码
        :param device_name: 设备名称
        :param activity_id: 活动id
        """
        return self._top_request(
            "tmall.popupstore.device.single.save",
            {
                "store_id": store_id,
                "device_type": device_type,
                "os_type": os_type,
                "out_code": out_code,
                "device_name": device_name,
                "activity_id": activity_id
            },
            result_processor=lambda x: x["result_dto"]
        )

    def tmall_popupstore_activity_device_query(
            self,
            activity_id
    ):
        """
        根据活动id查询活动相关快闪店及设备信息
        查询某一活动的deviceCode的部署情况
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37406

        :param activity_id: ISV的活动ID
        """
        return self._top_request(
            "tmall.popupstore.activity.device.query",
            {
                "activity_id": activity_id
            },
            result_processor=lambda x: x["result_dto"]
        )

    def tmall_popupstore_item_discount_price(
            self,
            item_ids
    ):
        """
        商品优惠价格查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38219

        :param item_ids: 商品id列表
        """
        return self._top_request(
            "tmall.popupstore.item.discount.price",
            {
                "item_ids": item_ids
            },
            result_processor=lambda x: x["result_dto"]
        )

    def taobao_smartstore_device_detector_feedback(
            self,
            device_code,
            action,
            skin_detection='',
            scalp_detection='',
            item_id='',
            coupon_id='',
            outer_biz_id='',
            op_time='',
            outer_user=''
    ):
        """
        测试仪数据回流
        智慧门店测试仪设备回流规则（适用于肌肤测试仪、测脚仪等）</br>
        1.回流的数据属于当前授权的用户，回流的设备device_code由当前应用添加</br>
        2.对于快闪店的智能硬件不需要授权</br>
        3.action为ITEM_CLICK、BUY_CLICK时，item_id必须传入,且必须是淘宝商品的数字id</br>
        4.skin_detection 和scalp_detection 涉及相关检测功能的硬件设备回传 </br>
        5.每一个acion都必须传入用户操作时间op_time </br>
        6.outer_biz_id 用于硬件设备大量数据回流场景，服务商本地日志统计系统对一条日志记录生成唯一标识。 平台后端会对传入的outer_biz_id 做去重处理</br>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39446

        :param device_code: 硬件CODE
        :param action: ACTION枚举值：  SKIN_DETECTION_CLICK（肌肤检测点击时必须设置肌肤检测结果JSON）  SCALP_DETECTION_CLICK（头皮检测点击时必须设置头皮检测结果JSON） ITEM_CLICK（商品点击时必须设置ITEM_ID）  RECEIVE_COUPONS（领取优惠券时必须设置COUPON_ID）  BUY_CLICK（点击购买时，必须设置ITEM_ID）  SHARE_CLICK（点击分享）
        :param skin_detection: 肌肤检测结果，'1. Moisture 水份/     2. Sebum (U/T Zone) 油份(U/T区)/ 3. Pore 毛孔 4. Melanin 色斑 5. Acne (UV) 暗疮(紫外线)  6. Wrinkle 皱纹 7. Sensitivity 敏感度  数字指标：  行业平均值 industry_average  当前顾客数值 current_customer  检测结果 detection_result  检测描述 detection_description 数字指标可以为空，但是单个key请务必完整。如 ''detection_result'':''''  {  ''moisture'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''湿度高'',   ''detection_description'':''完美的肌肤特质''  },  ''sebum'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''混合型'',   ''detection_description'':''该顾客混合了过多的油脂''  },  ''pore'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''毛孔比较细小''  },  ''melanin'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''特别护理'',   ''detection_description'':''有较大的色斑区域''  },  ''wrinkle'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''特别护理'',   ''detection_description'':''有很多黑色粉刺的大毛孔''  },  ''acne'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''没有皱纹，皮肤良好''  },  ''sensitivity'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''有部分角质可以进行护理''  } }'
        :param scalp_detection: 头皮检查结果，'1. Alopecia  脱发状态     2. Scalp state 头皮状态 3. Hair density 头发密度 4. Scalp of scalp 头皮角质 5. Nudity of scalp blood vessels 头皮血管裸露  6. Hair thickness 头发厚度 7. Hair follicle state 毛囊状态  数字指标：  行业平均值 industry_average  当前顾客数值 current_customer  检测结果 detection_result  检测描述 detection_description 数字指标可以为空，但是单个key请务必完整。如 ''detection_result'':''''  {  ''alopecia'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''湿度高'',   ''detection_description'':''完美的肌肤特质''  },  ''state'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''混合型'',   ''detection_description'':''该顾客混合了过多的油脂''  },  ''hair_density'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''毛孔比较细小''  },  ''scalp'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''特别护理'',   ''detection_description'':''有较大的色斑区域''  },  ''nudity_blood'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''特别护理'',   ''detection_description'':''有很多黑色粉刺的大毛孔''  },  ''hair_thickness'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''没有皱纹，皮肤良好''  },  ''hair_follicle_state'': {   ''industry_average'': ''26'',   ''current_customer'': ''39'',   ''detection_result'':''良好'',   ''detection_description'':''有部分角质可以进行护理''  } }'
        :param item_id: 商品ID，item_id 在action为ITEM_CLICK、BUY_CLICK时必须传入； 必须使用淘宝item_id，否则失败。
        :param coupon_id: '例如官方领取优惠券链接里的activityId： https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=2649119619&activityId=9d390579777e41a981b54aa4d6154f5e'
        :param outer_biz_id: 数据外部编码，保证数据唯一性
        :param op_time: 操作时间，后续统一使用该字段，考虑兼容，start_time跟该字段含义一致
        :param outer_user: 硬件识别的用户标识
        """
        return self._top_request(
            "taobao.smartstore.device.detector.feedback",
            {
                "device_code": device_code,
                "action": action,
                "skin_detection": skin_detection,
                "scalp_detection": scalp_detection,
                "item_id": item_id,
                "coupon_id": coupon_id,
                "outer_biz_id": outer_biz_id,
                "op_time": op_time,
                "outer_user": outer_user
            }
        )

    def taobao_istore_areas_get(
            self,
            fields
    ):
        """
        智慧门店区域编码查询
        查询标准地址区域代码信息。可以直接参考最新的行政区域代码：
        <a href='http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html'>http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html</a>
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39618

        :param fields: 需返回的字段列表.可选值:Area 结构中的所有字段;多个字段之间用','分隔.如:id,type,name,parent_id,zip.
        """
        return self._top_request(
            "taobao.istore.areas.get",
            {
                "fields": fields
            },
            result_processor=lambda x: x["areas"]
        )

    def taobao_nrrs_acceptance_task_updateResult(
            self,
            task_id,
            alipay_result_list
    ):
        """
        更新验收任务支付宝结果
        智慧门店商家验收任务检查相关接口-更新支付宝的验收结果。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40108

        :param task_id: 任务ID
        :param alipay_result_list: 系统自动生成
        """
        return self._top_request(
            "taobao.nrrs.acceptance.task.updateResult",
            {
                "task_id": task_id,
                "alipay_result_list": alipay_result_list
            }
        )

    def tmall_mall_couponbag_item_query(
            self,
            mall_id,
            open_uid
    ):
        """
        根据商场id查询券包券列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41393

        :param mall_id: 商场id
        :param open_uid: open uid
        """
        return self._top_request(
            "tmall.mall.couponbag.item.query",
            {
                "mall_id": mall_id,
                "open_uid": open_uid
            },
            result_processor=lambda x: x["result_d_t_o"]
        )

    def tmall_mall_couponbag_url_query(
            self,
            mall_id
    ):
        """
        根据商场id查询券包url
        根据商场id查询券包h5页面url
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41394

        :param mall_id: 商场id
        """
        return self._top_request(
            "tmall.mall.couponbag.url.query",
            {
                "mall_id": mall_id
            }
        )

    def tmall_popupstore_interaction_sites_get(
            self,
            site_d_t_o
    ):
        """
        获取互动开放业务场地
        查询互动开放业务类型的场地列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41810

        :param site_d_t_o: 查询参数
        """
        return self._top_request(
            "tmall.popupstore.interaction.sites.get",
            {
                "site_d_t_o": site_d_t_o
            }
        )

    def tmall_popupstore_interaction_point_create(
            self,
            popup_store_d_t_o=None,
            sample_device_d_t_o_list=None
    ):
        """
        创建互动开放点位
        互动开放服务商导入业务点位及设备相关信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41811

        :param popup_store_d_t_o: 点位详细信息
        :param sample_device_d_t_o_list: 点位下挂设备
        """
        return self._top_request(
            "tmall.popupstore.interaction.point.create",
            {
                "popup_store_d_t_o": popup_store_d_t_o,
                "sample_device_d_t_o_list": sample_device_d_t_o_list
            }
        )

    def tmall_popupstore_interaction_points_get(
            self,
            popup_store_query
    ):
        """
        获取互动开放点位列表
        互动开放服务商获取点位列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41812

        :param popup_store_query: 点位查询条件
        """
        return self._top_request(
            "tmall.popupstore.interaction.points.get",
            {
                "popup_store_query": popup_store_query
            }
        )

    def tmall_popupstore_interaction_point_easy_create(
            self,
            popup_store_dto=None,
            sample_device_dto=None
    ):
        """
        创建互动开放点位(轻量)
        互动开放服务商导入业务点位及设备相关信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42466

        :param popup_store_dto: 点位信息
        :param sample_device_dto: 设备信息
        """
        return self._top_request(
            "tmall.popupstore.interaction.point.easy.create",
            {
                "popup_store_dto": popup_store_dto,
                "sample_device_dto": sample_device_dto
            }
        )


class TbXianYu(DingTalkBaseAPI):
    """
    闲鱼
    """

    def alibaba_idle_recycle_order_syn(
            self,
            param0=None
    ):
        """
        回收商同步订单接口
        同步外部合作商的订单到闲鱼业务层
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31576

        :param param0: 回收商订单模型
        """
        return self._top_request(
            "alibaba.idle.recycle.order.syn",
            {
                "param0": param0
            }
        )

    def alibaba_idle_recycle_quote_sync(
            self,
            quote_result=None
    ):
        """
        报价同步回写
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        使用延迟报价时，产生价格后将报价信息同步给闲鱼
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32382

        :param quote_result: 结果
        """
        return self._top_request(
            "alibaba.idle.recycle.quote.sync",
            {
                "quote_result": quote_result
            }
        )

    def alibaba_idle_recycle_order_fulfillment(
            self,
            param0=None
    ):
        """
        回收订单履行
        外部回收商针对自有回收订单的履行
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32400

        :param param0: 订单同步入参
        """
        return self._top_request(
            "alibaba.idle.recycle.order.fulfillment",
            {
                "param0": param0
            },
            result_processor=lambda x: x["success"]
        )

    def alibaba_idle_recycle_spu_template_modify(
            self,
            recycle_spu_template=None
    ):
        """
        闲鱼接收回收商spu模板挂载信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32401

        :param recycle_spu_template: 回收商挂载模版信息
        """
        return self._top_request(
            "alibaba.idle.recycle.spu.template.modify",
            {
                "recycle_spu_template": recycle_spu_template
            }
        )

    def alibaba_idle_recycle_inspection_report(
            self,
            inspection_report=None
    ):
        """
        鉴定报告
        回收商鉴定报告
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32438

        :param inspection_report: 鉴定报告
        """
        return self._top_request(
            "alibaba.idle.recycle.inspection.report",
            {
                "inspection_report": inspection_report
            }
        )

    def alibaba_idle_recycle_order_query(
            self,
            biz_order_id
    ):
        """
        查询回收订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33985

        :param biz_order_id: 订单号
        """
        return self._top_request(
            "alibaba.idle.recycle.order.query",
            {
                "biz_order_id": biz_order_id
            }
        )

    def alibaba_idle_apprize_order_fulfillment(
            self,
            action,
            work_card_id
    ):
        """
        鉴定担保资金订单履约
        服务商针对自己的服务订单进行履约
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38899

        :param action: deal：服务商收取费用、refund：退款给付款方
        :param work_card_id: 天猫服务工单Id
        """
        return self._top_request(
            "alibaba.idle.apprize.order.fulfillment",
            {
                "action": action,
                "work_card_id": work_card_id
            },
            result_processor=lambda x: x["alipay_order_id"]
        )

    def alibaba_idle_recycle_order_perform(
            self,
            param0=None
    ):
        """
        回收订单履约
        闲鱼回收业务中,外部服务商作为买家 需要驱动交易节点变化
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42444

        :param param0: 参数
        """
        return self._top_request(
            "alibaba.idle.recycle.order.perform",
            {
                "param0": param0
            }
        )

    def taobao_idle_recycle_refund_apply(
            self,
            refund_apply=None
    ):
        """
        闲鱼回收交易退款申请
        回收商买家申请退款
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42456

        :param refund_apply: 退款申请
        """
        return self._top_request(
            "taobao.idle.recycle.refund.apply",
            {
                "refund_apply": refund_apply
            }
        )

    def taobao_idle_recycle_refund_returngoods(
            self,
            param0=None
    ):
        """
        退货
        回收商买家退货，填写退货运单号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42467

        :param param0: 退货
        """
        return self._top_request(
            "taobao.idle.recycle.refund.returngoods",
            {
                "param0": param0
            }
        )

    def taobao_idle_recycle_refund_cancleapply(
            self,
            biz_order_id
    ):
        """
        取消退款申请
        回收商的回收订单取消退款申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42512

        :param biz_order_id: 订单号
        """
        return self._top_request(
            "taobao.idle.recycle.refund.cancleapply",
            {
                "biz_order_id": biz_order_id
            }
        )

    def taobao_idle_recycle_refund_detail(
            self,
            biz_order_id
    ):
        """
        退款详情
        回收订单退款详情，主要包括退款状态，超时时间，和同意退款的卖家退货地址信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42513

        :param biz_order_id: 订单号
        """
        return self._top_request(
            "taobao.idle.recycle.refund.detail",
            {
                "biz_order_id": biz_order_id
            }
        )

    def alibaba_idle_consignment_order_get(
            self,
            biz_order_id
    ):
        """
        闲鱼帮卖订单查询
        闲鱼帮卖服务商以闲鱼交易买家身份查询订单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44110

        :param biz_order_id: 闲鱼订单ID
        """
        return self._top_request(
            "alibaba.idle.consignment.order.get",
            {
                "biz_order_id": biz_order_id
            }
        )

    def alibaba_idle_consignment_order_perform(
            self,
            param=None,
            attribute=None
    ):
        """
        帮卖订单履约
        帮卖订单履约，回收商同步订单信息，驱动交易流转
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44121

        :param param: 帮卖订单同步DTO
        :param attribute: 履约节点数据
        """
        return self._top_request(
            "alibaba.idle.consignment.order.perform",
            {
                "param": param,
                "attribute": attribute
            }
        )

    def alibaba_idle_consignment_spu_statistics(
            self,
            param=None
    ):
        """
        闲鱼帮卖同步服务商交易统计信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44122

        :param param: 入参
        """
        return self._top_request(
            "alibaba.idle.consignment.spu.statistics",
            {
                "param": param
            }
        )


class TbKuCun(DingTalkBaseAPI):
    """
    库存API
    """

    def taobao_location_relation_edit(
            self,
            location_relation_list
    ):
        """
        地点关联关系增量编辑
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29006

        :param location_relation_list: 关系对象列表
        """
        return self._top_request(
            "taobao.location.relation.edit",
            {
                "location_relation_list": location_relation_list
            }
        )

    def taobao_location_relation_query(
            self,
            location_relation
    ):
        """
        地点关联关系查询
        门店和仓库关联关系查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29007

        :param location_relation: 关系查询
        """
        return self._top_request(
            "taobao.location.relation.query",
            {
                "location_relation": location_relation
            }
        )

    def taobao_inventory_merchant_adjust(
            self,
            inventory_check
    ):
        """
        货品库存商家端调整
        货品库存商家端调整 ，入库，出库，盘点
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29008

        :param inventory_check: 调整库存对象
        """
        return self._top_request(
            "taobao.inventory.merchant.adjust",
            {
                "inventory_check": inventory_check
            }
        )

    def alibaba_retail_device_inventory_sync(
            self,
            device_type,
            device_id,
            inventory_dtos,
            device_option=None
    ):
        """
        库存同步接口
        商库存同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31754

        :param device_type: 设备类型
        :param device_id: 设备Id
        :param inventory_dtos: 系统自动生成
        :param device_option: 系统自动生成
        """
        return self._top_request(
            "alibaba.retail.device.inventory.sync",
            {
                "device_type": device_type,
                "device_id": device_id,
                "inventory_dtos": inventory_dtos,
                "device_option": device_option
            }
        )


class TbYunOSGuangGao(DingTalkBaseAPI):
    """
    YunOS-广告
    """

    def yunos_ad_report_get(
            self,
            query=None
    ):
        """
        代理商查询子账号报表
        客户（外部广告代理商）用来查询其名下子账号的广告投放数据报表。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28955

        :param query: 报表请求参数
        """
        return self._top_request(
            "yunos.ad.report.get",
            {
                "query": query
            }
        )

    def yunos_ad_audit_creative_getlist(
            self,
            member_id,
            creative_ids,
            status=''
    ):
        """
        批量获取创意审核状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29084

        :param member_id: 第三方DSP的id
        :param creative_ids: 创意列表
        :param status: 状态
        """
        return self._top_request(
            "yunos.ad.audit.creative.getlist",
            {
                "member_id": member_id,
                "creative_ids": creative_ids,
                "status": status
            }
        )

    def yunos_ad_audit_creative_get(
            self,
            member_id,
            creative_id
    ):
        """
        获取单个创意审核状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29085

        :param member_id: 第三方的dspId
        :param creative_id: 第三方广告创意id
        """
        return self._top_request(
            "yunos.ad.audit.creative.get",
            {
                "member_id": member_id,
                "creative_id": creative_id
            }
        )

    def yunos_ad_audit_creative_add(
            self,
            member_id,
            creative
    ):
        """
        单个创意预审接口
        YunOS广告业务第三方DSP单个创意预审接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29086

        :param member_id: 外部dsp的id
        :param creative: 创意审核入参
        """
        return self._top_request(
            "yunos.ad.audit.creative.add",
            {
                "member_id": member_id,
                "creative": creative
            }
        )


class TbQiMenPOSJieKou(DingTalkBaseAPI):
    """
    奇门POS接口
    """

    def taobao_qimen_pos_receipt_synchronize(
            self,
            order_info=None,
            order_lines=None,
            payments=None,
            extend_props=''
    ):
        """
        小票同步接口
        定期，ERP与POS之间将期间内的销售单进行同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28752

        :param order_info: 订单信息
        :param order_lines: 订单列表
        :param payments: 支付信息
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.pos.receipt.synchronize",
            {
                "request": {
                    "orderInfo": order_info,
                    "orderLines": order_lines,
                    "payments": payments,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def taobao_qimen_pos_replenish_notice(
            self,
            order_info=None,
            order_lines=None,
            extend_props=''
    ):
        """
        进仓通知单创建接口
        POS向ERP发起补货申请后，ERP配货需要一段时间才能到店铺，通过通知单提前告知店铺配货的情况。(该接口只能ERP发起)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28778

        :param order_info: 单据信息
        :param order_lines: 订单列表
        :param extend_props: 扩展属性
        """
        return self._top_request(
            "taobao.qimen.pos.replenish.notice",
            {
                "request": {
                    "orderInfo": order_info,
                    "orderLines": order_lines,
                    "extendProps": extend_props
                }
            },
            result_processor=lambda x: x["response"]
        )

    def qimen_taobao_pos_store_synchronize(
            self,
            action_type,
            customerid,
            total='',
            store=None
    ):
        """
        门店信息同步接口
        POS与ERP之间同步门店(仓库)的基础信息数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29748

        :param action_type: 操作
        :param customerid: 路由参数
        :param total: 所有的总条数
        :param store:
        """
        return self._top_request(
            "qimen.taobao.pos.store.synchronize",
            {
                "actionType": action_type,
                "customerid": customerid,
                "total": total,
                "store": store
            }
        )

    def qimen_taobao_qimen_pos_store_get(
            self,
            page,
            page_size,
            store_code='',
            start_time='',
            end_time=''
    ):
        """
        门店信息获取接口
        POS从ERP获取门店(仓库)的基础信息数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29768

        :param page: 当前页(从1开始)
        :param page_size: 每页条数(不超过100)
        :param store_code: 门店(仓储)编码
        :param start_time: 最后修改的起始时间
        :param end_time: 最后修改的结束时间
        """
        return self._top_request(
            "qimen.taobao.qimen.pos.store.get",
            {
                "page": page,
                "pageSize": page_size,
                "storeCode": store_code,
                "startTime": start_time,
                "endTime": end_time
            }
        )

    def qimen_taobao_pos_customer_get(
            self,
            page,
            page_size,
            customerid,
            customer_code='',
            start_time='',
            end_time=''
    ):
        """
        顾客信息同步接口
        POS机从ERP获取顾客基础数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29780

        :param page: 当前页
        :param page_size: 每页条数
        :param customerid: 指定路由参数
        :param customer_code: 顾客编码
        :param start_time: 最后修改的起始时间
        :param end_time: 最后修改的结束时间
        """
        return self._top_request(
            "qimen.taobao.pos.customer.get",
            {
                "page": page,
                "pageSize": page_size,
                "customerid": customerid,
                "customerCode": customer_code,
                "startTime": start_time,
                "endTime": end_time
            }
        )

    def qimen_taobao_pos_clerk_get(
            self,
            page,
            page_size,
            customerid,
            store_code='',
            clerk_code='',
            start_time='',
            end_time=''
    ):
        """
        店员信息获取接口
        POS机从ERP获取店员基础数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29791

        :param page: 当前页
        :param page_size: 每页条数
        :param customerid: 指定路由参数
        :param store_code: 门店(仓储)编码
        :param clerk_code: POS中的店员编码
        :param start_time: 最后修改的起始时间
        :param end_time: 最后修改的结束时间
        """
        return self._top_request(
            "qimen.taobao.pos.clerk.get",
            {
                "page": page,
                "pageSize": page_size,
                "customerid": customerid,
                "storeCode": store_code,
                "clerkCode": clerk_code,
                "startTime": start_time,
                "endTime": end_time
            }
        )

    def qimen_taobao_pos_clerk_synchronize(
            self,
            action_type,
            customerid,
            total='',
            clerk=None
    ):
        """
        店员信息同步接口
        POS机与ERP之间同步店员基础数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29792

        :param action_type: 操作
        :param customerid: 指定路由参数
        :param total: 所有的总条数
        :param clerk:
        """
        return self._top_request(
            "qimen.taobao.pos.clerk.synchronize",
            {
                "actionType": action_type,
                "customerid": customerid,
                "total": total,
                "clerk": clerk
            }
        )

    def qimen_taobao_pos_items_get(
            self,
            page,
            page_size,
            customerid,
            product_code='',
            item_code='',
            start_time='',
            end_time=''
    ):
        """
        商品信息同步接口
        POS从ERP获取基础商品数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29808

        :param page: 当前页
        :param page_size: 每页条数
        :param customerid: 指定路由参数
        :param product_code: 商品的SPU编码
        :param item_code: 商品SKU编码
        :param start_time: 最后修改的起始时间
        :param end_time: 最后修改的结束时间
        """
        return self._top_request(
            "qimen.taobao.pos.items.get",
            {
                "page": page,
                "pageSize": page_size,
                "customerid": customerid,
                "productCode": product_code,
                "itemCode": item_code,
                "startTime": start_time,
                "endTime": end_time
            }
        )

    def qimen_taobao_pos_items_synchronize(
            self,
            action_type,
            customerid,
            total='',
            item=None
    ):
        """
        商品信息同步接口
        POS与ERP之间同步基础商品数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29809

        :param action_type: 操作
        :param customerid: 指定路由参数
        :param total: 所有的总条数
        :param item:
        """
        return self._top_request(
            "qimen.taobao.pos.items.synchronize",
            {
                "actionType": action_type,
                "customerid": customerid,
                "total": total,
                "item": item
            }
        )

    def qimen_taobao_pos_salesorder_synchronize(
            self,
            customerid,
            order_info=None,
            order_line=None,
            payment=None
    ):
        """
        销售单同步接口
        ERP与POS之间将期间内的销售单进行同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29828

        :param customerid: 指定路由参数
        :param order_info:
        :param order_line:
        :param payment:
        """
        return self._top_request(
            "qimen.taobao.pos.salesorder.synchronize",
            {
                "customerid": customerid,
                "orderInfo": order_info,
                "orderLine": order_line,
                "payment": payment
            }
        )

    def qimen_taobao_pos_receipt_synchronize(
            self,
            customerid,
            receipt=None
    ):
        """
        小票同步接口
        定期(如每天下班后),将期间内的小票汇总同步回ERP
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29829

        :param customerid: 指定路由参数
        :param receipt:
        """
        return self._top_request(
            "qimen.taobao.pos.receipt.synchronize",
            {
                "customerid": customerid,
                "receipt": receipt
            }
        )

    def qimen_taobao_pos_replenish_apply(
            self,
            customerid,
            order_info=None,
            order_line=None
    ):
        """
        补货单申请接口
        当POS门店缺货时，向ERP请求从其他门店或者仓库调拨货品的申请接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29863

        :param customerid: 指定路由参数
        :param order_info:
        :param order_line:
        """
        return self._top_request(
            "qimen.taobao.pos.replenish.apply",
            {
                "customerid": customerid,
                "orderInfo": order_info,
                "orderLine": order_line
            }
        )

    def qimen_taobao_pos_replenish_create(
            self,
            customerid,
            order_info=None,
            order_line=None
    ):
        """
        补货单创建接口
        当ERP给门店补货(配货)时，发给门店的配货入库申请接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29864

        :param customerid: 指定路由参数
        :param order_info:
        :param order_line:
        """
        return self._top_request(
            "qimen.taobao.pos.replenish.create",
            {
                "customerid": customerid,
                "orderInfo": order_info,
                "orderLine": order_line
            }
        )

    def qimen_taobao_pos_replenish_confirm(
            self,
            customerid,
            order_info=None,
            order_line=None
    ):
        """
        补货单确认接口
        当ERP给门店补货(配货)时，门店返回给ERP配货单的实际收货情况
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29865

        :param customerid: 指定路由参数
        :param order_info:
        :param order_line:
        """
        return self._top_request(
            "qimen.taobao.pos.replenish.confirm",
            {
                "customerid": customerid,
                "orderInfo": order_info,
                "orderLine": order_line
            }
        )

    def qimen_taobao_pos_return_reply(
            self,
            order_code,
            store_code,
            order_type,
            status,
            customerid,
            org_code='',
            operator=None
    ):
        """
        退仓单申请通知接口
        ERP向POS通知退货申请的审批结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29893

        :param order_code: 退仓申请单单据编码
        :param store_code: 提出申请的门店编码
        :param order_type: 单据类型
        :param status: 单据状态
        :param customerid: 指定路由参数
        :param org_code: 组织编码
        :param operator:
        """
        return self._top_request(
            "qimen.taobao.pos.return.reply",
            {
                "orderCode": order_code,
                "storeCode": store_code,
                "orderType": order_type,
                "status": status,
                "customerid": customerid,
                "orgCode": org_code,
                "operator": operator
            }
        )

    def qimen_taobao_pos_return_create(
            self,
            customerid,
            order_info=None,
            order_line=None
    ):
        """
        退仓单创建接口
        POS创建退货单，通知ERP退货。(该接口也可以允许ERP发起，通知POS退仓)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29894

        :param customerid: 指定路由参数
        :param order_info:
        :param order_line:
        """
        return self._top_request(
            "qimen.taobao.pos.return.create",
            {
                "customerid": customerid,
                "orderInfo": order_info,
                "orderLine": order_line
            }
        )

    def qimen_taobao_pos_return_apply(
            self,
            customerid,
            order_info=None,
            order_line=None
    ):
        """
        退仓单申请接口
        门店需要退货时，通过该接口POS向ERP申请退仓
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29895

        :param customerid: 指定路由参数
        :param order_info:
        :param order_line:
        """
        return self._top_request(
            "qimen.taobao.pos.return.apply",
            {
                "customerid": customerid,
                "orderInfo": order_info,
                "orderLine": order_line
            }
        )

    def qimen_taobao_pos_stockmove_synchronize(
            self,
            customerid,
            order_info=None,
            order_line=None
    ):
        """
        移库单信息同步接口
        POS通知ERP的商品库位的变更。(也可以由ERP通知POS)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29898

        :param customerid: 指定路由参数
        :param order_info:
        :param order_line:
        """
        return self._top_request(
            "qimen.taobao.pos.stockmove.synchronize",
            {
                "customerid": customerid,
                "orderInfo": order_info,
                "orderLine": order_line
            }
        )

    def qimen_taobao_pos_inventory_report(
            self,
            customerid,
            order_info=None,
            item=None
    ):
        """
        盘点单(库存异动)同步接口
        门店进行盘点后或者库存发生异动后，将库存损益同步给ERP
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29899

        :param customerid: 指定路由参数
        :param order_info:
        :param item:
        """
        return self._top_request(
            "qimen.taobao.pos.inventory.report",
            {
                "customerid": customerid,
                "orderInfo": order_info,
                "item": item
            }
        )

    def qimen_taobao_pos_deliveryorder_confirm(
            self,
            customerid,
            store_code='',
            order=None
    ):
        """
        门店发货单确认接口
        消费者上门自提或者门店发货后，门店发货单信息确认
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29902

        :param customerid: 指定路由参数
        :param store_code: 门店编码
        :param order:
        """
        return self._top_request(
            "qimen.taobao.pos.deliveryorder.confirm",
            {
                "customerid": customerid,
                "storeCode": store_code,
                "order": order
            }
        )


class TbALiJianKangZhuiSuMa(DingTalkBaseAPI):
    """
    阿里健康追溯码
    """

    def alibaba_alihealth_tracecodeplatform_code_syncdata(
            self,
            lbx_code,
            sc_item_id,
            trace_codes
    ):
        """
        自营店数据同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30608

        :param lbx_code: 菜鸟生成的lbx号
        :param sc_item_id: 后端货品id
        :param trace_codes: 追溯码code列表，如果一笔订单购买多份，那tracecode就是多个
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeplatform.code.syncdata",
            {
                "lbx_code": lbx_code,
                "sc_item_id": sc_item_id,
                "trace_codes": trace_codes
            }
        )

    def alibaba_alihealth_tracecodeseller_bill_rootcode_get(
            self,
            app_code='',
            code=''
    ):
        """
        获取最外层包装码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38017

        :param app_code: 用户身份认证
        :param code: 码
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.bill.rootcode.get",
            {
                "app_code": app_code,
                "code": code
            }
        )

    def alibaba_alihealth_drug_unifiedlogin_putssion(
            self,
            key,
            ad_session
    ):
        """
        登录-添加session
        登录-添加sesion
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38614

        :param key: a
        :param ad_session: a
        """
        return self._top_request(
            "alibaba.alihealth.drug.unifiedlogin.putssion",
            {
                "key": key,
                "ad_session": ad_session
            },
            result_processor=lambda x: x["ret"]
        )

    def alibaba_alihealth_bill_upload_billupload(
            self,
            upload_flag='',
            drug_type='',
            bill_type='',
            order_is_matched='',
            oper_ic_code='',
            oper_ic_name='',
            partner_id_send='',
            partner_id_recv='',
            bill_upload_queue_list_id='空',
            partner_id_dest='',
            corp_seq_no='',
            owner_seq_no='',
            ent_id='',
            ref_ent_id='',
            ent_seq_no='',
            corp_name='',
            ent_seq_no_dest='',
            ent_seq_no_recv='',
            ent_seq_no_send='',
            upload_file_name='',
            note='',
            store_in_out_date='',
            bill_code='',
            destroy_infos='',
            file_content='',
            inout_infos=''
    ):
        """
        单据上传
        单据上传统一服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38833

        :param upload_flag: 上传标识
        :param drug_type: 01/02（特药）   03（普药）
        :param bill_type: 单据类型
        :param order_is_matched: 订单是否匹配
        :param oper_ic_code: 操作证书编号
        :param oper_ic_name: 操作证书名称
        :param partner_id_send: 发货企业id
        :param partner_id_recv: 收货企业id
        :param bill_upload_queue_list_id: 32为的队列值，修改单据使用
        :param partner_id_dest: 直调企业id
        :param corp_seq_no: 代理企业ref
        :param owner_seq_no: 货主企业ref
        :param ent_id: session中获取的企业id
        :param ref_ent_id: session中获取到的企业唯一标识
        :param ent_seq_no: 上传企业ref
        :param corp_name: 代理企业名称
        :param ent_seq_no_dest: 直调企业名称
        :param ent_seq_no_recv: 收货企业名称
        :param ent_seq_no_send: 发货企业名称
        :param upload_file_name: 上传文件名称
        :param note: 备注
        :param store_in_out_date: 入出库时间
        :param bill_code: 用户自定义单据号
        :param destroy_infos: 销毁信息json对象
        :param file_content: xml文件base64后编码后的字符串
        :param inout_infos: 运输信息json对象
        """
        return self._top_request(
            "alibaba.alihealth.bill.upload.billupload",
            {
                "upload_flag": upload_flag,
                "drug_type": drug_type,
                "bill_type": bill_type,
                "order_is_matched": order_is_matched,
                "oper_ic_code": oper_ic_code,
                "oper_ic_name": oper_ic_name,
                "partner_id_send": partner_id_send,
                "partner_id_recv": partner_id_recv,
                "bill_upload_queue_list_id": bill_upload_queue_list_id,
                "partner_id_dest": partner_id_dest,
                "corp_seq_no": corp_seq_no,
                "owner_seq_no": owner_seq_no,
                "ent_id": ent_id,
                "ref_ent_id": ref_ent_id,
                "ent_seq_no": ent_seq_no,
                "corp_name": corp_name,
                "ent_seq_no_dest": ent_seq_no_dest,
                "ent_seq_no_recv": ent_seq_no_recv,
                "ent_seq_no_send": ent_seq_no_send,
                "upload_file_name": upload_file_name,
                "note": note,
                "store_in_out_date": store_in_out_date,
                "bill_code": bill_code,
                "destroy_infos": destroy_infos,
                "file_content": file_content,
                "inout_infos": inout_infos
            }
        )

    def alibaba_alihealth_bill_upload_billcodesinfo(
            self,
            code_list
    ):
        """
        单据批量码查询
        单据上传查询批量码的信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38936

        :param code_list: 码列表
        """
        return self._top_request(
            "alibaba.alihealth.bill.upload.billcodesinfo",
            {
                "code_list": code_list
            }
        )

    def alibaba_alihealth_tracecodeseller_user_search(
            self,
            user_name
    ):
        """
        测试top接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39128

        :param user_name: 名称随便填写
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.user.search",
            {
                "user_name": user_name
            }
        )

    def alibaba_alihealth_drug_download_entlist(
            self,
            app_key_n=''
    ):
        """
        企业下载列表
        获取企业的下载文件列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39666

        :param app_key_n: appKey
        """
        return self._top_request(
            "alibaba.alihealth.drug.download.entlist",
            {
                "app_key_n": app_key_n
            }
        )

    def alibaba_alihealth_tracecodeseller_milk_add(
            self,
            ent_id='',
            json_str=''
    ):
        """
        同步惠氏数据到本地数据库
        惠氏每天会定时将码对应的商品数据同步到弹内的数据库中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39850

        :param ent_id: 企业ID
        :param json_str: JSON数据
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.milk.add",
            {
                "ent_id": ent_id,
                "json_str": json_str
            }
        )

    def alibaba_alihealth_bill_upload_billcodesinfoex(
            self,
            code_list='',
            ref_ent_id=''
    ):
        """
        单据上传查询批量码的信息
        企业单据上传查询批量码的信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40177

        :param code_list: 码列表
        :param ref_ent_id: 企业标识
        """
        return self._top_request(
            "alibaba.alihealth.bill.upload.billcodesinfoex",
            {
                "code_list": code_list,
                "ref_ent_id": ref_ent_id
            }
        )

    def alibaba_alihealth_bill_upload_billuploadex(
            self,
            bill_upload_queue_list_id='',
            bill_code='',
            store_in_out_date='',
            file_content='',
            drug_type='',
            order_is_matched='',
            upload_flag='',
            upload_file_name='',
            bill_type='',
            note='',
            oper_ic_name='',
            oper_ic_code='',
            ent_seq_no='',
            ref_ent_id='',
            ent_id='',
            partner_id_send='',
            ent_seq_no_send='',
            partner_id_recv='',
            ent_seq_no_recv='',
            partner_id_dest='',
            ent_seq_no_dest='',
            corp_seq_no='',
            corp_name='',
            owner_seq_no='',
            inout_infos='',
            destroy_infos='',
            client_type=''
    ):
        """
        单据上传标准接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40191

        :param bill_upload_queue_list_id: 32为的队列值，修改单据使用
        :param bill_code: 单据号
        :param store_in_out_date: 入出库时间
        :param file_content: xml文件base64后编码后的字符串
        :param drug_type: 01/02（特药） 03（普药）
        :param order_is_matched: 订单是否匹配
        :param upload_flag: 上传标志
        :param upload_file_name: 上传文件名称
        :param bill_type: 单据类型
        :param note: 备注
        :param oper_ic_name: 操作证书名称
        :param oper_ic_code: 操作证书编号
        :param ent_seq_no: 上传企业ref
        :param ref_ent_id: 登陆企业的ref
        :param ent_id: 登陆企业的entId
        :param partner_id_send: 发货企业id
        :param ent_seq_no_send: 发货企业名称
        :param partner_id_recv: 收货企业id
        :param ent_seq_no_recv: 收货企业名称
        :param partner_id_dest: 直调企业id
        :param ent_seq_no_dest: 直调企业名称
        :param corp_seq_no: 代理企业ref
        :param corp_name: 代理企业名称
        :param owner_seq_no: 货主企业ref
        :param inout_infos: 运输信息json对象
        :param destroy_infos: 销毁信息json对象
        :param client_type: 上传单据的客户端类型
        """
        return self._top_request(
            "alibaba.alihealth.bill.upload.billuploadex",
            {
                "bill_upload_queue_list_id": bill_upload_queue_list_id,
                "bill_code": bill_code,
                "store_in_out_date": store_in_out_date,
                "file_content": file_content,
                "drug_type": drug_type,
                "order_is_matched": order_is_matched,
                "upload_flag": upload_flag,
                "upload_file_name": upload_file_name,
                "bill_type": bill_type,
                "note": note,
                "oper_ic_name": oper_ic_name,
                "oper_ic_code": oper_ic_code,
                "ent_seq_no": ent_seq_no,
                "ref_ent_id": ref_ent_id,
                "ent_id": ent_id,
                "partner_id_send": partner_id_send,
                "ent_seq_no_send": ent_seq_no_send,
                "partner_id_recv": partner_id_recv,
                "ent_seq_no_recv": ent_seq_no_recv,
                "partner_id_dest": partner_id_dest,
                "ent_seq_no_dest": ent_seq_no_dest,
                "corp_seq_no": corp_seq_no,
                "corp_name": corp_name,
                "owner_seq_no": owner_seq_no,
                "inout_infos": inout_infos,
                "destroy_infos": destroy_infos,
                "client_type": client_type
            }
        )

    def alibaba_alihealth_drug_getbarcode_bytraccode(
            self,
            trace_code
    ):
        """
        根据追溯码获取69码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40358

        :param trace_code: 追溯码
        """
        return self._top_request(
            "alibaba.alihealth.drug.getbarcode.bytraccode",
            {
                "trace_code": trace_code
            }
        )

    def alibaba_alihealth_drug_updatebarcode_bytraccode(
            self,
            trace_code,
            barcode
    ):
        """
        根据追溯码修改69码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40718

        :param trace_code: 追溯码
        :param barcode: 69码
        """
        return self._top_request(
            "alibaba.alihealth.drug.updatebarcode.bytraccode",
            {
                "trace_code": trace_code,
                "barcode": barcode
            }
        )

    def alibaba_alihealth_codeseller_getuseraward(
            self,
            code
    ):
        """
        贩卖机扫码查询领奖状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40971

        :param code: 追溯码
        """
        return self._top_request(
            "alibaba.alihealth.codeseller.getuseraward",
            {
                "code": code
            }
        )

    def alibaba_alihealth_drug_kyt_uploadb2cbill(
            self,
            bill_code,
            bill_time,
            ref_user_id,
            trace_codes,
            oper_ic_code='',
            master_order='',
            lbx_order='',
            warehouse_id='',
            drug_id=''
    ):
        """
        快易通零售B2C
        快易通零售B2C单据上传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41007

        :param bill_code: 单据号【20位以内的唯一编码，可以使用16位UUID】
        :param bill_time: 单据时间【一般情况下写当前时间】
        :param ref_user_id: 企业ID
        :param trace_codes: 追溯码[多个时用逗号分开]
        :param oper_ic_code: 操作人
        :param master_order: 主订单
        :param lbx_order: lbx号
        :param warehouse_id: 仓号
        :param drug_id: 药品ID
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.uploadb2cbill",
            {
                "bill_code": bill_code,
                "bill_time": bill_time,
                "ref_user_id": ref_user_id,
                "trace_codes": trace_codes,
                "oper_ic_code": oper_ic_code,
                "master_order": master_order,
                "lbx_order": lbx_order,
                "warehouse_id": warehouse_id,
                "drug_id": drug_id
            }
        )

    def alibaba_alihealth_drug_kyt_uploadcircubill(
            self,
            bill_code,
            bill_time,
            bill_type,
            physic_type,
            ref_user_id,
            from_user_id,
            to_user_id,
            oper_ic_code,
            file_content,
            upload_file_name,
            client_type,
            agent_ref_user_id='',
            dest_user_id='',
            oper_ic_name=''
    ):
        """
        生产批发单据上传
        生产批发单据上传（非零售企业使用），包括生产入库（101）采购入库（102），退货入库（103），调拨入库（104）,销售出库（201）,退货出库（202），调拨出库（203），销毁出库（205），抽检出库（206）直调出库（207）。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41031

        :param bill_code: 单据编号【同一个企业不能上传相同单据号】
        :param bill_time: 单据日期
        :param bill_type: 单据类型【102代表采购入库,201代表销售出库】
        :param physic_type: 药品类型【3普药2特药】
        :param ref_user_id: 货主企业【注意：该入参是ref_ent_id，不是ent_id】
        :param from_user_id: 发货企业【注意：该入参是ent_id,并不是ref_ent_id】
        :param to_user_id: 收货企业【注意：该入参是ent_id,并不是ref_ent_id】
        :param oper_ic_code: 操作人标识（appkey编号）
        :param file_content: 单据文件体【bas64字符串】
        :param upload_file_name: 单据名称
        :param client_type: 客户端类型【暂定都写2】
        :param agent_ref_user_id: 第三方物流代理企业【注意：该入参是ref_ent_id，不是ent_id】
        :param dest_user_id: 直调企业【注意：该入参是ent_id,并不是ref_ent_id】
        :param oper_ic_name: 单据提交者姓名
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.uploadcircubill",
            {
                "bill_code": bill_code,
                "bill_time": bill_time,
                "bill_type": bill_type,
                "physic_type": physic_type,
                "ref_user_id": ref_user_id,
                "from_user_id": from_user_id,
                "to_user_id": to_user_id,
                "oper_ic_code": oper_ic_code,
                "file_content": file_content,
                "upload_file_name": upload_file_name,
                "client_type": client_type,
                "agent_ref_user_id": agent_ref_user_id,
                "dest_user_id": dest_user_id,
                "oper_ic_name": oper_ic_name
            }
        )

    def alibaba_alihealth_drug_kyt_searchstatus(
            self,
            ref_ent_id,
            begin_date,
            end_date,
            bill_type,
            page_size,
            page,
            bill_code='',
            drug_type='',
            deal_status='',
            from_user_id='',
            to_user_id='',
            agent_ref_user_id=''
    ):
        """
        单据处理状态查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41048

        :param ref_ent_id: 企业ref_ent_id（货主企业的ref_ent_id）
        :param begin_date: 开始日期（没有时分秒）
        :param end_date: 结束日期（没有时分秒）
        :param bill_type: 单据类型 A：全部 AI：全部入库 AO：全部出库
        :param page_size: 页大小
        :param page: 页码
        :param bill_code: 单据号（精确值，不支持模糊查询）
        :param drug_type: 药品类型
        :param deal_status: 状态  1, 上传成功     3, 处理成功     4, 处理失败
        :param from_user_id: 发货商
        :param to_user_id: 收货商
        :param agent_ref_user_id: 代理商（第三方物流企业）
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.searchstatus",
            {
                "ref_ent_id": ref_ent_id,
                "begin_date": begin_date,
                "end_date": end_date,
                "bill_type": bill_type,
                "page_size": page_size,
                "page": page,
                "bill_code": bill_code,
                "drug_type": drug_type,
                "deal_status": deal_status,
                "from_user_id": from_user_id,
                "to_user_id": to_user_id,
                "agent_ref_user_id": agent_ref_user_id
            }
        )

    def alibaba_alihealth_drug_kyt_uploadretail(
            self,
            bill_code,
            bill_time,
            bill_type,
            ref_user_id,
            client_type,
            trace_codes,
            physic_type='3',
            from_user_id='',
            oper_ic_code='',
            oper_ic_name=''
    ):
        """
        门店销售扫码回传接口
        门店在销售给顾客时，扫描追溯码的数据按照单据回传；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41075

        :param bill_code: 单据编号（唯一）
        :param bill_time: 单据生成时间
        :param bill_type: 单据类型[321,零售出库][322,疫苗接种]
        :param ref_user_id: 码上放心平台企业编码（门店）
        :param client_type: 请求类型[暂定都写2]
        :param trace_codes: 追溯码[多个时用逗号分开]
        :param physic_type: 药品类型[3,普药]
        :param from_user_id: 发货企业(可为空)
        :param oper_ic_code: 单据提交者(appkey编号)
        :param oper_ic_name: 单据提交者姓名(可为空)
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.uploadretail",
            {
                "bill_code": bill_code,
                "bill_time": bill_time,
                "bill_type": bill_type,
                "ref_user_id": ref_user_id,
                "client_type": client_type,
                "trace_codes": trace_codes,
                "physic_type": physic_type,
                "from_user_id": from_user_id,
                "oper_ic_code": oper_ic_code,
                "oper_ic_name": oper_ic_name
            }
        )

    def alibaba_alihealth_drug_kyt_getbyentid(
            self,
            ref_ent_id,
            ent_id
    ):
        """
        根据企业主键查看企业详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41080

        :param ref_ent_id: 接口调用企业的唯一标识（接口调用者）
        :param ent_id: 准备要查询的企业ID（返回该企业ID的详细信息）
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.getbyentid",
            {
                "ref_ent_id": ref_ent_id,
                "ent_id": ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_getbyrefentid(
            self,
            ref_ent_id,
            dest_ref_ent_id
    ):
        """
        根据企业唯一标识查看企业详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41081

        :param ref_ent_id: 接口调用企业的唯一标识（接口调用者）
        :param dest_ref_ent_id: 准备要查询的企业唯一标识（返回该唯一标识企业的详细信息）
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.getbyrefentid",
            {
                "ref_ent_id": ref_ent_id,
                "dest_ref_ent_id": dest_ref_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_listparts(
            self,
            ref_ent_id,
            page_size,
            page,
            ent_name='',
            ref_partner_id='',
            begin_date='',
            end_date=''
    ):
        """
        查询往来单位列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41106

        :param ref_ent_id: 企业ID
        :param page_size: 页大小
        :param page: 页码
        :param ent_name: 企业名称
        :param ref_partner_id: 企业自定义编号
        :param begin_date: 开始时间
        :param end_date: 结束时间
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.listparts",
            {
                "ref_ent_id": ref_ent_id,
                "page_size": page_size,
                "page": page,
                "ent_name": ent_name,
                "ref_partner_id": ref_partner_id,
                "begin_date": begin_date,
                "end_date": end_date
            }
        )

    def alibaba_alihealth_drug_kyt_drugcodes(
            self,
            ref_ent_name,
            physic_name,
            produce_batch_no,
            physic_type,
            prepn_spec,
            pkg_spec=''
    ):
        """
        药品是否赋码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41171

        :param ref_ent_name: 企业名称
        :param physic_name: 药品名称
        :param produce_batch_no: 生产批号
        :param physic_type: 药品类型
        :param prepn_spec: 制剂规格
        :param pkg_spec: 包装规格
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.drugcodes",
            {
                "ref_ent_name": ref_ent_name,
                "physic_name": physic_name,
                "produce_batch_no": produce_batch_no,
                "physic_type": physic_type,
                "prepn_spec": prepn_spec,
                "pkg_spec": pkg_spec
            }
        )

    def alibaba_alihealth_drug_kyt_synonymauths(
            self,
            ref_ent_id,
            page_size,
            page,
            ent_name='',
            syn_own_ent_id=''
    ):
        """
        物流企业查询货主企业信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41184

        :param ref_ent_id: 企业ID
        :param page_size: 页码
        :param page: 页面大小
        :param ent_name: 企业名称
        :param syn_own_ent_id: 货主自定义编号
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.synonymauths",
            {
                "ref_ent_id": ref_ent_id,
                "page_size": page_size,
                "page": page,
                "ent_name": ent_name,
                "syn_own_ent_id": syn_own_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_drugtable(
            self,
            ref_ent_id,
            physic_name,
            page_size,
            page,
            approval_licence_no='',
            start_date='',
            end_date='',
            ent_name='',
            package_spec='',
            prepn_spec=''
    ):
        """
        查询药品目录信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41185

        :param ref_ent_id: 企业ID
        :param physic_name: 药品名称
        :param page_size: 页大小
        :param page: 页码
        :param approval_licence_no: 批准文号
        :param start_date: 开始日期
        :param end_date: 结束日期
        :param ent_name: 企业名称
        :param package_spec: 包装规格
        :param prepn_spec: 制剂规格
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.drugtable",
            {
                "ref_ent_id": ref_ent_id,
                "physic_name": physic_name,
                "page_size": page_size,
                "page": page,
                "approval_licence_no": approval_licence_no,
                "start_date": start_date,
                "end_date": end_date,
                "ent_name": ent_name,
                "package_spec": package_spec,
                "prepn_spec": prepn_spec
            }
        )

    def alibaba_alihealth_drug_kyt_listauths(
            self,
            ref_ent_id,
            page,
            page_size,
            ent_name=''
    ):
        """
        企业搜索自己授权的物流企业
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41186

        :param ref_ent_id: 企业ID
        :param page: 页码
        :param page_size: 页大小
        :param ent_name: 企业名称
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.listauths",
            {
                "ref_ent_id": ref_ent_id,
                "page": page,
                "page_size": page_size,
                "ent_name": ent_name
            }
        )

    def alibaba_alihealth_drug_kyt_listupout(
            self,
            ref_ent_id,
            page_size,
            page,
            begin_date='',
            end_date='',
            produce_batch_no='',
            drug_ent_base_info_id='',
            bill_type='',
            physic_type='',
            status='',
            bill_code='',
            from_user_id=''
    ):
        """
        查询货主/本企业上游企业出库单据信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41187

        :param ref_ent_id: 企业ID
        :param page_size: 页大小
        :param page: 页码
        :param begin_date: 开始日期
        :param end_date: 结束日期
        :param produce_batch_no: 生产批号
        :param drug_ent_base_info_id: 药品ID
        :param bill_type: 单据类型
        :param physic_type: 药品类型
        :param status: 状态
        :param bill_code: 单据号
        :param from_user_id: 发货单位
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.listupout",
            {
                "ref_ent_id": ref_ent_id,
                "page_size": page_size,
                "page": page,
                "begin_date": begin_date,
                "end_date": end_date,
                "produce_batch_no": produce_batch_no,
                "drug_ent_base_info_id": drug_ent_base_info_id,
                "bill_type": bill_type,
                "physic_type": physic_type,
                "status": status,
                "bill_code": bill_code,
                "from_user_id": from_user_id
            }
        )

    def alibaba_alihealth_drug_kyt_uploadrelation(
            self,
            file_content_string,
            ref_ent_id,
            save_code_relation=None,
            affirm_flag='',
            file_content='',
            client_type=''
    ):
        """
        关联关系上传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41213

        :param file_content_string: 文件内容串
        :param ref_ent_id: 企业ID
        :param save_code_relation: 关联关系文件信息
        :param affirm_flag: affirmFlag
        :param file_content: fileContent
        :param client_type: 客户端类型
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.uploadrelation",
            {
                "file_content_string": file_content_string,
                "ref_ent_id": ref_ent_id,
                "save_code_relation": save_code_relation,
                "affirm_flag": affirm_flag,
                "file_content": file_content,
                "client_type": client_type
            }
        )

    def alibaba_alihealth_drug_kyt_uploadinoutbill(
            self,
            bill_code,
            bill_time,
            bill_type,
            physic_type,
            ref_user_id,
            from_user_id,
            to_user_id,
            oper_ic_code,
            oper_ic_name,
            client_type,
            trace_codes,
            agent_ref_user_id='',
            dest_user_id='',
            return_reason_code='',
            return_reason_des='',
            cancel_reason_code='',
            cancel_reason_des='',
            executer_name='',
            executer_code='',
            superviser_name='',
            superviser_code='',
            warehouse_id='',
            drug_id=''
    ):
        """
        企业上传出入库信息
        企业上传出入库信息，包括采购入库（102），退货入库（103），供应入库（107）,销售出库（201）,退货出库（202），销毁出库（205），抽检出库（206）， 供应出库（209）,
        不包括对个人的零售出库，疫苗接种，领药出库。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41215

        :param bill_code: 单据编码
        :param bill_time: 单据时间
        :param bill_type: 单据类型【102代表采购入库】
        :param physic_type: 药品类型【3普药2特药】
        :param ref_user_id: 上传企业的单位维一编码【注意：该入参是ref_ent_id，不是ent_id】
        :param from_user_id: 发货企业entId【注意：该入参是ent_id,并不是ref_ent_id】
        :param to_user_id: 收货企业entId【注意：该入参是ent_id,并不是ref_ent_id】
        :param oper_ic_code: 单据提交者（appkey编号）
        :param oper_ic_name: 单据提交者姓名
        :param client_type: 客户端类型[必须填2]
        :param trace_codes: 追溯码[多个时用逗号分开]
        :param agent_ref_user_id: 代理企业REF标识
        :param dest_user_id: 直调企业标识【注意：该入参是ent_id,并不是ref_ent_id】
        :param return_reason_code: 退货原因代码[退货入出库时填写]
        :param return_reason_des: 退货原因描述[退货入出库时填写]
        :param cancel_reason_code: 注销原因代码【销毁出库时填写】
        :param cancel_reason_des: 注销原因描述【销毁出库时填写】
        :param executer_name: 执行人姓名【销毁出库时填写】
        :param executer_code: 执行人证件号【销毁出库时填写】
        :param superviser_name: 监督人姓名【销毁出库时填写】
        :param superviser_code: 监督人证件号【销毁出库时填写】
        :param warehouse_id: 仓号
        :param drug_id: 药品ID[企业自已系统的药品ID]
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.uploadinoutbill",
            {
                "bill_code": bill_code,
                "bill_time": bill_time,
                "bill_type": bill_type,
                "physic_type": physic_type,
                "ref_user_id": ref_user_id,
                "from_user_id": from_user_id,
                "to_user_id": to_user_id,
                "oper_ic_code": oper_ic_code,
                "oper_ic_name": oper_ic_name,
                "client_type": client_type,
                "trace_codes": trace_codes,
                "agent_ref_user_id": agent_ref_user_id,
                "dest_user_id": dest_user_id,
                "return_reason_code": return_reason_code,
                "return_reason_des": return_reason_des,
                "cancel_reason_code": cancel_reason_code,
                "cancel_reason_des": cancel_reason_des,
                "executer_name": executer_name,
                "executer_code": executer_code,
                "superviser_name": superviser_name,
                "superviser_code": superviser_code,
                "warehouse_id": warehouse_id,
                "drug_id": drug_id
            }
        )

    def alibaba_alihealth_drug_kyt_getcodebillinfo(
            self,
            ref_ent_id,
            code
    ):
        """
        根据码获取基本和单据信息
        根据码信息获取基本信息和单据信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41217

        :param ref_ent_id: 企业ID
        :param code: 码
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.getcodebillinfo",
            {
                "ref_ent_id": ref_ent_id,
                "code": code
            }
        )

    def alibaba_alihealth_drug_kyt_singlerelation(
            self,
            code,
            ref_ent_id,
            des_ref_ent_id
    ):
        """
        单码关联关系查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41218

        :param code: 追溯码
        :param ref_ent_id: 接口调用企业的唯一标识（接口调用者）
        :param des_ref_ent_id: 目标企业唯一标识（为哪个企业查询，一般与入参ref_ent_id一样）
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.singlerelation",
            {
                "code": code,
                "ref_ent_id": ref_ent_id,
                "des_ref_ent_id": des_ref_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_relationdetail(
            self,
            code_active_info_id,
            ref_ent_id,
            client_type
    ):
        """
        关联关系处理详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41219

        :param code_active_info_id: 码激活文件上传信息标识
        :param ref_ent_id: 企业ID
        :param client_type: 客户端ID【默认写2】
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.relationdetail",
            {
                "code_active_info_id": code_active_info_id,
                "ref_ent_id": ref_ent_id,
                "client_type": client_type
            }
        )

    def alibaba_alihealth_drug_kyt_codeprocess(
            self,
            start_date,
            end_date,
            process_flag,
            query_flag,
            physic_type,
            page,
            page_size,
            client_type,
            ref_ent_id,
            upload_flag='',
            produce_batch_no='',
            prod_seq_no='',
            drug_ent_base_info_id='',
            pkg_spec=''
    ):
        """
        关联关系处理查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41224

        :param start_date: 开始时间
        :param end_date: 结束时间
        :param process_flag: 处理状态
        :param query_flag: 查询标识
        :param physic_type: 药品类型
        :param page: 页数
        :param page_size: 条数
        :param client_type: 客户端
        :param ref_ent_id: 企业ID
        :param upload_flag: 上传标识
        :param produce_batch_no: 批次号
        :param prod_seq_no: 生产企业ID
        :param drug_ent_base_info_id: 药品ID
        :param pkg_spec: 包装规格
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.codeprocess",
            {
                "start_date": start_date,
                "end_date": end_date,
                "process_flag": process_flag,
                "query_flag": query_flag,
                "physic_type": physic_type,
                "page": page,
                "page_size": page_size,
                "client_type": client_type,
                "ref_ent_id": ref_ent_id,
                "upload_flag": upload_flag,
                "produce_batch_no": produce_batch_no,
                "prod_seq_no": prod_seq_no,
                "drug_ent_base_info_id": drug_ent_base_info_id,
                "pkg_spec": pkg_spec
            }
        )

    def alibaba_alihealth_drug_kyt_upinoutfile(
            self,
            bill_code,
            bill_time,
            bill_type,
            physic_type,
            ref_user_id,
            oper_ic_code,
            oper_ic_name,
            client_type,
            agent_ref_user_id='',
            from_user_id='',
            to_user_id='',
            dest_user_id='',
            warehouse_id='',
            drug_id='',
            file_content='',
            upload_file_name='',
            return_reason_code='',
            return_reason_des='',
            cancel_reason_code='',
            cancel_reason_des='',
            executer_name='',
            executer_code='',
            superviser_name='',
            superviser_code=''
    ):
        """
        上传出入库单据(传文件)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41260

        :param bill_code: 单据编码
        :param bill_time: 单据时间
        :param bill_type: 单据类型【102代表采购入库】
        :param physic_type: 药品类型【3普药2特药】
        :param ref_user_id: 上传企业的单位编码
        :param oper_ic_code: 单据提交者（key编号）
        :param oper_ic_name: 单据提交者姓名
        :param client_type: 客户端类型[必须填2]
        :param agent_ref_user_id: 代理企业REF标识
        :param from_user_id: 收货企业entId
        :param to_user_id: 发货企业entId
        :param dest_user_id: 直调企业标识
        :param warehouse_id: 仓号
        :param drug_id: 药品ID
        :param file_content: 文件内容
        :param upload_file_name: 文件名
        :param return_reason_code: 退货原因代码[退货入出库时填写]
        :param return_reason_des: 退货原因描述[退货入出库时填写]
        :param cancel_reason_code: 注销原因代码【销毁出库时填写】
        :param cancel_reason_des: 注销原因描述【销毁出库时填写】
        :param executer_name: 执行人姓名【销毁出库时填写】
        :param executer_code: 执行人证件号【销毁出库时填写】
        :param superviser_name: 监督人姓名【销毁出库时填写】
        :param superviser_code: 监督人证件号【销毁出库时填写】
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.upinoutfile",
            {
                "bill_code": bill_code,
                "bill_time": bill_time,
                "bill_type": bill_type,
                "physic_type": physic_type,
                "ref_user_id": ref_user_id,
                "oper_ic_code": oper_ic_code,
                "oper_ic_name": oper_ic_name,
                "client_type": client_type,
                "agent_ref_user_id": agent_ref_user_id,
                "from_user_id": from_user_id,
                "to_user_id": to_user_id,
                "dest_user_id": dest_user_id,
                "warehouse_id": warehouse_id,
                "drug_id": drug_id,
                "file_content": file_content,
                "upload_file_name": upload_file_name,
                "return_reason_code": return_reason_code,
                "return_reason_des": return_reason_des,
                "cancel_reason_code": cancel_reason_code,
                "cancel_reason_des": cancel_reason_des,
                "executer_name": executer_name,
                "executer_code": executer_code,
                "superviser_name": superviser_name,
                "superviser_code": superviser_code
            }
        )

    def alibaba_alihealth_drug_kyt_upstorebillfile(
            self,
            bill_code,
            bill_time,
            bill_type,
            ref_user_id,
            physic_type='',
            from_user_id='',
            oper_ic_code='',
            oper_ic_name='',
            file_content='',
            upload_file_name='',
            client_type=''
    ):
        """
        上传零售出入库单(上传文件)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41268

        :param bill_code: 单据编号
        :param bill_time: 单据日期
        :param bill_type: 单据类型[321,零售出库][322,疫苗接种]
        :param ref_user_id: 上传企业的单位编码
        :param physic_type: 药品类型[3,普药]
        :param from_user_id: 发货企业(参与人标识，为null时会通过refEntId自动得到)
        :param oper_ic_code: 单据提交者(key编号)
        :param oper_ic_name: 据提交者姓名
        :param file_content: 文件内容
        :param upload_file_name: 文件名
        :param client_type: 客户端类型[暂定都写2]
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.upstorebillfile",
            {
                "bill_code": bill_code,
                "bill_time": bill_time,
                "bill_type": bill_type,
                "ref_user_id": ref_user_id,
                "physic_type": physic_type,
                "from_user_id": from_user_id,
                "oper_ic_code": oper_ic_code,
                "oper_ic_name": oper_ic_name,
                "file_content": file_content,
                "upload_file_name": upload_file_name,
                "client_type": client_type
            }
        )

    def alibaba_alihealth_drug_kyt_drugdetail(
            self,
            ref_ent_id,
            drug_ent_base_info_id
    ):
        """
        查询药品详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41277

        :param ref_ent_id: 企业ID
        :param drug_ent_base_info_id: 药品ID
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.drugdetail",
            {
                "ref_ent_id": ref_ent_id,
                "drug_ent_base_info_id": drug_ent_base_info_id
            }
        )

    def alibaba_alihealth_drug_code_common_list_codeinfo(
            self,
            ref_ent_id,
            search_source,
            code_list,
            auth_ref_ent_id,
            cert_isv_no='',
            invocation='',
            terminal_type='',
            terminal_name='',
            bureau_name='',
            error_message=''
    ):
        """
        通用查询码接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41299

        :param ref_ent_id: 企业refEntId
        :param search_source: 标示医院业务
        :param code_list: 追溯码
        :param auth_ref_ent_id: 验证权限企业id
        :param cert_isv_no: 证件编号
        :param invocation: 调用方式：formal-正式、test-测试
        :param terminal_type: 终端类型 1：零售
        :param terminal_name: 调用零售药店名称
        :param bureau_name: 城市名称
        :param error_message: 错误信息
        """
        return self._top_request(
            "alibaba.alihealth.drug.code.common.list.codeinfo",
            {
                "ref_ent_id": ref_ent_id,
                "search_source": search_source,
                "code_list": code_list,
                "auth_ref_ent_id": auth_ref_ent_id,
                "cert_isv_no": cert_isv_no,
                "invocation": invocation,
                "terminal_type": terminal_type,
                "terminal_name": terminal_name,
                "bureau_name": bureau_name,
                "error_message": error_message
            }
        )

    def alibaba_alihealth_drug_kyt_getcodebaseinfo(
            self,
            code,
            ref_ent_id
    ):
        """
        码的药品信息查询
        提供根据码查询码基本信息接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41305

        :param code: 码
        :param ref_ent_id: 企业唯一标识
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.getcodebaseinfo",
            {
                "code": code,
                "ref_ent_id": ref_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_querydruginfo(
            self,
            code_list,
            wuliu_ref_ent_id='',
            huozhu_ref_ent_id=''
    ):
        """
        码查询药品
        通过追溯码查询药品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41369

        :param code_list: 码列表
        :param wuliu_ref_ent_id: 物流企业refentid
        :param huozhu_ref_ent_id: 生产企业refentid
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.querydruginfo",
            {
                "code_list": code_list,
                "wuliu_ref_ent_id": wuliu_ref_ent_id,
                "huozhu_ref_ent_id": huozhu_ref_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_recordinfo(
            self,
            service_name,
            service_type,
            log_level,
            input_param='',
            other_param=''
    ):
        """
        快易通健康检查
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41370

        :param service_name: 服务名
        :param service_type: 类型
        :param log_level: 级别
        :param input_param: 输入参数
        :param other_param: 其他参数
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.recordinfo",
            {
                "service_name": service_name,
                "service_type": service_type,
                "log_level": log_level,
                "input_param": input_param,
                "other_param": other_param
            }
        )

    def alibaba_alihealth_trace_code_search_get_drugresourcetop(
            self,
            code,
            token,
            query_app_name='',
            client_id='',
            tb_user_id='0',
            device_utdid=''
    ):
        """
        根据码获取码信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41389

        :param code: 追溯码
        :param token: 校验值
        :param query_app_name: 查询app名称
        :param client_id: 客户端ip
        :param tb_user_id: 用户id
        :param device_utdid: 设备号
        """
        return self._top_request(
            "alibaba.alihealth.trace.code.search.get.drugresourcetop",
            {
                "code": code,
                "token": token,
                "query_app_name": query_app_name,
                "client_id": client_id,
                "tb_user_id": tb_user_id,
                "device_utdid": device_utdid
            }
        )

    def alibaba_alihealth_drug_kyt_filedownload(
            self,
            ref_user_id='',
            url='',
            bill_type='',
            bill_queue_id=''
    ):
        """
        处理失败单据下载
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41412

        :param ref_user_id: 企业ID
        :param url: 文件地址
        :param bill_type: 单据类型
        :param bill_queue_id: 单据队列ID
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.filedownload",
            {
                "ref_user_id": ref_user_id,
                "url": url,
                "bill_type": bill_type,
                "bill_queue_id": bill_queue_id
            }
        )

    def alibaba_alihealth_drug_kyt_updatebillinfo(
            self,
            ref_ent_id='',
            ent_id='',
            ic_code='',
            bill_id='',
            bill_type='',
            bill_code='',
            partner_id_send='',
            partner_id_recv='',
            note=''
    ):
        """
        零售端平台单据更新
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41413

        :param ref_ent_id: 企业ID
        :param ent_id: 企业ID
        :param ic_code: 操作人编码
        :param bill_id: 单据ID
        :param bill_type: 单据类型
        :param bill_code: 单据编码
        :param partner_id_send: 发货单位ID
        :param partner_id_recv: 收货单信ID
        :param note: 详情
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.updatebillinfo",
            {
                "ref_ent_id": ref_ent_id,
                "ent_id": ent_id,
                "ic_code": ic_code,
                "bill_id": bill_id,
                "bill_type": bill_type,
                "bill_code": bill_code,
                "partner_id_send": partner_id_send,
                "partner_id_recv": partner_id_recv,
                "note": note
            }
        )

    def alibaba_alihealth_drug_kyt_updatebillcode(
            self,
            ref_ent_id,
            ic_code,
            bill_id,
            bill_type,
            code_list
    ):
        """
        零售修改出入库单追溯码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41414

        :param ref_ent_id: 企业ID
        :param ic_code: 操作人ID
        :param bill_id: 单据ID
        :param bill_type: 单据类型
        :param code_list: 追溯码
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.updatebillcode",
            {
                "ref_ent_id": ref_ent_id,
                "ic_code": ic_code,
                "bill_id": bill_id,
                "bill_type": bill_type,
                "code_list": code_list
            }
        )

    def alibaba_alihealth_drug_kyt_storebilldelete(
            self,
            ref_ent_id,
            ic_code,
            bill_id,
            bill_type
    ):
        """
        零售端单据删除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41415

        :param ref_ent_id: 企业ID
        :param ic_code: 操作人编码
        :param bill_id: 单据ID
        :param bill_type: 单据类型
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.storebilldelete",
            {
                "ref_ent_id": ref_ent_id,
                "ic_code": ic_code,
                "bill_id": bill_id,
                "bill_type": bill_type
            }
        )

    def alibaba_alihealth_drug_kyt_storebilllist(
            self,
            ref_ent_id='',
            start_date='',
            end_date='',
            bill_status='',
            page='',
            page_size=''
    ):
        """
        零售端平台单据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41416

        :param ref_ent_id: 企业ID
        :param start_date: 开始日期
        :param end_date: 结束日期
        :param bill_status: 单据状态(A全部 1上传成功 3处理成功 4处理失败 )
        :param page: 页码
        :param page_size: 页数
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.storebilllist",
            {
                "ref_ent_id": ref_ent_id,
                "start_date": start_date,
                "end_date": end_date,
                "bill_status": bill_status,
                "page": page,
                "page_size": page_size
            }
        )

    def alibaba_alihealth_drug_code_advance_bill_flow_direction(
            self,
            code
    ):
        """
        单据流向查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41425

        :param code: 追溯码
        """
        return self._top_request(
            "alibaba.alihealth.drug.code.advance.bill.flow.direction",
            {
                "code": code
            }
        )

    def alibaba_alihealth_drug_bill_upbill_detail_withcode(
            self,
            ref_ent_id,
            bill_code,
            from_ref_user_id,
            to_ref_user_id
    ):
        """
        查询上游出库单明细(带追溯码信息)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41428

        :param ref_ent_id: 企业id
        :param bill_code: 单据编码
        :param from_ref_user_id: 发货企业renEntId
        :param to_ref_user_id: 收货企业refEntId
        """
        return self._top_request(
            "alibaba.alihealth.drug.bill.upbill.detail.withcode",
            {
                "ref_ent_id": ref_ent_id,
                "bill_code": bill_code,
                "from_ref_user_id": from_ref_user_id,
                "to_ref_user_id": to_ref_user_id
            }
        )

    def alibaba_alihealth_drug_kyt_codetobill(
            self,
            ref_ent_id='',
            code=''
    ):
        """
        通过追溯码查单据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41633

        :param ref_ent_id: 企业ID
        :param code: 追溯码
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.codetobill",
            {
                "ref_ent_id": ref_ent_id,
                "code": code
            }
        )

    def alibaba_alihealth_drug_kyt_uploadinsign(
            self,
            bill_code,
            bill_time,
            ref_user_id,
            trace_codes,
            warehouse_id='',
            drug_id=''
    ):
        """
        仓库批量扫码回传接口
        连锁总部仓库在采购入库或者销售出库环节，批量采集追溯码之后回传到码上放心平台。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41653

        :param bill_code: 单据编号（小于20位字符串，唯一）
        :param bill_time: 单据生成时间
        :param ref_user_id: 码上放心平台企业编码（仓库所有者）
        :param trace_codes: 追溯码[多个时用逗号分开]
        :param warehouse_id: 仓库名称（企业自定义）
        :param drug_id: 药品ID
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.uploadinsign",
            {
                "bill_code": bill_code,
                "bill_time": bill_time,
                "ref_user_id": ref_user_id,
                "trace_codes": trace_codes,
                "warehouse_id": warehouse_id,
                "drug_id": drug_id
            }
        )

    def alibaba_alihealth_drug_code_code_check_hospital(
            self,
            auth_ref_ent_id,
            ref_ent_id,
            c_type,
            codes,
            bureau_name='',
            terminal_name='',
            terminal_type=''
    ):
        """
        码核查状态同步-医院
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41666

        :param auth_ref_ent_id: 认证企业refEntId
        :param ref_ent_id: 企业refEntId
        :param c_type: 核销类型
        :param codes: 码列表
        :param bureau_name: 城市名
        :param terminal_name: 终端名称
        :param terminal_type: 终端类型
        """
        return self._top_request(
            "alibaba.alihealth.drug.code.code.check.hospital",
            {
                "auth_ref_ent_id": auth_ref_ent_id,
                "ref_ent_id": ref_ent_id,
                "c_type": c_type,
                "codes": codes,
                "bureau_name": bureau_name,
                "terminal_name": terminal_name,
                "terminal_type": terminal_type
            }
        )

    def alibaba_alihealth_drug_code_list_code_alkali(
            self,
            code_list,
            cert_isv_no='',
            invocation='',
            terminal_type='',
            terminal_name='',
            bureau_name='',
            error_message=''
    ):
        """
        根据码查询码信息-黄麻碱
        服务描述
        黄麻碱鉴证核查是基于在两定机构的药品管理（入库、出库或盘点）环节，增加扫码匹配
        与验证鉴核流程；
        此接口，针对有码药品，提供可通过追溯码获取该药品的基础信息和生产状况信息；
        若所传的监管码是非最小包装监管码，且存在药品混包的情况，则此接口不支持。这种
        情况下，需要分多次调用该接口。
        核查平台优先过滤非8开头的，长度非20位数字的码信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41722

        :param code_list: 追溯码
        :param cert_isv_no: 证件编号
        :param invocation: 调用方式：formal-正式、test-测试
        :param terminal_type: 终端类型 1：零售
        :param terminal_name: 调用零售药店名称
        :param bureau_name: 城市名称
        :param error_message: 错误信息
        """
        return self._top_request(
            "alibaba.alihealth.drug.code.list.code.alkali",
            {
                "code_list": code_list,
                "cert_isv_no": cert_isv_no,
                "invocation": invocation,
                "terminal_type": terminal_type,
                "terminal_name": terminal_name,
                "bureau_name": bureau_name,
                "error_message": error_message
            }
        )

    def alibaba_alihealth_drug_code_list_code_medical_insurance(
            self,
            code_list,
            cert_isv_no,
            invocation,
            terminal_type,
            bureau_id,
            terminal_ent_id,
            terminal_name=''
    ):
        """
        根据码获取码信息接口-医保
        服务描述
        医保鉴证核查是基于在两定机构的药品管理（入库、出库或盘点）环节，增加扫码匹配
        与验证鉴核流程；
        此接口，针对有码药品，提供可通过追溯码获取该药品的基础信息和生产状况信息；
        若所传的监管码是非最小包装监管码，且存在药品混包的情况，则此接口不支持。这种
        情况下，需要分多次调用该接口。
        核查平台优先过滤非8开头的，长度非20位数字的码信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41723

        :param code_list: 追溯码
        :param cert_isv_no: ISV开放平台帐号标识
        :param invocation: 调用方式：formal-正式、test-测试
        :param terminal_type: 终端类型 1005100-零售药店 ；10052-医疗机构
        :param bureau_id: 门店所属的行政区域ID
        :param terminal_ent_id: 零售终端id
        :param terminal_name: 调用零售药店名称
        """
        return self._top_request(
            "alibaba.alihealth.drug.code.list.code.medical.insurance",
            {
                "code_list": code_list,
                "cert_isv_no": cert_isv_no,
                "invocation": invocation,
                "terminal_type": terminal_type,
                "bureau_id": bureau_id,
                "terminal_ent_id": terminal_ent_id,
                "terminal_name": terminal_name
            }
        )

    def alibaba_alihealth_drug_code_code_check_medical_insurance(
            self,
            terminal_id,
            terminal_type,
            c_type,
            codes,
            terminal_ent_id,
            bureau_name=''
    ):
        """
        码核查状态同步-医保
        服务描述
        核查平台在进行医保单据鉴证核查时，会记录单据中所有提交的追溯码信息；单据中的
        追溯码包含所有正常和异常的数据；
        此接口，针对正式鉴核的单据中提交的有效的、正常状态的追溯码，提供可由核查平台
        发起，按单据鉴核时间顺序组织，向码上放心平台同步每笔单据核销的码状态信息；
        入参采用数组方式提供，一次同步最多支持100条记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41724

        :param terminal_id: 终端id
        :param terminal_type: 终端类型（1005100-零售药店；1005200-医疗机构）
        :param c_type: 核销类型(1012100：核销；1012900：退库)
        :param codes: 码列表
        :param terminal_ent_id: 平台返回的终端id
        :param bureau_name: 行政区域
        """
        return self._top_request(
            "alibaba.alihealth.drug.code.code.check.medical.insurance",
            {
                "terminal_id": terminal_id,
                "terminal_type": terminal_type,
                "c_type": c_type,
                "codes": codes,
                "terminal_ent_id": terminal_ent_id,
                "bureau_name": bureau_name
            }
        )

    def alibaba_alihealth_drug_kyt_getentinfo(
            self,
            ent_name
    ):
        """
        根据企业名称查询企业唯一标识【ref_ent_id】和企业ID【ent_id】
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41800

        :param ent_name: 公司名称
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.getentinfo",
            {
                "ent_name": ent_name
            }
        )

    def alibaba_alihealth_drug_kyt_idgenerate(
            self,
            region_code,
            terminal_name
    ):
        """
        终端(医疗机构|零售药店)ID生成接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41920

        :param region_code: 行政区（省市区）
        :param terminal_name: 零售药店、医疗机构名称
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.idgenerate",
            {
                "region_code": region_code,
                "terminal_name": terminal_name
            }
        )

    def alibaba_alihealth_tracecodeseller_product_attr_search(
            self,
            ent_info_id,
            trac_user_product_info_id
    ):
        """
        根据商品id获取商品属性
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41975

        :param ent_info_id: 企业id
        :param trac_user_product_info_id: 货品id
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.product.attr.search",
            {
                "ent_info_id": ent_info_id,
                "trac_user_product_info_id": trac_user_product_info_id
            }
        )

    def alibaba_alihealth_drug_code_list_code_supervise(
            self,
            code_list,
            cert_isv_no,
            invocation,
            terminal_type,
            bureau_id,
            terminal_ent_id,
            terminal_name=''
    ):
        """
        根据码获取码信息-监管
        服务描述
        医保鉴证核查是基于在两定机构的药品管理（入库、出库或盘点）环节，增加扫码匹配
        与验证鉴核流程；
        此接口，针对有码药品，提供可通过追溯码获取该药品的基础信息和生产状况信息；
        若所传的监管码是非最小包装监管码，且存在药品混包的情况，则此接口不支持。这种
        情况下，需要分多次调用该接口。
        核查平台优先过滤非8开头的，长度非20位数字的码信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42086

        :param code_list: 追溯码
        :param cert_isv_no: ISV开放平台帐号标识
        :param invocation: 调用方式：formal-正式、test-测试
        :param terminal_type: 终端类型 1005100-零售药店 ；10052-医疗机构
        :param bureau_id: 门店所属的行政区域ID
        :param terminal_ent_id: 零售终端id
        :param terminal_name: 调用零售药店名称
        """
        return self._top_request(
            "alibaba.alihealth.drug.code.list.code.supervise",
            {
                "code_list": code_list,
                "cert_isv_no": cert_isv_no,
                "invocation": invocation,
                "terminal_type": terminal_type,
                "bureau_id": bureau_id,
                "terminal_ent_id": terminal_ent_id,
                "terminal_name": terminal_name
            }
        )

    def alibaba_alihealth_tracecodeseller_milk_trace_tosource_add_data(
            self,
            ent_id,
            json_str
    ):
        """
        奶粉溯源-同步数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42124

        :param ent_id: 奶粉品牌ID
        :param json_str: 奶粉数据
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.milk.trace.tosource.add.data",
            {
                "ent_id": ent_id,
                "json_str": json_str
            }
        )

    def alibaba_alihealth_drug_kyt_searchbill(
            self,
            ref_ent_id,
            auth_ref_user_id,
            begin_date,
            end_date,
            cur_page,
            page_size,
            bill_type,
            partner_id_send='',
            partner_id_recv='',
            agent_ref_user_id='',
            bill_code=''
    ):
        """
        通过时间段批量查询入出库单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42429

        :param ref_ent_id: 企业标识
        :param auth_ref_user_id: 货主
        :param begin_date: 开始日期
        :param end_date: 结束日期
        :param cur_page: 当前页
        :param page_size: 页大小
        :param bill_type: 单据类型  A : 所有  AI :入库    AO:出库
        :param partner_id_send: 发货企业
        :param partner_id_recv: 收货企业
        :param agent_ref_user_id: 代理企业
        :param bill_code: 单据号码
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.searchbill",
            {
                "ref_ent_id": ref_ent_id,
                "auth_ref_user_id": auth_ref_user_id,
                "begin_date": begin_date,
                "end_date": end_date,
                "cur_page": cur_page,
                "page_size": page_size,
                "bill_type": bill_type,
                "partner_id_send": partner_id_send,
                "partner_id_recv": partner_id_recv,
                "agent_ref_user_id": agent_ref_user_id,
                "bill_code": bill_code
            }
        )

    def alibaba_alihealth_drug_kyt_druploadretail(
            self,
            bill_code,
            bill_time,
            bill_type,
            ref_user_id,
            trace_codes,
            physic_type='3',
            from_user_id='',
            oper_ic_code='',
            oper_ic_name='',
            customer_id_type='',
            customer_id=''
    ):
        """
        快易通多融零售上传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42479

        :param bill_code: 单据编号（唯一）
        :param bill_time: 单据生成时间（一般写当前时间）
        :param bill_type: 单据类型[321,零售出库][322,疫苗接种]
        :param ref_user_id: 码上放心平台企业唯一编码（门店或医疗机构）
        :param trace_codes: 20位追溯码（多个时用半角逗号分隔）
        :param physic_type: 药品类型[2,特药，3,普药]
        :param from_user_id: 发货企业(可为空)
        :param oper_ic_code: 单据提交者(appkey编号)
        :param oper_ic_name: 单据提交者姓名(可为空)
        :param customer_id_type: 购买人证件类型【1身份证2护照3 军官证4 医保卡5接种卡6学生证9其它】
        :param customer_id: 购买人证件编号
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.druploadretail",
            {
                "bill_code": bill_code,
                "bill_time": bill_time,
                "bill_type": bill_type,
                "ref_user_id": ref_user_id,
                "trace_codes": trace_codes,
                "physic_type": physic_type,
                "from_user_id": from_user_id,
                "oper_ic_code": oper_ic_code,
                "oper_ic_name": oper_ic_name,
                "customer_id_type": customer_id_type,
                "customer_id": customer_id
            }
        )

    def alibaba_alihealth_drug_kyt_query_druginfo_from_billcode(
            self,
            bill_code,
            ref_ent_id
    ):
        """
        根据单据编号查询单据明细
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42514

        :param bill_code: 单据号
        :param ref_ent_id: 企业id
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.query.druginfo.from.billcode",
            {
                "bill_code": bill_code,
                "ref_ent_id": ref_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_query_code_relation_from_billcode(
            self,
            bill_code,
            ref_ent_id
    ):
        """
        根据单据号码查询码单据详情和码信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42540

        :param bill_code: 单据号码
        :param ref_ent_id: 企业refEntId
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.query.code.relation.from.billcode",
            {
                "bill_code": bill_code,
                "ref_ent_id": ref_ent_id
            }
        )

    def alibaba_alihealth_trace_policy_add(
            self,
            policy_record_info_d_o=None
    ):
        """
        保单记录信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42577

        :param policy_record_info_d_o: 入参
        """
        return self._top_request(
            "alibaba.alihealth.trace.policy.add",
            {
                "policy_record_info_d_o": policy_record_info_d_o
            }
        )

    def alibaba_alihealth_drug_kyt_dr_singlerelation(
            self,
            code,
            ref_ent_id,
            des_ref_ent_id
    ):
        """
        多融单码查贸易
        单码关联关系查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42648

        :param code: 追溯码
        :param ref_ent_id: 接口调用企业的唯一标识（接口调用者）
        :param des_ref_ent_id: 目标企业唯一标识（为哪个企业查询，一般与入参ref_ent_id一样）
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.singlerelation",
            {
                "code": code,
                "ref_ent_id": ref_ent_id,
                "des_ref_ent_id": des_ref_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_querycodeactive(
            self,
            ref_ent_id,
            codes
    ):
        """
        查询码是否激活
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42834

        :param ref_ent_id: 企业
        :param codes: 码
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.querycodeactive",
            {
                "ref_ent_id": ref_ent_id,
                "codes": codes
            }
        )

    def alibaba_alihealth_drug_kyt_dr_uploadinoutbill(
            self,
            bill_code,
            bill_time,
            bill_type,
            physic_type,
            ref_user_id,
            from_user_id,
            to_user_id,
            oper_ic_code,
            oper_ic_name,
            client_type,
            trace_codes,
            agent_ref_user_id='',
            dest_user_id='',
            return_reason_code='',
            return_reason_des='',
            cancel_reason_code='',
            cancel_reason_des='',
            executer_name='',
            executer_code='',
            superviser_name='',
            superviser_code='',
            warehouse_id='',
            drug_id=''
    ):
        """
        疫苗企业出入库上传
        零售企业上传出入库信息，包括采购入库（102），退货入库（103），供应入库（107）,退货出库（202），销毁出库（205），抽检出库（206）， 供应出库（209）,
        不包括对个人的零售出库，疫苗接种，领药出库。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42909

        :param bill_code: 单据编码
        :param bill_time: 单据时间
        :param bill_type: 单据类型【102代表采购入库】
        :param physic_type: 药品类型【3普药2特药】
        :param ref_user_id: 上传企业的单位编码
        :param from_user_id: 发货企业entId
        :param to_user_id: 收货企业entId
        :param oper_ic_code: 单据提交者（appkey编号）
        :param oper_ic_name: 单据提交者姓名
        :param client_type: 客户端类型[必须填2]
        :param trace_codes: 追溯码[多个时用逗号分开]
        :param agent_ref_user_id: 代理企业REF标识
        :param dest_user_id: 直调企业标识
        :param return_reason_code: 退货原因代码[退货入出库时填写]
        :param return_reason_des: 退货原因描述[退货入出库时填写]
        :param cancel_reason_code: 注销原因代码【销毁出库时填写】
        :param cancel_reason_des: 注销原因描述【销毁出库时填写】
        :param executer_name: 执行人姓名【销毁出库时填写】
        :param executer_code: 执行人证件号【销毁出库时填写】
        :param superviser_name: 监督人姓名【销毁出库时填写】
        :param superviser_code: 监督人证件号【销毁出库时填写】
        :param warehouse_id: 仓号
        :param drug_id: 药品ID[企业自已系统的药品ID]
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.uploadinoutbill",
            {
                "bill_code": bill_code,
                "bill_time": bill_time,
                "bill_type": bill_type,
                "physic_type": physic_type,
                "ref_user_id": ref_user_id,
                "from_user_id": from_user_id,
                "to_user_id": to_user_id,
                "oper_ic_code": oper_ic_code,
                "oper_ic_name": oper_ic_name,
                "client_type": client_type,
                "trace_codes": trace_codes,
                "agent_ref_user_id": agent_ref_user_id,
                "dest_user_id": dest_user_id,
                "return_reason_code": return_reason_code,
                "return_reason_des": return_reason_des,
                "cancel_reason_code": cancel_reason_code,
                "cancel_reason_des": cancel_reason_des,
                "executer_name": executer_name,
                "executer_code": executer_code,
                "superviser_name": superviser_name,
                "superviser_code": superviser_code,
                "warehouse_id": warehouse_id,
                "drug_id": drug_id
            }
        )

    def alibaba_alihealth_drug_kyt_dr_searchstatus(
            self,
            ref_ent_id,
            begin_date,
            end_date,
            bill_type,
            page_size,
            page,
            bill_code='',
            drug_type='',
            deal_status='',
            from_user_id='',
            to_user_id='',
            agent_ref_user_id=''
    ):
        """
        疫苗企业上传单据后处理状态查询
        单据处理状态查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42910

        :param ref_ent_id: 企业ID
        :param begin_date: 开始日期
        :param end_date: 结束日期
        :param bill_type: 单据类型 A：全部 AI：全部入库 AO：全部出库
        :param page_size: 页大小
        :param page: 页码
        :param bill_code: 单据号
        :param drug_type: 药品类型
        :param deal_status: 状态  1, 上传成功     3, 处理成功     4, 处理失败
        :param from_user_id: 发货商
        :param to_user_id: 收货商
        :param agent_ref_user_id: 代理商
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.searchstatus",
            {
                "ref_ent_id": ref_ent_id,
                "begin_date": begin_date,
                "end_date": end_date,
                "bill_type": bill_type,
                "page_size": page_size,
                "page": page,
                "bill_code": bill_code,
                "drug_type": drug_type,
                "deal_status": deal_status,
                "from_user_id": from_user_id,
                "to_user_id": to_user_id,
                "agent_ref_user_id": agent_ref_user_id
            }
        )

    def alibaba_alihealth_drug_kyt_dr_getbyentid(
            self,
            ref_ent_id,
            ent_id
    ):
        """
        多融通过企业ID得到一个企业的详细信息
        根据企业主键查看企业详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42911

        :param ref_ent_id: 接口调用企业的唯一标识（接口调用者）
        :param ent_id: 准备要查询的企业ID（返回该企业ID的详细信息）
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.getbyentid",
            {
                "ref_ent_id": ref_ent_id,
                "ent_id": ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_dr_getbyrefentid(
            self,
            ref_ent_id,
            dest_ref_ent_id
    ):
        """
        多融通过一个企业唯一标识查询企业详细信息
        根据企业唯一标识查看企业详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42912

        :param ref_ent_id: 接口调用企业的唯一标识（接口调用者）
        :param dest_ref_ent_id: 准备要查询的企业唯一标识（返回该唯一标识企业的详细信息）
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.getbyrefentid",
            {
                "ref_ent_id": ref_ent_id,
                "dest_ref_ent_id": dest_ref_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_dr_getentinfo(
            self,
            ent_name
    ):
        """
        通过企业名得到唯一标识（ref_ent_id）及企业ID(ent_id)
        根据企业名称查询ID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42916

        :param ent_name: 公司名称(全称)
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.getentinfo",
            {
                "ent_name": ent_name
            }
        )

    def alibaba_alihealth_drug_kyt_dr_listparts(
            self,
            ref_ent_id,
            page_size,
            page,
            ent_name='',
            ref_partner_id='',
            begin_date='',
            end_date=''
    ):
        """
        多融查询一个企业的往来单位
        查询往来单位列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42922

        :param ref_ent_id: 企业ID
        :param page_size: 页大小
        :param page: 页码
        :param ent_name: 企业名称
        :param ref_partner_id: 企业自定义编号
        :param begin_date: 开始时间
        :param end_date: 结束时间
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.listparts",
            {
                "ref_ent_id": ref_ent_id,
                "page_size": page_size,
                "page": page,
                "ent_name": ent_name,
                "ref_partner_id": ref_partner_id,
                "begin_date": begin_date,
                "end_date": end_date
            }
        )

    def alibaba_alihealth_drug_code_kyt_dr_querycode(
            self,
            ref_ent_id,
            codes
    ):
        """
        多融根据码查询码信息
        服务描述
        此接口，针对有码药品，提供可通过追溯码获取该药品的基础信息和生产状况信息。
        核查平台优先过滤非8开头的，长度非20位数字的码信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43000

        :param ref_ent_id: 企业唯一标识（或appkey）
        :param codes: 码列表
        """
        return self._top_request(
            "alibaba.alihealth.drug.code.kyt.dr.querycode",
            {
                "ref_ent_id": ref_ent_id,
                "codes": codes
            }
        )

    def alibaba_alihealth_drug_scan_querycode(
            self,
            code,
            webchat_id,
            scan_time,
            province_code='',
            city_code='',
            area_code=''
    ):
        """
        查询药监码对应的有效期和包装规格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43192

        :param code: 溯源码
        :param webchat_id: 用户标识id
        :param scan_time: 扫码日期
        :param province_code: 省编码
        :param city_code: 市编码
        :param area_code: 区编码
        """
        return self._top_request(
            "alibaba.alihealth.drug.scan.querycode",
            {
                "code": code,
                "webchat_id": webchat_id,
                "scan_time": scan_time,
                "province_code": province_code,
                "city_code": city_code,
                "area_code": area_code
            }
        )

    def alibaba_alihealth_drug_code_kyt_querycode(
            self,
            ref_ent_id,
            codes
    ):
        """
        查询追溯码对应的药品信息
        服务描述
        此接口，针对有码药品，提供可通过追溯码获取该药品的基础信息和生产状况信息；
        若所传的监管码是非最小包装监管码，且存在药品混包的情况，则此接口不支持。这种
        情况下，需要分多次调用该接口。
        核查平台优先过滤非8开头的，长度非20位数字的码信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43232

        :param ref_ent_id: 企业id
        :param codes: 码列表
        """
        return self._top_request(
            "alibaba.alihealth.drug.code.kyt.querycode",
            {
                "ref_ent_id": ref_ent_id,
                "codes": codes
            }
        )

    def alibaba_alihealth_drug_kyt_dr_billcheck(
            self,
            bill_code,
            bill_type,
            ower_ref_ent_id,
            ref_ent_id=''
    ):
        """
        疫苗追溯验证
        各级疾控在入库完成后，需要做追溯信息验证
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43310

        :param bill_code: 单据编号
        :param bill_type: 单据类型
        :param ower_ref_ent_id: 单据企业refEntId
        :param ref_ent_id: 调用企业ID
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.billcheck",
            {
                "bill_code": bill_code,
                "bill_type": bill_type,
                "ower_ref_ent_id": ower_ref_ent_id,
                "ref_ent_id": ref_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_dr_drugrecal(
            self,
            recall_begin_time,
            recall_end_time,
            ref_ent_id=''
    ):
        """
        疫苗药品召回
        生产企业发布的召回信息，按照批次进行召回，收货和发货环节的单据处理中调用接口进行查询；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43313

        :param recall_begin_time: 召回开始时间
        :param recall_end_time: 召回结束时间
        :param ref_ent_id: 调用企业ID
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.drugrecal",
            {
                "recall_begin_time": recall_begin_time,
                "recall_end_time": recall_end_time,
                "ref_ent_id": ref_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_dr_getproteminfo(
            self,
            drug_ent_base_info_id,
            batch_no,
            bill_out_code,
            ref_ent_id=''
    ):
        """
        疫苗，获取生产企业的存储和运输温度
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43415

        :param drug_ent_base_info_id: 药品ID
        :param batch_no: 批次编号
        :param bill_out_code: 出库单号
        :param ref_ent_id: 调用企业ID
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.getproteminfo",
            {
                "drug_ent_base_info_id": drug_ent_base_info_id,
                "batch_no": batch_no,
                "bill_out_code": bill_out_code,
                "ref_ent_id": ref_ent_id
            }
        )

    def alibaba_alihealth_drug_kyt_dr_transportupload(
            self,
            ref_ent_id,
            bill_code,
            transport_ref_ent_name,
            equipment_code,
            content,
            transport_ref_ent_id='',
            equipment_name=''
    ):
        """
        疫苗运输温度上传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43416

        :param ref_ent_id: 企业RefEntId
        :param bill_code: 单据编号
        :param transport_ref_ent_name: 运输企业名称
        :param equipment_code: 设备编号
        :param content: 温度信息
        :param transport_ref_ent_id: 运输企业RefEntId
        :param equipment_name: 设备名称
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.transportupload",
            {
                "ref_ent_id": ref_ent_id,
                "bill_code": bill_code,
                "transport_ref_ent_name": transport_ref_ent_name,
                "equipment_code": equipment_code,
                "content": content,
                "transport_ref_ent_id": transport_ref_ent_id,
                "equipment_name": equipment_name
            }
        )

    def alibaba_alihealth_drug_kyt_dr_storageupload(
            self,
            ref_ent_id,
            equipment_code,
            content,
            equipment_name=''
    ):
        """
        疫苗存储温度上传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43417

        :param ref_ent_id: 企业RefEntId
        :param equipment_code: 设备编号
        :param content: 温度信息
        :param equipment_name: 设备名称
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.storageupload",
            {
                "ref_ent_id": ref_ent_id,
                "equipment_code": equipment_code,
                "content": content,
                "equipment_name": equipment_name
            }
        )

    def alibaba_alihealth_drug_kyt_dr_associateequi(
            self,
            ref_ent_id,
            bill_codes,
            va_equipment_id
    ):
        """
        疫苗单据与设备绑定
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43441

        :param ref_ent_id: 企业refentid
        :param bill_codes: 单据编号，多个用逗号分隔
        :param va_equipment_id: 设备ID
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.dr.associateequi",
            {
                "ref_ent_id": ref_ent_id,
                "bill_codes": bill_codes,
                "va_equipment_id": va_equipment_id
            }
        )

    def alibaba_alihealth_drug_kyt_getentlicense(
            self,
            ref_ent_id
    ):
        """
        获取企业资质
        获取企业的资质信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43660

        :param ref_ent_id: 企业ID
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.getentlicense",
            {
                "ref_ent_id": ref_ent_id
            },
            result_processor=lambda x: x["model_list"]
        )

    def alibaba_alihealth_drug_kyt_getdruglicense(
            self,
            ref_ent_id,
            drug_id
    ):
        """
        获取药品资质信息
        获取药品的资质信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43686

        :param ref_ent_id: 企业ID
        :param drug_id: 药品ID
        """
        return self._top_request(
            "alibaba.alihealth.drug.kyt.getdruglicense",
            {
                "ref_ent_id": ref_ent_id,
                "drug_id": drug_id
            },
            result_processor=lambda x: x["model_list"]
        )

    def alibaba_alihealth_drug_download_getentauthent(
            self,
            auth_begin_date='',
            auth_end_date=''
    ):
        """
        获取授权企业列表
        D2D数据落地获取授权企业列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44037

        :param auth_begin_date: 授权开始时间
        :param auth_end_date: 授权结束时间
        """
        return self._top_request(
            "alibaba.alihealth.drug.download.getentauthent",
            {
                "auth_begin_date": auth_begin_date,
                "auth_end_date": auth_end_date
            }
        )


class TbHuiYuanZhongXin(DingTalkBaseAPI):
    """
    会员中心API
    """

    def alibaba_interact_vip_get(
            self
    ):
        """
        会员淘气值获取
        提供用户淘气值&用户角色身份查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29108

        """
        return self._top_request(
            "alibaba.interact.vip.get"
        )


class TbALiJianKangHuiYuanGuanLi(DingTalkBaseAPI):
    """
    阿里健康-会员管理
    """

    def alibaba_alihealth_baby_baseinfo_feed(
            self,
            baby_id,
            feed_id,
            event_type,
            operation_type,
            data='',
            record_date=''
    ):
        """
        宝宝喂养接口
        同步宝宝喂养记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29412

        :param baby_id: 宝宝id
        :param feed_id: 喂养记录id
        :param event_type: 事件类型 103-臭臭 104-喂奶 105-睡眠 109-辅食
        :param operation_type: 操作类型 0-删除1-新增 2-修改
        :param data: 操作数据
        :param record_date: 记录时间
        """
        return self._top_request(
            "alibaba.alihealth.baby.baseinfo.feed",
            {
                "baby_id": baby_id,
                "feed_id": feed_id,
                "event_type": event_type,
                "operation_type": operation_type,
                "data": data,
                "record_date": record_date
            }
        )

    def alibaba_alihealth_baby_baseinfo_get(
            self,
            baby_id,
            tp_user_id='0'
    ):
        """
        三方从我们这获取宝宝信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29413

        :param baby_id: 宝宝id
        :param tp_user_id: 宝宝所属的用户
        """
        return self._top_request(
            "alibaba.alihealth.baby.baseinfo.get",
            {
                "baby_id": baby_id,
                "tp_user_id": tp_user_id
            }
        )

    def alibaba_alihealth_baby_health_remind(
            self,
            baby_id,
            remind_id,
            title,
            content,
            detail_url,
            record_date
    ):
        """
        宝宝健康提醒
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29429

        :param baby_id: 宝宝id
        :param remind_id: 提醒id
        :param title: 标题
        :param content: 内容
        :param detail_url: 链接地址
        :param record_date: 提醒时间
        """
        return self._top_request(
            "alibaba.alihealth.baby.health.remind",
            {
                "baby_id": baby_id,
                "remind_id": remind_id,
                "title": title,
                "content": content,
                "detail_url": detail_url,
                "record_date": record_date
            }
        )

    def alibaba_alihealth_baby_food_config(
            self,
            food_id,
            food_name
    ):
        """
        宝宝辅食基础数据维护
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29431

        :param food_id: 辅食id
        :param food_name: 辅食名称
        """
        return self._top_request(
            "alibaba.alihealth.baby.food.config",
            {
                "food_id": food_id,
                "food_name": food_name
            }
        )

    def alibaba_alihealth_baby_remind_flag(
            self,
            baby_id,
            remind_flag
    ):
        """
        宝宝发育评测提醒开关接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        同步宝宝发育评测提醒开关
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29491

        :param baby_id: 宝宝id
        :param remind_flag: 提醒开关 0-关 1-开
        """
        return self._top_request(
            "alibaba.alihealth.baby.remind.flag",
            {
                "baby_id": baby_id,
                "remind_flag": remind_flag
            }
        )

    def alibaba_alihealth_pregnancy_posts_data(
            self,
            user_id,
            event_type,
            main_id,
            title,
            content,
            date,
            reply_id='',
            pic_url=''
    ):
        """
        发回帖子信息同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29912

        :param user_id: 用户id
        :param event_type: 事件类型 0发帖 1回帖
        :param main_id: 主贴id
        :param title: 标题
        :param content: 内容
        :param date: 发帖时间
        :param reply_id: 回帖id
        :param pic_url: 图片url
        """
        return self._top_request(
            "alibaba.alihealth.pregnancy.posts.data",
            {
                "user_id": user_id,
                "event_type": event_type,
                "main_id": main_id,
                "title": title,
                "content": content,
                "date": date,
                "reply_id": reply_id,
                "pic_url": pic_url
            }
        )

    def alibaba_alihealth_pregnancy_remind_set(
            self,
            user_id,
            event_type,
            flag,
            time='08:00'
    ):
        """
        设置取消提醒
        设置、取消五类数据（5经期 1体温 2排卵 3 B超 4同房）提醒
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29914

        :param user_id: 用户id
        :param event_type: 5经期 1体温 2排卵 3 B超 4同房
        :param flag: 0关闭 1开启
        :param time: 推送时间 24小时制
        """
        return self._top_request(
            "alibaba.alihealth.pregnancy.remind.set",
            {
                "user_id": user_id,
                "event_type": event_type,
                "flag": flag,
                "time": time
            }
        )

    def alibaba_alihealth_pregnancy_baseinfo_get(
            self,
            user_id
    ):
        """
        拉取备孕初始化信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29915

        :param user_id: 用户id
        """
        return self._top_request(
            "alibaba.alihealth.pregnancy.baseinfo.get",
            {
                "user_id": user_id
            }
        )

    def alibaba_alihealth_pregnancy_data_sync(
            self,
            user_id,
            outer_id,
            event_type,
            measure_date,
            operation_type,
            period_msg,
            data=''
    ):
        """
        四类数据同步
        经期调整；基础体温；排卵试纸；B超测排数据同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29916

        :param user_id: 用户id
        :param outer_id: 三方id
        :param event_type: 4经期调整；1基础体温；2排卵试纸；3 B超测排
        :param measure_date: 测量日期
        :param operation_type: 0-新增 1-修改 2-删除
        :param period_msg: 经期数据json串
        :param data: 四类数据定制化详情
        """
        return self._top_request(
            "alibaba.alihealth.pregnancy.data.sync",
            {
                "user_id": user_id,
                "outer_id": outer_id,
                "event_type": event_type,
                "measure_date": measure_date,
                "operation_type": operation_type,
                "period_msg": period_msg,
                "data": data
            }
        )

    def alibaba_alihealth_pregnancy_product_get(
            self,
            scene_id,
            current_page,
            page_size
    ):
        """
        备孕首页获取达人配置商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29994

        :param scene_id: tab页对应id
        :param current_page: 起始页码，大于0
        :param page_size: 每页条数
        """
        return self._top_request(
            "alibaba.alihealth.pregnancy.product.get",
            {
                "scene_id": scene_id,
                "current_page": current_page,
                "page_size": page_size
            }
        )

    def alibaba_alihealth_pregnancy_navigateinfo_query(
            self,
            user_id
    ):
        """
        查询底导数据
        备孕管理--获取底部导航信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30294

        :param user_id: 用户id
        """
        return self._top_request(
            "alibaba.alihealth.pregnancy.navigateinfo.query",
            {
                "user_id": user_id
            }
        )

    def alibaba_alihealth_pregnancy_taginfo_addrank(
            self,
            user_id,
            tag_code
    ):
        """
        点击标签后排序接口
        备孕管理--点击标签后排序接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30295

        :param user_id: 用户id
        :param tag_code: 标签编码，例如备孕标签为5122
        """
        return self._top_request(
            "alibaba.alihealth.pregnancy.taginfo.addrank",
            {
                "user_id": user_id,
                "tag_code": tag_code
            }
        )

    def alibaba_alihealth_user_baseinfo_get(
            self,
            user_id,
            app_name
    ):
        """
        获取用户基础信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30458

        :param user_id: 用户id
        :param app_name: 三方服务商
        """
        return self._top_request(
            "alibaba.alihealth.user.baseinfo.get",
            {
                "user_id": user_id,
                "app_name": app_name
            }
        )

    def alibaba_alihealth_step_policy_sync(
            self,
            user_id,
            policy_id,
            policy_no,
            app_name='',
            holder_name='',
            holder_identity='',
            holder_phone='',
            holder_certi_type='',
            policy_start_time='',
            policy_end_time='',
            origin_sum='',
            origin_premium='-1',
            is_free='0',
            free_days='0',
            policy_type='0'
    ):
        """
        保单的信息回传接口
        三方将保单的信息回传给健康
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30491

        :param user_id: 用户id
        :param policy_id: 保单唯一id
        :param policy_no: 保单no
        :param app_name: 给三方分配的应用名
        :param holder_name: 投保人姓名
        :param holder_identity: 投保人身份证号
        :param holder_phone: 投保人手机号
        :param holder_certi_type: （证件类型）身份证：I；护照号：P
        :param policy_start_time: 保单生效日期，格式yyyy-MM-dd
        :param policy_end_time: 保单失效日期，格式yyyy-MM-dd
        :param origin_sum: 实际保额
        :param origin_premium: 实际保费
        :param is_free: 0：否，1：是
        :param free_days: 免费天数
        :param policy_type: 保单类型0步步保1重疾
        """
        return self._top_request(
            "alibaba.alihealth.step.policy.sync",
            {
                "user_id": user_id,
                "policy_id": policy_id,
                "policy_no": policy_no,
                "app_name": app_name,
                "holder_name": holder_name,
                "holder_identity": holder_identity,
                "holder_phone": holder_phone,
                "holder_certi_type": holder_certi_type,
                "policy_start_time": policy_start_time,
                "policy_end_time": policy_end_time,
                "origin_sum": origin_sum,
                "origin_premium": origin_premium,
                "is_free": is_free,
                "free_days": free_days,
                "policy_type": policy_type
            }
        )

    def alibaba_fmhealth_weight_lossplan_synclossplan(
            self,
            tp_user_id,
            gender,
            birthday,
            height,
            weight,
            type,
            body_age,
            loss_level,
            total_calorie,
            begin_date,
            finish_date='',
            loss_per_week='0',
            weight_goal='0'
    ):
        """
        减重计划--同步减重计划
        减重计划--三方同步用户初始化减重计划给我们
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32381

        :param tp_user_id: 用户id
        :param gender: 性别0女 1男
        :param birthday: 生日
        :param height: 身高170 即一米七
        :param weight: 当前体重（今天的体重），单位kg
        :param type: 0创建减肥计划调用；1修改调用；
        :param body_age: 体年龄
        :param loss_level: 减重类型0保持 1减肥
        :param total_calorie: 每日可以摄入的标准总量
        :param begin_date: 减重计划开始时间
        :param finish_date: 完成时间
        :param loss_per_week: 每周减重
        :param weight_goal: 目标体重
        """
        return self._top_request(
            "alibaba.fmhealth.weight.lossplan.synclossplan",
            {
                "tp_user_id": tp_user_id,
                "gender": gender,
                "birthday": birthday,
                "height": height,
                "weight": weight,
                "type": type,
                "body_age": body_age,
                "loss_level": loss_level,
                "total_calorie": total_calorie,
                "begin_date": begin_date,
                "finish_date": finish_date,
                "loss_per_week": loss_per_week,
                "weight_goal": weight_goal
            }
        )

    def alibaba_alihealth_user_baseinfo_modify(
            self,
            user_id,
            height='0',
            weight='0'
    ):
        """
        更新用户信息
        更新用户的身高、体重等基础信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32573

        :param user_id: 用户id
        :param height: 身高
        :param weight: 体重
        """
        return self._top_request(
            "alibaba.alihealth.user.baseinfo.modify",
            {
                "user_id": user_id,
                "height": height,
                "weight": weight
            }
        )

    def alibaba_fmhealth_butler_energy_sync(
            self,
            user_id,
            value,
            energy_type,
            target,
            sport
    ):
        """
        同步用户消耗能量
        同步用户消耗能量，用户消耗s点或卡路里后，同步给健康平台
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37677

        :param user_id: 阿里用户id
        :param value: 每日已消耗能量
        :param energy_type: “S”- s点 “CAL”- 卡路里
        :param target: 每日可消耗能量
        :param sport: 每日运动消耗能量值
        """
        return self._top_request(
            "alibaba.fmhealth.butler.energy.sync",
            {
                "user_id": user_id,
                "value": value,
                "energy_type": energy_type,
                "target": target,
                "sport": sport
            }
        )

    def alibaba_fmhealth_butler_tips_sync(
            self,
            user_id,
            value,
            tip_type
    ):
        """
        同步用户每日tips
        同步每日一课（free），或每日食谱（pay）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37678

        :param user_id: 阿里用户id
        :param value: 课程或者食谱的json字符串
        :param tip_type: “L”- 课程 “R”- 食谱
        """
        return self._top_request(
            "alibaba.fmhealth.butler.tips.sync",
            {
                "user_id": user_id,
                "value": value,
                "tip_type": tip_type
            }
        )

    def alibaba_fmhealth_checklist_result_add(
            self,
            user_id,
            auth_code,
            result_code='',
            result_text='',
            result_caption=''
    ):
        """
        增加量表测量记录
        用于量表数据回传的接口，调用方多为三方
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38115

        :param user_id: 用户id
        :param auth_code: 授权码，10位长度的数字串
        :param result_code: 结果值
        :param result_text: 结果文本
        :param result_caption: 结果建议
        """
        return self._top_request(
            "alibaba.fmhealth.checklist.result.add",
            {
                "user_id": user_id,
                "auth_code": auth_code,
                "result_code": result_code,
                "result_text": result_text,
                "result_caption": result_caption
            }
        )

    def alibaba_alihealth_uic_swipeface_syncdata(
            self,
            tp_user_id,
            lack_sleep_hours='0',
            black_eye_level='0',
            eye_bag_swollen_level='0',
            fish_tail='0',
            lip_color=''
    ):
        """
        刷脸测睡眠数据同步
        刷脸测睡眠数据同步，三方数据回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40703

        :param tp_user_id: 用户ID
        :param lack_sleep_hours: 缺觉小时数
        :param black_eye_level: 黑圆圈级别
        :param eye_bag_swollen_level: 眼袋级别
        :param fish_tail: 鱼尾纹数
        :param lip_color: 嘴唇颜色
        """
        return self._top_request(
            "alibaba.alihealth.uic.swipeface.syncdata",
            {
                "tp_user_id": tp_user_id,
                "lack_sleep_hours": lack_sleep_hours,
                "black_eye_level": black_eye_level,
                "eye_bag_swollen_level": eye_bag_swollen_level,
                "fish_tail": fish_tail,
                "lip_color": lip_color
            }
        )

    def alibaba_alihealth_uic_userinfo_healthid_get(
            self,
            alipay_user_id
    ):
        """
        获取健康id
        根据支付宝用户ID获取用户健康ID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41857

        :param alipay_user_id: 支付宝用户ID
        """
        return self._top_request(
            "alibaba.alihealth.uic.userinfo.healthid.get",
            {
                "alipay_user_id": alipay_user_id
            }
        )

    def alibaba_alihealth_medicalbase_hospital_sync(
            self,
            is_auth,
            lat,
            lon,
            hos_address,
            region_name,
            is_public,
            grade,
            category,
            city_code,
            hos_name,
            company_name,
            ali_interface_man,
            email,
            technical_man,
            phone,
            hos_type,
            functions,
            isv_hos_code,
            telephone='',
            service_info='',
            special='',
            service_window_url='',
            description_url='',
            is_insurance='',
            short_name='',
            pid='',
            unify_code=''
    ):
        """
        互联网医院批量导入接口
        互联网医院isv批量通过接口批量导入
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42089

        :param is_auth: 是否需要用户授权
        :param lat: 主院区纬度
        :param lon: 主院区经度
        :param hos_address: 主院区地址
        :param region_name: 院区名称
        :param is_public: 是否公立医院（Y／N）
        :param grade: 医院等级
        :param category: 综合(general)、专科（special）
        :param city_code: 所在城市code
        :param hos_name: 营业执照上的医院全称
        :param company_name: 公司名称
        :param ali_interface_man: 支付宝BD的姓名
        :param email: 邮箱地址
        :param technical_man: 联系人
        :param phone: 联系手机
        :param hos_type: 单医院（main）／ 平台（platform）
        :param functions: 服务项列表
        :param isv_hos_code: isv库里面的hosCode
        :param telephone: 主院区的联系电话
        :param service_info: 标签
        :param special: 自定义科室
        :param service_window_url: 生活号或者服务窗url
        :param description_url: 医院简介url
        :param is_insurance: 是否支持医保（Y/N）
        :param short_name: 医院简称
        :param pid: 医院pid
        :param unify_code: 机构编码
        """
        return self._top_request(
            "alibaba.alihealth.medicalbase.hospital.sync",
            {
                "is_auth": is_auth,
                "lat": lat,
                "lon": lon,
                "hos_address": hos_address,
                "region_name": region_name,
                "is_public": is_public,
                "grade": grade,
                "category": category,
                "city_code": city_code,
                "hos_name": hos_name,
                "company_name": company_name,
                "ali_interface_man": ali_interface_man,
                "email": email,
                "technical_man": technical_man,
                "phone": phone,
                "hos_type": hos_type,
                "functions": functions,
                "isv_hos_code": isv_hos_code,
                "telephone": telephone,
                "service_info": service_info,
                "special": special,
                "service_window_url": service_window_url,
                "description_url": description_url,
                "is_insurance": is_insurance,
                "short_name": short_name,
                "pid": pid,
                "unify_code": unify_code
            }
        )


class TbPinXiao(DingTalkBaseAPI):
    """
    品效API
    """

    def taobao_brand_startshop_rpt_account_get(
            self,
            traffic_type,
            end_date,
            start_date,
            effect='15'
    ):
        """
        明星店铺账户报表数据查询
        获取明星店铺广告主账户整体报表数据，只能查询近90天内的数据，包括展现量，点击量等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29752

        :param traffic_type: 流量类型 1: PC站内, 2: PC站外 , 4: 无线站内, 5: 无线站外,支持多种一起查询,如1,2,4,5
        :param end_date: 开始时间(最多可查询最近90天)
        :param start_date: 截至时间(最晚到昨天)
        :param effect: 默认15天
        """
        return self._top_request(
            "taobao.brand.startshop.rpt.account.get",
            {
                "traffic_type": traffic_type,
                "end_date": end_date,
                "start_date": start_date,
                "effect": effect
            }
        )

    def taobao_brand_startshop_rpt_wordpackage_get(
            self,
            start_date,
            end_date,
            traffic_type,
            effect='15',
            page_size='20',
            page_index='1'
    ):
        """
        明星店铺品牌流量包报表数据查询
        获取明星店铺广告词包分日报表数据，只能查询近90天内的数据，包括展现量，点击量等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29755

        :param start_date: 开始日期
        :param end_date: 结束日期
        :param traffic_type: 流量类型
        :param effect: 转化周期
        :param page_size: 每页显示条数(0,200]
        :param page_index: 当前页数 ,从1开始
        """
        return self._top_request(
            "taobao.brand.startshop.rpt.wordpackage.get",
            {
                "start_date": start_date,
                "end_date": end_date,
                "traffic_type": traffic_type,
                "effect": effect,
                "page_size": page_size,
                "page_index": page_index
            }
        )

    def taobao_brand_startshop_rpt_adgroup_get(
            self,
            traffic_type,
            start_date,
            end_date,
            effect='15',
            page_index='',
            page_size=''
    ):
        """
        明星店铺推广单元报表数据查询
        获取明星店铺广告adgroup分日报表数据，只能查询近90天内的数据，包括展现量，点击量等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29756

        :param traffic_type: 流量类型 1: PC站内, 2: PC站外 , 4: 无线站内, 5: 无线站外,支持多种一起查询,如1,2,4,5
        :param start_date: 开始时间(最多可查询最近90天)
        :param end_date: 截至时间(最晚到昨天)
        :param effect: 转化周期默认15天,3,7,15
        :param page_index: 当前页数
        :param page_size: 每页条数
        """
        return self._top_request(
            "taobao.brand.startshop.rpt.adgroup.get",
            {
                "traffic_type": traffic_type,
                "start_date": start_date,
                "end_date": end_date,
                "effect": effect,
                "page_index": page_index,
                "page_size": page_size
            }
        )

    def taobao_brand_startshop_rpt_campaign_get(
            self,
            traffictype='1,2,4,5',
            startdate='',
            enddate='',
            effect='15'
    ):
        """
        明星店铺推广计划报表数据查询
        获取明星店铺广告campaign分日报表数据，只能查询近90天内的数据，包括展现量，点击量等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29757

        :param traffictype: 流量类型 1: PC站内, 2: PC站外 , 4: 无线站内, 5: 无线站外,支持多种一起查询,如1,2,4,5
        :param startdate: 查询开始时间(最多查询90天数据)
        :param enddate: 查询截至时间(最晚查询到昨天)
        :param effect: 转化周期,默认15天,可选 3,7,15
        """
        return self._top_request(
            "taobao.brand.startshop.rpt.campaign.get",
            {
                "traffictype": traffictype,
                "startdate": startdate,
                "enddate": enddate,
                "effect": effect
            }
        )

    def taobao_brand_startshop_rpt_creative_get(
            self,
            traffic_type,
            page_index='',
            page_size='',
            effect='15',
            start_date='2017-03-08',
            end_date='2017-06-01'
    ):
        """
        明星店铺创意报表数据查询
        获取明星店铺广告creative分日报表数据，只能查询近90天内的数据，包括展现量，点击量等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29758

        :param traffic_type: 流量类型 1: PC站内, 2: PC站外 , 4: 无线站内, 5: 无线站外,支持多种一起查询,如1,2,4,5
        :param page_index: 当前页数
        :param page_size: 每页条数
        :param effect: 转化周期,默认15, 3,7,15
        :param start_date: 开始日期(最多查询1个月的数据)
        :param end_date: 截至日期(最晚到昨天)
        """
        return self._top_request(
            "taobao.brand.startshop.rpt.creative.get",
            {
                "traffic_type": traffic_type,
                "page_index": page_index,
                "page_size": page_size,
                "effect": effect,
                "start_date": start_date,
                "end_date": end_date
            }
        )

    def taobao_brand_starshop_rpt_target_get(
            self,
            traffic_type,
            page_index='',
            page_size='',
            effect='15',
            start_date='2017-03-08',
            end_date='2017-06-01'
    ):
        """
        明星店铺定向维度报表
        获取明星店铺定向维度分日报表数据，只能查询近90天内的数据，包括展现量，点击量等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36460

        :param traffic_type: 流量类型 1: PC站内, 2: PC站外 , 4: 无线站内, 5: 无线站外,支持多种一起查询,如1,2,4,5
        :param page_index: 当前页数
        :param page_size: 每页条数
        :param effect: 转化周期,默认15, 3,7,15
        :param start_date: 开始日期(最多查询1个月的数据)
        :param end_date: 截至日期(最晚到昨天)
        """
        return self._top_request(
            "taobao.brand.starshop.rpt.target.get",
            {
                "traffic_type": traffic_type,
                "page_index": page_index,
                "page_size": page_size,
                "effect": effect,
                "start_date": start_date,
                "end_date": end_date
            }
        )

    def taobao_brand_specialshow_rpt_campaign_get(
            self,
            traffictype,
            startdate,
            enddate,
            effect='15'
    ):
        """
        品牌特秀推广计划报表数据查询
        获取品牌特秀广告campaign分日报表数据，只能查询近90天内的数据，包括展现量，点击量等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42844

        :param traffictype: 流量类型 1: PC站内, 2: PC站外 , 4: 无线站内, 5: 无线站外,支持多种一起查询,如1,2,4,5
        :param startdate: 查询开始时间(最多查询90天数据)
        :param enddate: 查询截至时间(最晚查询到昨天)
        :param effect: 转化周期,默认15天,可选 3,7,15
        """
        return self._top_request(
            "taobao.brand.specialshow.rpt.campaign.get",
            {
                "traffictype": traffictype,
                "startdate": startdate,
                "enddate": enddate,
                "effect": effect
            }
        )

    def taobao_brand_specialshow_rpt_adgroup_get(
            self,
            traffic_type,
            start_date,
            end_date,
            effect='15',
            page_index='',
            page_size=''
    ):
        """
        品牌特秀推广计划报表数据查询
        获取品牌特秀广告adgroup分日报表数据，只能查询近90天内的数据，包括展现量，点击量等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42845

        :param traffic_type: 流量类型 1: PC站内, 2: PC站外 , 4: 无线站内, 5: 无线站外,支持多种一起查询,如1,2,4,5
        :param start_date: 开始时间(最多可查询最近90天)
        :param end_date: 截至时间(最晚到昨天)
        :param effect: 转化周期默认15天,3,7,15
        :param page_index: 当前页数
        :param page_size: 每页条数
        """
        return self._top_request(
            "taobao.brand.specialshow.rpt.adgroup.get",
            {
                "traffic_type": traffic_type,
                "start_date": start_date,
                "end_date": end_date,
                "effect": effect,
                "page_index": page_index,
                "page_size": page_size
            }
        )

    def taobao_brandhub_specialshow_rpt_campaign_get(
            self,
            start_date,
            end_date,
            solution_id='',
            page_index='',
            page_size=''
    ):
        """
        品牌号品牌特秀计划报表数据查询
        获取品牌号品牌特秀广告campaign分日报表数据，只能查询近90天内的数据，包括展现量，点击量等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43976

        :param start_date: 开始时间(最多可查询最近90天)
        :param end_date: 截至时间(最晚到昨天)
        :param solution_id: 指定计划id
        :param page_index: 当前页数
        :param page_size: 每页条数
        """
        return self._top_request(
            "taobao.brandhub.specialshow.rpt.campaign.get",
            {
                "start_date": start_date,
                "end_date": end_date,
                "solution_id": solution_id,
                "page_index": page_index,
                "page_size": page_size
            }
        )

    def taobao_brandhub_specialshow_rpt_adgroup_get(
            self,
            start_date,
            end_date,
            solution_id='',
            task_id='',
            page_index='',
            page_size=''
    ):
        """
        品牌号品牌特秀单元报表数据查询
        获取品牌号品牌特秀广告adgroup分日报表数据，只能查询近90天内的数据，包括展现量，点击量等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43977

        :param start_date: 开始时间(最多可查询最近90天)
        :param end_date: 截至时间(最晚到昨天)
        :param solution_id: 指定计划id
        :param task_id: 指定任务id
        :param page_index: 当前页数
        :param page_size: 可选页数
        """
        return self._top_request(
            "taobao.brandhub.specialshow.rpt.adgroup.get",
            {
                "start_date": start_date,
                "end_date": end_date,
                "solution_id": solution_id,
                "task_id": task_id,
                "page_index": page_index,
                "page_size": page_size
            }
        )


class TbXiaoMi(DingTalkBaseAPI):
    """
    小蜜API
    """

    def taobao_alime_user_token_get(
            self,
            source,
            foreign_id='',
            nick='',
            id='0',
            expires='60',
            routing='0'
    ):
        """
        获取用户免登录令牌
        根据第三账号信息获取用户的免登录令牌
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41699

        :param source: 小蜜分配给第三方账号的来源
        :param foreign_id: 用户在第三方账号中的唯一id
        :param nick: 用户昵称
        :param id: 用户在小蜜账号中的唯一id
        :param expires: 令牌的过期时间(时间为秒)，最大为3600
        :param routing: 路由id, 一般为用户id，用于异地容灾
        """
        return self._top_request(
            "taobao.alime.user.token.get",
            {
                "source": source,
                "foreign_id": foreign_id,
                "nick": nick,
                "id": id,
                "expires": expires,
                "routing": routing
            }
        )

    def taobao_alime_message_open_send(
            self,
            message=None,
            app_id=''
    ):
        """
        小蜜发消息接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43223

        :param message: Message
        :param app_id: appId
        """
        return self._top_request(
            "taobao.alime.message.open.send",
            {
                "message": message,
                "app_id": app_id
            }
        )

    def taobao_alime_user_token_advance_get(
            self,
            routing='0',
            type='',
            foreign_id='',
            nick='',
            source='',
            id='',
            expires='60'
    ):
        """
        获取用户免登录令牌v2
        根据第三账号信息获取用户的免登录令牌
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44065

        :param routing: 路由id, 一般为用户id，用于异地容灾
        :param type: 用户类型，0为普通用户，1为访客用户
        :param foreign_id: 用户在第三方账号中的唯一id
        :param nick: 用户昵称
        :param source: 小蜜分配给第三方账号的来源
        :param id: 用户在小蜜账号中的唯一id
        :param expires: 令牌的过期时间(时间为秒)，最大为3600
        """
        return self._top_request(
            "taobao.alime.user.token.advance.get",
            {
                "routing": routing,
                "type": type,
                "foreign_id": foreign_id,
                "nick": nick,
                "source": source,
                "id": id,
                "expires": expires
            }
        )


class TbDaMaiPiaoWuYunFenXiao(DingTalkBaseAPI):
    """
    大麦票务云分销API
    """

    def alibaba_damai_maitix_order_query(
            self,
            param
    ):
        """
        大麦-查询分销单
        查询分销单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38040

        :param param: 分销单查询入参
        """
        return self._top_request(
            "alibaba.damai.maitix.order.query",
            {
                "param": param
            }
        )

    def alibaba_damai_maitix_order_confirm(
            self,
            param
    ):
        """
        大麦-出票
        出票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38104

        :param param: 出票入参
        """
        return self._top_request(
            "alibaba.damai.maitix.order.confirm",
            {
                "param": param
            }
        )

    def alibaba_damai_maitix_order_create(
            self,
            param
    ):
        """
        大麦-库存锁定
        第三方分销库存锁定接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38105

        :param param: 库存锁定入参java bean
        """
        return self._top_request(
            "alibaba.damai.maitix.order.create",
            {
                "param": param
            }
        )

    def alibaba_damai_maitix_order_cancel(
            self,
            param
    ):
        """
        大麦-库存释放
        库存释放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38142

        :param param: 库存释放入参
        """
        return self._top_request(
            "alibaba.damai.maitix.order.cancel",
            {
                "param": param
            }
        )

    def alibaba_damai_maitix_projects_query(
            self
    ):
        """
        大麦-项目信息查询
        第三方平台查询授权的项目，场次，价格信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39438

        """
        return self._top_request(
            "alibaba.damai.maitix.projects.query"
        )

    def alibaba_damai_maitix_projectlists_query(
            self
    ):
        """
        大麦-项目列表查询新接口
        新版第三方平台根据商家appket查询授权的项目列表信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42624

        """
        return self._top_request(
            "alibaba.damai.maitix.projectlists.query"
        )

    def alibaba_damai_maitix_project_query(
            self,
            project_id
    ):
        """
        大麦-单项目详情
        新版第三方平台查询授权的单个项目详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42629

        :param project_id: 项目id
        """
        return self._top_request(
            "alibaba.damai.maitix.project.query",
            {
                "project_id": project_id
            }
        )

    def alibaba_damai_maitix_order_directrefund(
            self,
            param
    ):
        """
        大麦-直接退票
        大麦-退票
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43627

        :param param: 退票入参
        """
        return self._top_request(
            "alibaba.damai.maitix.order.directrefund",
            {
                "param": param
            }
        )

    def alibaba_damai_maitix_order_distribution_create(
            self,
            param
    ):
        """
        大麦-新分销下单
        createDistributionOrder
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43662

        :param param: 下单参数param
        """
        return self._top_request(
            "alibaba.damai.maitix.order.distribution.create",
            {
                "param": param
            }
        )

    def alibaba_damai_maitix_project_distribution_query(
            self,
            project_id=''
    ):
        """
        分销单项目详情查询
        发布分销项目查询单个项目信息接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43682

        :param project_id: 项目id
        """
        return self._top_request(
            "alibaba.damai.maitix.project.distribution.query",
            {
                "project_id": project_id
            }
        )

    def alibaba_damai_maitix_project_distribution_querylist(
            self
    ):
        """
        分销项目列表查询
        分销项目列表查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43683

        """
        return self._top_request(
            "alibaba.damai.maitix.project.distribution.querylist"
        )

    def alibaba_damai_maitix_eticket_distribution_query(
            self,
            param
    ):
        """
        分销电子票查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44328

        :param param: 入参param
        """
        return self._top_request(
            "alibaba.damai.maitix.eticket.distribution.query",
            {
                "param": param
            }
        )

    def alibaba_damai_maitix_project_distribution_querybypage(
            self,
            param=None
    ):
        """
        分销项目分页查询项目列表服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44335

        :param param: 入参param
        """
        return self._top_request(
            "alibaba.damai.maitix.project.distribution.querybypage",
            {
                "param": param
            }
        )


class TbTianMaoJingLingKaiFang(DingTalkBaseAPI):
    """
    天猫精灵开放API
    """

    def tmall_ailabs_open_getuserstatus(
            self
    ):
        """
        天猫精灵获取用户信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取用户注册和绑定设备相关信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30346

        """
        return self._top_request(
            "tmall.ailabs.open.getuserstatus"
        )

    def taobao_tmallgenie_hotelplayerpause(
            self,
            room_no='',
            hotel_id='0'
    ):
        """
        天猫精灵酒店播放暂停
        酒店推送指令给天猫精灵停止播放音乐
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32435

        :param room_no: 房间号
        :param hotel_id: 酒店ID
        """
        return self._top_request(
            "taobao.tmallgenie.hotelplayerpause",
            {
                "room_no": room_no,
                "hotel_id": hotel_id
            }
        )

    def taobao_tmallgenie_hotelwelcome(
            self,
            room_no='',
            hotel_id='0',
            template_id='',
            template_variable=''
    ):
        """
        酒店欢迎词推送
        推送欢迎词，让天猫精灵播放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32448

        :param room_no: 房间号
        :param hotel_id: 酒店ID
        :param template_id: 模板ID
        :param template_variable: 模板变量
        """
        return self._top_request(
            "taobao.tmallgenie.hotelwelcome",
            {
                "room_no": room_no,
                "hotel_id": hotel_id,
                "template_id": template_id,
                "template_variable": template_variable
            }
        )

    def alibaba_ailabs_aligenie_opencontent_push(
            self,
            skill_id,
            contents
    ):
        """
        天猫精灵内容接入标准接口
        第三方内容接入天猫精灵内容库，供相关技能使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33390

        :param skill_id: 在Aligenie开放平台创建的技能的ID
        :param contents: 详细内容列表
        """
        return self._top_request(
            "alibaba.ailabs.aligenie.opencontent.push",
            {
                "skill_id": skill_id,
                "contents": contents
            }
        )

    def taobao_ailabs_iot_device_status_push(
            self,
            token,
            device_type,
            brand,
            skill_id,
            attributes=None
    ):
        """
        智能家居设备状态上报接口
        智能家居设备状态上报后进行语音播报
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33982

        :param token: 智能家居设备厂商accessToken
        :param device_type: 设备类型
        :param brand: 设备品牌
        :param skill_id: 技能id
        :param attributes: 设备属性列表
        """
        return self._top_request(
            "taobao.ailabs.iot.device.status.push",
            {
                "token": token,
                "device_type": device_type,
                "brand": brand,
                "skill_id": skill_id,
                "attributes": attributes
            }
        )

    def taobao_ailab_aicloud_top_message_sendaudio(
            self,
            schema,
            user_id,
            message,
            utd_id='',
            ext=''
    ):
        """
        发送语音留言
        将语音的二进制byte[]通过TOP接口发送保存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35628

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户 id
        :param message: 语音的二进制
        :param utd_id: 用户设备唯一识别码，长度限制32以内， 建议使用系统接口获取deviceid, 然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.message.sendaudio",
            {
                "schema": schema,
                "user_id": user_id,
                "message": message,
                "utd_id": utd_id,
                "ext": ext
            }
        )

    def alibaba_ailabs_bots_skils_list(
            self,
            page_index='1',
            page_size='10'
    ):
        """
        对外设备获取技能列表
        获取ai开放平台技能列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36349

        :param page_index: 当前页
        :param page_size: 分页单位
        """
        return self._top_request(
            "alibaba.ailabs.bots.skils.list",
            {
                "page_index": page_index,
                "page_size": page_size
            }
        )

    def alibaba_ai_user_quick_register(
            self,
            serial_no,
            req_time,
            merchant_user_id,
            schema_key
    ):
        """
        精灵用户注册申请
        人工智能实验室精灵用户注册申请接口，开放给Iot厂商做厂商会员数据上报
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36355

        :param serial_no: 请求交易流水号（唯一即可，不参与业务运算）
        :param req_time: 请求时间
        :param merchant_user_id: 商户的用户的唯一ID
        :param schema_key: 账户体系隔离
        """
        return self._top_request(
            "alibaba.ai.user.quick.register",
            {
                "serial_no": serial_no,
                "req_time": req_time,
                "merchant_user_id": merchant_user_id,
                "schema_key": schema_key
            }
        )

    def alibaba_ai_user_quick_bind(
            self,
            serial_no='',
            ext_user_type='',
            ext_user_id='',
            req_time='',
            merchant_user_id='',
            schema_key=''
    ):
        """
        精灵用户绑定第三方账号信息
        人工智能实验室精灵用户绑定第三方账号信息接口，开放给Iot厂商做为厂商上送第三方账号信息的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36465

        :param serial_no: 交易流水号（唯一即可，不参与业务运算）
        :param ext_user_type: 第三方用户类型
        :param ext_user_id: 第三用户ID
        :param req_time: 请求时间
        :param merchant_user_id: 商户的用户的唯一ID
        :param schema_key: 开放平台申请的schema
        """
        return self._top_request(
            "alibaba.ai.user.quick.bind",
            {
                "serial_no": serial_no,
                "ext_user_type": ext_user_type,
                "ext_user_id": ext_user_id,
                "req_time": req_time,
                "merchant_user_id": merchant_user_id,
                "schema_key": schema_key
            }
        )

    def taobao_ailab_aicloud_top_memo_alarm_list(
            self,
            schema,
            user_id,
            utd_id='',
            ext='',
            application_key='',
            memo_id=''
    ):
        """
        天猫精灵闹钟查询
        查询天猫精灵用户设置的所有闹钟
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36784

        :param schema: schema
        :param user_id: 企业用户ID
        :param utd_id: 手持设备ID
        :param ext: 扩展信息json段，用于存放APP类型，APP版本等等信息。
        :param application_key: appKey
        :param memo_id: 闹钟ID
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.memo.alarm.list",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext,
                "application_key": application_key,
                "memo_id": memo_id
            }
        )

    def taobao_ailab_aicloud_top_memo_alarm_delete(
            self,
            schema,
            user_id,
            memo_id,
            utd_id='',
            ext='',
            application_key=''
    ):
        """
        天猫精灵闹钟删除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36785

        :param schema: schema
        :param user_id: 企业用户ID
        :param memo_id: 闹钟ID
        :param utd_id: 手持设备ID
        :param ext: 扩展信息json段，用于存放APP类型，APP版本等等信息。
        :param application_key: appKey
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.memo.alarm.delete",
            {
                "schema": schema,
                "user_id": user_id,
                "memo_id": memo_id,
                "utd_id": utd_id,
                "ext": ext,
                "application_key": application_key
            }
        )

    def taobao_ailab_aicloud_top_memo_meeting_list(
            self,
            schema,
            user_id,
            utd_id='',
            ext='',
            memo_id=''
    ):
        """
        天猫精灵会议查询
        查询天猫精灵用户设置的所有会议
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36786

        :param schema: schema
        :param user_id: 企业用户ID
        :param utd_id: 手持设备ID
        :param ext: 扩展信息json段，用于存放APP类型，APP版本等等信息。
        :param memo_id: 闹钟ID
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.memo.meeting.list",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext,
                "memo_id": memo_id
            }
        )

    def taobao_ailab_aicloud_top_memo_meeting_delete(
            self,
            schema,
            user_id,
            memo_id,
            utd_id='',
            ext=''
    ):
        """
        天猫精灵会议删除
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36787

        :param schema: schema
        :param user_id: 企业用户ID
        :param memo_id: 会议ID
        :param utd_id: 手持设备ID
        :param ext: 扩展信息json段，用于存放APP类型，APP版本等等信息。
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.memo.meeting.delete",
            {
                "schema": schema,
                "user_id": user_id,
                "memo_id": memo_id,
                "utd_id": utd_id,
                "ext": ext
            }
        )

    def taobao_ailab_aicloud_top_memo_note_list(
            self,
            schema,
            user_id,
            utd_id='',
            ext='',
            memo_id=''
    ):
        """
        查询天猫精灵用户设置的所有备忘录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36788

        :param schema: schema
        :param user_id: 企业用户ID
        :param utd_id: 手持设备ID
        :param ext: 扩展信息json段，用于存放APP类型，APP版本等等信息。
        :param memo_id: 备忘录ID
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.memo.note.list",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext,
                "memo_id": memo_id
            }
        )

    def taobao_ailab_aicloud_top_memo_note_delete(
            self,
            schema,
            user_id,
            memo_id,
            utd_id='',
            ext=''
    ):
        """
        天猫精灵备忘录删除
        删除天猫精灵用户设置的备忘录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36789

        :param schema: schema
        :param user_id: 企业用户ID
        :param memo_id: 备忘录ID
        :param utd_id: 手持设备ID
        :param ext: 扩展信息json段，用于存放APP类型，APP版本等等信息。
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.memo.note.delete",
            {
                "schema": schema,
                "user_id": user_id,
                "memo_id": memo_id,
                "utd_id": utd_id,
                "ext": ext
            }
        )

    def taobao_ailab_aicloud_top_message_sendtext(
            self,
            schema='',
            user_id='',
            utd_id='',
            ext='',
            text=''
    ):
        """
        故事机发送文本留言
        故事机文本留言
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37726

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户 id
        :param utd_id: 用户设备唯一识别码，长度限制32以内， 建议使用系统接口获取deviceid, 然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        :param text: 留言输入的文本
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.message.sendtext",
            {
                "schema": schema,
                "user_id": user_id,
                "utd_id": utd_id,
                "ext": ext,
                "text": text
            }
        )

    def taobao_ailab_aicloud_top_music_search(
            self,
            bot_id='',
            params='',
            page_no='',
            page_size=''
    ):
        """
        对外音乐搜索服务
        供厂商获取音乐列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38036

        :param bot_id: botId值
        :param params: 筛选条件，目前只支持name、type和style
        :param page_no: 分页页码
        :param page_size: 分页页大小
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.music.search",
            {
                "bot_id": bot_id,
                "params": params,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def alibaba_ai_user_quick_token_bind(
            self,
            access_token_value,
            expired_time,
            merchant_user_id,
            skill_id,
            schema_key,
            refresh_token
    ):
        """
        人工智能实验室精灵用户绑定第三方Token接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38603

        :param access_token_value: Oauth协议访问令牌
        :param expired_time: 令牌有效期（秒）
        :param merchant_user_id: 第三方用户账号唯一ID
        :param skill_id: 技能ID
        :param schema_key: 账号隔离属性
        :param refresh_token: Oauth协议刷新令牌
        """
        return self._top_request(
            "alibaba.ai.user.quick.token.bind",
            {
                "access_token_value": access_token_value,
                "expired_time": expired_time,
                "merchant_user_id": merchant_user_id,
                "skill_id": skill_id,
                "schema_key": schema_key,
                "refresh_token": refresh_token
            }
        )

    def alibaba_ailabs_aligenie_device_register(
            self,
            device_id,
            mac_sections
    ):
        """
        天猫精灵开放平台获取设备秘钥
        向天猫精灵inside平台注册设备mac地址，并获取设备的唯一密钥
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40411

        :param device_id: 设备id
        :param mac_sections: mac区段脚本
        """
        return self._top_request(
            "alibaba.ailabs.aligenie.device.register",
            {
                "device_id": device_id,
                "mac_sections": mac_sections
            },
            result_processor=lambda x: x["device_secret_infos"]
        )

    def taobao_ailab_aicloud_top_skils_list(
            self,
            schema,
            user_id,
            page_no,
            page_size,
            utd_id='',
            ext='',
            query='',
            type=''
    ):
        """
        获取硬件平台设备下挂载的技能列表
        提供给在硬件平台接入设备的技能列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40768

        :param schema: 账户体系隔离
        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param page_no: pageNo
        :param page_size: pageSize
        :param utd_id: 用户设备唯一识别码，长度限制32以内，建议使用系统接口获取deviceid,然后做一定的混淆处理来作为此输入参数
        :param ext: 扩展信息，用于存放APP类型等
        :param query: query(模糊匹配skillName)
        :param type: type(1000代表内容技能，3000代表自定义技能，4000代表官方技能)
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.skils.list",
            {
                "schema": schema,
                "user_id": user_id,
                "page_no": page_no,
                "page_size": page_size,
                "utd_id": utd_id,
                "ext": ext,
                "query": query,
                "type": type
            }
        )

    def taobao_ailab_aicloud_top_memo_alarm_create(
            self,
            schema,
            user_id,
            param_create_alarm_param,
            ext='',
            utd_id=''
    ):
        """
        天猫精灵闹钟创建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42913

        :param schema: schema
        :param user_id: 企业用户ID
        :param param_create_alarm_param: 创建闹钟入参
        :param ext: 扩展信息json段，用于存放APP类型，APP版本等等信息。
        :param utd_id: 手持设备ID
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.memo.alarm.create",
            {
                "schema": schema,
                "user_id": user_id,
                "param_create_alarm_param": param_create_alarm_param,
                "ext": ext,
                "utd_id": utd_id
            }
        )


class TbZhiHuiYuanQu(DingTalkBaseAPI):
    """
    智慧园区API
    """

    def alibaba_campus_topology_getall(
            self,
            campus_id,
            company_id='',
            system_id=''
    ):
        """
        获取管理园区的规则拓扑接口
        获取所属园区的所有规则拓扑图
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31278

        :param campus_id: 园区id
        :param company_id: 公司id
        :param system_id: 系统id
        """
        return self._top_request(
            "alibaba.campus.topology.getall",
            {
                "campus_id": campus_id,
                "company_id": company_id,
                "system_id": system_id
            }
        )

    def alibaba_iwork_core_hrs_getperson(
            self,
            account_id='',
            person_id='',
            app_id='',
            operator_id=''
    ):
        """
        获取神鲸用户基本信息
        神鲸用户的基本信息查询，根据PERSON_ID或者用户ACCOUNT_ID查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31546

        :param account_id: 用户ACCOUNT_ID
        :param person_id: 用户ID
        :param app_id: 应用ID
        :param operator_id: 操作人ID
        """
        return self._top_request(
            "alibaba.iwork.core.hrs.getperson",
            {
                "account_id": account_id,
                "person_id": person_id,
                "app_id": app_id,
                "operator_id": operator_id
            }
        )

    def alibaba_iwork_mc_msg_senddefault(
            self,
            message_event
    ):
        """
        给注册用户发送消息
        给神鲸注册用户发送对应操作结果的消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31547

        :param message_event: 消息对象
        """
        return self._top_request(
            "alibaba.iwork.mc.msg.senddefault",
            {
                "message_event": message_event
            }
        )

    def alibaba_iwork_mc_msg_sendmobile(
            self,
            mobile_receiver_message_event
    ):
        """
        发送消息给手机用户
        给手机用户发送对应操作结果的消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31548

        :param mobile_receiver_message_event: 消息对象
        """
        return self._top_request(
            "alibaba.iwork.mc.msg.sendmobile",
            {
                "mobile_receiver_message_event": mobile_receiver_message_event
            }
        )

    def alibaba_campus_topology_add(
            self,
            param0=None
    ):
        """
        拓扑批量实例化
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        该接口提供给ISV进行规则模板批量实例化。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31911

        :param param0: 拓扑实例
        """
        return self._top_request(
            "alibaba.campus.topology.add",
            {
                "param0": param0
            }
        )

    def alibaba_campus_space_group_getbyid(
            self,
            param0,
            param1
    ):
        """
        根据分组ID查询相关的空间分组信息
        HSF接口名称：com.alibaba.campus.api.space.service.top.SpaceGroupApiTopService
        HSF方法名称：getById
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31921

        :param param0: 用户环境
        :param param1: 分组ID
        """
        return self._top_request(
            "alibaba.campus.space.group.getbyid",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_space_group_getlist(
            self,
            param0=None,
            param1=None
    ):
        """
        多条件查询空间分组信息
        HSF接口名称：com.alibaba.campus.api.space.service.top.SpaceGroupApiTopService
        HSF方法名称：getList
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31922

        :param param0: 查询条件封装
        :param param1: 查询参数封装
        """
        return self._top_request(
            "alibaba.campus.space.group.getlist",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_space_unit_getbyid(
            self,
            param0,
            param1=''
    ):
        """
        根据ID查询指定空间单元信息
        HSF接口名称：com.alibaba.campus.api.space.service.top.SpaceUnitApiTopService
        HSF方法名称：getById
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31923

        :param param0: 空间单元ID
        :param param1: 空间单元ID
        """
        return self._top_request(
            "alibaba.campus.space.unit.getbyid",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_space_unit_getlistbygroupid(
            self,
            param0,
            param1
    ):
        """
        根据分组ID查询相应的空间单元
        HSF接口名称：com.alibaba.campus.api.space.service.top.SpaceUnitApiTopService
        HSF方法名称：getListByGroupId
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31924

        :param param0: 分组ID
        :param param1: 分组ID
        """
        return self._top_request(
            "alibaba.campus.space.unit.getlistbygroupid",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_space_unit_getlistmapbygroupid(
            self,
            param0,
            param1
    ):
        """
        新增查询多个分组ID各自相关的空间单元信息
        HSF接口名称：	com.alibaba.campus.api.space.service.top.SpaceUnitApiTopService
        HSF方法名称：	getListMapByGroupIds
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31925

        :param param0: 用户环境
        :param param1: 查询封装
        """
        return self._top_request(
            "alibaba.campus.space.unit.getlistmapbygroupid",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_space_unit_getlist(
            self,
            param0,
            param1
    ):
        """
        多条件查询空间单元信息
        HSF接口名称：com.alibaba.campus.api.space.service.top.SpaceUnitApiTopService
        HSF方法名称：getList
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31926

        :param param0: 查询条件封装
        :param param1: 查询参数封装
        """
        return self._top_request(
            "alibaba.campus.space.unit.getlist",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_space_group_getlistbycampusandtype(
            self,
            param0,
            param1
    ):
        """
        根据园区id及TypeId获取空间分组
        HSF接口名称：com.alibaba.campus.api.space.service.top.SpaceGroupApiTopService
        HSF方法名称：getListByCampusAndType
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31927

        :param param0: 系统自动生成
        :param param1: 查询参数封装
        """
        return self._top_request(
            "alibaba.campus.space.group.getlistbycampusandtype",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_space_unit_getlistbycampusandtype(
            self,
            param0=None,
            param1=None
    ):
        """
        根据园区id及TypeId获取空间单元
        HSF接口名称：com.alibaba.campus.api.space.service.top.SpaceUnitApiTopService
        HSF方法名称：getListByCampusAndType
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31928

        :param param0: 系统自动生成
        :param param1: 查询参数封装
        """
        return self._top_request(
            "alibaba.campus.space.unit.getlistbycampusandtype",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_space_floor_getbybuildingid(
            self,
            param0,
            param1
    ):
        """
        根据楼宇ID获取楼层
        HSF接口名称：com.alibaba.campus.api.space.service.top.FloorApiTopService
        HSF方法名称：getFloorList
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31949

        :param param0: 系统自动生成
        :param param1: 楼宇iD封装
        """
        return self._top_request(
            "alibaba.campus.space.floor.getbybuildingid",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_space_building_getbycampusid(
            self,
            param0,
            param1
    ):
        """
        根据园区ID获取楼宇
        HSF接口名称：com.alibaba.campus.api.space.service.top.BuildingApiTopService
        HSF方法名称：getBuildingList
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31950

        :param param0: 系统自动生成
        :param param1: 园区封装
        """
        return self._top_request(
            "alibaba.campus.space.building.getbycampusid",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_device_openapi_operatedevice(
            self,
            work_bench_context,
            uuid,
            property_code,
            value
    ):
        """
        根据uuid操作设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31987

        :param work_bench_context: 请求发送端信息
        :param uuid: 设备序列号uuid
        :param property_code: 参数code,如灯亮度参数为brightness;设备的开关switchstate。参数code信息请查阅‘平台技术’下‘设备详细信息开发文档’。
        :param value: 设置的参数值.如灯亮度为0~255.0表示关;设备开关,值使用on或off。[请按照‘设备详细信息开发文档’传入正确的参数值类型]
        """
        return self._top_request(
            "alibaba.campus.device.openapi.operatedevice",
            {
                "work_bench_context": work_bench_context,
                "uuid": uuid,
                "property_code": property_code,
                "value": value
            }
        )

    def alibaba_campus_device_openapi_getdevicelist(
            self,
            work_bench_context,
            query
    ):
        """
        多条件查询设备分组
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31988

        :param work_bench_context: 请求发送端信息
        :param query: 多条件查询对象
        """
        return self._top_request(
            "alibaba.campus.device.openapi.getdevicelist",
            {
                "work_bench_context": work_bench_context,
                "query": query
            }
        )

    def alibaba_campus_device_openapi_getdevicerealtimelog(
            self,
            work_bench_context,
            uuid
    ):
        """
        根据设备uuid获取设备采集信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31989

        :param work_bench_context: 请求发送端信息
        :param uuid: 设备uuid
        """
        return self._top_request(
            "alibaba.campus.device.openapi.getdevicerealtimelog",
            {
                "work_bench_context": work_bench_context,
                "uuid": uuid
            }
        )

    def alibaba_campus_device_openapi_getuniquedevice(
            self,
            work_bench_context,
            uuid
    ):
        """
        根据设备uuid获取设备信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31994

        :param work_bench_context: 请求发送端信息
        :param uuid: 设备序列号uuid
        """
        return self._top_request(
            "alibaba.campus.device.openapi.getuniquedevice",
            {
                "work_bench_context": work_bench_context,
                "uuid": uuid
            }
        )

    def alibaba_campus_device_openapi_getdevicerealtimedata(
            self,
            work_bench_context,
            uuid,
            property_code
    ):
        """
        获取指定设备下指定参数的实时值
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32115

        :param work_bench_context: 请求端信息
        :param uuid: 设备uuid
        :param property_code: 参数code,如灯亮度参数为brightness;参数code信息请查阅‘平台技术’下‘设备详细信息开发文档’[根据设备类型查看该设备所拥有的采集类参数]。
        """
        return self._top_request(
            "alibaba.campus.device.openapi.getdevicerealtimedata",
            {
                "work_bench_context": work_bench_context,
                "uuid": uuid,
                "property_code": property_code
            }
        )

    def alibaba_campus_acl_checkappkeyandcampusid(
            self,
            campus_id,
            app_code
    ):
        """
        根据应用校验是否有园区权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32121

        :param campus_id: 园区id
        :param app_code: appKey
        """
        return self._top_request(
            "alibaba.campus.acl.checkappkeyandcampusid",
            {
                "campus_id": campus_id,
                "app_code": app_code
            }
        )

    def alibaba_campus_acl_queryallemppermiitem(
            self,
            system_id,
            campus_id,
            account_id,
            company_id='',
            page='1',
            page_size='10'
    ):
        """
        查询员工全部权限(包括角色下面的权限)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32215

        :param system_id: 系统id
        :param campus_id: 园区id
        :param account_id: 用户账号
        :param company_id: 公司id不填默认SYS_000
        :param page: 每页多少条
        :param page_size: 每页记录数
        """
        return self._top_request(
            "alibaba.campus.acl.queryallemppermiitem",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "account_id": account_id,
                "company_id": company_id,
                "page": page,
                "page_size": page_size
            }
        )

    def alibaba_campus_acl_addpermission(
            self,
            system_id,
            campus_id,
            priv_key,
            priv_value,
            priv_name='',
            priv_type='normal',
            user_id=''
    ):
        """
        添加权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32219

        :param system_id: 系统id
        :param campus_id: 园区id
        :param priv_key: 权限健
        :param priv_value: 权限值
        :param priv_name: 权限名称
        :param priv_type: 权限类型
        :param user_id: 操作人id(不填默认appCode)
        """
        return self._top_request(
            "alibaba.campus.acl.addpermission",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "priv_key": priv_key,
                "priv_value": priv_value,
                "priv_name": priv_name,
                "priv_type": priv_type,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_getpageresult(
            self,
            company_id,
            system_id,
            campus_id,
            limit='10',
            account_id='',
            current_page='1'
    ):
        """
        分页查询管理员
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32220

        :param company_id: 公司ID
        :param system_id: 系统id
        :param campus_id: 园区id
        :param limit: 每页显示多少条
        :param account_id: 账号id
        :param current_page: 当前页
        """
        return self._top_request(
            "alibaba.campus.acl.getpageresult",
            {
                "company_id": company_id,
                "system_id": system_id,
                "campus_id": campus_id,
                "limit": limit,
                "account_id": account_id,
                "current_page": current_page
            }
        )

    def alibaba_campus_acl_insertrole(
            self,
            system_id,
            campus_id,
            role_name,
            role_id,
            company_id='',
            role_desc='',
            role_type='admin',
            user_id=''
    ):
        """
        新增角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32221

        :param system_id: 系统id
        :param campus_id: 园区id
        :param role_name: 角色名称
        :param role_id: 角色唯一ID,统一ROLE_开头,不填默认生成ROLE_UUID(32位随机数)
        :param company_id: 公司id,不填统一为SYS_000
        :param role_desc: 角色描述
        :param role_type: 默认人员角色.还有device设备角色类型
        :param user_id: 操作人id(不填默认appCode)
        """
        return self._top_request(
            "alibaba.campus.acl.insertrole",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "role_name": role_name,
                "role_id": role_id,
                "company_id": company_id,
                "role_desc": role_desc,
                "role_type": role_type,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_updatepermiitemtorole(
            self,
            role,
            priv,
            system_id,
            campus_id,
            company_id='',
            user_id=''
    ):
        """
        修改角色赋予的权限
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32222

        :param role: 系统自动生成
        :param priv: 系统自动生成
        :param system_id: 系统id
        :param campus_id: 园区id
        :param company_id: 公司ID 不填统一生成SYS_000
        :param user_id: 操作人id(不填默认appCode)
        """
        return self._top_request(
            "alibaba.campus.acl.updatepermiitemtorole",
            {
                "role": role,
                "priv": priv,
                "system_id": system_id,
                "campus_id": campus_id,
                "company_id": company_id,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_grantpermiitemtorole(
            self,
            system_id,
            campus_id,
            role,
            priv,
            company_id='',
            user_id=''
    ):
        """
        权限赋予角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32223

        :param system_id: 系统id
        :param campus_id: 园区ID
        :param role: 系统自动生成
        :param priv: 系统自动生成
        :param company_id: 公司ID,不填统一初始化SYS_000
        :param user_id: 操作人id
        """
        return self._top_request(
            "alibaba.campus.acl.grantpermiitemtorole",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "role": role,
                "priv": priv,
                "company_id": company_id,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_deletepermission(
            self,
            system_id,
            campus_id,
            priv_id,
            user_id=''
    ):
        """
        删除权限
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32224

        :param system_id: 系统id
        :param campus_id: 园区id
        :param priv_id: 权限id
        :param user_id: 操作人id(不填默认appCode)
        """
        return self._top_request(
            "alibaba.campus.acl.deletepermission",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "priv_id": priv_id,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_updaterole(
            self,
            system_id,
            campus_id,
            role_id,
            company_id='',
            role_desc='',
            role_name='',
            user_id=''
    ):
        """
        修改角色
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32225

        :param system_id: 系统id
        :param campus_id: 园区id
        :param role_id: 角色id
        :param company_id: 公司id不填统一为SYS_000
        :param role_desc: 角色描述
        :param role_name: 角色名称
        :param user_id: 操作人id
        """
        return self._top_request(
            "alibaba.campus.acl.updaterole",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "role_id": role_id,
                "company_id": company_id,
                "role_desc": role_desc,
                "role_name": role_name,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_cancelpermiitemfromrole(
            self,
            system_id,
            campus_id,
            param1,
            param2,
            company_id='',
            user_id=''
    ):
        """
        取消角色和权限之间的关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32226

        :param system_id: 系统id
        :param campus_id: 园区id
        :param param1: 系统自动生成
        :param param2: 系统自动生成
        :param company_id: 公司ID
        :param user_id: 操作人id(不填默认appCode)
        """
        return self._top_request(
            "alibaba.campus.acl.cancelpermiitemfromrole",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "param1": param1,
                "param2": param2,
                "company_id": company_id,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_grantrolestouser(
            self,
            company_id,
            system_id,
            campus_id,
            account_id,
            roles=None,
            user_id=''
    ):
        """
        角色授予给人员
        将角色授予给人
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32227

        :param company_id: 公司Id
        :param system_id: 系统id
        :param campus_id: 园区ID
        :param account_id: 用户账号
        :param roles: 系统自动生成
        :param user_id: 操作人id(不填默认appCode)
        """
        return self._top_request(
            "alibaba.campus.acl.grantrolestouser",
            {
                "company_id": company_id,
                "system_id": system_id,
                "campus_id": campus_id,
                "account_id": account_id,
                "roles": roles,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_getemppermissionitem(
            self,
            account_id,
            param0=None
    ):
        """
        查询员工单独赋予的权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32228

        :param account_id: 用户id
        :param param0: 系统自动生成
        """
        return self._top_request(
            "alibaba.campus.acl.getemppermissionitem",
            {
                "account_id": account_id,
                "param0": param0
            }
        )

    def alibaba_campus_acl_deleterole(
            self,
            system_id,
            campus_id,
            role_id,
            company_id='',
            user_id=''
    ):
        """
        删除角色
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32229

        :param system_id: 系统id
        :param campus_id: 园区id
        :param role_id: 角色id
        :param company_id: 公司id不填统一SYS_000
        :param user_id: 操作人id
        """
        return self._top_request(
            "alibaba.campus.acl.deleterole",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "role_id": role_id,
                "company_id": company_id,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_queryroleandpriv(
            self,
            system_id,
            campus_id,
            company_id='',
            role_name='',
            role_type='',
            current_page='1',
            role_id='',
            limit='10',
            type='1'
    ):
        """
        分页查询角色
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32230

        :param system_id: 系统id
        :param campus_id: 园区id
        :param company_id: 公司id不填统一SYS_000
        :param role_name: 角色名称
        :param role_type: 角色类型
        :param current_page: 当前页
        :param role_id: 角色id
        :param limit: 每页显示多少条
        :param type: 1表示角色跟权限的关系,2表示角色跟权限组的关系(不填默认查询角色跟权限的关系)
        """
        return self._top_request(
            "alibaba.campus.acl.queryroleandpriv",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "company_id": company_id,
                "role_name": role_name,
                "role_type": role_type,
                "current_page": current_page,
                "role_id": role_id,
                "limit": limit,
                "type": type
            }
        )

    def alibaba_campus_acl_updategrantroletouser(
            self,
            company_id,
            system_id,
            campus_id,
            account_id,
            role,
            user_id=''
    ):
        """
        修改用户到角色关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32231

        :param company_id: 公司id
        :param system_id: 系统id
        :param campus_id: 园区id
        :param account_id: 用户账号
        :param role: 角色
        :param user_id: 操作人id(不填默认appCode)
        """
        return self._top_request(
            "alibaba.campus.acl.updategrantroletouser",
            {
                "company_id": company_id,
                "system_id": system_id,
                "campus_id": campus_id,
                "account_id": account_id,
                "role": role,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_queryallpermission(
            self,
            system_id,
            campus_id,
            priv_id='',
            priv_key='',
            priv_name='',
            priv_value='',
            priv_type=''
    ):
        """
        查询全部权限
        根据条件查询权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32232

        :param system_id: 系统id
        :param campus_id: 园区id
        :param priv_id: 权限主键id
        :param priv_key: 权限key
        :param priv_name: 权限名称
        :param priv_value: 权限值
        :param priv_type: 权限类型
        """
        return self._top_request(
            "alibaba.campus.acl.queryallpermission",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "priv_id": priv_id,
                "priv_key": priv_key,
                "priv_name": priv_name,
                "priv_value": priv_value,
                "priv_type": priv_type
            }
        )

    def alibaba_campus_acl_queryallrole(
            self,
            system_id,
            campus_id,
            company_id='',
            role_name='',
            role_type='',
            role_id=''
    ):
        """
        查询全部角色
        查询全部园区
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32233

        :param system_id: 系统id
        :param campus_id: 园区id
        :param company_id: 公司id不填统一SYS_000
        :param role_name: 角色名称
        :param role_type: 角色类型
        :param role_id: 角色id
        """
        return self._top_request(
            "alibaba.campus.acl.queryallrole",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "company_id": company_id,
                "role_name": role_name,
                "role_type": role_type,
                "role_id": role_id
            }
        )

    def alibaba_campus_acl_getpermissionbyroleid(
            self,
            system_id,
            campus_id,
            role_id,
            company_id=''
    ):
        """
        根据角色Id查询权限
        根据角色查询权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32234

        :param system_id: 系统id
        :param campus_id: 园区id
        :param role_id: 角色id
        :param company_id: 公司id
        """
        return self._top_request(
            "alibaba.campus.acl.getpermissionbyroleid",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "role_id": role_id,
                "company_id": company_id
            }
        )

    def alibaba_campus_acl_updatepermission(
            self,
            system_id,
            campus_id,
            priv_id,
            priv_key='',
            priv_value='',
            priv_name='',
            priv_type='normal',
            user_id=''
    ):
        """
        修改权限
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32235

        :param system_id: 系统id
        :param campus_id: 园区id
        :param priv_id: 权限id
        :param priv_key: 权限健
        :param priv_value: 权限值
        :param priv_name: 权限名称
        :param priv_type: 权限类型
        :param user_id: 操作人id(不填默认appCode)
        """
        return self._top_request(
            "alibaba.campus.acl.updatepermission",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "priv_id": priv_id,
                "priv_key": priv_key,
                "priv_value": priv_value,
                "priv_name": priv_name,
                "priv_type": priv_type,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_checkemppermissionitem(
            self,
            system_id,
            campus_id,
            account_id,
            item_key,
            company_id=''
    ):
        """
        校验用户是否有该权限
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32236

        :param system_id: 系统id
        :param campus_id: 园区id
        :param account_id: 用户id
        :param item_key: 权限key
        :param company_id: 公司id不填默认SYS_000
        """
        return self._top_request(
            "alibaba.campus.acl.checkemppermissionitem",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "account_id": account_id,
                "item_key": item_key,
                "company_id": company_id
            }
        )

    def alibaba_campus_acl_grantpermiitemstouser(
            self,
            system_id,
            campus_id,
            emp_id,
            company_id='',
            priv=None,
            user_id=''
    ):
        """
        给人直接授权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32237

        :param system_id: 系统id
        :param campus_id: 园区id
        :param emp_id: 用户id
        :param company_id: 公司id不填统一默认生成SYS_000
        :param priv: 权限
        :param user_id: 操作人id(不填默认appCode)
        """
        return self._top_request(
            "alibaba.campus.acl.grantpermiitemstouser",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "emp_id": emp_id,
                "company_id": company_id,
                "priv": priv,
                "user_id": user_id
            }
        )

    def alibaba_campus_acl_getrolebyempid(
            self,
            company_id,
            system_id,
            campus_id,
            param1
    ):
        """
        根据用户查询角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32239

        :param company_id: 公司id
        :param system_id: 系统id
        :param campus_id: 园区id
        :param param1: 用户id
        """
        return self._top_request(
            "alibaba.campus.acl.getrolebyempid",
            {
                "company_id": company_id,
                "system_id": system_id,
                "campus_id": campus_id,
                "param1": param1
            }
        )

    def alibaba_campus_acl_checkemprole(
            self,
            system_id,
            campus_id,
            account_id,
            item_key,
            company_id=''
    ):
        """
        校验用户是否有该角色
        校验用户是否有该权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32240

        :param system_id: 系统id
        :param campus_id: 园区id
        :param account_id: 员工账号
        :param item_key: 角色id
        :param company_id: 公司id不填默认为SYS_000
        """
        return self._top_request(
            "alibaba.campus.acl.checkemprole",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "account_id": account_id,
                "item_key": item_key,
                "company_id": company_id
            }
        )

    def alibaba_campus_acl_cancelpermisitemfromuser(
            self,
            system_id,
            campus_id,
            account_id,
            company_id='',
            permissions=None
    ):
        """
        撤销人员直接授予的权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32241

        :param system_id: 系统id
        :param campus_id: 园区id
        :param account_id: 账号id
        :param company_id: 公司id不填默认统一为SYS_000
        :param permissions: 系统自动生成
        """
        return self._top_request(
            "alibaba.campus.acl.cancelpermisitemfromuser",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "account_id": account_id,
                "company_id": company_id,
                "permissions": permissions
            }
        )

    def alibaba_campus_acl_cancelrolesfromuser(
            self,
            company_id,
            system_id,
            campus_id,
            account_id,
            role=None,
            user_id=''
    ):
        """
        撤销用户授予的角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32242

        :param company_id: 公司id
        :param system_id: 系统id
        :param campus_id: 园区id
        :param account_id: 用户账号
        :param role: 系统自动生成
        :param user_id: 操作人id(不填默认appCode)
        """
        return self._top_request(
            "alibaba.campus.acl.cancelrolesfromuser",
            {
                "company_id": company_id,
                "system_id": system_id,
                "campus_id": campus_id,
                "account_id": account_id,
                "role": role,
                "user_id": user_id
            }
        )

    def alibaba_campus_space_campus_getbyid(
            self,
            param0,
            param1=''
    ):
        """
        根据园区id获取园区信息
        HSF接口名称：com.alibaba.campus.api.space.service.top.CampusApiTopService
        HSF方法名称：getCampusById
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32380

        :param param0: 园区ID
        :param param1: 园区ID
        """
        return self._top_request(
            "alibaba.campus.space.campus.getbyid",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_device_getdeviceforquery(
            self,
            query,
            work_bench_context
    ):
        """
        下发设备的分页接口(无需AOP控制)
        下发设备的分页接口(发布在TOP上，connect调用，无需AOP控制)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32562

        :param query: 系统自动生成
        :param work_bench_context: 平台统一参数
        """
        return self._top_request(
            "alibaba.campus.device.getdeviceforquery",
            {
                "query": query,
                "work_bench_context": work_bench_context
            }
        )

    def alibaba_campus_acl_checkemphasapprole(
            self,
            company_id,
            campus_id,
            user_id,
            system_ids
    ):
        """
        校验appKey下是否有角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33165

        :param company_id: 公司id
        :param campus_id: 园区id
        :param user_id: 员工账号
        :param system_ids: 系统id
        """
        return self._top_request(
            "alibaba.campus.acl.checkemphasapprole",
            {
                "company_id": company_id,
                "campus_id": campus_id,
                "user_id": user_id,
                "system_ids": system_ids
            }
        )

    def alibaba_campus_acl_getmenubyempid(
            self,
            user_id,
            system_id,
            company_id,
            campus_id
    ):
        """
        查询用户的菜单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33207

        :param user_id: 账户id
        :param system_id: 系统id
        :param company_id: 公司id
        :param campus_id: 园区id
        """
        return self._top_request(
            "alibaba.campus.acl.getmenubyempid",
            {
                "user_id": user_id,
                "system_id": system_id,
                "company_id": company_id,
                "campus_id": campus_id
            }
        )

    def alibaba_rocky_trade_getRecords(
            self,
            accounts,
            page_no,
            page_size,
            date2,
            date1
    ):
        """
        获取银行交易记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33322

        :param accounts: 账号
        :param page_no: 页数
        :param page_size: 每页条数
        :param date2: 结束日期
        :param date1: 开始日期
        """
        return self._top_request(
            "alibaba.rocky.trade.getRecords",
            {
                "accounts": accounts,
                "page_no": page_no,
                "page_size": page_size,
                "date2": date2,
                "date1": date1
            },
            result_processor=lambda x: x["results"]
        )

    def alibaba_campus_space_unit_getlistwithattrbygroupid(
            self,
            group_id,
            context=None
    ):
        """
        根据空间分组id、ids查空间单元信息【带空间单元业务属性信息】
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33366

        :param group_id: 分组id
        :param context: 操作用户上下文
        """
        return self._top_request(
            "alibaba.campus.space.unit.getlistwithattrbygroupid",
            {
                "group_id": group_id,
                "context": context
            }
        )

    def alibaba_campus_space_unit_getspaceunitlistwithattr(
            self,
            context=None,
            unit_query=None
    ):
        """
        空间单元列表带业务属性实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33367

        :param context: 操作用户上下文
        :param unit_query: 空间单元查询对象
        """
        return self._top_request(
            "alibaba.campus.space.unit.getspaceunitlistwithattr",
            {
                "context": context,
                "unit_query": unit_query
            }
        )

    def alibaba_campus_space_unit_getspaceunitwithattr(
            self,
            space_unit_id,
            context=None
    ):
        """
        空间单元id查业务属性实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33368

        :param space_unit_id: 空间单元id
        :param context: 操作用户上下文
        """
        return self._top_request(
            "alibaba.campus.space.unit.getspaceunitwithattr",
            {
                "space_unit_id": space_unit_id,
                "context": context
            }
        )

    def alibaba_campus_space_attr_setattr(
            self,
            context=None,
            list=None
    ):
        """
        新增业务属性实例接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33369

        :param context: 操作用户上下文
        :param list: 业务属性实例集合
        """
        return self._top_request(
            "alibaba.campus.space.attr.setattr",
            {
                "context": context,
                "list": list
            }
        )

    def alibaba_campus_space_group_getspacegrouplistwithattr(
            self,
            context=None,
            group_query=None
    ):
        """
        分页查询空间分组业务属性
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33370

        :param context: 操作用户上下文
        :param group_query: 查询对象
        """
        return self._top_request(
            "alibaba.campus.space.group.getspacegrouplistwithattr",
            {
                "context": context,
                "group_query": group_query
            }
        )

    def alibaba_campus_space_group_getspacegroupwithattr(
            self,
            group_id,
            context=None
    ):
        """
        空间分组id查业务属性实例
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33371

        :param group_id: 空间单元id
        :param context: 操作用户上下文
        """
        return self._top_request(
            "alibaba.campus.space.group.getspacegroupwithattr",
            {
                "group_id": group_id,
                "context": context
            }
        )

    def alibaba_campus_acl_getpagerole(
            self,
            system_id,
            campus_id,
            company_id='',
            param1=None
    ):
        """
        分页只查询角色列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33530

        :param system_id: 系统id
        :param campus_id: 园区id
        :param company_id: 公司id
        :param param1: 入参
        """
        return self._top_request(
            "alibaba.campus.acl.getpagerole",
            {
                "system_id": system_id,
                "campus_id": campus_id,
                "company_id": company_id,
                "param1": param1
            }
        )

    def alibaba_campus_adminmap_userlocationinfo_getuserlocationinfologs(
            self,
            param0,
            param1
    ):
        """
        分时间段获取用户历史位置信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33581

        :param param0: 环境参数
        :param param1: 查询参数
        """
        return self._top_request(
            "alibaba.campus.adminmap.userlocationinfo.getuserlocationinfologs",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_adminmap_userlocationinfo_getuserlocationinfosbybuildingandfloorid(
            self,
            param0,
            param1
    ):
        """
        根据楼宇+楼层（可选）查询实时人员记录
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        HSF接口名称：com.alibaba.campus.api.adminmap.service.top.UserLocationQueryApiTopService
        HSF方法名称：getUserLocationInfosByBuildingAndFloorId
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33582

        :param param0: 环境参数
        :param param1: 查询参数
        """
        return self._top_request(
            "alibaba.campus.adminmap.userlocationinfo.getuserlocationinfosbybuildingandfloorid",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_adminmap_userlocationinfo_getusercountbybuildingandfloorid(
            self,
            building_id,
            param0=None,
            geo_floor_id='',
            floor_id=''
    ):
        """
        根据楼宇+楼层（可选）查询实时人数
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        HSF接口名称：com.alibaba.campus.api.adminmap.service.top.UserLocationQueryApiTopService
        HSF方法名称：getUserCountByBuildingAndFloorId
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33583

        :param building_id: 公司id
        :param param0: 环境参数
        :param geo_floor_id: 高德楼层id
        :param floor_id: 楼层id
        """
        return self._top_request(
            "alibaba.campus.adminmap.userlocationinfo.getusercountbybuildingandfloorid",
            {
                "building_id": building_id,
                "param0": param0,
                "geo_floor_id": geo_floor_id,
                "floor_id": floor_id
            }
        )

    def alibaba_campus_adminmap_userlocationinfo_getactualuserlocationinfobyids(
            self,
            param0,
            param1=None
    ):
        """
        根据userId(支持单个或批量)获取用户实时位置信息
        HSF接口名称：com.alibaba.campus.api.adminmap.service.top.UserLocationQueryApiTopService
        HSF方法名称：getActualUserLocationInfoByIds
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33584

        :param param0: 环境参数
        :param param1: 查询参数
        """
        return self._top_request(
            "alibaba.campus.adminmap.userlocationinfo.getactualuserlocationinfobyids",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_adminmap_userlocationinfo_insertactualuserlocationinfo(
            self,
            param0,
            param1
    ):
        """
        上传用户实时位置
        HSF接口名称：com.alibaba.campus.api.adminmap.service.top.UserLocationQueryApiTopService
        HSF方法名称：insertActualUserLocationInfo
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33585

        :param param0: 环境参数
        :param param1: 查询参数
        """
        return self._top_request(
            "alibaba.campus.adminmap.userlocationinfo.insertactualuserlocationinfo",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_device_openapi_gethistorydata(
            self,
            work_bench_context,
            query
    ):
        """
        查询设备历史数据
        查询历史数据的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33813

        :param work_bench_context: 请求端信息
        :param query: 历史数据查询对象
        """
        return self._top_request(
            "alibaba.campus.device.openapi.gethistorydata",
            {
                "work_bench_context": work_bench_context,
                "query": query
            }
        )

    def alibaba_campus_device_openapi_feedbackeventinfo(
            self,
            param0,
            param1
    ):
        """
        IVS事件处理反馈接口
        提供给第三方ISV的的事件信息处理反馈的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33997

        :param param0: 系统上下文
        :param param1: 请求封装类
        """
        return self._top_request(
            "alibaba.campus.device.openapi.feedbackeventinfo",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_device_openapi_saveeventinfoforibos(
            self,
            param0=None,
            param1=None
    ):
        """
        saveeventinfoforibos
        IBos的事件信息上报与反馈的处理接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34773

        :param param0: 系统自动生成
        :param param1: 系统自动生成
        """
        return self._top_request(
            "alibaba.campus.device.openapi.saveeventinfoforibos",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_adminmap_poiinfo_getlistbygroup(
            self,
            context=None,
            query=None
    ):
        """
        根据分组条件查询分组下的空间单元不包涵业务属性信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35293

        :param context: 上下文
        :param query: 查询对象
        """
        return self._top_request(
            "alibaba.campus.adminmap.poiinfo.getlistbygroup",
            {
                "context": context,
                "query": query
            }
        )

    def alibaba_campus_acl_querypagerole(
            self,
            work_bench_context,
            page_role_param
    ):
        """
        分页查询多个应用的角色
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35877

        :param work_bench_context: 公共入参
        :param page_role_param: 角色分页查询入参
        """
        return self._top_request(
            "alibaba.campus.acl.querypagerole",
            {
                "work_bench_context": work_bench_context,
                "page_role_param": page_role_param
            }
        )

    def alibaba_campus_acl_pageuserrolerefs(
            self,
            work_bench_context=None,
            page_emp_role_param=None
    ):
        """
        分页查询多个应用的管理员
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35920

        :param work_bench_context: 公共入参
        :param page_emp_role_param: 条件参数
        """
        return self._top_request(
            "alibaba.campus.acl.pageuserrolerefs",
            {
                "work_bench_context": work_bench_context,
                "page_emp_role_param": page_emp_role_param
            }
        )

    def alibaba_campus_space_floor_getbyid(
            self,
            context,
            id
    ):
        """
        根据id获取楼层
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36387

        :param context: 环境上下文
        :param id: 楼层id
        """
        return self._top_request(
            "alibaba.campus.space.floor.getbyid",
            {
                "context": context,
                "id": id
            }
        )

    def alibaba_campus_acl_adduserroleref(
            self,
            param0=None,
            param1=None
    ):
        """
        用户可以添加多个应用的角色
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37046

        :param param0: 系统入参
        :param param1: 入参
        """
        return self._top_request(
            "alibaba.campus.acl.adduserroleref",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_acl_updateuserroleref(
            self,
            param0=None,
            param1=None
    ):
        """
        修改用户和角色的关系(支持多个应用)
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37047

        :param param0: 系统入参
        :param param1: 入参
        """
        return self._top_request(
            "alibaba.campus.acl.updateuserroleref",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_acl_deleteuserroles(
            self,
            param0=None,
            param1=None
    ):
        """
        删除用户和角色的关系(支持多应用)
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37048

        :param param0: 系统入参
        :param param1: 入参
        """
        return self._top_request(
            "alibaba.campus.acl.deleteuserroles",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_acl_pageuserrolegrantlog(
            self,
            param0=None,
            param1=None
    ):
        """
        分页查询用户授权记录
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37049

        :param param0: 系统入参
        :param param1: 入参
        """
        return self._top_request(
            "alibaba.campus.acl.pageuserrolegrantlog",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_acl_new_checkuserrole(
            self,
            user_id,
            role_key,
            workbenchcontext
    ):
        """
        校验用户是否有角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37468

        :param user_id: 用户账号
        :param role_key: 角色key
        :param workbenchcontext: 系统入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.checkuserrole",
            {
                "user_id": user_id,
                "role_key": role_key,
                "workbenchcontext": workbenchcontext
            }
        )

    def alibaba_campus_acl_new_checkuserpermission(
            self,
            check_user_permission_param,
            workbenchcontext=None
    ):
        """
        校验用户是否有权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37469

        :param check_user_permission_param: 接口入参
        :param workbenchcontext: 系统入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.checkuserpermission",
            {
                "check_user_permission_param": check_user_permission_param,
                "workbenchcontext": workbenchcontext
            }
        )

    def alibaba_campus_acl_new_getappmenutree(
            self,
            workbenchcontext=None,
            withpermission='false'
    ):
        """
        查询应用下的菜单树
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37470

        :param workbenchcontext: 系统入参
        :param withpermission: 是否关联查询出菜单下的权限
        """
        return self._top_request(
            "alibaba.campus.acl.new.getappmenutree",
            {
                "workbenchcontext": workbenchcontext,
                "withpermission": withpermission
            }
        )

    def alibaba_campus_acl_new_listusermenu(
            self,
            user_id,
            workbenchcontext=None
    ):
        """
        查询用户有权限的菜单树
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37471

        :param user_id: 用户账号
        :param workbenchcontext: 系统入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.listusermenu",
            {
                "user_id": user_id,
                "workbenchcontext": workbenchcontext
            }
        )

    def alibaba_campus_acl_new_removerole(
            self,
            role_id,
            param0=None
    ):
        """
        删除角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37479

        :param role_id: 角色主键id
        :param param0: 系统入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.removerole",
            {
                "role_id": role_id,
                "param0": param0
            }
        )

    def alibaba_campus_acl_new_getrolebyid(
            self,
            id,
            workbenchcontxt=None
    ):
        """
        根据角色id查询角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37480

        :param id: 主键id
        :param workbenchcontxt: 系统入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.getrolebyid",
            {
                "id": id,
                "workbenchcontxt": workbenchcontxt
            }
        )

    def alibaba_campus_acl_new_getrolewithmenutreenodes(
            self,
            role_id,
            workbenchcontext,
            all_permission='true'
    ):
        """
        根据角色id查询权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37481

        :param role_id: 角色id
        :param workbenchcontext: 系统参数
        :param all_permission: 是否查询全部类型权限
        """
        return self._top_request(
            "alibaba.campus.acl.new.getrolewithmenutreenodes",
            {
                "role_id": role_id,
                "workbenchcontext": workbenchcontext,
                "all_permission": all_permission
            }
        )

    def alibaba_campus_acl_new_saverolewithmenu(
            self,
            tree_node_ids,
            workbenchcontext=None,
            sys_role_d_t_o=None
    ):
        """
        保存角色级联保存角色和权限的关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37482

        :param tree_node_ids: 菜单id,权限id
        :param workbenchcontext: 系统入参
        :param sys_role_d_t_o: 系统自动生成
        """
        return self._top_request(
            "alibaba.campus.acl.new.saverolewithmenu",
            {
                "tree_node_ids": tree_node_ids,
                "workbenchcontext": workbenchcontext,
                "sys_role_d_t_o": sys_role_d_t_o
            }
        )

    def alibaba_campus_acl_new_pageroles(
            self,
            workbenchcontext,
            roleparam
    ):
        """
        分页查询角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37485

        :param workbenchcontext: 系统入参
        :param roleparam: 角色入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.pageroles",
            {
                "workbenchcontext": workbenchcontext,
                "roleparam": roleparam
            }
        )

    def alibaba_campus_acl_new_listuserroles(
            self,
            workbenchcontext=None,
            param=None
    ):
        """
        查询并标记用户选择的角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37486

        :param workbenchcontext: 系统入参
        :param param: 入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.listuserroles",
            {
                "workbenchcontext": workbenchcontext,
                "param": param
            }
        )

    def alibaba_campus_acl_new_updateuserrole(
            self,
            user_role_ref_param,
            workbenchcontext=None
    ):
        """
        修改管理员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37487

        :param user_role_ref_param: 入参
        :param workbenchcontext: 系统入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.updateuserrole",
            {
                "user_role_ref_param": user_role_ref_param,
                "workbenchcontext": workbenchcontext
            }
        )

    def alibaba_campus_acl_new_adduserrole(
            self,
            workbenchcontext=None,
            user_role_ref_param=None
    ):
        """
        新增管理员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37488

        :param workbenchcontext: 系统入参
        :param user_role_ref_param: 入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.adduserrole",
            {
                "workbenchcontext": workbenchcontext,
                "user_role_ref_param": user_role_ref_param
            }
        )

    def alibaba_campus_acl_new_freezerole(
            self,
            workbenchcontext,
            role_id
    ):
        """
        冻结角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37489

        :param workbenchcontext: 系统入参
        :param role_id: 角色主键id
        """
        return self._top_request(
            "alibaba.campus.acl.new.freezerole",
            {
                "workbenchcontext": workbenchcontext,
                "role_id": role_id
            }
        )

    def alibaba_campus_acl_new_unfreezerole(
            self,
            workbenchcontext,
            role_id
    ):
        """
        解冻角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37490

        :param workbenchcontext: 系统参数
        :param role_id: 角色主键id
        """
        return self._top_request(
            "alibaba.campus.acl.new.unfreezerole",
            {
                "workbenchcontext": workbenchcontext,
                "role_id": role_id
            }
        )

    def alibaba_campus_acl_new_deleteuserrole(
            self,
            workbenchcontext,
            user_id,
            role_ids=''
    ):
        """
        删除管理员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37491

        :param workbenchcontext: 系统入参
        :param user_id: 用户账号
        :param role_ids: 角色id
        """
        return self._top_request(
            "alibaba.campus.acl.new.deleteuserrole",
            {
                "workbenchcontext": workbenchcontext,
                "user_id": user_id,
                "role_ids": role_ids
            }
        )

    def alibaba_campus_acl_new_listroles(
            self,
            workbenchcontext,
            rolequeryparam=None
    ):
        """
        查询全部角色
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37509

        :param workbenchcontext: 系统入参
        :param rolequeryparam: 入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.listroles",
            {
                "workbenchcontext": workbenchcontext,
                "rolequeryparam": rolequeryparam
            }
        )

    def alibaba_campus_acl_new_pageuserrole(
            self,
            workbenchcontext,
            users_role_query_param
    ):
        """
        分页查询管理员
        新增用户和角色的关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37549

        :param workbenchcontext: 系统入参
        :param users_role_query_param: 入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.pageuserrole",
            {
                "workbenchcontext": workbenchcontext,
                "users_role_query_param": users_role_query_param
            }
        )

    def alibaba_campus_device_openapi_getsimpledevicelist(
            self,
            work_bench_context,
            query
    ):
        """
        查询设备基础信息集合(仅包含设备id,code,是否启用,位置信息,描述等基础信息)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37986

        :param work_bench_context: 请求发送端信息
        :param query: 多条件查询对象
        """
        return self._top_request(
            "alibaba.campus.device.openapi.getsimpledevicelist",
            {
                "work_bench_context": work_bench_context,
                "query": query
            }
        )

    def alibaba_campus_device_openapi_getsimpledevice(
            self,
            work_bench_context,
            uuid
    ):
        """
        获取单个设备的基础信息(仅包含设备id,code,是否启用,位置信息,描述等基础信息)
        获取指定设备的基础信息(仅包含设备id,code,是否启用,位置信息,描述等基础信息)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37987

        :param work_bench_context: 请求发送端信息
        :param uuid: 设备uuid
        """
        return self._top_request(
            "alibaba.campus.device.openapi.getsimpledevice",
            {
                "work_bench_context": work_bench_context,
                "uuid": uuid
            }
        )

    def alibaba_campus_space_type_getbycode(
            self,
            param0=None,
            type_code=''
    ):
        """
        根据类别编码查询类别
        HSF接口名称：com.alibaba.campus.space.api.top.SpaceTypeApiTopService
        HSF方法名称：getByCode
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38131

        :param param0: 查询条件封装
        :param type_code: 空间类别编码
        """
        return self._top_request(
            "alibaba.campus.space.type.getbycode",
            {
                "param0": param0,
                "type_code": type_code
            }
        )

    def alibaba_campus_core_companycampus_getcombycamid(
            self,
            param0=None
    ):
        """
        根据园区ID获取运营公司信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38197

        :param param0: WorkBenchContext
        """
        return self._top_request(
            "alibaba.campus.core.companycampus.getcombycamid",
            {
                "param0": param0
            }
        )

    def alibaba_campus_device_openapi_gettemplatelist(
            self,
            query=None
    ):
        """
        查询设备模板
        查询设备模板信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38253

        :param query: 设备模板查询对象
        """
        return self._top_request(
            "alibaba.campus.device.openapi.gettemplatelist",
            {
                "query": query
            }
        )

    def alibaba_campus_cardconsume_order_create(
            self,
            context=None,
            consume_log_dto=None
    ):
        """
        createorderfood
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        供应商系统下单时将订单数据同步未来餐厅
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38586

        :param context: 上下文
        :param consume_log_dto: 订单信息
        """
        return self._top_request(
            "alibaba.campus.cardconsume.order.create",
            {
                "context": context,
                "consume_log_dto": consume_log_dto
            }
        )

    def alibaba_campus_cardconsume_order_message(
            self,
            context=None,
            detail=None
    ):
        """
        changeorderstatus
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        供应商订单状态变化发钉钉消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38587

        :param context: 上下文
        :param detail: 详细信息
        """
        return self._top_request(
            "alibaba.campus.cardconsume.order.message",
            {
                "context": context,
                "detail": detail
            }
        )

    def alibaba_campus_core_app_getappusages(
            self,
            appid,
            work_bench_context=None
    ):
        """
        根据应用ID获得应用所在的园区
        传入应用的id,  获得用户授权的园区
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38723

        :param appid: 应用id
        :param work_bench_context: WorkBenchContext
        """
        return self._top_request(
            "alibaba.campus.core.app.getappusages",
            {
                "appid": appid,
                "work_bench_context": work_bench_context
            }
        )

    def alibaba_campus_space_type_getpageresult(
            self,
            param0,
            param1
    ):
        """
        分页查询空间类别接口
        HSF接口名称：com.alibaba.campus.space.api.top.SpaceTypeApiTopService
        HSF方法名称：getPageResult
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38749

        :param param0: 环境参数
        :param param1: 查询参数
        """
        return self._top_request(
            "alibaba.campus.space.type.getpageresult",
            {
                "param0": param0,
                "param1": param1
            }
        )

    def alibaba_campus_acl_new_checkusermenu(
            self,
            workbenchcontext=None,
            param=None
    ):
        """
        校验用户是否有菜单权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38903

        :param workbenchcontext: 系统入参
        :param param: 入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.checkusermenu",
            {
                "workbenchcontext": workbenchcontext,
                "param": param
            }
        )

    def alibaba_campus_guard_data_sync(
            self,
            data_type='',
            supplier_name='',
            data=''
    ):
        """
        卡巴数据同步
        数据同步门禁系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39231

        :param data_type: 1-刷卡流水
        :param supplier_name: 供应商名称
        :param data: json串
        """
        return self._top_request(
            "alibaba.campus.guard.data.sync",
            {
                "data_type": data_type,
                "supplier_name": supplier_name,
                "data": data
            }
        )

    def alibaba_campus_acl_new_listuserbymenu(
            self,
            menu_url,
            context=None
    ):
        """
        查询菜单下的人员
        查询拥有菜单权限的用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39250

        :param menu_url: /workbench/space/application
        :param context: 系统入参
        """
        return self._top_request(
            "alibaba.campus.acl.new.listuserbymenu",
            {
                "menu_url": menu_url,
                "context": context
            }
        )

    def alibaba_campus_device_historydata_get(
            self,
            work_bench_context=None,
            query=None
    ):
        """
        设备历史数据批量获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39847

        :param work_bench_context: workbench
        :param query: 查询条件
        """
        return self._top_request(
            "alibaba.campus.device.historydata.get",
            {
                "work_bench_context": work_bench_context,
                "query": query
            }
        )

    def alibaba_campus_core_employee_modifyemployee(
            self,
            work_bench_context,
            employee_dto,
            account_id
    ):
        """
        修改员工基本信息
        根据用户ID和公司ID更新员工基本信息（头像、性别、昵称）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40363

        :param work_bench_context: WorkBenchContext
        :param employee_dto: EmployeeDto
        :param account_id: 用户ID
        """
        return self._top_request(
            "alibaba.campus.core.employee.modifyemployee",
            {
                "work_bench_context": work_bench_context,
                "employee_dto": employee_dto,
                "account_id": account_id
            }
        )


class TbJiuDianHuiYuan(DingTalkBaseAPI):
    """
    酒店会员API
    """

    def taobao_xhotel_member_bind_query(
            self,
            page_size='',
            start='',
            enroll_date_end='',
            seller_id='',
            enroll_date_start=''
    ):
        """
        会员绑定查询接口
        提供酒店会员绑定信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30753

        :param page_size: 每页数量
        :param start: 起始值
        :param enroll_date_end: 注册截止时间
        :param seller_id: 卖家ID
        :param enroll_date_start: 注册起始时间
        """
        return self._top_request(
            "taobao.xhotel.member.bind.query",
            {
                "page_size": page_size,
                "start": start,
                "enroll_date_end": enroll_date_end,
                "seller_id": seller_id,
                "enroll_date_start": enroll_date_start
            }
        )

    def taobao_xhotel_potential_member_bind(
            self,
            first_name,
            last_name,
            phone,
            card_no,
            email='',
            grade='',
            register_date='',
            from_date='',
            to_date='',
            sex='',
            city='',
            age='',
            native_place=''
    ):
        """
        飞猪酒店商家会员绑定
        支持互通商家发起会员绑定
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34020

        :param first_name: 名
        :param last_name: 姓
        :param phone: 电话
        :param card_no: 卡号
        :param email: 邮箱
        :param grade: 等级(V1,V2,V3)
        :param register_date: 注册时间
        :param from_date: 生效时间
        :param to_date: 截止时间
        :param sex: 性别(M,F,U-未知)
        :param city: 城市
        :param age: 年龄
        :param native_place: 籍贯
        """
        return self._top_request(
            "taobao.xhotel.potential.member.bind",
            {
                "first_name": first_name,
                "last_name": last_name,
                "phone": phone,
                "card_no": card_no,
                "email": email,
                "grade": grade,
                "register_date": register_date,
                "from_date": from_date,
                "to_date": to_date,
                "sex": sex,
                "city": city,
                "age": age,
                "native_place": native_place
            },
            result_processor=lambda x: x["is_success"]
        )


class TbDaMai(DingTalkBaseAPI):
    """
    大麦API
    """

    def alibaba_damai_ec_search_project_search(
            self,
            param=None
    ):
        """
        大麦电商对外搜索服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39475

        :param param: 入参对象
        """
        return self._top_request(
            "alibaba.damai.ec.search.project.search",
            {
                "param": param
            }
        )


class TbPinPaiHaoApi(DingTalkBaseAPI):
    """
    品牌号api
    """

    def tmall_brandhub_link_get(
            self,
            seller_id,
            type
    ):
        """
        获取品牌号相关链接
        根据链接类型分别返回：
        1：返回站点页url
        2：返回品牌名片url
        3：会员主页url
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30949

        :param seller_id: 商家id
        :param type: url类型
        """
        return self._top_request(
            "tmall.brandhub.link.get",
            {
                "seller_id": seller_id,
                "type": type
            },
            result_processor=lambda x: x["resp"]
        )

    def tmall_brandhub_user_get(
            self
    ):
        """
        获取品牌号商家信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取品牌号基础信息，包括品牌名称、品牌logo(长、方)、品牌故事、品牌档案等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31009

        """
        return self._top_request(
            "tmall.brandhub.user.get",
            result_processor=lambda x: x["data"]
        )

    def tmall_brandhub_services_get(
            self,
            division_code='',
            coordina=''
    ):
        """
        获取预约服务列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取品牌号预约服务列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31029

        :param division_code: 地址邮编
        :param coordina: 用户坐标
        """
        return self._top_request(
            "tmall.brandhub.services.get",
            {
                "division_code": division_code,
                "coordina": coordina
            },
            result_processor=lambda x: x["value"]
        )

    def tmall_brandhub_shops_get(
            self
    ):
        """
        获取关联店铺信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取品牌号关联的店铺信息，包括店铺名称，店铺id，店铺商家id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31031

        """
        return self._top_request(
            "tmall.brandhub.shops.get",
            result_processor=lambda x: x["data"]
        )

    def tmall_brandhub_contents_get(
            self,
            page='1',
            size='20'
    ):
        """
        获取个人主页动态列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取品牌号相关内容动态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31032

        :param page: 页码
        :param size: 每页条数
        """
        return self._top_request(
            "tmall.brandhub.contents.get",
            {
                "page": page,
                "size": size
            },
            result_processor=lambda x: x["list"]
        )

    def tmall_brandhub_tlives_get(
            self
    ):
        """
        获取直播列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31033

        """
        return self._top_request(
            "tmall.brandhub.tlives.get",
            result_processor=lambda x: x["model"]
        )

    def tmall_brandhub_items_get(
            self,
            page=''
    ):
        """
        获取商品列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取品牌号已授权关联店铺的商品列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31058

        :param page: 页码
        """
        return self._top_request(
            "tmall.brandhub.items.get",
            {
                "page": page
            },
            result_processor=lambda x: x["data"]
        )

    def tmall_brandhub_member_get(
            self,
            user_nick
    ):
        """
        获取会员信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取会员信息，包含对应的品牌id，品牌名称，会员等级，logo等
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31059

        :param user_nick: mixnick
        """
        return self._top_request(
            "tmall.brandhub.member.get",
            {
                "user_nick": user_nick
            },
            result_processor=lambda x: x["data"]
        )

    def tmall_brandhub_equity_guesswhat_get(
            self,
            guess_id
    ):
        """
        获取猜图寻宝权益信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取猜图寻宝活动列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31069

        :param guess_id: 活动id
        """
        return self._top_request(
            "tmall.brandhub.equity.guesswhat.get",
            {
                "guess_id": guess_id
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_interact_fairyland_mediasnapshot(
            self,
            fileid='1',
            num='1'
    ):
        """
        视频截图服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        视频上传时用于自动截图
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31577

        :param fileid: fileid
        :param num: 1
        """
        return self._top_request(
            "alibaba.interact.fairyland.mediasnapshot",
            {
                "fileid": fileid,
                "num": num
            },
            result_processor=lambda x: x["data"]
        )


class TbHuanHuo(DingTalkBaseAPI):
    """
    换货API
    """

    def tmall_exchange_get(
            self,
            dispute_id,
            fields
    ):
        """
        获取单笔换货详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31194

        :param dispute_id: 换货单号ID
        :param fields: 返回字段。目前支持dispute_id, bizorder_id, num, buyer_nick, status, created, modified, reason, title, buyer_logistic_no, seller_logistic_no, bought_sku, exchange_sku, buyer_address, address, buyer_phone, buyer_logistic_name, seller_logistic_name, alipay_no, buyer_name, seller_nick
        """
        return self._top_request(
            "tmall.exchange.get",
            {
                "dispute_id": dispute_id,
                "fields": fields
            }
        )

    def tmall_exchange_receive_get(
            self,
            fields,
            end_gmt_modifed_time='',
            start_gmt_modified_time='',
            logistic_no='',
            buyer_nick='',
            start_created_time='',
            page_size='30',
            dispute_status_array='',
            end_created_time='',
            buyer_id='',
            refund_id_array='',
            page_no='1',
            biz_order_id=''
    ):
        """
        卖家查询换货列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31198

        :param fields: 返回字段。目前支持dispute_id, bizorder_id, num, buyer_nick, status, created, modified, reason, title, buyer_logistic_no, seller_logistic_no, bought_sku, exchange_sku, buyer_address, address, buyer_phone, buyer_logistic_name, seller_logistic_name, alipay_no, buyer_name, seller_nick
        :param end_gmt_modifed_time: 查询修改时间段的结束时间点
        :param start_gmt_modified_time: 查询修改时间段的开始时间点
        :param logistic_no: 快递单号
        :param buyer_nick: 买家昵称
        :param start_created_time: 查询申请时间段的开始时间点
        :param page_size: 每页条数
        :param dispute_status_array: 换货状态，具体包括：换货待处理(1), 待买家退货(2), 买家已退货，待收货(3),  换货关闭(4), 换货成功(5), 待买家修改(6), 待发出换货商品(12), 待买家收货(13), 请退款(14)
        :param end_created_time: 查询申请时间段的结束时间点
        :param buyer_id: 买家id
        :param refund_id_array: 退款单号ID列表，最多只能输入20个id
        :param page_no: 页码
        :param biz_order_id: 正向订单号
        """
        return self._top_request(
            "tmall.exchange.receive.get",
            {
                "fields": fields,
                "end_gmt_modifed_time": end_gmt_modifed_time,
                "start_gmt_modified_time": start_gmt_modified_time,
                "logistic_no": logistic_no,
                "buyer_nick": buyer_nick,
                "start_created_time": start_created_time,
                "page_size": page_size,
                "dispute_status_array": dispute_status_array,
                "end_created_time": end_created_time,
                "buyer_id": buyer_id,
                "refund_id_array": refund_id_array,
                "page_no": page_no,
                "biz_order_id": biz_order_id
            }
        )

    def tmall_exchange_returngoods_agree(
            self,
            dispute_id,
            fields
    ):
        """
        卖家确认收货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31199

        :param dispute_id: 换货单号ID
        :param fields: 返回字段。目前支持dispute_id（换货单号ID）,bizorder_id（正向交易单号ID）, modified（订单修改时间）, status（当前换货状态）
        """
        return self._top_request(
            "tmall.exchange.returngoods.agree",
            {
                "dispute_id": dispute_id,
                "fields": fields
            }
        )

    def tmall_exchange_message_add(
            self,
            content,
            dispute_id,
            fields,
            message_pics=''
    ):
        """
        卖家创建换货留言
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31200

        :param content: 留言内容
        :param dispute_id: 换货单号ID
        :param fields: 返回字段。目前支持id,refund_id,owner_id,owner_nick,owner_role,content,pic_urls,created,message_type
        :param message_pics: 凭证图片列表
        """
        return self._top_request(
            "tmall.exchange.message.add",
            {
                "content": content,
                "dispute_id": dispute_id,
                "fields": fields,
                "message_pics": message_pics
            }
        )

    def tmall_exchange_messages_get(
            self,
            dispute_id,
            fields,
            operator_roles='',
            page_size='10',
            page_no='1'
    ):
        """
        查询换货订单留言列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31201

        :param dispute_id: 换货单号ID
        :param fields: 返回的字段。具体包括：id,refund_id,owner_id,owner_nick,owner_role,content,pic_urls,created,message_type
        :param operator_roles: 留言创建角色。具体包括：卖家主账户(1)、卖家子账户(2)、小二(3)、买家(4)、系统(5)、系统超时(6)
        :param page_size: 每页条数
        :param page_no: 页码
        """
        return self._top_request(
            "tmall.exchange.messages.get",
            {
                "dispute_id": dispute_id,
                "fields": fields,
                "operator_roles": operator_roles,
                "page_size": page_size,
                "page_no": page_no
            }
        )

    def tmall_exchange_agree(
            self,
            address_id,
            dispute_id,
            fields,
            post='',
            leave_message_pics='',
            leave_message='',
            complete_address='',
            mobile=''
    ):
        """
        卖家同意换货申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31202

        :param address_id: 收货地址id，如需获取请调用该top接口：taobao.logistics.address.search，对应属性为contact_id
        :param dispute_id: 换货单号ID
        :param fields: 返回字段。当前支持的有 dispute_id, bizorder_id, modified, status
        :param post: 邮政编码
        :param leave_message_pics: 上传图片举证
        :param leave_message: 卖家留言
        :param complete_address: 详细收货地址
        :param mobile: 收货人手机号
        """
        return self._top_request(
            "tmall.exchange.agree",
            {
                "address_id": address_id,
                "dispute_id": dispute_id,
                "fields": fields,
                "post": post,
                "leave_message_pics": leave_message_pics,
                "leave_message": leave_message,
                "complete_address": complete_address,
                "mobile": mobile
            }
        )

    def tmall_exchange_refuse(
            self,
            dispute_id,
            seller_refuse_reason_id,
            fields,
            leave_message_pics='',
            leave_message=''
    ):
        """
        卖家拒绝换货申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31203

        :param dispute_id: 换货单号ID
        :param seller_refuse_reason_id: 换货原因对应ID
        :param fields: 返回字段。目前支持dispute_id, bizorder_id, modified, status
        :param leave_message_pics: 凭证图片
        :param leave_message: 拒绝换货申请时的留言
        """
        return self._top_request(
            "tmall.exchange.refuse",
            {
                "dispute_id": dispute_id,
                "seller_refuse_reason_id": seller_refuse_reason_id,
                "fields": fields,
                "leave_message_pics": leave_message_pics,
                "leave_message": leave_message
            }
        )

    def tmall_exchange_returngoods_refuse(
            self,
            dispute_id,
            seller_refuse_reason_id,
            leave_message_pics='',
            leave_message=''
    ):
        """
        卖家拒绝确认收货
        卖家拒绝买家换货申请
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31204

        :param dispute_id: 换货单号ID
        :param seller_refuse_reason_id: 拒绝原因ID
        :param leave_message_pics: 凭证图片
        :param leave_message: 留言说明
        """
        return self._top_request(
            "tmall.exchange.returngoods.refuse",
            {
                "dispute_id": dispute_id,
                "seller_refuse_reason_id": seller_refuse_reason_id,
                "leave_message_pics": leave_message_pics,
                "leave_message": leave_message
            }
        )

    def tmall_exchange_refusereason_get(
            self,
            dispute_id,
            fields,
            dispute_type=''
    ):
        """
        获取拒绝换货原因列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31214

        :param dispute_id: 换货单号ID
        :param fields: 返回字段
        :param dispute_type: 换货申请类型：0-任意类型；1-售中；2-售后
        """
        return self._top_request(
            "tmall.exchange.refusereason.get",
            {
                "dispute_id": dispute_id,
                "fields": fields,
                "dispute_type": dispute_type
            }
        )

    def tmall_exchange_consigngoods(
            self,
            dispute_id,
            logistics_no,
            logistics_type,
            logistics_company_name,
            fields
    ):
        """
        卖家发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31229

        :param dispute_id: 换货单号ID
        :param logistics_no: 卖家发货的物流单号
        :param logistics_type: 卖家发货的物流类型，100表示平邮，200表示快递
        :param logistics_company_name: 卖家发货的快递公司
        :param fields: 返回字段
        """
        return self._top_request(
            "tmall.exchange.consigngoods",
            {
                "dispute_id": dispute_id,
                "logistics_no": logistics_no,
                "logistics_type": logistics_type,
                "logistics_company_name": logistics_company_name,
                "fields": fields
            }
        )


class TbShangJiaYingXiaoZhongXin(DingTalkBaseAPI):
    """
    商家营销中心API
    """

    def taobao_collocation_collocation_query(
            self,
            query_param
    ):
        """
        套餐条件查询接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        搭配宝套餐的条件查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31123

        :param query_param: 查询套餐对象
        """
        return self._top_request(
            "taobao.collocation.collocation.query",
            {
                "query_param": query_param
            }
        )

    def taobao_collocation_combo_delete(
            self,
            collocation_id
    ):
        """
        搭配宝套餐的删除接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        商家管理套餐的删除API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31129

        :param collocation_id: 套餐id
        """
        return self._top_request(
            "taobao.collocation.combo.delete",
            {
                "collocation_id": collocation_id
            }
        )

    def taobao_collocation_combo_get(
            self,
            collocation_id
    ):
        """
        搭配宝单个套餐查询接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询搭配宝的单个套餐信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31135

        :param collocation_id: 套餐id
        """
        return self._top_request(
            "taobao.collocation.combo.get",
            {
                "collocation_id": collocation_id
            }
        )

    def taobao_collocation_combo_create(
            self,
            collocation_create_query_dto=None
    ):
        """
        搭配宝创建套餐接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        搭配宝套餐创建功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31142

        :param collocation_create_query_dto: 查询参数
        """
        return self._top_request(
            "taobao.collocation.combo.create",
            {
                "collocation_create_query_dto": collocation_create_query_dto
            }
        )

    def taobao_collocation_combo_edit(
            self,
            collocation_create_query_dto=None
    ):
        """
        搭配宝套餐编辑接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        搭配宝套餐创建功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31150

        :param collocation_create_query_dto: 查询参数
        """
        return self._top_request(
            "taobao.collocation.combo.edit",
            {
                "collocation_create_query_dto": collocation_create_query_dto
            }
        )

    def taobao_singletreasure_activity_item_batchadd(
            self,
            item_detail_info
    ):
        """
        批量添加商品接口
        向活动中批量添加商品优惠
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31339

        :param item_detail_info: 系统入参
        """
        return self._top_request(
            "taobao.singletreasure.activity.item.batchadd",
            {
                "item_detail_info": item_detail_info
            }
        )

    def taobao_singletreasure_activity_item_batchupdate(
            self,
            item_detail_info
    ):
        """
        批量修改商品接口
        批量修改商品优惠接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31341

        :param item_detail_info: 系统入参
        """
        return self._top_request(
            "taobao.singletreasure.activity.item.batchupdate",
            {
                "item_detail_info": item_detail_info
            }
        )

    def taobao_singletreasure_activity_update(
            self,
            activity_info
    ):
        """
        修改活动接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31350

        :param activity_info: 系统入参
        """
        return self._top_request(
            "taobao.singletreasure.activity.update",
            {
                "activity_info": activity_info
            }
        )

    def taobao_singletreasure_activity_delete(
            self,
            activity_id
    ):
        """
        删除活动接口
        删除优惠活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31351

        :param activity_id: 活动Id
        """
        return self._top_request(
            "taobao.singletreasure.activity.delete",
            {
                "activity_id": activity_id
            }
        )

    def taobao_singletreasure_activity_create(
            self,
            activity_info
    ):
        """
        活动创建接口
        创建优惠活动
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31352

        :param activity_info: 系统入参
        """
        return self._top_request(
            "taobao.singletreasure.activity.create",
            {
                "activity_info": activity_info
            }
        )

    def taobao_singletreasure_activity_item_delete(
            self,
            activity_id,
            item_id
    ):
        """
        删除单品优惠接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31362

        :param activity_id: 活动id
        :param item_id: 商品Id
        """
        return self._top_request(
            "taobao.singletreasure.activity.item.delete",
            {
                "activity_id": activity_id,
                "item_id": item_id
            }
        )

    def taobao_singletreasure_activity_item_update(
            self,
            item_detail_info=None
    ):
        """
        更新单品优惠接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31363

        :param item_detail_info: 修改接口的入参对象
        """
        return self._top_request(
            "taobao.singletreasure.activity.item.update",
            {
                "item_detail_info": item_detail_info
            }
        )

    def taobao_singletreasure_activity_query(
            self,
            query
    ):
        """
        查询活动列表接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31364

        :param query: 查询对象
        """
        return self._top_request(
            "taobao.singletreasure.activity.query",
            {
                "query": query
            }
        )

    def taobao_singletreasure_activity_item_query(
            self,
            activity_id,
            page_size,
            page_number
    ):
        """
        查询活动下的优惠信息
        分页查询活动下的商品优惠信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31365

        :param activity_id: 活动Id
        :param page_size: 页大小
        :param page_number: 页码
        """
        return self._top_request(
            "taobao.singletreasure.activity.item.query",
            {
                "activity_id": activity_id,
                "page_size": page_size,
                "page_number": page_number
            }
        )

    def taobao_singletreasure_activity_name_query(
            self
    ):
        """
        查询官方的活动名称接口
        查询官方的活动名称列表接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31366

        """
        return self._top_request(
            "taobao.singletreasure.activity.name.query"
        )


class TbICBURFQ(DingTalkBaseAPI):
    """
    ICBU－RFQ
    """

    def alibaba_icbu_rfq_search(
            self,
            md5key='8cb02c2c9cf4e4fbefe4a77e4e5f31b4',
            cond=None
    ):
        """
        查询RFQ
        用于查询RFQ的信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32084

        :param md5key: 验证
        :param cond: 查询条件
        """
        return self._top_request(
            "alibaba.icbu.rfq.search",
            {
                "md5key": md5key,
                "cond": cond
            }
        )

    def alibaba_icbu_rfqdetail_get(
            self,
            md5key='8cb02c2c9cf4e4fbefe4a77e4e5f31b4',
            rfq_query_dto=None
    ):
        """
        获取RFQ详情
        查看RFQ的详情信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32086

        :param md5key: 验证
        :param rfq_query_dto: 查询RFQ详情DTO
        """
        return self._top_request(
            "alibaba.icbu.rfqdetail.get",
            {
                "md5key": md5key,
                "rfq_query_dto": rfq_query_dto
            }
        )

    def alibaba_icbu_quotation_post(
            self,
            md5key='8cb02c2c9cf4e4fbefe4a77e4e5f31b4',
            dto=None
    ):
        """
        供应商提交报价
        供应商对RFQ进行报价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32101

        :param md5key: 验证
        :param dto: 报价DTO
        """
        return self._top_request(
            "alibaba.icbu.quotation.post",
            {
                "md5key": md5key,
                "dto": dto
            }
        )

    def alibaba_icbu_annex_upload(
            self,
            file_name,
            file_input_stream_bytes,
            source
    ):
        """
        上传附件获取附件files_str
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40805

        :param file_name: 文件名
        :param file_input_stream_bytes: 文件字节流
        :param source: 来源
        """
        return self._top_request(
            "alibaba.icbu.annex.upload",
            {
                "file_name": file_name,
                "file_input_stream_bytes": file_input_stream_bytes,
                "source": source
            }
        )

    def alibaba_icbu_rfq_myequity(
            self
    ):
        """
        我的权益
        查询供应商权益接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40865

        """
        return self._top_request(
            "alibaba.icbu.rfq.myequity",
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_icbu_rfq_recommend(
            self,
            query_dto
    ):
        """
        rfq推荐
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42211

        :param query_dto: 入参数据
        """
        return self._top_request(
            "alibaba.icbu.rfq.recommend",
            {
                "query_dto": query_dto
            }
        )

    def alibaba_icbu_rfq_read(
            self,
            rfq_id_list
    ):
        """
        是否已读RFQ
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42604

        :param rfq_id_list: 查询RFQID列表
        """
        return self._top_request(
            "alibaba.icbu.rfq.read",
            {
                "rfq_id_list": rfq_id_list
            }
        )


class TbICBUXinBao(DingTalkBaseAPI):
    """
    ICBU－信保
    """

    def alibaba_icbu_trade_assurance_account_get(
            self
    ):
        """
        icbu信保账户信息
        icbu交易信用保障开通状态&额度信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31686

        """
        return self._top_request(
            "alibaba.icbu.trade.assurance.account.get",
            result_processor=lambda x: x["assurance_account_result"]
        )


class TbFeiZhuPOIShuJu(DingTalkBaseAPI):
    """
    飞猪POI数据API
    """

    def alitrip_platform_poi_raw_feed(
            self,
            param0=None
    ):
        """
        存储poi原始数据
        对接外部数据源，外部数据推送poi数据到飞猪
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40634

        :param param0: poi存储参数
        """
        return self._top_request(
            "alitrip.platform.poi.raw.feed",
            {
                "param0": param0
            }
        )


class TbFeiZhuXingZhengQuHua(DingTalkBaseAPI):
    """
    飞猪行政区划API
    """

    def alitrip_platform_divisions_getdivisionbyname(
            self,
            name='',
            level=''
    ):
        """
        根据中文名称与行政区划级别查询行政区划数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31375

        :param name: 行政区划名称
        :param level: 行政区划级别ALL(0, '全部'),  	CONTINENT(1, '大洲'),  	COUNTRY(2, '国家'),  	PROVINCE(3, '省份'),  	CITY(4, '城市'),  	DISTRICT(5, '区县'),  	STREET(6, '街道')
        """
        return self._top_request(
            "alitrip.platform.divisions.getdivisionbyname",
            {
                "name": name,
                "level": level
            },
            result_processor=lambda x: x["results"]
        )


class TbFenSiPa(DingTalkBaseAPI):
    """
    粉丝趴API
    """

    def tmall_fansparty_fansday_matter_get(
            self,
            seller_id,
            act_id,
            usernick=''
    ):
        """
        获取素材信息
        获取粉丝趴活动商家基础素材
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31608

        :param seller_id: 商家id
        :param act_id: 活动id
        :param usernick: 用户名称
        """
        return self._top_request(
            "tmall.fansparty.fansday.matter.get",
            {
                "seller_id": seller_id,
                "act_id": act_id,
                "usernick": usernick
            },
            result_processor=lambda x: x["data"]
        )


class TbLingShouZhongDuan(DingTalkBaseAPI):
    """
    零售终端API
    """

    def alibaba_ascp_inventory_query(
            self,
            inv_single_item_sync_dto
    ):
        """
        商品库存查询接口
        新零售联盟商家库存查询接口，用于商家商品库存数量感知查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35424

        :param inv_single_item_sync_dto: 系统自动生成
        """
        return self._top_request(
            "alibaba.ascp.inventory.query",
            {
                "inv_single_item_sync_dto": inv_single_item_sync_dto
            }
        )

    def alibaba_ascp_inventory_sync(
            self,
            inv_single_item_sync_dto
    ):
        """
        库存同步接口
        新零售联盟商家库存同步接口，用于商家商品库存数量同步到阿里系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35425

        :param inv_single_item_sync_dto: 库存同步DTO
        """
        return self._top_request(
            "alibaba.ascp.inventory.sync",
            {
                "inv_single_item_sync_dto": inv_single_item_sync_dto
            }
        )

    def tmall_nrt_easyhomemember_syn(
            self,
            param
    ):
        """
        会员信息同
        居然之家将会员信息同步到零售中台 包含基本的会员信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38132

        :param param: 入参
        """
        return self._top_request(
            "tmall.nrt.easyhomemember.syn",
            {
                "param": param
            }
        )

    def tmall_nrt_coupon_get(
            self,
            param
    ):
        """
        卡券领取
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        第三方服务提供第三方服务的用户标识和卡券信息通过零售中台获取卡券
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38151

        :param param: 入参
        """
        return self._top_request(
            "tmall.nrt.coupon.get",
            {
                "param": param
            }
        )

    def tmall_nrt_branddetail_query(
            self,
            brand_id=''
    ):
        """
        品牌详情查询
        根据品牌id查询品牌的详细信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39971

        :param brand_id: 品牌id
        """
        return self._top_request(
            "tmall.nrt.branddetail.query",
            {
                "brand_id": brand_id
            },
            result_processor=lambda x: x["data"]
        )

    def tmall_nrt_brandinfo_query(
            self
    ):
        """
        品牌数据查询
        商家获取自己旗舰店授权的品牌id列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39983

        """
        return self._top_request(
            "tmall.nrt.brandinfo.query",
            result_processor=lambda x: x["datas"]
        )

    def alibaba_retail_device_vending_register(
            self,
            device_name,
            address,
            biz_code,
            device_uuid,
            device_model,
            device_sn='',
            scene='',
            site_name='',
            floor='',
            layer='',
            location=''
    ):
        """
        贩卖机设备注册
        贩卖机注册
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42299

        :param device_name: 设备名称
        :param address: 设备地址
        :param biz_code: 业务编码，联系对接人申请
        :param device_uuid: 外部设备编号
        :param device_model: 设备类型
        :param device_sn: 对接过阿里atm传入
        :param scene: COMMUNITY：小区,SCHOOL：学校,OFFICE：写字楼,SHOPPING_MALL：商场,AIRPORT：机场,SUBWAY：地铁,HOSPITAL：医院,PLAYGROUNDS：游乐场所,FACTORY：工厂,VIEWPOINT：旅游景点,OTHERS：其他
        :param site_name: 场地名称，根据场地类型来，如：学校名称，商场名称。如果不传系统会根据address传入计算，为确保准确性请传入并确保address完整
        :param floor: 楼栋信息。如果不传系统会根据address传入计算，为确保准确性请传入并确保address完整
        :param layer: 层。如果不传系统会根据address传入计算，为确保准确性请传入并确保address完整
        :param location: 室内地址描述。如果不传系统会根据address传入计算，为确保准确性请传入并确保address完整
        """
        return self._top_request(
            "alibaba.retail.device.vending.register",
            {
                "device_name": device_name,
                "address": address,
                "biz_code": biz_code,
                "device_uuid": device_uuid,
                "device_model": device_model,
                "device_sn": device_sn,
                "scene": scene,
                "site_name": site_name,
                "floor": floor,
                "layer": layer,
                "location": location
            }
        )

    def alibaba_retail_vending_road_item_sync(
            self,
            road_item_sync=None
    ):
        """
        贩卖机库存商品同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42408

        :param road_item_sync: 入参
        """
        return self._top_request(
            "alibaba.retail.vending.road.item.sync",
            {
                "road_item_sync": road_item_sync
            }
        )


class TbALiOSYingYongZhongXin(DingTalkBaseAPI):
    """
    ALiOS应用中心
    """

    def yunos_appstore_channellist_query(
            self,
            pkgs
    ):
        """
        应用查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        通过包名列表查询应用信息列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32092

        :param pkgs: 包名
        """
        return self._top_request(
            "yunos.appstore.channellist.query",
            {
                "pkgs": pkgs
            },
            result_processor=lambda x: x["channels"]
        )

    def yunos_appstore_teddy_appinfo_query(
            self,
            package_name
    ):
        """
        向泰迪短信开放查询服务
        向泰迪短信开放查询服务，通过包名查询app信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32151

        :param package_name: 包名
        """
        return self._top_request(
            "yunos.appstore.teddy.appinfo.query",
            {
                "package_name": package_name
            }
        )

    def yunos_appstore_pad_hp_applist(
            self,
            code=''
    ):
        """
        查询HpPad appList
        提供hp pad应用群数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32152

        :param code: 获取的应用群code
        """
        return self._top_request(
            "yunos.appstore.pad.hp.applist",
            {
                "code": code
            },
            result_processor=lambda x: x["results"]
        )

    def yunos_appstore_apps_get(
            self,
            pkgs
    ):
        """
        根据包名列表获取应用信息列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35428

        :param pkgs: 应用包名列表
        """
        return self._top_request(
            "yunos.appstore.apps.get",
            {
                "pkgs": pkgs
            },
            result_processor=lambda x: x["app_info_list"]
        )

    def yunos_appstore_ad_list_ireaderget(
            self,
            uuid='',
            model='',
            page_id='ireader-ad',
            exclude_pkgs='',
            size='20',
            exclude_cats='星座算命,听书,漫画,学习,小说,腾讯未分类,斗地主,麻将,桌游,棋类,牌类'
    ):
        """
        获取广告列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        给掌阅提供广告列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35799

        :param uuid: 设备uuid
        :param model: 机型
        :param page_id: 页面id
        :param exclude_pkgs: 排除名包列表
        :param size: 获取多少广告
        :param exclude_cats: 排除分类列表
        """
        return self._top_request(
            "yunos.appstore.ad.list.ireaderget",
            {
                "uuid": uuid,
                "model": model,
                "page_id": page_id,
                "exclude_pkgs": exclude_pkgs,
                "size": size,
                "exclude_cats": exclude_cats
            },
            result_processor=lambda x: x["results"]
        )

    def yunos_appstore_open_reportad(
            self,
            trace_ids,
            time,
            action,
            client_ver_code,
            device_id
    ):
        """
        外投广告上报接口
        外投广告回流上报接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37932

        :param trace_ids: 广告跟踪id列表
        :param time: 事件时间，当前毫秒数
        :param action: 事件类型：0 代表曝光事件；1 代表点击下载事件；2 代表下载完成事件；3 代表安装完成事件
        :param client_ver_code: 客户端版本号
        :param device_id: 客户端设备标识
        """
        return self._top_request(
            "yunos.appstore.open.reportad",
            {
                "trace_ids": trace_ids,
                "time": time,
                "action": action,
                "client_ver_code": client_ver_code,
                "device_id": device_id
            }
        )

    def yunos_appstore_open_getads(
            self,
            case_id,
            ssp,
            fee_type,
            client_ip,
            client_ver_code,
            device_id,
            size,
            rid='',
            cats='',
            exclude_install='true',
            pkgs='',
            try_map_to_uuid='false',
            exclude_pkgs='',
            exclude_cats='',
            template_ids='',
            mrp='0',
            options=''
    ):
        """
        获取外投广告
        将广告外投给外部合作伙伴
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37933

        :param case_id: 场景或页面标识
        :param ssp: ssp标识
        :param fee_type: 结算类型
        :param client_ip: 客户端来源ip
        :param client_ver_code: 客户端版本号
        :param device_id: 设备唯一标识
        :param size: 广告数量
        :param rid: 请求id
        :param cats: 指定广告分类
        :param exclude_install: 是否排除已安装
        :param pkgs: 广告指定包名
        :param try_map_to_uuid: 是否映射到uuid
        :param exclude_pkgs: 排除包名列表
        :param exclude_cats: 排除分类
        :param template_ids: 创意模板id列表
        :param mrp: 广告底价
        :param options: 请求特征集
        """
        return self._top_request(
            "yunos.appstore.open.getads",
            {
                "case_id": case_id,
                "ssp": ssp,
                "fee_type": fee_type,
                "client_ip": client_ip,
                "client_ver_code": client_ver_code,
                "device_id": device_id,
                "size": size,
                "rid": rid,
                "cats": cats,
                "exclude_install": exclude_install,
                "pkgs": pkgs,
                "try_map_to_uuid": try_map_to_uuid,
                "exclude_pkgs": exclude_pkgs,
                "exclude_cats": exclude_cats,
                "template_ids": template_ids,
                "mrp": mrp,
                "options": options
            }
        )


class TbB2bRenZhengPingTaiApi(DingTalkBaseAPI):
    """
    b2b认证平台api
    """

    def alibaba_auth_cert_get(
            self,
            provider,
            receive_info
    ):
        """
        获取证书数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32288

        :param provider: 认证商
        :param receive_info: 证书数据
        """
        return self._top_request(
            "alibaba.auth.cert.get",
            {
                "provider": provider,
                "receive_info": receive_info
            }
        )


class TbQiYeYunYingPingTaiJiTuanCaiWu(DingTalkBaseAPI):
    """
    企业运营平台-集团财务
    """

    def alibaba_fpm_file_upload(
            self,
            biz_dto
    ):
        """
        结算单文件上传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33937

        :param biz_dto: 实体
        """
        return self._top_request(
            "alibaba.fpm.file.upload",
            {
                "biz_dto": biz_dto
            }
        )

    def alibaba_tax_invoice_apply(
            self,
            appcode='',
            taxsign='',
            time='',
            apply_invoice_content=''
    ):
        """
        申请销项发票
        支持钉钉业务开具纸质销项发票（并非使用钉钉开票）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38403

        :param appcode: 调用方
        :param taxsign: 签名
        :param time: 时间戳
        :param apply_invoice_content: 内容
        """
        return self._top_request(
            "alibaba.tax.invoice.apply",
            {
                "appcode": appcode,
                "taxsign": taxsign,
                "time": time,
                "apply_invoice_content": apply_invoice_content
            }
        )


class TbRARHuiLiu(DingTalkBaseAPI):
    """
    RAR回流
    """

    def taobao_rar_customer_sync(
            self,
            messages
    ):
        """
        RAR会员数据回流
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        1.RAR会员数据回流
        2.建议每次传输条目不超过100条，报文长度不超过100kb
        3.该接口不支持删除
        4.商家账号id+customerId唯一确定一条数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32301

        :param messages: 会员信息列表，size控制在100以内
        """
        return self._top_request(
            "taobao.rar.customer.sync",
            {
                "messages": messages
            }
        )

    def taobao_rar_store_sync(
            self,
            messages
    ):
        """
        RAR数据回流store
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        rar一期数据回流接口，回流门店store数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32310

        :param messages: 门店数据列表，size在100以内
        """
        return self._top_request(
            "taobao.rar.store.sync",
            {
                "messages": messages
            }
        )

    def taobao_rar_ops_query(
            self,
            id
    ):
        """
        回流数据查询接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        查询回流数据，单条记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32311

        :param id: 查询条件
        """
        return self._top_request(
            "taobao.rar.ops.query",
            {
                "id": id
            }
        )

    def taobao_rar_order_sync(
            self,
            messages
    ):
        """
        rar一期订单回流
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        rar一期回流订单数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32440

        :param messages: 会员订单msg对象
        """
        return self._top_request(
            "taobao.rar.order.sync",
            {
                "messages": messages
            }
        )

    def taobao_rar_product_sync(
            self,
            messages=None
    ):
        """
        rar一期商品回流
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        rar一期商品数据回流接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32449

        :param messages: 报文对象，长度在100内
        """
        return self._top_request(
            "taobao.rar.product.sync",
            {
                "messages": messages
            }
        )


class TbLingShouTongZhiNengPOSKaiFang(DingTalkBaseAPI):
    """
    零售通智能POS开放
    """

    def alibaba_lst_pos_open_inventory_getinventorydata(
            self,
            isv_goods_id_list,
            user_id
    ):
        """
        商品库存只读接口(最多20条库存信息)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32942

        :param isv_goods_id_list: ISV商品Id列表
        :param user_id: 门店主账号Id
        """
        return self._top_request(
            "alibaba.lst.pos.open.inventory.getinventorydata",
            {
                "isv_goods_id_list": isv_goods_id_list,
                "user_id": user_id
            }
        )

    def alibaba_lst_pos_open_cashier_synccashierdata(
            self,
            cashier_flow_d_t_o_list,
            user_id
    ):
        """
        收银快照同步接口(最多10条订单信息)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32943

        :param cashier_flow_d_t_o_list: 订单对象列表
        :param user_id: 门店对应的主账号id
        """
        return self._top_request(
            "alibaba.lst.pos.open.cashier.synccashierdata",
            {
                "cashier_flow_d_t_o_list": cashier_flow_d_t_o_list,
                "user_id": user_id
            }
        )

    def alibaba_lst_pos_open_inventory_syncinventorydata(
            self,
            inventory_d_t_o_list,
            user_id
    ):
        """
        商品库存修改同步接口(最多20条库存信息)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32944

        :param inventory_d_t_o_list: 库存对象列表
        :param user_id: 门店对应的主账号id
        """
        return self._top_request(
            "alibaba.lst.pos.open.inventory.syncinventorydata",
            {
                "inventory_d_t_o_list": inventory_d_t_o_list,
                "user_id": user_id
            }
        )

    def alibaba_lst_pos_open_account_checkissettled(
            self,
            user_id
    ):
        """
        校验当前用户是否入驻了零售通门店接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32945

        :param user_id: 当前登录主账号userId
        """
        return self._top_request(
            "alibaba.lst.pos.open.account.checkissettled",
            {
                "user_id": user_id
            }
        )

    def alibaba_lst_pos_open_goods_getgoodsbypaging(
            self,
            page,
            user_id
    ):
        """
        分页查询用户全量的门店域商品接口(每页最多20条)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32946

        :param page: 当前页码
        :param user_id: 当前主账号userId
        """
        return self._top_request(
            "alibaba.lst.pos.open.goods.getgoodsbypaging",
            {
                "page": page,
                "user_id": user_id
            }
        )

    def alibaba_lst_pos_open_goods_syncgoodsdata(
            self,
            goods_d_t_o_list,
            user_id
    ):
        """
        门店商品批量同步接口(最多10条商品信息)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32947

        :param goods_d_t_o_list: 商品对象列表
        :param user_id: 用户主账号Id
        """
        return self._top_request(
            "alibaba.lst.pos.open.goods.syncgoodsdata",
            {
                "goods_d_t_o_list": goods_d_t_o_list,
                "user_id": user_id
            }
        )

    def alibaba_lst_pos_open_goods_getgoodsbybarcode(
            self,
            barcode
    ):
        """
        ISV条码库查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32948

        :param barcode: 商品条码
        """
        return self._top_request(
            "alibaba.lst.pos.open.goods.getgoodsbybarcode",
            {
                "barcode": barcode
            }
        )

    def alibaba_lst_pos_tradeflow_query(
            self,
            user_id,
            key,
            start_date='',
            end_date=''
    ):
        """
        pos流水查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38666

        :param user_id: 用户id
        :param key: appKey
        :param start_date: 开始日期
        :param end_date: 结束日期
        """
        return self._top_request(
            "alibaba.lst.pos.tradeflow.query",
            {
                "user_id": user_id,
                "key": key,
                "start_date": start_date,
                "end_date": end_date
            }
        )

    def alibaba_lst_pos_tradegoods_query(
            self,
            user_id='',
            start_date='',
            end_date='',
            key=''
    ):
        """
        pos商品快照查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        pos根据userId查询商品快照
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38667

        :param user_id: 用户id
        :param start_date: 开始日期
        :param end_date: 结束日期
        :param key: appKey
        """
        return self._top_request(
            "alibaba.lst.pos.tradegoods.query",
            {
                "user_id": user_id,
                "start_date": start_date,
                "end_date": end_date,
                "key": key
            }
        )


class TbALiBaBaGongYingLianPingTai(DingTalkBaseAPI):
    """
    阿里巴巴供应链平台API
    """

    def alibaba_ascp_qcc_sample_update(
            self,
            update_request
    ):
        """
        品控中心更新样品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32778

        :param update_request: 更新请求参数
        """
        return self._top_request(
            "alibaba.ascp.qcc.sample.update",
            {
                "update_request": update_request
            }
        )

    def alibaba_ascp_qcc_sample_cancel_item_relation(
            self,
            cancel_request
    ):
        """
        魅力惠样品解除父子商品关系
        品控中心魅力惠样品解除父子商品关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32779

        :param cancel_request: 请求参数对象
        """
        return self._top_request(
            "alibaba.ascp.qcc.sample.cancel.item.relation",
            {
                "cancel_request": cancel_request
            }
        )


class TbTianMaoXinLingShou(DingTalkBaseAPI):
    """
    天猫新零售
    """

    def tmall_nr_pay_deduct(
            self,
            tid,
            store_order_id,
            utdid,
            pay_fee,
            pay_channel,
            store_code,
            current_transaction_id,
            pay_time,
            biz_identity,
            operator_id='',
            channel_code='',
            small_change='0',
            buyer_id='0'
    ):
        """
        发起支付/同步支付流水
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32811

        :param tid: 淘系交易订单号
        :param store_order_id: 线下门店交易单号
        :param utdid: 收银设备唯一ID（也可以是唯一编号）
        :param pay_fee: 线下实付款金额，单位为分，例如订单金额128.07元，抹零后为128.1元，透传的金额为12810。
        :param pay_channel: 支付渠道标识，枚举类型包括: 1.	微信支付（wechat_pay） 2.	支付宝支付（alipay） 3.	银联支付（bank_card） 4.	线下储值卡支付（deposit_card） 5.	现金支付（cash）。 6.	其他(other)
        :param store_code: 门店编码
        :param current_transaction_id: 线下支付流水号，用来唯一关联一次线下支付操作
        :param pay_time: 线下支付操作完成时间，时间格式按照“yyyy-MM-dd HH:mm:ss”格式来输入
        :param biz_identity: 业务身份标识
        :param operator_id: 线下收款操作员标识
        :param channel_code: 付款码、卡号等信息,例如支付宝付款码、微信付款码等。
        :param small_change: 线下支付抹零金额，单位为分，例如订单金额128.07元，按照四舍五入抹零规则，则抹零金额为增加0.03元，抹零导致实付款变少的场景值为负数。或者由线下门店提前在天猫端配置抹零规则，则该参数无需上传。
        :param buyer_id: 买家id
        """
        return self._top_request(
            "tmall.nr.pay.deduct",
            {
                "tid": tid,
                "store_order_id": store_order_id,
                "utdid": utdid,
                "pay_fee": pay_fee,
                "pay_channel": pay_channel,
                "store_code": store_code,
                "current_transaction_id": current_transaction_id,
                "pay_time": pay_time,
                "biz_identity": biz_identity,
                "operator_id": operator_id,
                "channel_code": channel_code,
                "small_change": small_change,
                "buyer_id": buyer_id
            }
        )

    def tmall_nr_order_create_sync(
            self,
            param0,
            buyer_id='0'
    ):
        """
        同步调用创建订单
        线下同步调用创建订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32882

        :param param0: 1
        :param buyer_id: 买家id
        """
        return self._top_request(
            "tmall.nr.order.create.sync",
            {
                "param0": param0,
                "buyer_id": buyer_id
            }
        )

    def tmall_nr_order_cancel(
            self,
            tid,
            store_order_id,
            store_code,
            biz_identity,
            buyer_id='0'
    ):
        """
        线下门店订单取消
        易果生鲜线下交易订单数据上翻，线下门店订单取消
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32883

        :param tid: 淘系交易订单ID
        :param store_order_id: 线下门店交易单号
        :param store_code: 门店code
        :param biz_identity: 业务身份标识
        :param buyer_id: 买家id
        """
        return self._top_request(
            "tmall.nr.order.cancel",
            {
                "tid": tid,
                "store_order_id": store_order_id,
                "store_code": store_code,
                "biz_identity": biz_identity,
                "buyer_id": buyer_id
            }
        )

    def tmall_nr_order_create_async(
            self,
            param0,
            buyer_id='0'
    ):
        """
        线下异步创建订单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32884

        :param param0: 1
        :param buyer_id: 用户id
        """
        return self._top_request(
            "tmall.nr.order.create.async",
            {
                "param0": param0,
                "buyer_id": buyer_id
            }
        )

    def tmall_nr_inventory_inventory_query(
            self,
            req_dto
    ):
        """
        查询商品门店库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32950

        :param req_dto: 入参
        """
        return self._top_request(
            "tmall.nr.inventory.inventory.query",
            {
                "req_dto": req_dto
            }
        )

    def tmall_nr_inventory_inventory_check(
            self,
            req_d_t_o
    ):
        """
        增量同步商品门店库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32951

        :param req_d_t_o: 1
        """
        return self._top_request(
            "tmall.nr.inventory.inventory.check",
            {
                "req_d_t_o": req_d_t_o
            }
        )

    def tmall_nr_item_price_sync(
            self,
            param0
    ):
        """
        同步商品门店价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32952

        :param param0: 入参
        """
        return self._top_request(
            "tmall.nr.item.price.sync",
            {
                "param0": param0
            }
        )

    def tmall_nr_fulfill_cancel_reason_query(
            self,
            seller_id='',
            main_order_id=''
    ):
        """
        查询取消履约的原因列表
        新零售门店业务查询取消上门揽件的原因列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33115

        :param seller_id: 商家的sellerID
        :param main_order_id: 淘宝交易的主订单号
        """
        return self._top_request(
            "tmall.nr.fulfill.cancel.reason.query",
            {
                "seller_id": seller_id,
                "main_order_id": main_order_id
            }
        )

    def tmall_nr_fulfill_cancel(
            self,
            req=None
    ):
        """
        取消上门揽件
        新零售门店业务取消上门揽件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33116

        :param req: 入参
        """
        return self._top_request(
            "tmall.nr.fulfill.cancel",
            {
                "req": req
            }
        )

    def tmall_nr_fulfill_logistics_consign(
            self,
            param0=None
    ):
        """
        同城配门店备货通知
        同城配业务备货通知，商家告诉平台门店的货已经准备好，可以发货了；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36936

        :param param0: 入参对象
        """
        return self._top_request(
            "tmall.nr.fulfill.logistics.consign",
            {
                "param0": param0
            }
        )

    def tmall_nr_fulfill_order_query(
            self,
            biz_identity='',
            order_id='',
            ext_param=''
    ):
        """
        零售商获取品牌商的单笔订单
        零售商获取品牌商的单笔订单，后端服务有零售商和品牌商的绑定关系，存在开关控制；返回值存在品牌方用户的电话号码，当前电话号码是屏蔽中间四位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36939

        :param biz_identity: 业务标识，dss标识定时送业务；jsd表示极速达业务
        :param order_id: 交易主订单号
        :param ext_param: 预留-扩展信息
        """
        return self._top_request(
            "tmall.nr.fulfill.order.query",
            {
                "biz_identity": biz_identity,
                "order_id": order_id,
                "ext_param": ext_param
            }
        )

    def tmall_nr_fulfill_logistics_query(
            self,
            main_order_id='',
            biz_identity=''
    ):
        """
        定时送和极速达配送物流信息查询
        发布定时送&极速达物流信息查询服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36949

        :param main_order_id: 交易主订单号
        :param biz_identity: 业务标识，dss标识定时送业务；jsd表示极速达业务
        """
        return self._top_request(
            "tmall.nr.fulfill.logistics.query",
            {
                "main_order_id": main_order_id,
                "biz_identity": biz_identity
            }
        )

    def tmall_nr_inventory_initial(
            self,
            param0=None
    ):
        """
        门店库存初始化前后端商品绑定
        用于门店业务的商品的初始化，前端商品和后端商品绑定，走后端库存模式
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37442

        :param param0: 请求入参
        """
        return self._top_request(
            "tmall.nr.inventory.initial",
            {
                "param0": param0
            }
        )

    def tmall_nr_inventory_update(
            self,
            param0=None
    ):
        """
        门店业务同步库存
        用于商家每日同步更新门店库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37447

        :param param0: 入参
        """
        return self._top_request(
            "tmall.nr.inventory.update",
            {
                "param0": param0
            }
        )

    def tmall_nr_order_confirm(
            self,
            param1,
            buyer_id='0'
    ):
        """
        确认订单价格
        贩卖机计算商品价格，用于透出给消费者；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37633

        :param param1: 请求参数
        :param buyer_id: 可用于透传的买家id，常用于外部技术体系的买家信息透传
        """
        return self._top_request(
            "tmall.nr.order.confirm",
            {
                "param1": param1,
                "buyer_id": buyer_id
            }
        )

    def tmall_nr_order_createandpay(
            self,
            param1,
            buyer_id='0'
    ):
        """
        创建订单并扣款
        针对b扫c模式贩卖机的商品以及贩卖机场景，并限定签约店铺； 消费者出示二维码后，贩卖机自动执行扣款
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37635

        :param param1: 业务请求参数
        :param buyer_id: 买家id，当需要感知外部技术体系的买家id时使用
        """
        return self._top_request(
            "tmall.nr.order.createandpay",
            {
                "param1": param1,
                "buyer_id": buyer_id
            }
        )

    def tmall_nr_order_deliver(
            self,
            param1,
            buyer_id='0'
    ):
        """
        门店订单商品交付
        门店订单商品交付，例如贩卖机场景下用于贩卖机设备通知天猫已经掉货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37636

        :param param1: 请求入参
        :param buyer_id: 买家id，常用于外部技术体系透传买家id
        """
        return self._top_request(
            "tmall.nr.order.deliver",
            {
                "param1": param1,
                "buyer_id": buyer_id
            }
        )

    def tmall_nr_notice_goods_ready(
            self,
            param0=None
    ):
        """
        同步天猫配送人员信息
        接收商家的配送人员信息，和第三公司信息及提货码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37939

        :param param0: 入参
        """
        return self._top_request(
            "tmall.nr.notice.goods.ready",
            {
                "param0": param0
            }
        )

    def tmall_nr_zqs_plan_query(
            self,
            detail_order_id
    ):
        """
        周期送配送明细查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37943

        :param detail_order_id: 交易子订单id
        """
        return self._top_request(
            "tmall.nr.zqs.plan.query",
            {
                "detail_order_id": detail_order_id
            }
        )

    def tmall_nr_fulfill_logistics_sync(
            self,
            param0
    ):
        """
        同城配物流信息回传
        同城配业务物流信息回传，通过接口将物流信息同步给天猫
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38370

        :param param0: 物流回传参数
        """
        return self._top_request(
            "tmall.nr.fulfill.logistics.sync",
            {
                "param0": param0
            }
        )

    def tmall_nr_order_querystatus(
            self,
            param1,
            buyer_id='0'
    ):
        """
        门店订单状态查询
        门店订单状态查询，如支付未决后轮训一段时候查询订单最终状态。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38516

        :param param1: 请求参数
        :param buyer_id: 可用于透传的买家id，常用于外部技术体系的买家信息透传
        """
        return self._top_request(
            "tmall.nr.order.querystatus",
            {
                "param1": param1,
                "buyer_id": buyer_id
            }
        )

    def tmall_nr_order_query_jst(
            self,
            biz_identity='',
            order_id='',
            ext_param=''
    ):
        """
        获取同城配送业务单笔订单
        同城配送业务获取单笔订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38901

        :param biz_identity: 业务标识，dss标识定时送业务；jsd表示极速达业务
        :param order_id: 交易主订单号
        :param ext_param: 预留-扩展信息
        """
        return self._top_request(
            "tmall.nr.order.query.jst",
            {
                "biz_identity": biz_identity,
                "order_id": order_id,
                "ext_param": ext_param
            }
        )

    def tmall_nr_sold_orderlist_query_jst(
            self,
            param0=None
    ):
        """
        已入塔商家查询订单列表
        该服务用于已入聚石塔的商家，获取订单列表信息；
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38902

        :param param0: 入参对象
        """
        return self._top_request(
            "tmall.nr.sold.orderlist.query.jst",
            {
                "param0": param0
            }
        )

    def tmall_nr_item_tag_ops(
            self,
            tag_req_d_t_o
    ):
        """
        区域零售商品打标去标
        参加区域零售的商品，需要批量打标或去标，方便后续设置商品库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41667

        :param tag_req_d_t_o: 请求入参
        """
        return self._top_request(
            "tmall.nr.item.tag.ops",
            {
                "tag_req_d_t_o": tag_req_d_t_o
            }
        )

    def tmall_nr_order_logis_info(
            self,
            seller_id,
            main_order_ids,
            channel
    ):
        """
        区域零售订单获取取件码
        区域零售订单获取取件码，方便商家系统接入，获取取件码打印信息进行打印。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41714

        :param seller_id: 卖家ID
        :param main_order_ids: 主订单号
        :param channel: 来源标识
        """
        return self._top_request(
            "tmall.nr.order.logis.info",
            {
                "seller_id": seller_id,
                "main_order_ids": main_order_ids,
                "channel": channel
            }
        )

    def tmall_nr_fulfill_sold_orderlist_query(
            self,
            param0=None
    ):
        """
        零售商获取品牌商的特定订单列表
        零售商获取品牌商的特定订单列表，后端服务有零售商和品牌商的绑定关系，存在开关控制；同时后端存在定时送业务等特殊业务的校验，非同城配送业务不能返回，返回值存在品牌方用户的电话号码，当前电话号码是屏蔽中间四位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36940

        :param param0: 入参对象
        """
        return self._top_request(
            "tmall.nr.fulfill.sold.orderlist.query",
            {
                "param0": param0
            }
        )


class TbDPAAS(DingTalkBaseAPI):
    """
    DPAAS
    """

    def taobao_qimen_dpaas_seller_authorize_get(
            self,
            token='',
            seller_id=''
    ):
        """
        商家授权详情获取
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        三方获取商家授权信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33307

        :param token: token
        :param seller_id: 授权商家id
        """
        return self._top_request(
            "taobao.qimen.dpaas.seller.authorize.get",
            {
                "token": token,
                "seller_id": seller_id
            },
            result_processor=lambda x: x["results"]
        )

    def taobao_qimen_passenger_sync(
            self,
            image_id,
            store_code,
            equipment_id,
            get_time,
            leave_time,
            type,
            is_vip,
            token,
            image_url='',
            face_id='',
            sex='',
            age='',
            image_data='',
            star='',
            phone_num=''
    ):
        """
        客流数据回流
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        客流数据回流,每次一条数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33315

        :param image_id: 图像流水ID
        :param store_code: 门店编码，与商户中心一致，与设备查询接口中返回的store_code保持一致
        :param equipment_id: 设备ID
        :param get_time: 图片采集时间
        :param leave_time: 游客离开视线时间
        :param type: 抓拍类型，0为正常 1为重复抓拍 2为店员
        :param is_vip: Y=会员，N=非会员
        :param token: 用户授权的token
        :param image_url: 图像下载URL
        :param face_id: 人脸ID
        :param sex: 性别，0=男，1=女，2=不确定
        :param age: 年龄
        :param image_data: 图片内容，与image_url选填
        :param star: 图片清晰度
        :param phone_num: 手机号码
        """
        return self._top_request(
            "taobao.qimen.passenger.sync",
            {
                "image_id": image_id,
                "store_code": store_code,
                "equipment_id": equipment_id,
                "get_time": get_time,
                "leave_time": leave_time,
                "type": type,
                "is_vip": is_vip,
                "token": token,
                "image_url": image_url,
                "face_id": face_id,
                "sex": sex,
                "age": age,
                "image_data": image_data,
                "star": star,
                "phone_num": phone_num
            }
        )

    def taobao_qimen_dpaas_equipment_get(
            self,
            seller_id,
            equipment_id=''
    ):
        """
        门店设备获取
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        服务商（瑞为），获取门店硬件设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33347

        :param seller_id: 卖家id
        :param equipment_id: 设备编码，服务商自定义
        """
        return self._top_request(
            "taobao.qimen.dpaas.equipment.get",
            {
                "seller_id": seller_id,
                "equipment_id": equipment_id
            },
            result_processor=lambda x: x["equipments"]
        )

    def taobao_qimen_dpaas_recognition_sync(
            self,
            customer_id,
            img_id,
            is_vip,
            img_path,
            get_time,
            face_id=''
    ):
        """
        DPAAS会员图片匹配结果回传API
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        会员图片匹配结果回传
        dpaas项目开放接口，用户回传会员图片匹配结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33377

        :param customer_id: 会员id，与服务商回传customer表中的 customer_id 保持一致
        :param img_id: 图片id
        :param is_vip: Y=会员，N=非会员
        :param img_path: 图片路径
        :param get_time: 图片时间
        :param face_id: 智能设备识别的人脸id
        """
        return self._top_request(
            "taobao.qimen.dpaas.recognition.sync",
            {
                "customer_id": customer_id,
                "img_id": img_id,
                "is_vip": is_vip,
                "img_path": img_path,
                "get_time": get_time,
                "face_id": face_id
            }
        )

    def taobao_qimen_dpaas_equipment_create(
            self,
            equipment_id,
            store_code,
            equipment_type,
            equipment_area,
            status
    ):
        """
        硬件设备信息回传
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        DPAAS平台开放接口
        商家CRM系统硬件设备信息回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33398

        :param equipment_id: 设备id，isv自定义
        :param store_code: 商户中心门店编码
        :param equipment_type: 摄像头=Camera，智能大屏=screen，云货架=shelf，其他=other
        :param equipment_area: 自命名所在区域，对于收银台和门口区域建议标明，如收银台正面1、收营台背面、门口1、门口2
        :param status: 设备状态，0为离线 1为在线 2为撤离
        """
        return self._top_request(
            "taobao.qimen.dpaas.equipment.create",
            {
                "equipment_id": equipment_id,
                "store_code": store_code,
                "equipment_type": equipment_type,
                "equipment_area": equipment_area,
                "status": status
            },
            result_processor=lambda x: x["result_code"]
        )

    def taobao_qimen_dpaas_customer_flow_get(
            self,
            store_code,
            get_time_start,
            get_time_end,
            equipment_id=''
    ):
        """
        客流及图片信息查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        服务商查询接口，查询线下回流的客流图片数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33409

        :param store_code: 门店编码，与商户中心门店编码保持一致
        :param get_time_start: 拍摄时间start
        :param get_time_end: 拍摄时间end
        :param equipment_id: 设备编码,，服务商自定义
        """
        return self._top_request(
            "taobao.qimen.dpaas.customer.flow.get",
            {
                "store_code": store_code,
                "get_time_start": get_time_start,
                "get_time_end": get_time_end,
                "equipment_id": equipment_id
            },
            result_processor=lambda x: x["customer_flows"]
        )

    def taobao_qimen_recognition_sync(
            self,
            customer_id,
            img_id,
            is_vip,
            face_id=''
    ):
        """
        DPAAS会员图片匹配结果回传API
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        会员图片匹配结果回传
        dpaas项目开放接口，用户回传会员图片匹配结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33416

        :param customer_id: 会员id，与服务商回传customer表中的 customer_id 保持一致
        :param img_id: 图片id
        :param is_vip: Y=会员，N=非会员
        :param face_id: 智能设备识别的人脸id
        """
        return self._top_request(
            "taobao.qimen.recognition.sync",
            {
                "customer_id": customer_id,
                "img_id": img_id,
                "is_vip": is_vip,
                "face_id": face_id
            }
        )

    def taobao_dpaas_store_update(
            self,
            store_id,
            prov='',
            city='',
            district='',
            brand_name='',
            name='',
            subname='',
            byname='',
            category='',
            posx='',
            posy='',
            outer_id='',
            per_price='',
            business_time='',
            traffic='',
            address='',
            pic='',
            contacts='',
            sec_category='',
            introduce='',
            property_enum='',
            property_text='',
            business_desc=''
    ):
        """
        DPaaS门店更新
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        编辑商户信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33466

        :param store_id: 要更新的门店id
        :param prov: 行政区划编码：省份6位编码
        :param city: 行政区划编码：城市6位编码
        :param district: 行政区划编码：区域6位编码
        :param brand_name: 品牌名
        :param name: 商户名称，可与品牌名相同
        :param subname: 分店名
        :param byname: 别名
        :param category: 门店主营类目id,id值为为本地通商户平台的后台类目，而非商品类目
        :param posx: 门店位置poi经度
        :param posy: 门店位置poi纬度
        :param outer_id: 外部门店主键
        :param per_price: 人均消费
        :param business_time: 营业时间,格式:11:00-24:00
        :param traffic: 交通信息
        :param address: 门店地址
        :param pic: 门店主图片路径，如：i7/T1rfxpXcVhXXXH9QcZ_033150.jpg
        :param contacts: 联系方式,可以是电话,手机,区号非必须,如果要加区号以-链接,多个号码之间用;拼接
        :param sec_category: 门店辅营类目id，多个以;分隔，值为商户平台类目而非商品类目
        :param introduce: 门店介绍/描述
        :param property_enum: 枚举型类目属性
        :param property_text: 输入型类目属性
        :param business_desc: 如果business_type=2,此字段内容是对自定义时间的注释说明，如：周末不营业
        """
        return self._top_request(
            "taobao.dpaas.store.update",
            {
                "store_id": store_id,
                "prov": prov,
                "city": city,
                "district": district,
                "brand_name": brand_name,
                "name": name,
                "subname": subname,
                "byname": byname,
                "category": category,
                "posx": posx,
                "posy": posy,
                "outer_id": outer_id,
                "per_price": per_price,
                "business_time": business_time,
                "traffic": traffic,
                "address": address,
                "pic": pic,
                "contacts": contacts,
                "sec_category": sec_category,
                "introduce": introduce,
                "property_enum": property_enum,
                "property_text": property_text,
                "business_desc": business_desc
            },
            result_processor=lambda x: x["ret_code"]
        )

    def taobao_dpaas_store_add(
            self,
            prov,
            city,
            district,
            name,
            contacts,
            category,
            address,
            brand_name='',
            subname='',
            byname='',
            pic='',
            posx='',
            posy='',
            outer_id='',
            per_price='',
            business_time='',
            traffic='',
            sec_category='',
            introduce='',
            property_enum='',
            property_text='',
            business_desc=''
    ):
        """
        DPaaS门店添加
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        商家添加一个商户信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33467

        :param prov: 行政区划编码：省份6位编码
        :param city: 行政区划编码：城市6位编码
        :param district: 行政区划编码：区域6位编码
        :param name: 商户名称，可与品牌名相同
        :param contacts: 联系方式,可以是座机,手机,400电话,如果座机要加区号以-链接,多个号码之间用;拼接
        :param category: 门店主营类目id,id值为为本地通商户平台的后台类目，而非商品类目
        :param address: 门店地址
        :param brand_name: 品牌名
        :param subname: 分店名
        :param byname: 别名
        :param pic: 门店主图片路径，如：i7/T1rfxpXcVhXXXH9QcZ_033150.jpg
        :param posx: 门店位置poi经度
        :param posy: 门店位置poi纬度
        :param outer_id: 外部门店唯一识别id(外部门店主键id)
        :param per_price: 人均消费
        :param business_time: 营业时间,格式:11:00-24:00
        :param traffic: 交通公交信息
        :param sec_category: 门店辅营类目id，多个以;分隔，值为商户平台类目而非商品类目
        :param introduce: 门店介绍/描述
        :param property_enum: 枚举型类目属性
        :param property_text: 输入型类目属性
        :param business_desc: 如果business_type=2,此字段内容是对自定义时间的注释说明，如：周末不营业
        """
        return self._top_request(
            "taobao.dpaas.store.add",
            {
                "prov": prov,
                "city": city,
                "district": district,
                "name": name,
                "contacts": contacts,
                "category": category,
                "address": address,
                "brand_name": brand_name,
                "subname": subname,
                "byname": byname,
                "pic": pic,
                "posx": posx,
                "posy": posy,
                "outer_id": outer_id,
                "per_price": per_price,
                "business_time": business_time,
                "traffic": traffic,
                "sec_category": sec_category,
                "introduce": introduce,
                "property_enum": property_enum,
                "property_text": property_text,
                "business_desc": business_desc
            }
        )

    def taobao_dpaas_store_list(
            self,
            page_no,
            page_size
    ):
        """
        获取DPaaS门店列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33471

        :param page_no: 查询的页码
        :param page_size: 每页返回的条数
        """
        return self._top_request(
            "taobao.dpaas.store.list",
            {
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def taobao_dpaas_marketing_sync(
            self,
            customer_id,
            time,
            marketing_channel,
            brand_code='',
            phone_num=''
    ):
        """
        DPaaS营销信息回传
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33498

        :param customer_id: 自定义客户id，必须与用户数据customer中的id保持一致
        :param time: 营销时间，年月日
        :param marketing_channel: 营销渠道，短信=0，手淘推送=1，P4P=2，其他=3
        :param brand_code: 所属品牌编码，如果是天猫品牌，请填写对应颁发的品牌编号
        :param phone_num: 手机号，Marketing_channel=0的时候，改字段必填
        """
        return self._top_request(
            "taobao.dpaas.marketing.sync",
            {
                "customer_id": customer_id,
                "time": time,
                "marketing_channel": marketing_channel,
                "brand_code": brand_code,
                "phone_num": phone_num
            }
        )

    def taobao_dpaas_storecategory_get(
            self,
            remark=''
    ):
        """
        DPaaS平台门店类型获取
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        商家在ERP中调用该接口，获取门店类目
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33570

        :param remark: 备注
        """
        return self._top_request(
            "taobao.dpaas.storecategory.get",
            {
                "remark": remark
            }
        )

    def taobao_dpaas_customer_uploadfile(
            self,
            customer_id,
            pic
    ):
        """
        上传图片图片
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33804

        :param customer_id: 客户ID
        :param pic: 图片信息
        """
        return self._top_request(
            "taobao.dpaas.customer.uploadfile",
            {
                "customer_id": customer_id,
                "pic": pic
            }
        )

    def taobao_dpaas_customer_updateface(
            self,
            token,
            seller_id,
            customer_id,
            face_id,
            age='',
            sex=''
    ):
        """
        更新DPaaS人脸信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33806

        :param token: 授权token
        :param seller_id: 客户ID
        :param customer_id: 客户会员ID
        :param face_id: 人脸ID
        :param age: 年纪
        :param sex: 性别，0=男，1=女，2=不确定
        """
        return self._top_request(
            "taobao.dpaas.customer.updateface",
            {
                "token": token,
                "seller_id": seller_id,
                "customer_id": customer_id,
                "face_id": face_id,
                "age": age,
                "sex": sex
            }
        )

    def taobao_dpaas_customer_visitinfo(
            self,
            store_code,
            customer_id
    ):
        """
        获取访客统计数据
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=33831

        :param store_code: 门店编码
        :param customer_id: 会员ID
        """
        return self._top_request(
            "taobao.dpaas.customer.visitinfo",
            {
                "store_code": store_code,
                "customer_id": customer_id
            }
        )


class TbALiYingYeYunZhi(DingTalkBaseAPI):
    """
    阿里影业云智API
    """

    def taobao_lark_iot_order_getgoodslist(
            self,
            channel_code,
            cinema_link_id
    ):
        """
        iot渠道获取卖品信息
        iot无人超市服务商通过接口获取影院的可售卖品数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42040

        :param channel_code: 渠道编码
        :param cinema_link_id: 影院内码
        """
        return self._top_request(
            "taobao.lark.iot.order.getgoodslist",
            {
                "channel_code": channel_code,
                "cinema_link_id": cinema_link_id
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_lark_iot_order_getcinemas(
            self,
            channel_code=''
    ):
        """
        获取iot渠道开放的影院
        iot渠道拉取有权限访问的影院
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42041

        :param channel_code: 渠道编码
        """
        return self._top_request(
            "taobao.lark.iot.order.getcinemas",
            {
                "channel_code": channel_code
            },
            result_processor=lambda x: x["data"]
        )

    def taobao_lark_iot_order_confirmorder(
            self,
            channel_code='',
            cinema_link_id='',
            out_goods_order_id='',
            workstation_id='',
            workstation_name='',
            payment_list='',
            promotion_list='',
            goods_list='',
            mobile='',
            operator_user_id=''
    ):
        """
        iot渠道卖品落单
        云智对接无人超市，接收无人超市订单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42042

        :param channel_code: 渠道编码
        :param cinema_link_id: 影院内码
        :param out_goods_order_id: 外部订单号
        :param workstation_id: 工作站id
        :param workstation_name: 工作站名称
        :param payment_list: 支付方式
        :param promotion_list: 优惠列表
        :param goods_list: 卖品列表
        :param mobile: 手机号
        :param operator_user_id: 管理员
        """
        return self._top_request(
            "taobao.lark.iot.order.confirmorder",
            {
                "channel_code": channel_code,
                "cinema_link_id": cinema_link_id,
                "out_goods_order_id": out_goods_order_id,
                "workstation_id": workstation_id,
                "workstation_name": workstation_name,
                "payment_list": payment_list,
                "promotion_list": promotion_list,
                "goods_list": goods_list,
                "mobile": mobile,
                "operator_user_id": operator_user_id
            },
            result_processor=lambda x: x["data"]
        )


class TbQuDaoZhongXin(DingTalkBaseAPI):
    """
    渠道中心API
    """

    def tmall_channel_trade_applyorder_get(
            self,
            channel_purchase_apply_order_no
    ):
        """
        查询采购申请单详情
        通过采购申请单ID获取单据详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35405

        :param channel_purchase_apply_order_no: 采购申请单单号
        """
        return self._top_request(
            "tmall.channel.trade.applyorder.get",
            {
                "channel_purchase_apply_order_no": channel_purchase_apply_order_no
            }
        )

    def tmall_channel_trade_order_stop(
            self,
            main_purchase_order_no,
            request_no
    ):
        """
        供应商停止发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35406

        :param main_purchase_order_no: 主采购单号
        :param request_no: 幂等单号
        """
        return self._top_request(
            "tmall.channel.trade.order.stop",
            {
                "main_purchase_order_no": main_purchase_order_no,
                "request_no": request_no
            }
        )

    def tmall_channel_trade_applyorder_gets(
            self,
            trade_type='',
            channel_purchase_apply_order_no='',
            page_size='20',
            page_number='1',
            need_pagination='true',
            audit_status_list='',
            distributor_nick='',
            channel=''
    ):
        """
        获取采购申请单列表
        分页查询采购申请单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35407

        :param trade_type: 交易类型
        :param channel_purchase_apply_order_no: 申请单号
        :param page_size: 每页显示数量
        :param page_number: 查询第几页
        :param need_pagination: 是否需要分页
        :param audit_status_list: 审核状态列表
        :param distributor_nick: 分销商nick
        :param channel: 渠道
        """
        return self._top_request(
            "tmall.channel.trade.applyorder.gets",
            {
                "trade_type": trade_type,
                "channel_purchase_apply_order_no": channel_purchase_apply_order_no,
                "page_size": page_size,
                "page_number": page_number,
                "need_pagination": need_pagination,
                "audit_status_list": audit_status_list,
                "distributor_nick": distributor_nick,
                "channel": channel
            }
        )

    def tmall_channel_trade_deliverorder_agree(
            self,
            main_deliver_order_no,
            operate_desc
    ):
        """
        供应商审核通过发货确认
        供应商通过收货确认单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35408

        :param main_deliver_order_no: 发货单号
        :param operate_desc: 同意理由
        """
        return self._top_request(
            "tmall.channel.trade.deliverorder.agree",
            {
                "main_deliver_order_no": main_deliver_order_no,
                "operate_desc": operate_desc
            }
        )

    def tmall_channel_trade_deliverorder_get(
            self,
            main_deliver_order_no,
            is_include_sub_order='false'
    ):
        """
        通过发货单单号获取发货单的详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35409

        :param main_deliver_order_no: 发货单号
        :param is_include_sub_order: 是否包含子发货单
        """
        return self._top_request(
            "tmall.channel.trade.deliverorder.get",
            {
                "main_deliver_order_no": main_deliver_order_no,
                "is_include_sub_order": is_include_sub_order
            }
        )

    def tmall_channel_trade_applyorder_refuse(
            self,
            operate_desc,
            channel_purchase_apply_order_no
    ):
        """
        供应商审核拒绝采购申请单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35410

        :param operate_desc: 操作描述
        :param channel_purchase_apply_order_no: 采购申请单号
        """
        return self._top_request(
            "tmall.channel.trade.applyorder.refuse",
            {
                "operate_desc": operate_desc,
                "channel_purchase_apply_order_no": channel_purchase_apply_order_no
            }
        )

    def tmall_channel_trade_order_get(
            self,
            main_purchase_order_no,
            is_include_sub_order='false',
            is_include_main_order='true',
            is_include_logistics='false'
    ):
        """
        通过主采购单号查询采购单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35412

        :param main_purchase_order_no: 主采购单ID
        :param is_include_sub_order: 是否包含子采购单
        :param is_include_main_order: 是否包含主采购单（针对特殊业务）
        :param is_include_logistics: 是否包含物流信息
        """
        return self._top_request(
            "tmall.channel.trade.order.get",
            {
                "main_purchase_order_no": main_purchase_order_no,
                "is_include_sub_order": is_include_sub_order,
                "is_include_main_order": is_include_main_order,
                "is_include_logistics": is_include_logistics
            }
        )

    def tmall_channel_trade_applyorder_agree(
            self,
            channel_purchase_apply_order_no,
            operate_desc=''
    ):
        """
        供应商审核同意采购申请单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35413

        :param channel_purchase_apply_order_no: 采购申请单号
        :param operate_desc: 操作描述
        """
        return self._top_request(
            "tmall.channel.trade.applyorder.agree",
            {
                "channel_purchase_apply_order_no": channel_purchase_apply_order_no,
                "operate_desc": operate_desc
            }
        )

    def tmall_channel_trade_order_gets(
            self,
            is_include_sub_order='false',
            is_include_main_order='true',
            is_include_logistics='false',
            page_size='20',
            page_number='1',
            need_pagination='true',
            main_purchase_order_no='',
            distributor_nick='',
            channel='',
            trade_type='',
            order_status='',
            create_time_start='',
            create_time_end=''
    ):
        """
        分页查询采购单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35415

        :param is_include_sub_order: 是否包含子单
        :param is_include_main_order: 是否包含主单
        :param is_include_logistics: 是否包含物流信息
        :param page_size: 每页显示数量
        :param page_number: 查询第几页
        :param need_pagination: 是否分页查询
        :param main_purchase_order_no: 主采购单号
        :param distributor_nick: 分销商Nick
        :param channel: 渠道编码
        :param trade_type: 1-代销；2-经销
        :param order_status: 1. 待付款 2.已付款待发货 3.已发货待收货 4.交易完成 5.交易关闭
        :param create_time_start: 创建时间从
        :param create_time_end: 创建时间到
        """
        return self._top_request(
            "tmall.channel.trade.order.gets",
            {
                "is_include_sub_order": is_include_sub_order,
                "is_include_main_order": is_include_main_order,
                "is_include_logistics": is_include_logistics,
                "page_size": page_size,
                "page_number": page_number,
                "need_pagination": need_pagination,
                "main_purchase_order_no": main_purchase_order_no,
                "distributor_nick": distributor_nick,
                "channel": channel,
                "trade_type": trade_type,
                "order_status": order_status,
                "create_time_start": create_time_start,
                "create_time_end": create_time_end
            }
        )

    def tmall_channel_trade_deliverorder_gets(
            self,
            main_deliver_order_no='',
            order_status_list='',
            is_include_sub_order='false',
            page_size='20',
            page_number='1',
            need_pagination='true',
            channel=''
    ):
        """
        查询发货单列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35416

        :param main_deliver_order_no: 发货单单号
        :param order_status_list: 发货单状态列表
        :param is_include_sub_order: 是否包括子发货单
        :param page_size: 每页显示数量
        :param page_number: 查询第几页
        :param need_pagination: 是否分页查询
        :param channel: 渠道
        """
        return self._top_request(
            "tmall.channel.trade.deliverorder.gets",
            {
                "main_deliver_order_no": main_deliver_order_no,
                "order_status_list": order_status_list,
                "is_include_sub_order": is_include_sub_order,
                "page_size": page_size,
                "page_number": page_number,
                "need_pagination": need_pagination,
                "channel": channel
            }
        )

    def tmall_channel_trade_applyorder_modify(
            self,
            channel_purchase_apply_order_no,
            apply_order_relate_item_modify_param_list
    ):
        """
        供应商修改申请单
        上游供应商修改申请单, 目前只允许修改价格+件数且sku数量必须完全一致
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35417

        :param channel_purchase_apply_order_no: 采购申请单号
        :param apply_order_relate_item_modify_param_list: 修改关联的的宝贝信息
        """
        return self._top_request(
            "tmall.channel.trade.applyorder.modify",
            {
                "channel_purchase_apply_order_no": channel_purchase_apply_order_no,
                "apply_order_relate_item_modify_param_list": apply_order_relate_item_modify_param_list
            }
        )

    def tmall_channel_trade_deliverorder_ship(
            self,
            request_no,
            distributor_nick,
            channel,
            sub_deliver_order_create_list,
            logistics_order_list
    ):
        """
        供应商发货
        供应商创建发货单并发货
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35418

        :param request_no: 幂等单号
        :param distributor_nick: 分销商Nick
        :param channel: 渠道
        :param sub_deliver_order_create_list: 发货单子项
        :param logistics_order_list: 物流运单子项
        """
        return self._top_request(
            "tmall.channel.trade.deliverorder.ship",
            {
                "request_no": request_no,
                "distributor_nick": distributor_nick,
                "channel": channel,
                "sub_deliver_order_create_list": sub_deliver_order_create_list,
                "logistics_order_list": logistics_order_list
            }
        )

    def tmall_channel_trade_deliverorder_reject(
            self,
            main_deliver_order_no,
            operate_desc
    ):
        """
        供应商拒绝收货确认单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35419

        :param main_deliver_order_no: 发货单号
        :param operate_desc: 拒绝原因
        """
        return self._top_request(
            "tmall.channel.trade.deliverorder.reject",
            {
                "main_deliver_order_no": main_deliver_order_no,
                "operate_desc": operate_desc
            }
        )

    def tmall_channel_products_query(
            self,
            page_size,
            page_num,
            product_number='',
            sku_number='',
            product_ids='',
            product_line_id=''
    ):
        """
        渠道中心-查询产品列表
        渠道中心，供应商查询其产品数据，返回同时符合所有查询条件的产品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35902

        :param page_size: 分页大小
        :param page_num: 页码数，从1开始
        :param product_number: 商家产品编码
        :param sku_number: 商家SKU编码
        :param product_ids: 产品Id
        :param product_line_id: 产品线Id
        """
        return self._top_request(
            "tmall.channel.products.query",
            {
                "page_size": page_size,
                "page_num": page_num,
                "product_number": product_number,
                "sku_number": sku_number,
                "product_ids": product_ids,
                "product_line_id": product_line_id
            }
        )

    def tmall_channel_trade_order_create(
            self,
            param0
    ):
        """
        创建渠道分销单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37446

        :param param0: 入参
        """
        return self._top_request(
            "tmall.channel.trade.order.create",
            {
                "param0": param0
            },
            result_processor=lambda x: x["main_purchase_order_list"]
        )

    def taobao_channel_trade_prepay_offline_reduce(
            self,
            offline_reduce_prepay_param
    ):
        """
        渠道分销供应商上传线下流水预存款（减少）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40705

        :param offline_reduce_prepay_param: 减少流水
        """
        return self._top_request(
            "taobao.channel.trade.prepay.offline.reduce",
            {
                "offline_reduce_prepay_param": offline_reduce_prepay_param
            },
            result_processor=lambda x: x["success"]
        )

    def taobao_channel_trade_prepay_offline_add(
            self,
            offline_add_prepay_param
    ):
        """
        渠道分销供应商上传线下流水预存款（增加）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40706

        :param offline_add_prepay_param: 增加流水
        """
        return self._top_request(
            "taobao.channel.trade.prepay.offline.add",
            {
                "offline_add_prepay_param": offline_add_prepay_param
            },
            result_processor=lambda x: x["success"]
        )


class TbALiJianKangYiMiao(DingTalkBaseAPI):
    """
    阿里健康-疫苗API
    """

    def alibaba_alihealth_ms_area_district_list(
            self,
            division_id
    ):
        """
        疫苗预约地市信息查询
        微信小程序疫苗预约地市信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37710

        :param division_id: 省份ID
        """
        return self._top_request(
            "alibaba.alihealth.ms.area.district.list",
            {
                "division_id": division_id
            }
        )

    def alibaba_alihealth_vaccin_inventory_query(
            self,
            store_id,
            item_id
    ):
        """
        疫苗预约库存查询
        微信小程序疫苗预约库存查询服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37787

        :param store_id: 门店ID
        :param item_id: 商品ID
        """
        return self._top_request(
            "alibaba.alihealth.vaccin.inventory.query",
            {
                "store_id": store_id,
                "item_id": item_id
            },
            result_processor=lambda x: x["model"]
        )

    def alibaba_alihealth_vaccin_reserve_subscribe_bookingdate(
            self,
            reserve_date,
            biz_order_id,
            outer_id
    ):
        """
        疫苗预约日期提交
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        微信小程序疫苗预约日期提交
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37808

        :param reserve_date: 预约日期
        :param biz_order_id: 订单ID
        :param outer_id: 外部ID
        """
        return self._top_request(
            "alibaba.alihealth.vaccin.reserve.subscribe.bookingdate",
            {
                "reserve_date": reserve_date,
                "biz_order_id": biz_order_id,
                "outer_id": outer_id
            },
            result_processor=lambda x: x["model"]
        )

    def alibaba_alihealth_vaccin_reserve_subscribe_datelist(
            self,
            type,
            biz_order_id,
            outer_id
    ):
        """
        疫苗预约日期列表
        微信小程序疫苗预约日期列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37810

        :param type: 1：登记ID 2：门店ID
        :param biz_order_id: 订单Id
        :param outer_id: 外部ID
        """
        return self._top_request(
            "alibaba.alihealth.vaccin.reserve.subscribe.datelist",
            {
                "type": type,
                "biz_order_id": biz_order_id,
                "outer_id": outer_id
            },
            result_processor=lambda x: x["model"]
        )

    def alibaba_alihealth_vaccin_subscribe_history(
            self,
            item_id,
            outer_id,
            page_size='',
            page_number=''
    ):
        """
        疫苗预约登记历史查询
        微信小程序疫苗预约登记历史查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37811

        :param item_id: 商品ID
        :param outer_id: 用户ID
        :param page_size: 分页大小
        :param page_number: 分页序号
        """
        return self._top_request(
            "alibaba.alihealth.vaccin.subscribe.history",
            {
                "item_id": item_id,
                "outer_id": outer_id,
                "page_size": page_size,
                "page_number": page_number
            }
        )

    def alibaba_alihealth_vaccin_hpvsubscribe_createwithpersonalinfo(
            self,
            mobile,
            name,
            store_id,
            item_id,
            outer_id,
            birthday='',
            source='',
            item_desc='',
            reserve_date='',
            sex=''
    ):
        """
        疫苗预约登记创建
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        微信小程序疫苗预约登记创建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37812

        :param mobile: 登记人手机号
        :param name: 登记人姓名
        :param store_id: 门店ID
        :param item_id: 0是2介疫苗，2是四阶疫苗登记。其他是商品ID
        :param outer_id: 用户ID
        :param birthday: 登记人生日
        :param source: 来源，0是二阶登记，2是四阶登记，2是门店无库存登记，3是疫苗预约工具来的登记
        :param item_desc: 商品名称
        :param reserve_date: 预约日期
        :param sex: 登记人性别0是女，1是男
        """
        return self._top_request(
            "alibaba.alihealth.vaccin.hpvsubscribe.createwithpersonalinfo",
            {
                "mobile": mobile,
                "name": name,
                "store_id": store_id,
                "item_id": item_id,
                "outer_id": outer_id,
                "birthday": birthday,
                "source": source,
                "item_desc": item_desc,
                "reserve_date": reserve_date,
                "sex": sex
            }
        )

    def alibaba_taobao_micdetail_alihealth_querystores(
            self,
            page_num,
            item_id,
            city_id,
            inv_type='0',
            package_id='',
            page_size='0',
            lon='',
            lat='',
            user_id='',
            district_id='0',
            province_id='0'
    ):
        """
        疫苗预约门店列表查询
        微信小程序疫苗预约门店列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37984

        :param page_num: 页码
        :param item_id: 商品ID
        :param city_id: 城市ID
        :param inv_type: 0不查询库存1查询库存
        :param package_id: 包ID
        :param page_size: 页大小
        :param lon: 经度
        :param lat: 维度
        :param user_id: 用户ID
        :param district_id: 地区ID
        :param province_id: 省份ID
        """
        return self._top_request(
            "alibaba.taobao.micdetail.alihealth.querystores",
            {
                "page_num": page_num,
                "item_id": item_id,
                "city_id": city_id,
                "inv_type": inv_type,
                "package_id": package_id,
                "page_size": page_size,
                "lon": lon,
                "lat": lat,
                "user_id": user_id,
                "district_id": district_id,
                "province_id": province_id
            }
        )

    def alibaba_health_vaccin_notice_user_create(
            self,
            ali_pay_user_id,
            outer_user_id=''
    ):
        """
        支付宝医疗健康疫苗用户创建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42006

        :param ali_pay_user_id: 支付宝用户id
        :param outer_user_id: 外部渠道用户id
        """
        return self._top_request(
            "alibaba.health.vaccin.notice.user.create",
            {
                "ali_pay_user_id": ali_pay_user_id,
                "outer_user_id": outer_user_id
            }
        )

    def alibaba_health_vaccin_notice_order_cancel(
            self,
            alipay_user_id,
            order_id
    ):
        """
        福州疫苗取消预约
        福州疫苗用户取消预约接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42007

        :param alipay_user_id: 支付宝用户id
        :param order_id: 预约id
        """
        return self._top_request(
            "alibaba.health.vaccin.notice.order.cancel",
            {
                "alipay_user_id": alipay_user_id,
                "order_id": order_id
            }
        )

    def alibaba_health_vaccin_notice_order_sign(
            self,
            alipay_user_id,
            order_id
    ):
        """
        福州疫苗签到成功通知
        福州疫苗用户签到成功记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42008

        :param alipay_user_id: 支付宝用户id
        :param order_id: 预约id
        """
        return self._top_request(
            "alibaba.health.vaccin.notice.order.sign",
            {
                "alipay_user_id": alipay_user_id,
                "order_id": order_id
            }
        )

    def alibaba_health_vaccin_notice_order_create(
            self,
            reserve_date,
            alipay_user_id,
            order_id,
            name,
            address,
            pov_store_name,
            reserve_time,
            vaccine_info,
            order_detail_url,
            sex='',
            age='',
            outer_user_id='',
            mobile='',
            age_type='',
            area='',
            city='',
            province=''
    ):
        """
        支付宝医疗健康疫苗预约创建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42009

        :param reserve_date: 预约日期
        :param alipay_user_id: 支付宝用户id
        :param order_id: 预约id
        :param name: 接种人姓名
        :param address: 接种点地址
        :param pov_store_name: 接种点名称
        :param reserve_time: 预约时间
        :param vaccine_info: 疫苗信息
        :param order_detail_url: 支付宝消息通知跳转订单详情链接
        :param sex: 预约人性别(1男2女)
        :param age: 年龄
        :param outer_user_id: 外部渠道用户id
        :param mobile: 手机号码
        :param age_type: 年龄类型(1-宝宝2-成人)
        :param area: 地区名字
        :param city: 城市名字
        :param province: 省份名字
        """
        return self._top_request(
            "alibaba.health.vaccin.notice.order.create",
            {
                "reserve_date": reserve_date,
                "alipay_user_id": alipay_user_id,
                "order_id": order_id,
                "name": name,
                "address": address,
                "pov_store_name": pov_store_name,
                "reserve_time": reserve_time,
                "vaccine_info": vaccine_info,
                "order_detail_url": order_detail_url,
                "sex": sex,
                "age": age,
                "outer_user_id": outer_user_id,
                "mobile": mobile,
                "age_type": age_type,
                "area": area,
                "city": city,
                "province": province
            }
        )


class TbJiaoYuZhangHao(DingTalkBaseAPI):
    """
    教育账号 API
    """

    def yunos_dm_open_org_school_create(
            self,
            name,
            short_auth_code,
            description
    ):
        """
        创建学校机构
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        教育多端平台开放创建学校机构能力
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35309

        :param name: 学校机构名称
        :param short_auth_code: 学校短机构码
        :param description: 学校机构信息
        """
        return self._top_request(
            "yunos.dm.open.org.school.create",
            {
                "name": name,
                "short_auth_code": short_auth_code,
                "description": description
            }
        )

    def yunos_dm_open_eduaccount_update(
            self,
            target_auth_code,
            edu_account_id,
            display_name='',
            password='',
            mobile='',
            email=''
    ):
        """
        修改教育账号(包括密码)
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        教育多端平台开放修改教育账号能力
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35310

        :param target_auth_code: 学校机构码
        :param edu_account_id: 教育账号id
        :param display_name: 教育账号名
        :param password: 密码
        :param mobile: 教育账号手机号
        :param email: 教育账号邮箱
        """
        return self._top_request(
            "yunos.dm.open.eduaccount.update",
            {
                "target_auth_code": target_auth_code,
                "edu_account_id": edu_account_id,
                "display_name": display_name,
                "password": password,
                "mobile": mobile,
                "email": email
            },
            result_processor=lambda x: x["extra_msg"]
        )

    def yunos_dm_open_eduaccount_delete(
            self,
            target_auth_code,
            edu_account_id
    ):
        """
        删除教育账号
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        教育多端平台开放修改删除账号能力
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35311

        :param target_auth_code: 学校机构码
        :param edu_account_id: 教育账号id
        """
        return self._top_request(
            "yunos.dm.open.eduaccount.delete",
            {
                "target_auth_code": target_auth_code,
                "edu_account_id": edu_account_id
            },
            result_processor=lambda x: x["extra_msg"]
        )

    def yunos_dm_open_eduaccount_tokenvalid(
            self,
            token
    ):
        """
        教育账号登录验证
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        教育多端平台开放修改验证教育账号能力
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35313

        :param token: 教育账号 token
        """
        return self._top_request(
            "yunos.dm.open.eduaccount.tokenvalid",
            {
                "token": token
            }
        )

    def yunos_dm_open_eduaccount_create(
            self,
            login_id,
            display_name,
            password,
            target_short_auth_code
    ):
        """
        创建教育账号
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        教育多端平台开放创建教育账号能力
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35314

        :param login_id: 账号名, 用于登录
        :param display_name: 账号显示名称
        :param password: 密码
        :param target_short_auth_code: 学校短机构码
        """
        return self._top_request(
            "yunos.dm.open.eduaccount.create",
            {
                "login_id": login_id,
                "display_name": display_name,
                "password": password,
                "target_short_auth_code": target_short_auth_code
            }
        )

    def yunos_dm_open_command_send(
            self,
            sn,
            cmd,
            param
    ):
        """
        下发设备指令
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        下发设备定时开关机指令
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35329

        :param sn: 设备序列号
        :param cmd: 命令
        :param param: 命令参数
        """
        return self._top_request(
            "yunos.dm.open.command.send",
            {
                "sn": sn,
                "cmd": cmd,
                "param": param
            },
            result_processor=lambda x: x["extra_msg"]
        )

    def yunos_dm_sys_get_domain(
            self,
            make,
            model,
            sn
    ):
        """
        获取动态域名
        返回alios ucp后端域名
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35502

        :param make: 制造商
        :param model: 设备类型
        :param sn: 序列号
        """
        return self._top_request(
            "yunos.dm.sys.get.domain",
            {
                "make": make,
                "model": model,
                "sn": sn
            },
            result_processor=lambda x: x["url"]
        )


class TbYongHuZengZhang(DingTalkBaseAPI):
    """
    用户增长
    """

    def taobao_growth_iosapp_updateinfo(
            self,
            version,
            app_name,
            bundle_id,
            ipa_url,
            icon_url,
            m_count='',
            t_count=''
    ):
        """
        iOS全网app更新API
        用于日常更新数据库中iOS app信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34315

        :param version: 版本号
        :param app_name: app名字
        :param bundle_id: 标志
        :param ipa_url: 下载地址
        :param icon_url: 图表地址
        :param m_count: 月下载量
        :param t_count: 总下载量
        """
        return self._top_request(
            "taobao.growth.iosapp.updateinfo",
            {
                "version": version,
                "app_name": app_name,
                "bundle_id": bundle_id,
                "ipa_url": ipa_url,
                "icon_url": icon_url,
                "m_count": m_count,
                "t_count": t_count
            }
        )

    def taobao_usergrowth_delivery_ask(
            self,
            channel,
            adid,
            keyword_type='',
            keyword='',
            screen_height='',
            ip_area_name='',
            app='',
            network='',
            education='',
            made='',
            ad_floor_price='',
            has_pet='',
            ad_type='',
            brand='',
            ip_prov_name='',
            is_remark_user='',
            publish_name='',
            is_gift_prefer='',
            id_card_number='',
            geo_lat='',
            has_house='',
            ad_height='',
            model='',
            mobile='',
            os='',
            is_dicount_prefer='',
            gender='',
            carrier='',
            age='',
            description='',
            app_cat='',
            baby_gender='',
            ad_img_type='',
            idfa_md5='',
            pos_id='',
            reg_city_level='',
            ip_city_name='',
            orientation='',
            is_undergraduate='',
            app_ver='',
            idfa='',
            pay_layer='',
            app_id='',
            life_stage='',
            ukeywords='',
            ad_pos='',
            cid='',
            pos_cat='',
            screen_width='',
            imei='',
            ad_width='',
            imei_md5='',
            user_income='',
            is_cash_prefer='',
            app_install_flag='',
            geo_lon='',
            is_sharing_user='',
            has_car='',
            app_name='',
            career_type='',
            transform_type=''
    ):
        """
        广告投放询问
        提供给媒体在曝光广告前调用， 返回是否曝光以及曝光的物料信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43098

        :param channel: 渠道标识，向淘宝技术申请
        :param adid: 广告id，淘宝和媒体协商
        :param keyword_type: 关键词类型
        :param keyword: 关键词
        :param screen_height: 设备屏幕纵向分辨率，单位：像素
        :param ip_area_name: 注册IP解析区县名
        :param app: 转化目标app, 1：淘宝；2：天猫；
        :param network: 网络类，0：未知，1：WIFI, 2: 2G, 3: 3G, 4: 4G; 5: 5G
        :param education: 预测学历,初高中,博士,专科,硕士,本科
        :param made: 设备厂商
        :param ad_floor_price: 底价，单位为分
        :param has_pet: 是否有宠物?0：没有 1：有 2：预测有
        :param ad_type: 广告类型 0:横幅,1: 插屏, 2:开屏, 3:原生,4:视频
        :param brand: 手机品牌
        :param ip_prov_name: 注册IP解析的省份名称
        :param is_remark_user: 是否爱评价： 0： 不是? 1：是
        :param publish_name: 合作方名称
        :param is_gift_prefer: 是否爱赠品： 0： 不是? 1：是
        :param id_card_number: 用户身份证号
        :param geo_lat: 设备维度
        :param has_house: 预测是否有房 0：没房 1：有房 2：预测有房
        :param ad_height: 广告位高度
        :param model: 设备型号
        :param mobile: 手机号
        :param os: 用户所使用设备的系统， 0： android, 1: ios, 2: windowsphone, 3: other
        :param is_dicount_prefer: 是否爱折扣： 0： 不是? 1：是
        :param gender: 性别, 0:未知 1： 男 2：女
        :param carrier: 运营商，0: 未知， 1:移动,2:电信,3:联通
        :param age: 年龄
        :param description: 关键词的描述
        :param app_cat: app类别
        :param baby_gender: 宝宝性别，0:F 1:M 2:未知，但有宝宝 3: 没有宝宝
        :param ad_img_type: 广告位支持图片格式 0: jpg, 1:?jpeg, 2: gif
        :param idfa_md5: idfa的md5值， 32位小写
        :param pos_id: 给定appid中的位置id，用于提高转化率
        :param reg_city_level: 注册IP解析的城市等级
        :param ip_city_name: 注册IP解析城市名称
        :param orientation: 设备方向：0:未知， 1： 纵向；2： 横向
        :param is_undergraduate: 预测是否在校大学生?0：不是 1 是 2 预测是
        :param app_ver: app版本号
        :param idfa: idfa原生值
        :param pay_layer: 用户网购支付层级：? 0： 0~50       1： 50~200?2： 200~500    3： 500以上
        :param app_id: 对接的appId
        :param life_stage: 预测人生阶段
        :param ukeywords: 用户感兴趣的标签,多个用逗号隔开。如动漫、历史
        :param ad_pos: 广告位位置 0:未知,1:头部,2:底部, 3:侧边栏,4:全屏 默认传0
        :param cid: 广告创意id，淘宝和媒体协商
        :param pos_cat: 素材展示所在的页面或者频道
        :param screen_width: 设备屏幕水平分辨率，单位：像素
        :param imei: imei原生值
        :param ad_width: 广告位宽度
        :param imei_md5: imei的md5值， 32位小写
        :param user_income: 预测月收入
        :param is_cash_prefer: 是否爱返现： 0： 不是? 1：是
        :param app_install_flag: 安装转化目标app的标识， 0： 未安装转化目标app, 1: 安装了转化目标app
        :param geo_lon: 设备经度
        :param is_sharing_user: 是否爱分享： 0： 不是? 1：是
        :param has_car: 预测是否有车,0: 没有车 1：自己注册有车2：预测有车
        :param app_name: 对接的appName
        :param career_type: 预测职业
        :param transform_type: 转化类型， 1： 激活；2： 新登；100：定向促活
        """
        return self._top_request(
            "taobao.usergrowth.delivery.ask",
            {
                "channel": channel,
                "adid": adid,
                "keyword_type": keyword_type,
                "keyword": keyword,
                "screen_height": screen_height,
                "ip_area_name": ip_area_name,
                "app": app,
                "network": network,
                "education": education,
                "made": made,
                "ad_floor_price": ad_floor_price,
                "has_pet": has_pet,
                "ad_type": ad_type,
                "brand": brand,
                "ip_prov_name": ip_prov_name,
                "is_remark_user": is_remark_user,
                "publish_name": publish_name,
                "is_gift_prefer": is_gift_prefer,
                "id_card_number": id_card_number,
                "geo_lat": geo_lat,
                "has_house": has_house,
                "ad_height": ad_height,
                "model": model,
                "mobile": mobile,
                "os": os,
                "is_dicount_prefer": is_dicount_prefer,
                "gender": gender,
                "carrier": carrier,
                "age": age,
                "description": description,
                "app_cat": app_cat,
                "baby_gender": baby_gender,
                "ad_img_type": ad_img_type,
                "idfa_md5": idfa_md5,
                "pos_id": pos_id,
                "reg_city_level": reg_city_level,
                "ip_city_name": ip_city_name,
                "orientation": orientation,
                "is_undergraduate": is_undergraduate,
                "app_ver": app_ver,
                "idfa": idfa,
                "pay_layer": pay_layer,
                "app_id": app_id,
                "life_stage": life_stage,
                "ukeywords": ukeywords,
                "ad_pos": ad_pos,
                "cid": cid,
                "pos_cat": pos_cat,
                "screen_width": screen_width,
                "imei": imei,
                "ad_width": ad_width,
                "imei_md5": imei_md5,
                "user_income": user_income,
                "is_cash_prefer": is_cash_prefer,
                "app_install_flag": app_install_flag,
                "geo_lon": geo_lon,
                "is_sharing_user": is_sharing_user,
                "has_car": has_car,
                "app_name": app_name,
                "career_type": career_type,
                "transform_type": transform_type
            }
        )


class TbAEGongYingLian(DingTalkBaseAPI):
    """
    AE-供应链
    """

    def aliexpress_supplychain_fulfillment_consignorderconfirm_im(
            self,
            xml_data_slot=''
    ):
        """
        订单出库及包裹信息回传
        接受供应商端订单出库及包裹信息回传消息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34868

        :param xml_data_slot: 英迈发货通知xml数据片段
        """
        return self._top_request(
            "aliexpress.supplychain.fulfillment.consignorderconfirm.im",
            {
                "xml_data_slot": xml_data_slot
            }
        )

    def aliexpress_supplychain_item_edititemcost_im(
            self,
            time_zone,
            operate_time,
            item_cost_d_t_o_list
    ):
        """
        IM同步货品成本到AE
        外部供应商通过此API将货品的采购成本推送给AE供应链
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34873

        :param time_zone: using GMT, default is +0800
        :param operate_time: flash time yyyy-MM-dd HH:mm:ss
        :param item_cost_d_t_o_list: items info list max size 20 one time
        """
        return self._top_request(
            "aliexpress.supplychain.item.edititemcost.im",
            {
                "time_zone": time_zone,
                "operate_time": operate_time,
                "item_cost_d_t_o_list": item_cost_d_t_o_list
            }
        )

    def aliexpress_supplychain_fulfillment_asyncorderresponse_im(
            self,
            xml_data_slot=''
    ):
        """
        IM异步通知AE订单创建成功
        IM异步通知AE创建订单成功，AE保存IM的订单号如：BranchOrderNumber
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34874

        :param xml_data_slot: IM返回订单创建成功信息
        """
        return self._top_request(
            "aliexpress.supplychain.fulfillment.asyncorderresponse.im",
            {
                "xml_data_slot": xml_data_slot
            }
        )

    def aliexpress_supplychain_inventory_flashsiteinventory_im(
            self,
            operate_time,
            time_zone,
            item_inventory_report_dtos
    ):
        """
        英迈AE库存同步
        英迈通知ae同步库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34876

        :param operate_time: flash time yyyy-MM-ddHH:mm:ss
        :param time_zone: time zone
        :param item_inventory_report_dtos: item stock data array
        """
        return self._top_request(
            "aliexpress.supplychain.inventory.flashsiteinventory.im",
            {
                "operate_time": operate_time,
                "time_zone": time_zone,
                "item_inventory_report_dtos": item_inventory_report_dtos
            }
        )


class TbHuDongBa(DingTalkBaseAPI):
    """
    互动吧API
    """

    def tmall_fans_automachine_order_createorder(
            self,
            machine_id,
            channel_id,
            is_use_discount
    ):
        """
        自动售卖机订单创建接口
        互动吧自动售卖机商品订单创建接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34772

        :param machine_id: 机器ID
        :param channel_id: 货道ID
        :param is_use_discount: 是否使用优惠购买
        """
        return self._top_request(
            "tmall.fans.automachine.order.createorder",
            {
                "machine_id": machine_id,
                "channel_id": channel_id,
                "is_use_discount": is_use_discount
            }
        )

    def tmall_fans_automachine_order_checkpaystatus(
            self,
            order_id
    ):
        """
        互动吧自动售卖机订单付款状态查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=34774

        :param order_id: 订单ID
        """
        return self._top_request(
            "tmall.fans.automachine.order.checkpaystatus",
            {
                "order_id": order_id
            }
        )

    def tmall_fans_automachine_getmaskusernick(
            self,
            seller_id='',
            machine_id='',
            mix_nick=''
    ):
        """
        获取脱敏用户名称
        获取脱敏后的用户名称
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35602

        :param seller_id: 卖家ID
        :param machine_id: 机器ID
        :param mix_nick: 填写授权成功后的mixnick
        """
        return self._top_request(
            "tmall.fans.automachine.getmaskusernick",
            {
                "seller_id": seller_id,
                "machine_id": machine_id,
                "mix_nick": mix_nick
            }
        )

    def tmall_fans_automachine_deliveryrecord(
            self,
            order_id='',
            machine_id='',
            channel_id=''
    ):
        """
        自动售卖机出货记录保存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35763

        :param order_id: 订单ID
        :param machine_id: 机器ID
        :param channel_id: 货道ID
        """
        return self._top_request(
            "tmall.fans.automachine.deliveryrecord",
            {
                "order_id": order_id,
                "machine_id": machine_id,
                "channel_id": channel_id
            }
        )

    def tmall_fans_automachine_order_createorderbyitemid(
            self,
            activity_id,
            item_id,
            machine_id,
            use_discount='true',
            sku_id='0',
            mixnick=''
    ):
        """
        直接通过商品ID创建订单
        互动吧自动售卖机商品订单创建接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35824

        :param activity_id: 活动ID，表明活动的来源和品牌
        :param item_id: 商品ID
        :param machine_id: 机器ID，长度不能超过12
        :param use_discount: 是否使用优惠价购买
        :param sku_id: 如果商品配置的有sku则必填，否则填0
        :param mixnick: 用户授权之后的混淆Nick
        """
        return self._top_request(
            "tmall.fans.automachine.order.createorderbyitemid",
            {
                "activity_id": activity_id,
                "item_id": item_id,
                "machine_id": machine_id,
                "use_discount": use_discount,
                "sku_id": sku_id,
                "mixnick": mixnick
            }
        )

    def tmall_fans_automachine_order_addlog(
            self,
            log_request=None
    ):
        """
        业务数据日志收集接口
        互动吧自动售卖机业务日志记录接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36653

        :param log_request: 日志对象
        """
        return self._top_request(
            "tmall.fans.automachine.order.addlog",
            {
                "log_request": log_request
            }
        )

    def tmall_fans_arena_record(
            self,
            cash_pool_id='',
            score='',
            mix_nick=''
    ):
        """
        记录完成擂台的用户
        记录完成擂台的用户和完成分数
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44031

        :param cash_pool_id: 资金池id
        :param score: 用户得分
        :param mix_nick: mixnick
        """
        return self._top_request(
            "tmall.fans.arena.record",
            {
                "cash_pool_id": cash_pool_id,
                "score": score,
                "mix_nick": mix_nick
            },
            result_processor=lambda x: x["fans_result"]
        )

    def tmall_fans_arena_push(
            self,
            push_list=None
    ):
        """
        消息推送
        超级擂台消息推送
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44032

        :param push_list: 推送列表
        """
        return self._top_request(
            "tmall.fans.arena.push",
            {
                "push_list": push_list
            }
        )

    def tmall_fans_cashpool_create(
            self,
            create_cash_pool_param_do
    ):
        """
        创建资金池
        商家创建资金池接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44033

        :param create_cash_pool_param_do: 创建资奖池输入对象
        """
        return self._top_request(
            "tmall.fans.cashpool.create",
            {
                "create_cash_pool_param_do": create_cash_pool_param_do
            },
            result_processor=lambda x: x["fans_result"]
        )

    def tmall_fans_cashpool_checkpay(
            self,
            cash_pool_list=''
    ):
        """
        检查资金池付款状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44034

        :param cash_pool_list: 资金池列表
        """
        return self._top_request(
            "tmall.fans.cashpool.checkpay",
            {
                "cash_pool_list": cash_pool_list
            },
            result_processor=lambda x: x["fans_result"]
        )


class TbFeiZhuJiPiaoQianTaiLeiMu(DingTalkBaseAPI):
    """
    飞猪机票前台类目
    """

    def alitrip_upfc_member_backflow(
            self,
            send_data_back_flow_request=None
    ):
        """
        航司会员发放结果回流
        云上方通过调用该top接口，将航司的会员发放结果数据回流至机票营销
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35236

        :param send_data_back_flow_request: 入参
        """
        return self._top_request(
            "alitrip.upfc.member.backflow",
            {
                "send_data_back_flow_request": send_data_back_flow_request
            }
        )

    def alitrip_upfc_member_updatecard(
            self,
            update_card_level_request=None
    ):
        """
        更新会员卡等级
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35301

        :param update_card_level_request: 更新do
        """
        return self._top_request(
            "alitrip.upfc.member.updatecard",
            {
                "update_card_level_request": update_card_level_request
            }
        )

    def alitrip_uppc_member_apply(
            self,
            request_id='',
            status_code='',
            response_json='',
            error_msg=''
    ):
        """
        会员合作报名结果回流
        云上方通过调用该top接口，航司报名结果数据进行回流
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39704

        :param request_id: 请求唯一标识
        :param status_code: 报名成功
        :param response_json: 卡号（扩展字段，后期新增航司可能会有新增信息）
        :param error_msg: 错误信息描述
        """
        return self._top_request(
            "alitrip.uppc.member.apply",
            {
                "request_id": request_id,
                "status_code": status_code,
                "response_json": response_json,
                "error_msg": error_msg
            }
        )

    def alitrip_uppc_member_airline(
            self,
            request_id='',
            status_code='',
            response_json='',
            error_msg=''
    ):
        """
        会员航司数据回流
        会员项目数据回流
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39716

        :param request_id: 请求唯一标识
        :param status_code: 状态描述
        :param response_json: 航段数据（扩展字段，用户存储航司挑战相关数据）
        :param error_msg: 错误描述
        """
        return self._top_request(
            "alitrip.uppc.member.airline",
            {
                "request_id": request_id,
                "status_code": status_code,
                "response_json": response_json,
                "error_msg": error_msg
            }
        )

    def alitrip_uppc_member_gain(
            self,
            request_id,
            status_code,
            response_json,
            error_msg=''
    ):
        """
        航司权益数据回流
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39720

        :param request_id: 请求唯一标识
        :param status_code: 查询成功
        :param response_json: 权益截止时间（扩展字段）
        :param error_msg: 错误提示
        """
        return self._top_request(
            "alitrip.uppc.member.gain",
            {
                "request_id": request_id,
                "status_code": status_code,
                "response_json": response_json,
                "error_msg": error_msg
            }
        )

    def alitrip_flight_basic_data_city_queryAll(
            self
    ):
        """
        机票基础数据城市数据查询
        机票基础数据城市数据查询top接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42575

        """
        return self._top_request(
            "alitrip.flight.basic.data.city.queryAll"
        )


class TbPingTaiZhiLi(DingTalkBaseAPI):
    """
    平台治理API
    """

    def taobao_sungari_dispose_submit(
            self,
            info
    ):
        """
        商品商家处置提交任务
        商品商家处置信息接口，提供政府部门发送处置信息给阿里
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40728

        :param info: 平台处置信息入参
        """
        return self._top_request(
            "taobao.sungari.dispose.submit",
            {
                "info": info
            }
        )

    def taobao_sungari_dispose_query(
            self,
            param_list
    ):
        """
        商品商家处置结果查询
        红盾云桥同政府合作，将线下寄函的商品商家处置转为线上处理
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40729

        :param param_list: 查询的key列表
        """
        return self._top_request(
            "taobao.sungari.dispose.query",
            {
                "param_list": param_list
            }
        )


class TbXiaMiKaiFangPingTai(DingTalkBaseAPI):
    """
    虾米开放平台
    """

    def xiami_api_song_listenfile_get(
            self,
            song_ids
    ):
        """
        获取歌曲试听文件
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35997

        :param song_ids: 歌曲id
        """
        return self._top_request(
            "xiami.api.song.listenfile.get",
            {
                "song_ids": song_ids
            },
            result_processor=lambda x: x["song_play_info_list"]
        )

    def xiami_api_song_detail_get(
            self,
            song_ids
    ):
        """
        获取歌曲详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36051

        :param song_ids: 歌曲id
        """
        return self._top_request(
            "xiami.api.song.detail.get",
            {
                "song_ids": song_ids
            },
            result_processor=lambda x: x["song_detail_list"]
        )


class TbALiJianKangYiSheng(DingTalkBaseAPI):
    """
    阿里健康医生
    """

    def alibaba_alihealth_logistics_update(
            self,
            logistics_deliver_request=None
    ):
        """
        阿里健康订单发货通知接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        阿里健康对外提供的，由第三方调用的订单发货状态更新、物流单号更新接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35884

        :param logistics_deliver_request: 入参对象
        """
        return self._top_request(
            "alibaba.alihealth.logistics.update",
            {
                "logistics_deliver_request": logistics_deliver_request
            }
        )

    def alibaba_alihealth_prescription_create(
            self,
            prescription_diagnosis_drug_top_request=None
    ):
        """
        阿里健康处方创建
        阿里健康对外提供处方创建功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35994

        :param prescription_diagnosis_drug_top_request: 诊断、处方、药品
        """
        return self._top_request(
            "alibaba.alihealth.prescription.create",
            {
                "prescription_diagnosis_drug_top_request": prescription_diagnosis_drug_top_request
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_hospital_register_status_syn(
            self,
            register_request=''
    ):
        """
        阿里健康预约挂号预约状态同步
        阿里健康医生，对接医院预约挂号业务，回传医院预约挂号结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39352

        :param register_request: 预约挂号结果同步入参
        """
        return self._top_request(
            "alibaba.alihealth.hospital.register.status.syn",
            {
                "register_request": register_request
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_doctor_schedule_sync(
            self,
            schedule_request=''
    ):
        """
        阿里健康预约挂号医生排班信息同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39403

        :param schedule_request: 排班请求报文
        """
        return self._top_request(
            "alibaba.alihealth.doctor.schedule.sync",
            {
                "schedule_request": schedule_request
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_doctor_schedule_stop(
            self,
            schedule_request=''
    ):
        """
        阿里健康预约挂号排班停诊
        阿里健康预约挂号医生排班信息同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40359

        :param schedule_request: 停诊请求报文
        """
        return self._top_request(
            "alibaba.alihealth.doctor.schedule.stop",
            {
                "schedule_request": schedule_request
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_hospital_message_push(
            self,
            message
    ):
        """
        消息推送接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41076

        :param message: 消息体
        """
        return self._top_request(
            "alibaba.alihealth.hospital.message.push",
            {
                "message": message
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_hospital_prescription_syn(
            self,
            prescription_request=None
    ):
        """
        将医院处方数据同步至健康
        阿里健康提供处方数据同步接口，由第三方调用该接口将医院处方数据同步至健康。不涉及数据外流
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41229

        :param prescription_request: 入参对象
        """
        return self._top_request(
            "alibaba.alihealth.hospital.prescription.syn",
            {
                "prescription_request": prescription_request
            }
        )

    def alibaba_alihealth_outflow_getbyverifycode(
            self,
            prescription_get_by_verify_request=None
    ):
        """
        处方外流药店通过核销码获取处方
        阿里健康对合作药店提供通过核销码查看处方的功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42603

        :param prescription_get_by_verify_request: 入参
        """
        return self._top_request(
            "alibaba.alihealth.outflow.getbyverifycode",
            {
                "prescription_get_by_verify_request": prescription_get_by_verify_request
            }
        )

    def alibaba_alihealth_outflow_prescription_update(
            self,
            update_request=None
    ):
        """
        处方外流-修改处方
        阿里健康-处方外流-对外提供处方修改功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42644

        :param update_request: 入参对象
        """
        return self._top_request(
            "alibaba.alihealth.outflow.prescription.update",
            {
                "update_request": update_request
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_asyncprescribe_prescription_search(
            self,
            search_request=None
    ):
        """
        异步开方处方查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43511

        :param search_request: 查询入参
        """
        return self._top_request(
            "alibaba.alihealth.asyncprescribe.prescription.search",
            {
                "search_request": search_request
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_asyncprescribe_prescription_detail(
            self,
            detail_request=None
    ):
        """
        异步开方处方详情
        异步开方处方查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43570

        :param detail_request: 入参
        """
        return self._top_request(
            "alibaba.alihealth.asyncprescribe.prescription.detail",
            {
                "detail_request": detail_request
            },
            result_processor=lambda x: x["service_result"]
        )


class TbFeiZhuJiuDianBiaoZhunKu(DingTalkBaseAPI):
    """
    飞猪酒店标准库
    """

    def alitrip_hotel_hstdf_shotel_audit_match(
            self,
            param0=None
    ):
        """
        shotelauditmatch
        根据酒店属性,匹配出标准库中相似的酒店
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40270

        :param param0: 酒店Match类
        """
        return self._top_request(
            "alitrip.hotel.hstdf.shotel.audit.match",
            {
                "param0": param0
            }
        )

    def alitrip_hotel_hstdf_shotel_licence(
            self,
            shotel_licence,
            licence_name=''
    ):
        """
        酒店资质图片上传
        酒店资质图片上传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40385

        :param shotel_licence: 酒店图片文件类型
        :param licence_name: 酒店图片名称
        """
        return self._top_request(
            "alitrip.hotel.hstdf.shotel.licence",
            {
                "shotel_licence": shotel_licence,
                "licence_name": licence_name
            }
        )

    def alitrip_hotel_hstdf_shotel_matchsroomself(
            self,
            param0=None
    ):
        """
        匹配标准房型以及卖家房型
        匹配卖家房型以及标准房型，返回匹配结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42711

        :param param0: SroomTypeMatchParam
        """
        return self._top_request(
            "alitrip.hotel.hstdf.shotel.matchsroomself",
            {
                "param0": param0
            }
        )

    def alitrip_hotel_hstdf_shotel_matchshotelself(
            self,
            param0
    ):
        """
        自主匹配标准酒店以及卖家酒店
        商家通过指定的标准酒店id和卖家酒店id进行匹配
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42712

        :param param0: HotelMatchParam
        """
        return self._top_request(
            "alitrip.hotel.hstdf.shotel.matchshotelself",
            {
                "param0": param0
            }
        )

    def alitrip_hotel_hstdf_shotel_exportshotel(
            self,
            hid=''
    ):
        """
        商家自主导出相似度高的标准酒店
        商家通过给出自己的卖家酒店信息，通过接口可以返回相似度高的标准酒店信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42713

        :param hid: 123456
        """
        return self._top_request(
            "alitrip.hotel.hstdf.shotel.exportshotel",
            {
                "hid": hid
            },
            result_processor=lambda x: x["top_result_set"]
        )

    def alitrip_hotel_hstdf_shotel_exportsroomtype(
            self,
            hid
    ):
        """
        导出一个卖家房型下的所有标准房型
        导出一个卖家酒店下的所有标准房型
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42725

        :param hid: 卖家酒店id
        """
        return self._top_request(
            "alitrip.hotel.hstdf.shotel.exportsroomtype",
            {
                "hid": hid
            }
        )

    def alitrip_hotel_hstdf_shotel_exnotmatchroom(
            self,
            hid=''
    ):
        """
        导出一个hid下所有未匹配rid的接口
        导出一个卖家hid下所有未匹配的rid信息，包括rid，名称、英文名称、床型、窗型、面积、对外系统id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43307

        :param hid: 卖家酒店hid
        """
        return self._top_request(
            "alitrip.hotel.hstdf.shotel.exnotmatchroom",
            {
                "hid": hid
            }
        )


class TbAEDropshipper(DingTalkBaseAPI):
    """
    AE-Dropshipper
    """

    def aliexpress_postproduct_redefining_findaeproductbyidfordropshipper(
            self,
            product_id='',
            local_country='',
            local_language=''
    ):
        """
        Dropshipper查找商品信息接口
        提供给Dropshipper的通过商品ID查找商品信息的接口，只有特定买家可以使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35321

        :param product_id: 商品ID
        :param local_country: 国家
        :param local_language: 语言
        """
        return self._top_request(
            "aliexpress.postproduct.redefining.findaeproductbyidfordropshipper",
            {
                "product_id": product_id,
                "local_country": local_country,
                "local_language": local_language
            }
        )

    def aliexpress_trade_ordermanage_orderdetailinfo(
            self,
            param_tp_open_single_order_query=None
    ):
        """
        订单详情查询
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        订单查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35445

        :param param_tp_open_single_order_query: 请求参数
        """
        return self._top_request(
            "aliexpress.trade.ordermanage.orderdetailinfo",
            {
                "param_tp_open_single_order_query": param_tp_open_single_order_query
            }
        )

    def aliexpress_trade_buy_placeorder(
            self,
            param_place_order_request4_open_api_d_t_o
    ):
        """
        AE下单API
        AE提供的下单服务API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35446

        :param param_place_order_request4_open_api_d_t_o: 下单具体参数
        """
        return self._top_request(
            "aliexpress.trade.buy.placeorder",
            {
                "param_place_order_request4_open_api_d_t_o": param_place_order_request4_open_api_d_t_o
            }
        )

    def aliexpress_logistics_buyer_freight_calculate(
            self,
            param_aeop_freight_calculate_for_buyer_d_t_o
    ):
        """
        提供给买家使用的运费计算接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39371

        :param param_aeop_freight_calculate_for_buyer_d_t_o: 运费计算请求参数
        """
        return self._top_request(
            "aliexpress.logistics.buyer.freight.calculate",
            {
                "param_aeop_freight_calculate_for_buyer_d_t_o": param_aeop_freight_calculate_for_buyer_d_t_o
            }
        )

    def aliexpress_trade_ds_order_get(
            self,
            single_order_query
    ):
        """
        买家查询订单详情
        买家查询订单详情，用于dropshipper
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39662

        :param single_order_query: 订单查询条件
        """
        return self._top_request(
            "aliexpress.trade.ds.order.get",
            {
                "single_order_query": single_order_query
            }
        )

    def aliexpress_logistics_ds_trackinginfo_query(
            self,
            logistics_no,
            origin,
            out_ref,
            service_name,
            to_area
    ):
        """
        查询物流追踪信息
        Dropshipper查询物流追踪信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40656

        :param logistics_no: Logistics tracking number
        :param origin: Order origin to be queried. The origin of the AE order is “ESCROW”.
        :param out_ref: Order ID to be queried by the user
        :param service_name: Logistics service KEY
        :param to_area: Country for receiving goods in the trade order (FJ,Fiji;FI,Finland;FR,France;FX,FranceMetropolitan;GF,FrenchGuiana;PF,FrenchPolynesia;TF,FrenchSouthernTerritories;GA,Gabon;GM,Gambia;GE,Georgia;DE,Germany;GH,Ghana;GI,Gibraltar;GR,Greece;GL,Greenland;GD,Grenada;GP,Guadeloupe;GU,Guam;GT,Guatemala;GN,Guinea;GW,Guinea-Bissau;GY,Guyana;HT,Haiti;HM,HeardandMcDonaldIslands;HN,Honduras;HK,HongKong;HU,Hungary;IS,Iceland;IN,India;ID,Indonesia;IR,Iran(IslamicRepublicof);IQ,Iraq;IE,Ireland;IL,Israel;IT,Italy;JM,Jamaica;JP,Japan;JO,Jordan;KZ,Kazakhstan;KE,Kenya;KI,Kiribati;KW,Kuwait;KG,Kyrgyzstan;LA,LaoPeople'sDemocraticRepublic;LV,Latvia;LB,Lebanon;LS,Lesotho;LR,Liberia;LY,LibyanArabJamahiriya;AF,Afghanistan;AL,Albania;DZ,Algeria;AS,AmericanSamoa;AD,Andorra;AO,Angola;AI,Anguilla;AQ,Antarctica;AG,AntiguaandBarbuda;AR,Argentina;AM,Armenia;AW,Aruba;AU,Australia;AT,Austria;AZ,Azerbaijan;BS,Bahamas;BH,Bahrain;BD,Bangladesh;BB,Barbados;BY,Belarus;BE,Belgium;BZ,Belize;BJ,Benin;BM,Bermuda;BT,Bhutan;BO,Bolivia;BA,BosniaandHerzegovina;BW,Botswana;BV,BouvetIsland;BR,Brazil;IO,BritishIndianOceanTerritory;BN,BruneiDarussalam;BG,Bulgaria;BF,BurkinaFaso;BI,Burundi;KH,Cambodia;CM,Cameroon;CA,Canada;CV,CapeVerde;KY,CaymanIslands;CF,CentralAfricanRepublic;TD,Chad;CL,Chile;CN,China(Mainland);CX,ChristmasIsland;CC,Cocos(Keeling)Islands;CO,Colombia;KM,Comoros;CG,Congo,TheRepublicofCongo;ZR,Congo,TheDemocraticRepublicOfThe;CK,CookIslands;CR,CostaRica;CI,CoteD'Ivoire;HR,Croatia(localname:Hrvatska);CU,Cuba;CY,Cyprus;CZ,CzechRepublic;DK,Denmark;DJ,Djibouti;DM,Dominica;DO,DominicanRepublic;TP,EastTimor;EC,Ecuador;EG,Egypt;SV,ElSalvador;GQ,EquatorialGuinea;ER,Eritrea;EE,Estonia;ET,Ethiopia;FK,FalklandIslands(Malvinas);FO,FaroeIslands;LI,Liechtenstein;LT,Lithuania;LU,Luxembourg;MO,Macau;MK,Macedonia;MG,Madagascar;MW,Malawi;MY,Malaysia;MV,Maldives;ML,Mali;MT,Malta;MH,MarshallIslands;MQ,Martinique;MR,Mauritania;MU,Mauritius;YT,Mayotte;MX,Mexico;FM,Micronesia;MD,Moldova;MC,Monaco;MN,Mongolia;MS,Montserrat;MA,Morocco;MZ,Mozambique;MM,Myanmar;NA,Namibia;NR,Nauru;NP,Nepal;NL,Netherlands;AN,NetherlandsAntilles;NC,NewCaledonia;NZ,NewZealand;NI,Nicaragua;NE,Niger;NG,Nigeria;NU,Niue;NF,NorfolkIsland;KP,NorthKorea;MP,NorthernMarianaIslands;NO,Norway;OM,Oman;Other,OtherCountry;PK,Pakistan;PW,Palau;PS,Palestine;PA,Panama;PG,PapuaNewGuinea;PY,Paraguay;PE,Peru;PH,Philippines;PN,Pitcairn;PL,Poland;PT,Portugal;PR,PuertoRico;QA,Qatar;RE,Reunion;RO,Romania;RU,RussianFederation;RW,Rwanda;KN,SaintKittsandNevis;LC,SaintLucia;VC,SaintVincentandtheGrenadines;WS,Samoa;SM,SanMarino;ST,SaoTomeandPrincipe;SA,SaudiArabia;SN,Senegal;SC,Seychelles;SL,SierraLeone;SG,Singapore;SK,Slovakia(SlovakRepublic);SI,Slovenia;SB,SolomonIslands;SO,Somalia;ZA,SouthAfrica;KR,SouthKorea;ES,Spain;LK,SriLanka;SH,St.Helena;PM,St.PierreandMiquelon;SD,Sudan;SR,Suriname;SJ,SvalbardandJanMayenIslands;SZ,Swaziland;SE,Sweden;CH,Switzerland;SY,SyrianArabRepublic;TW,T aiwan;TJ,Tajikistan;TZ,Tanzania;TH,Thailand;TG,Togo;TK,Tokelau;TO,Tonga;TT,TrinidadandTobago;TN,Tunisia;TR,Turkey;TM,Turkmenistan;TC,TurksandCaicosIslands;TV,Tuvalu;UG,Uganda;UA,Ukraine;AE,UnitedArabEmirates;IM,IsleofMan;UK,UnitedKingdom;US,UnitedStates;UM,UnitedStatesMinorOutlyingIslands;UY,Uruguay;UZ,Uzbekistan;VU,Vanuatu;VA,VaticanCityState(HolySee);VE,Venezuela;VN,Vietnam;VG,VirginIslands(British);VI,VirginIslands(U.S.);WF,WallisAndFutunaIslands;EH,WesternSahara;YE,Yemen;YU,Yugoslavia;ZM,Zambia;ZW,Zimbabwe;SRB,Serbia;MNE,Montenegro;KS,Kosovo;EAZ,Zanzibar;BLM,SaintBarthelemy;MAF,SaintMartin;GGY,Guernsey;JEY,Jersey;SGS,SouthGeorgiaandtheSouthSandwichIslands;TLS,Timor-Leste;ALA,AlandIslands;GBA,Alderney;ASC,AscensionIsland;)
        """
        return self._top_request(
            "aliexpress.logistics.ds.trackinginfo.query",
            {
                "logistics_no": logistics_no,
                "origin": origin,
                "out_ref": out_ref,
                "service_name": service_name,
                "to_area": to_area
            }
        )

    def aliexpress_offer_ds_product_simplequery(
            self,
            product_id='',
            local_country='',
            local_language=''
    ):
        """
        Dropshipper查询单个商品的简易信息
        提供给Dropshipper的通过商品ID查找商品简易信息（包括SKU-价格/库存、产品状态等）的接口，只有特定买家可以使用
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40657

        :param product_id: 商品ID
        :param local_country: 国家
        :param local_language: 语言
        """
        return self._top_request(
            "aliexpress.offer.ds.product.simplequery",
            {
                "product_id": product_id,
                "local_country": local_country,
                "local_language": local_language
            }
        )


class TbXinXiPingTaiCaiGou(DingTalkBaseAPI):
    """
    信息平台-采购
    """

    def alibaba_ceres_supplier_po_query(
            self,
            start_date,
            end_date,
            status=''
    ):
        """
        采购供应商订单查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38501

        :param start_date: 订单创建日期开始时间
        :param end_date: 订单创建日期结束时间
        :param status: 订单状态
        """
        return self._top_request(
            "alibaba.ceres.supplier.po.query",
            {
                "start_date": start_date,
                "end_date": end_date,
                "status": status
            }
        )

    def alibaba_ceres_supplier_po_querydetail(
            self,
            po_no
    ):
        """
        采购供应商订单明细查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38502

        :param po_no: 订单编号
        """
        return self._top_request(
            "alibaba.ceres.supplier.po.querydetail",
            {
                "po_no": po_no
            }
        )

    def alibaba_pur_pr_create(
            self,
            pur_req
    ):
        """
        下pr单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41406

        :param pur_req: 订单信息
        """
        return self._top_request(
            "alibaba.pur.pr.create",
            {
                "pur_req": pur_req
            }
        )

    def alibaba_pur_product_sync(
            self,
            access_product_dtos
    ):
        """
        同步产品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42134

        :param access_product_dtos: 产品对象
        """
        return self._top_request(
            "alibaba.pur.product.sync",
            {
                "access_product_dtos": access_product_dtos
            }
        )

    def alibaba_pur_media_statistics(
            self,
            media_statistics_d_t_o=None
    ):
        """
        新媒体统计信息
        清博同步新媒体的统计信息给到采购平台
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43350

        :param media_statistics_d_t_o: 新媒体统计对象
        """
        return self._top_request(
            "alibaba.pur.media.statistics",
            {
                "media_statistics_d_t_o": media_statistics_d_t_o
            }
        )


class TbLingShouTongZiDongShouHuoJi(DingTalkBaseAPI):
    """
    零售通自动售货机
    """

    def alibaba_lst_vending_equipment_enable(
            self,
            supplier_code,
            equipment_code
    ):
        """
        自动售货机设备激活
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        自动售货机在完成安装流程后，需要调用此激活接口才能正常使用。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36395

        :param supplier_code: 设备供应商唯一标识
        :param equipment_code: 设备唯一标识
        """
        return self._top_request(
            "alibaba.lst.vending.equipment.enable",
            {
                "supplier_code": supplier_code,
                "equipment_code": equipment_code
            }
        )

    def alibaba_lst_vending_order_update(
            self,
            vending_order_d_t_o
    ):
        """
        自动售货机订单物流信息回传
        零售通与设备供应商进行订单对接，通过此接口回流订单物流信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36412

        :param vending_order_d_t_o: 零售通设备订单
        """
        return self._top_request(
            "alibaba.lst.vending.order.update",
            {
                "vending_order_d_t_o": vending_order_d_t_o
            }
        )

    def alibaba_lst_store_open_waybill_send(
            self,
            open_order_d_t_o
    ):
        """
        零售通门店订单物流信息回传接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        零售通与供应商进行订单对接，通过此接口回流订单物流信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37257

        :param open_order_d_t_o: 订单信息
        """
        return self._top_request(
            "alibaba.lst.store.open.waybill.send",
            {
                "open_order_d_t_o": open_order_d_t_o
            }
        )

    def alibaba_lst_vending_goods_save(
            self,
            goods_d_t_o_list
    ):
        """
        自动售卖机商品回传
        零售通自动售卖机商品数据回流。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37505

        :param goods_d_t_o_list: 商品信息
        """
        return self._top_request(
            "alibaba.lst.vending.goods.save",
            {
                "goods_d_t_o_list": goods_d_t_o_list
            }
        )

    def alibaba_lst_vending_cargospace_save(
            self,
            cargo_space_d_t_o_list
    ):
        """
        自动售卖机货道数据回流
        自动售卖机货道数据回流接口，ISV通过调用此接口上传售卖机货道信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37506

        :param cargo_space_d_t_o_list: 货道信息
        """
        return self._top_request(
            "alibaba.lst.vending.cargospace.save",
            {
                "cargo_space_d_t_o_list": cargo_space_d_t_o_list
            }
        )

    def alibaba_lst_vending_tradeflow_save(
            self,
            trade_flow_d_t_o_list
    ):
        """
        自动售卖机交易信息回流
        自动售货机交易信息同步接口，ISV通过此接口上传售货机交易信息。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37508

        :param trade_flow_d_t_o_list: 交易流水信息
        """
        return self._top_request(
            "alibaba.lst.vending.tradeflow.save",
            {
                "trade_flow_d_t_o_list": trade_flow_d_t_o_list
            }
        )

    def alibaba_lst_vending_equipment_query(
            self,
            open_equipment_query=None
    ):
        """
        自动售卖机设备信息查询
        为零售通品牌商提供已租赁的设备信息查询。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38020

        :param open_equipment_query: 设备查询条件
        """
        return self._top_request(
            "alibaba.lst.vending.equipment.query",
            {
                "open_equipment_query": open_equipment_query
            }
        )

    def alibaba_lst_vending_tradeflow_query(
            self,
            open_trade_flow_query
    ):
        """
        自动售卖机交易流水查询
        零售通自动售卖机交易流水查询接口，品牌商通过此接口同步商品交易数据。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38021

        :param open_trade_flow_query: 交易流水查询条件
        """
        return self._top_request(
            "alibaba.lst.vending.tradeflow.query",
            {
                "open_trade_flow_query": open_trade_flow_query
            }
        )

    def alibaba_lst_vendng_image_upload(
            self,
            img_bytes
    ):
        """
        售货机商品图片上传
        零售通自动售货机商品图片上传接口，主要为ISV厂商提供图片同步的通道，从而建立统一的商品图片库。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39365

        :param img_bytes: 图片文件字节数组
        """
        return self._top_request(
            "alibaba.lst.vendng.image.upload",
            {
                "img_bytes": img_bytes
            }
        )

    def alibaba_lst_vending_shipping_callback(
            self,
            equipment_code,
            trade_flow_no,
            code,
            time,
            message=''
    ):
        """
        售货机出货回传接口
        零售通自动售货机商品出货回传接口，同步商品出库最新状态。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39366

        :param equipment_code: 厂商设备编码
        :param trade_flow_no: 交易流水号
        :param code: 处理结果代码
        :param time: 出货时间
        :param message: 处理结果代码描述
        """
        return self._top_request(
            "alibaba.lst.vending.shipping.callback",
            {
                "equipment_code": equipment_code,
                "trade_flow_no": trade_flow_no,
                "code": code,
                "time": time,
                "message": message
            },
            result_processor=lambda x: x["module"]
        )


class TbOttZhiFu(DingTalkBaseAPI):
    """
    ott支付
    """

    def youku_ott_pay_order_queryorderbycp(
            self,
            cp_order_no=''
    ):
        """
        订单查询接口(cp订单号查询)
        给商户服务端查询订单状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37270

        :param cp_order_no: cp订单号
        """
        return self._top_request(
            "youku.ott.pay.order.queryorderbycp",
            {
                "cp_order_no": cp_order_no
            },
            result_processor=lambda x: x["data"]
        )

    def youku_ott_pay_order_queryorder(
            self,
            order_no
    ):
        """
        查询订单
        通过订单号查询订单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37271

        :param order_no: 订单号
        """
        return self._top_request(
            "youku.ott.pay.order.queryorder",
            {
                "order_no": order_no
            },
            result_processor=lambda x: x["data"]
        )

    def youku_ott_pay_order_createorder(
            self,
            buyer='',
            product_id='',
            product_name='',
            order_no='',
            price='',
            callback_url='',
            extra='',
            order_type='0',
            real_price=''
    ):
        """
        创建订单
        ottpay创建订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37272

        :param buyer: 下单账号， cp账号
        :param product_id: 商品id
        :param product_name: 商品名称
        :param order_no: cp订单号
        :param price: 价格， 单位：分
        :param callback_url: 回调接口
        :param extra: 订单无关的其他参数,如埋点统计的utdid, mac地址等
        :param order_type: 订单类型，1为连续包月类型
        :param real_price: 连续包月实际参数
        """
        return self._top_request(
            "youku.ott.pay.order.createorder",
            {
                "buyer": buyer,
                "product_id": product_id,
                "product_name": product_name,
                "order_no": order_no,
                "price": price,
                "callback_url": callback_url,
                "extra": extra,
                "order_type": order_type,
                "real_price": real_price
            },
            result_processor=lambda x: x["data"]
        )

    def youku_ott_pay_order_authpay(
            self,
            buyer,
            original_order_no,
            order_no,
            product_id,
            callback_url=''
    ):
        """
        委托代扣服务
        应用中心sdk连续包月委托代扣服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42561

        :param buyer: cp用户名
        :param original_order_no: 连续包月原始cp订单号
        :param order_no: 委托扣款cp订单号
        :param product_id: 已配置开通连续包月的产品id
        :param callback_url: 回调
        """
        return self._top_request(
            "youku.ott.pay.order.authpay",
            {
                "buyer": buyer,
                "original_order_no": original_order_no,
                "order_no": order_no,
                "product_id": product_id,
                "callback_url": callback_url
            },
            result_processor=lambda x: x["data"]
        )

    def youku_ott_pay_order_deleteorder(
            self,
            buyer='',
            product_id='',
            product_name='',
            order_no='',
            callback_url='',
            extra='',
            order_type='0',
            original_order_no=''
    ):
        """
        退订应用中心支付订单
        应用中心sdk连续包月退订接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42564

        :param buyer: 下单账号， cp账号
        :param product_id: 商品id
        :param product_name: 商品名称
        :param order_no: cp订单号
        :param callback_url: 回调地址
        :param extra: 订单无关的其他参数,如埋点统计的utdid, mac地址等
        :param order_type: 订单类型，1为连续包月类型,2为取消连续包月
        :param original_order_no: 连续包月原始订单
        """
        return self._top_request(
            "youku.ott.pay.order.deleteorder",
            {
                "buyer": buyer,
                "product_id": product_id,
                "product_name": product_name,
                "order_no": order_no,
                "callback_url": callback_url,
                "extra": extra,
                "order_type": order_type,
                "original_order_no": original_order_no
            },
            result_processor=lambda x: x["data"]
        )


class TbTianMaoQiChe(DingTalkBaseAPI):
    """
    天猫汽车
    """

    def tmall_car_lease_postsynchronize(
            self,
            scheme_dto
    ):
        """
        天猫开新车租后信息同步
        商家同步天猫开新车租后方案
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37070

        :param scheme_dto: 租后方案信息
        """
        return self._top_request(
            "tmall.car.lease.postsynchronize",
            {
                "scheme_dto": scheme_dto
            }
        )

    def tmall_car_lease_citysynchronize(
            self,
            param_area_dto=None
    ):
        """
        天猫开新车租后分期城市信息同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37071

        :param param_area_dto: 地址信息
        """
        return self._top_request(
            "tmall.car.lease.citysynchronize",
            {
                "param_area_dto": param_area_dto
            }
        )

    def tmall_car_lease_statussynchronize(
            self,
            order_id,
            biz_type,
            action_type,
            action_value,
            refuse_reason=''
    ):
        """
        天猫开新车租后状态同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37072

        :param order_id: 天猫开新车订单号
        :param biz_type: 业务类型:0.退车,1.买断,2.分期，3.续租
        :param action_type: 1:过户,2:续租,3.额外费用审核，4.退车完成
        :param action_value: 1:通过，-1:拒绝
        :param refuse_reason: 拒绝原因
        """
        return self._top_request(
            "tmall.car.lease.statussynchronize",
            {
                "order_id": order_id,
                "biz_type": biz_type,
                "action_type": action_type,
                "action_value": action_value,
                "refuse_reason": refuse_reason
            }
        )

    def tmall_car_lease_exceptionflowsynchronize(
            self,
            order_id,
            status,
            desc,
            flow_type=''
    ):
        """
        天猫开新车租后异常流线下处理状态通知接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37073

        :param order_id: 天猫开新车订单id
        :param status: 1:开始切换为异常流，2:线下处理完成
        :param desc: 切换原因描述
        :param flow_type: 异常流类型,0.退车,1.买断,2.分期，3.续租
        """
        return self._top_request(
            "tmall.car.lease.exceptionflowsynchronize",
            {
                "order_id": order_id,
                "status": status,
                "desc": desc,
                "flow_type": flow_type
            }
        )

    def tmall_car_lease_loanriskback(
            self,
            order_id,
            pass_,
            risk_data=None
    ):
        """
        天猫开新车租后分期结果返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37074

        :param order_id: 天猫开新车订单id
        :param pass_: 是否通过
        :param risk_data: 风控信息
        """
        return self._top_request(
            "tmall.car.lease.loanriskback",
            {
                "order_id": order_id,
                "pass": pass_,
                "risk_data": risk_data
            }
        )

    def tmall_car_lease_queryloanplans(
            self,
            loanarno,
            iproleid
    ):
        """
        天猫开新车租后查询还款计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37075

        :param loanarno: 合约编号
        :param iproleid: 客户的角色编号
        """
        return self._top_request(
            "tmall.car.lease.queryloanplans",
            {
                "loanarno": loanarno,
                "iproleid": iproleid
            }
        )

    def tmall_car_lease_payforcustomer(
            self,
            order_id='0',
            cust_iprole_id='',
            date='',
            loan_ar_no='',
            prin_amt='',
            request_id=''
    ):
        """
        天猫开新车租后代客户还款
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37076

        :param order_id: 天猫开新车订单id
        :param cust_iprole_id: 贷款客户在网商的会员ID
        :param date: 还款日，精确到日，格式为yyyyMMdd，必须是当天
        :param loan_ar_no: 贷款合约号
        :param prin_amt: 还款本金金额，单位默认为元，支持小数点两位，为了便于传输用合作方将数值型转换为字符串型
        :param request_id: 外部流水号格式：日期(8位)+序列号(8位）,序列号是数字，如00000001（必须是16位且符合该格式
        """
        return self._top_request(
            "tmall.car.lease.payforcustomer",
            {
                "order_id": order_id,
                "cust_iprole_id": cust_iprole_id,
                "date": date,
                "loan_ar_no": loan_ar_no,
                "prin_amt": prin_amt,
                "request_id": request_id
            }
        )

    def tmall_car_lease_contractdownload(
            self,
            order_id='',
            type=''
    ):
        """
        天猫开新车租后合同下载
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37077

        :param order_id: 天猫开新车订单id
        :param type: 续租协议： 1， 全款购车协议： 2，分期购买协议：3， 分期购买车辆资产验收协议：4，分期购买车辆抵押：5， 分期购买融资租赁合同：6
        """
        return self._top_request(
            "tmall.car.lease.contractdownload",
            {
                "order_id": order_id,
                "type": type
            }
        )

    def tmall_car_lease_orderid_get(
            self,
            open_id=''
    ):
        """
        天猫开新车查询订单id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37078

        :param open_id: openid
        """
        return self._top_request(
            "tmall.car.lease.orderid.get",
            {
                "open_id": open_id
            }
        )

    def tmall_car_leads_getbymobile(
            self,
            mobile
    ):
        """
        大搜车push获取报价信息
        天猫开新车查询订单id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38922

        :param mobile: 手机号
        """
        return self._top_request(
            "tmall.car.leads.getbymobile",
            {
                "mobile": mobile
            }
        )

    def tmall_car_xcar_synchronize_car_line_data(
            self,
            param_x_car_sys_line_d_t_o
    ):
        """
        我的爱卡车型配置数据
        同步我的爱卡车系配置数据到天猫汽车
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40970

        :param param_x_car_sys_line_d_t_o: 入参对象
        """
        return self._top_request(
            "tmall.car.xcar.synchronize.car.line.data",
            {
                "param_x_car_sys_line_d_t_o": param_x_car_sys_line_d_t_o
            }
        )

    def tmall_car_xcar_synchronize_car_model_data(
            self,
            param_x_car_sys_model_d_t_o
    ):
        """
        爱车车型数据同步
        爱车汽车车型数据同步到天猫
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41160

        :param param_x_car_sys_model_d_t_o: 传入对象描述
        """
        return self._top_request(
            "tmall.car.xcar.synchronize.car.model.data",
            {
                "param_x_car_sys_model_d_t_o": param_x_car_sys_model_d_t_o
            }
        )

    def tmall_car_xcar_synchronize_car_line_pics_data(
            self,
            param_x_car_sys_line_pics_d_t_o
    ):
        """
        爱卡车系图片数据接入
        爱卡车系图片数据同步天猫汽车
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41169

        :param param_x_car_sys_line_pics_d_t_o: 入参对象
        """
        return self._top_request(
            "tmall.car.xcar.synchronize.car.line.pics.data",
            {
                "param_x_car_sys_line_pics_d_t_o": param_x_car_sys_line_pics_d_t_o
            }
        )

    def taobao_car_vehicleinfo_register(
            self,
            param_list=None
    ):
        """
        全量车型导入
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41631

        :param param_list: 参数集合
        """
        return self._top_request(
            "taobao.car.vehicleinfo.register",
            {
                "param_list": param_list
            }
        )


class TbALIOSGuangGaoPingTai(DingTalkBaseAPI):
    """
    ALIOS广告平台
    """

    def yunos_admarket_ad_bid(
            self,
            bid_request
    ):
        """
        广告竞价服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37669

        :param bid_request: 竞价请求
        """
        return self._top_request(
            "yunos.admarket.ad.bid",
            {
                "bid_request": bid_request
            }
        )

    def yunos_admarket_material_audit(
            self,
            ssp_material_audit_result
    ):
        """
        广告平台创意审核
        用于厂商上报广告平台审核结果
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40155

        :param ssp_material_audit_result: 创意审核结果
        """
        return self._top_request(
            "yunos.admarket.material.audit",
            {
                "ssp_material_audit_result": ssp_material_audit_result
            }
        )

    def yunos_admarket_microprobe_report(
            self,
            microprobe_request=None
    ):
        """
        探针数据上报接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        用于厂商向我们上报探针数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40208

        :param microprobe_request: 请求参数
        """
        return self._top_request(
            "yunos.admarket.microprobe.report",
            {
                "microprobe_request": microprobe_request
            }
        )


class TbTaoBaoSouSuo(DingTalkBaseAPI):
    """
    淘宝搜索API
    """

    def taobao_search_hetu_result_get(
            self,
            template,
            usrimg,
            profiles=''
    ):
        """
        搜索人像合图接口
        提供人像抠图服务，输入为图片oss地址，根据业务需要，可以返回扣取出来的人像或者人像合成到特定模板后的OSS图片地址
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38368

        :param template: 合图模板。0表示直接抠图，[1,128]表示具体的合图模板
        :param usrimg: 上传图片的OSS地址
        :param profiles: 相关信息都可以填，譬如用户年龄、性别等。格式：“k1:v1;k2:v2” ，需要encode
        """
        return self._top_request(
            "taobao.search.hetu.result.get",
            {
                "template": template,
                "usrimg": usrimg,
                "profiles": profiles
            }
        )


class TbYeWuPingTaiXinLingShou(DingTalkBaseAPI):
    """
    业务平台新零售
    """

    def taobao_uscesl_iteminfo_put(
            self,
            price_unit,
            acction_price,
            item_bar_code,
            item_title,
            item_id,
            shop_id,
            model_num='',
            brand_name='',
            sale_spec='',
            category_name='',
            rank='',
            item_change_status='',
            energy_efficiency='',
            sku_id='',
            promotion_start='',
            promotion_text='',
            customize_feature_c='',
            customize_feature_d='',
            customize_feature_e='',
            customize_feature_f='',
            customize_feature_g='',
            customize_feature_h='',
            customize_feature_i='',
            customize_feature_j='',
            item_qr_code='',
            item_status='',
            if_promotion='',
            promotion_end='',
            promotion_reason='',
            original_price='',
            short_title='',
            customize_feature_b='',
            production_place='',
            customize_feature_a=''
    ):
        """
        电子价签显示用商品信息写入
        用于电子价签上显示的商品信息的写入，包含价格及促销信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35295

        :param price_unit: 价格单位
        :param acction_price: 实际销售价格，单位：分
        :param item_bar_code: 商品条码
        :param item_title: 商品名称
        :param item_id: 商品编码
        :param shop_id: 门店ID
        :param model_num: 型号
        :param brand_name: 品牌名
        :param sale_spec: 销售规格
        :param category_name: 分类
        :param rank: 等级
        :param item_change_status: 商品变更状态
        :param energy_efficiency: 能效
        :param sku_id: 商品skuId
        :param promotion_start: 促销开始时间:yyyy-MM-dd HH:mm:ss
        :param promotion_text: 促销文案
        :param customize_feature_c: 扩展属性C
        :param customize_feature_d: 扩展属性D
        :param customize_feature_e: 扩展属性E
        :param customize_feature_f: 扩展属性F
        :param customize_feature_g: 扩展属性G
        :param customize_feature_h: 扩展属性H
        :param customize_feature_i: 扩展属性I
        :param customize_feature_j: 扩展属性J
        :param item_qr_code: 二维码
        :param item_status: 商品状态0:在售 1:售罄
        :param if_promotion: 促销状态0:非促销 1:促销
        :param promotion_end: 促销结束时间:yyyy-MM-dd HH:mm:ss
        :param promotion_reason: 促销原因
        :param original_price: 商品原价
        :param short_title: 商品简称
        :param customize_feature_b: 扩展属性B
        :param production_place: 产地
        :param customize_feature_a: 扩展属性A
        """
        return self._top_request(
            "taobao.uscesl.iteminfo.put",
            {
                "price_unit": price_unit,
                "acction_price": acction_price,
                "item_bar_code": item_bar_code,
                "item_title": item_title,
                "item_id": item_id,
                "shop_id": shop_id,
                "model_num": model_num,
                "brand_name": brand_name,
                "sale_spec": sale_spec,
                "category_name": category_name,
                "rank": rank,
                "item_change_status": item_change_status,
                "energy_efficiency": energy_efficiency,
                "sku_id": sku_id,
                "promotion_start": promotion_start,
                "promotion_text": promotion_text,
                "customize_feature_c": customize_feature_c,
                "customize_feature_d": customize_feature_d,
                "customize_feature_e": customize_feature_e,
                "customize_feature_f": customize_feature_f,
                "customize_feature_g": customize_feature_g,
                "customize_feature_h": customize_feature_h,
                "customize_feature_i": customize_feature_i,
                "customize_feature_j": customize_feature_j,
                "item_qr_code": item_qr_code,
                "item_status": item_status,
                "if_promotion": if_promotion,
                "promotion_end": promotion_end,
                "promotion_reason": promotion_reason,
                "original_price": original_price,
                "short_title": short_title,
                "customize_feature_b": customize_feature_b,
                "production_place": production_place,
                "customize_feature_a": customize_feature_a
            }
        )

    def taobao_uscesl_iteminfo_batch_put(
            self,
            shop_id,
            item_change_b_o_list=None
    ):
        """
        批量写入商品信息接口
        电子架签批量写入商品数据，用于电子价签展示
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=36628

        :param shop_id: 门店ID
        :param item_change_b_o_list: 商品变更信息集合
        """
        return self._top_request(
            "taobao.uscesl.iteminfo.batch.put",
            {
                "shop_id": shop_id,
                "item_change_b_o_list": item_change_b_o_list
            }
        )

    def taobao_uscesl_iteminfo_batch_insert(
            self,
            item_list,
            store_id,
            biz_brand_key
    ):
        """
        按商家批量写入商品接口
        【电子价签】支持按照商家-门店维度批量写入商品数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39054

        :param item_list: 商品信息集合，限制500
        :param store_id: 门店ID
        :param biz_brand_key: 商家KEY
        """
        return self._top_request(
            "taobao.uscesl.iteminfo.batch.insert",
            {
                "item_list": item_list,
                "store_id": store_id,
                "biz_brand_key": biz_brand_key
            }
        )

    def taobao_uscesl_biz_store_insert(
            self,
            store_name,
            store_out_id,
            biz_brand_key
    ):
        """
        新增电子价签商家门店接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39069

        :param store_name: 门店名称
        :param store_out_id: 门店外部ID，要保持同一商家下的唯一性
        :param biz_brand_key: 商家标识key
        """
        return self._top_request(
            "taobao.uscesl.biz.store.insert",
            {
                "store_name": store_name,
                "store_out_id": store_out_id,
                "biz_brand_key": biz_brand_key
            }
        )

    def taobao_uscesl_biz_brand_insert(
            self,
            brand_name,
            brand_out_code
    ):
        """
        新增电子价签商家
        一个电子价签业务身份下新增商家接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39070

        :param brand_name: 商家名称
        :param brand_out_code: 商家外部编号
        """
        return self._top_request(
            "taobao.uscesl.biz.brand.insert",
            {
                "brand_name": brand_name,
                "brand_out_code": brand_out_code
            }
        )

    def taobao_uscesl_biz_esl_unbind(
            self,
            esl_bar_code,
            store_id,
            biz_brand_key
    ):
        """
        电子价签解绑接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39107

        :param esl_bar_code: 价签条码
        :param store_id: 价签系统注册的门店storeId
        :param biz_brand_key: 商家标识key
        """
        return self._top_request(
            "taobao.uscesl.biz.esl.unbind",
            {
                "esl_bar_code": esl_bar_code,
                "store_id": store_id,
                "biz_brand_key": biz_brand_key
            }
        )

    def taobao_uscesl_biz_esl_bind(
            self,
            esl_bar_code,
            item_bar_code,
            store_id,
            biz_brand_key,
            extend_info=''
    ):
        """
        电子价签绑定接口
        电子价签商品绑定接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39108

        :param esl_bar_code: 价签条码
        :param item_bar_code: 商品条码
        :param store_id: 门店storeId
        :param biz_brand_key: 商家ID
        :param extend_info: 额外扩展信息
        """
        return self._top_request(
            "taobao.uscesl.biz.esl.bind",
            {
                "esl_bar_code": esl_bar_code,
                "item_bar_code": item_bar_code,
                "store_id": store_id,
                "biz_brand_key": biz_brand_key,
                "extend_info": extend_info
            }
        )

    def taobao_uscesl_biz_esl_info_get(
            self,
            esl_bar_code,
            store_id,
            biz_brand_key
    ):
        """
        价签设备信息查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39125

        :param esl_bar_code: 价签条码
        :param store_id: 门店storeId
        :param biz_brand_key: 商家ID
        """
        return self._top_request(
            "taobao.uscesl.biz.esl.info.get",
            {
                "esl_bar_code": esl_bar_code,
                "store_id": store_id,
                "biz_brand_key": biz_brand_key
            }
        )

    def taobao_uscesl_biz_ap_delete(
            self,
            ap_mac='',
            store_id='',
            biz_brand_key=''
    ):
        """
        删除价签AP设备
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41329

        :param ap_mac: ap的MAC地址
        :param store_id: 门店ID
        :param biz_brand_key: 商家CODE
        """
        return self._top_request(
            "taobao.uscesl.biz.ap.delete",
            {
                "ap_mac": ap_mac,
                "store_id": store_id,
                "biz_brand_key": biz_brand_key
            }
        )

    def taobao_uscesl_biz_ap_add(
            self,
            ap_mac='',
            store_id='',
            biz_brand_key=''
    ):
        """
        新增价签通讯AP设备
        根据门店和ap的MAC地址新增
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41330

        :param ap_mac: AP MAC地址
        :param store_id: 价签系统门店ID
        :param biz_brand_key: 商家code
        """
        return self._top_request(
            "taobao.uscesl.biz.ap.add",
            {
                "ap_mac": ap_mac,
                "store_id": store_id,
                "biz_brand_key": biz_brand_key
            }
        )

    def taobao_uscesl_biz_ap_activate(
            self,
            ap_mac,
            store_id,
            biz_brand_key
    ):
        """
        激活AP价签通讯模块
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41646

        :param ap_mac: AP的mac地址
        :param store_id: 门店ID
        :param biz_brand_key: 商家编码
        """
        return self._top_request(
            "taobao.uscesl.biz.ap.activate",
            {
                "ap_mac": ap_mac,
                "store_id": store_id,
                "biz_brand_key": biz_brand_key
            }
        )

    def taobao_uscesl_biz_light_up(
            self,
            store_id,
            biz_brand_key,
            esl_bar_code,
            led_color,
            light_up_time
    ):
        """
        价签LED等点亮
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41540

        :param store_id: 门店ID
        :param biz_brand_key: 商家编号
        :param esl_bar_code: 价签条码
        :param led_color: 亮灯颜色，绿：值为2；红：值为4
        :param light_up_time: 亮灯时长，单位：秒，最大长度3600秒
        """
        return self._top_request(
            "taobao.uscesl.biz.light.up",
            {
                "store_id": store_id,
                "biz_brand_key": biz_brand_key,
                "esl_bar_code": esl_bar_code,
                "led_color": led_color,
                "light_up_time": light_up_time
            }
        )

    def taobao_uscesl_biz_ap_search(
            self,
            biz_brand_key,
            store_id,
            limit='',
            is_activate='',
            mac='',
            current_page=''
    ):
        """
        AP列表查询
        查询当前门店下登记的AP列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42088

        :param biz_brand_key: 商家编码
        :param store_id: 门店ID
        :param limit: 每页显示数
        :param is_activate: 是否激活
        :param mac: 价签条码
        :param current_page: 页码
        """
        return self._top_request(
            "taobao.uscesl.biz.ap.search",
            {
                "biz_brand_key": biz_brand_key,
                "store_id": store_id,
                "limit": limit,
                "is_activate": is_activate,
                "mac": mac,
                "current_page": current_page
            }
        )

    def taobao_uscesl_biz_item_light_up(
            self,
            item_bar_code='',
            led_color='',
            light_up_time='',
            store_id='',
            biz_brand_key=''
    ):
        """
        商品条码亮灯API
        亮灯API
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42934

        :param item_bar_code: 商品条码
        :param led_color: 亮灯颜色，绿：值为2；红：值为4
        :param light_up_time: 亮灯时长，单位：秒，最大长度3600秒
        :param store_id: 门店编号
        :param biz_brand_key: 商家编号
        """
        return self._top_request(
            "taobao.uscesl.biz.item.light.up",
            {
                "item_bar_code": item_bar_code,
                "led_color": led_color,
                "light_up_time": light_up_time,
                "store_id": store_id,
                "biz_brand_key": biz_brand_key
            }
        )


class TbShenJingYingYong(DingTalkBaseAPI):
    """
    神鲸应用API
    """

    def alibaba_shenjing_core_homcateapplists_get(
            self,
            login_user_id,
            work_bench_context,
            phone_system=''
    ):
        """
        神鲸首页应用列表
        查询用户的神鲸首页的应用列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38073

        :param login_user_id: 用户ID
        :param work_bench_context: 授权校验对象
        :param phone_system: 用户手机类型
        """
        return self._top_request(
            "alibaba.shenjing.core.homcateapplists.get",
            {
                "login_user_id": login_user_id,
                "work_bench_context": work_bench_context,
                "phone_system": phone_system
            }
        )

    def alibaba_shenjing_core_syscateapplists_get(
            self,
            login_user_id,
            work_bench_context=None,
            phone_system=''
    ):
        """
        当前设备获取其应用列表
        获取当前设备对用户的应用列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38074

        :param login_user_id: 用户ID
        :param work_bench_context: 授权校验对象
        :param phone_system: 设备类型
        """
        return self._top_request(
            "alibaba.shenjing.core.syscateapplists.get",
            {
                "login_user_id": login_user_id,
                "work_bench_context": work_bench_context,
                "phone_system": phone_system
            }
        )

    def alibaba_shenjing_core_activity_getappshowlist(
            self,
            work_bench_context=None,
            timestamp1='',
            page='',
            size=''
    ):
        """
        获取神鲸活动列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38075

        :param work_bench_context: 验权对象
        :param timestamp1: 时间戳
        :param page: 页码
        :param size: 一页行数
        """
        return self._top_request(
            "alibaba.shenjing.core.activity.getappshowlist",
            {
                "work_bench_context": work_bench_context,
                "timestamp1": timestamp1,
                "page": page,
                "size": size
            }
        )

    def alibaba_ib_shenjing_visitor_pad_getqrcodelink(
            self,
            term_id=''
    ):
        """
        pad获取二维码
        pad获取二维码链接。扫码录入人脸。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41032

        :param term_id: 终端id
        """
        return self._top_request(
            "alibaba.ib.shenjing.visitor.pad.getqrcodelink",
            {
                "term_id": term_id
            }
        )

    def alibaba_ib_shenjing_visitor_pad_opendoor(
            self,
            id='',
            pad_id=''
    ):
        """
        访客发起开门
        访客PAD端录入完人脸后，可以点击开门按钮开门。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41033

        :param id: 访客标识
        :param pad_id: padid
        """
        return self._top_request(
            "alibaba.ib.shenjing.visitor.pad.opendoor",
            {
                "id": id,
                "pad_id": pad_id
            }
        )

    def alibaba_ib_shenjing_visitor_pad_uploadface(
            self,
            id='',
            image=''
    ):
        """
        访客PAD上传人脸
        访客PAD端上传人脸。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41188

        :param id: 访客ID
        :param image: 图片URL
        """
        return self._top_request(
            "alibaba.ib.shenjing.visitor.pad.uploadface",
            {
                "id": id,
                "image": image
            }
        )

    def alibaba_ib_shenjing_visitor_pad_fetchcodeverify(
            self,
            visitor_code,
            term_id=''
    ):
        """
        访客通过PAD提交访客码
        访客通过PAD提交访客码，录脸进入园区。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41196

        :param visitor_code: 访客码
        :param term_id: 终端ID
        """
        return self._top_request(
            "alibaba.ib.shenjing.visitor.pad.fetchcodeverify",
            {
                "visitor_code": visitor_code,
                "term_id": term_id
            }
        )

    def alibaba_ib_shenjing_visitor_pad_getinfo(
            self
    ):
        """
        获取OSS上传参数
        PAD 端获取OSS上传参数，向OSS服务器上传图片。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41198

        """
        return self._top_request(
            "alibaba.ib.shenjing.visitor.pad.getinfo"
        )


class TbALiYingYeDengTa(DingTalkBaseAPI):
    """
    阿里影业灯塔
    """

    def alibaba_pictures_dengta_order_status_change(
            self,
            status,
            change_time,
            ims_order_id,
            remark='',
            ali_task_id=''
    ):
        """
        天下秀订单状态变更通知
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38039

        :param status: 新状态
        :param change_time: 变更时间
        :param ims_order_id: ims订单编号
        :param remark: 拒绝原因
        :param ali_task_id: task 编号
        """
        return self._top_request(
            "alibaba.pictures.dengta.order.status.change",
            {
                "status": status,
                "change_time": change_time,
                "ims_order_id": ims_order_id,
                "remark": remark,
                "ali_task_id": ali_task_id
            }
        )

    def alibaba_pictures_dengta_wbaccount_price_change(
            self,
            account_id,
            change_time,
            transfer_price='',
            origin_price='',
            id='',
            transfer_price_ali='',
            origin_price_ali=''
    ):
        """
        微博公众号价格变化通知
        微博公众号推广价格变更通知接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38244

        :param account_id: 账号id
        :param change_time: 日期
        :param transfer_price: 转发价格
        :param origin_price: 原发价
        :param id: id
        :param transfer_price_ali: 转发价格 折后价
        :param origin_price_ali: 原发价 折后价
        """
        return self._top_request(
            "alibaba.pictures.dengta.wbaccount.price.change",
            {
                "account_id": account_id,
                "change_time": change_time,
                "transfer_price": transfer_price,
                "origin_price": origin_price,
                "id": id,
                "transfer_price_ali": transfer_price_ali,
                "origin_price_ali": origin_price_ali
            }
        )

    def alibaba_pictures_dengta_wxaccount_price_change(
            self,
            account_id,
            change_time,
            single='',
            other='',
            second='',
            first='',
            id='',
            first_ali='',
            second_ali='',
            single_ali='',
            other_ali=''
    ):
        """
        微信公众号价格变化通知
        微信公众号推广价格变更通知接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38245

        :param account_id: id
        :param change_time: 变更时间
        :param single: 单图文
        :param other: 多图文第三条及以后
        :param second: 多图文第二条
        :param first: 多图文第一条
        :param id: 账号id
        :param first_ali: 多图文第一条 折后价
        :param second_ali: 多图文第二条 折后价
        :param single_ali: 单图文 折后价
        :param other_ali: 多图文第三条及以后 折后价
        """
        return self._top_request(
            "alibaba.pictures.dengta.wxaccount.price.change",
            {
                "account_id": account_id,
                "change_time": change_time,
                "single": single,
                "other": other,
                "second": second,
                "first": first,
                "id": id,
                "first_ali": first_ali,
                "second_ali": second_ali,
                "single_ali": single_ali,
                "other_ali": other_ali
            }
        )

    def alibaba_pictures_dengta_order_effect_import(
            self,
            ims_order_id,
            is_success,
            url='',
            reads_count='',
            reposts_count='',
            comments_count='',
            attitudes_count='',
            weibo_nick='',
            followers_count='',
            nodes_top='',
            key_path='',
            weibo_source='',
            verified_type='',
            gender='',
            fans_count='',
            location='',
            graph='',
            words='',
            repost_num_per_hour='',
            attitudes_num_per_hour='',
            fail_reason=''
    ):
        """
        天下秀订单数据导入
        提供接口给天下秀，天下秀订单数据效果生成时回流到灯塔系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43975

        :param ims_order_id: 微博订单id
        :param is_success: 是否成功
        :param url: 微博链接
        :param reads_count: 阅读数
        :param reposts_count: 转发数
        :param comments_count: 评论数
        :param attitudes_count: 点赞数
        :param weibo_nick: 微博昵称
        :param followers_count: 粉丝数
        :param nodes_top: 传播关键节点
        :param key_path: 关键路径
        :param weibo_source: 微博来源
        :param verified_type: 类型分布
        :param gender: 性别分布
        :param fans_count: 粉丝分布
        :param location: 地域分布
        :param graph: 关系图
        :param words: 关键词云
        :param repost_num_per_hour: 每小时转发量
        :param attitudes_num_per_hour: 点赞量每小时趋势图
        :param fail_reason: 失败原因
        """
        return self._top_request(
            "alibaba.pictures.dengta.order.effect.import",
            {
                "ims_order_id": ims_order_id,
                "is_success": is_success,
                "url": url,
                "reads_count": reads_count,
                "reposts_count": reposts_count,
                "comments_count": comments_count,
                "attitudes_count": attitudes_count,
                "weibo_nick": weibo_nick,
                "followers_count": followers_count,
                "nodes_top": nodes_top,
                "key_path": key_path,
                "weibo_source": weibo_source,
                "verified_type": verified_type,
                "gender": gender,
                "fans_count": fans_count,
                "location": location,
                "graph": graph,
                "words": words,
                "repost_num_per_hour": repost_num_per_hour,
                "attitudes_num_per_hour": attitudes_num_per_hour,
                "fail_reason": fail_reason
            }
        )


class TbJiLi(DingTalkBaseAPI):
    """
    激励API
    """

    def taobao_degoperation_check_addr_status(
            self,
            sequence_no
    ):
        """
        地址
        激励
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38249

        :param sequence_no: 奖品唯一标识
        """
        return self._top_request(
            "taobao.degoperation.check.addr.status",
            {
                "sequence_no": sequence_no
            }
        )

    def taobao_degoperation_show_user_records(
            self,
            deg_app_key,
            event_key,
            page_number,
            page_size,
            deg_access_token
    ):
        """
        用户中奖记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38265

        :param deg_app_key: 活动后台配置
        :param event_key: 活动后台配置
        :param page_number: 第几页
        :param page_size: 分页尺寸
        :param deg_access_token: 系统信息
        """
        return self._top_request(
            "taobao.degoperation.show.user.records",
            {
                "deg_app_key": deg_app_key,
                "event_key": event_key,
                "page_number": page_number,
                "page_size": page_size,
                "deg_access_token": deg_access_token
            }
        )

    def taobao_degoperation_show_top_records(
            self,
            deg_app_key,
            deg_event_key,
            top_n
    ):
        """
        活动中奖记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38266

        :param deg_app_key: 活动后台配置
        :param deg_event_key: 活动后台配置
        :param top_n: 返回数
        """
        return self._top_request(
            "taobao.degoperation.show.top.records",
            {
                "deg_app_key": deg_app_key,
                "deg_event_key": deg_event_key,
                "top_n": top_n
            }
        )

    def taobao_degoperation_get_by_eventkey(
            self,
            deg_app_key,
            event_key,
            deg_access_token
    ):
        """
        通用用户抽奖次数限制
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38267

        :param deg_app_key: 活动后台配置appkey
        :param event_key: 活动后台配置eventkey
        :param deg_access_token: info
        """
        return self._top_request(
            "taobao.degoperation.get.by.eventkey",
            {
                "deg_app_key": deg_app_key,
                "event_key": event_key,
                "deg_access_token": deg_access_token
            }
        )

    def taobao_degoperation_do_luckydraw(
            self,
            deg_app_key,
            deg_event_key,
            source,
            uuid,
            deg_access_token,
            param_sign=''
    ):
        """
        激励抽奖
        激励平台抽奖接口。用户可以通过接口完成抽奖功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38268

        :param deg_app_key: 后台活动配置appkey
        :param deg_event_key: 后台活动配置eventkey
        :param source: 前端标识
        :param uuid: 设备uuid
        :param deg_access_token: 传参信息
        :param param_sign: 参数校验
        """
        return self._top_request(
            "taobao.degoperation.do.luckydraw",
            {
                "deg_app_key": deg_app_key,
                "deg_event_key": deg_event_key,
                "source": source,
                "uuid": uuid,
                "deg_access_token": deg_access_token,
                "param_sign": param_sign
            }
        )

    def taobao_degoperation_get_info_uuid(
            self,
            deg_app_key,
            deg_event_key,
            uuid
    ):
        """
        根据uuid用户抽奖次数限制
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38340

        :param deg_app_key: 活动后台配置eventkey
        :param deg_event_key: 活动后台配置appkey
        :param uuid: 设备id
        """
        return self._top_request(
            "taobao.degoperation.get.info.uuid",
            {
                "deg_app_key": deg_app_key,
                "deg_event_key": deg_event_key,
                "uuid": uuid
            }
        )

    def taobao_degoperation_createqrcode(
            self,
            uuid,
            deg_access_token,
            sequence_no,
            activity,
            title
    ):
        """
        中奖生成二维码
        用户中奖后，生成二维码图片链接
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38538

        :param uuid: 设备id
        :param deg_access_token: 系统信息
        :param sequence_no: 奖品唯一标识
        :param activity: 活动名称
        :param title: 奖品名称
        """
        return self._top_request(
            "taobao.degoperation.createqrcode",
            {
                "uuid": uuid,
                "deg_access_token": deg_access_token,
                "sequence_no": sequence_no,
                "activity": activity,
                "title": title
            }
        )


class TbYouKuMeiZi(DingTalkBaseAPI):
    """
    优酷-媒资
    """

    def youku_mediaapi_video_snapshot_get(
            self,
            vid
    ):
        """
        根据视频ID查询视频缩微图
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42057

        :param vid: 视频id
        """
        return self._top_request(
            "youku.mediaapi.video.snapshot.get",
            {
                "vid": vid
            }
        )

    def youku_tvoperator_media_page_query(
            self,
            system_info='',
            page_no='',
            page_size=''
    ):
        """
        运营商全量媒资分页查询
        分页获取渠道全量媒资
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43935

        :param system_info: 系统信息（和服务提供方确认)
        :param page_no: 从第一页开始
        :param page_size: 页面大小
        """
        return self._top_request(
            "youku.tvoperator.media.page.query",
            {
                "system_info": system_info,
                "page_no": page_no,
                "page_size": page_size
            }
        )

    def youku_ott_dvb_card_change(
            self,
            old_card_id,
            new_card_id,
            cable_company_code=''
    ):
        """
        dvb ca卡替换
        dvb 更换ca卡
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44411

        :param old_card_id: 老卡id
        :param new_card_id: 新卡id
        :param cable_company_code: 广电公司code(目前没用）
        """
        return self._top_request(
            "youku.ott.dvb.card.change",
            {
                "old_card_id": old_card_id,
                "new_card_id": new_card_id,
                "cable_company_code": cable_company_code
            }
        )

    def youku_ott_dvb_renew_feedback(
            self,
            order_id=''
    ):
        """
        dvb续费之后的反馈接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44412

        :param order_id: 订单id
        """
        return self._top_request(
            "youku.ott.dvb.renew.feedback",
            {
                "order_id": order_id
            }
        )


class TbYouKuWangMeng(DingTalkBaseAPI):
    """
    优酷网盟
    """

    def youku_dsp_delivery_resource_get(
            self,
            channel_id,
            device_id,
            device_id_type,
            delivery_type,
            sub_channel_id='0'
    ):
        """
        优酷实时获取可投放设备资源信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        优酷实时获取可投放设备资源信息,为第三方渠道提供素材获取人群识别的api
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38714

        :param channel_id: 渠道id由开发者分配
        :param device_id: 32位md5加密设备号
        :param device_id_type: 目前支持imei或者idfa(小写)
        :param delivery_type: 目前支持push或者feed(小写)
        :param sub_channel_id: 选填，由开发者分配
        """
        return self._top_request(
            "youku.dsp.delivery.resource.get",
            {
                "channel_id": channel_id,
                "device_id": device_id,
                "device_id_type": device_id_type,
                "delivery_type": delivery_type,
                "sub_channel_id": sub_channel_id
            }
        )

    def youku_dsp_delivery_resource_multiget(
            self,
            channel_id,
            device_ids,
            device_id_type,
            delivery_type,
            sub_channel_id='0'
    ):
        """
        优酷实时批量获取可投放设备资源
        优酷实时获取可投放设备资源信息,为第三方渠道提供素材获取人群识别的api,支持批量获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39065

        :param channel_id: 渠道id
        :param device_ids: 设备id串(md5加密)，多个设备逗号隔开
        :param device_id_type: 设备类型imei或者idfa
        :param delivery_type: 投放类型push或者feed
        :param sub_channel_id: 子渠道id
        """
        return self._top_request(
            "youku.dsp.delivery.resource.multiget",
            {
                "channel_id": channel_id,
                "device_ids": device_ids,
                "device_id_type": device_id_type,
                "delivery_type": delivery_type,
                "sub_channel_id": sub_channel_id
            }
        )


class TbALiJianKang(DingTalkBaseAPI):
    """
    阿里健康API
    """

    def taobao_trade_drug_get(
            self,
            store_id,
            max_size,
            is_all='false'
    ):
        """
        查询商家未确认订单列表
        可以按商家或是店铺维度的进行查询买家付款卖家未确认订单，一次返回不大于20条订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26465

        :param store_id: 店铺id
        :param max_size: 返回记录数，超过20按20条返回数据
        :param is_all: true-商家下所有店铺的待确认订单, false—指定店铺的订单
        """
        return self._top_request(
            "taobao.trade.drug.get",
            {
                "store_id": store_id,
                "max_size": max_size,
                "is_all": is_all
            }
        )

    def taobao_delivery_drug_deliveryconfirm(
            self,
            delivery_order_no,
            longitude,
            latitude,
            device_id='',
            location_error_reason=''
    ):
        """
        物流订单妥投
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        记录阿里健康O2O药品商家自配送妥投时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26466

        :param delivery_order_no: 配送单号
        :param longitude: 经度
        :param latitude: 纬度
        :param device_id: 配送员id
        :param location_error_reason: 定位错误
        """
        return self._top_request(
            "taobao.delivery.drug.deliveryconfirm",
            {
                "delivery_order_no": delivery_order_no,
                "longitude": longitude,
                "latitude": latitude,
                "device_id": device_id,
                "location_error_reason": location_error_reason
            }
        )

    def taobao_trade_drug_confirmorder(
            self,
            order_id,
            delivery_id='0',
            confirm_type='0'
    ):
        """
        阿里健康020接单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26467

        :param order_id: 订单ID
        :param delivery_id: 代送宝 代送商ID
        :param confirm_type: public static int NORMAL_TYPE=0; 普通发货 默认 public static int DD_DAI_SONG=2; 代送宝	public static int DD_SONG_TYPE_V2=3; 点点送发货
        """
        return self._top_request(
            "taobao.trade.drug.confirmorder",
            {
                "order_id": order_id,
                "delivery_id": delivery_id,
                "confirm_type": confirm_type
            }
        )

    def taobao_delivery_drug_pickup(
            self,
            longitude,
            latitude,
            delivery_order_no
    ):
        """
        配送员取件
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        商家自配送取件操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26468

        :param longitude: 地图坐标：经度
        :param latitude: 地图坐标：维度
        :param delivery_order_no: 物流订单号
        """
        return self._top_request(
            "taobao.delivery.drug.pickup",
            {
                "longitude": longitude,
                "latitude": latitude,
                "delivery_order_no": delivery_order_no
            }
        )

    def taobao_drug_quantity_update(
            self,
            out_store_id,
            out_item_id,
            quantity
    ):
        """
        商家更新库存
        商家通过top接口可以直接修改商品库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26482

        :param out_store_id: 外部店铺ID
        :param out_item_id: 外部商品ID
        :param quantity: 库存数量
        """
        return self._top_request(
            "taobao.drug.quantity.update",
            {
                "out_store_id": out_store_id,
                "out_item_id": out_item_id,
                "quantity": quantity
            }
        )

    def taobao_drug_price_update(
            self,
            out_store_id,
            out_item_id,
            price
    ):
        """
        商家更新宝贝价格
        商家更新价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26484

        :param out_store_id: 对应的外部店铺ID
        :param out_item_id: 对应的外部商品编码
        :param price: 商品价格
        """
        return self._top_request(
            "taobao.drug.price.update",
            {
                "out_store_id": out_store_id,
                "out_item_id": out_item_id,
                "price": price
            }
        )

    def taobao_trade_drug_orders_get(
            self,
            shop_id,
            is_all_shop,
            is_all_order,
            page_size,
            keyword='',
            order_status='2',
            page_no='2'
    ):
        """
        阿里健康获取某一药店全部订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=26548

        :param shop_id: 外卖分店ID
        :param is_all_shop: true-查询仅按商家维度  false-查询按商家下所属店铺维度
        :param is_all_order: true 仅有支付宝订单,false 包括所有类型订单(货到付款,支付券等)
        :param page_size: 返回记录数，超过20按20条返回数据
        :param keyword: 关键字
        :param order_status: （必填字段）订单状态 待确认订单2 , 退款中订单4 , 已发货12 关闭20 交易成功21
        :param page_no: 页码
        """
        return self._top_request(
            "taobao.trade.drug.orders.get",
            {
                "shop_id": shop_id,
                "is_all_shop": is_all_shop,
                "is_all_order": is_all_order,
                "page_size": page_size,
                "keyword": keyword,
                "order_status": order_status,
                "page_no": page_no
            }
        )

    def alibaba_alihealth_diag_order_confirm(
            self,
            param_order_v_o
    ):
        """
        确认订单
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        接受订单，返回医生信息以及排队信息；拒绝订单，返回原因
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27421

        :param param_order_v_o: 订单信息
        """
        return self._top_request(
            "alibaba.alihealth.diag.order.confirm",
            {
                "param_order_v_o": param_order_v_o
            }
        )

    def alibaba_alihealth_diag_doctormsg_send(
            self,
            param_doctor_msg_v_o
    ):
        """
        医生对话
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        发送医生对话信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27422

        :param param_doctor_msg_v_o: 医生对话
        """
        return self._top_request(
            "alibaba.alihealth.diag.doctormsg.send",
            {
                "param_doctor_msg_v_o": param_doctor_msg_v_o
            }
        )

    def alibaba_alihealth_diag_session_close(
            self,
            param_session_info_v_o=None
    ):
        """
        关闭会话
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27423

        :param param_session_info_v_o: 系统自动生成
        """
        return self._top_request(
            "alibaba.alihealth.diag.session.close",
            {
                "param_session_info_v_o": param_session_info_v_o
            }
        )

    def alibaba_alihealth_examination_stock_query(
            self,
            merchant_code='',
            hospital_id='',
            package_id='',
            time_from='',
            time_to=''
    ):
        """
        体检机构对接_体检套餐库存查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27433

        :param merchant_code: 商户唯一码
        :param hospital_id: 分院ID
        :param package_id: 套餐id
        :param time_from: 开始日期
        :param time_to: 结束日期
        """
        return self._top_request(
            "alibaba.alihealth.examination.stock.query",
            {
                "merchant_code": merchant_code,
                "hospital_id": hospital_id,
                "package_id": package_id,
                "time_from": time_from,
                "time_to": time_to
            }
        )

    def taobao_drug_shop_list(
            self,
            page,
            page_size,
            keywords='',
            status='-1'
    ):
        """
        查询卖家外卖店列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27540

        :param page: 页码
        :param page_size: 每页条数
        :param keywords: 查询关键字
        :param status: 店铺状态，歇业：0，营业：1，所有：-1
        """
        return self._top_request(
            "taobao.drug.shop.list",
            {
                "page": page,
                "page_size": page_size,
                "keywords": keywords,
                "status": status
            }
        )

    def alibaba_fmhealth_pressure_report_create(
            self,
            user_id,
            report_type,
            report_data,
            report_period,
            report_time,
            report_period_days,
            report_source
    ):
        """
        血压报告接口
        生成用户血压测量报告
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27751

        :param user_id: 用户id
        :param report_type: 报告类型
        :param report_data: 报告内容
        :param report_period: 报告周期
        :param report_time: 报告时间
        :param report_period_days: 报告周期天数
        :param report_source: 数据来源
        """
        return self._top_request(
            "alibaba.fmhealth.pressure.report.create",
            {
                "user_id": user_id,
                "report_type": report_type,
                "report_data": report_data,
                "report_period": report_period,
                "report_time": report_time,
                "report_period_days": report_period_days,
                "report_source": report_source
            }
        )

    def alibaba_fmhealth_pressure_suggest_create(
            self,
            blood_pressure_id,
            user_id,
            status,
            advice
    ):
        """
        血压建议接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27752

        :param blood_pressure_id: 血压测量id
        :param user_id: 用户id
        :param status: 状态
        :param advice: 建议
        """
        return self._top_request(
            "alibaba.fmhealth.pressure.suggest.create",
            {
                "blood_pressure_id": blood_pressure_id,
                "user_id": user_id,
                "status": status,
                "advice": advice
            }
        )

    def taobao_drug_quantity_batch_update(
            self,
            out_store_id,
            out_item_id_quantity_map
    ):
        """
        批量同步库存接口
        商家通过top接口可以批量修改商品库存
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27988

        :param out_store_id: 外部店铺ID
        :param out_item_id_quantity_map: 商品ID和库存
        """
        return self._top_request(
            "taobao.drug.quantity.batch.update",
            {
                "out_store_id": out_store_id,
                "out_item_id_quantity_map": out_item_id_quantity_map
            }
        )

    def taobao_drug_price_batch_update(
            self,
            out_store_id,
            out_item_id_price_map
    ):
        """
        商家批量更新宝贝价格
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=27989

        :param out_store_id: 外部店铺ID
        :param out_item_id_price_map: 商品ID和价格
        """
        return self._top_request(
            "taobao.drug.price.batch.update",
            {
                "out_store_id": out_store_id,
                "out_item_id_price_map": out_item_id_price_map
            }
        )

    def alibaba_alihealth_healtharchive_examination_aima_item_add(
            self,
            item
    ):
        """
        添加体检项目API
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28680

        :param item: 体检项目
        """
        return self._top_request(
            "alibaba.alihealth.healtharchive.examination.aima.item.add",
            {
                "item": item
            }
        )

    def alibaba_alihealth_healtharchive_examination_aima_person_add(
            self,
            person=None
    ):
        """
        艾玛妇产添加用户
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        添加一个体检用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28708

        :param person: 人员信息
        """
        return self._top_request(
            "alibaba.alihealth.healtharchive.examination.aima.person.add",
            {
                "person": person
            }
        )

    def alibaba_alihealth_healtharchive_examination_aima_result_add(
            self,
            param=None
    ):
        """
        添加体检结果
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28709

        :param param: 参数
        """
        return self._top_request(
            "alibaba.alihealth.healtharchive.examination.aima.result.add",
            {
                "param": param
            }
        )

    def alibaba_alihealth_healtharchive_examination_aima_gather_add(
            self,
            gather_result=None
    ):
        """
        艾玛添加聚合检查结果
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28851

        :param gather_result: 检查结果
        """
        return self._top_request(
            "alibaba.alihealth.healtharchive.examination.aima.gather.add",
            {
                "gather_result": gather_result
            }
        )

    def taobao_trade_drug_order_get(
            self,
            order_id
    ):
        """
        查看订单详情
        商家查看订单详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=28976

        :param order_id: 订单id
        """
        return self._top_request(
            "taobao.trade.drug.order.get",
            {
                "order_id": order_id
            }
        )

    def alibaba_alihealth_tracecodeplatform_code_active(
            self,
            file_info,
            prod_id,
            callback_url='',
            file_name=''
    ):
        """
        正大鸡蛋激活追溯码
        用于正大鸡蛋激活追溯码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29113

        :param file_info: 文件信息（对文件内容16进制编码）
        :param prod_id: 商品id
        :param callback_url: 回调url
        :param file_name: 文件名
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeplatform.code.active",
            {
                "file_info": file_info,
                "prod_id": prod_id,
                "callback_url": callback_url,
                "file_name": file_name
            }
        )

    def alibaba_alihealth_pregnancy_remind_send(
            self,
            user_id,
            event_type
    ):
        """
        发送备孕提醒
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=29965

        :param user_id: 用户id
        :param event_type: 类型 5经期 1体温 2排卵 3 B超 4同房
        """
        return self._top_request(
            "alibaba.alihealth.pregnancy.remind.send",
            {
                "user_id": user_id,
                "event_type": event_type
            }
        )

    def alibaba_alihealth_step_dailycount_list(
            self,
            user_id,
            start_date,
            end_date
    ):
        """
        获取计步数据接口
        返回某个时间段某个用户的计步信息，最多返回50条记录
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30495

        :param user_id: 用户的id
        :param start_date: 开始日期：格式yyyy-MM-dd
        :param end_date: 结束日期：格式yyyy-MM-dd
        """
        return self._top_request(
            "alibaba.alihealth.step.dailycount.list",
            {
                "user_id": user_id,
                "start_date": start_date,
                "end_date": end_date
            }
        )

    def alibaba_fmhealth_weight_lossplan_syncweightdata(
            self,
            tp_user_id,
            weight,
            record_date
    ):
        """
        薄荷同步三方记录
        用于三方薄荷同步数据到健康会员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32343

        :param tp_user_id: 阿里健康id
        :param weight: 记录体重
        :param record_date: 记录日期
        """
        return self._top_request(
            "alibaba.fmhealth.weight.lossplan.syncweightdata",
            {
                "tp_user_id": tp_user_id,
                "weight": weight,
                "record_date": record_date
            }
        )

    def alibaba_alihealth_tracecodeseller_code_active(
            self,
            product_info_id,
            file_content,
            correlation_type,
            file_name='',
            correlation_ratio='',
            language='cn'
    ):
        """
        上传激活码的文件
        上传商品的激活码文件，存到系统中
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32654

        :param product_info_id: 商品编号
        :param file_content: 文件内容，十六进制编码
        :param correlation_type: 关联类型，0:无关联，1:前关联，2:后关联
        :param file_name: 文件名
        :param correlation_ratio: 关联比例
        :param language: 语言标识
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.code.active",
            {
                "product_info_id": product_info_id,
                "file_content": file_content,
                "correlation_type": correlation_type,
                "file_name": file_name,
                "correlation_ratio": correlation_ratio,
                "language": language
            }
        )

    def alibaba_alihealth_tracecodeplatform_code_entscan(
            self,
            code,
            service_flag
    ):
        """
        药品商家扫码
        药品商家扫描药品监管码，只有该商家的药才返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32938

        :param code: 药监码
        :param service_flag: 不同企业有不同的标识
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeplatform.code.entscan",
            {
                "code": code,
                "service_flag": service_flag
            }
        )

    def alibaba_alihealth_vaccination_status_notify(
            self,
            vaccine_sub_name='',
            vaccine_status='0',
            vaccine_time='',
            vaccine_id='',
            vaccine_name=''
    ):
        """
        疫苗状态异步回调通知接口
        疫苗his服务商异步回调阿里健康，提供接种疫苗编码、接种时间、接种状态信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35302

        :param vaccine_sub_name: 疫苗小类描述
        :param vaccine_status: 接种状态0未接种；1已接种；2接种同类苗
        :param vaccine_time: 接种日期yyyy-MM-dd
        :param vaccine_id: 预约id
        :param vaccine_name: 疫苗大类
        """
        return self._top_request(
            "alibaba.alihealth.vaccination.status.notify",
            {
                "vaccine_sub_name": vaccine_sub_name,
                "vaccine_status": vaccine_status,
                "vaccine_time": vaccine_time,
                "vaccine_id": vaccine_id,
                "vaccine_name": vaccine_name
            }
        )

    def alibaba_alihealth_prescription_status_update(
            self,
            rx_no,
            status
    ):
        """
        阿里健康处方状态变更
        阿里健康对外提供处方状态变更功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=35995

        :param rx_no: 处方号
        :param status: 处方状态
        """
        return self._top_request(
            "alibaba.alihealth.prescription.status.update",
            {
                "rx_no": rx_no,
                "status": status
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_ms_area_province_list(
            self
    ):
        """
        疫苗预约省份列表查询
        微信小程序疫苗预约省份列表查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=37697

        """
        return self._top_request(
            "alibaba.alihealth.ms.area.province.list"
        )

    def alibaba_alihealth_tracecodeseller_product_search(
            self,
            skey_code,
            ent_info_id,
            page,
            page_size
    ):
        """
        查询商品api
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38012

        :param skey_code: 身份认证
        :param ent_info_id: 商家id
        :param page: 页数
        :param page_size: 每页条数
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.product.search",
            {
                "skey_code": skey_code,
                "ent_info_id": ent_info_id,
                "page": page,
                "page_size": page_size
            }
        )

    def alibaba_alihealth_tracecodeseller_warehouse_search(
            self,
            appkey,
            ent_info_id,
            page,
            page_size
    ):
        """
        查询仓库api
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38013

        :param appkey: 身份认证
        :param ent_info_id: 商家id
        :param page: 第几页
        :param page_size: 每页多少条
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.warehouse.search",
            {
                "appkey": appkey,
                "ent_info_id": ent_info_id,
                "page": page,
                "page_size": page_size
            }
        )

    def alibaba_alihealth_tracecodeseller_channel_search(
            self,
            skey_code,
            ent_info_id,
            page,
            page_size,
            out_in_type
    ):
        """
        查询渠道商api
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38014

        :param skey_code: 身份认证
        :param ent_info_id: 商家id
        :param page: 第几页
        :param page_size: 每页几条
        :param out_in_type: 0 出库 2 入库
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.channel.search",
            {
                "skey_code": skey_code,
                "ent_info_id": ent_info_id,
                "page": page,
                "page_size": page_size,
                "out_in_type": out_in_type
            }
        )

    def alibaba_alihealth_tracecodeseller_bill_upload(
            self,
            skey_code,
            ent_info_id,
            bill_code,
            type,
            time,
            warehouse_id,
            ent_merchant_id,
            code_info
    ):
        """
        上传入出库单api
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38015

        :param skey_code: 身份认证
        :param ent_info_id: 商家id
        :param bill_code: 单据编号
        :param type: 出入库类型
        :param time: 出入库时间 精确到 年 月 日 时 分 秒
        :param warehouse_id: 自己仓库id
        :param ent_merchant_id: 渠道商id
        :param code_info: 把txt格式的文件转成16进制的字符串，txt文件是每个码一行
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.bill.upload",
            {
                "skey_code": skey_code,
                "ent_info_id": ent_info_id,
                "bill_code": bill_code,
                "type": type,
                "time": time,
                "warehouse_id": warehouse_id,
                "ent_merchant_id": ent_merchant_id,
                "code_info": code_info
            }
        )

    def alibaba_alihealth_tracecodeseller_bill_result_search(
            self,
            skey_code,
            ent_info_id,
            begin_date,
            end_date,
            page_size,
            page,
            bill_code='',
            seller_name=''
    ):
        """
        查询出入库单处理结果api
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38016

        :param skey_code: top身份认证
        :param ent_info_id: 商家id
        :param begin_date: 查询开始日期
        :param end_date: 查询结束日期
        :param page_size: 每页条数
        :param page: 当前页
        :param bill_code: 单据编号
        :param seller_name: 不需要
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.bill.result.search",
            {
                "skey_code": skey_code,
                "ent_info_id": ent_info_id,
                "begin_date": begin_date,
                "end_date": end_date,
                "page_size": page_size,
                "page": page,
                "bill_code": bill_code,
                "seller_name": seller_name
            }
        )

    def alibaba_alihealth_tracecodeseller_ent_search(
            self,
            skey_code,
            name,
            tb_user_id
    ):
        """
        查询商家信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38038

        :param skey_code: appkey
        :param name: 商家名称
        :param tb_user_id: 淘宝名
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.ent.search",
            {
                "skey_code": skey_code,
                "name": name,
                "tb_user_id": tb_user_id
            }
        )

    def alibaba_alihealth_tracecodeseller_code_relation_codeantiactive(
            self,
            top_code,
            tb_user_id,
            ent_info_id
    ):
        """
        解除码的关联关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38179

        :param top_code: 顶层码
        :param tb_user_id: 淘宝名
        :param ent_info_id: 企业id
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.code.relation.codeantiactive",
            {
                "top_code": top_code,
                "tb_user_id": tb_user_id,
                "ent_info_id": ent_info_id
            }
        )

    def alibaba_alihealth_reserve_dental_markitem(
            self,
            item_id,
            status
    ):
        """
        标记商品是否可预约
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38897

        :param item_id: 平台商品id
        :param status: 是否可预约，1.可预约 0.不可预约
        """
        return self._top_request(
            "alibaba.alihealth.reserve.dental.markitem",
            {
                "item_id": item_id,
                "status": status
            }
        )

    def alibaba_alihealth_reserve_dental_bindshopanditem(
            self,
            bind_list
    ):
        """
        绑定门店信息，商品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38898

        :param bind_list: bind_list
        """
        return self._top_request(
            "alibaba.alihealth.reserve.dental.bindshopanditem",
            {
                "bind_list": bind_list
            }
        )

    def alibaba_alihealth_reserve_dental_storesanditems(
            self,
            page_no='1'
    ):
        """
        查询商户门店，商品列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38900

        :param page_no: 页码，每页100个门店，超过100个门店分页请求
        """
        return self._top_request(
            "alibaba.alihealth.reserve.dental.storesanditems",
            {
                "page_no": page_no
            }
        )

    def alibaba_alihealth_reserve_dental_unbinditem(
            self,
            sp_store_id,
            sp_item_id
    ):
        """
        解绑商品信息
        绑定门店信息，商品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39085

        :param sp_store_id: 服务商门店id
        :param sp_item_id: 服务商商品id
        """
        return self._top_request(
            "alibaba.alihealth.reserve.dental.unbinditem",
            {
                "sp_store_id": sp_store_id,
                "sp_item_id": sp_item_id
            }
        )

    def alibaba_alihealth_hospital_sync_yt(
            self,
            yun_tai_hospital_request_json=''
    ):
        """
        预约挂号医院同步接口
        阿里健康预约挂号医院同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39230

        :param yun_tai_hospital_request_json: 医院同步json
        """
        return self._top_request(
            "alibaba.alihealth.hospital.sync.yt",
            {
                "yun_tai_hospital_request_json": yun_tai_hospital_request_json
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_hospital_dist_sync_yt(
            self,
            yun_tai_hospital_dist_request_json=''
    ):
        """
        阿里健康预约挂号医院院区同步接口
        阿里健康预约挂号医院同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39359

        :param yun_tai_hospital_dist_request_json: 院区同步请求参数
        """
        return self._top_request(
            "alibaba.alihealth.hospital.dist.sync.yt",
            {
                "yun_tai_hospital_dist_request_json": yun_tai_hospital_dist_request_json
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_doctor_depart_sync_yt(
            self,
            yun_tai_doctor_bind_depart_request_json=''
    ):
        """
        阿里健康预约挂号医生与科室对应关系同步接口
        阿里健康预约挂号医院同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39360

        :param yun_tai_doctor_bind_depart_request_json: 医生科室对应关系同步json
        """
        return self._top_request(
            "alibaba.alihealth.doctor.depart.sync.yt",
            {
                "yun_tai_doctor_bind_depart_request_json": yun_tai_doctor_bind_depart_request_json
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_doctor_sync_yt(
            self,
            yun_tai_doctor_request_json=''
    ):
        """
        阿里健康预约挂号医生同步接口
        阿里健康预约挂号医院同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39361

        :param yun_tai_doctor_request_json: 医生同步请求json
        """
        return self._top_request(
            "alibaba.alihealth.doctor.sync.yt",
            {
                "yun_tai_doctor_request_json": yun_tai_doctor_request_json
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_depart_sync_yt(
            self,
            yun_tai_depart_request_json=''
    ):
        """
        阿里健康预约挂号挂号科室同步接口
        阿里健康预约挂号医院同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39362

        :param yun_tai_depart_request_json: 科室同步请求参数
        """
        return self._top_request(
            "alibaba.alihealth.depart.sync.yt",
            {
                "yun_tai_depart_request_json": yun_tai_depart_request_json
            },
            result_processor=lambda x: x["service_result"]
        )

    def alibaba_alihealth_reserve_dental_modifyrestime(
            self,
            reserve_id='',
            reserve_time=''
    ):
        """
        修改预约时间
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39956

        :param reserve_id: 预约单ID
        :param reserve_time: 预约时间
        """
        return self._top_request(
            "alibaba.alihealth.reserve.dental.modifyrestime",
            {
                "reserve_id": reserve_id,
                "reserve_time": reserve_time
            }
        )

    def alibaba_alihealth_consume_order_cancel(
            self,
            token,
            quantity='',
            channel='',
            refund_type='0',
            order_id=''
    ):
        """
        消费医疗渠道分销取消订单接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41110

        :param token: 分配给合作方的token，作为请求的标志
        :param quantity: 取消订单数量，退款类型为全部时，忽略次字段
        :param channel: 合作方渠道，可忽略
        :param refund_type: 退款类型  0:全部取消  1: 部分取消,默认全部取消
        :param order_id: 订单id
        """
        return self._top_request(
            "alibaba.alihealth.consume.order.cancel",
            {
                "token": token,
                "quantity": quantity,
                "channel": channel,
                "refund_type": refund_type,
                "order_id": order_id
            }
        )

    def alibaba_alihealth_consume_order_submit(
            self,
            token,
            quantity,
            goods_code,
            package_code,
            channel='',
            company_name=''
    ):
        """
        消费医疗渠道分销下单接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41111

        :param token: 分配给合作方的token，作为请求的标志
        :param quantity: 下单数量
        :param goods_code: 商品编码
        :param package_code: 套餐编码
        :param channel: 下单渠道，作为统计使用，可自定义
        :param company_name: 下单人所在公司名称
        """
        return self._top_request(
            "alibaba.alihealth.consume.order.submit",
            {
                "token": token,
                "quantity": quantity,
                "goods_code": goods_code,
                "package_code": package_code,
                "channel": channel,
                "company_name": company_name
            }
        )

    def alibaba_alihealth_consume_goods_list(
            self,
            page_no,
            page_size='20',
            token='',
            store_code_list='',
            goods_code=''
    ):
        """
        获取商品列表接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取体检套餐详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41112

        :param page_no: 当前页数
        :param page_size: 分页大小
        :param token: 分配给合作方的token，作为请求的标志
        :param store_code_list: 门店编码列表
        :param goods_code: 传递该编码时会只返回该商品的信息
        """
        return self._top_request(
            "alibaba.alihealth.consume.goods.list",
            {
                "page_no": page_no,
                "page_size": page_size,
                "token": token,
                "store_code_list": store_code_list,
                "goods_code": goods_code
            },
            result_processor=lambda x: x["data"]
        )

    def alibaba_alihealth_consume_store_list(
            self,
            token,
            page_no,
            city_codes='',
            page_size='20',
            channel='',
            store_code='',
            goods_code='',
            package_code=''
    ):
        """
        获取支持的门店列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        获取商品或者城市支持的门店列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41118

        :param token: 分配给合作方的token，作为请求的标志
        :param page_no: 当前页数
        :param city_codes: 城市列表
        :param page_size: 分页大小
        :param channel: 合作方的渠道，统计用，可不填
        :param store_code: 门店编码，传递该编码时会只返回该编码数据
        :param goods_code: 商品编码，和套餐编码二选一
        :param package_code: 套餐编码，和商品编码二选一
        """
        return self._top_request(
            "alibaba.alihealth.consume.store.list",
            {
                "token": token,
                "page_no": page_no,
                "city_codes": city_codes,
                "page_size": page_size,
                "channel": channel,
                "store_code": store_code,
                "goods_code": goods_code,
                "package_code": package_code
            }
        )

    def alibaba_alihealth_consume_reserve_validate(
            self,
            token,
            card,
            password,
            channel=''
    ):
        """
        消费医疗去打分销预约校验卡密接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41119

        :param token: 分配给合作方的token，作为请求的标志
        :param card: 下单接口返回的卡号
        :param password: 下单接口返回的密码
        :param channel: 下单渠道，作为统计使用，可自定义
        """
        return self._top_request(
            "alibaba.alihealth.consume.reserve.validate",
            {
                "token": token,
                "card": card,
                "password": password,
                "channel": channel
            }
        )

    def alibaba_alihealth_consume_reserve_cancel(
            self,
            token,
            flow_id,
            channel=''
    ):
        """
        渠道分销预约取消接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41143

        :param token: 分配给合作方的token，作为请求的标志
        :param flow_id: 一次预约流程的唯一标识，在整个流程里都需传递，由校验卡密接口返回
        :param channel: 下单渠道，作为统计使用，可自定义
        """
        return self._top_request(
            "alibaba.alihealth.consume.reserve.cancel",
            {
                "token": token,
                "flow_id": flow_id,
                "channel": channel
            }
        )

    def alibaba_alihealth_consume_reserve_report_get(
            self,
            token,
            flow_id,
            channel=''
    ):
        """
        渠道分销预约获取预约的体检报告
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41161

        :param token: 分配给合作方的token，作为请求的标志
        :param flow_id: 一次预约流程的唯一标识，在整个流程里都需传递，由校验卡密接口返回
        :param channel: 渠道信息，作为统计使用，可自定义
        """
        return self._top_request(
            "alibaba.alihealth.consume.reserve.report.get",
            {
                "token": token,
                "flow_id": flow_id,
                "channel": channel
            }
        )

    def alibaba_alihealth_consume_reserve_status_sync(
            self,
            token='',
            channel='',
            flow_id=''
    ):
        """
        阿里健康渠道分销同步预约状态
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41162

        :param token: 分配给合作方的token，作为请求的标志
        :param channel: 渠道信息，作为统计使用，可自定义
        :param flow_id: 一次预约流程的唯一标识，在整个流程里都需传递，由校验卡密接口返回
        """
        return self._top_request(
            "alibaba.alihealth.consume.reserve.status.sync",
            {
                "token": token,
                "channel": channel,
                "flow_id": flow_id
            }
        )

    def alibaba_alihealth_consume_reserve_modify(
            self,
            token='',
            reserve_date='',
            channel='',
            flow_id=''
    ):
        """
        渠道分销预约修改预约日期接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41165

        :param token: 分配给合作方的token，作为请求的标志
        :param reserve_date: 预约日期 yyyy-MM-dd
        :param channel: 下单渠道，作为统计使用，可自定义
        :param flow_id: 一次预约流程的唯一标识，在整个流程里都需传递，由校验卡密接口返回
        """
        return self._top_request(
            "alibaba.alihealth.consume.reserve.modify",
            {
                "token": token,
                "reserve_date": reserve_date,
                "channel": channel,
                "flow_id": flow_id
            }
        )

    def alibaba_alihealth_consume_reserve_store_list(
            self,
            token,
            flow_id,
            channel='',
            city_code=''
    ):
        """
        渠道分销预约获取支持的门店列表
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41166

        :param token: 分配给合作方的token，作为请求的标志
        :param flow_id: 一次预约流程的唯一标识，在整个流程里都需传递，由校验卡密接口返回
        :param channel: 下单渠道，作为统计使用，可自定义
        :param city_code: 城市编码
        """
        return self._top_request(
            "alibaba.alihealth.consume.reserve.store.list",
            {
                "token": token,
                "flow_id": flow_id,
                "channel": channel,
                "city_code": city_code
            }
        )

    def alibaba_alihealth_consume_reserve_stock_get(
            self,
            token,
            store_code,
            flow_id,
            to,
            from_,
            channel=''
    ):
        """
        渠道分销获取排期接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41170

        :param token: 分配给合作方的token，作为请求的标志
        :param store_code: 门店编码
        :param flow_id: 一次预约流程的唯一标识，在整个流程里都需传递，由校验卡密接口返回
        :param to: 获取库存的截止日期（含）
        :param from_: 获取库存的开始日期（含）
        :param channel: 下单渠道，作为统计使用，可自定义
        """
        return self._top_request(
            "alibaba.alihealth.consume.reserve.stock.get",
            {
                "token": token,
                "store_code": store_code,
                "flow_id": flow_id,
                "to": to,
                "from": from_,
                "channel": channel
            }
        )

    def alibaba_alihealth_consume_reserve_submit(
            self,
            card_no,
            sex,
            married,
            token,
            name,
            auth_flag,
            birth_day,
            card_type,
            flow_id,
            package_code,
            mobile,
            reserve_date,
            store_code,
            channel='',
            company_name=''
    ):
        """
        渠道分销预约提交接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        提交体检预约信息接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41178

        :param card_no: 证件号，最好用身份证
        :param sex: 性别 0 女, 1 男
        :param married: 是否结婚, 0未婚, 1已婚
        :param token: 分配给合作方的token，作为请求的标志
        :param name: 体检人员姓名
        :param auth_flag: 是否允许获取体检报告, 0不允许, 1允许
        :param birth_day: 生日，格式为yyyy-MM-dd
        :param card_type: 证件类型 1 身份证
        :param flow_id: 一次预约流程的唯一标识，在整个流程里都需传递，由校验卡密接口返回
        :param package_code: 套餐编码
        :param mobile: 手机
        :param reserve_date: 预约日期 yyyy-MM-dd
        :param store_code: 门店编码
        :param channel: 下单渠道，作为统计使用，可自定义
        :param company_name: 体检人所在公司名称
        """
        return self._top_request(
            "alibaba.alihealth.consume.reserve.submit",
            {
                "card_no": card_no,
                "sex": sex,
                "married": married,
                "token": token,
                "name": name,
                "auth_flag": auth_flag,
                "birth_day": birth_day,
                "card_type": card_type,
                "flow_id": flow_id,
                "package_code": package_code,
                "mobile": mobile,
                "reserve_date": reserve_date,
                "store_code": store_code,
                "channel": channel,
                "company_name": company_name
            }
        )

    def alibaba_alihealth_consume_reserve_goods_get(
            self,
            token='',
            channel='',
            flow_id=''
    ):
        """
        渠道分销获取可预约的套餐
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41179

        :param token: 分配给合作方的token，作为请求的标志
        :param channel: 下单渠道，作为统计使用，可自定义
        :param flow_id: 一次预约流程的唯一标识，在整个流程里都需传递，由校验卡密接口返回
        """
        return self._top_request(
            "alibaba.alihealth.consume.reserve.goods.get",
            {
                "token": token,
                "channel": channel,
                "flow_id": flow_id
            }
        )

    def alibaba_alihealth_consume_reserve_refund_apply(
            self,
            token,
            flow_id,
            channel=''
    ):
        """
        渠道分销已到体检日期申请退款接口
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41180

        :param token: 分配给合作方的token，作为请求的标志
        :param flow_id: 一次预约流程的唯一标识，在整个流程里都需传递，由校验卡密接口返回
        :param channel: 渠道信息，作为统计使用，可自定义
        """
        return self._top_request(
            "alibaba.alihealth.consume.reserve.refund.apply",
            {
                "token": token,
                "flow_id": flow_id,
                "channel": channel
            }
        )

    def alibaba_alihealth_medical_registration_sync(
            self,
            save_request=None
    ):
        """
        阿里健康支付宝挂号记录回传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41238

        :param save_request: 接口入参
        """
        return self._top_request(
            "alibaba.alihealth.medical.registration.sync",
            {
                "save_request": save_request
            }
        )

    def alibaba_alihealth_medical_hospital_sync(
            self,
            save_request=None
    ):
        """
        阿里将康支付宝挂号数据医院回传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41243

        :param save_request: top保存入参
        """
        return self._top_request(
            "alibaba.alihealth.medical.hospital.sync",
            {
                "save_request": save_request
            }
        )

    def alibaba_alihealth_medical_department_sync(
            self,
            save_request=None
    ):
        """
        阿里健康预约挂号科室同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41244

        :param save_request: 接口入参
        """
        return self._top_request(
            "alibaba.alihealth.medical.department.sync",
            {
                "save_request": save_request
            }
        )

    def alibaba_alihealth_medical_doctor_sync(
            self,
            save_request=None
    ):
        """
        阿里健康预约挂号医生同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41245

        :param save_request: 接口入参
        """
        return self._top_request(
            "alibaba.alihealth.medical.doctor.sync",
            {
                "save_request": save_request
            }
        )

    def alibaba_alihealth_medical_register_weiyi_sync(
            self,
            service_request
    ):
        """
        微医数据号源回传
        微医号源数据回传
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42993

        :param service_request: 号源数据实体
        """
        return self._top_request(
            "alibaba.alihealth.medical.register.weiyi.sync",
            {
                "service_request": service_request
            }
        )

    def alibaba_alihealth_medical_registration_syncnew(
            self,
            save_request=None
    ):
        """
        阿里健康新挂号数据回传
        阿里健康新挂号记录回传接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43284

        :param save_request: 接口入参
        """
        return self._top_request(
            "alibaba.alihealth.medical.registration.syncnew",
            {
                "save_request": save_request
            }
        )

    def alibaba_alihealth_booking_reserve_confirm(
            self,
            confirm=None
    ):
        """
        确认预约
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43372

        :param confirm: 参数
        """
        return self._top_request(
            "alibaba.alihealth.booking.reserve.confirm",
            {
                "confirm": confirm
            }
        )

    def alibaba_alihealth_booking_reserve_treat(
            self,
            treat=None
    ):
        """
        确认就诊
        统一预约平台，ISV确认就诊
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43380

        :param treat: treat
        """
        return self._top_request(
            "alibaba.alihealth.booking.reserve.treat",
            {
                "treat": treat
            }
        )

    def alibaba_alihealth_booking_reserve_cancel(
            self,
            cancel=None
    ):
        """
        取消预约
        消费医疗统一预约平台，ISV取消预约
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43381

        :param cancel: cancel
        """
        return self._top_request(
            "alibaba.alihealth.booking.reserve.cancel",
            {
                "cancel": cancel
            }
        )

    def alibaba_alihealth_booking_reserve_checkin(
            self,
            check_in=None
    ):
        """
        确认到店
        消费医疗统一预约平台，ISV 确认到店
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43382

        :param check_in: check_in
        """
        return self._top_request(
            "alibaba.alihealth.booking.reserve.checkin",
            {
                "check_in": check_in
            }
        )

    def alibaba_alihealth_booking_reserve_modify(
            self,
            modify=None
    ):
        """
        修改预约
        消费医疗统一预约平台，取消预约
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43383

        :param modify: modify
        """
        return self._top_request(
            "alibaba.alihealth.booking.reserve.modify",
            {
                "modify": modify
            }
        )

    def alibaba_alihealth_dental_item_list(
            self,
            need_test_item='false'
    ):
        """
        ISV获取口腔标品列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43391

        :param need_test_item: 是否需要测试商品
        """
        return self._top_request(
            "alibaba.alihealth.dental.item.list",
            {
                "need_test_item": need_test_item
            }
        )

    def alibaba_alihealth_dental_item_bind(
            self,
            bind_list=None,
            type=''
    ):
        """
        ISV绑定外部门店id和外部商品id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43392

        :param bind_list: bind_list
        :param type: 类型 1 天猫门店 2 支付宝门店
        """
        return self._top_request(
            "alibaba.alihealth.dental.item.bind",
            {
                "bind_list": bind_list,
                "type": type
            }
        )

    def alibaba_alihealth_dental_item_unbind(
            self,
            sp_store_id='',
            sp_item_id=''
    ):
        """
        ISV解绑商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43393

        :param sp_store_id: ISV门店ID
        :param sp_item_id: ISV商品ID
        """
        return self._top_request(
            "alibaba.alihealth.dental.item.unbind",
            {
                "sp_store_id": sp_store_id,
                "sp_item_id": sp_item_id
            }
        )

    def alibaba_alihealth_dental_store_insertorupdate(
            self,
            store=None
    ):
        """
        ISV新增/修改口腔门店
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44182

        :param store: 门店
        """
        return self._top_request(
            "alibaba.alihealth.dental.store.insertorupdate",
            {
                "store": store
            }
        )

    def alibaba_alihealth_dental_store_audit_query(
            self,
            store_audit_ids=''
    ):
        """
        ISV查询门店审核状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44183

        :param store_audit_ids: 审核ID列表
        """
        return self._top_request(
            "alibaba.alihealth.dental.store.audit.query",
            {
                "store_audit_ids": store_audit_ids
            }
        )

    def alibaba_alihealth_dental_bind_audit_query(
            self,
            bind_ids=''
    ):
        """
        ISV查询绑定审核状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44184

        :param bind_ids: 绑定ID列表
        """
        return self._top_request(
            "alibaba.alihealth.dental.bind.audit.query",
            {
                "bind_ids": bind_ids
            }
        )

    def alibaba_alihealth_tracecodeseller_code_single_codereplace(
            self,
            ent_info_id,
            new_code,
            old_code
    ):
        """
        非药单码替换
        提供非药追溯码单码替换功能
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44351

        :param ent_info_id: 企业id
        :param new_code: 新码
        :param old_code: 老码
        """
        return self._top_request(
            "alibaba.alihealth.tracecodeseller.code.single.codereplace",
            {
                "ent_info_id": ent_info_id,
                "new_code": new_code,
                "old_code": old_code
            }
        )


class TbXinZhiZao(DingTalkBaseAPI):
    """
    新制造API
    """

    def taobao_rhino_supplychain_outbound_pickingcomplete(
            self,
            param0
    ):
        """
        【WMS005】接收成衣捡配完成通知
        接收成衣捡配完成通知,WMS005
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39533

        :param param0: 捡配完成消息
        """
        return self._top_request(
            "taobao.rhino.supplychain.outbound.pickingcomplete",
            {
                "param0": param0
            }
        )

    def taobao_rhino_supplychain_clothing_adjust(
            self,
            param0=None
    ):
        """
        同步成衣仓盘点数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39534

        :param param0: 库存盘点对象
        """
        return self._top_request(
            "taobao.rhino.supplychain.clothing.adjust",
            {
                "param0": param0
            }
        )

    def taobao_rhino_supplychain_inbound_confirm(
            self,
            clothing_inbound_confirm=None
    ):
        """
        WMS003成衣入库确认
        【WMS003】【同步成衣入库完成信息】
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39535

        :param clothing_inbound_confirm: 入库单确认对象
        """
        return self._top_request(
            "taobao.rhino.supplychain.inbound.confirm",
            {
                "clothing_inbound_confirm": clothing_inbound_confirm
            }
        )

    def taobao_rhino_supplychain_outbound_confirmrfiddone(
            self,
            rf_ids='',
            sap_invoice_id=''
    ):
        """
        成衣RFID检配完成确认
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39536

        :param rf_ids: rfId集合
        :param sap_invoice_id: SAP交货单号
        """
        return self._top_request(
            "taobao.rhino.supplychain.outbound.confirmrfiddone",
            {
                "rf_ids": rf_ids,
                "sap_invoice_id": sap_invoice_id
            }
        )

    def taobao_rhino_dtech_sampleroom_cad_marker_save(
            self,
            token='',
            mark_result_list=None,
            art_info=None,
            yellow_paper_list='',
            yellow_paper_id_list='',
            white_paper_list='',
            white_paper_id_list='',
            cad_source_file='',
            source_file_id='',
            op_version=''
    ):
        """
        新制造-保存唛架图信息
        CAD软件保存唛架图信息到新制造系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40794

        :param token: token
        :param mark_result_list: 排唛床次信息
        :param art_info: 工艺信息
        :param yellow_paper_list: 黄皮纸文件列表
        :param yellow_paper_id_list: 黄皮纸文件ID列表
        :param white_paper_list: 白皮纸文件列表
        :param white_paper_id_list: 白皮纸文件ID列表
        :param cad_source_file: CAD源文件名
        :param source_file_id: CAD源文件ID
        :param op_version: 文件版本
        """
        return self._top_request(
            "taobao.rhino.dtech.sampleroom.cad.marker.save",
            {
                "token": token,
                "mark_result_list": mark_result_list,
                "art_info": art_info,
                "yellow_paper_list": yellow_paper_list,
                "yellow_paper_id_list": yellow_paper_id_list,
                "white_paper_list": white_paper_list,
                "white_paper_id_list": white_paper_id_list,
                "cad_source_file": cad_source_file,
                "source_file_id": source_file_id,
                "op_version": op_version
            }
        )

    def taobao_rhino_dtech_sampleroom_cad_patternfullsize_save(
            self,
            token='',
            pattern_image_list='',
            pattern_image_id_list='',
            full_size_image_list='',
            full_size_image_id_list='',
            size_info=None,
            cad_source_file='',
            source_file_id='',
            op_version=''
    ):
        """
        新制造-保存纸样全码图信息
        CAD软件保存纸样全码图信息到新制造系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40795

        :param token: token
        :param pattern_image_list: 纸羊图图片列表
        :param pattern_image_id_list: 纸羊图图片id列表
        :param full_size_image_list: 全尺码图图片列表
        :param full_size_image_id_list: 全尺码图图片id 列表
        :param size_info: 尺码信息
        :param cad_source_file: cad源文件
        :param source_file_id: cad源文件id
        :param op_version: 当前操作的版本号
        """
        return self._top_request(
            "taobao.rhino.dtech.sampleroom.cad.patternfullsize.save",
            {
                "token": token,
                "pattern_image_list": pattern_image_list,
                "pattern_image_id_list": pattern_image_id_list,
                "full_size_image_list": full_size_image_list,
                "full_size_image_id_list": full_size_image_id_list,
                "size_info": size_info,
                "cad_source_file": cad_source_file,
                "source_file_id": source_file_id,
                "op_version": op_version
            }
        )

    def taobao_rhino_dtech_sampleroom_cad_techdesign_save(
            self,
            op_version,
            source_file_id,
            image_id_list,
            cad_source_file='',
            image_list='',
            token=''
    ):
        """
        新制造-保存工艺设计图信息
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        CAD软件保存工艺设计图信息到新制造系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40796

        :param op_version: 文件版本
        :param source_file_id: 源文件ID
        :param image_id_list: 缩略图ID列表
        :param cad_source_file: 源文件
        :param image_list: 缩略图列表
        :param token: token
        """
        return self._top_request(
            "taobao.rhino.dtech.sampleroom.cad.techdesign.save",
            {
                "op_version": op_version,
                "source_file_id": source_file_id,
                "image_id_list": image_id_list,
                "cad_source_file": cad_source_file,
                "image_list": image_list,
                "token": token
            }
        )

    def taobao_rhino_dtech_sampleroom_cad_upload(
            self,
            file,
            token='',
            file_name=''
    ):
        """
        新制造-上传CAD文件
        CAD软件上传编辑好的CAD图等文件到新制造系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40797

        :param file: CAD文件
        :param token: token
        :param file_name: 文件名称
        """
        return self._top_request(
            "taobao.rhino.dtech.sampleroom.cad.upload",
            {
                "file": file,
                "token": token,
                "file_name": file_name
            }
        )

    def taobao_rhino_dtech_sampleroom_cad_process(
            self,
            token=''
    ):
        """
        新制造-获取CAD图信息
        获取编辑生成CAD图需要的相关信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40806

        :param token: token
        """
        return self._top_request(
            "taobao.rhino.dtech.sampleroom.cad.process",
            {
                "token": token
            }
        )


class TbLingShouTongXiaoDianZhiNengSheBei(DingTalkBaseAPI):
    """
    零售通小店智能设备
    """

    def alibaba_lst_open_camera_customer_sync(
            self,
            equ_camera_customer
    ):
        """
        零售通小店智能摄像头顾客画像数据同步
        云盯同步零售通小店摄像头顾客画像数据给到零售通系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39081

        :param equ_camera_customer: 智能摄像头顾客画像模型
        """
        return self._top_request(
            "alibaba.lst.open.camera.customer.sync",
            {
                "equ_camera_customer": equ_camera_customer
            }
        )

    def alibaba_lst_open_camerary_customer_get(
            self,
            device
    ):
        """
        零售通小店终端指令查询接口
        零售通小店终端展示信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39082

        :param device: 设备编号
        """
        return self._top_request(
            "alibaba.lst.open.camerary.customer.get",
            {
                "device": device
            }
        )


class TbYiZhiLuShiPin(DingTalkBaseAPI):
    """
    医知鹿-视频
    """

    def alibaba_cancer_guide_video_sync(
            self,
            video_introduction='该视频描述了。。',
            hospital_level='三级甲等',
            video_title='什么是月经不调',
            video_file_url='http://owq1vlba5.bkt.clouddn.com/doctor/5b344f725074b96c300713ef.mp4',
            author_department='妇科',
            author_introduction='老中医',
            disease='月经不调',
            video_mobile_url='http://www.jiusongjiankang.com/doctor/pc/h5_video_details.html?videoId=150',
            partner_homepage='http://www.jiusongjiankang.com/',
            portrait_url='http://owq1vlba5.bkt.clouddn.com/doctor/5b3996815074b91805658b42.png',
            phone_number='156****5886',
            video_length='01:49',
            author_name='王雪峰',
            priview_url='http://owq1vlba5.bkt.clouddn.com/doctor/5b401d0d5074b97f8e5e7c03.jpg',
            hospital_name='南方医科大学珠江医院',
            partner_name='九松健康',
            author_id='作者id',
            video_id='视频id',
            release_date='发布日期'
    ):
        """
        三方视频同步接口
        合作方在上传视频到自己平台的同时同步给医知鹿后台
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38874

        :param video_introduction: 视频简介
        :param hospital_level: 医院级别
        :param video_title: 视频标题
        :param video_file_url: 视频文件地址
        :param author_department: 作者科室
        :param author_introduction: 作者简介
        :param disease: 视频所述疾病
        :param video_mobile_url: 视频移动端地址
        :param partner_homepage: 合作方主页
        :param portrait_url: 作者头像url
        :param phone_number: 作者电话
        :param video_length: 视频长度
        :param author_name: 作者名字
        :param priview_url: 视频预览图链接
        :param hospital_name: 医院名称
        :param partner_name: 合作方名称
        :param author_id: 作者id
        :param video_id: 视频id
        :param release_date: 发布日期
        """
        return self._top_request(
            "alibaba.cancer.guide.video.sync",
            {
                "video_introduction": video_introduction,
                "hospital_level": hospital_level,
                "video_title": video_title,
                "video_file_url": video_file_url,
                "author_department": author_department,
                "author_introduction": author_introduction,
                "disease": disease,
                "video_mobile_url": video_mobile_url,
                "partner_homepage": partner_homepage,
                "portrait_url": portrait_url,
                "phone_number": phone_number,
                "video_length": video_length,
                "author_name": author_name,
                "priview_url": priview_url,
                "hospital_name": hospital_name,
                "partner_name": partner_name,
                "author_id": author_id,
                "video_id": video_id,
                "release_date": release_date
            }
        )

    def alibaba_cancer_guide_content_sync(
            self,
            video_id,
            video_title,
            partner_name,
            author_id,
            author_name,
            priview_url='',
            disease='',
            video_length='',
            video_introduction='',
            video_mobile_url='',
            video_file_url='',
            release_date='',
            partner_homepage='',
            portrait_url='',
            hospital_name='',
            hospital_level='',
            author_level='',
            author_department='',
            author_introduction='',
            phone_number=''
    ):
        """
        合伙做伴内容同步接口
        合伙做伴内容同步接口，可能是视频或者文章
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=38937

        :param video_id: 视频id
        :param video_title: 视频标题
        :param partner_name: 合作方名称
        :param author_id: 作者id
        :param author_name: 作者姓名
        :param priview_url: 预览图url
        :param disease: 视频所述疾病
        :param video_length: 视频长度
        :param video_introduction: 视频简介
        :param video_mobile_url: 视频移动端播放url
        :param video_file_url: 视频文件url
        :param release_date: 发布时间
        :param partner_homepage: 合作方主页
        :param portrait_url: 作者头像url
        :param hospital_name: 所属医院名称
        :param hospital_level: 医院等级
        :param author_level: 作者级别
        :param author_department: 作者科室
        :param author_introduction: 作者简介
        :param phone_number: 作者电话
        """
        return self._top_request(
            "alibaba.cancer.guide.content.sync",
            {
                "video_id": video_id,
                "video_title": video_title,
                "partner_name": partner_name,
                "author_id": author_id,
                "author_name": author_name,
                "priview_url": priview_url,
                "disease": disease,
                "video_length": video_length,
                "video_introduction": video_introduction,
                "video_mobile_url": video_mobile_url,
                "video_file_url": video_file_url,
                "release_date": release_date,
                "partner_homepage": partner_homepage,
                "portrait_url": portrait_url,
                "hospital_name": hospital_name,
                "hospital_level": hospital_level,
                "author_level": author_level,
                "author_department": author_department,
                "author_introduction": author_introduction,
                "phone_number": phone_number
            }
        )

    def alibaba_cancer_guide_content_delete(
            self,
            video_id,
            partner_name
    ):
        """
        合作方内容删除接口
        第三方合作伙伴在删除本地视频的同时也在我方删除视频
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39132

        :param video_id: 视频id
        :param partner_name: 合作方公司名
        """
        return self._top_request(
            "alibaba.cancer.guide.content.delete",
            {
                "video_id": video_id,
                "partner_name": partner_name
            }
        )

    def alibaba_cancer_guide_article_sync(
            self,
            partner_name,
            title_image,
            content,
            title,
            article_id,
            original_article_url='',
            article_abstract=''
    ):
        """
        合作伙伴文章同步接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39858

        :param partner_name: 三方名称
        :param title_image: 文章封面招聘链接
        :param content: 文章内容
        :param title: 文章标题
        :param article_id: 文章id
        :param original_article_url: 原文链接
        :param article_abstract: 文章摘要
        """
        return self._top_request(
            "alibaba.cancer.guide.article.sync",
            {
                "partner_name": partner_name,
                "title_image": title_image,
                "content": content,
                "title": title,
                "article_id": article_id,
                "original_article_url": original_article_url,
                "article_abstract": article_abstract
            }
        )

    def alibaba_alihealth_mdeer_video_sync(
            self,
            partner_portrait_url='',
            phone_number='',
            author_introduction='',
            author_department='',
            author_level='',
            hospital_level='',
            hospital_name='',
            portrait_url='',
            author_name='',
            author_id='',
            partner_homepage='',
            partner_name='',
            release_date='',
            video_file_url='',
            video_mobile_url='',
            video_introduction='',
            video_length='',
            disease='',
            priview_url='',
            video_title='',
            video_id=''
    ):
        """
        合作伙伴视频同步给医知鹿接口
        合伙做伴内容同步接口，用来视频同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41754

        :param partner_portrait_url: 合作方头像url
        :param phone_number: 作者电话
        :param author_introduction: 作者简介
        :param author_department: 作者科室
        :param author_level: 作者级别
        :param hospital_level: 医院级别
        :param hospital_name: 医院名称
        :param portrait_url: 作者头像
        :param author_name: 作者名称
        :param author_id: 作者id
        :param partner_homepage: 合作方主页
        :param partner_name: 合作方名称
        :param release_date: 发布日期
        :param video_file_url: 视频文件url
        :param video_mobile_url: 视频落地页
        :param video_introduction: 视频简介
        :param video_length: 视频长度
        :param disease: 视频所述疾病
        :param priview_url: 预览图url
        :param video_title: 视频标题
        :param video_id: 视频id
        """
        return self._top_request(
            "alibaba.alihealth.mdeer.video.sync",
            {
                "partner_portrait_url": partner_portrait_url,
                "phone_number": phone_number,
                "author_introduction": author_introduction,
                "author_department": author_department,
                "author_level": author_level,
                "hospital_level": hospital_level,
                "hospital_name": hospital_name,
                "portrait_url": portrait_url,
                "author_name": author_name,
                "author_id": author_id,
                "partner_homepage": partner_homepage,
                "partner_name": partner_name,
                "release_date": release_date,
                "video_file_url": video_file_url,
                "video_mobile_url": video_mobile_url,
                "video_introduction": video_introduction,
                "video_length": video_length,
                "disease": disease,
                "priview_url": priview_url,
                "video_title": video_title,
                "video_id": video_id
            }
        )


class TbWuDaoKouShangPin(DingTalkBaseAPI):
    """
    五道口商品API
    """

    def alibaba_wdk_item_merchantsku_update(
            self,
            sku_code,
            params,
            org_code
    ):
        """
        商家商品修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30641

        :param sku_code: 商品编码
        :param params: 参数json
        :param org_code: 机构编码
        """
        return self._top_request(
            "alibaba.wdk.item.merchantsku.update",
            {
                "sku_code": sku_code,
                "params": params,
                "org_code": org_code
            }
        )

    def alibaba_wdk_item_merchantsku_query(
            self,
            sku_code,
            org_code
    ):
        """
        商家商品信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30644

        :param sku_code: 商品编码
        :param org_code: 机构编码
        """
        return self._top_request(
            "alibaba.wdk.item.merchantsku.query",
            {
                "sku_code": sku_code,
                "org_code": org_code
            }
        )

    def alibaba_wdk_item_merchantstoresku_create(
            self,
            store_id,
            sku_code,
            params,
            org_code
    ):
        """
        门店商品信息新建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30645

        :param store_id: 门店编码
        :param sku_code: 商品编码
        :param params: 新建参数，是个json字符串
        :param org_code: 机构
        """
        return self._top_request(
            "alibaba.wdk.item.merchantstoresku.create",
            {
                "store_id": store_id,
                "sku_code": sku_code,
                "params": params,
                "org_code": org_code
            }
        )

    def alibaba_wdk_item_merchantstoresku_update(
            self,
            store_id,
            sku_code,
            params
    ):
        """
        门店商品信息修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30646

        :param store_id: 门店ID
        :param sku_code: 商品编码
        :param params: 修改参数，是个json字符串
        """
        return self._top_request(
            "alibaba.wdk.item.merchantstoresku.update",
            {
                "store_id": store_id,
                "sku_code": sku_code,
                "params": params
            }
        )

    def alibaba_wdk_item_merchantsku_create(
            self,
            params
    ):
        """
        商家商品信息新建
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30647

        :param params: 新建商品参数，是个json字符串
        """
        return self._top_request(
            "alibaba.wdk.item.merchantsku.create",
            {
                "params": params
            }
        )

    def alibaba_wdk_item_brand_query(
            self,
            keyword='',
            offset='0',
            page_size='2000'
    ):
        """
        品牌信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30648

        :param keyword: 查询关键词，不填则查询全部
        :param offset: 起始位置
        :param page_size: 一页大小
        """
        return self._top_request(
            "alibaba.wdk.item.brand.query",
            {
                "keyword": keyword,
                "offset": offset,
                "page_size": page_size
            }
        )

    def alibaba_wdk_item_category_query(
            self,
            keyword='',
            root_category_code=''
    ):
        """
        类目查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30649

        :param keyword: 查询关键词，不填查全部
        :param root_category_code: 从哪个类目开始查，不填从根类目开始查
        """
        return self._top_request(
            "alibaba.wdk.item.category.query",
            {
                "keyword": keyword,
                "root_category_code": root_category_code
            }
        )

    def alibaba_wdk_item_storesku_query(
            self,
            sku_code,
            store_id
    ):
        """
        门店商品信息查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30650

        :param sku_code: 商品编码
        :param store_id: 门店ID
        """
        return self._top_request(
            "alibaba.wdk.item.storesku.query",
            {
                "sku_code": sku_code,
                "store_id": store_id
            }
        )

    def alibaba_wdk_item_memberprice_update(
            self,
            store_id,
            sku_code,
            sku_price='',
            sku_member_price='',
            clean_sku_member_price='',
            time_stamp=''
    ):
        """
        商品售价会员价修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=30651

        :param store_id: 门店ID
        :param sku_code: 商品编码
        :param sku_price: 售价，单位分，售价会员价至少填一个
        :param sku_member_price: 会员价，单位分
        :param clean_sku_member_price: 是否清空会员价
        :param time_stamp: 时间戳
        """
        return self._top_request(
            "alibaba.wdk.item.memberprice.update",
            {
                "store_id": store_id,
                "sku_code": sku_code,
                "sku_price": sku_price,
                "sku_member_price": sku_member_price,
                "clean_sku_member_price": clean_sku_member_price,
                "time_stamp": time_stamp
            }
        )

    def alibaba_wdk_item_morebarcode_ops(
            self,
            update_more_bar_code_request_bean
    ):
        """
        商品一品多码维护操作
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=31191

        :param update_more_bar_code_request_bean: bean
        """
        return self._top_request(
            "alibaba.wdk.item.morebarcode.ops",
            {
                "update_more_bar_code_request_bean": update_more_bar_code_request_bean
            }
        )

    def alibaba_wdk_item_storeskustatus_update(
            self,
            bean=None
    ):
        """
        修改门店商品状态
        五道口商品 修改门店商品状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32128

        :param bean: bean
        """
        return self._top_request(
            "alibaba.wdk.item.storeskustatus.update",
            {
                "bean": bean
            }
        )

    def alibaba_wdk_picture_upload(
            self,
            picture_category_id,
            img,
            img_input_title='',
            title=''
    ):
        """
        图片上传接口
        上传图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=32686

        :param picture_category_id: 图片分类ID，设置具体某个分类ID或设置0上传到默认分类，只能传入一个分类
        :param img: 图片二进制文件流,不能为空,允许png、jpg、gif图片格式,3M以内
        :param img_input_title: 包括后缀名的图片标题,不能为空，如Bule.jpg,有些卖家希望图片上传后取图片文件的默认名
        :param title: 图片标题,如果为空,传的图片标题就取去掉后缀名的image_input_title,超过50字符长度会截取50字符,重名会在标题末尾加'(1)';标题末尾已经有'(数字)'了，则数字加1
        """
        return self._top_request(
            "alibaba.wdk.picture.upload",
            {
                "picture_category_id": picture_category_id,
                "img": img,
                "img_input_title": img_input_title,
                "title": title
            }
        )


class TbLingShouTongDingDanLvXing(DingTalkBaseAPI):
    """
    零售通订单履行
    """

    def alibaba_lst_shiporder_create(
            self,
            ship_order=None
    ):
        """
        零售通发货单创建
        通过该接口可以创建零售通运保保发货单，并处理相关业务流程。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39164

        :param ship_order: 创建发货单入参
        """
        return self._top_request(
            "alibaba.lst.shiporder.create",
            {
                "ship_order": ship_order
            }
        )

    def alibaba_lst_shiporder_cancel(
            self,
            out_order_id,
            reason='',
            detail_order_ids=''
    ):
        """
        零售通发货单取消
        通过该接口可以取消零售通运保保发货单，并处理相关业务流程。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39311

        :param out_order_id: 订单号
        :param reason: 取消原因
        :param detail_order_ids: 需要退款的明细ID
        """
        return self._top_request(
            "alibaba.lst.shiporder.cancel",
            {
                "out_order_id": out_order_id,
                "reason": reason,
                "detail_order_ids": detail_order_ids
            }
        )

    def alibaba_lst_shiporder_query(
            self,
            out_order_id,
            source=''
    ):
        """
        零售通发货单查询
        通过该接口可以查询零售通运保保发货单，并处理相关业务流程。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39341

        :param out_order_id: 订单
        :param source: 零售通
        """
        return self._top_request(
            "alibaba.lst.shiporder.query",
            {
                "out_order_id": out_order_id,
                "source": source
            }
        )


class TbTianMaoXianXiaDaPing(DingTalkBaseAPI):
    """
    天猫线下大屏
    """

    def tmall_fcbox_notify(
            self,
            apply_id='',
            state_remark='',
            state='',
            operate_time='',
            operate=''
    ):
        """
        丰巢通知接口
        tmax接收丰巢快递通知
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39240

        :param apply_id: 申请接口返回的申请标识
        :param state_remark: 状态备注
        :param state: 申请记录当前状态
        :param operate_time: 变更时间
        :param operate: 变更操作
        """
        return self._top_request(
            "tmall.fcbox.notify",
            {
                "apply_id": apply_id,
                "state_remark": state_remark,
                "state": state,
                "operate_time": operate_time,
                "operate": operate
            }
        )

    def tmall_brandmarketing_tmax_third_auditresult(
            self,
            reason='',
            result='',
            ad_plan_id='',
            site_id=''
    ):
        """
        Tmax蚂蚁审核结果通知
        天猫向蚂蚁端同步内容投放排期之后，蚂蚁端需要对排期内容进行审核，此接口用于接收蚂蚁端内容审核的结果，用于更新天猫端的排期数据状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40496

        :param reason: 审核意见
        :param result: 审核结果
        :param ad_plan_id: 广告平台排期ID
        :param site_id: 站点id
        """
        return self._top_request(
            "tmall.brandmarketing.tmax.third.auditresult",
            {
                "reason": reason,
                "result": result,
                "ad_plan_id": ad_plan_id,
                "site_id": site_id
            }
        )

    def tmall_brandmarketing_tmax_offlinedevice_getactivity(
            self,
            device_id,
            isv_code,
            isv_user_id=''
    ):
        """
        获取TMAX营销任务列表
        Tmax为了引导线下用户完成商家营销任务，用户因此获得免费权益，需要对接商圈场景中的线下设备；此接口用于向ISV输出营销任务列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43693

        :param device_id: isv设备id
        :param isv_code: 平台分配的isv的code
        :param isv_user_id: isv用户id
        """
        return self._top_request(
            "tmall.brandmarketing.tmax.offlinedevice.getactivity",
            {
                "device_id": device_id,
                "isv_code": isv_code,
                "isv_user_id": isv_user_id
            }
        )

    def tmall_brandmarketing_tmax_offlinedevice_iscompletedacti(
            self,
            activity_id='',
            encrypted_user_id='',
            device_id='',
            extra_info=''
    ):
        """
        判断用户是否完成任务
        Tmax为了引导线下用户完成商家营销任务，用户因此获得免费权益，需要对接商圈场景中的线下设备；此接口用于向ISV输出用户是否完成指定的营销任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43695

        :param activity_id: 活动id
        :param encrypted_user_id: 加密后的用户id
        :param device_id: isv设备id
        :param extra_info: 额外信息
        """
        return self._top_request(
            "tmall.brandmarketing.tmax.offlinedevice.iscompletedacti",
            {
                "activity_id": activity_id,
                "encrypted_user_id": encrypted_user_id,
                "device_id": device_id,
                "extra_info": extra_info
            }
        )


class TbALiJianKangHIOT(DingTalkBaseAPI):
    """
    阿里健康-HIOT
    """

    def alibaba_alijk_community_thermometer(
            self,
            temp,
            birthday
    ):
        """
        体温服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39875

        :param temp: 体温
        :param birthday: 生日
        """
        return self._top_request(
            "alibaba.alijk.community.thermometer",
            {
                "temp": temp,
                "birthday": birthday
            }
        )

    def alibaba_alijk_community_ecg(
            self,
            data_id,
            sample_rate
    ):
        """
        心电服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39876

        :param data_id: 数据id
        :param sample_rate: 样板频率
        """
        return self._top_request(
            "alibaba.alijk.community.ecg",
            {
                "data_id": data_id,
                "sample_rate": sample_rate
            }
        )

    def alibaba_alijk_community_bloodpressure(
            self,
            high,
            low,
            birthday,
            sex
    ):
        """
        血压服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39882

        :param high: 高压
        :param low: 低压
        :param birthday: 生日
        :param sex: 性别
        """
        return self._top_request(
            "alibaba.alijk.community.bloodpressure",
            {
                "high": high,
                "low": low,
                "birthday": birthday,
                "sex": sex
            }
        )

    def alibaba_alijk_community_bloodsugar(
            self,
            blood_glucose,
            entry_flag,
            entry_time,
            birthday,
            diabetes_type
    ):
        """
        血糖服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39883

        :param blood_glucose: 血糖值
        :param entry_flag: 时间段
        :param entry_time: 时间
        :param birthday: 生日
        :param diabetes_type: 糖尿病类型
        """
        return self._top_request(
            "alibaba.alijk.community.bloodsugar",
            {
                "blood_glucose": blood_glucose,
                "entry_flag": entry_flag,
                "entry_time": entry_time,
                "birthday": birthday,
                "diabetes_type": diabetes_type
            }
        )

    def alibaba_alijk_community_weight(
            self,
            weight,
            height,
            birthday,
            sex,
            waistline='0'
    ):
        """
        体重服务
        ！！！该接口已在官方文档下线，请谨慎使用！！！

        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39959

        :param weight: 体重kg
        :param height: 身高cm
        :param birthday: 生日
        :param sex: 1男2女
        :param waistline: 腰围cm
        """
        return self._top_request(
            "alibaba.alijk.community.weight",
            {
                "weight": weight,
                "height": height,
                "birthday": birthday,
                "sex": sex,
                "waistline": waistline
            }
        )


class TbTVOSYingYongShenHePingTai(DingTalkBaseAPI):
    """
    TVOS应用审核平台
    """

    def youku_tvosappstore_app_checkonline(
            self,
            query=None
    ):
        """
        渠道商来查询某个应用版本是否上线
        查询应用是否上架，如果上架应用可以提供下载，如果是下架应用不可以提供下载
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39527

        :param query: 系统自动生成
        """
        return self._top_request(
            "youku.tvosappstore.app.checkonline",
            {
                "query": query
            }
        )

    def youku_tvosappstore_app_add(
            self,
            add_request=None
    ):
        """
        应用上报
        应用上报,创建应用上报任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40105

        :param add_request: 应用上报参数
        """
        return self._top_request(
            "youku.tvosappstore.app.add",
            {
                "add_request": add_request
            }
        )

    def youku_tvosappstore_app_update(
            self,
            update_app_request=None
    ):
        """
        应用信息更新接口
        应用信息更新,更新渠道商已上报的应用信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40211

        :param update_app_request: 更新应用参数
        """
        return self._top_request(
            "youku.tvosappstore.app.update",
            {
                "update_app_request": update_app_request
            }
        )

    def youku_tvosappstore_log_report(
            self,
            log
    ):
        """
        log上报接口，统计数据上报接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40868

        :param log: 日志内容，统计数据内容
        """
        return self._top_request(
            "youku.tvosappstore.log.report",
            {
                "log": log
            }
        )


class TbAEOverseaSolution(DingTalkBaseAPI):
    """
    AE-Oversea-Solution
    """

    def aliexpress_solution_product_subject_description_edit(
            self,
            edit_product_subject_description_request
    ):
        """
        Edit subject or description for product(Or both)
        Edit subject or description(Or both) of a product, customized for oversea merchants.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39632

        :param edit_product_subject_description_request: input parameters
        """
        return self._top_request(
            "aliexpress.solution.product.subject.description.edit",
            {
                "edit_product_subject_description_request": edit_product_subject_description_request
            },
            result_processor=lambda x: x["product_id"]
        )

    def aliexpress_solution_product_sku_price_edit(
            self,
            edit_product_sku_price_request=None
    ):
        """
        Update price for a specific sku of a product, customized for oversea merchants.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39633

        :param edit_product_sku_price_request: input parameters
        """
        return self._top_request(
            "aliexpress.solution.product.sku.price.edit",
            {
                "edit_product_sku_price_request": edit_product_sku_price_request
            }
        )

    def aliexpress_solution_product_post(
            self,
            post_product_request=None
    ):
        """
        Product posting API
        Product posting API for Oversea merchants, simplifying the complexity of integration that sellers and merchants face. For example, these sellers can use their own category and attributes instead of mapping those from AE.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39634

        :param post_product_request: input param
        """
        return self._top_request(
            "aliexpress.solution.product.post",
            {
                "post_product_request": post_product_request
            },
            result_processor=lambda x: x["product_id"]
        )

    def aliexpress_solution_product_sku_inventory_edit(
            self,
            edit_product_sku_inventory_request=None
    ):
        """
        Update inventory for a specific sku of a product
        Update inventory for a specific sku of a product, customized for oversea merchants.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39635

        :param edit_product_sku_inventory_request: input parameters
        """
        return self._top_request(
            "aliexpress.solution.product.sku.inventory.edit",
            {
                "edit_product_sku_inventory_request": edit_product_sku_inventory_request
            }
        )

    def aliexpress_solution_sku_attribute_query(
            self,
            query_sku_attribute_info_request=None
    ):
        """
        Query the sku attribute information belonged to a specific category
        Query the sku attribute information belonged to a specific category, customized for oversea merchants.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39669

        :param query_sku_attribute_info_request: input parameters
        """
        return self._top_request(
            "aliexpress.solution.sku.attribute.query",
            {
                "query_sku_attribute_info_request": query_sku_attribute_info_request
            }
        )

    def aliexpress_solution_product_edit(
            self,
            edit_product_request=None
    ):
        """
        Edit Product API
        API for editing product, customized for Oversea merchants. Most of the input fields of this API is similar with aliexpress.solution.product.post. For editing, just fill in the fields you would like to edit, leave other fields to be blank.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39695

        :param edit_product_request: input param
        """
        return self._top_request(
            "aliexpress.solution.product.edit",
            {
                "edit_product_request": edit_product_request
            },
            result_processor=lambda x: x["product_id"]
        )

    def aliexpress_solution_issue_partner_rma_reverselogistic_state_update(
            self,
            logistic_order_state_update_request
    ):
        """
        aliexpress.solution.issue.partner.rma.reverselogistic.state.update
        Updates the reverse logistics state for after sales services
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41475

        :param logistic_order_state_update_request: Logistic order state update request
        """
        return self._top_request(
            "aliexpress.solution.issue.partner.rma.reverselogistic.state.update",
            {
                "logistic_order_state_update_request": logistic_order_state_update_request
            }
        )

    def aliexpress_solution_issue_partner_rma_reverselogistic_trackinginfo_create(
            self,
            logistics_order_creation_request
    ):
        """
        aliexpress.solution.issue.partner.rma.reverselogistic.trackinginfo.create
        Receives information about reverse logistics tracking info
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41476

        :param logistics_order_creation_request: Logistic's order creation request
        """
        return self._top_request(
            "aliexpress.solution.issue.partner.rma.reverselogistic.trackinginfo.create",
            {
                "logistics_order_creation_request": logistics_order_creation_request
            }
        )

    def aliexpress_solution_issue_partner_rma_screening_create(
            self,
            screening_result_creation_request
    ):
        """
        aliexpress.solution.issue.partner.rma.screening.create
        Receives information about screening results from after sales partners
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41477

        :param screening_result_creation_request: Screening result creation request
        """
        return self._top_request(
            "aliexpress.solution.issue.partner.rma.screening.create",
            {
                "screening_result_creation_request": screening_result_creation_request
            }
        )

    def aliexpress_solution_issue_partner_rma_state_update(
            self,
            rma_state_update_request
    ):
        """
        aliexpress.solution.issue.partner.rma.state.update
        Receive changes in state updates for RMAs orders from after sales partners
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41478

        :param rma_state_update_request: RMA's order state update request
        """
        return self._top_request(
            "aliexpress.solution.issue.partner.rma.state.update",
            {
                "rma_state_update_request": rma_state_update_request
            }
        )

    def aliexpress_solution_order_fulfill(
            self,
            service_name,
            out_ref,
            send_type,
            logistics_no,
            tracking_website='',
            description=''
    ):
        """
        fulfill order
        fulfill order for seller
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42269

        :param service_name: 物流服务名称
        :param out_ref: 交易订单号
        :param send_type: 声明发货类型，all表示全部发货，part表示部分声明发货。
        :param logistics_no: 国际运单号
        :param tracking_website: 追踪网址
        :param description: memo
        """
        return self._top_request(
            "aliexpress.solution.order.fulfill",
            {
                "service_name": service_name,
                "out_ref": out_ref,
                "send_type": send_type,
                "logistics_no": logistics_no,
                "tracking_website": tracking_website,
                "description": description
            }
        )

    def aliexpress_solution_order_get(
            self,
            param0=None
    ):
        """
        get order list
        Get Order List from AliExpress
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42270

        :param param0: 入参
        """
        return self._top_request(
            "aliexpress.solution.order.get",
            {
                "param0": param0
            }
        )

    def aliexpress_solution_order_receiptinfo_get(
            self,
            param1=None
    ):
        """
        Get Order Receipt Info
        Get Order Receipt Info, Support multi stores requirements for Turkey sellers.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42369

        :param param1: 查询条件
        """
        return self._top_request(
            "aliexpress.solution.order.receiptinfo.get",
            {
                "param1": param1
            }
        )

    def aliexpress_solution_product_info_get(
            self,
            product_id=''
    ):
        """
        Get Single Product Info
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42383

        :param product_id: 商品ID
        """
        return self._top_request(
            "aliexpress.solution.product.info.get",
            {
                "product_id": product_id
            }
        )

    def aliexpress_solution_product_list_get(
            self,
            aeop_a_e_product_list_query=None
    ):
        """
        Get product list
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42384

        :param aeop_a_e_product_list_query: request parameters to query
        """
        return self._top_request(
            "aliexpress.solution.product.list.get",
            {
                "aeop_a_e_product_list_query": aeop_a_e_product_list_query
            }
        )

    def aliexpress_solution_order_info_get(
            self,
            param1=None
    ):
        """
        get order detail info
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42707

        :param param1: 详细参考如下
        """
        return self._top_request(
            "aliexpress.solution.order.info.get",
            {
                "param1": param1
            }
        )

    def aliexpress_solution_product_schema_get(
            self,
            aliexpress_category_id
    ):
        """
        get product schema
        provide a new schema way to post product. With a pair of API, one for getting schema, one for posting instance
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43456

        :param aliexpress_category_id: aliexpress category id. You can get it from category API
        """
        return self._top_request(
            "aliexpress.solution.product.schema.get",
            {
                "aliexpress_category_id": aliexpress_category_id
            }
        )

    def aliexpress_solution_schema_product_instance_post(
            self,
            product_instance_request
    ):
        """
        aliexpress.solution.schema.product.instance.post
        Upload product based on json schema instance
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43561

        :param product_instance_request: Product instance data. Please note: the shipping_template_id should be replaced with your own shipping template id, which could be obtained through  https://developers.aliexpress.com/en/doc.htm?docId=43456&docType=2
        """
        return self._top_request(
            "aliexpress.solution.schema.product.instance.post",
            {
                "product_instance_request": product_instance_request
            },
            result_processor=lambda x: x["product_id"]
        )

    def aliexpress_solution_feed_submit(
            self,
            operation_type,
            item_list
    ):
        """
        aliexpress.solution.feed.submit
        API for merchants to submit feed data.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44004

        :param operation_type: Currently support 4 types of feeds:PRODUCT_CREATE,PRODUCT_FULL_UPDATE,STOCK_UPDATE,PRICE_UPDATE
        :param item_list: item list, maximum size: 2000.
        """
        return self._top_request(
            "aliexpress.solution.feed.submit",
            {
                "operation_type": operation_type,
                "item_list": item_list
            },
            result_processor=lambda x: x["job_id"]
        )

    def aliexpress_solution_feed_query(
            self,
            job_id=''
    ):
        """
        aliexpress.solution.feed.query
        API for query the execution result of feed.
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44009

        :param job_id: job id
        """
        return self._top_request(
            "aliexpress.solution.feed.query",
            {
                "job_id": job_id
            }
        )


class TbALiJingLingJiChuNengLiJieKou(DingTalkBaseAPI):
    """
    阿里精灵基础能力接口
    """

    def alibaba_ailabs_aligenie_device_unbind(
            self,
            user_id,
            schema,
            uuid,
            ext=''
    ):
        """
        设备解绑操作接口
        让开发者能根据设备ID进行解绑操作的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39668

        :param user_id: 用户ID，此处传入第三方账户体系的用户id
        :param schema: 账户体系隔离字符串
        :param uuid: 欲解绑的设备ID
        :param ext: 扩展信息，用于存放APP类型等
        """
        return self._top_request(
            "alibaba.ailabs.aligenie.device.unbind",
            {
                "user_id": user_id,
                "schema": schema,
                "uuid": uuid,
                "ext": ext
            }
        )


class TbALiJianKangXinLingShou(DingTalkBaseAPI):
    """
    阿里健康新零售
    """

    def alibaba_health_nr_logistics_query(
            self,
            order_id
    ):
        """
        阿里健康新零售物流详情接口
        对阿里健康o2o对接的商户提供查询物流单详情的能力
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41387

        :param order_id: 订单id
        """
        return self._top_request(
            "alibaba.health.nr.logistics.query",
            {
                "order_id": order_id
            },
            result_processor=lambda x: x["response_result"]
        )


class TbXianYuFaBu(DingTalkBaseAPI):
    """
    闲鱼发布
    """

    def alibaba_idle_item_media_add(
            self,
            media_data,
            media_type,
            user_nick=''
    ):
        """
        图片上传
        上传图片
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39867

        :param media_data: 多媒体文件字节流，图片<5M,视频<8M
        :param media_type: 类型：0 - 图片 ，仅支持图片
        :param user_nick: 废弃，不用再输入
        """
        return self._top_request(
            "alibaba.idle.item.media.add",
            {
                "media_data": media_data,
                "media_type": media_type,
                "user_nick": user_nick
            }
        )

    def alibaba_idle_item_idlecoin_add(
            self,
            idle_coin_item_param
    ):
        """
        免费送商品发送
        免费送商品发布
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=39868

        :param idle_coin_item_param: 免费送商品数据
        """
        return self._top_request(
            "alibaba.idle.item.idlecoin.add",
            {
                "idle_coin_item_param": idle_coin_item_param
            }
        )

    def alibaba_idle_recycle_order_get(
            self,
            biz_order_id
    ):
        """
        闲鱼回收2.0订单查询接口
        闲鱼回收业务中,外部回收商作为交易上买家,闲鱼用户下单后,需要回收商主动拉取交易订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42443

        :param biz_order_id: 订单号
        """
        return self._top_request(
            "alibaba.idle.recycle.order.get",
            {
                "biz_order_id": biz_order_id
            }
        )


class TbRenGongZhiNengShiYanShiKaiFangPingTai(DingTalkBaseAPI):
    """
    人工智能实验室开放平台API
    """

    def alibaba_ailab_user_token_get(
            self,
            merchant_user_id='',
            schema_key='',
            call_back_url=''
    ):
        """
        三方账号获取 token
        inside 设备的三方 app，通过 extId、schema 生成 token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40929

        :param merchant_user_id: 三方用户的唯一ID
        :param schema_key: 开放平台申请的schema
        :param call_back_url: 用户点击同意授权，则会有授权结果：success/fail，此结果通过 callBackUrl 回调给三方 如果授权账号重复授权给已授权的淘宝账号，幂等返回成功 url 的调用是 表单 post 的方式， request body success example: merchantUserId=xxx&result=success request body fail example: merchantUserId=xxx&result=fail
        """
        return self._top_request(
            "alibaba.ailab.user.token.get",
            {
                "merchant_user_id": merchant_user_id,
                "schema_key": schema_key,
                "call_back_url": call_back_url
            }
        )

    def alibaba_ailabs_iot_device_status_update(
            self,
            device_status_d_t_o
    ):
        """
        ailabs iot 设备状态更新
        用于人工智能实验室IoT合作厂商上报三方接入IoT设备状态更新时的设备状态上报
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42174

        :param device_status_d_t_o: 入参设备信息
        """
        return self._top_request(
            "alibaba.ailabs.iot.device.status.update",
            {
                "device_status_d_t_o": device_status_d_t_o
            }
        )

    def taobao_ailab_aicloud_top_tvs_token_get(
            self,
            device_id
    ):
        """
        获取Token
        精灵的通用的的accessToken换取的服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41839

        :param device_id: 可以是sn,mac等表示设备的表示
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.tvs.token.get",
            {
                "device_id": device_id
            }
        )

    def alibaba_ailabs_tvs_genietoken_get(
            self,
            dsn
    ):
        """
        获取TVS授权所需token接口
        获取调用TVS服务时所需授权token的接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42576

        :param dsn: 厂商给予设备的唯一标识 (device serial number)
        """
        return self._top_request(
            "alibaba.ailabs.tvs.genietoken.get",
            {
                "dsn": dsn
            }
        )

    def alibaba_ailabs_tvs_device_get(
            self,
            dsn
    ):
        """
        查询TVS设备详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42669

        :param dsn: 厂商给予设备的唯一标识 (device serial number)
        """
        return self._top_request(
            "alibaba.ailabs.tvs.device.get",
            {
                "dsn": dsn
            }
        )

    def alibaba_ailabs_tvs_device_list(
            self
    ):
        """
        获取TVS设备列表
        获取用户所绑定的TVS设备列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42670

        """
        return self._top_request(
            "alibaba.ailabs.tvs.device.list"
        )

    def alibaba_ailabs_tvs_device_unregister(
            self,
            dsn=''
    ):
        """
        TVS设备解绑接口
        解绑TVS设备，使设备处于可重新绑定状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42677

        :param dsn: 设备唯一标识
        """
        return self._top_request(
            "alibaba.ailabs.tvs.device.unregister",
            {
                "dsn": dsn
            }
        )

    def alibaba_ailabs_iot_device_list_update_notify(
            self,
            token='',
            skill_id=''
    ):
        """
        设备列表更新通知
        用于人工智能实验室IoT合作厂商上报三方接入IoT设备列表更新时的通知
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42961

        :param token: 用户OAuth授权后的token
        :param skill_id: 厂商在天猫精灵开放平台申请的技能id
        """
        return self._top_request(
            "alibaba.ailabs.iot.device.list.update.notify",
            {
                "token": token,
                "skill_id": skill_id
            }
        )

    def alibaba_ailab_user_authorized_query(
            self,
            schema_key='',
            merchant_user_id=''
    ):
        """
        查询授权状态接口
        查询三方用户授权状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42962

        :param schema_key: 开放平台申请的schema
        :param merchant_user_id: 三方用户的唯一ID
        """
        return self._top_request(
            "alibaba.ailab.user.authorized.query",
            {
                "schema_key": schema_key,
                "merchant_user_id": merchant_user_id
            }
        )

    def alibaba_ailab_user_authorized_cancel(
            self,
            merchant_user_id='',
            schema_key=''
    ):
        """
        取消账号授权
        三方用户取消授权给天猫精灵用户
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42965

        :param merchant_user_id: 三方用户的唯一ID
        :param schema_key: 开放平台申请的schema
        """
        return self._top_request(
            "alibaba.ailab.user.authorized.cancel",
            {
                "merchant_user_id": merchant_user_id,
                "schema_key": schema_key
            }
        )

    def taobao_ailab_aicloud_top_hotwords_get(
            self,
            user_id,
            biz_class,
            schema
    ):
        """
        获取热词
        获取ASR热词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44648

        :param user_id: 三方用户id
        :param biz_class: 业务类型
        :param schema: schemeKey
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.hotwords.get",
            {
                "user_id": user_id,
                "biz_class": biz_class,
                "schema": schema
            },
            result_processor=lambda x: x["baseresult"]
        )

    def taobao_ailab_aicloud_top_hotwords_update(
            self,
            schema='',
            user_id='',
            biz_class='',
            op_type='',
            content=None
    ):
        """
        更新热词
        更新ASR热词
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44649

        :param schema: schemaKey
        :param user_id: 三方用户id
        :param biz_class: 业务类型
        :param op_type: 操作类型
        :param content: 热词内容
        """
        return self._top_request(
            "taobao.ailab.aicloud.top.hotwords.update",
            {
                "schema": schema,
                "user_id": user_id,
                "biz_class": biz_class,
                "op_type": op_type,
                "content": content
            },
            result_processor=lambda x: x["baseresult"]
        )


class TbChengShiHeHuoRen(DingTalkBaseAPI):
    """
    城市合伙人API
    """

    def tmall_cityenergy_gaincode_get(
            self,
            start_index,
            batch_number,
            end_index,
            ext_infos=''
    ):
        """
        知而行能力值领取码拉取服务
        知而行拉取能量发放码。此发放码用于线上领取能量码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40397

        :param start_index: limit 开始索引
        :param batch_number: limit 结束索引。每次获取的数量最好小于200.且可动态配置
        :param end_index: 获取的批次号
        :param ext_infos: 传输一些设备信息
        """
        return self._top_request(
            "tmall.cityenergy.gaincode.get",
            {
                "start_index": start_index,
                "batch_number": batch_number,
                "end_index": end_index,
                "ext_infos": ext_infos
            }
        )


class TbALiJianKangZhiHuiYiLiao(DingTalkBaseAPI):
    """
    阿里健康-智慧医疗
    """

    def alibaba_alihealth_his_struct(
            self,
            param0
    ):
        """
        结构化
        结构化服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41635

        :param param0: 输入
        """
        return self._top_request(
            "alibaba.alihealth.his.struct",
            {
                "param0": param0
            }
        )


class TbTianMaoXinPinChuangXinZhongXin(DingTalkBaseAPI):
    """
    天猫新品创新中心API
    """

    def tmall_tmic_questionnaire_answer_submit(
            self,
            record_id,
            hash_code,
            version,
            user_answer_list=None,
            biz='',
            open_user_id=''
    ):
        """
        提交问卷答案
        天猫新品创新中心对外开放问卷，提交问卷答案
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40745

        :param record_id: 问卷填答id，从问卷信息接口的应答中获取
        :param hash_code: 问卷唯一编码，从问卷信息接口应答中获取
        :param version: 问卷版本号，从问卷信息接口的应答中获取
        :param user_answer_list: 用户填写的回答，类型为数组
        :param biz: 业务参数，区分问卷分组投放，1024表示分组投放id，fav表示用户动作类型为收藏
        :param open_user_id: openId
        """
        return self._top_request(
            "tmall.tmic.questionnaire.answer.submit",
            {
                "record_id": record_id,
                "hash_code": hash_code,
                "version": version,
                "user_answer_list": user_answer_list,
                "biz": biz,
                "open_user_id": open_user_id
            }
        )

    def tmall_tmic_questionnaire_survey_get(
            self,
            hash_code,
            biz='',
            open_user_id=''
    ):
        """
        天猫新品创新中心问卷数据获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40746

        :param hash_code: 问卷hashCode，问卷对外唯一编码
        :param biz: biz业务参数，1024表示投放id，下划线分隔，fav表示收藏行为的英文
        :param open_user_id: open_id
        """
        return self._top_request(
            "tmall.tmic.questionnaire.survey.get",
            {
                "hash_code": hash_code,
                "biz": biz,
                "open_user_id": open_user_id
            }
        )

    def tmall_tmic_questionnaire_option_get(
            self,
            hash_code,
            version,
            record_id,
            question_code,
            biz='',
            extra_parameters='',
            open_user_id=''
    ):
        """
        获取单题选项
        根据具体题号，获取当前题目的选项列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43120

        :param hash_code: 问卷唯一编码，从问卷信息接口应答中获取
        :param version: 问卷版本号，从问卷信息接口的应答中获取
        :param record_id: 问卷填答id，从问卷信息接口的应答中获取
        :param question_code: 问题编码，问卷中的问题的唯一编码，从问卷信息接口的应答中获取
        :param biz: 业务参数，区分问卷分组投放，1024表示分组投放id，fav表示用户动作类型为收藏
        :param extra_parameters: 业务扩展参数
        :param open_user_id: openId
        """
        return self._top_request(
            "tmall.tmic.questionnaire.option.get",
            {
                "hash_code": hash_code,
                "version": version,
                "record_id": record_id,
                "question_code": question_code,
                "biz": biz,
                "extra_parameters": extra_parameters,
                "open_user_id": open_user_id
            }
        )

    def tmall_tmic_questionnaire_answer_push(
            self,
            record_id,
            hash_code,
            biz='',
            version='',
            user_answer_list=None,
            open_user_id=''
    ):
        """
        提交单题答案
        问卷单题回答的提交
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43329

        :param record_id: 问卷填答id，从问卷信息接口的应答中获取
        :param hash_code: 问卷唯一编码，从问卷信息接口应答中获取
        :param biz: 业务参数，区分问卷分组投放，1024表示分组投放id，fav表示用户动作类型为收藏
        :param version: 问卷版本号，从问卷信息接口的应答中获取
        :param user_answer_list: 用户填写的回答，类型为数组
        :param open_user_id: 开发平台userId
        """
        return self._top_request(
            "tmall.tmic.questionnaire.answer.push",
            {
                "record_id": record_id,
                "hash_code": hash_code,
                "biz": biz,
                "version": version,
                "user_answer_list": user_answer_list,
                "open_user_id": open_user_id
            }
        )


class TbMOZIZhangHao(DingTalkBaseAPI):
    """
    MOZI账号API
    """

    def alibaba_mozi_fusion_addorupdate_employee_account(
            self,
            employee_account=None
    ):
        """
        添加人员和账号复合接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40880

        :param employee_account: 人员账号
        """
        return self._top_request(
            "alibaba.mozi.fusion.addorupdate.employee.account",
            {
                "employee_account": employee_account
            }
        )

    def alibaba_mozi_fusion_create_employee_account(
            self,
            employee_account=None
    ):
        """
        创建MOZI自建人员和账号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41855

        :param employee_account: 入参
        """
        return self._top_request(
            "alibaba.mozi.fusion.create.employee.account",
            {
                "employee_account": employee_account
            }
        )

    def alibaba_mozi_fusion_dimission_employee_account(
            self,
            dimission_employee=None
    ):
        """
        人员离职
        人员离职并且回收账号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41856

        :param dimission_employee: 入参
        """
        return self._top_request(
            "alibaba.mozi.fusion.dimission.employee.account",
            {
                "dimission.employee": dimission_employee
            }
        )

    def alibaba_mozi_fusion_reentry_employee_account(
            self,
            reentry_employee_account=None
    ):
        """
        重新入职并且重新启用账号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41858

        :param reentry_employee_account: 入参
        """
        return self._top_request(
            "alibaba.mozi.fusion.reentry.employee.account",
            {
                "reentry.employee.account": reentry_employee_account
            }
        )


class TbQinChengLiWestcrm(DingTalkBaseAPI):
    """
    亲橙里westcrmAPI
    """

    def alibaba_westcrm_member_score_get(
            self,
            request_id='',
            alipay_id='',
            start_time='',
            end_time=''
    ):
        """
        获取会员某时间段积分
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41154

        :param request_id: requestId
        :param alipay_id: 支付宝id
        :param start_time: 开始时间
        :param end_time: 结束时间
        """
        return self._top_request(
            "alibaba.westcrm.member.score.get",
            {
                "request_id": request_id,
                "alipay_id": alipay_id,
                "start_time": start_time,
                "end_time": end_time
            }
        )

    def alibaba_westcrm_user_statistic_authority(
            self,
            campus_id='',
            ib_user_id=''
    ):
        """
        获取指定用户是否含有会员权益统计权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41158

        :param campus_id: 园区id
        :param ib_user_id: 用户id
        """
        return self._top_request(
            "alibaba.westcrm.user.statistic.authority",
            {
                "campus_id": campus_id,
                "ib_user_id": ib_user_id
            }
        )

    def alibaba_westcrm_shop_list_get(
            self,
            campus_id
    ):
        """
        获取商圈商户信息列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41193

        :param campus_id: 园区id
        """
        return self._top_request(
            "alibaba.westcrm.shop.list.get",
            {
                "campus_id": campus_id
            }
        )

    def alibaba_westcrm_activity_list_get(
            self,
            status='',
            campus_id='',
            sord='',
            page='',
            sidx='',
            offset='',
            rows=''
    ):
        """
        获取活动列表接口
        获取活动列表提供给友盟&互动屏
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41194

        :param status: 活动状态
        :param campus_id: 园区id
        :param sord: 排序方向
        :param page: 页,默认第一页
        :param sidx: 排序字段
        :param offset: 分页偏移量 eq . limit offset ,rows
        :param rows: 页大小,默认每页查询10条数据
        """
        return self._top_request(
            "alibaba.westcrm.activity.list.get",
            {
                "status": status,
                "campus_id": campus_id,
                "sord": sord,
                "page": page,
                "sidx": sidx,
                "offset": offset,
                "rows": rows
            }
        )

    def alibaba_westcrm_member_message_handle(
            self,
            message_type='',
            message_content=''
    ):
        """
        处理Usc会员消息接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41195

        :param message_type: 消息类型
        :param message_content: 消息内容
        """
        return self._top_request(
            "alibaba.westcrm.member.message.handle",
            {
                "message_type": message_type,
                "message_content": message_content
            }
        )

    def alibaba_westcrm_activity_info_get(
            self,
            campus_id='',
            activity_id=''
    ):
        """
        获取活动详情
        根据id查询活动详情
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41199

        :param campus_id: 园区id
        :param activity_id: 活动id
        """
        return self._top_request(
            "alibaba.westcrm.activity.info.get",
            {
                "campus_id": campus_id,
                "activity_id": activity_id
            }
        )

    def alibaba_westcrm_user_consumer_get(
            self,
            campus_id,
            ib_user_id,
            time_begin,
            time_end
    ):
        """
        获取指定用户的消费总额
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41200

        :param campus_id: 园区id
        :param ib_user_id: 用户id
        :param time_begin: 开始时间
        :param time_end: 结束时间
        """
        return self._top_request(
            "alibaba.westcrm.user.consumer.get",
            {
                "campus_id": campus_id,
                "ib_user_id": ib_user_id,
                "time_begin": time_begin,
                "time_end": time_end
            }
        )

    def alibaba_westcrm_account_id_get(
            self,
            alipay_id
    ):
        """
        根据支付宝id查询IB的id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41201

        :param alipay_id: 支付宝id
        """
        return self._top_request(
            "alibaba.westcrm.account.id.get",
            {
                "alipay_id": alipay_id
            }
        )

    def alibaba_westcrm_mall_list_get(
            self,
            campus_id=''
    ):
        """
        获取商场列表
        根据园区id获取商场列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41202

        :param campus_id: 园区id
        """
        return self._top_request(
            "alibaba.westcrm.mall.list.get",
            {
                "campus_id": campus_id
            }
        )

    def alibaba_westcrm_job_status_update(
            self,
            status,
            campus_id,
            crm_complaint_id,
            reply_content=''
    ):
        """
        更新工单状态
        更新工单处理状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41203

        :param status: 状态
        :param campus_id: 园区id
        :param crm_complaint_id: 反馈id
        :param reply_content: 回复内容
        """
        return self._top_request(
            "alibaba.westcrm.job.status.update",
            {
                "status": status,
                "campus_id": campus_id,
                "crm_complaint_id": crm_complaint_id,
                "reply_content": reply_content
            }
        )

    def alibaba_westcrm_grade_get(
            self,
            campus_id=''
    ):
        """
        获取等级列表
        获取会员卡等级列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41204

        :param campus_id: 园区id
        """
        return self._top_request(
            "alibaba.westcrm.grade.get",
            {
                "campus_id": campus_id
            }
        )

    def alibaba_westcrm_user_benefit_authority(
            self,
            campus_id='',
            ib_user_id=''
    ):
        """
        获取指定用户是否含有会员权益配置菜单权限
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41205

        :param campus_id: 园区ID
        :param ib_user_id: 当前用户id
        """
        return self._top_request(
            "alibaba.westcrm.user.benefit.authority",
            {
                "campus_id": campus_id,
                "ib_user_id": ib_user_id
            }
        )

    def alibaba_westcrm_customer_info_get(
            self,
            campus_id,
            ib_user_id,
            alipay_id=''
    ):
        """
        会员信息查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41221

        :param campus_id: 园区id
        :param ib_user_id: 会员id
        :param alipay_id: 支付宝id
        """
        return self._top_request(
            "alibaba.westcrm.customer.info.get",
            {
                "campus_id": campus_id,
                "ib_user_id": ib_user_id,
                "alipay_id": alipay_id
            }
        )

    def alibaba_westcrm_is_member_get(
            self
    ):
        """
        查询是否是亲橙里会员
        根据淘宝Id查询是否是亲橙里会员
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41361

        """
        return self._top_request(
            "alibaba.westcrm.is.member.get",
            result_processor=lambda x: x["is_have_member"]
        )

    def alibaba_ibizapi_brand_subscribe(
            self
    ):
        """
        关注品牌号
        关注品牌号服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41384

        """
        return self._top_request(
            "alibaba.ibizapi.brand.subscribe"
        )

    def alibaba_westcrm_update_alipay_carno(
            self,
            mall_id='',
            id='',
            alipay_card_no='',
            westcrm_app_key=''
    ):
        """
        更新支付宝业务卡号
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41568

        :param mall_id: 商场id
        :param id: 用户id
        :param alipay_card_no: 2088102011918821
        :param westcrm_app_key: appkey
        """
        return self._top_request(
            "alibaba.westcrm.update.alipay.carno",
            {
                "mall_id": mall_id,
                "id": id,
                "alipay_card_no": alipay_card_no,
                "westcrm_app_key": westcrm_app_key
            }
        )


class TbICBUChuChuang(DingTalkBaseAPI):
    """
    ICBU-橱窗
    """

    def alibaba_scbp_showcase_status(
            self
    ):
        """
        橱窗状态
        查询橱窗状态，如总数、可用数量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40936

        """
        return self._top_request(
            "alibaba.scbp.showcase.status"
        )

    def alibaba_scbp_showcase_list(
            self,
            per_page_size='50',
            to_page='1'
    ):
        """
        橱窗查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40938

        :param per_page_size: 每页展示个数
        :param to_page: 页码
        """
        return self._top_request(
            "alibaba.scbp.showcase.list",
            {
                "per_page_size": per_page_size,
                "to_page": to_page
            },
            result_processor=lambda x: x["results"]
        )

    def alibaba_scbp_showcase_deleteproduct(
            self,
            window_id_list
    ):
        """
        批量删除橱窗商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40963

        :param window_id_list: 橱窗idList
        """
        return self._top_request(
            "alibaba.scbp.showcase.deleteproduct",
            {
                "window_id_list": window_id_list
            }
        )

    def alibaba_scbp_showcase_addproduct(
            self,
            product_id_list
    ):
        """
        批量添加橱窗商品
        批量添加商品到橱窗
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40964

        :param product_id_list: 需要添加的产品ids
        """
        return self._top_request(
            "alibaba.scbp.showcase.addproduct",
            {
                "product_id_list": product_id_list
            }
        )

    def alibaba_scbp_showcase_sort(
            self,
            window_id,
            source_order,
            target_order
    ):
        """
        橱窗顺序变更
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40996

        :param window_id: 要移动的橱窗id
        :param source_order: 当前位置（从1开始）
        :param target_order: 目标位置（从1开始）
        """
        return self._top_request(
            "alibaba.scbp.showcase.sort",
            {
                "window_id": window_id,
                "source_order": source_order,
                "target_order": target_order
            }
        )

    def alibaba_scbp_showcase_updateproduct(
            self,
            window_id,
            new_product_id
    ):
        """
        替换橱窗商品
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=40997

        :param window_id: 橱窗id
        :param new_product_id: 新的商品id
        """
        return self._top_request(
            "alibaba.scbp.showcase.updateproduct",
            {
                "window_id": window_id,
                "new_product_id": new_product_id
            }
        )


class TbHOMEAI(DingTalkBaseAPI):
    """
    HOMEAI
    """

    def taobao_homeai_alg_predict(
            self,
            from_case,
            to_case
    ):
        """
        硬装预测接口
        居然之家硬装预测服务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41831

        :param from_case: 来源房间json
        :param to_case: 我的家房间json
        """
        return self._top_request(
            "taobao.homeai.alg.predict",
            {
                "from_case": from_case,
                "to_case": to_case
            }
        )


class TbZiZhiGongXiang(DingTalkBaseAPI):
    """
    资质共享API
    """

    def taobao_fivee_importproduct_get(
            self,
            param_bu_code,
            param_barcode
    ):
        """
        进口商品查询
        资质共享平台查询进口商品信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42257

        :param param_bu_code: bu身份标识
        :param param_barcode: 条形码
        """
        return self._top_request(
            "taobao.fivee.importproduct.get",
            {
                "param_bu_code": param_bu_code,
                "param_barcode": param_barcode
            }
        )

    def taobao_fivee_company_upload(
            self,
            param_bucode,
            param_company
    ):
        """
        上传商信息接口
        资质共享平台上传资质证照
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42258

        :param param_bucode: bu身份标识
        :param param_company: 商家证照信息
        """
        return self._top_request(
            "taobao.fivee.company.upload",
            {
                "param_bucode": param_bucode,
                "param_company": param_company
            }
        )

    def taobao_fivee_importproduct_publish(
            self,
            import_product,
            param_bucode
    ):
        """
        进口商品发布
        直营业务商家入住发布商品时，上传商品及商家证照信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42259

        :param import_product: 进口商品
        :param param_bucode: bu身份标识
        """
        return self._top_request(
            "taobao.fivee.importproduct.publish",
            {
                "import_product": import_product,
                "param_bucode": param_bucode
            }
        )

    def taobao_fivee_innerproduct_publish(
            self,
            param_bucode,
            param_inner_product
    ):
        """
        国产商品发布
        资质共享平台国产商品发布
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42260

        :param param_bucode: bu身份标识
        :param param_inner_product: 国产商品
        """
        return self._top_request(
            "taobao.fivee.innerproduct.publish",
            {
                "param_bucode": param_bucode,
                "param_inner_product": param_inner_product
            }
        )

    def taobao_fivee_innerproduct_get(
            self,
            param_bucode,
            param_barcode
    ):
        """
        国产商品资质查询
        资质共享平台，国产商品查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42261

        :param param_bucode: bu身份标识
        :param param_barcode: 条形码
        """
        return self._top_request(
            "taobao.fivee.innerproduct.get",
            {
                "param_bucode": param_bucode,
                "param_barcode": param_barcode
            }
        )

    def taobao_fivee_company_get(
            self,
            param_bucode,
            param_unique_code
    ):
        """
        查询商信息
        资质共享平台查询商信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42262

        :param param_bucode: bu身份标识
        :param param_unique_code: 统一社会信息用代码
        """
        return self._top_request(
            "taobao.fivee.company.get",
            {
                "param_bucode": param_bucode,
                "param_unique_code": param_unique_code
            }
        )


class TbYeWuPingTaiShiYeBuShuiWuPingTai(DingTalkBaseAPI):
    """
    业务平台事业部-税务平台API
    """

    def alibaba_tax_invoice_sync(
            self,
            param_json
    ):
        """
        第三方开票回调API
        为第三方提供开票回调接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41740

        :param param_json: 回调发票信息，请求参数详情见链接：https://yuque.antfin-inc.com/tax/biw99l/uestb7
        """
        return self._top_request(
            "alibaba.tax.invoice.sync",
            {
                "param_json": param_json
            },
            result_processor=lambda x: x["value_list"]
        )


class TbLingShouTongGongGong(DingTalkBaseAPI):
    """
    零售通_公共
    """

    def alibaba_lst_trade_order_get(
            self,
            main_order_id,
            sub_order_id
    ):
        """
        零售通交易订单查询
        根据订单id查询零售通交易订单
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42526

        :param main_order_id: 主订单id
        :param sub_order_id: 子订单id
        """
        return self._top_request(
            "alibaba.lst.trade.order.get",
            {
                "main_order_id": main_order_id,
                "sub_order_id": sub_order_id
            }
        )

    def alibaba_lst_trade_order_querychange(
            self,
            query
    ):
        """
        订单id批量查询
        根据品牌和时间段查询有变更记录的订单id
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43297

        :param query: 入参包装类
        """
        return self._top_request(
            "alibaba.lst.trade.order.querychange",
            {
                "query": query
            }
        )

    def alibaba_lst_trade_refund_order_get(
            self,
            refund_id='',
            main_order_id=''
    ):
        """
        零售通退款订单查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43549

        :param refund_id: 退款单id
        :param main_order_id: 主订单id
        """
        return self._top_request(
            "alibaba.lst.trade.refund.order.get",
            {
                "refund_id": refund_id,
                "main_order_id": main_order_id
            }
        )

    def alibaba_lst_bm_store_add(
            self,
            open_store_dto
    ):
        """
        导入品牌商自有门店
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43687

        :param open_store_dto: 门店数据模型
        """
        return self._top_request(
            "alibaba.lst.bm.store.add",
            {
                "open_store_dto": open_store_dto
            }
        )

    def alibaba_lst_bm_store_update(
            self,
            open_store_dto
    ):
        """
        修改品牌商自有门店数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43688

        :param open_store_dto: 门店数据模型
        """
        return self._top_request(
            "alibaba.lst.bm.store.update",
            {
                "open_store_dto": open_store_dto
            }
        )

    def alibaba_lst_bm_store_emp_save(
            self,
            store_id='',
            bm_emp_id=''
    ):
        """
        保存品牌商自有门店和内部业代之间的关系
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43689

        :param store_id: 门店id标识
        :param bm_emp_id: 员工id标识
        """
        return self._top_request(
            "alibaba.lst.bm.store.emp.save",
            {
                "store_id": store_id,
                "bm_emp_id": bm_emp_id
            }
        )

    def alibaba_lst_trade_fastrefund_goodsstatus_sync(
            self,
            main_order_id='',
            refund_id='',
            status=''
    ):
        """
        卖家退款单商品状态同步
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43690

        :param main_order_id: 主订单id
        :param refund_id: 退款单id
        :param status: 已发货/未发货，枚举类型：SEND or UNSEND
        """
        return self._top_request(
            "alibaba.lst.trade.fastrefund.goodsstatus.sync",
            {
                "main_order_id": main_order_id,
                "refund_id": refund_id,
                "status": status
            }
        )

    def alibaba_lst_marketing_querybyorderid(
            self,
            main_order_id='',
            sub_order_id=''
    ):
        """
        根据订单查询营销信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44185

        :param main_order_id: 主订单
        :param sub_order_id: 子订单
        """
        return self._top_request(
            "alibaba.lst.marketing.querybyorderid",
            {
                "main_order_id": main_order_id,
                "sub_order_id": sub_order_id
            }
        )


class TbHuDongXiaoYouXi(DingTalkBaseAPI):
    """
    互动小游戏API
    """

    def taobao_wegame_meleebattle_meleefight(
            self,
            users,
            game_id
    ):
        """
        创建多人游戏战场信息
        供ISV创建单局多人战场信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42437

        :param users: 用户信息
        :param game_id: 游戏ID
        """
        return self._top_request(
            "taobao.wegame.meleebattle.meleefight",
            {
                "users": users,
                "game_id": game_id
            },
            result_processor=lambda x: x["value"]
        )

    def taobao_wegame_goods_getstatus(
            self,
            game_id,
            open_id,
            goods_settlement_id
    ):
        """
        获取游戏内道具商品结算状态
        获取游戏内道具商品状态(未发货,正在发货,发货完成,退还)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42480

        :param game_id: 游戏ID
        :param open_id: 角色ID
        :param goods_settlement_id: 商品结算ID
        """
        return self._top_request(
            "taobao.wegame.goods.getstatus",
            {
                "game_id": game_id,
                "open_id": open_id,
                "goods_settlement_id": goods_settlement_id
            },
            result_processor=lambda x: x["value"]
        )

    def taobao_wegame_user_props_count(
            self,
            open_id,
            game_id,
            user_props_type,
            relate_biz_id
    ):
        """
        获取用户游戏道具数量
        获取用户游戏内所拥有的道具数量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42481

        :param open_id: 角色ID
        :param game_id: 游戏ID
        :param user_props_type: 商品类型
        :param relate_biz_id: 业务ID
        """
        return self._top_request(
            "taobao.wegame.user.props.count",
            {
                "open_id": open_id,
                "game_id": game_id,
                "user_props_type": user_props_type,
                "relate_biz_id": relate_biz_id
            }
        )

    def taobao_wegame_user_props_consume(
            self,
            open_id,
            game_id,
            user_props_type,
            relate_biz_id,
            count,
            change_reason
    ):
        """
        消耗用户游戏内道具
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42482

        :param open_id: 角色ID
        :param game_id: 游戏ID
        :param user_props_type: 道具类型
        :param relate_biz_id: 业务ID
        :param count: 数量
        :param change_reason: 备注
        """
        return self._top_request(
            "taobao.wegame.user.props.consume",
            {
                "open_id": open_id,
                "game_id": game_id,
                "user_props_type": user_props_type,
                "relate_biz_id": relate_biz_id,
                "count": count,
                "change_reason": change_reason
            },
            result_processor=lambda x: x["value"]
        )

    def taobao_wegame_custombattle_reportresult(
            self,
            battle_id,
            group_result=None,
            score_result=None
    ):
        """
        自定义游戏结果上报
        自定义游戏单局游戏结果上报
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42483

        :param battle_id: 战场ID
        :param group_result: 分组游戏结果
        :param score_result: 游戏分数结果
        """
        return self._top_request(
            "taobao.wegame.custombattle.reportresult",
            {
                "battle_id": battle_id,
                "group_result": group_result,
                "score_result": score_result
            },
            result_processor=lambda x: x["value"]
        )

    def taobao_wegame_battle_getbattle(
            self,
            open_id,
            battle_id
    ):
        """
        获取战场信息
        获取战场信息（战场数据、对战双方角色信息、战场配置信息）
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42537

        :param open_id: 角色ID
        :param battle_id: 战场ID
        """
        return self._top_request(
            "taobao.wegame.battle.getbattle",
            {
                "open_id": open_id,
                "battle_id": battle_id
            },
            result_processor=lambda x: x["value"]
        )

    def taobao_wegame_battle_reportresult(
            self,
            battle_id,
            group_result=None,
            score_result=None
    ):
        """
        小游戏对战结果上报
        小游戏对战结果与游戏类型上报
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42538

        :param battle_id: 战场ID
        :param group_result: 分组战果列表
        :param score_result: 玩家成绩列表
        """
        return self._top_request(
            "taobao.wegame.battle.reportresult",
            {
                "battle_id": battle_id,
                "group_result": group_result,
                "score_result": score_result
            },
            result_processor=lambda x: x["value"]
        )

    def taobao_wegame_dailyscene_playsuccess_get(
            self,
            open_id,
            scene_code
    ):
        """
        查询用户游戏内当日通关数量
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42539

        :param open_id: 角色ID
        :param scene_code: 关卡ID
        """
        return self._top_request(
            "taobao.wegame.dailyscene.playsuccess.get",
            {
                "open_id": open_id,
                "scene_code": scene_code
            },
            result_processor=lambda x: x["value"]
        )

    def taobao_wegame_scene_getendinfo(
            self,
            open_id,
            scene_code,
            battle_id,
            battle_result
    ):
        """
        查询当场游戏所能获得奖励类型
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42921

        :param open_id: 角色ID
        :param scene_code: 场景ID
        :param battle_id: 战场ID
        :param battle_result: 游戏战果
        """
        return self._top_request(
            "taobao.wegame.scene.getendinfo",
            {
                "open_id": open_id,
                "scene_code": scene_code,
                "battle_id": battle_id,
                "battle_result": battle_result
            },
            result_processor=lambda x: x["award_type"]
        )

    def taobao_wegame_user_skin_list(
            self,
            skin_group_id
    ):
        """
        获取游戏皮肤列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42925

        :param skin_group_id: 皮肤组ID
        """
        return self._top_request(
            "taobao.wegame.user.skin.list",
            {
                "skin_group_id": skin_group_id
            },
            result_processor=lambda x: x["list"]
        )


class TbALiJianKangYi(DingTalkBaseAPI):
    """
    阿里健康医
    """

    def alibaba_alihealth_prescription_auth_get(
            self,
            prescription_request
    ):
        """
        阿里健康处方平台获取授权码
        获取处方用户授权
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42645

        :param prescription_request: 请求入参
        """
        return self._top_request(
            "alibaba.alihealth.prescription.auth.get",
            {
                "prescription_request": prescription_request
            },
            result_processor=lambda x: x["service_result"]
        )


class TbSiFaKaiFangPingTai(DingTalkBaseAPI):
    """
    司法开放平台
    """

    def alibaba_legal_suit_case_investigation_get(
            self,
            case_id=''
    ):
        """
        委托案件事实查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43035

        :param case_id: 案件ID
        """
        return self._top_request(
            "alibaba.legal.suit.case.investigation.get",
            {
                "case_id": case_id
            }
        )

    def alibaba_legal_suit_case_get(
            self,
            id=''
    ):
        """
        获取案件信息接口v2版本
        获取案件信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43036

        :param id: 案件id
        """
        return self._top_request(
            "alibaba.legal.suit.case.get",
            {
                "id": id
            }
        )

    def alibaba_legal_suit_court_lawyer_push(
            self,
            entrust_id='',
            suit_id='',
            lawyers_model=None
    ):
        """
        推荐律师接口
        为诉讼系统推荐律师
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43037

        :param entrust_id: 委托ID
        :param suit_id: 案件ID
        :param lawyers_model: 推荐律师模型
        """
        return self._top_request(
            "alibaba.legal.suit.court.lawyer.push",
            {
                "entrust_id": entrust_id,
                "suit_id": suit_id,
                "lawyers_model": lawyers_model
            }
        )

    def alibaba_legal_suit_court_before_push(
            self,
            before_court_model=None
    ):
        """
        更新或保存庭前信息
        更新或者保存庭前信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43040

        :param before_court_model: 庭前信息
        """
        return self._top_request(
            "alibaba.legal.suit.court.before.push",
            {
                "before_court_model": before_court_model
            }
        )

    def alibaba_legal_suit_court_entrust_get(
            self,
            entrust_id='',
            suit_id=''
    ):
        """
        委托开庭服务查询
        查询委托开庭信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43041

        :param entrust_id: 委托ID
        :param suit_id: 案件ID
        """
        return self._top_request(
            "alibaba.legal.suit.court.entrust.get",
            {
                "entrust_id": entrust_id,
                "suit_id": suit_id
            }
        )

    def alibaba_legal_suit_court_after_push(
            self,
            after_court_info_model=None
    ):
        """
        更新或者新增庭后信息
        供外部ISV供应商 推送庭后信息给集团诉讼
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43434

        :param after_court_info_model: 庭后信息
        """
        return self._top_request(
            "alibaba.legal.suit.court.after.push",
            {
                "after_court_info_model": after_court_info_model
            }
        )

    def alibaba_legal_suit_judgement_get(
            self,
            suit_id
    ):
        """
        获取裁判登记信息
        供ISV供应商获取集团法务系统的裁判登记信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43435

        :param suit_id: 案件id
        """
        return self._top_request(
            "alibaba.legal.suit.judgement.get",
            {
                "suit_id": suit_id
            }
        )

    def alibaba_legal_suit_judgement_push(
            self,
            referee_registration_model=None
    ):
        """
        推送裁判登记信息给集团法务系统
        isv推送裁判登记信息给集团法务系统
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43436

        :param referee_registration_model: 裁判登记信息
        """
        return self._top_request(
            "alibaba.legal.suit.judgement.push",
            {
                "referee_registration_model": referee_registration_model
            }
        )

    def alibaba_legal_suit_court_open_push(
            self,
            court_info_model=None
    ):
        """
        开庭信息推送接口
        供ISV推送开庭信息给集团诉讼
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43437

        :param court_info_model: 开庭信息
        """
        return self._top_request(
            "alibaba.legal.suit.court.open.push",
            {
                "court_info_model": court_info_model
            }
        )


class TbICBUShangPin(DingTalkBaseAPI):
    """
    ICBU－商品
    """

    def alibaba_icbu_product_batch_update_display(
            self,
            new_display,
            product_id_list
    ):
        """
        商品批量上下架接口
        给国际站的三方服务商提供批量上下架接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44413

        :param new_display: on表示上架，off表示下架
        :param product_id_list: 混淆id数组
        """
        return self._top_request(
            "alibaba.icbu.product.batch.update.display",
            {
                "new_display": new_display,
                "product_id_list": product_id_list
            }
        )


class TbShouTaoYongHuZengZhang(DingTalkBaseAPI):
    """
    手淘用户增长
    """

    def taobao_usergrowth_delivery_batchask(
            self,
            channel,
            adid,
            idfa_md5='',
            imei_md5=''
    ):
        """
        广告投放批量询问
        提供给媒体在曝光广告前调用， 返回是否曝光以及报价
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43959

        :param channel: 渠道标识，向淘宝技术申请
        :param adid: 广告id，淘宝和媒体协商
        :param idfa_md5: idfa的md5值， 32位小写
        :param imei_md5: imei的md5值， 32位小写
        """
        return self._top_request(
            "taobao.usergrowth.delivery.batchask",
            {
                "channel": channel,
                "adid": adid,
                "idfa_md5": idfa_md5,
                "imei_md5": imei_md5
            },
            result_processor=lambda x: x["results"]
        )


class TbYunMa(DingTalkBaseAPI):
    """
    云码API
    """

    def tmall_mc_device_status_update(
            self,
            status,
            device_code,
            channel
    ):
        """
        云码更新设备状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41656

        :param status: 设备状态。NORMAL,BROKEN
        :param device_code: 平台设备编码
        :param channel: 设备所属渠道
        """
        return self._top_request(
            "tmall.mc.device.status.update",
            {
                "status": status,
                "device_code": device_code,
                "channel": channel
            },
            result_processor=lambda x: x["data"]
        )

    def tmall_mc_record_order_sync(
            self,
            device_code,
            origin_price,
            pay_price,
            open_id,
            result,
            version
    ):
        """
        订单信息同步
        订单信息同步(零售云接口)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=41657

        :param device_code: 设备编码
        :param origin_price: 原价
        :param pay_price: 实付价
        :param open_id: 用户openId
        :param result: 核销结果
        :param version: 云码版本号
        """
        return self._top_request(
            "tmall.mc.record.order.sync",
            {
                "device_code": device_code,
                "origin_price": origin_price,
                "pay_price": pay_price,
                "open_id": open_id,
                "result": result,
                "version": version
            },
            result_processor=lambda x: x["data"]
        )

    def tmall_mc_task_charge_launch(
            self,
            outer_code,
            channel_id,
            alipay_open_id,
            url_id='',
            extra=''
    ):
        """
        云码充电宝投放链路
        云码充电宝投放链路，用于判断用户是否有匹配的投放计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42081

        :param outer_code: 外部设备编码
        :param channel_id: 渠道ID
        :param alipay_open_id: 支付宝openID
        :param url_id: urlID
        :param extra: 服务商附加url参数
        """
        return self._top_request(
            "tmall.mc.task.charge.launch",
            {
                "outer_code": outer_code,
                "channel_id": channel_id,
                "alipay_open_id": alipay_open_id,
                "url_id": url_id,
                "extra": extra
            }
        )

    def tmall_mc_device_circle_check(
            self,
            outer_code,
            channel_id
    ):
        """
        云码设备圈选情况查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42808

        :param outer_code: 外部设备编码
        :param channel_id: 渠道编码
        """
        return self._top_request(
            "tmall.mc.device.circle.check",
            {
                "outer_code": outer_code,
                "channel_id": channel_id
            },
            result_processor=lambda x: x["results"]
        )

    def tmall_retail_device_launch_item_get(
            self,
            device_code
    ):
        """
        设备投放商品信息获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43189

        :param device_code: 设备编码
        """
        return self._top_request(
            "tmall.retail.device.launch.item.get",
            {
                "device_code": device_code
            },
            result_processor=lambda x: x["items"]
        )

    def tmall_stella_cc_device_circle_check(
            self,
            channel_id,
            device_sn
    ):
        """
        云码设备圈选情况查询
        云码设备圈选情况查询，增加投放计划返回
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44315

        :param channel_id: 渠道编码
        :param device_sn: 外部设备编码
        """
        return self._top_request(
            "tmall.stella.cc.device.circle.check",
            {
                "channel_id": channel_id,
                "device_sn": device_sn
            },
            result_processor=lambda x: x["results"]
        )

    def tmall_stella_cc_device_status_update(
            self,
            status,
            channel_id,
            device_sn
    ):
        """
        云码更新设备状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44316

        :param status: 设备状态。NORMAL,BROKEN
        :param channel_id: 渠道id
        :param device_sn: 运营商设备编码
        """
        return self._top_request(
            "tmall.stella.cc.device.status.update",
            {
                "status": status,
                "channel_id": channel_id,
                "device_sn": device_sn
            },
            result_processor=lambda x: x["data"]
        )

    def tmall_stella_cc_task_charge_launch(
            self,
            alipay_open_id,
            channel_id,
            device_sn,
            extra='',
            url_id=''
    ):
        """
        判断用户是否有任务投放
        判断用户是否命中投放任务
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44318

        :param alipay_open_id: 支付宝openID
        :param channel_id: 渠道id
        :param device_sn: 设备编码
        :param extra: 服务商附加url参数
        :param url_id: urlID
        """
        return self._top_request(
            "tmall.stella.cc.task.charge.launch",
            {
                "alipay_open_id": alipay_open_id,
                "channel_id": channel_id,
                "device_sn": device_sn,
                "extra": extra,
                "url_id": url_id
            },
            result_processor=lambda x: x["data"]
        )

    def tmall_stella_cc_record_order_sync(
            self,
            channel_id,
            device_sn,
            version,
            origin_price,
            pay_price,
            open_id,
            result
    ):
        """
        订单信息同步
        接收并同步isv的订单信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=44319

        :param channel_id: 渠道id
        :param device_sn: 运营商设备编码
        :param version: 云码版本号
        :param origin_price: 原价
        :param pay_price: 实付价
        :param open_id: 用户openId
        :param result: 核销结果
        """
        return self._top_request(
            "tmall.stella.cc.record.order.sync",
            {
                "channel_id": channel_id,
                "device_sn": device_sn,
                "version": version,
                "origin_price": origin_price,
                "pay_price": pay_price,
                "open_id": open_id,
                "result": result
            },
            result_processor=lambda x: x["data"]
        )


class TbXinLingShouPOS(DingTalkBaseAPI):
    """
    新零售POS
    """

    def alibaba_mos_commdy_posmerchandise_getmerchandise(
            self,
            pos_merchandise_list=None
    ):
        """
        去前置机商品在线查询
        去前置机商品在线查询接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42773

        :param pos_merchandise_list: 查询参数列表
        """
        return self._top_request(
            "alibaba.mos.commdy.posmerchandise.getmerchandise",
            {
                "pos_merchandise_list": pos_merchandise_list
            }
        )

    def alibaba_mos_commdy_offline_getfileurl(
            self,
            file_keys
    ):
        """
        去前置机pos商品离线文件下载地址查询接口
        去前置机-pos查询离线文件下载地址接口
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42992

        :param file_keys: 离线文件名称
        """
        return self._top_request(
            "alibaba.mos.commdy.offline.getfileurl",
            {
                "file_keys": file_keys
            }
        )


class TbTianMaoUXian(DingTalkBaseAPI):
    """
    天猫U先API
    """

    def tmall_try_scancode_generate(
            self,
            request1
    ):
        """
        二维码生成
        被授权用户调用该接口用于生成便利店派样二维码
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42635

        :param request1: 请求入参
        """
        return self._top_request(
            "tmall.try.scancode.generate",
            {
                "request1": request1
            }
        )

    def tmall_try_eticketcode_writeoff(
            self,
            request1
    ):
        """
        天猫U先线下便利店派样电子凭证核销
        消费者将卡券包中的电子凭证（由天猫U先线下便利店派样业务发放）提供给U先合作的外部运营商云客POS机扫码时，该ISV会调用此接口进行核销，核销成功后便利店店员会将对应样品给到消费者
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=42636

        :param request1: 请求入参
        """
        return self._top_request(
            "tmall.try.eticketcode.writeoff",
            {
                "request1": request1
            }
        )


class TbYouKuBoKongHuanYing(DingTalkBaseAPI):
    """
    优酷播控幻影API
    """

    def youku_mirage_query_permission(
            self,
            permission_request_dto=None
    ):
        """
        优酷播控查询是否可播API
        根据节目ID或者VID查询视频或者节目是否可以播放
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43082

        :param permission_request_dto: 入参
        """
        return self._top_request(
            "youku.mirage.query.permission",
            {
                "permission_request_dto": permission_request_dto
            },
            result_processor=lambda x: x["resp"]
        )


class TbiHome(DingTalkBaseAPI):
    """
    iHome API
    """

    def alibaba_ihome_ctom_case_save(
            self,
            open_id,
            case_id,
            area='',
            project_id='',
            title='',
            image_path='',
            case_content_url='',
            city_name='',
            city_code='',
            province_name='',
            province_code='',
            address='',
            building_name='',
            name='',
            district_code='',
            longitude='',
            house_image_path='',
            district_name='',
            latitude='',
            sub_case_id=''
    ):
        """
        保存ihome方案信息
        用于在门店工作台里的编辑器保存方案，由三维家后端调用阿里后端，保存方案信息
        此接口只允许ihome业务使用，用于门店的编辑功能，只允许广东三维家信息科技有限公司一家公司调用，不适用于其他业务。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43108

        :param open_id: openId
        :param case_id: caseid
        :param area: 区域
        :param project_id: 项目id
        :param title: 标题
        :param image_path: 图片地址
        :param case_content_url: case地址
        :param city_name: 城市名称
        :param city_code: 城市编码
        :param province_name: 省份
        :param province_code: 编码省份
        :param address: 地址
        :param building_name: 绑定楼盘
        :param name: 名字
        :param district_code: 区码
        :param longitude: 坐标
        :param house_image_path: 房型地址
        :param district_name: 区名
        :param latitude: 坐标
        :param sub_case_id: 三维家子方案id
        """
        return self._top_request(
            "alibaba.ihome.ctom.case.save",
            {
                "open_id": open_id,
                "case_id": case_id,
                "area": area,
                "project_id": project_id,
                "title": title,
                "image_path": image_path,
                "case_content_url": case_content_url,
                "city_name": city_name,
                "city_code": city_code,
                "province_name": province_name,
                "province_code": province_code,
                "address": address,
                "building_name": building_name,
                "name": name,
                "district_code": district_code,
                "longitude": longitude,
                "house_image_path": house_image_path,
                "district_name": district_name,
                "latitude": latitude,
                "sub_case_id": sub_case_id
            },
            result_processor=lambda x: x["api_result"]
        )

    def alibaba_ihome_ctom_case_update(
            self,
            case_content_url,
            title,
            case_id,
            building_name='',
            image_path='',
            city_name='',
            province_code='',
            city_code='',
            province_name='',
            project_id='',
            house_image_path='',
            district_name='',
            district_code='',
            area='',
            address='',
            name='',
            longitude='',
            latitude='',
            open_id=''
    ):
        """
        修改ihome方案
        用于在门店工作台里的编辑器保存方案，由三维家后端调用阿里后端，保存方案信息
        此接口只允许ihome业务使用，用于门店的编辑功能，只允许广东三维家信息科技有限公司一家公司调用，不适用于其他业务。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43200

        :param case_content_url: caseurl
        :param title: 标题
        :param case_id: caseid
        :param building_name: 楼盘
        :param image_path: 图片地址
        :param city_name: 城市名
        :param province_code: 省份编码
        :param city_code: 城市编码
        :param province_name: 省份名称
        :param project_id: 项目id
        :param house_image_path: 户型图
        :param district_name: 区名
        :param district_code: 区名
        :param area: 区域
        :param address: 地址
        :param name: 名称
        :param longitude: 坐标
        :param latitude: 坐标
        :param open_id: 开放id
        """
        return self._top_request(
            "alibaba.ihome.ctom.case.update",
            {
                "case_content_url": case_content_url,
                "title": title,
                "case_id": case_id,
                "building_name": building_name,
                "image_path": image_path,
                "city_name": city_name,
                "province_code": province_code,
                "city_code": city_code,
                "province_name": province_name,
                "project_id": project_id,
                "house_image_path": house_image_path,
                "district_name": district_name,
                "district_code": district_code,
                "area": area,
                "address": address,
                "name": name,
                "longitude": longitude,
                "latitude": latitude,
                "open_id": open_id
            },
            result_processor=lambda x: x["api_result"]
        )

    def alibaba_ihome_ctom_case_mainpic_update(
            self,
            case_id,
            pic_url,
            trace_id='',
            pic_type=''
    ):
        """
        方案渲染图修改
        用于在门店工作台里的编辑器保存方案，由三维家后端调用阿里后端，保存方案信息
        此接口只允许ihome业务使用，用于门店的编辑功能，只允许广东三维家信息科技有限公司一家公司调用，不适用于其他业务。
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43219

        :param case_id: 方案id
        :param pic_url: 图片的地址
        :param trace_id: 32位字符串
        :param pic_type: 图片类型
        """
        return self._top_request(
            "alibaba.ihome.ctom.case.mainpic.update",
            {
                "case_id": case_id,
                "pic_url": pic_url,
                "trace_id": trace_id,
                "pic_type": pic_type
            },
            result_processor=lambda x: x["api_result"]
        )


class TbXinXiLiu(DingTalkBaseAPI):
    """
    信息流API
    """

    def taobao_feedflow_item_option_page(
            self,
            label_query
    ):
        """
        分页查询定向标签列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43245

        :param label_query: 标签查询条件
        """
        return self._top_request(
            "taobao.feedflow.item.option.page",
            {
                "label_query": label_query
            }
        )

    def taobao_feedflow_item_target_validlist(
            self,
            campaign_id
    ):
        """
        获取有权限的定向列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43246

        :param campaign_id: 计划id
        """
        return self._top_request(
            "taobao.feedflow.item.target.validlist",
            {
                "campaign_id": campaign_id
            }
        )

    def taobao_feedflow_item_crowd_page(
            self,
            crowd_query
    ):
        """
        分页查询单品单元下人群列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43247

        :param crowd_query: 查询条件
        """
        return self._top_request(
            "taobao.feedflow.item.crowd.page",
            {
                "crowd_query": crowd_query
            }
        )

    def taobao_feedflow_account_get(
            self
    ):
        """
        获取信息流账户详情
        获取账户信息接口。
        (1) BP显示余额 (字段 ：banlance ) = 现金余额(字段：cash_balance) + 赠款余额；
        (2) 可用余额(字段：availableBalance) = BP显示余额
        (3) 红包(字段：redPacket)
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43248

        """
        return self._top_request(
            "taobao.feedflow.account.get"
        )

    def taobao_feedflow_item_crowd_add(
            self,
            crowds,
            adgroup_id
    ):
        """
        单品单元下，新增定向人群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43249

        :param crowds: 人群列表
        :param adgroup_id: 单元id
        """
        return self._top_request(
            "taobao.feedflow.item.crowd.add",
            {
                "crowds": crowds,
                "adgroup_id": adgroup_id
            }
        )

    def taobao_feedflow_item_crowd_modify(
            self,
            crowds,
            adgroup_id
    ):
        """
        覆盖单元下同类型定向人群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43250

        :param crowds: 人群信息
        :param adgroup_id: 单元id
        """
        return self._top_request(
            "taobao.feedflow.item.crowd.modify",
            {
                "crowds": crowds,
                "adgroup_id": adgroup_id
            }
        )

    def taobao_feedflow_item_crowd_delete(
            self,
            crowds,
            adgroup_id
    ):
        """
        删除单品人群
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43251

        :param crowds: 人群结构
        :param adgroup_id: 单元id
        """
        return self._top_request(
            "taobao.feedflow.item.crowd.delete",
            {
                "crowds": crowds,
                "adgroup_id": adgroup_id
            }
        )

    def taobao_feedflow_item_crowd_modifybind(
            self,
            crowds,
            adgroup_id
    ):
        """
        修改人群出价或状态
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43252

        :param crowds: 人群信息
        :param adgroup_id: 单元id
        """
        return self._top_request(
            "taobao.feedflow.item.crowd.modifybind",
            {
                "crowds": crowds,
                "adgroup_id": adgroup_id
            }
        )

    def taobao_feedflow_item_campaign_add(
            self,
            campaign=None
    ):
        """
        信息流增加推广计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43264

        :param campaign: 计划信息
        """
        return self._top_request(
            "taobao.feedflow.item.campaign.add",
            {
                "campaign": campaign
            }
        )

    def taobao_feedflow_item_campaign_daybudget(
            self
    ):
        """
        获取当日投放日预算总额
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43273

        """
        return self._top_request(
            "taobao.feedflow.item.campaign.daybudget"
        )

    def taobao_feedflow_item_campaign_modify(
            self,
            campaign=None
    ):
        """
        信息流修改计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43274

        :param campaign: 修改参数
        """
        return self._top_request(
            "taobao.feedflow.item.campaign.modify",
            {
                "campaign": campaign
            }
        )

    def taobao_feedflow_item_campaign_delete(
            self,
            campaign_id
    ):
        """
        删除计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43275

        :param campaign_id: 计划id
        """
        return self._top_request(
            "taobao.feedflow.item.campaign.delete",
            {
                "campaign_id": campaign_id
            }
        )

    def taobao_feedflow_item_campaign_get(
            self,
            campagin_id
    ):
        """
        通过计划id查询计划
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43276

        :param campagin_id: 计划id
        """
        return self._top_request(
            "taobao.feedflow.item.campaign.get",
            {
                "campagin_id": campagin_id
            }
        )

    def taobao_feedflow_item_campaign_page(
            self,
            campaign_query=None
    ):
        """
        批量查询计划列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43277

        :param campaign_query: 入参
        """
        return self._top_request(
            "taobao.feedflow.item.campaign.page",
            {
                "campaign_query": campaign_query
            }
        )

    def taobao_feedflow_item_adgroup_delete(
            self,
            campaign_id,
            adgroup_id_list
    ):
        """
        根据单元id删除单元
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43278

        :param campaign_id: 计划id
        :param adgroup_id_list: 单元id列表
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.delete",
            {
                "campaign_id": campaign_id,
                "adgroup_id_list": adgroup_id_list
            }
        )

    def taobao_feedflow_item_adgroup_modify(
            self,
            adgroup
    ):
        """
        信息流单元修改
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43279

        :param adgroup: 单元信息
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.modify",
            {
                "adgroup": adgroup
            }
        )

    def taobao_feedflow_item_adgroup_add(
            self,
            adgroup
    ):
        """
        信息流增加单元
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43281

        :param adgroup: 单元信息
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.add",
            {
                "adgroup": adgroup
            }
        )

    def taobao_feedflow_item_adzone_list(
            self,
            adzone_query
    ):
        """
        批量查询可用广告位列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43295

        :param adzone_query: 广告位查询条件
        """
        return self._top_request(
            "taobao.feedflow.item.adzone.list",
            {
                "adzone_query": adzone_query
            }
        )

    def taobao_feedflow_item_adgroup_adzone_bind(
            self,
            bind_adzone_list,
            adgroup_id
    ):
        """
        信息流单元内绑定资源位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43296

        :param bind_adzone_list: 新增的绑定资源位
        :param adgroup_id: 单元id
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.adzone.bind",
            {
                "bind_adzone_list": bind_adzone_list,
                "adgroup_id": adgroup_id
            }
        )

    def taobao_feedflow_item_adgroup_page(
            self,
            adgroup_query=None
    ):
        """
        查询单元列表
        通过计划id查询单元信息
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43323

        :param adgroup_query: 系统自动生成
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.page",
            {
                "adgroup_query": adgroup_query
            }
        )

    def taobao_feedflow_item_adgroup_creative_add_bind(
            self,
            creative_bind_list,
            adgroup_id
    ):
        """
        信息流新增并且绑定创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43332

        :param creative_bind_list: 新增绑定的创意，一次最多2个
        :param adgroup_id: 单元id
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.creative.add.bind",
            {
                "creative_bind_list": creative_bind_list,
                "adgroup_id": adgroup_id
            }
        )

    def taobao_feedflow_item_item_page(
            self,
            item_query=None
    ):
        """
        信息流查看商品列表
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43333

        :param item_query: 查询条件
        """
        return self._top_request(
            "taobao.feedflow.item.item.page",
            {
                "item_query": item_query
            }
        )

    def taobao_feedflow_item_adgroup_adzone_page(
            self,
            adzone_bind_query
    ):
        """
        信息流单元下查看绑定资源位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43334

        :param adzone_bind_query: 查询条件
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.adzone.page",
            {
                "adzone_bind_query": adzone_bind_query
            }
        )

    def taobao_feedflow_item_adgroup_adzone_unbind(
            self,
            adzone_id_list,
            adgroup_id
    ):
        """
        信息流单元内解绑资源位
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43335

        :param adzone_id_list: 广告位id
        :param adgroup_id: 单元id
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.adzone.unbind",
            {
                "adzone_id_list": adzone_id_list,
                "adgroup_id": adgroup_id
            }
        )

    def taobao_feedflow_account_rpthourlist(
            self,
            rpt_query
    ):
        """
        超级推荐广告主分时报表查询
        广告主分时报表查询，支持广告主查询最近90天内某一天的账户维度分时报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43345

        :param rpt_query: 查询参数
        """
        return self._top_request(
            "taobao.feedflow.account.rpthourlist",
            {
                "rpt_query": rpt_query
            }
        )

    def taobao_feedflow_account_rptdailylist(
            self,
            rpt_query_d_t_o
    ):
        """
        获取广告主分日数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43347

        :param rpt_query_d_t_o: 查询条件
        """
        return self._top_request(
            "taobao.feedflow.account.rptdailylist",
            {
                "rpt_query_d_t_o": rpt_query_d_t_o
            }
        )

    def taobao_feedflow_item_adgroup_creative_page(
            self,
            creative_bind_query
    ):
        """
        信息流单元下查看创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43348

        :param creative_bind_query: 绑定查询条件
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.creative.page",
            {
                "creative_bind_query": creative_bind_query
            }
        )

    def taobao_feedflow_item_creative_delete(
            self,
            creative_id_list
    ):
        """
        信息流删除创意
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43349

        :param creative_id_list: 创意id列表
        """
        return self._top_request(
            "taobao.feedflow.item.creative.delete",
            {
                "creative_id_list": creative_id_list
            }
        )

    def taobao_feedflow_item_campaign_rptdailylist(
            self,
            rpt_query_d_t_o
    ):
        """
        推广计划分日数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43352

        :param rpt_query_d_t_o: 查询条件
        """
        return self._top_request(
            "taobao.feedflow.item.campaign.rptdailylist",
            {
                "rpt_query_d_t_o": rpt_query_d_t_o
            }
        )

    def taobao_feedflow_item_adgroup_rptdailylist(
            self,
            rpt_query_d_t_o
    ):
        """
        推广单元分日数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43362

        :param rpt_query_d_t_o: 查询条件
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.rptdailylist",
            {
                "rpt_query_d_t_o": rpt_query_d_t_o
            }
        )

    def taobao_feedflow_item_adzone_rptdailylist(
            self,
            rpt_query_d_t_o
    ):
        """
        资源包分日数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43365

        :param rpt_query_d_t_o: 查询参数
        """
        return self._top_request(
            "taobao.feedflow.item.adzone.rptdailylist",
            {
                "rpt_query_d_t_o": rpt_query_d_t_o
            }
        )

    def taobao_feedflow_item_crowd_rptdailylist(
            self,
            rpt_query_d_t_o
    ):
        """
        定向分日数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43367

        :param rpt_query_d_t_o: 查询条件
        """
        return self._top_request(
            "taobao.feedflow.item.crowd.rptdailylist",
            {
                "rpt_query_d_t_o": rpt_query_d_t_o
            }
        )

    def taobao_feedflow_item_creative_rptdailylist(
            self,
            rpt_query_d_t_o
    ):
        """
        创意分日数据查询
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43377

        :param rpt_query_d_t_o: 查询条件
        """
        return self._top_request(
            "taobao.feedflow.item.creative.rptdailylist",
            {
                "rpt_query_d_t_o": rpt_query_d_t_o
            }
        )

    def taobao_feedflow_item_campaign_rpthourlist(
            self,
            rpt_query
    ):
        """
        超级推荐【商品推广】计划分时报表查询
        广告主推广计划分时数据查询，支持广告主查询最近90天内某一天的计划维度分时报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43476

        :param rpt_query: 查询参数
        """
        return self._top_request(
            "taobao.feedflow.item.campaign.rpthourlist",
            {
                "rpt_query": rpt_query
            }
        )

    def taobao_feedflow_item_adgroup_rpthourlist(
            self,
            rpt_query
    ):
        """
        超级推荐【商品推广】单元分时报表查询
        广告主推广组分时数据查询，支持广告主查询最近90天内某一天的单元维度分时报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43477

        :param rpt_query: 查询参数
        """
        return self._top_request(
            "taobao.feedflow.item.adgroup.rpthourlist",
            {
                "rpt_query": rpt_query
            }
        )

    def taobao_feedflow_item_crowd_rpthourlist(
            self,
            rpt_query
    ):
        """
        超级推荐【商品推广】定向分时报表查询
        广告主定向分时数据查询，支持广告主查询最近90天内某一天的定向维度分时报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43478

        :param rpt_query: 查询参数
        """
        return self._top_request(
            "taobao.feedflow.item.crowd.rpthourlist",
            {
                "rpt_query": rpt_query
            }
        )

    def taobao_feedflow_item_adzone_rpthourlist(
            self,
            rpt_query
    ):
        """
        超级推荐【商品推广】资源位分时报表查询
        广告主资源包分时数据查询，支持广告主查询最近90天内某一天的资源包维度分时报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43479

        :param rpt_query: 查询参数
        """
        return self._top_request(
            "taobao.feedflow.item.adzone.rpthourlist",
            {
                "rpt_query": rpt_query
            }
        )

    def taobao_feedflow_item_creative_rpthourlist(
            self,
            rpt_query
    ):
        """
        超级推荐【商品推广】创意分时报表查询
        创意分时数据查询，支持广告主查询最近90天内某一天的创意维度分时报表数据
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43480

        :param rpt_query: 查询参数
        """
        return self._top_request(
            "taobao.feedflow.item.creative.rpthourlist",
            {
                "rpt_query": rpt_query
            }
        )


class TbXinLingShouGongYingLian(DingTalkBaseAPI):
    """
    新零售供应链API
    """

    def alibaba_ascp_salecategory_query(
            self,
            item_id
    ):
        """
        货品品类查询
        根据货品ID查询对应销售品类ID
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43726

        :param item_id: 货品ID
        """
        return self._top_request(
            "alibaba.ascp.salecategory.query",
            {
                "item_id": item_id
            },
            result_processor=lambda x: x["data_list"]
        )


class TbAliOSZhiFu(DingTalkBaseAPI):
    """
    AliOS支付API
    """

    def aliyun_alios_pay_token_get(
            self,
            get_token_request=None
    ):
        """
        获取支付token
        商户用来获取支付的授权token
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43983

        :param get_token_request: 请求参数
        """
        return self._top_request(
            "aliyun.alios.pay.token.get",
            {
                "get_token_request": get_token_request
            },
            result_processor=lambda x: x["aliospay_response"]
        )


class TbCaiNiaoKongZhiTa(DingTalkBaseAPI):
    """
    菜鸟控制塔API
    """

    def cainiao_ecc_exceptions_delay_get(
            self,
            mail_no
    ):
        """
        菜鸟控制塔包裹滞留异常信息获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43853

        :param mail_no: 运单号
        """
        return self._top_request(
            "cainiao.ecc.exceptions.delay.get",
            {
                "mail_no": mail_no
            }
        )

    def cainiao_ecc_exceptions_delay_count(
            self
    ):
        """
        菜鸟控制塔包裹滞留异常统计信息获取
        文档地址：https://open-doc.dingtalk.com/docs/api.htm?apiId=43854

        """
        return self._top_request(
            "cainiao.ecc.exceptions.delay.count"
        )


class TaobaoMixin(object):
    """
    淘宝接口集合
    本接口未经测试，用于生产前请提前自行测试，有问题可提Issues
    """

    tbdingding = TbDingDing()
    tbyonghu = TbYongHu()
    tbleimu = TbLeiMu()
    tbshangpin = TbShangPin()
    tbjiaoyi = TbJiaoYi()
    tbpingjia = TbPingJia()
    tbwuliu = TbWuLiu()
    tbdianpu = TbDianPu()
    tbfenxiao = TbFenXiao()
    tbwangwang = TbWangWang()
    tbtaobaoke = TbTaoBaoKe()
    tbgongju = TbGongJu()
    tbwuliubao = TbWuLiuBao()
    tbzhitongche = TbZhiTongChe()
    tbjipiao = TbJiPiao()
    tbonsxiaoxifuwu = TbONSXiaoXiFuWu()
    tbyingxiao = TbYingXiao()
    tbshuju = TbShuJu()
    tbjiudian = TbJiuDian()
    tbjuhuasuan = TbJuHuaSuan()
    tbdianpuhuiyuanguanli = TbDianPuHuiYuanGuanLi()
    tbtaodiandianwaimai = TbTaoDianDianWaiMai()
    tbduomeitipingtai = TbDuoMeiTiPingTai()
    tbzizhanghaoguanli = TbZiZhangHaoGuanLi()
    tbfuwupingtai = TbFuWuPingTai()
    tbtuikuan = TbTuiKuan()
    tbzhijianpinkong = TbZhiJianPinKong()
    tbguanliantuijian = TbGuanLianTuiJian()
    tbtianmaofuwushangpin = TbTianMaoFuWuShangPin()
    tbtianmaojingpinku = TbTianMaoJingPinKu()
    tbjushita = TbJuShiTa()
    tbdianziwuliu = TbDianZiWuLiu()
    tbcaipiao = TbCaiPiao()
    tbzhangwu = TbZhangWu()
    tbpaimai = TbPaiMai()
    tbqianniujiekou = TbQianNiuJieKou()
    tbxiaoxifuwu = TbXiaoXiFuWu()
    tbbendishenghuo = TbBenDiShengHuo()
    tbaliyunocs = TbALiYunOcs()
    tbyunos = TbYunOS()
    tbaliyun = TbALiYun()
    tbhuochepiao = TbHuoChePiao()
    tbtae = TbTAE()
    tbtanx = TbTanx()
    tbshoutaokaifang = TbShouTaoKaiFang()
    tbjae = TbJAE()
    tbbaodian = TbBaoDian()
    tbjaezujian = TbJAEZuJian()
    tbtianmaohuiyuanjifen = TbTianMaoHuiYuanJiFen()
    tbqichepiao = TbQiChePiao()
    tbmashangtao = TbMaShangTao()
    tbyouxijilipingtai = TbYouXiJiLiPingTai()
    tbtaobaochoujiangpingtai = TbTaoBaoChouJiangPingTai()
    tbtianmaoguoji = TbTianMaoGuoJi()
    tbsifapaimai = TbSiFaPaiMai()
    tbxiami = TbXiaMi()
    tbtianmaohudongjiekou = TbTianMaoHuDongJieKou()
    tbdmp = TbDMP()
    tbshenghuofuwu = TbShengHuoFuWu()
    tbshoujitaobao = TbShouJiTaoBao()
    tbwulian = TbWuLian()
    tbhanglv = TbHangLv()
    tbjiudiandaogou = TbJiuDianDaoGou()
    tbbaoxian = TbBaoXian()
    tbyiyaoguan = TbYiYaoGuan()
    tbtianmaomeizhuang = TbTianMaoMeiZhuang()
    tbdianzimiandan = TbDianZiMianDan()
    tbdianyingpiao = TbDianYingPiao()
    tbalitongxin = TbALiTongXin()
    tbtvyouxi = TbTVYouXi()
    tbopenim = TbOpenim()
    tbanquanpingce = TbAnQuanPingCe()
    tbdsp = TbDSP()
    tbalichelianwang = TbALiCheLianWang()
    tbzuanzhan = TbZuanZhan()
    tbxuniyuanxian = TbXuNiYuanXian()
    tbzhishiku = TbZhiShiKu()
    tbfanqizhafengkong = TbFanQiZhaFengKong()
    tbguojizhanwaimaozhitongche = TbGuoJiZhanWaiMaoZhiTongChe()
    tbtianmaofuwushuju = TbTianMaoFuWuShuJu()
    tbzhinengshebei = TbZhiNengSheBei()
    tbbaichuan = TbBaiChuan()
    tbwenbensuanfa = TbWenBenSuanFa()
    tbbaichuantuisong = TbBaiChuanTuiSong()
    tbguojizhanshangpin = TbGuoJiZhanShangPin()
    tbtaobaoyouxi = TbTaoBaoYouXi()
    tbjuanquan = TbJuAnQuan()
    tbmiaojie = TbMiaoJie()
    tbcainiaopeisong = TbCaiNiaoPeiSong()
    tbcainiaocangpei = TbCaiNiaoCangPei()
    tbwangshangfatingduiwai = TbWangShangFaTingDuiWai()
    tbwudaokou = TbWuDaoKou()
    tbalidayu = TbALiDaYu()
    tbtaobaoneirong = TbTaoBaoNeiRong()
    tblvxingyongche = TbLvXingYongChe()
    tbmenpiaoshangpinguanli = TbMenPiaoShangPinGuanLi()
    tbcainiaowuxian = TbCaiNiaoWuXian()
    tbqimencangchu = TbQiMenCangChu()
    tbyunostuisongfuwuapi = TbYunosTuiSongFuWuApi()
    tbshenghuohui = TbShengHuoHui()
    tbtvzhifu = TbTvZhiFu()
    tbyunosid2 = TbYunOSID2()
    tbcainiaojihuo = TbCaiNiaoJiHuo()
    tbdidongyi = TbDiDongYi()
    tbalijiankangyao = TbALiJianKangYao()
    tbshoutaofenxiang = TbShouTaoFenXiang()
    tbfawususongduiwai = TbFaWuSuSongDuiWai()
    tbdujiashangpinguanli = TbDuJiaShangPinGuanLi()
    tbjiudianshangpin = TbJiuDianShangPin()
    tbjiudianzaixianyuding = TbJiuDianZaiXianYuDing()
    tbjiudianguanwangxinyongzhu = TbJiuDianGuanWangXinYongZhu()
    tbjiudianxianxiaxinyongzhu = TbJiuDianXianXiaXinYongZhu()
    tbquanqudao = TbQuanQuDao()
    tbguojijipiaozhengce = TbGuoJiJiPiaoZhengCe()
    tbguojijipiaodingdan = TbGuoJiJiPiaoDingDan()
    tbguoneijipiaodingdan = TbGuoNeiJiPiaoDingDan()
    tbguoneijipiaojinghang = TbGuoNeiJiPiaoJingHang()
    tbdujiamenpiaojiaoyiguanli = TbDuJiaMenPiaoJiaoYiGuanLi()
    tbalitiyu = TbALiTiYu()
    tbdianzifapiao = TbDianZiFaPiao()
    tbguojizhanshujuguanjia = TbGuoJiZhanShuJuGuanJia()
    tbtmallcarcenter = TbTmallcarcenter()
    tbyunosaccount = TbYunosAccount()
    tbcainiaoguoguo = TbCaiNiaoGuoGuo()
    tbdujiaqianzhengguanli = TbDuJiaQianZhengGuanLi()
    tbaliyinyueyinyuejiaoyi = TbALiYinYueYinYueJiaoYi()
    tbaliyinyueyunyinghuodong = TbALiYinYueYunYingHuoDong()
    tbcainiaonongcunwuliu = TbCaiNiaoNongCunWuLiu()
    tbtijianjigou = TbTiJianJiGou()
    tb1688tuike = Tb1688TuiKe()
    tbshanghu = TbShangHu()
    tbzhuomian = TbZhuoMian()
    tbdiandongche = TbDianDongChe()
    tbzhengfuxietong = TbZhengFuXieTong()
    tbxinlingshou = TbXinLingShou()
    tbscm = TbSCM()
    tbbaichuanctg = TbBaiChuanCtg()
    tbhuijin = TbHuiJin()
    tbshuyumeizishuchu = TbShuYuMeiZiShuChu()
    tbshanglv = TbShangLv()
    tbzhinengpos = TbZhiNengPOS()
    tblingshouplus = TbLingShouPlus()
    tbtianmaomendian = TbTianMaoMenDian()
    tbailabtuxiangsuanfa = TbAILABTuXiangSuanFa()
    tbtianmaogongyinglian = TbTianMaoGongYingLian()
    tbhuanxingkaifapingtai = TbHuanXingKaiFaPingTai()
    tbkuajing = TbKuaJing()
    tbyingkesongpaizhaoshenhejiekou = TbYingKeSongPaiZhaoShenHeJieKou()
    tbioti = TbIoTI()
    tbtaobaokaquanpingtai = TbTaoBaoKaQuanPingTai()
    tbzhihuimendian = TbZhiHuiMenDian()
    tbxianyu = TbXianYu()
    tbkucun = TbKuCun()
    tbyunosguanggao = TbYunOSGuangGao()
    tbqimenposjiekou = TbQiMenPOSJieKou()
    tbalijiankangzhuisuma = TbALiJianKangZhuiSuMa()
    tbhuiyuanzhongxin = TbHuiYuanZhongXin()
    tbalijiankanghuiyuanguanli = TbALiJianKangHuiYuanGuanLi()
    tbpinxiao = TbPinXiao()
    tbxiaomi = TbXiaoMi()
    tbdamaipiaowuyunfenxiao = TbDaMaiPiaoWuYunFenXiao()
    tbtianmaojinglingkaifang = TbTianMaoJingLingKaiFang()
    tbzhihuiyuanqu = TbZhiHuiYuanQu()
    tbjiudianhuiyuan = TbJiuDianHuiYuan()
    tbdamai = TbDaMai()
    tbpinpaihaoapi = TbPinPaiHaoApi()
    tbhuanhuo = TbHuanHuo()
    tbshangjiayingxiaozhongxin = TbShangJiaYingXiaoZhongXin()
    tbicburfq = TbICBURFQ()
    tbicbuxinbao = TbICBUXinBao()
    tbfeizhupoishuju = TbFeiZhuPOIShuJu()
    tbfeizhuxingzhengquhua = TbFeiZhuXingZhengQuHua()
    tbfensipa = TbFenSiPa()
    tblingshouzhongduan = TbLingShouZhongDuan()
    tbaliosyingyongzhongxin = TbALiOSYingYongZhongXin()
    tbb2brenzhengpingtaiapi = TbB2bRenZhengPingTaiApi()
    tbqiyeyunyingpingtaijituancaiwu = TbQiYeYunYingPingTaiJiTuanCaiWu()
    tbrarhuiliu = TbRARHuiLiu()
    tblingshoutongzhinengposkaifang = TbLingShouTongZhiNengPOSKaiFang()
    tbalibabagongyinglianpingtai = TbALiBaBaGongYingLianPingTai()
    tbtianmaoxinlingshou = TbTianMaoXinLingShou()
    tbdpaas = TbDPAAS()
    tbaliyingyeyunzhi = TbALiYingYeYunZhi()
    tbqudaozhongxin = TbQuDaoZhongXin()
    tbalijiankangyimiao = TbALiJianKangYiMiao()
    tbjiaoyuzhanghao = TbJiaoYuZhangHao()
    tbyonghuzengzhang = TbYongHuZengZhang()
    tbaegongyinglian = TbAEGongYingLian()
    tbhudongba = TbHuDongBa()
    tbfeizhujipiaoqiantaileimu = TbFeiZhuJiPiaoQianTaiLeiMu()
    tbpingtaizhili = TbPingTaiZhiLi()
    tbxiamikaifangpingtai = TbXiaMiKaiFangPingTai()
    tbalijiankangyisheng = TbALiJianKangYiSheng()
    tbfeizhujiudianbiaozhunku = TbFeiZhuJiuDianBiaoZhunKu()
    tbaedropshipper = TbAEDropshipper()
    tbxinxipingtaicaigou = TbXinXiPingTaiCaiGou()
    tblingshoutongzidongshouhuoji = TbLingShouTongZiDongShouHuoJi()
    tbottzhifu = TbOttZhiFu()
    tbtianmaoqiche = TbTianMaoQiChe()
    tbaliosguanggaopingtai = TbALIOSGuangGaoPingTai()
    tbtaobaosousuo = TbTaoBaoSouSuo()
    tbyewupingtaixinlingshou = TbYeWuPingTaiXinLingShou()
    tbshenjingyingyong = TbShenJingYingYong()
    tbaliyingyedengta = TbALiYingYeDengTa()
    tbjili = TbJiLi()
    tbyoukumeizi = TbYouKuMeiZi()
    tbyoukuwangmeng = TbYouKuWangMeng()
    tbalijiankang = TbALiJianKang()
    tbxinzhizao = TbXinZhiZao()
    tblingshoutongxiaodianzhinengshebei = TbLingShouTongXiaoDianZhiNengSheBei()
    tbyizhilushipin = TbYiZhiLuShiPin()
    tbwudaokoushangpin = TbWuDaoKouShangPin()
    tblingshoutongdingdanlvxing = TbLingShouTongDingDanLvXing()
    tbtianmaoxianxiadaping = TbTianMaoXianXiaDaPing()
    tbalijiankanghiot = TbALiJianKangHIOT()
    tbtvosyingyongshenhepingtai = TbTVOSYingYongShenHePingTai()
    tbaeoverseasolution = TbAEOverseaSolution()
    tbalijinglingjichunenglijiekou = TbALiJingLingJiChuNengLiJieKou()
    tbalijiankangxinlingshou = TbALiJianKangXinLingShou()
    tbxianyufabu = TbXianYuFaBu()
    tbrengongzhinengshiyanshikaifangpingtai = TbRenGongZhiNengShiYanShiKaiFangPingTai()
    tbchengshihehuoren = TbChengShiHeHuoRen()
    tbalijiankangzhihuiyiliao = TbALiJianKangZhiHuiYiLiao()
    tbtianmaoxinpinchuangxinzhongxin = TbTianMaoXinPinChuangXinZhongXin()
    tbmozizhanghao = TbMOZIZhangHao()
    tbqinchengliwestcrm = TbQinChengLiWestcrm()
    tbicbuchuchuang = TbICBUChuChuang()
    tbhomeai = TbHOMEAI()
    tbzizhigongxiang = TbZiZhiGongXiang()
    tbyewupingtaishiyebushuiwupingtai = TbYeWuPingTaiShiYeBuShuiWuPingTai()
    tblingshoutonggonggong = TbLingShouTongGongGong()
    tbhudongxiaoyouxi = TbHuDongXiaoYouXi()
    tbalijiankangyi = TbALiJianKangYi()
    tbsifakaifangpingtai = TbSiFaKaiFangPingTai()
    tbicbushangpin = TbICBUShangPin()
    tbshoutaoyonghuzengzhang = TbShouTaoYongHuZengZhang()
    tbyunma = TbYunMa()
    tbxinlingshoupos = TbXinLingShouPOS()
    tbtianmaouxian = TbTianMaoUXian()
    tbyoukubokonghuanying = TbYouKuBoKongHuanYing()
    tbihome = TbiHome()
    tbxinxiliu = TbXinXiLiu()
    tbxinlingshougongyinglian = TbXinLingShouGongYingLian()
    tbalioszhifu = TbAliOSZhiFu()
    tbcainiaokongzhita = TbCaiNiaoKongZhiTa()
